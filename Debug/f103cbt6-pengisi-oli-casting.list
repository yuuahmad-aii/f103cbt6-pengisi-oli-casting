
f103cbt6-pengisi-oli-casting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011164  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08011278  08011278  00012278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d1c  08011d1c  00013358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011d1c  08011d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d24  08011d24  00013358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d24  08011d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011d28  08011d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  08011d2c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001620  20000358  08012084  00013358  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001978  08012084  00013978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00013358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ffb  00000000  00000000  00013381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ef  00000000  00000000  0002c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001165  00000000  00000000  00032248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd90  00000000  00000000  000333ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e69e  00000000  00000000  0005013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d54  00000000  00000000  0006e7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff52f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b0  00000000  00000000  000ff574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00106b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0801125c 	.word	0x0801125c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0801125c 	.word	0x0801125c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <lcd_send_cmd>:
#define LCD_I2C_ADDR 0x4E // Alamat umum adalah 0x27 << 1 atau 0x3F << 1. Cek datasheet.

I2C_HandleTypeDef *i2c_handle;

void lcd_send_cmd(char cmd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // en=1, rs=0
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f043 030c 	orr.w	r3, r3, #12
 800119a:	b2db      	uxtb	r3, r3
 800119c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // en=0, rs=0
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // en=1, rs=0
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	f043 030c 	orr.w	r3, r3, #12
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // en=0, rs=0
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <lcd_send_cmd+0x5c>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	@ 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	214e      	movs	r1, #78	@ 0x4e
 80011cc:	f002 fb7c 	bl	80038c8 <HAL_I2C_Master_Transmit>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000374 	.word	0x20000374

080011dc <lcd_send_data>:

void lcd_send_data(char data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f023 030f 	bic.w	r3, r3, #15
 80011ec:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // en=1, rs=1
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	f043 030d 	orr.w	r3, r3, #13
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // en=0, rs=1
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	f043 0309 	orr.w	r3, r3, #9
 8001204:	b2db      	uxtb	r3, r3
 8001206:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // en=1, rs=1
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	f043 030d 	orr.w	r3, r3, #13
 800120e:	b2db      	uxtb	r3, r3
 8001210:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // en=0, rs=1
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f043 0309 	orr.w	r3, r3, #9
 8001218:	b2db      	uxtb	r3, r3
 800121a:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <lcd_send_data+0x5c>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	@ 0x4e
 800122c:	f002 fb4c 	bl	80038c8 <HAL_I2C_Master_Transmit>
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000374 	.word	0x20000374

0800123c <lcd_clear>:

void lcd_clear(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff ff9b 	bl	800117c <lcd_send_cmd>
    HAL_Delay(2);
 8001246:	2002      	movs	r0, #2
 8001248:	f001 fc7a 	bl	8002b40 <HAL_Delay>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <lcd_set_cursor>:

void lcd_set_cursor(int row, int col)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    uint8_t cursor_addr;
    switch (row)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <lcd_set_cursor+0x18>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d005      	beq.n	8001272 <lcd_set_cursor+0x22>
 8001266:	e009      	b.n	800127c <lcd_set_cursor+0x2c>
    {
    case 0:
        cursor_addr = 0x80 + col;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3b80      	subs	r3, #128	@ 0x80
 800126e:	73fb      	strb	r3, [r7, #15]
        break;
 8001270:	e008      	b.n	8001284 <lcd_set_cursor+0x34>
    case 1:
        cursor_addr = 0xC0 + col;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b40      	subs	r3, #64	@ 0x40
 8001278:	73fb      	strb	r3, [r7, #15]
        break;
 800127a:	e003      	b.n	8001284 <lcd_set_cursor+0x34>
    default:
        cursor_addr = 0x80 + col;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3b80      	subs	r3, #128	@ 0x80
 8001282:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(cursor_addr);
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff78 	bl	800117c <lcd_send_cmd>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 800129c:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <lcd_init+0x84>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 80012a2:	2032      	movs	r0, #50	@ 0x32
 80012a4:	f001 fc4c 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x30);
 80012a8:	2030      	movs	r0, #48	@ 0x30
 80012aa:	f7ff ff67 	bl	800117c <lcd_send_cmd>
    HAL_Delay(5);
 80012ae:	2005      	movs	r0, #5
 80012b0:	f001 fc46 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x30);
 80012b4:	2030      	movs	r0, #48	@ 0x30
 80012b6:	f7ff ff61 	bl	800117c <lcd_send_cmd>
    HAL_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f001 fc40 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x30);
 80012c0:	2030      	movs	r0, #48	@ 0x30
 80012c2:	f7ff ff5b 	bl	800117c <lcd_send_cmd>
    HAL_Delay(10);
 80012c6:	200a      	movs	r0, #10
 80012c8:	f001 fc3a 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x20);
 80012cc:	2020      	movs	r0, #32
 80012ce:	f7ff ff55 	bl	800117c <lcd_send_cmd>
    HAL_Delay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f001 fc34 	bl	8002b40 <HAL_Delay>

    lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012d8:	2028      	movs	r0, #40	@ 0x28
 80012da:	f7ff ff4f 	bl	800117c <lcd_send_cmd>
    HAL_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f001 fc2e 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 80012e4:	2008      	movs	r0, #8
 80012e6:	f7ff ff49 	bl	800117c <lcd_send_cmd>
    HAL_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f001 fc28 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x01); // clear display
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ff43 	bl	800117c <lcd_send_cmd>
    HAL_Delay(2);
 80012f6:	2002      	movs	r0, #2
 80012f8:	f001 fc22 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012fc:	2006      	movs	r0, #6
 80012fe:	f7ff ff3d 	bl	800117c <lcd_send_cmd>
    HAL_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f001 fc1c 	bl	8002b40 <HAL_Delay>
    lcd_send_cmd(0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001308:	200c      	movs	r0, #12
 800130a:	f7ff ff37 	bl	800117c <lcd_send_cmd>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000374 	.word	0x20000374

0800131c <lcd_send_string>:

void lcd_send_string(char *str)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    while (*str)
 8001324:	e006      	b.n	8001334 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff54 	bl	80011dc <lcd_send_data>
    while (*str)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f4      	bne.n	8001326 <lcd_send_string+0xa>
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <VCP_printf>:
/* USER CODE BEGIN 0 */

/**
 * @brief Mengirim string terformat melalui USB VCP.
 */
void VCP_printf(const char *format, ...) {
 8001346:	b40f      	push	{r0, r1, r2, r3}
 8001348:	b580      	push	{r7, lr}
 800134a:	b0c2      	sub	sp, #264	@ 0x108
 800134c:	af00      	add	r7, sp, #0
	char buf[256];
	va_list args;
	va_start(args, format);
 800134e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800135a:	601a      	str	r2, [r3, #0]
	vsnprintf(buf, sizeof(buf), format, args);
 800135c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001364:	f107 0008 	add.w	r0, r7, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800136e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001372:	f00b ff9b 	bl	800d2ac <vsniprintf>
	va_end(args);
	CDC_Transmit_FS((uint8_t*) buf, strlen(buf));
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe fee8 	bl	8000150 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f00a fbc8 	bl	800bb20 <CDC_Transmit_FS>
}
 8001390:	bf00      	nop
 8001392:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001396:	46bd      	mov	sp, r7
 8001398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800139c:	b004      	add	sp, #16
 800139e:	4770      	bx	lr

080013a0 <Set_Default_Parameters>:

/**
 * @brief Mengatur parameter ke nilai default.
 */
void Set_Default_Parameters(void) {
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	g_params.magic_number = FLASH_MAGIC_NUMBER;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <Set_Default_Parameters+0x54>)
 80013a8:	601a      	str	r2, [r3, #0]
	g_params.tinggi_A = 100.0f;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <Set_Default_Parameters+0x58>)
 80013ae:	605a      	str	r2, [r3, #4]
	g_params.ambang_bawah_A = 25.0f;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <Set_Default_Parameters+0x5c>)
 80013b4:	609a      	str	r2, [r3, #8]
	g_params.target_penuh_A = 95.0f;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <Set_Default_Parameters+0x60>)
 80013ba:	60da      	str	r2, [r3, #12]
	g_params.tinggi_B = 150.0f;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013be:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <Set_Default_Parameters+0x64>)
 80013c0:	611a      	str	r2, [r3, #16]
	g_params.ambang_bawah_B = 25.0f;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <Set_Default_Parameters+0x5c>)
 80013c6:	615a      	str	r2, [r3, #20]
	g_params.target_penuh_B = 95.0f;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <Set_Default_Parameters+0x60>)
 80013cc:	619a      	str	r2, [r3, #24]
	g_params.tinggi_C = 120.0f;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <Set_Default_Parameters+0x68>)
 80013d2:	61da      	str	r2, [r3, #28]
	g_params.ambang_bawah_C = 25.0f;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013d6:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <Set_Default_Parameters+0x5c>)
 80013d8:	621a      	str	r2, [r3, #32]
	g_params.target_penuh_C = 95.0f;
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013dc:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <Set_Default_Parameters+0x60>)
 80013de:	625a      	str	r2, [r3, #36]	@ 0x24
	g_params.sumber_kosong = 1.0f;
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <Set_Default_Parameters+0x50>)
 80013e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	2000057c 	.word	0x2000057c
 80013f4:	deadbeef 	.word	0xdeadbeef
 80013f8:	42c80000 	.word	0x42c80000
 80013fc:	41c80000 	.word	0x41c80000
 8001400:	42be0000 	.word	0x42be0000
 8001404:	43160000 	.word	0x43160000
 8001408:	42f00000 	.word	0x42f00000

0800140c <Save_Parameters_To_Flash>:

/**
 * @brief Menyimpan parameter ke Flash.
 */
void Save_Parameters_To_Flash(void) {
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001412:	f001 fde9 	bl	8002fe8 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
	EraseInitStruct.PageAddress = FLASH_STORAGE_ADDRESS;
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <Save_Parameters_To_Flash+0x94>)
 8001420:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbPages = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	613b      	str	r3, [r7, #16]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 8001426:	463a      	mov	r2, r7
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fec3 	bl	80031b8 <HAL_FLASHEx_Erase>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <Save_Parameters_To_Flash+0x38>
		VCP_printf("Error: Gagal menghapus Flash!\r\n");
 8001438:	481a      	ldr	r0, [pc, #104]	@ (80014a4 <Save_Parameters_To_Flash+0x98>)
 800143a:	f7ff ff84 	bl	8001346 <VCP_printf>
		HAL_FLASH_Lock();
 800143e:	f001 fdf9 	bl	8003034 <HAL_FLASH_Lock>
 8001442:	e029      	b.n	8001498 <Save_Parameters_To_Flash+0x8c>
		return;
	}

	uint32_t address = FLASH_STORAGE_ADDRESS;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <Save_Parameters_To_Flash+0x94>)
 8001446:	61fb      	str	r3, [r7, #28]
	uint32_t *data_ptr = (uint32_t*) &g_params;
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <Save_Parameters_To_Flash+0x9c>)
 800144a:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < sizeof(ControlParams) / 4; i++) {
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	e01a      	b.n	8001488 <Save_Parameters_To_Flash+0x7c>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data_ptr[i])
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	461c      	mov	r4, r3
 8001460:	4615      	mov	r5, r2
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	69f9      	ldr	r1, [r7, #28]
 8001468:	2002      	movs	r0, #2
 800146a:	f001 fd4d 	bl	8002f08 <HAL_FLASH_Program>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <Save_Parameters_To_Flash+0x70>
				!= HAL_OK) {
			VCP_printf("Error: Gagal menulis ke Flash!\r\n");
 8001474:	480d      	ldr	r0, [pc, #52]	@ (80014ac <Save_Parameters_To_Flash+0xa0>)
 8001476:	f7ff ff66 	bl	8001346 <VCP_printf>
			break;
 800147a:	e008      	b.n	800148e <Save_Parameters_To_Flash+0x82>
		}
		address += 4;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3304      	adds	r3, #4
 8001480:	61fb      	str	r3, [r7, #28]
	for (size_t i = 0; i < sizeof(ControlParams) / 4; i++) {
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d9e1      	bls.n	8001452 <Save_Parameters_To_Flash+0x46>
	}

	HAL_FLASH_Lock();
 800148e:	f001 fdd1 	bl	8003034 <HAL_FLASH_Lock>
	VCP_printf("OK: Parameter berhasil disimpan ke Flash.\r\n");
 8001492:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <Save_Parameters_To_Flash+0xa4>)
 8001494:	f7ff ff57 	bl	8001346 <VCP_printf>
}
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800fc00 	.word	0x0800fc00
 80014a4:	08011278 	.word	0x08011278
 80014a8:	2000057c 	.word	0x2000057c
 80014ac:	08011298 	.word	0x08011298
 80014b0:	080112bc 	.word	0x080112bc

080014b4 <Load_Parameters_From_Flash>:

/**
 * @brief Memuat parameter dari Flash. Jika gagal, gunakan nilai default.
 */
void Load_Parameters_From_Flash(void) {
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
	ControlParams params_from_flash;
	memcpy(&params_from_flash, (void*) FLASH_STORAGE_ADDRESS,
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <Load_Parameters_From_Flash+0x48>)
 80014bc:	1d3c      	adds	r4, r7, #4
 80014be:	461d      	mov	r5, r3
 80014c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			sizeof(ControlParams));

	if (params_from_flash.magic_number == FLASH_MAGIC_NUMBER) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <Load_Parameters_From_Flash+0x4c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10b      	bne.n	80014f0 <Load_Parameters_From_Flash+0x3c>
		memcpy(&g_params, &params_from_flash, sizeof(ControlParams));
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <Load_Parameters_From_Flash+0x50>)
 80014da:	461d      	mov	r5, r3
 80014dc:	1d3c      	adds	r4, r7, #4
 80014de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		// VCP belum tentu siap di sini, jadi jangan print
	} else {
		Set_Default_Parameters();
	}
}
 80014ee:	e001      	b.n	80014f4 <Load_Parameters_From_Flash+0x40>
		Set_Default_Parameters();
 80014f0:	f7ff ff56 	bl	80013a0 <Set_Default_Parameters>
}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	@ 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdb0      	pop	{r4, r5, r7, pc}
 80014fc:	0800fc00 	.word	0x0800fc00
 8001500:	deadbeef 	.word	0xdeadbeef
 8001504:	2000057c 	.word	0x2000057c

08001508 <Process_Command>:

/**
 * @brief Memproses perintah yang diterima dari USB VCP.
 */
void Process_Command(uint8_t *cmd_buffer) {
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b08a      	sub	sp, #40	@ 0x28
 800150e:	af04      	add	r7, sp, #16
 8001510:	6078      	str	r0, [r7, #4]
	char *cmd = (char*) cmd_buffer;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	617b      	str	r3, [r7, #20]
	float min, max;

	if (strncmp(cmd, "$$", 2) == 0) {
 8001516:	2202      	movs	r2, #2
 8001518:	49aa      	ldr	r1, [pc, #680]	@ (80017c4 <Process_Command+0x2bc>)
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f00b fedc 	bl	800d2d8 <strncmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d167      	bne.n	80015f6 <Process_Command+0xee>
		VCP_printf("--- Parameter Saat Ini ---\r\n");
 8001526:	48a8      	ldr	r0, [pc, #672]	@ (80017c8 <Process_Command+0x2c0>)
 8001528:	f7ff ff0d 	bl	8001346 <VCP_printf>
		VCP_printf("Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
				g_params.tinggi_A, g_params.ambang_bawah_A,
 800152c:	4ba7      	ldr	r3, [pc, #668]	@ (80017cc <Process_Command+0x2c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
		VCP_printf("Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff79 	bl	8000428 <__aeabi_f2d>
 8001536:	4680      	mov	r8, r0
 8001538:	4689      	mov	r9, r1
				g_params.tinggi_A, g_params.ambang_bawah_A,
 800153a:	4ba4      	ldr	r3, [pc, #656]	@ (80017cc <Process_Command+0x2c4>)
 800153c:	689b      	ldr	r3, [r3, #8]
		VCP_printf("Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff72 	bl	8000428 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
				g_params.target_penuh_A);
 8001548:	4ba0      	ldr	r3, [pc, #640]	@ (80017cc <Process_Command+0x2c4>)
 800154a:	68db      	ldr	r3, [r3, #12]
		VCP_printf("Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff6b 	bl	8000428 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155a:	e9cd 4500 	strd	r4, r5, [sp]
 800155e:	4642      	mov	r2, r8
 8001560:	464b      	mov	r3, r9
 8001562:	489b      	ldr	r0, [pc, #620]	@ (80017d0 <Process_Command+0x2c8>)
 8001564:	f7ff feef 	bl	8001346 <VCP_printf>
		VCP_printf("Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
				g_params.tinggi_B, g_params.ambang_bawah_B,
 8001568:	4b98      	ldr	r3, [pc, #608]	@ (80017cc <Process_Command+0x2c4>)
 800156a:	691b      	ldr	r3, [r3, #16]
		VCP_printf("Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff5b 	bl	8000428 <__aeabi_f2d>
 8001572:	4680      	mov	r8, r0
 8001574:	4689      	mov	r9, r1
				g_params.tinggi_B, g_params.ambang_bawah_B,
 8001576:	4b95      	ldr	r3, [pc, #596]	@ (80017cc <Process_Command+0x2c4>)
 8001578:	695b      	ldr	r3, [r3, #20]
		VCP_printf("Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff54 	bl	8000428 <__aeabi_f2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
				g_params.target_penuh_B);
 8001584:	4b91      	ldr	r3, [pc, #580]	@ (80017cc <Process_Command+0x2c4>)
 8001586:	699b      	ldr	r3, [r3, #24]
		VCP_printf("Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff4d 	bl	8000428 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001596:	e9cd 4500 	strd	r4, r5, [sp]
 800159a:	4642      	mov	r2, r8
 800159c:	464b      	mov	r3, r9
 800159e:	488d      	ldr	r0, [pc, #564]	@ (80017d4 <Process_Command+0x2cc>)
 80015a0:	f7ff fed1 	bl	8001346 <VCP_printf>
		VCP_printf("Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
				g_params.tinggi_C, g_params.ambang_bawah_C,
 80015a4:	4b89      	ldr	r3, [pc, #548]	@ (80017cc <Process_Command+0x2c4>)
 80015a6:	69db      	ldr	r3, [r3, #28]
		VCP_printf("Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff3d 	bl	8000428 <__aeabi_f2d>
 80015ae:	4680      	mov	r8, r0
 80015b0:	4689      	mov	r9, r1
				g_params.tinggi_C, g_params.ambang_bawah_C,
 80015b2:	4b86      	ldr	r3, [pc, #536]	@ (80017cc <Process_Command+0x2c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
		VCP_printf("Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff36 	bl	8000428 <__aeabi_f2d>
 80015bc:	4604      	mov	r4, r0
 80015be:	460d      	mov	r5, r1
				g_params.target_penuh_C);
 80015c0:	4b82      	ldr	r3, [pc, #520]	@ (80017cc <Process_Command+0x2c4>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		VCP_printf("Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n",
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff2f 	bl	8000428 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015d2:	e9cd 4500 	strd	r4, r5, [sp]
 80015d6:	4642      	mov	r2, r8
 80015d8:	464b      	mov	r3, r9
 80015da:	487f      	ldr	r0, [pc, #508]	@ (80017d8 <Process_Command+0x2d0>)
 80015dc:	f7ff feb3 	bl	8001346 <VCP_printf>
		VCP_printf("Ambang Sumber Kosong: %.1f%%\r\n", g_params.sumber_kosong);
 80015e0:	4b7a      	ldr	r3, [pc, #488]	@ (80017cc <Process_Command+0x2c4>)
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	487b      	ldr	r0, [pc, #492]	@ (80017dc <Process_Command+0x2d4>)
 80015f0:	f7ff fea9 	bl	8001346 <VCP_printf>
		VCP_printf("OK: Parameter dikembalikan ke default.\r\n");
	} else {
		VCP_printf(
				"Error: Perintah tidak dikenali. Ketik '$H' untuk bantuan.\r\n");
	}
}
 80015f4:	e0e0      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (strncmp(cmd, "$P", 2) == 0) {
 80015f6:	2202      	movs	r2, #2
 80015f8:	4979      	ldr	r1, [pc, #484]	@ (80017e0 <Process_Command+0x2d8>)
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f00b fe6c 	bl	800d2d8 <strncmp>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d118      	bne.n	8001638 <Process_Command+0x130>
		VCP_printf("--- Daftar Pin ---\r\n");
 8001606:	4877      	ldr	r0, [pc, #476]	@ (80017e4 <Process_Command+0x2dc>)
 8001608:	f7ff fe9d 	bl	8001346 <VCP_printf>
		VCP_printf("Sensor A (USART1): PA9 (TX), PA10 (RX)\r\n");
 800160c:	4876      	ldr	r0, [pc, #472]	@ (80017e8 <Process_Command+0x2e0>)
 800160e:	f7ff fe9a 	bl	8001346 <VCP_printf>
		VCP_printf("Sensor B (USART2): PA2 (TX), PA3 (RX)\r\n");
 8001612:	4876      	ldr	r0, [pc, #472]	@ (80017ec <Process_Command+0x2e4>)
 8001614:	f7ff fe97 	bl	8001346 <VCP_printf>
		VCP_printf("Sensor C (USART3): PB10 (TX), PB11 (RX)\r\n");
 8001618:	4875      	ldr	r0, [pc, #468]	@ (80017f0 <Process_Command+0x2e8>)
 800161a:	f7ff fe94 	bl	8001346 <VCP_printf>
		VCP_printf("Pompa B->A: PB14\r\n");
 800161e:	4875      	ldr	r0, [pc, #468]	@ (80017f4 <Process_Command+0x2ec>)
 8001620:	f7ff fe91 	bl	8001346 <VCP_printf>
		VCP_printf("Pompa C->B: PB15\r\n");
 8001624:	4874      	ldr	r0, [pc, #464]	@ (80017f8 <Process_Command+0x2f0>)
 8001626:	f7ff fe8e 	bl	8001346 <VCP_printf>
		VCP_printf("LED Merah (Alert): PB13\r\n");
 800162a:	4874      	ldr	r0, [pc, #464]	@ (80017fc <Process_Command+0x2f4>)
 800162c:	f7ff fe8b 	bl	8001346 <VCP_printf>
		VCP_printf("LCD I2C (I2C1): PB6 (SCL), PB7 (SDA)\r\n");
 8001630:	4873      	ldr	r0, [pc, #460]	@ (8001800 <Process_Command+0x2f8>)
 8001632:	f7ff fe88 	bl	8001346 <VCP_printf>
}
 8001636:	e0bf      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (strncmp(cmd, "$H", 2) == 0) {
 8001638:	2202      	movs	r2, #2
 800163a:	4972      	ldr	r1, [pc, #456]	@ (8001804 <Process_Command+0x2fc>)
 800163c:	6978      	ldr	r0, [r7, #20]
 800163e:	f00b fe4b 	bl	800d2d8 <strncmp>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d11e      	bne.n	8001686 <Process_Command+0x17e>
		VCP_printf("--- Bantuan ---\r\n");
 8001648:	486f      	ldr	r0, [pc, #444]	@ (8001808 <Process_Command+0x300>)
 800164a:	f7ff fe7c 	bl	8001346 <VCP_printf>
		VCP_printf("$$          : Lihat semua parameter\r\n");
 800164e:	486f      	ldr	r0, [pc, #444]	@ (800180c <Process_Command+0x304>)
 8001650:	f7ff fe79 	bl	8001346 <VCP_printf>
		VCP_printf("$P          : Lihat daftar pin\r\n");
 8001654:	486e      	ldr	r0, [pc, #440]	@ (8001810 <Process_Command+0x308>)
 8001656:	f7ff fe76 	bl	8001346 <VCP_printf>
		VCP_printf("$H          : Tampilkan pesan ini\r\n");
 800165a:	486e      	ldr	r0, [pc, #440]	@ (8001814 <Process_Command+0x30c>)
 800165c:	f7ff fe73 	bl	8001346 <VCP_printf>
		VCP_printf(
 8001660:	486d      	ldr	r0, [pc, #436]	@ (8001818 <Process_Command+0x310>)
 8001662:	f7ff fe70 	bl	8001346 <VCP_printf>
		VCP_printf("$2=<min>,<max> : Set ambang batas Drum B\r\n");
 8001666:	486d      	ldr	r0, [pc, #436]	@ (800181c <Process_Command+0x314>)
 8001668:	f7ff fe6d 	bl	8001346 <VCP_printf>
		VCP_printf("$3=<min>,<max> : Set ambang batas Drum C\r\n");
 800166c:	486c      	ldr	r0, [pc, #432]	@ (8001820 <Process_Command+0x318>)
 800166e:	f7ff fe6a 	bl	8001346 <VCP_printf>
		VCP_printf("$S          : Simpan parameter ke Flash\r\n");
 8001672:	486c      	ldr	r0, [pc, #432]	@ (8001824 <Process_Command+0x31c>)
 8001674:	f7ff fe67 	bl	8001346 <VCP_printf>
		VCP_printf("$L          : Muat parameter dari Flash\r\n");
 8001678:	486b      	ldr	r0, [pc, #428]	@ (8001828 <Process_Command+0x320>)
 800167a:	f7ff fe64 	bl	8001346 <VCP_printf>
		VCP_printf("$D          : Kembalikan ke pengaturan default\r\n");
 800167e:	486b      	ldr	r0, [pc, #428]	@ (800182c <Process_Command+0x324>)
 8001680:	f7ff fe61 	bl	8001346 <VCP_printf>
}
 8001684:	e098      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (sscanf(cmd, "$1=%f,%f", &min, &max) == 2) {
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	f107 0210 	add.w	r2, r7, #16
 800168e:	4968      	ldr	r1, [pc, #416]	@ (8001830 <Process_Command+0x328>)
 8001690:	6978      	ldr	r0, [r7, #20]
 8001692:	f00b fd6b 	bl	800d16c <siscanf>
 8001696:	4603      	mov	r3, r0
 8001698:	2b02      	cmp	r3, #2
 800169a:	d119      	bne.n	80016d0 <Process_Command+0x1c8>
		g_params.ambang_bawah_A = min;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4a4b      	ldr	r2, [pc, #300]	@ (80017cc <Process_Command+0x2c4>)
 80016a0:	6093      	str	r3, [r2, #8]
		g_params.target_penuh_A = max;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a49      	ldr	r2, [pc, #292]	@ (80017cc <Process_Command+0x2c4>)
 80016a6:	60d3      	str	r3, [r2, #12]
		VCP_printf("OK: Parameter Drum A diubah -> Min=%.1f, Max=%.1f\r\n", min,
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe febc 	bl	8000428 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe feb6 	bl	8000428 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	4622      	mov	r2, r4
 80016c6:	462b      	mov	r3, r5
 80016c8:	485a      	ldr	r0, [pc, #360]	@ (8001834 <Process_Command+0x32c>)
 80016ca:	f7ff fe3c 	bl	8001346 <VCP_printf>
}
 80016ce:	e073      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (sscanf(cmd, "$2=%f,%f", &min, &max) == 2) {
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	f107 0210 	add.w	r2, r7, #16
 80016d8:	4957      	ldr	r1, [pc, #348]	@ (8001838 <Process_Command+0x330>)
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f00b fd46 	bl	800d16c <siscanf>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d119      	bne.n	800171a <Process_Command+0x212>
		g_params.ambang_bawah_B = min;
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4a38      	ldr	r2, [pc, #224]	@ (80017cc <Process_Command+0x2c4>)
 80016ea:	6153      	str	r3, [r2, #20]
		g_params.target_penuh_B = max;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a37      	ldr	r2, [pc, #220]	@ (80017cc <Process_Command+0x2c4>)
 80016f0:	6193      	str	r3, [r2, #24]
		VCP_printf("OK: Parameter Drum B diubah -> Min=%.1f, Max=%.1f\r\n", min,
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fe97 	bl	8000428 <__aeabi_f2d>
 80016fa:	4604      	mov	r4, r0
 80016fc:	460d      	mov	r5, r1
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fe91 	bl	8000428 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9cd 2300 	strd	r2, r3, [sp]
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	484a      	ldr	r0, [pc, #296]	@ (800183c <Process_Command+0x334>)
 8001714:	f7ff fe17 	bl	8001346 <VCP_printf>
}
 8001718:	e04e      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (sscanf(cmd, "$3=%f,%f", &min, &max) == 2) {
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	f107 0210 	add.w	r2, r7, #16
 8001722:	4947      	ldr	r1, [pc, #284]	@ (8001840 <Process_Command+0x338>)
 8001724:	6978      	ldr	r0, [r7, #20]
 8001726:	f00b fd21 	bl	800d16c <siscanf>
 800172a:	4603      	mov	r3, r0
 800172c:	2b02      	cmp	r3, #2
 800172e:	d119      	bne.n	8001764 <Process_Command+0x25c>
		g_params.ambang_bawah_C = min;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <Process_Command+0x2c4>)
 8001734:	6213      	str	r3, [r2, #32]
		g_params.target_penuh_C = max;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4a24      	ldr	r2, [pc, #144]	@ (80017cc <Process_Command+0x2c4>)
 800173a:	6253      	str	r3, [r2, #36]	@ 0x24
		VCP_printf("OK: Parameter Drum C diubah -> Min=%.1f, Max=%.1f\r\n", min,
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe72 	bl	8000428 <__aeabi_f2d>
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe6c 	bl	8000428 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9cd 2300 	strd	r2, r3, [sp]
 8001758:	4622      	mov	r2, r4
 800175a:	462b      	mov	r3, r5
 800175c:	4839      	ldr	r0, [pc, #228]	@ (8001844 <Process_Command+0x33c>)
 800175e:	f7ff fdf2 	bl	8001346 <VCP_printf>
}
 8001762:	e029      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (strncmp(cmd, "$S", 2) == 0) {
 8001764:	2202      	movs	r2, #2
 8001766:	4938      	ldr	r1, [pc, #224]	@ (8001848 <Process_Command+0x340>)
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f00b fdb5 	bl	800d2d8 <strncmp>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <Process_Command+0x272>
		Save_Parameters_To_Flash();
 8001774:	f7ff fe4a 	bl	800140c <Save_Parameters_To_Flash>
}
 8001778:	e01e      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (strncmp(cmd, "$L", 2) == 0) {
 800177a:	2202      	movs	r2, #2
 800177c:	4933      	ldr	r1, [pc, #204]	@ (800184c <Process_Command+0x344>)
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f00b fdaa 	bl	800d2d8 <strncmp>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <Process_Command+0x28e>
		Load_Parameters_From_Flash();
 800178a:	f7ff fe93 	bl	80014b4 <Load_Parameters_From_Flash>
		VCP_printf("OK: Parameter dimuat dari Flash.\r\n");
 800178e:	4830      	ldr	r0, [pc, #192]	@ (8001850 <Process_Command+0x348>)
 8001790:	f7ff fdd9 	bl	8001346 <VCP_printf>
}
 8001794:	e010      	b.n	80017b8 <Process_Command+0x2b0>
	} else if (strncmp(cmd, "$D", 2) == 0) {
 8001796:	2202      	movs	r2, #2
 8001798:	492e      	ldr	r1, [pc, #184]	@ (8001854 <Process_Command+0x34c>)
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f00b fd9c 	bl	800d2d8 <strncmp>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <Process_Command+0x2aa>
		Set_Default_Parameters();
 80017a6:	f7ff fdfb 	bl	80013a0 <Set_Default_Parameters>
		VCP_printf("OK: Parameter dikembalikan ke default.\r\n");
 80017aa:	482b      	ldr	r0, [pc, #172]	@ (8001858 <Process_Command+0x350>)
 80017ac:	f7ff fdcb 	bl	8001346 <VCP_printf>
}
 80017b0:	e002      	b.n	80017b8 <Process_Command+0x2b0>
		VCP_printf(
 80017b2:	482a      	ldr	r0, [pc, #168]	@ (800185c <Process_Command+0x354>)
 80017b4:	f7ff fdc7 	bl	8001346 <VCP_printf>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017c2:	bf00      	nop
 80017c4:	080112e8 	.word	0x080112e8
 80017c8:	080112ec 	.word	0x080112ec
 80017cc:	2000057c 	.word	0x2000057c
 80017d0:	0801130c 	.word	0x0801130c
 80017d4:	0801133c 	.word	0x0801133c
 80017d8:	0801136c 	.word	0x0801136c
 80017dc:	0801139c 	.word	0x0801139c
 80017e0:	080113bc 	.word	0x080113bc
 80017e4:	080113c0 	.word	0x080113c0
 80017e8:	080113d8 	.word	0x080113d8
 80017ec:	08011404 	.word	0x08011404
 80017f0:	0801142c 	.word	0x0801142c
 80017f4:	08011458 	.word	0x08011458
 80017f8:	0801146c 	.word	0x0801146c
 80017fc:	08011480 	.word	0x08011480
 8001800:	0801149c 	.word	0x0801149c
 8001804:	080114c4 	.word	0x080114c4
 8001808:	080114c8 	.word	0x080114c8
 800180c:	080114dc 	.word	0x080114dc
 8001810:	08011504 	.word	0x08011504
 8001814:	08011528 	.word	0x08011528
 8001818:	0801154c 	.word	0x0801154c
 800181c:	0801158c 	.word	0x0801158c
 8001820:	080115b8 	.word	0x080115b8
 8001824:	080115e4 	.word	0x080115e4
 8001828:	08011610 	.word	0x08011610
 800182c:	0801163c 	.word	0x0801163c
 8001830:	08011670 	.word	0x08011670
 8001834:	0801167c 	.word	0x0801167c
 8001838:	080116b0 	.word	0x080116b0
 800183c:	080116bc 	.word	0x080116bc
 8001840:	080116f0 	.word	0x080116f0
 8001844:	080116fc 	.word	0x080116fc
 8001848:	08011730 	.word	0x08011730
 800184c:	08011734 	.word	0x08011734
 8001850:	08011738 	.word	0x08011738
 8001854:	0801175c 	.word	0x0801175c
 8001858:	08011760 	.word	0x08011760
 800185c:	0801178c 	.word	0x0801178c

08001860 <Run_Control_Logic>:

void Run_Control_Logic(void) {
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
	float LevelA_cm = g_params.tinggi_A
 8001866:	4b8d      	ldr	r3, [pc, #564]	@ (8001a9c <Run_Control_Logic+0x23c>)
 8001868:	685c      	ldr	r4, [r3, #4]
			- ((float) sensors[0].distance_mm / 10.0f);
 800186a:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa0 <Run_Control_Logic+0x240>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	498d      	ldr	r1, [pc, #564]	@ (8001aa4 <Run_Control_Logic+0x244>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb3b 	bl	8000eec <__aeabi_fdiv>
 8001876:	4603      	mov	r3, r0
	float LevelA_cm = g_params.tinggi_A
 8001878:	4619      	mov	r1, r3
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff f978 	bl	8000b70 <__aeabi_fsub>
 8001880:	4603      	mov	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]
	float LevelB_cm = g_params.tinggi_B
 8001884:	4b85      	ldr	r3, [pc, #532]	@ (8001a9c <Run_Control_Logic+0x23c>)
 8001886:	691c      	ldr	r4, [r3, #16]
			- ((float) sensors[1].distance_mm / 10.0f);
 8001888:	4b85      	ldr	r3, [pc, #532]	@ (8001aa0 <Run_Control_Logic+0x240>)
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	4985      	ldr	r1, [pc, #532]	@ (8001aa4 <Run_Control_Logic+0x244>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fb2c 	bl	8000eec <__aeabi_fdiv>
 8001894:	4603      	mov	r3, r0
	float LevelB_cm = g_params.tinggi_B
 8001896:	4619      	mov	r1, r3
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff f969 	bl	8000b70 <__aeabi_fsub>
 800189e:	4603      	mov	r3, r0
 80018a0:	60bb      	str	r3, [r7, #8]
	float LevelC_cm = g_params.tinggi_C
 80018a2:	4b7e      	ldr	r3, [pc, #504]	@ (8001a9c <Run_Control_Logic+0x23c>)
 80018a4:	69dc      	ldr	r4, [r3, #28]
			- ((float) sensors[2].distance_mm / 10.0f);
 80018a6:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa0 <Run_Control_Logic+0x240>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	497e      	ldr	r1, [pc, #504]	@ (8001aa4 <Run_Control_Logic+0x244>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fb1d 	bl	8000eec <__aeabi_fdiv>
 80018b2:	4603      	mov	r3, r0
	float LevelC_cm = g_params.tinggi_C
 80018b4:	4619      	mov	r1, r3
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff f95a 	bl	8000b70 <__aeabi_fsub>
 80018bc:	4603      	mov	r3, r0
 80018be:	607b      	str	r3, [r7, #4]
	LevelA_persen = (LevelA_cm / g_params.tinggi_A) * 100.0f;
 80018c0:	4b76      	ldr	r3, [pc, #472]	@ (8001a9c <Run_Control_Logic+0x23c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4619      	mov	r1, r3
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff fb10 	bl	8000eec <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4976      	ldr	r1, [pc, #472]	@ (8001aa8 <Run_Control_Logic+0x248>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa57 	bl	8000d84 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b74      	ldr	r3, [pc, #464]	@ (8001aac <Run_Control_Logic+0x24c>)
 80018dc:	601a      	str	r2, [r3, #0]
	LevelB_persen = (LevelB_cm / g_params.tinggi_B) * 100.0f;
 80018de:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <Run_Control_Logic+0x23c>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	4619      	mov	r1, r3
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7ff fb01 	bl	8000eec <__aeabi_fdiv>
 80018ea:	4603      	mov	r3, r0
 80018ec:	496e      	ldr	r1, [pc, #440]	@ (8001aa8 <Run_Control_Logic+0x248>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fa48 	bl	8000d84 <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b6d      	ldr	r3, [pc, #436]	@ (8001ab0 <Run_Control_Logic+0x250>)
 80018fa:	601a      	str	r2, [r3, #0]
	LevelC_persen = (LevelC_cm / g_params.tinggi_C) * 100.0f;
 80018fc:	4b67      	ldr	r3, [pc, #412]	@ (8001a9c <Run_Control_Logic+0x23c>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff faf2 	bl	8000eec <__aeabi_fdiv>
 8001908:	4603      	mov	r3, r0
 800190a:	4967      	ldr	r1, [pc, #412]	@ (8001aa8 <Run_Control_Logic+0x248>)
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fa39 	bl	8000d84 <__aeabi_fmul>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	4b67      	ldr	r3, [pc, #412]	@ (8001ab4 <Run_Control_Logic+0x254>)
 8001918:	601a      	str	r2, [r3, #0]
	if (LevelA_persen < 0)
 800191a:	4b64      	ldr	r3, [pc, #400]	@ (8001aac <Run_Control_Logic+0x24c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbcc 	bl	80010c0 <__aeabi_fcmplt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <Run_Control_Logic+0xd8>
		LevelA_persen = 0;
 800192e:	4b5f      	ldr	r3, [pc, #380]	@ (8001aac <Run_Control_Logic+0x24c>)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00b      	b.n	8001950 <Run_Control_Logic+0xf0>
	else if (LevelA_persen > 100)
 8001938:	4b5c      	ldr	r3, [pc, #368]	@ (8001aac <Run_Control_Logic+0x24c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	495a      	ldr	r1, [pc, #360]	@ (8001aa8 <Run_Control_Logic+0x248>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fbdc 	bl	80010fc <__aeabi_fcmpgt>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <Run_Control_Logic+0xf0>
		LevelA_persen = 100;
 800194a:	4b58      	ldr	r3, [pc, #352]	@ (8001aac <Run_Control_Logic+0x24c>)
 800194c:	4a56      	ldr	r2, [pc, #344]	@ (8001aa8 <Run_Control_Logic+0x248>)
 800194e:	601a      	str	r2, [r3, #0]
	if (LevelB_persen < 0)
 8001950:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <Run_Control_Logic+0x250>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fbb1 	bl	80010c0 <__aeabi_fcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <Run_Control_Logic+0x10e>
		LevelB_persen = 0;
 8001964:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <Run_Control_Logic+0x250>)
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e00b      	b.n	8001986 <Run_Control_Logic+0x126>
	else if (LevelB_persen > 100)
 800196e:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <Run_Control_Logic+0x250>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	494d      	ldr	r1, [pc, #308]	@ (8001aa8 <Run_Control_Logic+0x248>)
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fbc1 	bl	80010fc <__aeabi_fcmpgt>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <Run_Control_Logic+0x126>
		LevelB_persen = 100;
 8001980:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <Run_Control_Logic+0x250>)
 8001982:	4a49      	ldr	r2, [pc, #292]	@ (8001aa8 <Run_Control_Logic+0x248>)
 8001984:	601a      	str	r2, [r3, #0]
	if (LevelC_persen < 0)
 8001986:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab4 <Run_Control_Logic+0x254>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb96 	bl	80010c0 <__aeabi_fcmplt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <Run_Control_Logic+0x144>
		LevelC_persen = 0;
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <Run_Control_Logic+0x254>)
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e00b      	b.n	80019bc <Run_Control_Logic+0x15c>
	else if (LevelC_persen > 100)
 80019a4:	4b43      	ldr	r3, [pc, #268]	@ (8001ab4 <Run_Control_Logic+0x254>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	493f      	ldr	r1, [pc, #252]	@ (8001aa8 <Run_Control_Logic+0x248>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fba6 	bl	80010fc <__aeabi_fcmpgt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <Run_Control_Logic+0x15c>
		LevelC_persen = 100;
 80019b6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab4 <Run_Control_Logic+0x254>)
 80019b8:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa8 <Run_Control_Logic+0x248>)
 80019ba:	601a      	str	r2, [r3, #0]

	if (state_A == STATE_IDLE && LevelA_persen <= g_params.ambang_bawah_A) {
 80019bc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <Run_Control_Logic+0x258>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11f      	bne.n	8001a04 <Run_Control_Logic+0x1a4>
 80019c4:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <Run_Control_Logic+0x23c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a38      	ldr	r2, [pc, #224]	@ (8001aac <Run_Control_Logic+0x24c>)
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb8a 	bl	80010e8 <__aeabi_fcmpge>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d014      	beq.n	8001a04 <Run_Control_Logic+0x1a4>
		if (LevelB_persen > g_params.sumber_kosong) {
 80019da:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <Run_Control_Logic+0x23c>)
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	4a34      	ldr	r2, [pc, #208]	@ (8001ab0 <Run_Control_Logic+0x250>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb6b 	bl	80010c0 <__aeabi_fcmplt>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d02c      	beq.n	8001a4a <Run_Control_Logic+0x1ea>
			state_A = STATE_FILLING;
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <Run_Control_Logic+0x258>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019fc:	482f      	ldr	r0, [pc, #188]	@ (8001abc <Run_Control_Logic+0x25c>)
 80019fe:	f001 fe07 	bl	8003610 <HAL_GPIO_WritePin>
		if (LevelB_persen > g_params.sumber_kosong) {
 8001a02:	e022      	b.n	8001a4a <Run_Control_Logic+0x1ea>
		}
	} else if (state_A == STATE_FILLING) {
 8001a04:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <Run_Control_Logic+0x258>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d11e      	bne.n	8001a4a <Run_Control_Logic+0x1ea>
		if (LevelA_persen >= g_params.target_penuh_A
 8001a0c:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <Run_Control_Logic+0x23c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <Run_Control_Logic+0x24c>)
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fb5c 	bl	80010d4 <__aeabi_fcmple>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10a      	bne.n	8001a38 <Run_Control_Logic+0x1d8>
				|| LevelB_persen <= g_params.sumber_kosong) {
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <Run_Control_Logic+0x23c>)
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <Run_Control_Logic+0x250>)
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb5b 	bl	80010e8 <__aeabi_fcmpge>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <Run_Control_Logic+0x1ea>
			state_A = STATE_IDLE;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <Run_Control_Logic+0x258>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a44:	481d      	ldr	r0, [pc, #116]	@ (8001abc <Run_Control_Logic+0x25c>)
 8001a46:	f001 fde3 	bl	8003610 <HAL_GPIO_WritePin>
		}
	}

	if (state_A == STATE_IDLE) {
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <Run_Control_Logic+0x258>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d15c      	bne.n	8001b0c <Run_Control_Logic+0x2ac>
		if (state_B == STATE_IDLE && LevelB_persen <= g_params.ambang_bawah_B) {
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <Run_Control_Logic+0x260>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d134      	bne.n	8001ac4 <Run_Control_Logic+0x264>
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <Run_Control_Logic+0x23c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <Run_Control_Logic+0x250>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb3f 	bl	80010e8 <__aeabi_fcmpge>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d029      	beq.n	8001ac4 <Run_Control_Logic+0x264>
			if (LevelC_persen > g_params.sumber_kosong) {
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <Run_Control_Logic+0x23c>)
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <Run_Control_Logic+0x254>)
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb20 	bl	80010c0 <__aeabi_fcmplt>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d04b      	beq.n	8001b1e <Run_Control_Logic+0x2be>
				state_B = STATE_FILLING;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <Run_Control_Logic+0x260>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin,
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <Run_Control_Logic+0x25c>)
 8001a94:	f001 fdbc 	bl	8003610 <HAL_GPIO_WritePin>
			if (LevelC_persen > g_params.sumber_kosong) {
 8001a98:	e041      	b.n	8001b1e <Run_Control_Logic+0x2be>
 8001a9a:	bf00      	nop
 8001a9c:	2000057c 	.word	0x2000057c
 8001aa0:	20000510 	.word	0x20000510
 8001aa4:	41200000 	.word	0x41200000
 8001aa8:	42c80000 	.word	0x42c80000
 8001aac:	2000056c 	.word	0x2000056c
 8001ab0:	20000570 	.word	0x20000570
 8001ab4:	20000574 	.word	0x20000574
 8001ab8:	20000578 	.word	0x20000578
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	20000579 	.word	0x20000579
						GPIO_PIN_SET);
			}
		} else if (state_B == STATE_FILLING) {
 8001ac4:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <Run_Control_Logic+0x2f8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d128      	bne.n	8001b1e <Run_Control_Logic+0x2be>
			if (LevelB_persen >= g_params.target_penuh_B
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <Run_Control_Logic+0x2fc>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a23      	ldr	r2, [pc, #140]	@ (8001b60 <Run_Control_Logic+0x300>)
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fafc 	bl	80010d4 <__aeabi_fcmple>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <Run_Control_Logic+0x298>
					|| LevelC_persen <= g_params.sumber_kosong) {
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <Run_Control_Logic+0x2fc>)
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <Run_Control_Logic+0x304>)
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fafb 	bl	80010e8 <__aeabi_fcmpge>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d012      	beq.n	8001b1e <Run_Control_Logic+0x2be>
				state_B = STATE_IDLE;
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <Run_Control_Logic+0x2f8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin,
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b04:	4818      	ldr	r0, [pc, #96]	@ (8001b68 <Run_Control_Logic+0x308>)
 8001b06:	f001 fd83 	bl	8003610 <HAL_GPIO_WritePin>
 8001b0a:	e008      	b.n	8001b1e <Run_Control_Logic+0x2be>
						GPIO_PIN_RESET);
			}
		}
	} else {
		state_B = STATE_IDLE;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <Run_Control_Logic+0x2f8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b18:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <Run_Control_Logic+0x308>)
 8001b1a:	f001 fd79 	bl	8003610 <HAL_GPIO_WritePin>
	}

	if (LevelC_persen <= g_params.ambang_bawah_C) {
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <Run_Control_Logic+0x2fc>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a10      	ldr	r2, [pc, #64]	@ (8001b64 <Run_Control_Logic+0x304>)
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fadd 	bl	80010e8 <__aeabi_fcmpge>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <Run_Control_Logic+0x2e2>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b3a:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <Run_Control_Logic+0x308>)
 8001b3c:	f001 fd68 	bl	8003610 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	}
}
 8001b40:	e005      	b.n	8001b4e <Run_Control_Logic+0x2ee>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b48:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <Run_Control_Logic+0x308>)
 8001b4a:	f001 fd61 	bl	8003610 <HAL_GPIO_WritePin>
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000579 	.word	0x20000579
 8001b5c:	2000057c 	.word	0x2000057c
 8001b60:	20000570 	.word	0x20000570
 8001b64:	20000574 	.word	0x20000574
 8001b68:	40010c00 	.word	0x40010c00

08001b6c <Initialize_Sensors>:

/**
 * @brief Menginisialisasi struktur handle untuk setiap sensor.
 */
void Initialize_Sensors(void) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	// Sensor 1 menggunakan USART1
	sensors[0].huart = &huart1;
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b72:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <Initialize_Sensors+0x4c>)
 8001b74:	601a      	str	r2, [r3, #0]
	sensors[0].state = STATE_WAIT_FOR_START;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	715a      	strb	r2, [r3, #5]
	sensors[0].new_data_available = 0;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	751a      	strb	r2, [r3, #20]
//  sensors[0].de_port = MAX485_DE1_GPIO_Port;
//  sensors[0].de_pin = MAX485_DE1_Pin;

	// Sensor 2 menggunakan USART2
	sensors[1].huart = &huart2;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <Initialize_Sensors+0x50>)
 8001b86:	619a      	str	r2, [r3, #24]
	sensors[1].state = STATE_WAIT_FOR_START;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	775a      	strb	r2, [r3, #29]
	sensors[1].new_data_available = 0;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
//  sensors[1].de_port = MAX485_DE2_GPIO_Port;
//  sensors[1].de_pin = MAX485_DE2_Pin;

	// Sensor 3 menggunakan UART3
	sensors[2].huart = &huart3;
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b98:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <Initialize_Sensors+0x54>)
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
	sensors[2].state = STATE_WAIT_FOR_START;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	sensors[2].new_data_available = 0;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <Initialize_Sensors+0x48>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	// Set semua MAX485 ke mode RX secara default saat inisialisasi
	// for (int i = 0; i < NUM_SENSORS; i++)
	// {
	//   HAL_GPIO_WritePin(sensors[i].de_port, sensors[i].de_pin, GPIO_PIN_RESET); // DE = LOW for RX
	// }
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000510 	.word	0x20000510
 8001bb8:	20000438 	.word	0x20000438
 8001bbc:	20000480 	.word	0x20000480
 8001bc0:	200004c8 	.word	0x200004c8

08001bc4 <Update_LCD_Display>:

void Update_LCD_Display(void) {
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af02      	add	r7, sp, #8
	lcd_set_cursor(0, 0);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fb3f 	bl	8001250 <lcd_set_cursor>
	sprintf(lcd_buffer, "A:%3.0f%% B:%3.0f%%", LevelA_persen, LevelB_persen);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <Update_LCD_Display+0x98>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fc26 	bl	8000428 <__aeabi_f2d>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	460d      	mov	r5, r1
 8001be0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <Update_LCD_Display+0x9c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc1f 	bl	8000428 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	491b      	ldr	r1, [pc, #108]	@ (8001c64 <Update_LCD_Display+0xa0>)
 8001bf8:	481b      	ldr	r0, [pc, #108]	@ (8001c68 <Update_LCD_Display+0xa4>)
 8001bfa:	f00b fa95 	bl	800d128 <siprintf>
	lcd_send_string(lcd_buffer);
 8001bfe:	481a      	ldr	r0, [pc, #104]	@ (8001c68 <Update_LCD_Display+0xa4>)
 8001c00:	f7ff fb8c 	bl	800131c <lcd_send_string>
	lcd_set_cursor(1, 0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff fb22 	bl	8001250 <lcd_set_cursor>
	sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <Update_LCD_Display+0xa8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc09 	bl	8000428 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
			(state_A == STATE_FILLING) ? 'A' : ' ',
 8001c1a:	4915      	ldr	r1, [pc, #84]	@ (8001c70 <Update_LCD_Display+0xac>)
 8001c1c:	7809      	ldrb	r1, [r1, #0]
	sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8001c1e:	2901      	cmp	r1, #1
 8001c20:	d101      	bne.n	8001c26 <Update_LCD_Display+0x62>
 8001c22:	2141      	movs	r1, #65	@ 0x41
 8001c24:	e000      	b.n	8001c28 <Update_LCD_Display+0x64>
 8001c26:	2120      	movs	r1, #32
			(state_B == STATE_FILLING) ? 'B' : ' ');
 8001c28:	4812      	ldr	r0, [pc, #72]	@ (8001c74 <Update_LCD_Display+0xb0>)
 8001c2a:	7800      	ldrb	r0, [r0, #0]
	sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8001c2c:	2801      	cmp	r0, #1
 8001c2e:	d101      	bne.n	8001c34 <Update_LCD_Display+0x70>
 8001c30:	2042      	movs	r0, #66	@ 0x42
 8001c32:	e000      	b.n	8001c36 <Update_LCD_Display+0x72>
 8001c34:	2020      	movs	r0, #32
 8001c36:	9001      	str	r0, [sp, #4]
 8001c38:	9100      	str	r1, [sp, #0]
 8001c3a:	490f      	ldr	r1, [pc, #60]	@ (8001c78 <Update_LCD_Display+0xb4>)
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <Update_LCD_Display+0xa4>)
 8001c3e:	f00b fa73 	bl	800d128 <siprintf>
	lcd_send_string("                ");
 8001c42:	480e      	ldr	r0, [pc, #56]	@ (8001c7c <Update_LCD_Display+0xb8>)
 8001c44:	f7ff fb6a 	bl	800131c <lcd_send_string>
	lcd_set_cursor(1, 0);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fb00 	bl	8001250 <lcd_set_cursor>
	lcd_send_string(lcd_buffer);
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <Update_LCD_Display+0xa4>)
 8001c52:	f7ff fb63 	bl	800131c <lcd_send_string>
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5c:	2000056c 	.word	0x2000056c
 8001c60:	20000570 	.word	0x20000570
 8001c64:	080117c8 	.word	0x080117c8
 8001c68:	20000558 	.word	0x20000558
 8001c6c:	20000574 	.word	0x20000574
 8001c70:	20000578 	.word	0x20000578
 8001c74:	20000579 	.word	0x20000579
 8001c78:	080117dc 	.word	0x080117dc
 8001c7c:	080117f0 	.word	0x080117f0

08001c80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c86:	f000 fef9 	bl	8002a7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c8a:	f000 f8a5 	bl	8001dd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c8e:	f000 fa2f 	bl	80020f0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001c92:	f000 f901 	bl	8001e98 <MX_I2C1_Init>
	MX_RTC_Init();
 8001c96:	f000 f92d 	bl	8001ef4 <MX_RTC_Init>
	MX_SPI1_Init();
 8001c9a:	f000 f975 	bl	8001f88 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001c9e:	f000 f9a9 	bl	8001ff4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001ca2:	f000 f9d1 	bl	8002048 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001ca6:	f000 f9f9 	bl	800209c <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8001caa:	f008 fa4d 	bl	800a148 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8001cae:	f009 fe73 	bl	800b998 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	lcd_init(&hi2c1); // Inisialisasi LCD I2C
 8001cb2:	4841      	ldr	r0, [pc, #260]	@ (8001db8 <main+0x138>)
 8001cb4:	f7ff faee 	bl	8001294 <lcd_init>
	lcd_clear();      // Bersihkan LCD
 8001cb8:	f7ff fac0 	bl	800123c <lcd_clear>

	// pesan awal di LCD
	lcd_set_cursor(0, 0);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff fac6 	bl	8001250 <lcd_set_cursor>
	sprintf(lcd_buffer, "hai dunia");
 8001cc4:	493d      	ldr	r1, [pc, #244]	@ (8001dbc <main+0x13c>)
 8001cc6:	483e      	ldr	r0, [pc, #248]	@ (8001dc0 <main+0x140>)
 8001cc8:	f00b fa2e 	bl	800d128 <siprintf>
	lcd_send_string(lcd_buffer);
 8001ccc:	483c      	ldr	r0, [pc, #240]	@ (8001dc0 <main+0x140>)
 8001cce:	f7ff fb25 	bl	800131c <lcd_send_string>

	// Muat parameter dari Flash saat startup
	Load_Parameters_From_Flash();
 8001cd2:	f7ff fbef 	bl	80014b4 <Load_Parameters_From_Flash>

	// Inisialisasi handle sensor
	Initialize_Sensors();
 8001cd6:	f7ff ff49 	bl	8001b6c <Initialize_Sensors>
//	for (int i = 0; i < NUM_SENSORS; i++) {
//		HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
//	}

	// Beri sedikit waktu agar USB siap
	HAL_Delay(2000);
 8001cda:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cde:	f000 ff2f 	bl	8002b40 <HAL_Delay>
	VCP_printf("\r\nSistem Kontrol Drum Siap. Ketik '$H' untuk bantuan.\r\n");
 8001ce2:	4838      	ldr	r0, [pc, #224]	@ (8001dc4 <main+0x144>)
 8001ce4:	f7ff fb2f 	bl	8001346 <VCP_printf>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		// Minta data dari setiap sensor secara berurutan
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	e023      	b.n	8001d36 <main+0xb6>
			Request_Sensor_Data(&sensors[i]);
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4a33      	ldr	r2, [pc, #204]	@ (8001dc8 <main+0x148>)
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fb01 	bl	8002304 <Request_Sensor_Data>
			// Pastikan interrupt receive aktif untuk sensor ini agar bisa menerima respons
			HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
 8001d02:	4931      	ldr	r1, [pc, #196]	@ (8001dc8 <main+0x148>)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc8 <main+0x148>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	2201      	movs	r2, #1
 8001d24:	4619      	mov	r1, r3
 8001d26:	f005 f8f2 	bl	8006f0e <HAL_UART_Receive_IT>
			HAL_Delay(50); // Beri sedikit waktu agar sensor merespons dan data masuk
 8001d2a:	2032      	movs	r0, #50	@ 0x32
 8001d2c:	f000 ff08 	bl	8002b40 <HAL_Delay>
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	ddd8      	ble.n	8001cee <main+0x6e>
		}

		// Cek apakah ada perintah baru dari USB VCP untuk diproses
		if (g_command_ready) {
 8001d3c:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <main+0x14c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00d      	beq.n	8001d62 <main+0xe2>
			Process_Command(g_usb_rx_buffer);
 8001d46:	4822      	ldr	r0, [pc, #136]	@ (8001dd0 <main+0x150>)
 8001d48:	f7ff fbde 	bl	8001508 <Process_Command>
			// Reset buffer dan flag
			memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8001d4c:	2280      	movs	r2, #128	@ 0x80
 8001d4e:	2100      	movs	r1, #0
 8001d50:	481f      	ldr	r0, [pc, #124]	@ (8001dd0 <main+0x150>)
 8001d52:	f00b fab9 	bl	800d2c8 <memset>
			g_rx_index = 0;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <main+0x154>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
			g_command_ready = 0;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <main+0x14c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
		}

		Run_Control_Logic();
 8001d62:	f7ff fd7d 	bl	8001860 <Run_Control_Logic>

#if GUNAKAN_LCD == 1
		Update_LCD_Display();
 8001d66:	f7ff ff2d 	bl	8001bc4 <Update_LCD_Display>
#endif

		if (sensors[0].new_data_available && sensors[1].new_data_available
 8001d6a:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <main+0x148>)
 8001d6c:	7d1b      	ldrb	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01c      	beq.n	8001dac <main+0x12c>
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <main+0x148>)
 8001d74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d017      	beq.n	8001dac <main+0x12c>
				&& sensors[2].new_data_available) {
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <main+0x148>)
 8001d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d012      	beq.n	8001dac <main+0x12c>
			for (int i = 0; i < NUM_SENSORS; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	e00c      	b.n	8001da6 <main+0x126>
				sensors[i].new_data_available = 0;
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <main+0x148>)
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	3314      	adds	r3, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < NUM_SENSORS; i++)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	ddef      	ble.n	8001d8c <main+0x10c>
		}

		HAL_Delay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db0:	f000 fec6 	bl	8002b40 <HAL_Delay>
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001db4:	e798      	b.n	8001ce8 <main+0x68>
 8001db6:	bf00      	nop
 8001db8:	20000378 	.word	0x20000378
 8001dbc:	08011804 	.word	0x08011804
 8001dc0:	20000558 	.word	0x20000558
 8001dc4:	08011810 	.word	0x08011810
 8001dc8:	20000510 	.word	0x20000510
 8001dcc:	2000062c 	.word	0x2000062c
 8001dd0:	200005a8 	.word	0x200005a8
 8001dd4:	20000628 	.word	0x20000628

08001dd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b094      	sub	sp, #80	@ 0x50
 8001ddc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001de2:	2228      	movs	r2, #40	@ 0x28
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00b fa6e 	bl	800d2c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001e08:	2309      	movs	r3, #9
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e16:	2301      	movs	r3, #1
 8001e18:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e26:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fe0c 	bl	8005a50 <HAL_RCC_OscConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x6a>
		Error_Handler();
 8001e3e:	f000 fb0d 	bl	800245c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e42:	230f      	movs	r3, #15
 8001e44:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e52:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f878 	bl	8005f54 <HAL_RCC_ClockConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SystemClock_Config+0x96>
		Error_Handler();
 8001e6a:	f000 faf7 	bl	800245c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 8001e6e:	2311      	movs	r3, #17
 8001e70:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e76:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e7c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 f9f5 	bl	8006270 <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0xb8>
		Error_Handler();
 8001e8c:	f000 fae6 	bl	800245c <Error_Handler>
	}
}
 8001e90:	bf00      	nop
 8001e92:	3750      	adds	r7, #80	@ 0x50
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001e9e:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <MX_I2C1_Init+0x54>)
 8001ea0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <MX_I2C1_Init+0x58>)
 8001ea6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ed6:	f001 fbb3 	bl	8003640 <HAL_I2C_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001ee0:	f000 fabc 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000378 	.word	0x20000378
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	000186a0 	.word	0x000186a0

08001ef4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2100      	movs	r1, #0
 8001efe:	460a      	mov	r2, r1
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	460a      	mov	r2, r1
 8001f04:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_RTC_Init+0x8c>)
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <MX_RTC_Init+0x90>)
 8001f0e:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <MX_RTC_Init+0x8c>)
 8001f12:	f04f 32ff 	mov.w	r2, #4294967295
 8001f16:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_RTC_Init+0x8c>)
 8001f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1e:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001f20:	4817      	ldr	r0, [pc, #92]	@ (8001f80 <MX_RTC_Init+0x8c>)
 8001f22:	f004 fb11 	bl	8006548 <HAL_RTC_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_RTC_Init+0x3c>
		Error_Handler();
 8001f2c:	f000 fa96 	bl	800245c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4619      	mov	r1, r3
 8001f42:	480f      	ldr	r0, [pc, #60]	@ (8001f80 <MX_RTC_Init+0x8c>)
 8001f44:	f004 fb8c 	bl	8006660 <HAL_RTC_SetTime>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_RTC_Init+0x5e>
		Error_Handler();
 8001f4e:	f000 fa85 	bl	800245c <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f52:	2301      	movs	r3, #1
 8001f54:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f56:	2301      	movs	r3, #1
 8001f58:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 8001f62:	463b      	mov	r3, r7
 8001f64:	2201      	movs	r2, #1
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_RTC_Init+0x8c>)
 8001f6a:	f004 fc11 	bl	8006790 <HAL_RTC_SetDate>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_RTC_Init+0x84>
		Error_Handler();
 8001f74:	f000 fa72 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200003cc 	.word	0x200003cc
 8001f84:	40002800 	.word	0x40002800

08001f88 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001f8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <MX_SPI1_Init+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001f94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f98:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fd4:	220a      	movs	r2, #10
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fda:	f004 fe39 	bl	8006c50 <HAL_SPI_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001fe4:	f000 fa3a 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200003e0 	.word	0x200003e0
 8001ff0:	40013000 	.word	0x40013000

08001ff4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <MX_USART1_UART_Init+0x50>)
 8001ffc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 8002000:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002004:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_USART1_UART_Init+0x4c>)
 800202c:	f004 fe94 	bl	8006d58 <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002036:	f000 fa11 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000438 	.word	0x20000438
 8002044:	40013800 	.word	0x40013800

08002048 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <MX_USART2_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 8002054:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002058:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_USART2_UART_Init+0x4c>)
 8002080:	f004 fe6a 	bl	8006d58 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800208a:	f000 f9e7 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000480 	.word	0x20000480
 8002098:	40004400 	.word	0x40004400

0800209c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <MX_USART3_UART_Init+0x50>)
 80020a4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020ac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020c2:	220c      	movs	r2, #12
 80020c4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80020d2:	4805      	ldr	r0, [pc, #20]	@ (80020e8 <MX_USART3_UART_Init+0x4c>)
 80020d4:	f004 fe40 	bl	8006d58 <HAL_UART_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80020de:	f000 f9bd 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200004c8 	.word	0x200004c8
 80020ec:	40004800 	.word	0x40004800

080020f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a33      	ldr	r2, [pc, #204]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a2d      	ldr	r2, [pc, #180]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a27      	ldr	r2, [pc, #156]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <MX_GPIO_Init+0xe8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MAX485_DE2_Pin | MAX485_DE1_Pin, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800216a:	481c      	ldr	r0, [pc, #112]	@ (80021dc <MX_GPIO_Init+0xec>)
 800216c:	f001 fa50 	bl	8003610 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002170:	2200      	movs	r2, #0
 8002172:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8002176:	481a      	ldr	r0, [pc, #104]	@ (80021e0 <MX_GPIO_Init+0xf0>)
 8002178:	f001 fa4a 	bl	8003610 <HAL_GPIO_WritePin>
			SPI1_CS_Pin | MAX485_DE3_Pin | USER_LED_Pin | LED_GREEN_Pin
					| LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_BTN_Pin */
	GPIO_InitStruct.Pin = USER_BTN_Pin;
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4619      	mov	r1, r3
 800218e:	4813      	ldr	r0, [pc, #76]	@ (80021dc <MX_GPIO_Init+0xec>)
 8002190:	f001 f8ba 	bl	8003308 <HAL_GPIO_Init>

	/*Configure GPIO pins : MAX485_DE2_Pin MAX485_DE1_Pin */
	GPIO_InitStruct.Pin = MAX485_DE2_Pin | MAX485_DE1_Pin;
 8002194:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002198:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4619      	mov	r1, r3
 80021ac:	480b      	ldr	r0, [pc, #44]	@ (80021dc <MX_GPIO_Init+0xec>)
 80021ae:	f001 f8ab 	bl	8003308 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_CS_Pin MAX485_DE3_Pin USER_LED_Pin LED_GREEN_Pin
	 LED_RED_Pin POMPA_BA_Pin POMPA_CB_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin | MAX485_DE3_Pin | USER_LED_Pin
 80021b2:	f24f 0307 	movw	r3, #61447	@ 0xf007
 80021b6:	613b      	str	r3, [r7, #16]
			| LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <MX_GPIO_Init+0xf0>)
 80021cc:	f001 f89c 	bl	8003308 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010800 	.word	0x40010800
 80021e0:	40010c00 	.word	0x40010c00

080021e4 <CDC_On_Receive>:
/* USER CODE BEGIN 4 */

/**
 * @brief  Callback ini dipanggil dari usbd_cdc_if.c setiap kali data diterima dari USB VCP.
 */
void CDC_On_Receive(uint8_t *Buf, uint32_t Len) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < Len; i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e039      	b.n	8002268 <CDC_On_Receive+0x84>
		// Cek jika buffer penuh
		if (g_rx_index >= RX_BUFFER_SIZE - 1) {
 80021f4:	4b21      	ldr	r3, [pc, #132]	@ (800227c <CDC_On_Receive+0x98>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b7e      	cmp	r3, #126	@ 0x7e
 80021fa:	d907      	bls.n	800220c <CDC_On_Receive+0x28>
			g_rx_index = 0; // Reset jika overflow
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <CDC_On_Receive+0x98>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
			memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8002202:	2280      	movs	r2, #128	@ 0x80
 8002204:	2100      	movs	r1, #0
 8002206:	481e      	ldr	r0, [pc, #120]	@ (8002280 <CDC_On_Receive+0x9c>)
 8002208:	f00b f85e 	bl	800d2c8 <memset>
		}

		// Echo karakter kembali ke terminal
		CDC_Transmit_FS(&Buf[i], 1);
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f009 fc83 	bl	800bb20 <CDC_Transmit_FS>

		// Jika menerima Enter (CR) atau Newline (LF)
		if (Buf[i] == '\r' || Buf[i] == '\n') {
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b0d      	cmp	r3, #13
 8002224:	d005      	beq.n	8002232 <CDC_On_Receive+0x4e>
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d10c      	bne.n	800224c <CDC_On_Receive+0x68>
			// Abaikan jika buffer kosong
			if (g_rx_index > 0) {
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <CDC_On_Receive+0x98>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d013      	beq.n	8002262 <CDC_On_Receive+0x7e>
				g_usb_rx_buffer[g_rx_index] = '\0'; // Null-terminate string
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <CDC_On_Receive+0x98>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <CDC_On_Receive+0x9c>)
 8002240:	2100      	movs	r1, #0
 8002242:	54d1      	strb	r1, [r2, r3]
				g_command_ready = 1;     // Set flag untuk diproses di main loop
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <CDC_On_Receive+0xa0>)
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
			if (g_rx_index > 0) {
 800224a:	e00a      	b.n	8002262 <CDC_On_Receive+0x7e>
			}
		} else {
			g_usb_rx_buffer[g_rx_index++] = Buf[i]; // Tambahkan karakter ke buffer
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	441a      	add	r2, r3
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <CDC_On_Receive+0x98>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	4808      	ldr	r0, [pc, #32]	@ (800227c <CDC_On_Receive+0x98>)
 800225a:	6001      	str	r1, [r0, #0]
 800225c:	7811      	ldrb	r1, [r2, #0]
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <CDC_On_Receive+0x9c>)
 8002260:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < Len; i++) {
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3301      	adds	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d3c1      	bcc.n	80021f4 <CDC_On_Receive+0x10>
		}
	}
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000628 	.word	0x20000628
 8002280:	200005a8 	.word	0x200005a8
 8002284:	2000062c 	.word	0x2000062c

08002288 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Callback yang dipanggil setiap kali 1 byte data diterima via UART.
 * @param  huart: pointer ke handle UART.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	// Cari tahu sensor mana yang mengirim data
	for (int i = 0; i < NUM_SENSORS; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e02e      	b.n	80022f4 <HAL_UART_RxCpltCallback+0x6c>
		if (huart->Instance == sensors[i].huart->Instance) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	4819      	ldr	r0, [pc, #100]	@ (8002300 <HAL_UART_RxCpltCallback+0x78>)
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4403      	add	r3, r0
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4299      	cmp	r1, r3
 80022ae:	d11e      	bne.n	80022ee <HAL_UART_RxCpltCallback+0x66>
			Process_UART_Byte(&sensors[i]);
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <HAL_UART_RxCpltCallback+0x78>)
 80022bc:	4413      	add	r3, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f836 	bl	8002330 <Process_UART_Byte>
			// Aktifkan lagi interrupt untuk menerima byte berikutnya
			HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
 80022c4:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_UART_RxCpltCallback+0x78>)
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4a08      	ldr	r2, [pc, #32]	@ (8002300 <HAL_UART_RxCpltCallback+0x78>)
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	2201      	movs	r2, #1
 80022e6:	4619      	mov	r1, r3
 80022e8:	f004 fe11 	bl	8006f0e <HAL_UART_Receive_IT>
			return; // Keluar dari loop setelah menemukan sensor yang sesuai
 80022ec:	e005      	b.n	80022fa <HAL_UART_RxCpltCallback+0x72>
	for (int i = 0; i < NUM_SENSORS; i++) {
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	ddcd      	ble.n	8002296 <HAL_UART_RxCpltCallback+0xe>
		}
	}
}
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000510 	.word	0x20000510

08002304 <Request_Sensor_Data>:
/**
 * @brief  Meminta data dari sensor dengan mengirimkan byte 0xA0.
 * @param  sensor: pointer ke handle sensor yang akan diminta datanya.
 * @retval None
 */
void Request_Sensor_Data(Sensor_HandleTypeDef *sensor) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	uint8_t command_byte = 0xA0;
 800230c:	23a0      	movs	r3, #160	@ 0xa0
 800230e:	73fb      	strb	r3, [r7, #15]
	// 1. Set MAX485 ke mode TX
	// HAL_GPIO_WritePin(sensor->de_port, sensor->de_pin, GPIO_PIN_SET); // DE = HIGH for TX
	// HAL_Delay(1);                                                     // Tunggu sebentar untuk stabilisasi (sesuaikan jika perlu)

	// 2. Kirim byte 0xA0
	HAL_UART_Transmit(sensor->huart, &command_byte, 1, 100); // Timeout 100ms
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f107 010f 	add.w	r1, r7, #15
 8002318:	2364      	movs	r3, #100	@ 0x64
 800231a:	2201      	movs	r2, #1
 800231c:	f004 fd6c 	bl	8006df8 <HAL_UART_Transmit>
	HAL_Delay(1);                    // Tunggu sebentar setelah transmit selesai
 8002320:	2001      	movs	r0, #1
 8002322:	f000 fc0d 	bl	8002b40 <HAL_Delay>

	// 3. Set MAX485 kembali ke mode RX
	// HAL_GPIO_WritePin(sensor->de_port, sensor->de_pin, GPIO_PIN_RESET); // DE = LOW for RX
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <Process_UART_Byte>:
/**
 * @brief  Memproses setiap byte yang masuk menggunakan state machine.
 * @param  sensor: pointer ke handle sensor yang sedang diproses.
 * @retval None
 */
void Process_UART_Byte(Sensor_HandleTypeDef *sensor) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	uint8_t received_byte = sensor->rx_buffer;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	73fb      	strb	r3, [r7, #15]

	switch (sensor->state) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	795b      	ldrb	r3, [r3, #5]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d84c      	bhi.n	80023e0 <Process_UART_Byte+0xb0>
 8002346:	a201      	add	r2, pc, #4	@ (adr r2, 800234c <Process_UART_Byte+0x1c>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	08002361 	.word	0x08002361
 8002350:	080023e1 	.word	0x080023e1
 8002354:	0800236f 	.word	0x0800236f
 8002358:	0800237d 	.word	0x0800237d
 800235c:	080023c5 	.word	0x080023c5
	case STATE_WAIT_FOR_START:
		// Byte pertama setelah request adalah H
		sensor->raw_data[0] = received_byte;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	719a      	strb	r2, [r3, #6]
		sensor->state = STATE_READ_M_DATA;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	715a      	strb	r2, [r3, #5]
		break;
 800236c:	e03c      	b.n	80023e8 <Process_UART_Byte+0xb8>

	case STATE_READ_M_DATA: // Middle byte
		sensor->raw_data[1] = received_byte;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	71da      	strb	r2, [r3, #7]
		sensor->state = STATE_READ_L_DATA;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2203      	movs	r2, #3
 8002378:	715a      	strb	r2, [r3, #5]
		break;
 800237a:	e035      	b.n	80023e8 <Process_UART_Byte+0xb8>

	case STATE_READ_L_DATA: // Low byte
		sensor->raw_data[2] = received_byte;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	721a      	strb	r2, [r3, #8]

		sensor->raw_distance_value = ((uint32_t) sensor->raw_data[0] << 16) | // H byte
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	799b      	ldrb	r3, [r3, #6]
 8002386:	041a      	lsls	r2, r3, #16
				((uint32_t) sensor->raw_data[1] << 8) |  // M byte
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	79db      	ldrb	r3, [r3, #7]
 800238c:	021b      	lsls	r3, r3, #8
		sensor->raw_distance_value = ((uint32_t) sensor->raw_data[0] << 16) | // H byte
 800238e:	4313      	orrs	r3, r2
				(uint32_t) sensor->raw_data[2];          // L byte
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	7a12      	ldrb	r2, [r2, #8]
				((uint32_t) sensor->raw_data[1] << 8) |  // M byte
 8002394:	431a      	orrs	r2, r3
		sensor->raw_distance_value = ((uint32_t) sensor->raw_data[0] << 16) | // H byte
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]

		sensor->distance_mm = (float) sensor->raw_distance_value / 1000.0f;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fc98 	bl	8000cd4 <__aeabi_ui2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4912      	ldr	r1, [pc, #72]	@ (80023f0 <Process_UART_Byte+0xc0>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fd9f 	bl	8000eec <__aeabi_fdiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]
		sensor->new_data_available = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	751a      	strb	r2, [r3, #20]

		sensor->state = STATE_WAIT_FOR_START;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	715a      	strb	r2, [r3, #5]
		break;
 80023c2:	e011      	b.n	80023e8 <Process_UART_Byte+0xb8>

	case STATE_READ_SUM: // Jika sensor masih mengirim checksum, pertahankan logika ini
		// Jika tidak, Anda bisa menghapus state ini dan melompat dari L_DATA langsung ke STATE_WAIT_FOR_START
		uint8_t checksum = (sensor->raw_data[0] + sensor->raw_data[1]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	799a      	ldrb	r2, [r3, #6]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	79db      	ldrb	r3, [r3, #7]
 80023cc:	4413      	add	r3, r2
 80023ce:	b2da      	uxtb	r2, r3
				+ sensor->raw_data[2]) & 0xFF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7a1b      	ldrb	r3, [r3, #8]
		uint8_t checksum = (sensor->raw_data[0] + sensor->raw_data[1]
 80023d4:	4413      	add	r3, r2
 80023d6:	73bb      	strb	r3, [r7, #14]
		if (checksum == received_byte) // Jika checksum ada dan valid
				{
			// Data sudah dihitung di L_DATA, ini hanya validasi checksum
		}
		sensor->state = STATE_WAIT_FOR_START; // Reset state untuk frame berikutnya
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	715a      	strb	r2, [r3, #5]
		break;
 80023de:	e003      	b.n	80023e8 <Process_UART_Byte+0xb8>

	default:
		sensor->state = STATE_WAIT_FOR_START;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	715a      	strb	r2, [r3, #5]
		break;
 80023e6:	bf00      	nop
	}
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	447a0000 	.word	0x447a0000

080023f4 <HAL_UART_ErrorCallback>:
/**
 * @brief  Callback untuk menangani error UART.
 * @param  huart: pointer ke handle UART.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	// Jika terjadi error (misal: Overrun), coba aktifkan kembali interrupt
	for (int i = 0; i < NUM_SENSORS; i++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e024      	b.n	800244c <HAL_UART_ErrorCallback+0x58>
		if (huart->Instance == sensors[i].huart->Instance) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	4814      	ldr	r0, [pc, #80]	@ (8002458 <HAL_UART_ErrorCallback+0x64>)
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4403      	add	r3, r0
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4299      	cmp	r1, r3
 800241a:	d114      	bne.n	8002446 <HAL_UART_ErrorCallback+0x52>
			HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
 800241c:	490e      	ldr	r1, [pc, #56]	@ (8002458 <HAL_UART_ErrorCallback+0x64>)
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_UART_ErrorCallback+0x64>)
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	2201      	movs	r2, #1
 800243e:	4619      	mov	r1, r3
 8002440:	f004 fd65 	bl	8006f0e <HAL_UART_Receive_IT>
			return;
 8002444:	e005      	b.n	8002452 <HAL_UART_ErrorCallback+0x5e>
	for (int i = 0; i < NUM_SENSORS; i++) {
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3301      	adds	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b02      	cmp	r3, #2
 8002450:	ddd7      	ble.n	8002402 <HAL_UART_ErrorCallback+0xe>
		}
	}
}
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000510 	.word	0x20000510

0800245c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
}
 8002462:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <Error_Handler+0x8>

08002468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_MspInit+0x5c>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <HAL_MspInit+0x5c>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6193      	str	r3, [r2, #24]
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_MspInit+0x5c>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <HAL_MspInit+0x5c>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a0e      	ldr	r2, [pc, #56]	@ (80024c4 <HAL_MspInit+0x5c>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <HAL_MspInit+0x5c>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_MspInit+0x60>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_MspInit+0x60>)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010000 	.word	0x40010000

080024cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <HAL_I2C_MspInit+0x90>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d132      	bne.n	8002552 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_I2C_MspInit+0x94>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002560 <HAL_I2C_MspInit+0x94>)
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_I2C_MspInit+0x94>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002504:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250a:	2312      	movs	r3, #18
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4812      	ldr	r0, [pc, #72]	@ (8002564 <HAL_I2C_MspInit+0x98>)
 800251a:	f000 fef5 	bl	8003308 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800251e:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_I2C_MspInit+0x9c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
 8002534:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <HAL_I2C_MspInit+0x9c>)
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_I2C_MspInit+0x94>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <HAL_I2C_MspInit+0x94>)
 8002540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002544:	61d3      	str	r3, [r2, #28]
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_I2C_MspInit+0x94>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	@ 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40005400 	.word	0x40005400
 8002560:	40021000 	.word	0x40021000
 8002564:	40010c00 	.word	0x40010c00
 8002568:	40010000 	.word	0x40010000

0800256c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0b      	ldr	r2, [pc, #44]	@ (80025a8 <HAL_RTC_MspInit+0x3c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d110      	bne.n	80025a0 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800257e:	f003 fa5b 	bl	8005a38 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <HAL_RTC_MspInit+0x40>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_RTC_MspInit+0x40>)
 8002588:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <HAL_RTC_MspInit+0x40>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RTC_MspInit+0x44>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40002800 	.word	0x40002800
 80025ac:	40021000 	.word	0x40021000
 80025b0:	4242043c 	.word	0x4242043c

080025b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1b      	ldr	r2, [pc, #108]	@ (800263c <HAL_SPI_MspInit+0x88>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d12f      	bne.n	8002634 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <HAL_SPI_MspInit+0x8c>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <HAL_SPI_MspInit+0x8c>)
 80025da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <HAL_SPI_MspInit+0x8c>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <HAL_SPI_MspInit+0x8c>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_SPI_MspInit+0x8c>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_SPI_MspInit+0x8c>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002604:	23a0      	movs	r3, #160	@ 0xa0
 8002606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4619      	mov	r1, r3
 8002616:	480b      	ldr	r0, [pc, #44]	@ (8002644 <HAL_SPI_MspInit+0x90>)
 8002618:	f000 fe76 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800261c:	2340      	movs	r3, #64	@ 0x40
 800261e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4619      	mov	r1, r3
 800262e:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_SPI_MspInit+0x90>)
 8002630:	f000 fe6a 	bl	8003308 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40013000 	.word	0x40013000
 8002640:	40021000 	.word	0x40021000
 8002644:	40010800 	.word	0x40010800

08002648 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	@ 0x30
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0320 	add.w	r3, r7, #32
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5f      	ldr	r2, [pc, #380]	@ (80027e0 <HAL_UART_MspInit+0x198>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d13a      	bne.n	80026de <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002668:	4b5e      	ldr	r3, [pc, #376]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a5d      	ldr	r2, [pc, #372]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800266e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b5b      	ldr	r3, [pc, #364]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	4b58      	ldr	r3, [pc, #352]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a57      	ldr	r2, [pc, #348]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b55      	ldr	r3, [pc, #340]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	4619      	mov	r1, r3
 80026ac:	484e      	ldr	r0, [pc, #312]	@ (80027e8 <HAL_UART_MspInit+0x1a0>)
 80026ae:	f000 fe2b 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 0320 	add.w	r3, r7, #32
 80026c4:	4619      	mov	r1, r3
 80026c6:	4848      	ldr	r0, [pc, #288]	@ (80027e8 <HAL_UART_MspInit+0x1a0>)
 80026c8:	f000 fe1e 	bl	8003308 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	2025      	movs	r0, #37	@ 0x25
 80026d2:	f000 fb30 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026d6:	2025      	movs	r0, #37	@ 0x25
 80026d8:	f000 fb49 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80026dc:	e07c      	b.n	80027d8 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a42      	ldr	r2, [pc, #264]	@ (80027ec <HAL_UART_MspInit+0x1a4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d138      	bne.n	800275a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026e8:	4b3e      	ldr	r3, [pc, #248]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4a3d      	ldr	r2, [pc, #244]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f2:	61d3      	str	r3, [r2, #28]
 80026f4:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a37      	ldr	r2, [pc, #220]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002718:	2304      	movs	r3, #4
 800271a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 0320 	add.w	r3, r7, #32
 8002728:	4619      	mov	r1, r3
 800272a:	482f      	ldr	r0, [pc, #188]	@ (80027e8 <HAL_UART_MspInit+0x1a0>)
 800272c:	f000 fdec 	bl	8003308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002730:	2308      	movs	r3, #8
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	4619      	mov	r1, r3
 8002742:	4829      	ldr	r0, [pc, #164]	@ (80027e8 <HAL_UART_MspInit+0x1a0>)
 8002744:	f000 fde0 	bl	8003308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	2026      	movs	r0, #38	@ 0x26
 800274e:	f000 faf2 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002752:	2026      	movs	r0, #38	@ 0x26
 8002754:	f000 fb0b 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 8002758:	e03e      	b.n	80027d8 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a24      	ldr	r2, [pc, #144]	@ (80027f0 <HAL_UART_MspInit+0x1a8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d139      	bne.n	80027d8 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002764:	4b1f      	ldr	r3, [pc, #124]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a1e      	ldr	r2, [pc, #120]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800276a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a18      	ldr	r2, [pc, #96]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <HAL_UART_MspInit+0x19c>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002794:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a2:	f107 0320 	add.w	r3, r7, #32
 80027a6:	4619      	mov	r1, r3
 80027a8:	4812      	ldr	r0, [pc, #72]	@ (80027f4 <HAL_UART_MspInit+0x1ac>)
 80027aa:	f000 fdad 	bl	8003308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	4619      	mov	r1, r3
 80027c2:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <HAL_UART_MspInit+0x1ac>)
 80027c4:	f000 fda0 	bl	8003308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2027      	movs	r0, #39	@ 0x27
 80027ce:	f000 fab2 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027d2:	2027      	movs	r0, #39	@ 0x27
 80027d4:	f000 facb 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 80027d8:	bf00      	nop
 80027da:	3730      	adds	r7, #48	@ 0x30
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010800 	.word	0x40010800
 80027ec:	40004400 	.word	0x40004400
 80027f0:	40004800 	.word	0x40004800
 80027f4:	40010c00 	.word	0x40010c00

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <NMI_Handler+0x4>

08002800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <HardFault_Handler+0x4>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <MemManage_Handler+0x4>

08002810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <UsageFault_Handler+0x4>

08002820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002848:	f000 f95e 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002856:	f001 fcab 	bl	80041b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20001334 	.word	0x20001334

08002864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <USART1_IRQHandler+0x10>)
 800286a:	f004 fb75 	bl	8006f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000438 	.word	0x20000438

08002878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800287c:	4802      	ldr	r0, [pc, #8]	@ (8002888 <USART2_IRQHandler+0x10>)
 800287e:	f004 fb6b 	bl	8006f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000480 	.word	0x20000480

0800288c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <USART3_IRQHandler+0x10>)
 8002892:	f004 fb61 	bl	8006f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004c8 	.word	0x200004c8

080028a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return 1;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <_kill>:

int _kill(int pid, int sig)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028b8:	f00a fd6a 	bl	800d390 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	2216      	movs	r2, #22
 80028c0:	601a      	str	r2, [r3, #0]
  return -1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_exit>:

void _exit (int status)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028d6:	f04f 31ff 	mov.w	r1, #4294967295
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffe7 	bl	80028ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <_exit+0x12>

080028e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e00a      	b.n	800290c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028f6:	f3af 8000 	nop.w
 80028fa:	4601      	mov	r1, r0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	60ba      	str	r2, [r7, #8]
 8002902:	b2ca      	uxtb	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	dbf0      	blt.n	80028f6 <_read+0x12>
  }

  return len;
 8002914:	687b      	ldr	r3, [r7, #4]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e009      	b.n	8002944 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	60ba      	str	r2, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	dbf1      	blt.n	8002930 <_write+0x12>
  }
  return len;
 800294c:	687b      	ldr	r3, [r7, #4]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_close>:

int _close(int file)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800297c:	605a      	str	r2, [r3, #4]
  return 0;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <_isatty>:

int _isatty(int file)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
	...

080029b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c0:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <_sbrk+0x5c>)
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <_sbrk+0x60>)
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029cc:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <_sbrk+0x64>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d4:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <_sbrk+0x64>)
 80029d6:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <_sbrk+0x68>)
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e8:	f00a fcd2 	bl	800d390 <__errno>
 80029ec:	4603      	mov	r3, r0
 80029ee:	220c      	movs	r2, #12
 80029f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	e009      	b.n	8002a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f8:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fe:	4b07      	ldr	r3, [pc, #28]	@ (8002a1c <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	4a05      	ldr	r2, [pc, #20]	@ (8002a1c <_sbrk+0x64>)
 8002a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20005000 	.word	0x20005000
 8002a18:	00000400 	.word	0x00000400
 8002a1c:	20000630 	.word	0x20000630
 8002a20:	20001978 	.word	0x20001978

08002a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a30:	f7ff fff8 	bl	8002a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480b      	ldr	r0, [pc, #44]	@ (8002a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a36:	490c      	ldr	r1, [pc, #48]	@ (8002a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a38:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a4c:	4c09      	ldr	r4, [pc, #36]	@ (8002a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f00a fc9f 	bl	800d39c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a5e:	f7ff f90f 	bl	8001c80 <main>
  bx lr
 8002a62:	4770      	bx	lr
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002a6c:	08011d2c 	.word	0x08011d2c
  ldr r2, =_sbss
 8002a70:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002a74:	20001978 	.word	0x20001978

08002a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC1_2_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_Init+0x28>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	@ (8002aa4 <HAL_Init+0x28>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 f947 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fce6 	bl	8002468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f95f 	bl	8002d8a <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 f927 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	@ (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000008 	.word	0x20000008
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_IncTick+0x1c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_IncTick+0x20>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a03      	ldr	r2, [pc, #12]	@ (8002b28 <HAL_IncTick+0x20>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000008 	.word	0x20000008
 8002b28:	20000634 	.word	0x20000634

08002b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <HAL_GetTick+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	20000634 	.word	0x20000634

08002b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff fff0 	bl	8002b2c <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d005      	beq.n	8002b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_Delay+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b66:	bf00      	nop
 8002b68:	f7ff ffe0 	bl	8002b2c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8f7      	bhi.n	8002b68 <HAL_Delay+0x28>
  {
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000008 	.word	0x20000008

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4906      	ldr	r1, [pc, #24]	@ (8002c20 <__NVIC_EnableIRQ+0x34>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	@ (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	@ (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	@ 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff90 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff2d 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff42 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff90 	bl	8002c78 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5f 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff35 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d008      	beq.n	8002dcc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e020      	b.n	8002e0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d005      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e051      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020e 	bic.w	r2, r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a22      	ldr	r2, [pc, #136]	@ (8002eec <HAL_DMA_Abort_IT+0xd4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d029      	beq.n	8002eba <HAL_DMA_Abort_IT+0xa2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a21      	ldr	r2, [pc, #132]	@ (8002ef0 <HAL_DMA_Abort_IT+0xd8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d022      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x9e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef4 <HAL_DMA_Abort_IT+0xdc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01a      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x98>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef8 <HAL_DMA_Abort_IT+0xe0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d012      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x92>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1c      	ldr	r2, [pc, #112]	@ (8002efc <HAL_DMA_Abort_IT+0xe4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x8c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1b      	ldr	r2, [pc, #108]	@ (8002f00 <HAL_DMA_Abort_IT+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d102      	bne.n	8002e9e <HAL_DMA_Abort_IT+0x86>
 8002e98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e9c:	e00e      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002e9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ea2:	e00b      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ea8:	e008      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eae:	e005      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb4:	e002      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	e000      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4a11      	ldr	r2, [pc, #68]	@ (8002f04 <HAL_DMA_Abort_IT+0xec>)
 8002ebe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
    } 
  }
  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40020008 	.word	0x40020008
 8002ef0:	4002001c 	.word	0x4002001c
 8002ef4:	40020030 	.word	0x40020030
 8002ef8:	40020044 	.word	0x40020044
 8002efc:	40020058 	.word	0x40020058
 8002f00:	4002006c 	.word	0x4002006c
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f22:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe0 <HAL_FLASH_Program+0xd8>)
 8002f24:	7e1b      	ldrb	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_FLASH_Program+0x26>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e054      	b.n	8002fd8 <HAL_FLASH_Program+0xd0>
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <HAL_FLASH_Program+0xd8>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f38:	f000 f8a8 	bl	800308c <FLASH_WaitForLastOperation>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d144      	bne.n	8002fd0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	757b      	strb	r3, [r7, #21]
 8002f50:	e007      	b.n	8002f62 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d102      	bne.n	8002f5e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	757b      	strb	r3, [r7, #21]
 8002f5c:	e001      	b.n	8002f62 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	75bb      	strb	r3, [r7, #22]
 8002f66:	e02d      	b.n	8002fc4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002f68:	7dbb      	ldrb	r3, [r7, #22]
 8002f6a:	005a      	lsls	r2, r3, #1
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	eb02 0c03 	add.w	ip, r2, r3
 8002f72:	7dbb      	ldrb	r3, [r7, #22]
 8002f74:	0119      	lsls	r1, r3, #4
 8002f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f7a:	f1c1 0620 	rsb	r6, r1, #32
 8002f7e:	f1a1 0020 	sub.w	r0, r1, #32
 8002f82:	fa22 f401 	lsr.w	r4, r2, r1
 8002f86:	fa03 f606 	lsl.w	r6, r3, r6
 8002f8a:	4334      	orrs	r4, r6
 8002f8c:	fa23 f000 	lsr.w	r0, r3, r0
 8002f90:	4304      	orrs	r4, r0
 8002f92:	fa23 f501 	lsr.w	r5, r3, r1
 8002f96:	b2a3      	uxth	r3, r4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4660      	mov	r0, ip
 8002f9c:	f000 f85a 	bl	8003054 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fa0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fa4:	f000 f872 	bl	800308c <FLASH_WaitForLastOperation>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002fac:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <HAL_FLASH_Program+0xdc>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_FLASH_Program+0xdc>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002fbe:	7dbb      	ldrb	r3, [r7, #22]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	75bb      	strb	r3, [r7, #22]
 8002fc4:	7dba      	ldrb	r2, [r7, #22]
 8002fc6:	7d7b      	ldrb	r3, [r7, #21]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d3cd      	bcc.n	8002f68 <HAL_FLASH_Program+0x60>
 8002fcc:	e000      	b.n	8002fd0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002fce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_FLASH_Program+0xd8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	761a      	strb	r2, [r3, #24]

  return status;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe0:	20000638 	.word	0x20000638
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <HAL_FLASH_Unlock+0x40>)
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_FLASH_Unlock+0x40>)
 8003000:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <HAL_FLASH_Unlock+0x44>)
 8003002:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003004:	4b08      	ldr	r3, [pc, #32]	@ (8003028 <HAL_FLASH_Unlock+0x40>)
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_FLASH_Unlock+0x48>)
 8003008:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800300a:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_FLASH_Unlock+0x40>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800301a:	79fb      	ldrb	r3, [r7, #7]
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40022000 	.word	0x40022000
 800302c:	45670123 	.word	0x45670123
 8003030:	cdef89ab 	.word	0xcdef89ab

08003034 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_FLASH_Lock+0x1c>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <HAL_FLASH_Lock+0x1c>)
 800303e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003042:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40022000 	.word	0x40022000

08003054 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003060:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <FLASH_Program_HalfWord+0x30>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003066:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <FLASH_Program_HalfWord+0x34>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	4a07      	ldr	r2, [pc, #28]	@ (8003088 <FLASH_Program_HalfWord+0x34>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	887a      	ldrh	r2, [r7, #2]
 8003076:	801a      	strh	r2, [r3, #0]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000638 	.word	0x20000638
 8003088:	40022000 	.word	0x40022000

0800308c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7ff fd4a 	bl	8002b2c <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800309a:	e010      	b.n	80030be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d00c      	beq.n	80030be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <FLASH_WaitForLastOperation+0x2e>
 80030aa:	f7ff fd3f 	bl	8002b2c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d201      	bcs.n	80030be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e025      	b.n	800310a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <FLASH_WaitForLastOperation+0x88>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e8      	bne.n	800309c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030ca:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <FLASH_WaitForLastOperation+0x88>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <FLASH_WaitForLastOperation+0x88>)
 80030d8:	2220      	movs	r2, #32
 80030da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <FLASH_WaitForLastOperation+0x88>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <FLASH_WaitForLastOperation+0x88>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030f4:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <FLASH_WaitForLastOperation+0x88>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003100:	f000 f80a 	bl	8003118 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40022000 	.word	0x40022000

08003118 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003122:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800312e:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <FLASH_SetErrorCode+0x9c>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <FLASH_SetErrorCode+0x9c>)
 8003138:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f043 0310 	orr.w	r3, r3, #16
 8003140:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800314e:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <FLASH_SetErrorCode+0x9c>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <FLASH_SetErrorCode+0x9c>)
 8003158:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003162:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <FLASH_SetErrorCode+0x9c>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	4a0f      	ldr	r2, [pc, #60]	@ (80031b4 <FLASH_SetErrorCode+0x9c>)
 8003178:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a0c      	ldr	r2, [pc, #48]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f240 1201 	movw	r2, #257	@ 0x101
 800318c:	4293      	cmp	r3, r2
 800318e:	d106      	bne.n	800319e <FLASH_SetErrorCode+0x86>
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4a06      	ldr	r2, [pc, #24]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	61d3      	str	r3, [r2, #28]
}  
 800319c:	e002      	b.n	80031a4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800319e:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <FLASH_SetErrorCode+0x98>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60d3      	str	r3, [r2, #12]
}  
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40022000 	.word	0x40022000
 80031b4:	20000638 	.word	0x20000638

080031b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003288 <HAL_FLASHEx_Erase+0xd0>)
 80031cc:	7e1b      	ldrb	r3, [r3, #24]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_FLASHEx_Erase+0x1e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e053      	b.n	800327e <HAL_FLASHEx_Erase+0xc6>
 80031d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003288 <HAL_FLASHEx_Erase+0xd0>)
 80031d8:	2201      	movs	r2, #1
 80031da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d116      	bne.n	8003212 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80031e8:	f7ff ff50 	bl	800308c <FLASH_WaitForLastOperation>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d141      	bne.n	8003276 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f000 f84c 	bl	8003290 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80031fc:	f7ff ff46 	bl	800308c <FLASH_WaitForLastOperation>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003204:	4b21      	ldr	r3, [pc, #132]	@ (800328c <HAL_FLASHEx_Erase+0xd4>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	4a20      	ldr	r2, [pc, #128]	@ (800328c <HAL_FLASHEx_Erase+0xd4>)
 800320a:	f023 0304 	bic.w	r3, r3, #4
 800320e:	6113      	str	r3, [r2, #16]
 8003210:	e031      	b.n	8003276 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003212:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003216:	f7ff ff39 	bl	800308c <FLASH_WaitForLastOperation>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d12a      	bne.n	8003276 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f04f 32ff 	mov.w	r2, #4294967295
 8003226:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	e019      	b.n	8003264 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f000 f849 	bl	80032c8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003236:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800323a:	f7ff ff27 	bl	800308c <FLASH_WaitForLastOperation>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_FLASHEx_Erase+0xd4>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	4a11      	ldr	r2, [pc, #68]	@ (800328c <HAL_FLASHEx_Erase+0xd4>)
 8003248:	f023 0302 	bic.w	r3, r3, #2
 800324c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	601a      	str	r2, [r3, #0]
            break;
 800325a:	e00c      	b.n	8003276 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003262:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	029a      	lsls	r2, r3, #10
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4413      	add	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	d3dc      	bcc.n	8003230 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003276:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <HAL_FLASHEx_Erase+0xd0>)
 8003278:	2200      	movs	r2, #0
 800327a:	761a      	strb	r2, [r3, #24]

  return status;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000638 	.word	0x20000638
 800328c:	40022000 	.word	0x40022000

08003290 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <FLASH_MassErase+0x30>)
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <FLASH_MassErase+0x34>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <FLASH_MassErase+0x34>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <FLASH_MassErase+0x34>)
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	4a05      	ldr	r2, [pc, #20]	@ (80032c4 <FLASH_MassErase+0x34>)
 80032b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032b4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000638 	.word	0x20000638
 80032c4:	40022000 	.word	0x40022000

080032c8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <FLASH_PageErase+0x38>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <FLASH_PageErase+0x3c>)
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <FLASH_PageErase+0x3c>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80032e2:	4a08      	ldr	r2, [pc, #32]	@ (8003304 <FLASH_PageErase+0x3c>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <FLASH_PageErase+0x3c>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <FLASH_PageErase+0x3c>)
 80032ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000638 	.word	0x20000638
 8003304:	40022000 	.word	0x40022000

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	@ 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331a:	e169      	b.n	80035f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800331c:	2201      	movs	r2, #1
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	429a      	cmp	r2, r3
 8003336:	f040 8158 	bne.w	80035ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a9a      	ldr	r2, [pc, #616]	@ (80035a8 <HAL_GPIO_Init+0x2a0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d05e      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003344:	4a98      	ldr	r2, [pc, #608]	@ (80035a8 <HAL_GPIO_Init+0x2a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d875      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 800334a:	4a98      	ldr	r2, [pc, #608]	@ (80035ac <HAL_GPIO_Init+0x2a4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d058      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003350:	4a96      	ldr	r2, [pc, #600]	@ (80035ac <HAL_GPIO_Init+0x2a4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d86f      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 8003356:	4a96      	ldr	r2, [pc, #600]	@ (80035b0 <HAL_GPIO_Init+0x2a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d052      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 800335c:	4a94      	ldr	r2, [pc, #592]	@ (80035b0 <HAL_GPIO_Init+0x2a8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d869      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 8003362:	4a94      	ldr	r2, [pc, #592]	@ (80035b4 <HAL_GPIO_Init+0x2ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d04c      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003368:	4a92      	ldr	r2, [pc, #584]	@ (80035b4 <HAL_GPIO_Init+0x2ac>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d863      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 800336e:	4a92      	ldr	r2, [pc, #584]	@ (80035b8 <HAL_GPIO_Init+0x2b0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d046      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
 8003374:	4a90      	ldr	r2, [pc, #576]	@ (80035b8 <HAL_GPIO_Init+0x2b0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d85d      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 800337a:	2b12      	cmp	r3, #18
 800337c:	d82a      	bhi.n	80033d4 <HAL_GPIO_Init+0xcc>
 800337e:	2b12      	cmp	r3, #18
 8003380:	d859      	bhi.n	8003436 <HAL_GPIO_Init+0x12e>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <HAL_GPIO_Init+0x80>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	08003403 	.word	0x08003403
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033ef 	.word	0x080033ef
 8003394:	08003431 	.word	0x08003431
 8003398:	08003437 	.word	0x08003437
 800339c:	08003437 	.word	0x08003437
 80033a0:	08003437 	.word	0x08003437
 80033a4:	08003437 	.word	0x08003437
 80033a8:	08003437 	.word	0x08003437
 80033ac:	08003437 	.word	0x08003437
 80033b0:	08003437 	.word	0x08003437
 80033b4:	08003437 	.word	0x08003437
 80033b8:	08003437 	.word	0x08003437
 80033bc:	08003437 	.word	0x08003437
 80033c0:	08003437 	.word	0x08003437
 80033c4:	08003437 	.word	0x08003437
 80033c8:	08003437 	.word	0x08003437
 80033cc:	080033e5 	.word	0x080033e5
 80033d0:	080033f9 	.word	0x080033f9
 80033d4:	4a79      	ldr	r2, [pc, #484]	@ (80035bc <HAL_GPIO_Init+0x2b4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033da:	e02c      	b.n	8003436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	623b      	str	r3, [r7, #32]
          break;
 80033e2:	e029      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	3304      	adds	r3, #4
 80033ea:	623b      	str	r3, [r7, #32]
          break;
 80033ec:	e024      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	3308      	adds	r3, #8
 80033f4:	623b      	str	r3, [r7, #32]
          break;
 80033f6:	e01f      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	330c      	adds	r3, #12
 80033fe:	623b      	str	r3, [r7, #32]
          break;
 8003400:	e01a      	b.n	8003438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800340a:	2304      	movs	r3, #4
 800340c:	623b      	str	r3, [r7, #32]
          break;
 800340e:	e013      	b.n	8003438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003418:	2308      	movs	r3, #8
 800341a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	611a      	str	r2, [r3, #16]
          break;
 8003422:	e009      	b.n	8003438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003424:	2308      	movs	r3, #8
 8003426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	615a      	str	r2, [r3, #20]
          break;
 800342e:	e003      	b.n	8003438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
          break;
 8003434:	e000      	b.n	8003438 <HAL_GPIO_Init+0x130>
          break;
 8003436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2bff      	cmp	r3, #255	@ 0xff
 800343c:	d801      	bhi.n	8003442 <HAL_GPIO_Init+0x13a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_Init+0x13e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2bff      	cmp	r3, #255	@ 0xff
 800344c:	d802      	bhi.n	8003454 <HAL_GPIO_Init+0x14c>
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	e002      	b.n	800345a <HAL_GPIO_Init+0x152>
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	3b08      	subs	r3, #8
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	210f      	movs	r1, #15
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	431a      	orrs	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80b1 	beq.w	80035ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003488:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <HAL_GPIO_Init+0x2b8>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a4c      	ldr	r2, [pc, #304]	@ (80035c0 <HAL_GPIO_Init+0x2b8>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b4a      	ldr	r3, [pc, #296]	@ (80035c0 <HAL_GPIO_Init+0x2b8>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034a0:	4a48      	ldr	r2, [pc, #288]	@ (80035c4 <HAL_GPIO_Init+0x2bc>)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	@ (80035c8 <HAL_GPIO_Init+0x2c0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_GPIO_Init+0x1ec>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3f      	ldr	r2, [pc, #252]	@ (80035cc <HAL_GPIO_Init+0x2c4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00d      	beq.n	80034f0 <HAL_GPIO_Init+0x1e8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3e      	ldr	r2, [pc, #248]	@ (80035d0 <HAL_GPIO_Init+0x2c8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <HAL_GPIO_Init+0x1e4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3d      	ldr	r2, [pc, #244]	@ (80035d4 <HAL_GPIO_Init+0x2cc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_GPIO_Init+0x1e0>
 80034e4:	2303      	movs	r3, #3
 80034e6:	e006      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034e8:	2304      	movs	r3, #4
 80034ea:	e004      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e002      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_GPIO_Init+0x1ee>
 80034f4:	2300      	movs	r3, #0
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	f002 0203 	and.w	r2, r2, #3
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	4093      	lsls	r3, r2
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003506:	492f      	ldr	r1, [pc, #188]	@ (80035c4 <HAL_GPIO_Init+0x2bc>)
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	3302      	adds	r3, #2
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d006      	beq.n	800352e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	492c      	ldr	r1, [pc, #176]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800352e:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	43db      	mvns	r3, r3
 8003536:	4928      	ldr	r1, [pc, #160]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003538:	4013      	ands	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003548:	4b23      	ldr	r3, [pc, #140]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	4922      	ldr	r1, [pc, #136]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003556:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	43db      	mvns	r3, r3
 800355e:	491e      	ldr	r1, [pc, #120]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003560:	4013      	ands	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4918      	ldr	r1, [pc, #96]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800357e:	4b16      	ldr	r3, [pc, #88]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	43db      	mvns	r3, r3
 8003586:	4914      	ldr	r1, [pc, #80]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 8003588:	4013      	ands	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d021      	beq.n	80035dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003598:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <HAL_GPIO_Init+0x2d0>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e021      	b.n	80035ea <HAL_GPIO_Init+0x2e2>
 80035a6:	bf00      	nop
 80035a8:	10320000 	.word	0x10320000
 80035ac:	10310000 	.word	0x10310000
 80035b0:	10220000 	.word	0x10220000
 80035b4:	10210000 	.word	0x10210000
 80035b8:	10120000 	.word	0x10120000
 80035bc:	10110000 	.word	0x10110000
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40010800 	.word	0x40010800
 80035cc:	40010c00 	.word	0x40010c00
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	4909      	ldr	r1, [pc, #36]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	3301      	adds	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f ae8e 	bne.w	800331c <HAL_GPIO_Init+0x14>
  }
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	372c      	adds	r7, #44	@ 0x2c
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	40010400 	.word	0x40010400

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800362c:	e003      	b.n	8003636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e12b      	b.n	80038aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fe ff30 	bl	80024cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a4:	f002 fd9e 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 80036a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a81      	ldr	r2, [pc, #516]	@ (80038b4 <HAL_I2C_Init+0x274>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d807      	bhi.n	80036c4 <HAL_I2C_Init+0x84>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a80      	ldr	r2, [pc, #512]	@ (80038b8 <HAL_I2C_Init+0x278>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e006      	b.n	80036d2 <HAL_I2C_Init+0x92>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a7d      	ldr	r2, [pc, #500]	@ (80038bc <HAL_I2C_Init+0x27c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	bf94      	ite	ls
 80036cc:	2301      	movls	r3, #1
 80036ce:	2300      	movhi	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0e7      	b.n	80038aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a78      	ldr	r2, [pc, #480]	@ (80038c0 <HAL_I2C_Init+0x280>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0c9b      	lsrs	r3, r3, #18
 80036e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a6a      	ldr	r2, [pc, #424]	@ (80038b4 <HAL_I2C_Init+0x274>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d802      	bhi.n	8003714 <HAL_I2C_Init+0xd4>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	e009      	b.n	8003728 <HAL_I2C_Init+0xe8>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a69      	ldr	r2, [pc, #420]	@ (80038c4 <HAL_I2C_Init+0x284>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	3301      	adds	r3, #1
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	430b      	orrs	r3, r1
 800372e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800373a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	495c      	ldr	r1, [pc, #368]	@ (80038b4 <HAL_I2C_Init+0x274>)
 8003744:	428b      	cmp	r3, r1
 8003746:	d819      	bhi.n	800377c <HAL_I2C_Init+0x13c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e59      	subs	r1, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fbb1 f3f3 	udiv	r3, r1, r3
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800375c:	400b      	ands	r3, r1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_I2C_Init+0x138>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1e59      	subs	r1, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	e051      	b.n	800381c <HAL_I2C_Init+0x1dc>
 8003778:	2304      	movs	r3, #4
 800377a:	e04f      	b.n	800381c <HAL_I2C_Init+0x1dc>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d111      	bne.n	80037a8 <HAL_I2C_Init+0x168>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e012      	b.n	80037ce <HAL_I2C_Init+0x18e>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e58      	subs	r0, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	0099      	lsls	r1, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Init+0x196>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_I2C_Init+0x1dc>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10e      	bne.n	80037fc <HAL_I2C_Init+0x1bc>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e58      	subs	r0, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	440b      	add	r3, r1
 80037ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fa:	e00f      	b.n	800381c <HAL_I2C_Init+0x1dc>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	6809      	ldr	r1, [r1, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800384a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6911      	ldr	r1, [r2, #16]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68d2      	ldr	r2, [r2, #12]
 8003856:	4311      	orrs	r1, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	430b      	orrs	r3, r1
 800385e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	000186a0 	.word	0x000186a0
 80038b8:	001e847f 	.word	0x001e847f
 80038bc:	003d08ff 	.word	0x003d08ff
 80038c0:	431bde83 	.word	0x431bde83
 80038c4:	10624dd3 	.word	0x10624dd3

080038c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	461a      	mov	r2, r3
 80038d4:	460b      	mov	r3, r1
 80038d6:	817b      	strh	r3, [r7, #10]
 80038d8:	4613      	mov	r3, r2
 80038da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff f926 	bl	8002b2c <HAL_GetTick>
 80038e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	f040 80e0 	bne.w	8003ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2319      	movs	r3, #25
 80038f6:	2201      	movs	r2, #1
 80038f8:	4970      	ldr	r1, [pc, #448]	@ (8003abc <HAL_I2C_Master_Transmit+0x1f4>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f964 	bl	8003bc8 <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	e0d3      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_I2C_Master_Transmit+0x50>
 8003914:	2302      	movs	r3, #2
 8003916:	e0cc      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d007      	beq.n	800393e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800394c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2221      	movs	r2, #33	@ 0x21
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2210      	movs	r2, #16
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	893a      	ldrh	r2, [r7, #8]
 800396e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a50      	ldr	r2, [pc, #320]	@ (8003ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003980:	8979      	ldrh	r1, [r7, #10]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f89c 	bl	8003ac4 <I2C_MasterRequestWrite>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e08d      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039ac:	e066      	b.n	8003a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	6a39      	ldr	r1, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa22 	bl	8003dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d107      	bne.n	80039d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e06b      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d11b      	bne.n	8003a50 <HAL_I2C_Master_Transmit+0x188>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d017      	beq.n	8003a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	6a39      	ldr	r1, [r7, #32]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fa19 	bl	8003e8c <I2C_WaitOnBTFFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d107      	bne.n	8003a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e01a      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d194      	bne.n	80039ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e000      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
  }
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	00100002 	.word	0x00100002
 8003ac0:	ffff0000 	.word	0xffff0000

08003ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d006      	beq.n	8003aee <I2C_MasterRequestWrite+0x2a>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d003      	beq.n	8003aee <I2C_MasterRequestWrite+0x2a>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aec:	d108      	bne.n	8003b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e00b      	b.n	8003b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	d107      	bne.n	8003b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f84f 	bl	8003bc8 <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3e:	d103      	bne.n	8003b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e035      	b.n	8003bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b54:	d108      	bne.n	8003b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b56:	897b      	ldrh	r3, [r7, #10]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b64:	611a      	str	r2, [r3, #16]
 8003b66:	e01b      	b.n	8003ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b68:	897b      	ldrh	r3, [r7, #10]
 8003b6a:	11db      	asrs	r3, r3, #7
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0306 	and.w	r3, r3, #6
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f063 030f 	orn	r3, r3, #15
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	490e      	ldr	r1, [pc, #56]	@ (8003bc0 <I2C_MasterRequestWrite+0xfc>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f898 	bl	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e010      	b.n	8003bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4907      	ldr	r1, [pc, #28]	@ (8003bc4 <I2C_MasterRequestWrite+0x100>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f888 	bl	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	00010008 	.word	0x00010008
 8003bc4:	00010002 	.word	0x00010002

08003bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd8:	e048      	b.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d044      	beq.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe ffa3 	bl	8002b2c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d139      	bne.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d10d      	bne.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	e00c      	b.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	43da      	mvns	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e023      	b.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10d      	bne.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	e00c      	b.n	8003cac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d093      	beq.n	8003bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cca:	e071      	b.n	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cda:	d123      	bne.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e067      	b.n	8003df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d041      	beq.n	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2c:	f7fe fefe 	bl	8002b2c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d136      	bne.n	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10c      	bne.n	8003d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4013      	ands	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e00b      	b.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e021      	b.n	8003df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10c      	bne.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e00b      	b.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f af6d 	bne.w	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e08:	e034      	b.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f886 	bl	8003f1c <I2C_IsAcknowledgeFailed>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e034      	b.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d028      	beq.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe fe83 	bl	8002b2c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11d      	bne.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d016      	beq.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e007      	b.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7e:	2b80      	cmp	r3, #128	@ 0x80
 8003e80:	d1c3      	bne.n	8003e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e98:	e034      	b.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f83e 	bl	8003f1c <I2C_IsAcknowledgeFailed>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e034      	b.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d028      	beq.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fe fe3b 	bl	8002b2c <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d016      	beq.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e007      	b.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d1c3      	bne.n	8003e9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f32:	d11b      	bne.n	8003f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	f043 0204 	orr.w	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e0e8      	b.n	800415c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f007 fef2 	bl	800bd88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f003 fd53 	bl	8007a62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc6:	f003 fd29 	bl	8007a1c <USB_CoreInit>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0bf      	b.n	800415c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 fd57 	bl	8007a96 <USB_SetCurrentMode>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0b0      	b.n	800415c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	e03e      	b.n	800407e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	3311      	adds	r3, #17
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	3310      	adds	r3, #16
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	440b      	add	r3, r1
 8004036:	3313      	adds	r3, #19
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	440b      	add	r3, r1
 800404a:	3320      	adds	r3, #32
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	3324      	adds	r3, #36	@ 0x24
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	3301      	adds	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	791b      	ldrb	r3, [r3, #4]
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	429a      	cmp	r2, r3
 8004086:	d3bb      	bcc.n	8004000 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004088:	2300      	movs	r3, #0
 800408a:	73fb      	strb	r3, [r7, #15]
 800408c:	e044      	b.n	8004118 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	440b      	add	r3, r1
 80040c8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	440b      	add	r3, r1
 80040de:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	440b      	add	r3, r1
 800410a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	3301      	adds	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3b5      	bcc.n	800408e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412c:	f003 fcbf 	bl	8007aae <USB_DevInit>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e00c      	b.n	800415c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f005 ff3e 	bl	8009fd6 <USB_DevDisconnect>

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_PCD_Start+0x16>
 8004176:	2302      	movs	r3, #2
 8004178:	e016      	b.n	80041a8 <HAL_PCD_Start+0x44>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 fc55 	bl	8007a36 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800418c:	2101      	movs	r1, #1
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f008 f86d 	bl	800c26e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f005 ff12 	bl	8009fc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 ff14 	bl	8009fea <USB_ReadInterrupts>
 80041c2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb1a 	bl	8004808 <PCD_EP_ISR_Handler>

    return;
 80041d4:	e119      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f2:	b292      	uxth	r2, r2
 80041f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f007 fe40 	bl	800be7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041fe:	2100      	movs	r1, #0
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f905 	bl	8004410 <HAL_PCD_SetAddress>

    return;
 8004206:	e100      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00c      	beq.n	800422c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004224:	b292      	uxth	r2, r2
 8004226:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800422a:	e0ee      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00c      	beq.n	8004250 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004248:	b292      	uxth	r2, r2
 800424a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800424e:	e0dc      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d027      	beq.n	80042aa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0204 	bic.w	r2, r2, #4
 800426c:	b292      	uxth	r2, r2
 800426e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0208 	bic.w	r2, r2, #8
 8004284:	b292      	uxth	r2, r2
 8004286:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f007 fe30 	bl	800bef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042a2:	b292      	uxth	r2, r2
 80042a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042a8:	e0af      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8083 	beq.w	80043bc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e010      	b.n	80042de <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	8812      	ldrh	r2, [r2, #0]
 80042cc:	b292      	uxth	r2, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	3320      	adds	r3, #32
 80042d2:	443b      	add	r3, r7
 80042d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
 80042da:	3301      	adds	r3, #1
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	7ffb      	ldrb	r3, [r7, #31]
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d9eb      	bls.n	80042bc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	b292      	uxth	r2, r2
 80042f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	b292      	uxth	r2, r2
 8004310:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004314:	bf00      	nop
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800431e:	b29b      	uxth	r3, r3
 8004320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f6      	beq.n	8004316 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433a:	b292      	uxth	r2, r2
 800433c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e00f      	b.n	8004366 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	4611      	mov	r1, r2
 800434e:	7ffa      	ldrb	r2, [r7, #31]
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	440a      	add	r2, r1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	3320      	adds	r3, #32
 8004358:	443b      	add	r3, r7
 800435a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800435e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004360:	7ffb      	ldrb	r3, [r7, #31]
 8004362:	3301      	adds	r3, #1
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b07      	cmp	r3, #7
 800436a:	d9ec      	bls.n	8004346 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0208 	orr.w	r2, r2, #8
 800437e:	b292      	uxth	r2, r2
 8004380:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004396:	b292      	uxth	r2, r2
 8004398:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0204 	orr.w	r2, r2, #4
 80043ae:	b292      	uxth	r2, r2
 80043b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f007 fd81 	bl	800bebc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80043ba:	e026      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00f      	beq.n	80043e6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043d8:	b292      	uxth	r2, r2
 80043da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f007 fd3f 	bl	800be62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80043e4:	e011      	b.n	800440a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00c      	beq.n	800440a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004402:	b292      	uxth	r2, r2
 8004404:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004408:	bf00      	nop
  }
}
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_PCD_SetAddress+0x1a>
 8004426:	2302      	movs	r3, #2
 8004428:	e012      	b.n	8004450 <HAL_PCD_SetAddress+0x40>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f005 fdab 	bl	8009f9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	461a      	mov	r2, r3
 8004466:	4603      	mov	r3, r0
 8004468:	70fb      	strb	r3, [r7, #3]
 800446a:	460b      	mov	r3, r1
 800446c:	803b      	strh	r3, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da0e      	bge.n	800449c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 0207 	and.w	r2, r3, #7
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	3310      	adds	r3, #16
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	705a      	strb	r2, [r3, #1]
 800449a:	e00e      	b.n	80044ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 0207 	and.w	r2, r3, #7
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044c6:	883a      	ldrh	r2, [r7, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	78ba      	ldrb	r2, [r7, #2]
 80044d0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044d2:	78bb      	ldrb	r3, [r7, #2]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d102      	bne.n	80044de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_PCD_EP_Open+0x94>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e00e      	b.n	800450a <HAL_PCD_EP_Open+0xb2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68f9      	ldr	r1, [r7, #12]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 faf4 	bl	8007ae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004508:	7afb      	ldrb	r3, [r7, #11]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800451e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	da0e      	bge.n	8004544 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 0207 	and.w	r2, r3, #7
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	3310      	adds	r3, #16
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	705a      	strb	r2, [r3, #1]
 8004542:	e00e      	b.n	8004562 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_PCD_EP_Close+0x6a>
 8004578:	2302      	movs	r3, #2
 800457a:	e00e      	b.n	800459a <HAL_PCD_EP_Close+0x88>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	4618      	mov	r0, r3
 800458c:	f003 fe6c 	bl	8008268 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	460b      	mov	r3, r1
 80045b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	7afb      	ldrb	r3, [r7, #11]
 80045b4:	f003 0207 	and.w	r2, r3, #7
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2200      	movs	r2, #0
 80045e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e2:	7afb      	ldrb	r3, [r7, #11]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6979      	ldr	r1, [r7, #20]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f004 f823 	bl	8008640 <USB_EPStartXfer>

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f003 0207 	and.w	r2, r3, #7
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	460b      	mov	r3, r1
 8004640:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	f003 0207 	and.w	r2, r3, #7
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	3310      	adds	r3, #16
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2201      	movs	r2, #1
 800467c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800467e:	7afb      	ldrb	r3, [r7, #11]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	b2da      	uxtb	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6979      	ldr	r1, [r7, #20]
 8004690:	4618      	mov	r0, r3
 8004692:	f003 ffd5 	bl	8008640 <USB_EPStartXfer>

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	7912      	ldrb	r2, [r2, #4]
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e04c      	b.n	8004758 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da0e      	bge.n	80046e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	f003 0207 	and.w	r2, r3, #7
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	3310      	adds	r3, #16
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	705a      	strb	r2, [r3, #1]
 80046e2:	e00c      	b.n	80046fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	b2da      	uxtb	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_PCD_EP_SetStall+0x7e>
 800471a:	2302      	movs	r3, #2
 800471c:	e01c      	b.n	8004758 <HAL_PCD_EP_SetStall+0xb8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	f005 fb38 	bl	8009da2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	2b00      	cmp	r3, #0
 800473a:	d108      	bne.n	800474e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f005 fc5d 	bl	800a008 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	7912      	ldrb	r2, [r2, #4]
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e040      	b.n	8004800 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800477e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004782:	2b00      	cmp	r3, #0
 8004784:	da0e      	bge.n	80047a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 0207 	and.w	r2, r3, #7
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	3310      	adds	r3, #16
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	705a      	strb	r2, [r3, #1]
 80047a2:	e00e      	b.n	80047c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_PCD_EP_ClrStall+0x82>
 80047de:	2302      	movs	r3, #2
 80047e0:	e00e      	b.n	8004800 <HAL_PCD_EP_ClrStall+0xa0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f005 fb26 	bl	8009e42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b096      	sub	sp, #88	@ 0x58
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004810:	e3bb      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800481a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800481e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800482c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 8175 	bne.w	8004b20 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004836:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d14e      	bne.n	80048e0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800484e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004852:	81fb      	strh	r3, [r7, #14]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004862:	b29b      	uxth	r3, r3
 8004864:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3310      	adds	r3, #16
 800486a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4413      	add	r3, r2
 8004880:	3302      	adds	r3, #2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004896:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	441a      	add	r2, r3
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80048a6:	2100      	movs	r1, #0
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f007 fac0 	bl	800be2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7b5b      	ldrb	r3, [r3, #13]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8368 	beq.w	8004f8a <PCD_EP_ISR_Handler+0x782>
 80048ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8363 	bne.w	8004f8a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	7b5b      	ldrb	r3, [r3, #13]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	735a      	strb	r2, [r3, #13]
 80048de:	e354      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048e6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d034      	beq.n	8004968 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	3306      	adds	r3, #6
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004928:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004936:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800493c:	b29b      	uxth	r3, r3
 800493e:	f005 fbb4 	bl	800a0aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29a      	uxth	r2, r3
 800494a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800494e:	4013      	ands	r3, r2
 8004950:	823b      	strh	r3, [r7, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	8a3a      	ldrh	r2, [r7, #16]
 8004958:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800495c:	b292      	uxth	r2, r2
 800495e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f007 fa37 	bl	800bdd4 <HAL_PCD_SetupStageCallback>
 8004966:	e310      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004968:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800496c:	2b00      	cmp	r3, #0
 800496e:	f280 830c 	bge.w	8004f8a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29a      	uxth	r2, r3
 800497a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800497e:	4013      	ands	r3, r2
 8004980:	83fb      	strh	r3, [r7, #30]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	8bfa      	ldrh	r2, [r7, #30]
 8004988:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800498c:	b292      	uxth	r2, r2
 800498e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	3306      	adds	r3, #6
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80049bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d019      	beq.n	80049f8 <PCD_EP_ISR_Handler+0x1f0>
 80049c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d2:	6959      	ldr	r1, [r3, #20]
 80049d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80049d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f005 fb64 	bl	800a0aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80049e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	441a      	add	r2, r3
 80049ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049f0:	2100      	movs	r1, #0
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f007 fa00 	bl	800bdf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004a02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 82bd 	bne.w	8004f8a <PCD_EP_ISR_Handler+0x782>
 8004a10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004a14:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a1c:	f000 82b5 	beq.w	8004f8a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	4413      	add	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a56:	d91d      	bls.n	8004a94 <PCD_EP_ISR_Handler+0x28c>
 8004a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <PCD_EP_ISR_Handler+0x26a>
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	029b      	lsls	r3, r3, #10
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e026      	b.n	8004ae2 <PCD_EP_ISR_Handler+0x2da>
 8004a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <PCD_EP_ISR_Handler+0x2aa>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	e017      	b.n	8004ae2 <PCD_EP_ISR_Handler+0x2da>
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <PCD_EP_ISR_Handler+0x2c4>
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	3301      	adds	r3, #1
 8004aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af2:	827b      	strh	r3, [r7, #18]
 8004af4:	8a7b      	ldrh	r3, [r7, #18]
 8004af6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004afa:	827b      	strh	r3, [r7, #18]
 8004afc:	8a7b      	ldrh	r3, [r7, #18]
 8004afe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b02:	827b      	strh	r3, [r7, #18]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	8a7b      	ldrh	r3, [r7, #18]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
 8004b1e:	e234      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b34:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f280 80fc 	bge.w	8004d36 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b54:	4013      	ands	r3, r2
 8004b56:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004b6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b74:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	7b1b      	ldrb	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d125      	bne.n	8004bde <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3306      	adds	r3, #6
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8092 	beq.w	8004cec <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	6959      	ldr	r1, [r3, #20]
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	88da      	ldrh	r2, [r3, #6]
 8004bd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bd8:	f005 fa67 	bl	800a0aa <USB_ReadPMA>
 8004bdc:	e086      	b.n	8004cec <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d10a      	bne.n	8004bfc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004bea:	461a      	mov	r2, r3
 8004bec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9d9 	bl	8004fa6 <HAL_PCD_EP_DB_Receive>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004bfa:	e077      	b.n	8004cec <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c16:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d024      	beq.n	8004ca4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3302      	adds	r3, #2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004c86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02e      	beq.n	8004cec <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c98:	891a      	ldrh	r2, [r3, #8]
 8004c9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c9e:	f005 fa04 	bl	800a0aa <USB_ReadPMA>
 8004ca2:	e023      	b.n	8004cec <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3306      	adds	r3, #6
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ccc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004cd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cde:	6959      	ldr	r1, [r3, #20]
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce2:	895a      	ldrh	r2, [r3, #10]
 8004ce4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ce8:	f005 f9df 	bl	800a0aa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004cf4:	441a      	add	r2, r3
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d02:	441a      	add	r2, r3
 8004d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <PCD_EP_ISR_Handler+0x514>
 8004d10:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d206      	bcs.n	8004d2a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f007 f868 	bl	800bdf8 <HAL_PCD_DataOutStageCallback>
 8004d28:	e005      	b.n	8004d36 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d30:	4618      	mov	r0, r3
 8004d32:	f003 fc85 	bl	8008640 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8123 	beq.w	8004f8a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d44:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3310      	adds	r3, #16
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4413      	add	r3, r2
 8004d56:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d96:	78db      	ldrb	r3, [r3, #3]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 80a2 	bne.w	8004ee2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da6:	7b1b      	ldrb	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8093 	beq.w	8004ed4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d046      	beq.n	8004e48 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d126      	bne.n	8004e10 <PCD_EP_ISR_Handler+0x608>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	4413      	add	r3, r2
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	011a      	lsls	r2, r3, #4
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e061      	b.n	8004ed4 <PCD_EP_ISR_Handler+0x6cc>
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d15d      	bne.n	8004ed4 <PCD_EP_ISR_Handler+0x6cc>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	4413      	add	r3, r2
 8004e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	011a      	lsls	r2, r3, #4
 8004e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e38:	4413      	add	r3, r2
 8004e3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e045      	b.n	8004ed4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d126      	bne.n	8004ea4 <PCD_EP_ISR_Handler+0x69c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	4413      	add	r3, r2
 8004e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	011a      	lsls	r2, r3, #4
 8004e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e76:	4413      	add	r3, r2
 8004e78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e017      	b.n	8004ed4 <PCD_EP_ISR_Handler+0x6cc>
 8004ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d113      	bne.n	8004ed4 <PCD_EP_ISR_Handler+0x6cc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eba:	4413      	add	r3, r2
 8004ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	011a      	lsls	r2, r3, #4
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f006 ffa7 	bl	800be2e <HAL_PCD_DataInStageCallback>
 8004ee0:	e053      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004ee2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d146      	bne.n	8004f7c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	3302      	adds	r3, #2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f16:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d907      	bls.n	8004f36 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f32:	619a      	str	r2, [r3, #24]
 8004f34:	e002      	b.n	8004f3c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f38:	2200      	movs	r2, #0
 8004f3a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f006 ff6f 	bl	800be2e <HAL_PCD_DataInStageCallback>
 8004f50:	e01b      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004f5a:	441a      	add	r2, r3
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004f68:	441a      	add	r2, r3
 8004f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f74:	4618      	mov	r0, r3
 8004f76:	f003 fb63 	bl	8008640 <USB_EPStartXfer>
 8004f7a:	e006      	b.n	8004f8a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f80:	461a      	mov	r2, r3
 8004f82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f91b 	bl	80051c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f6ff ac3b 	blt.w	8004812 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3758      	adds	r7, #88	@ 0x58
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b088      	sub	sp, #32
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d07e      	beq.n	80050bc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	8b7b      	ldrh	r3, [r7, #26]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d306      	bcc.n	8005000 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	8b7b      	ldrh	r3, [r7, #26]
 8004ff8:	1ad2      	subs	r2, r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	619a      	str	r2, [r3, #24]
 8004ffe:	e002      	b.n	8005006 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2200      	movs	r2, #0
 8005004:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d123      	bne.n	8005056 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005028:	833b      	strh	r3, [r7, #24]
 800502a:	8b3b      	ldrh	r3, [r7, #24]
 800502c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005030:	833b      	strh	r3, [r7, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	8b3b      	ldrh	r3, [r7, #24]
 8005042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800504e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01f      	beq.n	80050a0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	82fb      	strh	r3, [r7, #22]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	8afb      	ldrh	r3, [r7, #22]
 800508c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005098:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800509c:	b29b      	uxth	r3, r3
 800509e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050a0:	8b7b      	ldrh	r3, [r7, #26]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8087 	beq.w	80051b6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6959      	ldr	r1, [r3, #20]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	891a      	ldrh	r2, [r3, #8]
 80050b4:	8b7b      	ldrh	r3, [r7, #26]
 80050b6:	f004 fff8 	bl	800a0aa <USB_ReadPMA>
 80050ba:	e07c      	b.n	80051b6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	3306      	adds	r3, #6
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	8b7b      	ldrh	r3, [r7, #26]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d306      	bcc.n	80050fe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	8b7b      	ldrh	r3, [r7, #26]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	619a      	str	r2, [r3, #24]
 80050fc:	e002      	b.n	8005104 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d123      	bne.n	8005154 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	83fb      	strh	r3, [r7, #30]
 8005128:	8bfb      	ldrh	r3, [r7, #30]
 800512a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800512e:	83fb      	strh	r3, [r7, #30]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	441a      	add	r2, r3
 800513e:	8bfb      	ldrh	r3, [r7, #30]
 8005140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11f      	bne.n	800519e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005178:	83bb      	strh	r3, [r7, #28]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8bbb      	ldrh	r3, [r7, #28]
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800519e:	8b7b      	ldrh	r3, [r7, #26]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	895a      	ldrh	r2, [r3, #10]
 80051b0:	8b7b      	ldrh	r3, [r7, #26]
 80051b2:	f004 ff7a 	bl	800a0aa <USB_ReadPMA>
    }
  }

  return count;
 80051b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b0a4      	sub	sp, #144	@ 0x90
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 81dd 	beq.w	8005594 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	3302      	adds	r3, #2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005202:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800520e:	429a      	cmp	r2, r3
 8005210:	d907      	bls.n	8005222 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	619a      	str	r2, [r3, #24]
 8005220:	e002      	b.n	8005228 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 80b9 	bne.w	80053a4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d126      	bne.n	8005288 <HAL_PCD_EP_DB_Transmit+0xc8>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005248:	b29b      	uxth	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	4413      	add	r3, r2
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	011a      	lsls	r2, r3, #4
 8005258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525a:	4413      	add	r3, r2
 800525c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005280:	b29a      	uxth	r2, r3
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	e01a      	b.n	80052be <HAL_PCD_EP_DB_Transmit+0xfe>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d116      	bne.n	80052be <HAL_PCD_EP_DB_Transmit+0xfe>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a4:	4413      	add	r3, r2
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	011a      	lsls	r2, r3, #4
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	2200      	movs	r2, #0
 80052bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d126      	bne.n	800531a <HAL_PCD_EP_DB_Transmit+0x15a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	011a      	lsls	r2, r3, #4
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fe:	b29a      	uxth	r2, r3
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005312:	b29a      	uxth	r2, r3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e017      	b.n	800534a <HAL_PCD_EP_DB_Transmit+0x18a>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d113      	bne.n	800534a <HAL_PCD_EP_DB_Transmit+0x18a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	4413      	add	r3, r2
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	4413      	add	r3, r2
 800533e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2200      	movs	r2, #0
 8005348:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f006 fd6c 	bl	800be2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 82fc 	beq.w	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537c:	82fb      	strh	r3, [r7, #22]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8afb      	ldrh	r3, [r7, #22]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005396:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800539a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]
 80053a2:	e2da      	b.n	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d021      	beq.n	80053f2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 82ae 	bne.w	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005406:	441a      	add	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005414:	441a      	add	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	429a      	cmp	r2, r3
 8005424:	d30b      	bcc.n	800543e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	621a      	str	r2, [r3, #32]
 800543c:	e017      	b.n	800546e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d108      	bne.n	8005458 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800544a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005456:	e00a      	b.n	800546e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2200      	movs	r2, #0
 800546c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d165      	bne.n	8005542 <HAL_PCD_EP_DB_Transmit+0x382>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005484:	b29b      	uxth	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548a:	4413      	add	r3, r2
 800548c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005496:	4413      	add	r3, r2
 8005498:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800549c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80054b4:	d91d      	bls.n	80054f2 <HAL_PCD_EP_DB_Transmit+0x332>
 80054b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x310>
 80054ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054cc:	3b01      	subs	r3, #1
 80054ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29b      	uxth	r3, r3
 80054de:	4313      	orrs	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e044      	b.n	800557c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80054f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_PCD_EP_DB_Transmit+0x350>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e035      	b.n	800557c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_PCD_EP_DB_Transmit+0x36a>
 8005524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005526:	3301      	adds	r3, #1
 8005528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29a      	uxth	r2, r3
 8005530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005532:	b29b      	uxth	r3, r3
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	b29b      	uxth	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	b29a      	uxth	r2, r3
 800553c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e01c      	b.n	800557c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d118      	bne.n	800557c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800555e:	4413      	add	r3, r2
 8005560:	647b      	str	r3, [r7, #68]	@ 0x44
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	011a      	lsls	r2, r3, #4
 8005568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800556a:	4413      	add	r3, r2
 800556c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005570:	643b      	str	r3, [r7, #64]	@ 0x40
 8005572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005576:	b29a      	uxth	r2, r3
 8005578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800557a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6959      	ldr	r1, [r3, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	891a      	ldrh	r2, [r3, #8]
 8005588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800558c:	b29b      	uxth	r3, r3
 800558e:	f004 fd46 	bl	800a01e <USB_WritePMA>
 8005592:	e1e2      	b.n	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	3306      	adds	r3, #6
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d307      	bcc.n	80055dc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	619a      	str	r2, [r3, #24]
 80055da:	e002      	b.n	80055e2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 80c0 	bne.w	800576c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d126      	bne.n	8005642 <HAL_PCD_EP_DB_Transmit+0x482>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005602:	b29b      	uxth	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005608:	4413      	add	r3, r2
 800560a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	011a      	lsls	r2, r3, #4
 8005612:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005614:	4413      	add	r3, r2
 8005616:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800561a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800561c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005626:	b29a      	uxth	r2, r3
 8005628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e01a      	b.n	8005678 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d116      	bne.n	8005678 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800565e:	4413      	add	r3, r2
 8005660:	667b      	str	r3, [r7, #100]	@ 0x64
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	011a      	lsls	r2, r3, #4
 8005668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566a:	4413      	add	r3, r2
 800566c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005670:	663b      	str	r3, [r7, #96]	@ 0x60
 8005672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005674:	2200      	movs	r2, #0
 8005676:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	677b      	str	r3, [r7, #116]	@ 0x74
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d12b      	bne.n	80056de <HAL_PCD_EP_DB_Transmit+0x51e>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005694:	b29b      	uxth	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800569a:	4413      	add	r3, r2
 800569c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	011a      	lsls	r2, r3, #4
 80056a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a6:	4413      	add	r3, r2
 80056a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056da:	801a      	strh	r2, [r3, #0]
 80056dc:	e017      	b.n	800570e <HAL_PCD_EP_DB_Transmit+0x54e>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d113      	bne.n	800570e <HAL_PCD_EP_DB_Transmit+0x54e>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f4:	4413      	add	r3, r2
 80056f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005700:	4413      	add	r3, r2
 8005702:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005706:	673b      	str	r3, [r7, #112]	@ 0x70
 8005708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570a:	2200      	movs	r2, #0
 800570c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f006 fb8a 	bl	800be2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 811a 	bne.w	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800573c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005740:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	441a      	add	r2, r3
 8005752:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800575e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]
 800576a:	e0f6      	b.n	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d121      	bne.n	80057ba <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800578c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005790:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 80ca 	bne.w	800595a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80057ce:	441a      	add	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80057dc:	441a      	add	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6a1a      	ldr	r2, [r3, #32]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d30b      	bcc.n	8005806 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	621a      	str	r2, [r3, #32]
 8005804:	e017      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800580e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800581e:	e00a      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	657b      	str	r3, [r7, #84]	@ 0x54
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d165      	bne.n	8005910 <HAL_PCD_EP_DB_Transmit+0x750>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005858:	4413      	add	r3, r2
 800585a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005864:	4413      	add	r3, r2
 8005866:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800586a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800586c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005876:	b29a      	uxth	r2, r3
 8005878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005880:	2b3e      	cmp	r3, #62	@ 0x3e
 8005882:	d91d      	bls.n	80058c0 <HAL_PCD_EP_DB_Transmit+0x700>
 8005884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800588c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <HAL_PCD_EP_DB_Transmit+0x6de>
 8005898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800589a:	3b01      	subs	r3, #1
 800589c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800589e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e041      	b.n	8005944 <HAL_PCD_EP_DB_Transmit+0x784>
 80058c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <HAL_PCD_EP_DB_Transmit+0x71e>
 80058c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e032      	b.n	8005944 <HAL_PCD_EP_DB_Transmit+0x784>
 80058de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x738>
 80058f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058f4:	3301      	adds	r3, #1
 80058f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b29a      	uxth	r2, r3
 800590a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e019      	b.n	8005944 <HAL_PCD_EP_DB_Transmit+0x784>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d115      	bne.n	8005944 <HAL_PCD_EP_DB_Transmit+0x784>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005920:	b29b      	uxth	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005926:	4413      	add	r3, r2
 8005928:	657b      	str	r3, [r7, #84]	@ 0x54
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005932:	4413      	add	r3, r2
 8005934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005938:	653b      	str	r3, [r7, #80]	@ 0x50
 800593a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800593e:	b29a      	uxth	r2, r3
 8005940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005942:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6959      	ldr	r1, [r3, #20]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	895a      	ldrh	r2, [r3, #10]
 8005950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005954:	b29b      	uxth	r3, r3
 8005956:	f004 fb62 	bl	800a01e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005974:	82bb      	strh	r3, [r7, #20]
 8005976:	8abb      	ldrh	r3, [r7, #20]
 8005978:	f083 0310 	eor.w	r3, r3, #16
 800597c:	82bb      	strh	r3, [r7, #20]
 800597e:	8abb      	ldrh	r3, [r7, #20]
 8005980:	f083 0320 	eor.w	r3, r3, #32
 8005984:	82bb      	strh	r3, [r7, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	8abb      	ldrh	r3, [r7, #20]
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3790      	adds	r7, #144	@ 0x90
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	817b      	strh	r3, [r7, #10]
 80059c2:	4613      	mov	r3, r2
 80059c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059d2:	897b      	ldrh	r3, [r7, #10]
 80059d4:	f003 0207 	and.w	r2, r3, #7
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	3310      	adds	r3, #16
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e009      	b.n	80059fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059ea:	897a      	ldrh	r2, [r7, #10]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d107      	bne.n	8005a14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	80da      	strh	r2, [r3, #6]
 8005a12:	e00b      	b.n	8005a2c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2201      	movs	r2, #1
 8005a18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	@ (8005a4c <HAL_PWR_EnableBkUpAccess+0x14>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	420e0020 	.word	0x420e0020

08005a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e272      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8087 	beq.w	8005b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a70:	4b92      	ldr	r3, [pc, #584]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d00c      	beq.n	8005a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d112      	bne.n	8005aae <HAL_RCC_OscConfig+0x5e>
 8005a88:	4b8c      	ldr	r3, [pc, #560]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a94:	d10b      	bne.n	8005aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a96:	4b89      	ldr	r3, [pc, #548]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d06c      	beq.n	8005b7c <HAL_RCC_OscConfig+0x12c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d168      	bne.n	8005b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e24c      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab6:	d106      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x76>
 8005ab8:	4b80      	ldr	r3, [pc, #512]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a7f      	ldr	r2, [pc, #508]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	e02e      	b.n	8005b24 <HAL_RCC_OscConfig+0xd4>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x98>
 8005ace:	4b7b      	ldr	r3, [pc, #492]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	4b78      	ldr	r3, [pc, #480]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a77      	ldr	r2, [pc, #476]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e01d      	b.n	8005b24 <HAL_RCC_OscConfig+0xd4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0xbc>
 8005af2:	4b72      	ldr	r3, [pc, #456]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a71      	ldr	r2, [pc, #452]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b6f      	ldr	r3, [pc, #444]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a6e      	ldr	r2, [pc, #440]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0xd4>
 8005b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a6a      	ldr	r2, [pc, #424]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b68      	ldr	r3, [pc, #416]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a67      	ldr	r2, [pc, #412]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d013      	beq.n	8005b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7fc fffe 	bl	8002b2c <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fc fffa 	bl	8002b2c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	@ 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e200      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b46:	4b5d      	ldr	r3, [pc, #372]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0xe4>
 8005b52:	e014      	b.n	8005b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b54:	f7fc ffea 	bl	8002b2c <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b5c:	f7fc ffe6 	bl	8002b2c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	@ 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1ec      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6e:	4b53      	ldr	r3, [pc, #332]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x10c>
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d063      	beq.n	8005c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b96:	4b49      	ldr	r3, [pc, #292]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d11c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x18c>
 8005ba2:	4b46      	ldr	r3, [pc, #280]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	4b43      	ldr	r3, [pc, #268]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x176>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e1c0      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4939      	ldr	r1, [pc, #228]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bda:	e03a      	b.n	8005c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be4:	4b36      	ldr	r3, [pc, #216]	@ (8005cc0 <HAL_RCC_OscConfig+0x270>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bea:	f7fc ff9f 	bl	8002b2c <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf2:	f7fc ff9b 	bl	8002b2c <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e1a1      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c04:	4b2d      	ldr	r3, [pc, #180]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	4b2a      	ldr	r3, [pc, #168]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4927      	ldr	r1, [pc, #156]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]
 8005c24:	e015      	b.n	8005c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c26:	4b26      	ldr	r3, [pc, #152]	@ (8005cc0 <HAL_RCC_OscConfig+0x270>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fc ff7e 	bl	8002b2c <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c34:	f7fc ff7a 	bl	8002b2c <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e180      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c46:	4b1d      	ldr	r3, [pc, #116]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03a      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d019      	beq.n	8005c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c66:	4b17      	ldr	r3, [pc, #92]	@ (8005cc4 <HAL_RCC_OscConfig+0x274>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6c:	f7fc ff5e 	bl	8002b2c <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c74:	f7fc ff5a 	bl	8002b2c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e160      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c86:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <HAL_RCC_OscConfig+0x26c>)
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c92:	2001      	movs	r0, #1
 8005c94:	f000 face 	bl	8006234 <RCC_Delay>
 8005c98:	e01c      	b.n	8005cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc4 <HAL_RCC_OscConfig+0x274>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca0:	f7fc ff44 	bl	8002b2c <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca6:	e00f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca8:	f7fc ff40 	bl	8002b2c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d908      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e146      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	42420000 	.word	0x42420000
 8005cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc8:	4b92      	ldr	r3, [pc, #584]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e9      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a6 	beq.w	8005e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	4b88      	ldr	r3, [pc, #544]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4a87      	ldr	r2, [pc, #540]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cfc:	61d3      	str	r3, [r2, #28]
 8005cfe:	4b85      	ldr	r3, [pc, #532]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0e:	4b82      	ldr	r3, [pc, #520]	@ (8005f18 <HAL_RCC_OscConfig+0x4c8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d118      	bne.n	8005d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f18 <HAL_RCC_OscConfig+0x4c8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f18 <HAL_RCC_OscConfig+0x4c8>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d26:	f7fc ff01 	bl	8002b2c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fc fefd 	bl	8002b2c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b64      	cmp	r3, #100	@ 0x64
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e103      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d40:	4b75      	ldr	r3, [pc, #468]	@ (8005f18 <HAL_RCC_OscConfig+0x4c8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d106      	bne.n	8005d62 <HAL_RCC_OscConfig+0x312>
 8005d54:	4b6f      	ldr	r3, [pc, #444]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	4a6e      	ldr	r2, [pc, #440]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	6213      	str	r3, [r2, #32]
 8005d60:	e02d      	b.n	8005dbe <HAL_RCC_OscConfig+0x36e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10c      	bne.n	8005d84 <HAL_RCC_OscConfig+0x334>
 8005d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	4a69      	ldr	r2, [pc, #420]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	6213      	str	r3, [r2, #32]
 8005d76:	4b67      	ldr	r3, [pc, #412]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	4a66      	ldr	r2, [pc, #408]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	6213      	str	r3, [r2, #32]
 8005d82:	e01c      	b.n	8005dbe <HAL_RCC_OscConfig+0x36e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d10c      	bne.n	8005da6 <HAL_RCC_OscConfig+0x356>
 8005d8c:	4b61      	ldr	r3, [pc, #388]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	4a60      	ldr	r2, [pc, #384]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d92:	f043 0304 	orr.w	r3, r3, #4
 8005d96:	6213      	str	r3, [r2, #32]
 8005d98:	4b5e      	ldr	r3, [pc, #376]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	6213      	str	r3, [r2, #32]
 8005da4:	e00b      	b.n	8005dbe <HAL_RCC_OscConfig+0x36e>
 8005da6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	4a5a      	ldr	r2, [pc, #360]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	6213      	str	r3, [r2, #32]
 8005db2:	4b58      	ldr	r3, [pc, #352]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	4a57      	ldr	r2, [pc, #348]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005db8:	f023 0304 	bic.w	r3, r3, #4
 8005dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d015      	beq.n	8005df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc6:	f7fc feb1 	bl	8002b2c <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fc fead 	bl	8002b2c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e0b1      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de4:	4b4b      	ldr	r3, [pc, #300]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ee      	beq.n	8005dce <HAL_RCC_OscConfig+0x37e>
 8005df0:	e014      	b.n	8005e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df2:	f7fc fe9b 	bl	8002b2c <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fc fe97 	bl	8002b2c <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e09b      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e10:	4b40      	ldr	r3, [pc, #256]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ee      	bne.n	8005dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d105      	bne.n	8005e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e22:	4b3c      	ldr	r3, [pc, #240]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4a3b      	ldr	r2, [pc, #236]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8087 	beq.w	8005f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e38:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d061      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d146      	bne.n	8005eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4c:	4b33      	ldr	r3, [pc, #204]	@ (8005f1c <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e52:	f7fc fe6b 	bl	8002b2c <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fc fe67 	bl	8002b2c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e06d      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e6c:	4b29      	ldr	r3, [pc, #164]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e80:	d108      	bne.n	8005e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e82:	4b24      	ldr	r3, [pc, #144]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	4921      	ldr	r1, [pc, #132]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e94:	4b1f      	ldr	r3, [pc, #124]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a19      	ldr	r1, [r3, #32]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	491b      	ldr	r1, [pc, #108]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eac:	4b1b      	ldr	r3, [pc, #108]	@ (8005f1c <HAL_RCC_OscConfig+0x4cc>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb2:	f7fc fe3b 	bl	8002b2c <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eba:	f7fc fe37 	bl	8002b2c <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e03d      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ecc:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x46a>
 8005ed8:	e035      	b.n	8005f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eda:	4b10      	ldr	r3, [pc, #64]	@ (8005f1c <HAL_RCC_OscConfig+0x4cc>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fc fe24 	bl	8002b2c <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fc fe20 	bl	8002b2c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e026      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005efa:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <HAL_RCC_OscConfig+0x4c4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x498>
 8005f06:	e01e      	b.n	8005f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e019      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f20:	4b0b      	ldr	r3, [pc, #44]	@ (8005f50 <HAL_RCC_OscConfig+0x500>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d106      	bne.n	8005f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d001      	beq.n	8005f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40021000 	.word	0x40021000

08005f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0d0      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f68:	4b6a      	ldr	r3, [pc, #424]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d910      	bls.n	8005f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b67      	ldr	r3, [pc, #412]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 0207 	bic.w	r2, r3, #7
 8005f7e:	4965      	ldr	r1, [pc, #404]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b63      	ldr	r3, [pc, #396]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0b8      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d020      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fb0:	4b59      	ldr	r3, [pc, #356]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a58      	ldr	r2, [pc, #352]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fc8:	4b53      	ldr	r3, [pc, #332]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4a52      	ldr	r2, [pc, #328]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005fce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd4:	4b50      	ldr	r3, [pc, #320]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	494d      	ldr	r1, [pc, #308]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d040      	beq.n	8006074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d107      	bne.n	800600a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	4b47      	ldr	r3, [pc, #284]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d115      	bne.n	8006032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e07f      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d107      	bne.n	8006022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006012:	4b41      	ldr	r3, [pc, #260]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e073      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006022:	4b3d      	ldr	r3, [pc, #244]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e06b      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006032:	4b39      	ldr	r3, [pc, #228]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f023 0203 	bic.w	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4936      	ldr	r1, [pc, #216]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006044:	f7fc fd72 	bl	8002b2c <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604a:	e00a      	b.n	8006062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604c:	f7fc fd6e 	bl	8002b2c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e053      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	4b2d      	ldr	r3, [pc, #180]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 020c 	and.w	r2, r3, #12
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	429a      	cmp	r2, r3
 8006072:	d1eb      	bne.n	800604c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006074:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d210      	bcs.n	80060a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b24      	ldr	r3, [pc, #144]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 0207 	bic.w	r2, r3, #7
 800608a:	4922      	ldr	r1, [pc, #136]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006092:	4b20      	ldr	r3, [pc, #128]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e032      	b.n	800610a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b0:	4b19      	ldr	r3, [pc, #100]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4916      	ldr	r1, [pc, #88]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ce:	4b12      	ldr	r3, [pc, #72]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	490e      	ldr	r1, [pc, #56]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060e2:	f000 f821 	bl	8006128 <HAL_RCC_GetSysClockFreq>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	490a      	ldr	r1, [pc, #40]	@ (800611c <HAL_RCC_ClockConfig+0x1c8>)
 80060f4:	5ccb      	ldrb	r3, [r1, r3]
 80060f6:	fa22 f303 	lsr.w	r3, r2, r3
 80060fa:	4a09      	ldr	r2, [pc, #36]	@ (8006120 <HAL_RCC_ClockConfig+0x1cc>)
 80060fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060fe:	4b09      	ldr	r3, [pc, #36]	@ (8006124 <HAL_RCC_ClockConfig+0x1d0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fc fcd0 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40022000 	.word	0x40022000
 8006118:	40021000 	.word	0x40021000
 800611c:	0801189c 	.word	0x0801189c
 8006120:	20000000 	.word	0x20000000
 8006124:	20000004 	.word	0x20000004

08006128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006142:	4b1e      	ldr	r3, [pc, #120]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 030c 	and.w	r3, r3, #12
 800614e:	2b04      	cmp	r3, #4
 8006150:	d002      	beq.n	8006158 <HAL_RCC_GetSysClockFreq+0x30>
 8006152:	2b08      	cmp	r3, #8
 8006154:	d003      	beq.n	800615e <HAL_RCC_GetSysClockFreq+0x36>
 8006156:	e027      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006158:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800615a:	613b      	str	r3, [r7, #16]
      break;
 800615c:	e027      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	0c9b      	lsrs	r3, r3, #18
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	4a17      	ldr	r2, [pc, #92]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006168:	5cd3      	ldrb	r3, [r2, r3]
 800616a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d010      	beq.n	8006198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006176:	4b11      	ldr	r3, [pc, #68]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	0c5b      	lsrs	r3, r3, #17
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	4a11      	ldr	r2, [pc, #68]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006182:	5cd3      	ldrb	r3, [r2, r3]
 8006184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a0d      	ldr	r2, [pc, #52]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800618a:	fb03 f202 	mul.w	r2, r3, r2
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	e004      	b.n	80061a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a0c      	ldr	r2, [pc, #48]	@ (80061cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	613b      	str	r3, [r7, #16]
      break;
 80061a6:	e002      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80061aa:	613b      	str	r3, [r7, #16]
      break;
 80061ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ae:	693b      	ldr	r3, [r7, #16]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	007a1200 	.word	0x007a1200
 80061c4:	080118b4 	.word	0x080118b4
 80061c8:	080118c4 	.word	0x080118c4
 80061cc:	003d0900 	.word	0x003d0900

080061d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d4:	4b02      	ldr	r3, [pc, #8]	@ (80061e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	20000000 	.word	0x20000000

080061e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061e8:	f7ff fff2 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	0a1b      	lsrs	r3, r3, #8
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	@ (8006208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40021000 	.word	0x40021000
 8006208:	080118ac 	.word	0x080118ac

0800620c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006210:	f7ff ffde 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	0adb      	lsrs	r3, r3, #11
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4903      	ldr	r1, [pc, #12]	@ (8006230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40021000 	.word	0x40021000
 8006230:	080118ac 	.word	0x080118ac

08006234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <RCC_Delay+0x34>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <RCC_Delay+0x38>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	0a5b      	lsrs	r3, r3, #9
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006250:	bf00      	nop
  }
  while (Delay --);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	60fa      	str	r2, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f9      	bne.n	8006250 <RCC_Delay+0x1c>
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr
 8006268:	20000000 	.word	0x20000000
 800626c:	10624dd3 	.word	0x10624dd3

08006270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d07d      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800628c:	2300      	movs	r3, #0
 800628e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006290:	4b4f      	ldr	r3, [pc, #316]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10d      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800629c:	4b4c      	ldr	r3, [pc, #304]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	4a4b      	ldr	r2, [pc, #300]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062a6:	61d3      	str	r3, [r2, #28]
 80062a8:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b8:	4b46      	ldr	r3, [pc, #280]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d118      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062c4:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a42      	ldr	r2, [pc, #264]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d0:	f7fc fc2c 	bl	8002b2c <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d6:	e008      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d8:	f7fc fc28 	bl	8002b2c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	@ 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e06d      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ea:	4b3a      	ldr	r3, [pc, #232]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02e      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d027      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006314:	4b2e      	ldr	r3, [pc, #184]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800631e:	4b2e      	ldr	r3, [pc, #184]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006324:	4b2c      	ldr	r3, [pc, #176]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800632a:	4a29      	ldr	r2, [pc, #164]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633a:	f7fc fbf7 	bl	8002b2c <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006340:	e00a      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006342:	f7fc fbf3 	bl	8002b2c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e036      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006358:	4b1d      	ldr	r3, [pc, #116]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ee      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006364:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4917      	ldr	r1, [pc, #92]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006372:	4313      	orrs	r3, r2
 8006374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637c:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006394:	4b0e      	ldr	r3, [pc, #56]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	490b      	ldr	r1, [pc, #44]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063b2:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4904      	ldr	r1, [pc, #16]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
 80063d4:	40007000 	.word	0x40007000
 80063d8:	42420440 	.word	0x42420440

080063dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b10      	cmp	r3, #16
 8006402:	f200 808a 	bhi.w	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d045      	beq.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d075      	beq.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006412:	e082      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006414:	4b46      	ldr	r3, [pc, #280]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800641a:	4b45      	ldr	r3, [pc, #276]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d07b      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	0c9b      	lsrs	r3, r3, #18
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	4a41      	ldr	r2, [pc, #260]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006430:	5cd3      	ldrb	r3, [r2, r3]
 8006432:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800643e:	4b3c      	ldr	r3, [pc, #240]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	0c5b      	lsrs	r3, r3, #17
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	4a3b      	ldr	r2, [pc, #236]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800644a:	5cd3      	ldrb	r3, [r2, r3]
 800644c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006458:	4a38      	ldr	r2, [pc, #224]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4a34      	ldr	r2, [pc, #208]	@ (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006474:	4b2e      	ldr	r3, [pc, #184]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800647c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006480:	d102      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	61bb      	str	r3, [r7, #24]
      break;
 8006486:	e04a      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4a2d      	ldr	r2, [pc, #180]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	61bb      	str	r3, [r7, #24]
      break;
 8006496:	e042      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006498:	4b25      	ldr	r3, [pc, #148]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a8:	d108      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80064b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e01f      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c6:	d109      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80064c8:	4b19      	ldr	r3, [pc, #100]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80064d4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e00f      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e6:	d11c      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80064e8:	4b11      	ldr	r3, [pc, #68]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d016      	beq.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80064f4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80064f8:	61bb      	str	r3, [r7, #24]
      break;
 80064fa:	e012      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80064fc:	e011      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80064fe:	f7ff fe85 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 8006502:	4602      	mov	r2, r0
 8006504:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	0b9b      	lsrs	r3, r3, #14
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	3301      	adds	r3, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	61bb      	str	r3, [r7, #24]
      break;
 8006518:	e004      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006522:	bf00      	nop
    }
  }
  return (frequency);
 8006524:	69bb      	ldr	r3, [r7, #24]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000
 8006534:	080118c8 	.word	0x080118c8
 8006538:	080118d8 	.word	0x080118d8
 800653c:	007a1200 	.word	0x007a1200
 8006540:	003d0900 	.word	0x003d0900
 8006544:	aaaaaaab 	.word	0xaaaaaaab

08006548 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e07a      	b.n	8006654 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	7c5b      	ldrb	r3, [r3, #17]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fb fffc 	bl	800256c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9be 	bl	80068fc <HAL_RTC_WaitForSynchro>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e061      	b.n	8006654 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa77 	bl	8006a84 <RTC_EnterInitMode>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2204      	movs	r2, #4
 80065a0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e056      	b.n	8006654 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0207 	bic.w	r2, r2, #7
 80065b4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80065be:	4b27      	ldr	r3, [pc, #156]	@ (800665c <HAL_RTC_Init+0x114>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c2:	4a26      	ldr	r2, [pc, #152]	@ (800665c <HAL_RTC_Init+0x114>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80065ca:	4b24      	ldr	r3, [pc, #144]	@ (800665c <HAL_RTC_Init+0x114>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4921      	ldr	r1, [pc, #132]	@ (800665c <HAL_RTC_Init+0x114>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d003      	beq.n	80065ee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e00e      	b.n	800660c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80065ee:	2001      	movs	r0, #1
 80065f0:	f7ff fef4 	bl	80063dc <HAL_RCCEx_GetPeriphCLKFreq>
 80065f4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2204      	movs	r2, #4
 8006600:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e026      	b.n	8006654 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3b01      	subs	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	0c1a      	lsrs	r2, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f002 020f 	and.w	r2, r2, #15
 8006618:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	b292      	uxth	r2, r2
 8006622:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fa55 	bl	8006ad4 <RTC_ExitInitMode>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e00c      	b.n	8006654 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006652:	2300      	movs	r3, #0
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40006c00 	.word	0x40006c00

08006660 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_RTC_SetTime+0x20>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e080      	b.n	8006786 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	7c1b      	ldrb	r3, [r3, #16]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_RTC_SetTime+0x30>
 800668c:	2302      	movs	r3, #2
 800668e:	e07a      	b.n	8006786 <HAL_RTC_SetTime+0x126>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2202      	movs	r2, #2
 800669a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d113      	bne.n	80066ca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80066ac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	4619      	mov	r1, r3
 80066b6:	460b      	mov	r3, r1
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	1a5b      	subs	r3, r3, r1
 80066bc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80066be:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80066c4:	4413      	add	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	e01e      	b.n	8006708 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fa28 	bl	8006b24 <RTC_Bcd2ToByte>
 80066d4:	4603      	mov	r3, r0
 80066d6:	461a      	mov	r2, r3
 80066d8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80066dc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fa1d 	bl	8006b24 <RTC_Bcd2ToByte>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	4613      	mov	r3, r2
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80066f6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fa11 	bl	8006b24 <RTC_Bcd2ToByte>
 8006702:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006704:	4423      	add	r3, r4
 8006706:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006708:	6979      	ldr	r1, [r7, #20]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f953 	bl	80069b6 <RTC_WriteTimeCounter>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2204      	movs	r2, #4
 800671a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e02f      	b.n	8006786 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0205 	bic.w	r2, r2, #5
 8006734:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f964 	bl	8006a04 <RTC_ReadAlarmCounter>
 800673c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d018      	beq.n	8006778 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	429a      	cmp	r2, r3
 800674c:	d214      	bcs.n	8006778 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006754:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006758:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f96a 	bl	8006a36 <RTC_WriteAlarmCounter>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2204      	movs	r2, #4
 800676c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e006      	b.n	8006786 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006784:	2300      	movs	r3, #0
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}
	...

08006790 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_RTC_SetDate+0x24>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e097      	b.n	80068e8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	7c1b      	ldrb	r3, [r3, #16]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_RTC_SetDate+0x34>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e091      	b.n	80068e8 <HAL_RTC_SetDate+0x158>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2202      	movs	r2, #2
 80067ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	78da      	ldrb	r2, [r3, #3]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	785a      	ldrb	r2, [r3, #1]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	789a      	ldrb	r2, [r3, #2]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	739a      	strb	r2, [r3, #14]
 80067ee:	e01a      	b.n	8006826 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	78db      	ldrb	r3, [r3, #3]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f995 	bl	8006b24 <RTC_Bcd2ToByte>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f98c 	bl	8006b24 <RTC_Bcd2ToByte>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	789b      	ldrb	r3, [r3, #2]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f983 	bl	8006b24 <RTC_Bcd2ToByte>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7bdb      	ldrb	r3, [r3, #15]
 800682a:	4618      	mov	r0, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	7b59      	ldrb	r1, [r3, #13]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	7b9b      	ldrb	r3, [r3, #14]
 8006834:	461a      	mov	r2, r3
 8006836:	f000 f993 	bl	8006b60 <RTC_WeekDayNum>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	7b1a      	ldrb	r2, [r3, #12]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f883 	bl	8006956 <RTC_ReadTimeCounter>
 8006850:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <HAL_RTC_SetDate+0x160>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0adb      	lsrs	r3, r3, #11
 800685c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b18      	cmp	r3, #24
 8006862:	d93a      	bls.n	80068da <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	4a23      	ldr	r2, [pc, #140]	@ (80068f4 <HAL_RTC_SetDate+0x164>)
 8006868:	fba2 2303 	umull	r2, r3, r2, r3
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	4a22      	ldr	r2, [pc, #136]	@ (80068f8 <HAL_RTC_SetDate+0x168>)
 8006870:	fb02 f303 	mul.w	r3, r2, r3
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f89a 	bl	80069b6 <RTC_WriteTimeCounter>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d007      	beq.n	8006898 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2204      	movs	r2, #4
 800688c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e027      	b.n	80068e8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f8b3 	bl	8006a04 <RTC_ReadAlarmCounter>
 800689e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d018      	beq.n	80068da <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d214      	bcs.n	80068da <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80068b6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80068ba:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f8b9 	bl	8006a36 <RTC_WriteAlarmCounter>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2204      	movs	r2, #4
 80068ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e006      	b.n	80068e8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	91a2b3c5 	.word	0x91a2b3c5
 80068f4:	aaaaaaab 	.word	0xaaaaaaab
 80068f8:	00015180 	.word	0x00015180

080068fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e01d      	b.n	800694e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0208 	bic.w	r2, r2, #8
 8006920:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006922:	f7fc f903 	bl	8002b2c <HAL_GetTick>
 8006926:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006928:	e009      	b.n	800693e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800692a:	f7fc f8ff 	bl	8002b2c <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006938:	d901      	bls.n	800693e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e007      	b.n	800694e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ee      	beq.n	800692a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006956:	b480      	push	{r7}
 8006958:	b087      	sub	sp, #28
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	827b      	strh	r3, [r7, #18]
 8006962:	2300      	movs	r3, #0
 8006964:	823b      	strh	r3, [r7, #16]
 8006966:	2300      	movs	r3, #0
 8006968:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006986:	8a7a      	ldrh	r2, [r7, #18]
 8006988:	8a3b      	ldrh	r3, [r7, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d008      	beq.n	80069a0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800698e:	8a3b      	ldrh	r3, [r7, #16]
 8006990:	041a      	lsls	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	b29b      	uxth	r3, r3
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e004      	b.n	80069aa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80069a0:	8a7b      	ldrh	r3, [r7, #18]
 80069a2:	041a      	lsls	r2, r3, #16
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80069aa:	697b      	ldr	r3, [r7, #20]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f85d 	bl	8006a84 <RTC_EnterInitMode>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	e011      	b.n	80069fa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	0c12      	lsrs	r2, r2, #16
 80069de:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	b292      	uxth	r2, r2
 80069e8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f872 	bl	8006ad4 <RTC_ExitInitMode>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	81fb      	strh	r3, [r7, #14]
 8006a10:	2300      	movs	r3, #0
 8006a12:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006a24:	89fb      	ldrh	r3, [r7, #14]
 8006a26:	041a      	lsls	r2, r3, #16
 8006a28:	89bb      	ldrh	r3, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f81d 	bl	8006a84 <RTC_EnterInitMode>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e011      	b.n	8006a7a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	0c12      	lsrs	r2, r2, #16
 8006a5e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	b292      	uxth	r2, r2
 8006a68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f832 	bl	8006ad4 <RTC_ExitInitMode>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006a90:	f7fc f84c 	bl	8002b2c <HAL_GetTick>
 8006a94:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a96:	e009      	b.n	8006aac <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006a98:	f7fc f848 	bl	8002b2c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006aa6:	d901      	bls.n	8006aac <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e00f      	b.n	8006acc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0ee      	beq.n	8006a98 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0210 	orr.w	r2, r2, #16
 8006ac8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0210 	bic.w	r2, r2, #16
 8006aee:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006af0:	f7fc f81c 	bl	8002b2c <HAL_GetTick>
 8006af4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006af6:	e009      	b.n	8006b0c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006af8:	f7fc f818 	bl	8002b2c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b06:	d901      	bls.n	8006b0c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e007      	b.n	8006b1c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0ee      	beq.n	8006af8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	b2db      	uxtb	r3, r3
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
	...

08006b60 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60bb      	str	r3, [r7, #8]
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006b7e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d82d      	bhi.n	8006be2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	1a9b      	subs	r3, r3, r2
 8006b92:	4a2c      	ldr	r2, [pc, #176]	@ (8006c44 <RTC_WeekDayNum+0xe4>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	085a      	lsrs	r2, r3, #1
 8006b9a:	78bb      	ldrb	r3, [r7, #2]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	4926      	ldr	r1, [pc, #152]	@ (8006c48 <RTC_WeekDayNum+0xe8>)
 8006bb0:	fba1 1303 	umull	r1, r3, r1, r3
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	4922      	ldr	r1, [pc, #136]	@ (8006c48 <RTC_WeekDayNum+0xe8>)
 8006bbe:	fba1 1303 	umull	r1, r3, r1, r3
 8006bc2:	09db      	lsrs	r3, r3, #7
 8006bc4:	4413      	add	r3, r2
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	4b20      	ldr	r3, [pc, #128]	@ (8006c4c <RTC_WeekDayNum+0xec>)
 8006bca:	fba3 1302 	umull	r1, r3, r3, r2
 8006bce:	1ad1      	subs	r1, r2, r3
 8006bd0:	0849      	lsrs	r1, r1, #1
 8006bd2:	440b      	add	r3, r1
 8006bd4:	0899      	lsrs	r1, r3, #2
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	1a5b      	subs	r3, r3, r1
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e029      	b.n	8006c36 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	4a15      	ldr	r2, [pc, #84]	@ (8006c44 <RTC_WeekDayNum+0xe4>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	085a      	lsrs	r2, r3, #1
 8006bf6:	78bb      	ldrb	r3, [r7, #2]
 8006bf8:	441a      	add	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	441a      	add	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4910      	ldr	r1, [pc, #64]	@ (8006c48 <RTC_WeekDayNum+0xe8>)
 8006c08:	fba1 1303 	umull	r1, r3, r1, r3
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	490d      	ldr	r1, [pc, #52]	@ (8006c48 <RTC_WeekDayNum+0xe8>)
 8006c14:	fba1 1303 	umull	r1, r3, r1, r3
 8006c18:	09db      	lsrs	r3, r3, #7
 8006c1a:	4413      	add	r3, r2
 8006c1c:	1c9a      	adds	r2, r3, #2
 8006c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c4c <RTC_WeekDayNum+0xec>)
 8006c20:	fba3 1302 	umull	r1, r3, r3, r2
 8006c24:	1ad1      	subs	r1, r2, r3
 8006c26:	0849      	lsrs	r1, r1, #1
 8006c28:	440b      	add	r3, r1
 8006c2a:	0899      	lsrs	r1, r3, #2
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	1a5b      	subs	r3, r3, r1
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	b2db      	uxtb	r3, r3
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	38e38e39 	.word	0x38e38e39
 8006c48:	51eb851f 	.word	0x51eb851f
 8006c4c:	24924925 	.word	0x24924925

08006c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e076      	b.n	8006d50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d108      	bne.n	8006c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c72:	d009      	beq.n	8006c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	61da      	str	r2, [r3, #28]
 8006c7a:	e005      	b.n	8006c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fb fc86 	bl	80025b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0c:	ea42 0103 	orr.w	r1, r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	0c1a      	lsrs	r2, r3, #16
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f002 0204 	and.w	r2, r2, #4
 8006d2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e042      	b.n	8006df0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fb fc62 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	@ 0x24
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fdaf 	bl	8007900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	@ 0x28
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d175      	bne.n	8006f04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_UART_Transmit+0x2c>
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e06e      	b.n	8006f06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2221      	movs	r2, #33	@ 0x21
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e36:	f7fb fe79 	bl	8002b2c <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e50:	d108      	bne.n	8006e64 <HAL_UART_Transmit+0x6c>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	e003      	b.n	8006e6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e6c:	e02e      	b.n	8006ecc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2200      	movs	r2, #0
 8006e76:	2180      	movs	r1, #128	@ 0x80
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fb13 	bl	80074a4 <UART_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e03a      	b.n	8006f06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e007      	b.n	8006ebe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	781a      	ldrb	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1cb      	bne.n	8006e6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2200      	movs	r2, #0
 8006ede:	2140      	movs	r1, #64	@ 0x40
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fadf 	bl	80074a4 <UART_WaitOnFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e006      	b.n	8006f06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d112      	bne.n	8006f4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_UART_Receive_IT+0x26>
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e00b      	b.n	8006f50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	461a      	mov	r2, r3
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fb06 	bl	8007556 <UART_Start_Receive_IT>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	e000      	b.n	8006f50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
  }
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10f      	bne.n	8006fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <HAL_UART_IRQHandler+0x66>
 8006faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fbe3 	bl	8007782 <UART_Receive_IT>
      return;
 8006fbc:	e25b      	b.n	8007476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80de 	beq.w	8007184 <HAL_UART_IRQHandler+0x22c>
 8006fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80d1 	beq.w	8007184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <HAL_UART_IRQHandler+0xae>
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffe:	f043 0201 	orr.w	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <HAL_UART_IRQHandler+0xd2>
 8007012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007022:	f043 0202 	orr.w	r2, r3, #2
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00b      	beq.n	800704e <HAL_UART_IRQHandler+0xf6>
 8007036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007046:	f043 0204 	orr.w	r2, r3, #4
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d011      	beq.n	800707e <HAL_UART_IRQHandler+0x126>
 800705a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d105      	bne.n	8007072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007076:	f043 0208 	orr.w	r2, r3, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 81f2 	beq.w	800746c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_UART_IRQHandler+0x14e>
 8007094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb6e 	bl	8007782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <HAL_UART_IRQHandler+0x17a>
 80070ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04f      	beq.n	8007172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa78 	bl	80075c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d041      	beq.n	800716a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3314      	adds	r3, #20
 80070ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3314      	adds	r3, #20
 800710e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800711e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800712a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1d9      	bne.n	80070e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d013      	beq.n	8007162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713e:	4a7e      	ldr	r2, [pc, #504]	@ (8007338 <HAL_UART_IRQHandler+0x3e0>)
 8007140:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007146:	4618      	mov	r0, r3
 8007148:	f7fb fe66 	bl	8002e18 <HAL_DMA_Abort_IT>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007160:	e00e      	b.n	8007180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fb f946 	bl	80023f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007168:	e00a      	b.n	8007180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fb f942 	bl	80023f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	e006      	b.n	8007180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fb f93e 	bl	80023f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800717e:	e175      	b.n	800746c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	bf00      	nop
    return;
 8007182:	e173      	b.n	800746c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	2b01      	cmp	r3, #1
 800718a:	f040 814f 	bne.w	800742c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 8148 	beq.w	800742c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8141 	beq.w	800742c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80b6 	beq.w	800733c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8145 	beq.w	8007470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ee:	429a      	cmp	r2, r3
 80071f0:	f080 813e 	bcs.w	8007470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	2b20      	cmp	r3, #32
 8007204:	f000 8088 	beq.w	8007318 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800721e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007226:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	330c      	adds	r3, #12
 8007230:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007234:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007238:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007240:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800724c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1d9      	bne.n	8007208 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3314      	adds	r3, #20
 800725a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007266:	f023 0301 	bic.w	r3, r3, #1
 800726a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3314      	adds	r3, #20
 8007274:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007278:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800727c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007280:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800728a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e1      	bne.n	8007254 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3314      	adds	r3, #20
 8007296:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3314      	adds	r3, #20
 80072b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e3      	bne.n	8007290 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	330c      	adds	r3, #12
 80072dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e8:	f023 0310 	bic.w	r3, r3, #16
 80072ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e3      	bne.n	80072d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007312:	4618      	mov	r0, r3
 8007314:	f7fb fd45 	bl	8002da2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007326:	b29b      	uxth	r3, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	b29b      	uxth	r3, r3
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8ad 	bl	800748e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007334:	e09c      	b.n	8007470 <HAL_UART_IRQHandler+0x518>
 8007336:	bf00      	nop
 8007338:	0800768d 	.word	0x0800768d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007344:	b29b      	uxth	r3, r3
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 808e 	beq.w	8007474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8089 	beq.w	8007474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007386:	647a      	str	r2, [r7, #68]	@ 0x44
 8007388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800738c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e3      	bne.n	8007362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	623b      	str	r3, [r7, #32]
   return(result);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073be:	633a      	str	r2, [r7, #48]	@ 0x30
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e3      	bne.n	800739a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0310 	bic.w	r3, r3, #16
 80073f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007404:	61fa      	str	r2, [r7, #28]
 8007406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	69b9      	ldr	r1, [r7, #24]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	617b      	str	r3, [r7, #20]
   return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e3      	bne.n	80073e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800741e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f832 	bl	800748e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800742a:	e023      	b.n	8007474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800742c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d009      	beq.n	800744c <HAL_UART_IRQHandler+0x4f4>
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800743c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f935 	bl	80076b4 <UART_Transmit_IT>
    return;
 800744a:	e014      	b.n	8007476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800744c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00e      	beq.n	8007476 <HAL_UART_IRQHandler+0x51e>
 8007458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800745c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f974 	bl	8007752 <UART_EndTransmit_IT>
    return;
 800746a:	e004      	b.n	8007476 <HAL_UART_IRQHandler+0x51e>
    return;
 800746c:	bf00      	nop
 800746e:	e002      	b.n	8007476 <HAL_UART_IRQHandler+0x51e>
      return;
 8007470:	bf00      	nop
 8007472:	e000      	b.n	8007476 <HAL_UART_IRQHandler+0x51e>
      return;
 8007474:	bf00      	nop
  }
}
 8007476:	37e8      	adds	r7, #232	@ 0xe8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr

0800748e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b4:	e03b      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d037      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074be:	f7fb fb35 	bl	8002b2c <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	6a3a      	ldr	r2, [r7, #32]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d302      	bcc.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e03a      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d023      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b80      	cmp	r3, #128	@ 0x80
 80074ea:	d020      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b40      	cmp	r3, #64	@ 0x40
 80074f0:	d01d      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d116      	bne.n	800752e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f856 	bl	80075c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2208      	movs	r2, #8
 8007520:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e00f      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4013      	ands	r3, r2
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	429a      	cmp	r2, r3
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	461a      	mov	r2, r3
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	429a      	cmp	r2, r3
 800754a:	d0b4      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	4613      	mov	r3, r2
 8007562:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	88fa      	ldrh	r2, [r7, #6]
 8007574:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2222      	movs	r2, #34	@ 0x22
 8007580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800759a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695a      	ldr	r2, [r3, #20]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0220 	orr.w	r2, r2, #32
 80075ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b095      	sub	sp, #84	@ 0x54
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e5      	bne.n	80075d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3314      	adds	r3, #20
 800760a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	61fb      	str	r3, [r7, #28]
   return(result);
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3314      	adds	r3, #20
 8007622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800762a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e5      	bne.n	8007604 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763c:	2b01      	cmp	r3, #1
 800763e:	d119      	bne.n	8007674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	647b      	str	r3, [r7, #68]	@ 0x44
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007660:	61ba      	str	r2, [r7, #24]
 8007662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	613b      	str	r3, [r7, #16]
   return(result);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007682:	bf00      	nop
 8007684:	3754      	adds	r7, #84	@ 0x54
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7fa fea4 	bl	80023f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b21      	cmp	r3, #33	@ 0x21
 80076c6:	d13e      	bne.n	8007746 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d0:	d114      	bne.n	80076fc <UART_Transmit_IT+0x48>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d110      	bne.n	80076fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]
 80076fa:	e008      	b.n	800770e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	1c59      	adds	r1, r3, #1
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6211      	str	r1, [r2, #32]
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29b      	uxth	r3, r3
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4619      	mov	r1, r3
 800771c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10f      	bne.n	8007742 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e000      	b.n	8007748 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007746:	2302      	movs	r3, #2
  }
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fe82 	bl	800747c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b08c      	sub	sp, #48	@ 0x30
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b22      	cmp	r3, #34	@ 0x22
 8007794:	f040 80ae 	bne.w	80078f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a0:	d117      	bne.n	80077d2 <UART_Receive_IT+0x50>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d113      	bne.n	80077d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	1c9a      	adds	r2, r3, #2
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80077d0:	e026      	b.n	8007820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e4:	d007      	beq.n	80077f6 <UART_Receive_IT+0x74>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <UART_Receive_IT+0x82>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	e008      	b.n	8007816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007810:	b2da      	uxtb	r2, r3
 8007812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4619      	mov	r1, r3
 800782e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007830:	2b00      	cmp	r3, #0
 8007832:	d15d      	bne.n	80078f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0220 	bic.w	r2, r2, #32
 8007842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695a      	ldr	r2, [r3, #20]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0201 	bic.w	r2, r2, #1
 8007862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007876:	2b01      	cmp	r3, #1
 8007878:	d135      	bne.n	80078e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	613b      	str	r3, [r7, #16]
   return(result);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	330c      	adds	r3, #12
 800789e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078a0:	623a      	str	r2, [r7, #32]
 80078a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	69f9      	ldr	r1, [r7, #28]
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e5      	bne.n	8007880 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d10a      	bne.n	80078d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fdd5 	bl	800748e <HAL_UARTEx_RxEventCallback>
 80078e4:	e002      	b.n	80078ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fa fcce 	bl	8002288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e002      	b.n	80078f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e000      	b.n	80078f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078f4:	2302      	movs	r3, #2
  }
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3730      	adds	r7, #48	@ 0x30
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800793a:	f023 030c 	bic.w	r3, r3, #12
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	430b      	orrs	r3, r1
 8007946:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a2c      	ldr	r2, [pc, #176]	@ (8007a14 <UART_SetConfig+0x114>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007968:	f7fe fc50 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	e002      	b.n	8007976 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007970:	f7fe fc38 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8007974:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009a      	lsls	r2, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	4a22      	ldr	r2, [pc, #136]	@ (8007a18 <UART_SetConfig+0x118>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	0119      	lsls	r1, r3, #4
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009a      	lsls	r2, r3, #2
 80079a0:	441a      	add	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <UART_SetConfig+0x118>)
 80079ae:	fba3 0302 	umull	r0, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2064      	movs	r0, #100	@ 0x64
 80079b6:	fb00 f303 	mul.w	r3, r0, r3
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	3332      	adds	r3, #50	@ 0x32
 80079c0:	4a15      	ldr	r2, [pc, #84]	@ (8007a18 <UART_SetConfig+0x118>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079cc:	4419      	add	r1, r3
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009a      	lsls	r2, r3, #2
 80079d8:	441a      	add	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a18 <UART_SetConfig+0x118>)
 80079e6:	fba3 0302 	umull	r0, r3, r3, r2
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2064      	movs	r0, #100	@ 0x64
 80079ee:	fb00 f303 	mul.w	r3, r0, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	3332      	adds	r3, #50	@ 0x32
 80079f8:	4a07      	ldr	r2, [pc, #28]	@ (8007a18 <UART_SetConfig+0x118>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	440a      	add	r2, r1
 8007a0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	40013800 	.word	0x40013800
 8007a18:	51eb851f 	.word	0x51eb851f

08007a1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	4638      	mov	r0, r7
 8007a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr

08007a36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b085      	sub	sp, #20
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a46:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007a4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a6a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007a6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4013      	ands	r3, r2
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr

08007aae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b09d      	sub	sp, #116	@ 0x74
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	78db      	ldrb	r3, [r3, #3]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d81f      	bhi.n	8007b5a <USB_ActivateEndpoint+0x72>
 8007b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <USB_ActivateEndpoint+0x38>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b31 	.word	0x08007b31
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b63 	.word	0x08007b63
 8007b2c:	08007b3f 	.word	0x08007b3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007b3c:	e012      	b.n	8007b64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b42:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007b46:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007b4a:	e00b      	b.n	8007b64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007b58:	e004      	b.n	8007b64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007b60:	e000      	b.n	8007b64 <USB_ActivateEndpoint+0x7c>
      break;
 8007b62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	441a      	add	r2, r3
 8007b6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	7b1b      	ldrb	r3, [r3, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 8178 	bne.w	8007ec4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8084 	beq.w	8007ce6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	4413      	add	r3, r2
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	011a      	lsls	r2, r3, #4
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88db      	ldrh	r3, [r3, #6]
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	827b      	strh	r3, [r7, #18]
 8007c20:	8a7b      	ldrh	r3, [r7, #18]
 8007c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01b      	beq.n	8007c62 <USB_ActivateEndpoint+0x17a>
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c40:	823b      	strh	r3, [r7, #16]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	8a3b      	ldrh	r3, [r7, #16]
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	78db      	ldrb	r3, [r3, #3]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d020      	beq.n	8007cac <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c80:	81bb      	strh	r3, [r7, #12]
 8007c82:	89bb      	ldrh	r3, [r7, #12]
 8007c84:	f083 0320 	eor.w	r3, r3, #32
 8007c88:	81bb      	strh	r3, [r7, #12]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	89bb      	ldrh	r3, [r7, #12]
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]
 8007caa:	e2d5      	b.n	8008258 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc2:	81fb      	strh	r3, [r7, #14]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]
 8007ce4:	e2b8      	b.n	8008258 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf6:	4413      	add	r3, r2
 8007cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	011a      	lsls	r2, r3, #4
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	88db      	ldrh	r3, [r3, #6]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d18:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	4413      	add	r3, r2
 8007d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	011a      	lsls	r2, r3, #4
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	4413      	add	r3, r2
 8007d38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d54:	d91d      	bls.n	8007d92 <USB_ActivateEndpoint+0x2aa>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <USB_ActivateEndpoint+0x288>
 8007d6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	029b      	lsls	r3, r3, #10
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	801a      	strh	r2, [r3, #0]
 8007d90:	e026      	b.n	8007de0 <USB_ActivateEndpoint+0x2f8>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <USB_ActivateEndpoint+0x2c8>
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	e017      	b.n	8007de0 <USB_ActivateEndpoint+0x2f8>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <USB_ActivateEndpoint+0x2e2>
 8007dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	029b      	lsls	r3, r3, #10
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007dee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01b      	beq.n	8007e30 <USB_ActivateEndpoint+0x348>
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e0e:	843b      	strh	r3, [r7, #32]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	8c3b      	ldrh	r3, [r7, #32]
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d124      	bne.n	8007e82 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4e:	83bb      	strh	r3, [r7, #28]
 8007e50:	8bbb      	ldrh	r3, [r7, #28]
 8007e52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e56:	83bb      	strh	r3, [r7, #28]
 8007e58:	8bbb      	ldrh	r3, [r7, #28]
 8007e5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e5e:	83bb      	strh	r3, [r7, #28]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	441a      	add	r2, r3
 8007e6a:	8bbb      	ldrh	r3, [r7, #28]
 8007e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	8013      	strh	r3, [r2, #0]
 8007e80:	e1ea      	b.n	8008258 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e98:	83fb      	strh	r3, [r7, #30]
 8007e9a:	8bfb      	ldrh	r3, [r7, #30]
 8007e9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ea0:	83fb      	strh	r3, [r7, #30]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	8bfb      	ldrh	r3, [r7, #30]
 8007eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8013      	strh	r3, [r2, #0]
 8007ec2:	e1c9      	b.n	8008258 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	78db      	ldrb	r3, [r3, #3]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d11e      	bne.n	8007f0a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	441a      	add	r2, r3
 8007ef0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007efc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	8013      	strh	r3, [r2, #0]
 8007f08:	e01d      	b.n	8007f46 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f20:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f56:	4413      	add	r3, r2
 8007f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	011a      	lsls	r2, r3, #4
 8007f60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	891b      	ldrh	r3, [r3, #8]
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f8a:	4413      	add	r3, r2
 8007f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	011a      	lsls	r2, r3, #4
 8007f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	895b      	ldrh	r3, [r3, #10]
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 8093 	bne.w	80080de <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007fc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01b      	beq.n	800800c <USB_ActivateEndpoint+0x524>
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	441a      	add	r2, r3
 8007ff6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008008:	b29b      	uxth	r3, r3
 800800a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800801a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800801c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01b      	beq.n	800805c <USB_ActivateEndpoint+0x574>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008054:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800806e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008072:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008074:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008076:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800807a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800807c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800807e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008082:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	441a      	add	r2, r3
 800808e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800809c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	441a      	add	r2, r3
 80080c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d8:	b29b      	uxth	r3, r3
 80080da:	8013      	strh	r3, [r2, #0]
 80080dc:	e0bc      	b.n	8008258 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80080ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80080f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01d      	beq.n	8008136 <USB_ActivateEndpoint+0x64e>
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800810c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008110:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800812a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800812e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008132:	b29b      	uxth	r3, r3
 8008134:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008146:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800814a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01d      	beq.n	800818e <USB_ActivateEndpoint+0x6a6>
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008168:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800817a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800817e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800818a:	b29b      	uxth	r3, r3
 800818c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	78db      	ldrb	r3, [r3, #3]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d024      	beq.n	80081e0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80081b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80081b4:	f083 0320 	eor.w	r3, r3, #32
 80081b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	441a      	add	r2, r3
 80081c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80081ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081da:	b29b      	uxth	r3, r3
 80081dc:	8013      	strh	r3, [r2, #0]
 80081de:	e01d      	b.n	800821c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	441a      	add	r2, r3
 8008204:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800820c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008218:	b29b      	uxth	r3, r3
 800821a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800822e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008232:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800824c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008254:	b29b      	uxth	r3, r3
 8008256:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008258:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800825c:	4618      	mov	r0, r3
 800825e:	3774      	adds	r7, #116	@ 0x74
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop

08008268 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008268:	b480      	push	{r7}
 800826a:	b08d      	sub	sp, #52	@ 0x34
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	7b1b      	ldrb	r3, [r3, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f040 808e 	bne.w	8008398 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d044      	beq.n	800830e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	81bb      	strh	r3, [r7, #12]
 8008292:	89bb      	ldrh	r3, [r7, #12]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01b      	beq.n	80082d4 <USB_DeactivateEndpoint+0x6c>
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b2:	817b      	strh	r3, [r7, #10]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	441a      	add	r2, r3
 80082be:	897b      	ldrh	r3, [r7, #10]
 80082c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ea:	813b      	strh	r3, [r7, #8]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	441a      	add	r2, r3
 80082f6:	893b      	ldrh	r3, [r7, #8]
 80082f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008308:	b29b      	uxth	r3, r3
 800830a:	8013      	strh	r3, [r2, #0]
 800830c:	e192      	b.n	8008634 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	827b      	strh	r3, [r7, #18]
 800831c:	8a7b      	ldrh	r3, [r7, #18]
 800831e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01b      	beq.n	800835e <USB_DeactivateEndpoint+0xf6>
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800833c:	823b      	strh	r3, [r7, #16]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	441a      	add	r2, r3
 8008348:	8a3b      	ldrh	r3, [r7, #16]
 800834a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800834e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008352:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835a:	b29b      	uxth	r3, r3
 800835c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008374:	81fb      	strh	r3, [r7, #14]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	441a      	add	r2, r3
 8008380:	89fb      	ldrh	r3, [r7, #14]
 8008382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800838a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800838e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008392:	b29b      	uxth	r3, r3
 8008394:	8013      	strh	r3, [r2, #0]
 8008396:	e14d      	b.n	8008634 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f040 80a5 	bne.w	80084ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	843b      	strh	r3, [r7, #32]
 80083b0:	8c3b      	ldrh	r3, [r7, #32]
 80083b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01b      	beq.n	80083f2 <USB_DeactivateEndpoint+0x18a>
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d0:	83fb      	strh	r3, [r7, #30]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	441a      	add	r2, r3
 80083dc:	8bfb      	ldrh	r3, [r7, #30]
 80083de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	83bb      	strh	r3, [r7, #28]
 8008400:	8bbb      	ldrh	r3, [r7, #28]
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01b      	beq.n	8008442 <USB_DeactivateEndpoint+0x1da>
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800841c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008420:	837b      	strh	r3, [r7, #26]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	441a      	add	r2, r3
 800842c:	8b7b      	ldrh	r3, [r7, #26]
 800842e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800843a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800843e:	b29b      	uxth	r3, r3
 8008440:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008458:	833b      	strh	r3, [r7, #24]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	441a      	add	r2, r3
 8008464:	8b3b      	ldrh	r3, [r7, #24]
 8008466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800846a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800846e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008476:	b29b      	uxth	r3, r3
 8008478:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800848c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008490:	82fb      	strh	r3, [r7, #22]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	441a      	add	r2, r3
 800849c:	8afb      	ldrh	r3, [r7, #22]
 800849e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c8:	82bb      	strh	r3, [r7, #20]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	441a      	add	r2, r3
 80084d4:	8abb      	ldrh	r3, [r7, #20]
 80084d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	8013      	strh	r3, [r2, #0]
 80084ea:	e0a3      	b.n	8008634 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80084fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80084fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01b      	beq.n	800853c <USB_DeactivateEndpoint+0x2d4>
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800851a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	441a      	add	r2, r3
 8008526:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800852c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008538:	b29b      	uxth	r3, r3
 800853a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800854a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800854c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01b      	beq.n	800858c <USB_DeactivateEndpoint+0x324>
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	441a      	add	r2, r3
 8008576:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800857c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008584:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008588:	b29b      	uxth	r3, r3
 800858a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800859e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	441a      	add	r2, r3
 80085ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800860e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008612:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	441a      	add	r2, r3
 800861e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800862c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008630:	b29b      	uxth	r3, r3
 8008632:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3734      	adds	r7, #52	@ 0x34
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b0c2      	sub	sp, #264	@ 0x108
 8008644:	af00      	add	r7, sp, #0
 8008646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864e:	6018      	str	r0, [r3, #0]
 8008650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008658:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800865a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b01      	cmp	r3, #1
 8008668:	f040 86b7 	bne.w	80093da <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800866c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d908      	bls.n	800869a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008698:	e007      	b.n	80086aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800869a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	7b1b      	ldrb	r3, [r3, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d13a      	bne.n	8008730 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80086ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6959      	ldr	r1, [r3, #20]
 80086c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	88da      	ldrh	r2, [r3, #6]
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80086dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086e0:	6800      	ldr	r0, [r0, #0]
 80086e2:	f001 fc9c 	bl	800a01e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80086e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4413      	add	r3, r2
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	011a      	lsls	r2, r3, #4
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	f000 be1f 	b.w	800936e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	78db      	ldrb	r3, [r3, #3]
 800873c:	2b02      	cmp	r3, #2
 800873e:	f040 8462 	bne.w	8009006 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6a1a      	ldr	r2, [r3, #32]
 800874e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	429a      	cmp	r2, r3
 800875c:	f240 83df 	bls.w	8008f1e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29b      	uxth	r3, r3
 800877e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008786:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800878a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	441a      	add	r2, r3
 80087a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80087a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80087b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80087bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6a1a      	ldr	r2, [r3, #32]
 80087c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 81c7 	beq.w	8008b90 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	633b      	str	r3, [r7, #48]	@ 0x30
 800880e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d177      	bne.n	800890e <USB_EPStartXfer+0x2ce>
 800881e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800882a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008838:	b29b      	uxth	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883e:	4413      	add	r3, r2
 8008840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	011a      	lsls	r2, r3, #4
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	4413      	add	r3, r2
 8008854:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008858:	627b      	str	r3, [r7, #36]	@ 0x24
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008864:	b29a      	uxth	r2, r3
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008870:	d921      	bls.n	80088b6 <USB_EPStartXfer+0x276>
 8008872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <USB_EPStartXfer+0x252>
 8008888:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800888c:	3b01      	subs	r3, #1
 800888e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29a      	uxth	r2, r3
 8008898:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800889c:	b29b      	uxth	r3, r3
 800889e:	029b      	lsls	r3, r3, #10
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e050      	b.n	8008958 <USB_EPStartXfer+0x318>
 80088b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <USB_EPStartXfer+0x294>
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	801a      	strh	r2, [r3, #0]
 80088d2:	e041      	b.n	8008958 <USB_EPStartXfer+0x318>
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d8:	085b      	lsrs	r3, r3, #1
 80088da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80088de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <USB_EPStartXfer+0x2b4>
 80088ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80088ee:	3301      	adds	r3, #1
 80088f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80088f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80088fe:	b29b      	uxth	r3, r3
 8008900:	029b      	lsls	r3, r3, #10
 8008902:	b29b      	uxth	r3, r3
 8008904:	4313      	orrs	r3, r2
 8008906:	b29a      	uxth	r2, r3
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	e024      	b.n	8008958 <USB_EPStartXfer+0x318>
 800890e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	785b      	ldrb	r3, [r3, #1]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d11c      	bne.n	8008958 <USB_EPStartXfer+0x318>
 800891e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800892c:	b29b      	uxth	r3, r3
 800892e:	461a      	mov	r2, r3
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	4413      	add	r3, r2
 8008934:	633b      	str	r3, [r7, #48]	@ 0x30
 8008936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	011a      	lsls	r2, r3, #4
 8008944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008946:	4413      	add	r3, r2
 8008948:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800894c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800894e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008952:	b29a      	uxth	r2, r3
 8008954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008956:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	895b      	ldrh	r3, [r3, #10]
 8008964:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6959      	ldr	r1, [r3, #20]
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008978:	b29b      	uxth	r3, r3
 800897a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800897e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008982:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008986:	6800      	ldr	r0, [r0, #0]
 8008988:	f001 fb49 	bl	800a01e <USB_WritePMA>
            ep->xfer_buff += len;
 800898c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695a      	ldr	r2, [r3, #20]
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800899c:	441a      	add	r2, r3
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d90f      	bls.n	80089e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80089c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6a1a      	ldr	r2, [r3, #32]
 80089d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	621a      	str	r2, [r3, #32]
 80089e4:	e00e      	b.n	8008a04 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80089e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80089f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	785b      	ldrb	r3, [r3, #1]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d177      	bne.n	8008b04 <USB_EPStartXfer+0x4c4>
 8008a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	4413      	add	r3, r2
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	011a      	lsls	r2, r3, #4
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	801a      	strh	r2, [r3, #0]
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a64:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a66:	d921      	bls.n	8008aac <USB_EPStartXfer+0x46c>
 8008a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <USB_EPStartXfer+0x448>
 8008a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a82:	3b01      	subs	r3, #1
 8008a84:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	029b      	lsls	r3, r3, #10
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	e056      	b.n	8008b5a <USB_EPStartXfer+0x51a>
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <USB_EPStartXfer+0x48a>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e047      	b.n	8008b5a <USB_EPStartXfer+0x51a>
 8008aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ace:	085b      	lsrs	r3, r3, #1
 8008ad0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d004      	beq.n	8008aea <USB_EPStartXfer+0x4aa>
 8008ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	029b      	lsls	r3, r3, #10
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	e02a      	b.n	8008b5a <USB_EPStartXfer+0x51a>
 8008b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d122      	bne.n	8008b5a <USB_EPStartXfer+0x51a>
 8008b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	623b      	str	r3, [r7, #32]
 8008b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	4413      	add	r3, r2
 8008b36:	623b      	str	r3, [r7, #32]
 8008b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	011a      	lsls	r2, r3, #4
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	891b      	ldrh	r3, [r3, #8]
 8008b66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6959      	ldr	r1, [r3, #20]
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b88:	6800      	ldr	r0, [r0, #0]
 8008b8a:	f001 fa48 	bl	800a01e <USB_WritePMA>
 8008b8e:	e3ee      	b.n	800936e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	785b      	ldrb	r3, [r3, #1]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d177      	bne.n	8008c90 <USB_EPStartXfer+0x650>
 8008ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bc0:	4413      	add	r3, r2
 8008bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	011a      	lsls	r2, r3, #4
 8008bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bf2:	d921      	bls.n	8008c38 <USB_EPStartXfer+0x5f8>
 8008bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d104      	bne.n	8008c14 <USB_EPStartXfer+0x5d4>
 8008c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	029b      	lsls	r3, r3, #10
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	4313      	orrs	r3, r2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	e056      	b.n	8008ce6 <USB_EPStartXfer+0x6a6>
 8008c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <USB_EPStartXfer+0x616>
 8008c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c52:	801a      	strh	r2, [r3, #0]
 8008c54:	e047      	b.n	8008ce6 <USB_EPStartXfer+0x6a6>
 8008c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <USB_EPStartXfer+0x636>
 8008c6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c70:	3301      	adds	r3, #1
 8008c72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	029b      	lsls	r3, r3, #10
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	e02a      	b.n	8008ce6 <USB_EPStartXfer+0x6a6>
 8008c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	785b      	ldrb	r3, [r3, #1]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d122      	bne.n	8008ce6 <USB_EPStartXfer+0x6a6>
 8008ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc0:	4413      	add	r3, r2
 8008cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	011a      	lsls	r2, r3, #4
 8008cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ce4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	891b      	ldrh	r3, [r3, #8]
 8008cf2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6959      	ldr	r1, [r3, #20]
 8008d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d14:	6800      	ldr	r0, [r0, #0]
 8008d16:	f001 f982 	bl	800a01e <USB_WritePMA>
            ep->xfer_buff += len;
 8008d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695a      	ldr	r2, [r3, #20]
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2a:	441a      	add	r2, r3
 8008d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d90f      	bls.n	8008d74 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6a1a      	ldr	r2, [r3, #32]
 8008d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	621a      	str	r2, [r3, #32]
 8008d72:	e00e      	b.n	8008d92 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d177      	bne.n	8008e9e <USB_EPStartXfer+0x85e>
 8008dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	461a      	mov	r2, r3
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	4413      	add	r3, r2
 8008dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	011a      	lsls	r2, r3, #4
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	4413      	add	r3, r2
 8008de4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df8:	801a      	strh	r2, [r3, #0]
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e00:	d921      	bls.n	8008e46 <USB_EPStartXfer+0x806>
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d104      	bne.n	8008e22 <USB_EPStartXfer+0x7e2>
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	029b      	lsls	r3, r3, #10
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	e050      	b.n	8008ee8 <USB_EPStartXfer+0x8a8>
 8008e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <USB_EPStartXfer+0x824>
 8008e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e60:	801a      	strh	r2, [r3, #0]
 8008e62:	e041      	b.n	8008ee8 <USB_EPStartXfer+0x8a8>
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d004      	beq.n	8008e84 <USB_EPStartXfer+0x844>
 8008e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	e024      	b.n	8008ee8 <USB_EPStartXfer+0x8a8>
 8008e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d11c      	bne.n	8008ee8 <USB_EPStartXfer+0x8a8>
 8008eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ec2:	4413      	add	r3, r2
 8008ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	011a      	lsls	r2, r3, #4
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	895b      	ldrh	r3, [r3, #10]
 8008ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6959      	ldr	r1, [r3, #20]
 8008f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f16:	6800      	ldr	r0, [r0, #0]
 8008f18:	f001 f881 	bl	800a01e <USB_WritePMA>
 8008f1c:	e227      	b.n	800936e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f54:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008faa:	4413      	add	r3, r2
 8008fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	011a      	lsls	r2, r3, #4
 8008fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	891b      	ldrh	r3, [r3, #8]
 8008fdc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6959      	ldr	r1, [r3, #20]
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ff6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ffa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ffe:	6800      	ldr	r0, [r0, #0]
 8009000:	f001 f80d 	bl	800a01e <USB_WritePMA>
 8009004:	e1b3      	b.n	800936e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80c6 	beq.w	80091d8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800904c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	673b      	str	r3, [r7, #112]	@ 0x70
 8009058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d177      	bne.n	8009158 <USB_EPStartXfer+0xb18>
 8009068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009078:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009082:	b29b      	uxth	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009088:	4413      	add	r3, r2
 800908a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800908c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	011a      	lsls	r2, r3, #4
 800909a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800909c:	4413      	add	r3, r2
 800909e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80090a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80090a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b2:	801a      	strh	r2, [r3, #0]
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80090ba:	d921      	bls.n	8009100 <USB_EPStartXfer+0xac0>
 80090bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c0:	095b      	lsrs	r3, r3, #5
 80090c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ca:	f003 031f 	and.w	r3, r3, #31
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <USB_EPStartXfer+0xa9c>
 80090d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80090d6:	3b01      	subs	r3, #1
 80090d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	029b      	lsls	r3, r3, #10
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4313      	orrs	r3, r2
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e050      	b.n	80091a2 <USB_EPStartXfer+0xb62>
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <USB_EPStartXfer+0xade>
 8009108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009116:	b29a      	uxth	r2, r3
 8009118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e041      	b.n	80091a2 <USB_EPStartXfer+0xb62>
 800911e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d004      	beq.n	800913e <USB_EPStartXfer+0xafe>
 8009134:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009138:	3301      	adds	r3, #1
 800913a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800913e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b29a      	uxth	r2, r3
 8009144:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009148:	b29b      	uxth	r3, r3
 800914a:	029b      	lsls	r3, r3, #10
 800914c:	b29b      	uxth	r3, r3
 800914e:	4313      	orrs	r3, r2
 8009150:	b29a      	uxth	r2, r3
 8009152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e024      	b.n	80091a2 <USB_EPStartXfer+0xb62>
 8009158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d11c      	bne.n	80091a2 <USB_EPStartXfer+0xb62>
 8009168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009176:	b29b      	uxth	r3, r3
 8009178:	461a      	mov	r2, r3
 800917a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800917c:	4413      	add	r3, r2
 800917e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	011a      	lsls	r2, r3, #4
 800918e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009190:	4413      	add	r3, r2
 8009192:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009196:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919c:	b29a      	uxth	r2, r3
 800919e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80091a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	895b      	ldrh	r3, [r3, #10]
 80091ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6959      	ldr	r1, [r3, #20]
 80091be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80091cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80091d0:	6800      	ldr	r0, [r0, #0]
 80091d2:	f000 ff24 	bl	800a01e <USB_WritePMA>
 80091d6:	e0ca      	b.n	800936e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d177      	bne.n	80092d8 <USB_EPStartXfer+0xc98>
 80091e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009202:	b29b      	uxth	r3, r3
 8009204:	461a      	mov	r2, r3
 8009206:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009208:	4413      	add	r3, r2
 800920a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800920c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	011a      	lsls	r2, r3, #4
 800921a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800921c:	4413      	add	r3, r2
 800921e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009222:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29b      	uxth	r3, r3
 800922a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800922e:	b29a      	uxth	r2, r3
 8009230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009238:	2b3e      	cmp	r3, #62	@ 0x3e
 800923a:	d921      	bls.n	8009280 <USB_EPStartXfer+0xc40>
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	2b00      	cmp	r3, #0
 8009250:	d104      	bne.n	800925c <USB_EPStartXfer+0xc1c>
 8009252:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009256:	3b01      	subs	r3, #1
 8009258:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800925c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	b29a      	uxth	r2, r3
 8009262:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009266:	b29b      	uxth	r3, r3
 8009268:	029b      	lsls	r3, r3, #10
 800926a:	b29b      	uxth	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	b29b      	uxth	r3, r3
 8009270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009278:	b29a      	uxth	r2, r3
 800927a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	e05c      	b.n	800933a <USB_EPStartXfer+0xcfa>
 8009280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <USB_EPStartXfer+0xc5e>
 8009288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009296:	b29a      	uxth	r2, r3
 8009298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	e04d      	b.n	800933a <USB_EPStartXfer+0xcfa>
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a2:	085b      	lsrs	r3, r3, #1
 80092a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <USB_EPStartXfer+0xc7e>
 80092b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80092b8:	3301      	adds	r3, #1
 80092ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	029b      	lsls	r3, r3, #10
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4313      	orrs	r3, r2
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	e030      	b.n	800933a <USB_EPStartXfer+0xcfa>
 80092d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d128      	bne.n	800933a <USB_EPStartXfer+0xcfa>
 80092e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009304:	b29b      	uxth	r3, r3
 8009306:	461a      	mov	r2, r3
 8009308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800930c:	4413      	add	r3, r2
 800930e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	011a      	lsls	r2, r3, #4
 8009320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009324:	4413      	add	r3, r2
 8009326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800932a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009332:	b29a      	uxth	r2, r3
 8009334:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009338:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800933a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	891b      	ldrh	r3, [r3, #8]
 8009346:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800934a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6959      	ldr	r1, [r3, #20]
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935a:	b29b      	uxth	r3, r3
 800935c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009360:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009364:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009368:	6800      	ldr	r0, [r0, #0]
 800936a:	f000 fe58 	bl	800a01e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800936e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800937c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	b29b      	uxth	r3, r3
 800938c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009394:	817b      	strh	r3, [r7, #10]
 8009396:	897b      	ldrh	r3, [r7, #10]
 8009398:	f083 0310 	eor.w	r3, r3, #16
 800939c:	817b      	strh	r3, [r7, #10]
 800939e:	897b      	ldrh	r3, [r7, #10]
 80093a0:	f083 0320 	eor.w	r3, r3, #32
 80093a4:	817b      	strh	r3, [r7, #10]
 80093a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	441a      	add	r2, r3
 80093c0:	897b      	ldrh	r3, [r7, #10]
 80093c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	8013      	strh	r3, [r2, #0]
 80093d6:	f000 bcde 	b.w	8009d96 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80093da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	7b1b      	ldrb	r3, [r3, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 80bb 	bne.w	8009562 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80093ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	429a      	cmp	r2, r3
 8009406:	d917      	bls.n	8009438 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699a      	ldr	r2, [r3, #24]
 8009424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	619a      	str	r2, [r3, #24]
 8009436:	e00e      	b.n	8009456 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2200      	movs	r2, #0
 8009454:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009472:	b29b      	uxth	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800947a:	4413      	add	r3, r2
 800947c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	011a      	lsls	r2, r3, #4
 800948e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009492:	4413      	add	r3, r2
 8009494:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800949c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80094b6:	d924      	bls.n	8009502 <USB_EPStartXfer+0xec2>
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c6:	f003 031f 	and.w	r3, r3, #31
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <USB_EPStartXfer+0xe98>
 80094ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80094d2:	3b01      	subs	r3, #1
 80094d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29a      	uxth	r2, r3
 80094e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	029b      	lsls	r3, r3, #10
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4313      	orrs	r3, r2
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	f000 bc10 	b.w	8009d22 <USB_EPStartXfer+0x16e2>
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10c      	bne.n	8009524 <USB_EPStartXfer+0xee4>
 800950a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29b      	uxth	r3, r3
 8009512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951a:	b29a      	uxth	r2, r3
 800951c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009520:	801a      	strh	r2, [r3, #0]
 8009522:	e3fe      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009528:	085b      	lsrs	r3, r3, #1
 800952a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800952e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <USB_EPStartXfer+0xf04>
 800953a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800953e:	3301      	adds	r3, #1
 8009540:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29a      	uxth	r2, r3
 800954c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009550:	b29b      	uxth	r3, r3
 8009552:	029b      	lsls	r3, r3, #10
 8009554:	b29b      	uxth	r3, r3
 8009556:	4313      	orrs	r3, r2
 8009558:	b29a      	uxth	r2, r3
 800955a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e3df      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	78db      	ldrb	r3, [r3, #3]
 800956e:	2b02      	cmp	r3, #2
 8009570:	f040 8218 	bne.w	80099a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	785b      	ldrb	r3, [r3, #1]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f040 809d 	bne.w	80096c0 <USB_EPStartXfer+0x1080>
 8009586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095aa:	4413      	add	r3, r2
 80095ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	011a      	lsls	r2, r3, #4
 80095be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095c2:	4413      	add	r3, r2
 80095c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095d8:	b29a      	uxth	r2, r3
 80095da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80095ee:	d92b      	bls.n	8009648 <USB_EPStartXfer+0x1008>
 80095f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	095b      	lsrs	r3, r3, #5
 80095fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 031f 	and.w	r3, r3, #31
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <USB_EPStartXfer+0xfe0>
 8009616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961a:	3b01      	subs	r3, #1
 800961c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29a      	uxth	r2, r3
 8009628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962c:	b29b      	uxth	r3, r3
 800962e:	029b      	lsls	r3, r3, #10
 8009630:	b29b      	uxth	r3, r3
 8009632:	4313      	orrs	r3, r2
 8009634:	b29b      	uxth	r3, r3
 8009636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800963a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800963e:	b29a      	uxth	r2, r3
 8009640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009644:	801a      	strh	r2, [r3, #0]
 8009646:	e070      	b.n	800972a <USB_EPStartXfer+0x10ea>
 8009648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10c      	bne.n	8009672 <USB_EPStartXfer+0x1032>
 8009658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29b      	uxth	r3, r3
 8009660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009668:	b29a      	uxth	r2, r3
 800966a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	e05b      	b.n	800972a <USB_EPStartXfer+0x10ea>
 8009672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	085b      	lsrs	r3, r3, #1
 8009680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <USB_EPStartXfer+0x1062>
 8009698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800969c:	3301      	adds	r3, #1
 800969e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	029b      	lsls	r3, r3, #10
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4313      	orrs	r3, r2
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096bc:	801a      	strh	r2, [r3, #0]
 80096be:	e034      	b.n	800972a <USB_EPStartXfer+0x10ea>
 80096c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d12c      	bne.n	800972a <USB_EPStartXfer+0x10ea>
 80096d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	461a      	mov	r2, r3
 80096f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096f4:	4413      	add	r3, r2
 80096f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	011a      	lsls	r2, r3, #4
 8009708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800970c:	4413      	add	r3, r2
 800970e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800973c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f040 809d 	bne.w	8009884 <USB_EPStartXfer+0x1244>
 800974a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009766:	b29b      	uxth	r3, r3
 8009768:	461a      	mov	r2, r3
 800976a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800976e:	4413      	add	r3, r2
 8009770:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	011a      	lsls	r2, r3, #4
 8009782:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009786:	4413      	add	r3, r2
 8009788:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800978c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800979c:	b29a      	uxth	r2, r3
 800979e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097a2:	801a      	strh	r2, [r3, #0]
 80097a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80097b2:	d92b      	bls.n	800980c <USB_EPStartXfer+0x11cc>
 80097b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	095b      	lsrs	r3, r3, #5
 80097c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 031f 	and.w	r3, r3, #31
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d104      	bne.n	80097e4 <USB_EPStartXfer+0x11a4>
 80097da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097de:	3b01      	subs	r3, #1
 80097e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	029b      	lsls	r3, r3, #10
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	4313      	orrs	r3, r2
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009802:	b29a      	uxth	r2, r3
 8009804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	e069      	b.n	80098e0 <USB_EPStartXfer+0x12a0>
 800980c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10c      	bne.n	8009836 <USB_EPStartXfer+0x11f6>
 800981c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800982c:	b29a      	uxth	r2, r3
 800982e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009832:	801a      	strh	r2, [r3, #0]
 8009834:	e054      	b.n	80098e0 <USB_EPStartXfer+0x12a0>
 8009836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800983a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	085b      	lsrs	r3, r3, #1
 8009844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <USB_EPStartXfer+0x1226>
 800985c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009860:	3301      	adds	r3, #1
 8009862:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009866:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29a      	uxth	r2, r3
 800986e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009872:	b29b      	uxth	r3, r3
 8009874:	029b      	lsls	r3, r3, #10
 8009876:	b29b      	uxth	r3, r3
 8009878:	4313      	orrs	r3, r2
 800987a:	b29a      	uxth	r2, r3
 800987c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009880:	801a      	strh	r2, [r3, #0]
 8009882:	e02d      	b.n	80098e0 <USB_EPStartXfer+0x12a0>
 8009884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d125      	bne.n	80098e0 <USB_EPStartXfer+0x12a0>
 8009894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	461a      	mov	r2, r3
 80098a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098aa:	4413      	add	r3, r2
 80098ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	011a      	lsls	r2, r3, #4
 80098be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098c2:	4413      	add	r3, r2
 80098c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80098c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80098e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8218 	beq.w	8009d22 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80098f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009912:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <USB_EPStartXfer+0x12ea>
 800991e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10d      	bne.n	8009946 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800992a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800992e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009932:	2b00      	cmp	r3, #0
 8009934:	f040 81f5 	bne.w	8009d22 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009938:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800993c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	f040 81ee 	bne.w	8009d22 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800994a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800996c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	441a      	add	r2, r3
 800998a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800998e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800999a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800999e:	b29b      	uxth	r3, r3
 80099a0:	8013      	strh	r3, [r2, #0]
 80099a2:	e1be      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80099a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	78db      	ldrb	r3, [r3, #3]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	f040 81b4 	bne.w	8009d1e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80099b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d917      	bls.n	8009a02 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80099d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80099e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f2:	1ad2      	subs	r2, r2, r3
 80099f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	619a      	str	r2, [r3, #24]
 8009a00:	e00e      	b.n	8009a20 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f040 8085 	bne.w	8009b3c <USB_EPStartXfer+0x14fc>
 8009a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	461a      	mov	r2, r3
 8009a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009a56:	4413      	add	r3, r2
 8009a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	011a      	lsls	r2, r3, #4
 8009a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009a6e:	4413      	add	r3, r2
 8009a70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a90:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a92:	d923      	bls.n	8009adc <USB_EPStartXfer+0x149c>
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a98:	095b      	lsrs	r3, r3, #5
 8009a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d104      	bne.n	8009ab4 <USB_EPStartXfer+0x1474>
 8009aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009ab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	029b      	lsls	r3, r3, #10
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	e060      	b.n	8009b9e <USB_EPStartXfer+0x155e>
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10c      	bne.n	8009afe <USB_EPStartXfer+0x14be>
 8009ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009afa:	801a      	strh	r2, [r3, #0]
 8009afc:	e04f      	b.n	8009b9e <USB_EPStartXfer+0x155e>
 8009afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b02:	085b      	lsrs	r3, r3, #1
 8009b04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d004      	beq.n	8009b1e <USB_EPStartXfer+0x14de>
 8009b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	029b      	lsls	r3, r3, #10
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b38:	801a      	strh	r2, [r3, #0]
 8009b3a:	e030      	b.n	8009b9e <USB_EPStartXfer+0x155e>
 8009b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d128      	bne.n	8009b9e <USB_EPStartXfer+0x155e>
 8009b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b70:	4413      	add	r3, r2
 8009b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	011a      	lsls	r2, r3, #4
 8009b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b88:	4413      	add	r3, r2
 8009b8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 8085 	bne.w	8009cc8 <USB_EPStartXfer+0x1688>
 8009bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009be2:	4413      	add	r3, r2
 8009be4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	011a      	lsls	r2, r3, #4
 8009bf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c16:	801a      	strh	r2, [r3, #0]
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c1e:	d923      	bls.n	8009c68 <USB_EPStartXfer+0x1628>
 8009c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c24:	095b      	lsrs	r3, r3, #5
 8009c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2e:	f003 031f 	and.w	r3, r3, #31
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d104      	bne.n	8009c40 <USB_EPStartXfer+0x1600>
 8009c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	029b      	lsls	r3, r3, #10
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	4313      	orrs	r3, r2
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	e05c      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10c      	bne.n	8009c8a <USB_EPStartXfer+0x164a>
 8009c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c86:	801a      	strh	r2, [r3, #0]
 8009c88:	e04b      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
 8009c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c8e:	085b      	lsrs	r3, r3, #1
 8009c90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <USB_EPStartXfer+0x166a>
 8009ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	029b      	lsls	r3, r3, #10
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cc4:	801a      	strh	r2, [r3, #0]
 8009cc6:	e02c      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
 8009cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d124      	bne.n	8009d22 <USB_EPStartXfer+0x16e2>
 8009cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009cee:	4413      	add	r3, r2
 8009cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	011a      	lsls	r2, r3, #4
 8009d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d06:	4413      	add	r3, r2
 8009d08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e001      	b.n	8009d22 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e03a      	b.n	8009d98 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	441a      	add	r2, r3
 8009d7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d020      	beq.n	8009df6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dca:	81bb      	strh	r3, [r7, #12]
 8009dcc:	89bb      	ldrh	r3, [r7, #12]
 8009dce:	f083 0310 	eor.w	r3, r3, #16
 8009dd2:	81bb      	strh	r3, [r7, #12]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	441a      	add	r2, r3
 8009dde:	89bb      	ldrh	r3, [r7, #12]
 8009de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	8013      	strh	r3, [r2, #0]
 8009df4:	e01f      	b.n	8009e36 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e0c:	81fb      	strh	r3, [r7, #14]
 8009e0e:	89fb      	ldrh	r3, [r7, #14]
 8009e10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009e14:	81fb      	strh	r3, [r7, #14]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	441a      	add	r2, r3
 8009e20:	89fb      	ldrh	r3, [r7, #14]
 8009e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr

08009e42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b087      	sub	sp, #28
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	7b1b      	ldrb	r3, [r3, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 809d 	bne.w	8009f90 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d04c      	beq.n	8009ef8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	823b      	strh	r3, [r7, #16]
 8009e6c:	8a3b      	ldrh	r3, [r7, #16]
 8009e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01b      	beq.n	8009eae <USB_EPClearStall+0x6c>
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e8c:	81fb      	strh	r3, [r7, #14]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	441a      	add	r2, r3
 8009e98:	89fb      	ldrh	r3, [r7, #14]
 8009e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	78db      	ldrb	r3, [r3, #3]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d06c      	beq.n	8009f90 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ecc:	81bb      	strh	r3, [r7, #12]
 8009ece:	89bb      	ldrh	r3, [r7, #12]
 8009ed0:	f083 0320 	eor.w	r3, r3, #32
 8009ed4:	81bb      	strh	r3, [r7, #12]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	441a      	add	r2, r3
 8009ee0:	89bb      	ldrh	r3, [r7, #12]
 8009ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	8013      	strh	r3, [r2, #0]
 8009ef6:	e04b      	b.n	8009f90 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	82fb      	strh	r3, [r7, #22]
 8009f06:	8afb      	ldrh	r3, [r7, #22]
 8009f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01b      	beq.n	8009f48 <USB_EPClearStall+0x106>
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f26:	82bb      	strh	r3, [r7, #20]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	441a      	add	r2, r3
 8009f32:	8abb      	ldrh	r3, [r7, #20]
 8009f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f5e:	827b      	strh	r3, [r7, #18]
 8009f60:	8a7b      	ldrh	r3, [r7, #18]
 8009f62:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009f66:	827b      	strh	r3, [r7, #18]
 8009f68:	8a7b      	ldrh	r3, [r7, #18]
 8009f6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009f6e:	827b      	strh	r3, [r7, #18]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	441a      	add	r2, r3
 8009f7a:	8a7b      	ldrh	r3, [r7, #18]
 8009f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bc80      	pop	{r7}
 8009f9a:	4770      	bx	lr

08009f9c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2280      	movs	r2, #128	@ 0x80
 8009fb2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr

08009fc2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bc80      	pop	{r7}
 8009fd4:	4770      	bx	lr

08009fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bc80      	pop	{r7}
 8009fe8:	4770      	bx	lr

08009fea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr

0800a008 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	bc80      	pop	{r7}
 800a01c:	4770      	bx	lr

0800a01e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a01e:	b480      	push	{r7}
 800a020:	b08b      	sub	sp, #44	@ 0x2c
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	4611      	mov	r1, r2
 800a02a:	461a      	mov	r2, r3
 800a02c:	460b      	mov	r3, r1
 800a02e:	80fb      	strh	r3, [r7, #6]
 800a030:	4613      	mov	r3, r2
 800a032:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a034:	88bb      	ldrh	r3, [r7, #4]
 800a036:	3301      	adds	r3, #1
 800a038:	085b      	lsrs	r3, r3, #1
 800a03a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	005a      	lsls	r2, r3, #1
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a050:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24
 800a056:	e01f      	b.n	800a098 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	3301      	adds	r3, #1
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b21b      	sxth	r3, r3
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	b21a      	sxth	r2, r3
 800a06a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a06e:	4313      	orrs	r3, r2
 800a070:	b21b      	sxth	r3, r3
 800a072:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	8a7a      	ldrh	r2, [r7, #18]
 800a078:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	3302      	adds	r3, #2
 800a07e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	3302      	adds	r3, #2
 800a084:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	3301      	adds	r3, #1
 800a08a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	3301      	adds	r3, #1
 800a090:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a094:	3b01      	subs	r3, #1
 800a096:	627b      	str	r3, [r7, #36]	@ 0x24
 800a098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1dc      	bne.n	800a058 <USB_WritePMA+0x3a>
  }
}
 800a09e:	bf00      	nop
 800a0a0:	bf00      	nop
 800a0a2:	372c      	adds	r7, #44	@ 0x2c
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr

0800a0aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b08b      	sub	sp, #44	@ 0x2c
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	80fb      	strh	r3, [r7, #6]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a0c0:	88bb      	ldrh	r3, [r7, #4]
 800a0c2:	085b      	lsrs	r3, r3, #1
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	005a      	lsls	r2, r3, #1
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e2:	e01b      	b.n	800a11c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	3302      	adds	r3, #2
 800a0f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	0a1b      	lsrs	r3, r3, #8
 800a104:	b2da      	uxtb	r2, r3
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	3301      	adds	r3, #1
 800a10e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	3302      	adds	r3, #2
 800a114:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	3b01      	subs	r3, #1
 800a11a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e0      	bne.n	800a0e4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a122:	88bb      	ldrh	r3, [r7, #4]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	b29b      	uxth	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d007      	beq.n	800a13e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	701a      	strb	r2, [r3, #0]
  }
}
 800a13e:	bf00      	nop
 800a140:	372c      	adds	r7, #44	@ 0x2c
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr

0800a148 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a14c:	4904      	ldr	r1, [pc, #16]	@ (800a160 <MX_FATFS_Init+0x18>)
 800a14e:	4805      	ldr	r0, [pc, #20]	@ (800a164 <MX_FATFS_Init+0x1c>)
 800a150:	f001 fc12 	bl	800b978 <FATFS_LinkDriver>
 800a154:	4603      	mov	r3, r0
 800a156:	461a      	mov	r2, r3
 800a158:	4b03      	ldr	r3, [pc, #12]	@ (800a168 <MX_FATFS_Init+0x20>)
 800a15a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a15c:	bf00      	nop
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	2000065c 	.word	0x2000065c
 800a164:	2000000c 	.word	0x2000000c
 800a168:	20000658 	.word	0x20000658

0800a16c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a176:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <USER_initialize+0x20>)
 800a178:	2201      	movs	r2, #1
 800a17a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a17c:	4b03      	ldr	r3, [pc, #12]	@ (800a18c <USER_initialize+0x20>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr
 800a18c:	20000009 	.word	0x20000009

0800a190 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800a19a:	4b05      	ldr	r3, [pc, #20]	@ (800a1b0 <USER_status+0x20>)
 800a19c:	2201      	movs	r2, #1
 800a19e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a1a0:	4b03      	ldr	r3, [pc, #12]	@ (800a1b0 <USER_status+0x20>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bc80      	pop	{r7}
 800a1ae:	4770      	bx	lr
 800a1b0:	20000009 	.word	0x20000009

0800a1b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	603b      	str	r3, [r7, #0]
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800a1c4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60b9      	str	r1, [r7, #8]
 800a1d8:	607a      	str	r2, [r7, #4]
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800a1e0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	603a      	str	r2, [r7, #0]
 800a1f6:	71fb      	strb	r3, [r7, #7]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
    return res;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	bc80      	pop	{r7}
 800a20a:	4770      	bx	lr

0800a20c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	7c1b      	ldrb	r3, [r3, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d115      	bne.n	800a250 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a228:	2202      	movs	r2, #2
 800a22a:	2181      	movs	r1, #129	@ 0x81
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 fee2 	bl	800bff6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a23c:	2202      	movs	r2, #2
 800a23e:	2101      	movs	r1, #1
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 fed8 	bl	800bff6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a24e:	e012      	b.n	800a276 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a250:	2340      	movs	r3, #64	@ 0x40
 800a252:	2202      	movs	r2, #2
 800a254:	2181      	movs	r1, #129	@ 0x81
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f001 fecd 	bl	800bff6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a262:	2340      	movs	r3, #64	@ 0x40
 800a264:	2202      	movs	r2, #2
 800a266:	2101      	movs	r1, #1
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 fec4 	bl	800bff6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a276:	2308      	movs	r3, #8
 800a278:	2203      	movs	r2, #3
 800a27a:	2182      	movs	r1, #130	@ 0x82
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 feba 	bl	800bff6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a288:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a28c:	f001 ffda 	bl	800c244 <USBD_static_malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d102      	bne.n	800a2a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	73fb      	strb	r3, [r7, #15]
 800a2a6:	e026      	b.n	800a2f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	7c1b      	ldrb	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2dc:	2101      	movs	r1, #1
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 ff79 	bl	800c1d6 <USBD_LL_PrepareReceive>
 800a2e4:	e007      	b.n	800a2f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2ec:	2340      	movs	r3, #64	@ 0x40
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 ff70 	bl	800c1d6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a310:	2181      	movs	r1, #129	@ 0x81
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 fe95 	bl	800c042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a31e:	2101      	movs	r1, #1
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 fe8e 	bl	800c042 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a32e:	2182      	movs	r1, #130	@ 0x82
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 fe86 	bl	800c042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00e      	beq.n	800a364 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a356:	4618      	mov	r0, r3
 800a358:	f001 ff80 	bl	800c25c <USBD_static_free>
    pdev->pClassData = NULL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a364:	7bfb      	ldrb	r3, [r7, #15]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a37e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a384:	2300      	movs	r3, #0
 800a386:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a394:	2b00      	cmp	r3, #0
 800a396:	d039      	beq.n	800a40c <USBD_CDC_Setup+0x9e>
 800a398:	2b20      	cmp	r3, #32
 800a39a:	d17f      	bne.n	800a49c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	88db      	ldrh	r3, [r3, #6]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d029      	beq.n	800a3f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da11      	bge.n	800a3d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a3ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	88d2      	ldrh	r2, [r2, #6]
 800a3c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3c2:	6939      	ldr	r1, [r7, #16]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	88db      	ldrh	r3, [r3, #6]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 fa06 	bl	800b7dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a3d0:	e06b      	b.n	800a4aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	785a      	ldrb	r2, [r3, #1]
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	88db      	ldrh	r3, [r3, #6]
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3e8:	6939      	ldr	r1, [r7, #16]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	88db      	ldrh	r3, [r3, #6]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fa21 	bl	800b838 <USBD_CtlPrepareRx>
      break;
 800a3f6:	e058      	b.n	800a4aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	7850      	ldrb	r0, [r2, #1]
 800a404:	2200      	movs	r2, #0
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	4798      	blx	r3
      break;
 800a40a:	e04e      	b.n	800a4aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b0b      	cmp	r3, #11
 800a412:	d02e      	beq.n	800a472 <USBD_CDC_Setup+0x104>
 800a414:	2b0b      	cmp	r3, #11
 800a416:	dc38      	bgt.n	800a48a <USBD_CDC_Setup+0x11c>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <USBD_CDC_Setup+0xb4>
 800a41c:	2b0a      	cmp	r3, #10
 800a41e:	d014      	beq.n	800a44a <USBD_CDC_Setup+0xdc>
 800a420:	e033      	b.n	800a48a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d107      	bne.n	800a43c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a42c:	f107 030c 	add.w	r3, r7, #12
 800a430:	2202      	movs	r2, #2
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f9d1 	bl	800b7dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a43a:	e02e      	b.n	800a49a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 f962 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 800a444:	2302      	movs	r3, #2
 800a446:	75fb      	strb	r3, [r7, #23]
          break;
 800a448:	e027      	b.n	800a49a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a450:	2b03      	cmp	r3, #3
 800a452:	d107      	bne.n	800a464 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a454:	f107 030f 	add.w	r3, r7, #15
 800a458:	2201      	movs	r2, #1
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 f9bd 	bl	800b7dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a462:	e01a      	b.n	800a49a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 f94e 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 800a46c:	2302      	movs	r3, #2
 800a46e:	75fb      	strb	r3, [r7, #23]
          break;
 800a470:	e013      	b.n	800a49a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d00d      	beq.n	800a498 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 f942 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a488:	e006      	b.n	800a498 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f93b 	bl	800b708 <USBD_CtlError>
          ret = USBD_FAIL;
 800a492:	2302      	movs	r3, #2
 800a494:	75fb      	strb	r3, [r7, #23]
          break;
 800a496:	e000      	b.n	800a49a <USBD_CDC_Setup+0x12c>
          break;
 800a498:	bf00      	nop
      }
      break;
 800a49a:	e006      	b.n	800a4aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f932 	bl	800b708 <USBD_CtlError>
      ret = USBD_FAIL;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a8:	bf00      	nop
  }

  return ret;
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d03a      	beq.n	800a550 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4da:	78fa      	ldrb	r2, [r7, #3]
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	440b      	add	r3, r1
 800a4e8:	331c      	adds	r3, #28
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d029      	beq.n	800a544 <USBD_CDC_DataIn+0x90>
 800a4f0:	78fa      	ldrb	r2, [r7, #3]
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	331c      	adds	r3, #28
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	78f9      	ldrb	r1, [r7, #3]
 800a504:	68b8      	ldr	r0, [r7, #8]
 800a506:	460b      	mov	r3, r1
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	440b      	add	r3, r1
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	4403      	add	r3, r0
 800a510:	3320      	adds	r3, #32
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	fbb2 f1f3 	udiv	r1, r2, r3
 800a518:	fb01 f303 	mul.w	r3, r1, r3
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d110      	bne.n	800a544 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	440b      	add	r3, r1
 800a530:	331c      	adds	r3, #28
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a536:	78f9      	ldrb	r1, [r7, #3]
 800a538:	2300      	movs	r3, #0
 800a53a:	2200      	movs	r2, #0
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 fe27 	bl	800c190 <USBD_LL_Transmit>
 800a542:	e003      	b.n	800a54c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	e000      	b.n	800a552 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a550:	2302      	movs	r3, #2
  }
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 fe52 	bl	800c21c <USBD_LL_GetRxDataSize>
 800a578:	4602      	mov	r2, r0
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00d      	beq.n	800a5a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4798      	blx	r3

    return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e000      	b.n	800a5a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a5a6:	2302      	movs	r3, #2
  }
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d014      	beq.n	800a5f4 <USBD_CDC_EP0_RxReady+0x44>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a5d0:	2bff      	cmp	r3, #255	@ 0xff
 800a5d2:	d00f      	beq.n	800a5f4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a5e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	22ff      	movs	r2, #255	@ 0xff
 800a5f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2243      	movs	r2, #67	@ 0x43
 800a60c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a60e:	4b03      	ldr	r3, [pc, #12]	@ (800a61c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	200000a8 	.word	0x200000a8

0800a620 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2243      	movs	r2, #67	@ 0x43
 800a62c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a62e:	4b03      	ldr	r3, [pc, #12]	@ (800a63c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	bc80      	pop	{r7}
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20000064 	.word	0x20000064

0800a640 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2243      	movs	r2, #67	@ 0x43
 800a64c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a64e:	4b03      	ldr	r3, [pc, #12]	@ (800a65c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a650:	4618      	mov	r0, r3
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	bc80      	pop	{r7}
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	200000ec 	.word	0x200000ec

0800a660 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	220a      	movs	r2, #10
 800a66c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a66e:	4b03      	ldr	r3, [pc, #12]	@ (800a67c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	20000020 	.word	0x20000020

0800a680 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a68a:	2302      	movs	r3, #2
 800a68c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	371c      	adds	r7, #28
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bc80      	pop	{r7}
 800a6dc:	4770      	bx	lr

0800a6de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b085      	sub	sp, #20
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bc80      	pop	{r7}
 800a702:	4770      	bx	lr

0800a704 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d01c      	beq.n	800a758 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a724:	2b00      	cmp	r3, #0
 800a726:	d115      	bne.n	800a754 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a746:	b29b      	uxth	r3, r3
 800a748:	2181      	movs	r1, #129	@ 0x81
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 fd20 	bl	800c190 <USBD_LL_Transmit>

      return USBD_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	e002      	b.n	800a75a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a754:	2301      	movs	r3, #1
 800a756:	e000      	b.n	800a75a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a758:	2302      	movs	r3, #2
  }
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a770:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d017      	beq.n	800a7ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	7c1b      	ldrb	r3, [r3, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d109      	bne.n	800a798 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a78a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a78e:	2101      	movs	r1, #1
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 fd20 	bl	800c1d6 <USBD_LL_PrepareReceive>
 800a796:	e007      	b.n	800a7a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a79e:	2340      	movs	r3, #64	@ 0x40
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 fd17 	bl	800c1d6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e000      	b.n	800a7ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a7ac:	2302      	movs	r3, #2
  }
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e01a      	b.n	800a804 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	79fa      	ldrb	r2, [r7, #7]
 800a7fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f001 fb85 	bl	800bf0c <USBD_LL_Init>

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]
 800a82c:	e001      	b.n	800a832 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a82e:	2302      	movs	r3, #2
 800a830:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	bc80      	pop	{r7}
 800a83c:	4770      	bx	lr

0800a83e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 fbba 	bl	800bfc0 <USBD_LL_Start>

  return USBD_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	bc80      	pop	{r7}
 800a868:	4770      	bx	lr

0800a86a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a876:	2302      	movs	r3, #2
 800a878:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00c      	beq.n	800a89e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	4611      	mov	r1, r2
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	4798      	blx	r3
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	78fa      	ldrb	r2, [r7, #3]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	4798      	blx	r3

  return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fed8 	bl	800b696 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a902:	f003 031f 	and.w	r3, r3, #31
 800a906:	2b02      	cmp	r3, #2
 800a908:	d016      	beq.n	800a938 <USBD_LL_SetupStage+0x6a>
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d81c      	bhi.n	800a948 <USBD_LL_SetupStage+0x7a>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <USBD_LL_SetupStage+0x4a>
 800a912:	2b01      	cmp	r3, #1
 800a914:	d008      	beq.n	800a928 <USBD_LL_SetupStage+0x5a>
 800a916:	e017      	b.n	800a948 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f9cb 	bl	800acbc <USBD_StdDevReq>
      break;
 800a926:	e01a      	b.n	800a95e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fa2d 	bl	800ad90 <USBD_StdItfReq>
      break;
 800a936:	e012      	b.n	800a95e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa6d 	bl	800ae20 <USBD_StdEPReq>
      break;
 800a946:	e00a      	b.n	800a95e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a94e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a952:	b2db      	uxtb	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 fb92 	bl	800c080 <USBD_LL_StallEP>
      break;
 800a95c:	bf00      	nop
  }

  return USBD_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	460b      	mov	r3, r1
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d14b      	bne.n	800aa14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a982:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d134      	bne.n	800a9f8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	68da      	ldr	r2, [r3, #12]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	429a      	cmp	r2, r3
 800a998:	d919      	bls.n	800a9ce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	1ad2      	subs	r2, r2, r3
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d203      	bcs.n	800a9bc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	e002      	b.n	800a9c2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 ff54 	bl	800b874 <USBD_CtlContinueRx>
 800a9cc:	e038      	b.n	800aa40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00a      	beq.n	800a9f0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d105      	bne.n	800a9f0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 ff51 	bl	800b898 <USBD_CtlSendStatus>
 800a9f6:	e023      	b.n	800aa40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9fe:	2b05      	cmp	r3, #5
 800aa00:	d11e      	bne.n	800aa40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f001 fb37 	bl	800c080 <USBD_LL_StallEP>
 800aa12:	e015      	b.n	800aa40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00d      	beq.n	800aa3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d108      	bne.n	800aa3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	7afa      	ldrb	r2, [r7, #11]
 800aa34:	4611      	mov	r1, r2
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	4798      	blx	r3
 800aa3a:	e001      	b.n	800aa40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	e000      	b.n	800aa42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b086      	sub	sp, #24
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	460b      	mov	r3, r1
 800aa54:	607a      	str	r2, [r7, #4]
 800aa56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d17f      	bne.n	800ab5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3314      	adds	r3, #20
 800aa62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d15c      	bne.n	800ab28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d915      	bls.n	800aaa6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	1ad2      	subs	r2, r2, r3
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 febe 	bl	800b814 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f001 fb99 	bl	800c1d6 <USBD_LL_PrepareReceive>
 800aaa4:	e04e      	b.n	800ab44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	6912      	ldr	r2, [r2, #16]
 800aaae:	fbb3 f1f2 	udiv	r1, r3, r2
 800aab2:	fb01 f202 	mul.w	r2, r1, r2
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11c      	bne.n	800aaf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d316      	bcc.n	800aaf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d20f      	bcs.n	800aaf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aad6:	2200      	movs	r2, #0
 800aad8:	2100      	movs	r1, #0
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 fe9a 	bl	800b814 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae8:	2300      	movs	r3, #0
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f001 fb71 	bl	800c1d6 <USBD_LL_PrepareReceive>
 800aaf4:	e026      	b.n	800ab44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d105      	bne.n	800ab18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ab18:	2180      	movs	r1, #128	@ 0x80
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f001 fab0 	bl	800c080 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 fecc 	bl	800b8be <USBD_CtlReceiveStatus>
 800ab26:	e00d      	b.n	800ab44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d004      	beq.n	800ab3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ab3c:	2180      	movs	r1, #128	@ 0x80
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f001 fa9e 	bl	800c080 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d11d      	bne.n	800ab8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fe81 	bl	800a856 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ab5c:	e015      	b.n	800ab8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00d      	beq.n	800ab86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d108      	bne.n	800ab86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	7afa      	ldrb	r2, [r7, #11]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	4798      	blx	r3
 800ab84:	e001      	b.n	800ab8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab86:	2302      	movs	r3, #2
 800ab88:	e000      	b.n	800ab8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab9c:	2340      	movs	r3, #64	@ 0x40
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2100      	movs	r1, #0
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f001 fa27 	bl	800bff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2240      	movs	r2, #64	@ 0x40
 800abb4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abb8:	2340      	movs	r3, #64	@ 0x40
 800abba:	2200      	movs	r2, #0
 800abbc:	2180      	movs	r1, #128	@ 0x80
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f001 fa19 	bl	800bff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2240      	movs	r2, #64	@ 0x40
 800abce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d009      	beq.n	800ac0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6852      	ldr	r2, [r2, #4]
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	4611      	mov	r1, r2
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	4798      	blx	r3
  }

  return USBD_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	78fa      	ldrb	r2, [r7, #3]
 800ac26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bc80      	pop	{r7}
 800ac32:	4770      	bx	lr

0800ac34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2204      	movs	r2, #4
 800ac4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bc80      	pop	{r7}
 800ac5a:	4770      	bx	lr

0800ac5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d105      	bne.n	800ac7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr

0800ac86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d10b      	bne.n	800acb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acd2:	2b40      	cmp	r3, #64	@ 0x40
 800acd4:	d005      	beq.n	800ace2 <USBD_StdDevReq+0x26>
 800acd6:	2b40      	cmp	r3, #64	@ 0x40
 800acd8:	d84f      	bhi.n	800ad7a <USBD_StdDevReq+0xbe>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d009      	beq.n	800acf2 <USBD_StdDevReq+0x36>
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d14b      	bne.n	800ad7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	4798      	blx	r3
      break;
 800acf0:	e048      	b.n	800ad84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d839      	bhi.n	800ad6e <USBD_StdDevReq+0xb2>
 800acfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ad00 <USBD_StdDevReq+0x44>)
 800acfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad00:	0800ad51 	.word	0x0800ad51
 800ad04:	0800ad65 	.word	0x0800ad65
 800ad08:	0800ad6f 	.word	0x0800ad6f
 800ad0c:	0800ad5b 	.word	0x0800ad5b
 800ad10:	0800ad6f 	.word	0x0800ad6f
 800ad14:	0800ad33 	.word	0x0800ad33
 800ad18:	0800ad29 	.word	0x0800ad29
 800ad1c:	0800ad6f 	.word	0x0800ad6f
 800ad20:	0800ad47 	.word	0x0800ad47
 800ad24:	0800ad3d 	.word	0x0800ad3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f9dc 	bl	800b0e8 <USBD_GetDescriptor>
          break;
 800ad30:	e022      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fb3f 	bl	800b3b8 <USBD_SetAddress>
          break;
 800ad3a:	e01d      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fb7e 	bl	800b440 <USBD_SetConfig>
          break;
 800ad44:	e018      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fc07 	bl	800b55c <USBD_GetConfig>
          break;
 800ad4e:	e013      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fc37 	bl	800b5c6 <USBD_GetStatus>
          break;
 800ad58:	e00e      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fc65 	bl	800b62c <USBD_SetFeature>
          break;
 800ad62:	e009      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fc74 	bl	800b654 <USBD_ClrFeature>
          break;
 800ad6c:	e004      	b.n	800ad78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fcc9 	bl	800b708 <USBD_CtlError>
          break;
 800ad76:	bf00      	nop
      }
      break;
 800ad78:	e004      	b.n	800ad84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fcc3 	bl	800b708 <USBD_CtlError>
      break;
 800ad82:	bf00      	nop
  }

  return ret;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop

0800ad90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ada6:	2b40      	cmp	r3, #64	@ 0x40
 800ada8:	d005      	beq.n	800adb6 <USBD_StdItfReq+0x26>
 800adaa:	2b40      	cmp	r3, #64	@ 0x40
 800adac:	d82e      	bhi.n	800ae0c <USBD_StdItfReq+0x7c>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <USBD_StdItfReq+0x26>
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d12a      	bne.n	800ae0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adbc:	3b01      	subs	r3, #1
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d81d      	bhi.n	800adfe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	889b      	ldrh	r3, [r3, #4]
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d813      	bhi.n	800adf4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	4798      	blx	r3
 800adda:	4603      	mov	r3, r0
 800addc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	88db      	ldrh	r3, [r3, #6]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d110      	bne.n	800ae08 <USBD_StdItfReq+0x78>
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10d      	bne.n	800ae08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fd53 	bl	800b898 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adf2:	e009      	b.n	800ae08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fc86 	bl	800b708 <USBD_CtlError>
          break;
 800adfc:	e004      	b.n	800ae08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fc81 	bl	800b708 <USBD_CtlError>
          break;
 800ae06:	e000      	b.n	800ae0a <USBD_StdItfReq+0x7a>
          break;
 800ae08:	bf00      	nop
      }
      break;
 800ae0a:	e004      	b.n	800ae16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fc7a 	bl	800b708 <USBD_CtlError>
      break;
 800ae14:	bf00      	nop
  }

  return USBD_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	889b      	ldrh	r3, [r3, #4]
 800ae32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae3c:	2b40      	cmp	r3, #64	@ 0x40
 800ae3e:	d007      	beq.n	800ae50 <USBD_StdEPReq+0x30>
 800ae40:	2b40      	cmp	r3, #64	@ 0x40
 800ae42:	f200 8146 	bhi.w	800b0d2 <USBD_StdEPReq+0x2b2>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <USBD_StdEPReq+0x40>
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	f040 8141 	bne.w	800b0d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	4798      	blx	r3
      break;
 800ae5e:	e13d      	b.n	800b0dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	d10a      	bne.n	800ae82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	e12d      	b.n	800b0de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d007      	beq.n	800ae9a <USBD_StdEPReq+0x7a>
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	f300 811b 	bgt.w	800b0c6 <USBD_StdEPReq+0x2a6>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d072      	beq.n	800af7a <USBD_StdEPReq+0x15a>
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d03a      	beq.n	800af0e <USBD_StdEPReq+0xee>
 800ae98:	e115      	b.n	800b0c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d002      	beq.n	800aeaa <USBD_StdEPReq+0x8a>
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d015      	beq.n	800aed4 <USBD_StdEPReq+0xb4>
 800aea8:	e02b      	b.n	800af02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00c      	beq.n	800aeca <USBD_StdEPReq+0xaa>
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b80      	cmp	r3, #128	@ 0x80
 800aeb4:	d009      	beq.n	800aeca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 f8e0 	bl	800c080 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aec0:	2180      	movs	r1, #128	@ 0x80
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 f8dc 	bl	800c080 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aec8:	e020      	b.n	800af0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fc1b 	bl	800b708 <USBD_CtlError>
              break;
 800aed2:	e01b      	b.n	800af0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	885b      	ldrh	r3, [r3, #2]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10e      	bne.n	800aefa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00b      	beq.n	800aefa <USBD_StdEPReq+0xda>
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	2b80      	cmp	r3, #128	@ 0x80
 800aee6:	d008      	beq.n	800aefa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	88db      	ldrh	r3, [r3, #6]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d104      	bne.n	800aefa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f8c3 	bl	800c080 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fccc 	bl	800b898 <USBD_CtlSendStatus>

              break;
 800af00:	e004      	b.n	800af0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fbff 	bl	800b708 <USBD_CtlError>
              break;
 800af0a:	bf00      	nop
          }
          break;
 800af0c:	e0e0      	b.n	800b0d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af14:	2b02      	cmp	r3, #2
 800af16:	d002      	beq.n	800af1e <USBD_StdEPReq+0xfe>
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d015      	beq.n	800af48 <USBD_StdEPReq+0x128>
 800af1c:	e026      	b.n	800af6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00c      	beq.n	800af3e <USBD_StdEPReq+0x11e>
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b80      	cmp	r3, #128	@ 0x80
 800af28:	d009      	beq.n	800af3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f001 f8a6 	bl	800c080 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800af34:	2180      	movs	r1, #128	@ 0x80
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f001 f8a2 	bl	800c080 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af3c:	e01c      	b.n	800af78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fbe1 	bl	800b708 <USBD_CtlError>
              break;
 800af46:	e017      	b.n	800af78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d112      	bne.n	800af76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af50:	7bbb      	ldrb	r3, [r7, #14]
 800af52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 f8ad 	bl	800c0be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fc97 	bl	800b898 <USBD_CtlSendStatus>
              }
              break;
 800af6a:	e004      	b.n	800af76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fbca 	bl	800b708 <USBD_CtlError>
              break;
 800af74:	e000      	b.n	800af78 <USBD_StdEPReq+0x158>
              break;
 800af76:	bf00      	nop
          }
          break;
 800af78:	e0aa      	b.n	800b0d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af80:	2b02      	cmp	r3, #2
 800af82:	d002      	beq.n	800af8a <USBD_StdEPReq+0x16a>
 800af84:	2b03      	cmp	r3, #3
 800af86:	d032      	beq.n	800afee <USBD_StdEPReq+0x1ce>
 800af88:	e097      	b.n	800b0ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <USBD_StdEPReq+0x180>
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	2b80      	cmp	r3, #128	@ 0x80
 800af94:	d004      	beq.n	800afa0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fbb5 	bl	800b708 <USBD_CtlError>
                break;
 800af9e:	e091      	b.n	800b0c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	da0b      	bge.n	800afc0 <USBD_StdEPReq+0x1a0>
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	3310      	adds	r3, #16
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	4413      	add	r3, r2
 800afbc:	3304      	adds	r3, #4
 800afbe:	e00b      	b.n	800afd8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	4413      	add	r3, r2
 800afd6:	3304      	adds	r3, #4
 800afd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2202      	movs	r2, #2
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fbf8 	bl	800b7dc <USBD_CtlSendData>
              break;
 800afec:	e06a      	b.n	800b0c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800afee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da11      	bge.n	800b01a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	f003 020f 	and.w	r2, r3, #15
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	3318      	adds	r3, #24
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d117      	bne.n	800b040 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fb78 	bl	800b708 <USBD_CtlError>
                  break;
 800b018:	e054      	b.n	800b0c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	f003 020f 	and.w	r2, r3, #15
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4613      	mov	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	440b      	add	r3, r1
 800b02c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d104      	bne.n	800b040 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb65 	bl	800b708 <USBD_CtlError>
                  break;
 800b03e:	e041      	b.n	800b0c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b044:	2b00      	cmp	r3, #0
 800b046:	da0b      	bge.n	800b060 <USBD_StdEPReq+0x240>
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	3310      	adds	r3, #16
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	4413      	add	r3, r2
 800b05c:	3304      	adds	r3, #4
 800b05e:	e00b      	b.n	800b078 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	4413      	add	r3, r2
 800b076:	3304      	adds	r3, #4
 800b078:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <USBD_StdEPReq+0x266>
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	2b80      	cmp	r3, #128	@ 0x80
 800b084:	d103      	bne.n	800b08e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2200      	movs	r2, #0
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	e00e      	b.n	800b0ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 f832 	bl	800c0fc <USBD_LL_IsStallEP>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	e002      	b.n	800b0ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fb92 	bl	800b7dc <USBD_CtlSendData>
              break;
 800b0b8:	e004      	b.n	800b0c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fb23 	bl	800b708 <USBD_CtlError>
              break;
 800b0c2:	bf00      	nop
          }
          break;
 800b0c4:	e004      	b.n	800b0d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fb1d 	bl	800b708 <USBD_CtlError>
          break;
 800b0ce:	bf00      	nop
      }
      break;
 800b0d0:	e004      	b.n	800b0dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fb17 	bl	800b708 <USBD_CtlError>
      break;
 800b0da:	bf00      	nop
  }

  return ret;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	885b      	ldrh	r3, [r3, #2]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	b29b      	uxth	r3, r3
 800b106:	3b01      	subs	r3, #1
 800b108:	2b06      	cmp	r3, #6
 800b10a:	f200 8128 	bhi.w	800b35e <USBD_GetDescriptor+0x276>
 800b10e:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <USBD_GetDescriptor+0x2c>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b131 	.word	0x0800b131
 800b118:	0800b149 	.word	0x0800b149
 800b11c:	0800b189 	.word	0x0800b189
 800b120:	0800b35f 	.word	0x0800b35f
 800b124:	0800b35f 	.word	0x0800b35f
 800b128:	0800b2ff 	.word	0x0800b2ff
 800b12c:	0800b32b 	.word	0x0800b32b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	7c12      	ldrb	r2, [r2, #16]
 800b13c:	f107 0108 	add.w	r1, r7, #8
 800b140:	4610      	mov	r0, r2
 800b142:	4798      	blx	r3
 800b144:	60f8      	str	r0, [r7, #12]
      break;
 800b146:	e112      	b.n	800b36e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7c1b      	ldrb	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10d      	bne.n	800b16c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b158:	f107 0208 	add.w	r2, r7, #8
 800b15c:	4610      	mov	r0, r2
 800b15e:	4798      	blx	r3
 800b160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3301      	adds	r3, #1
 800b166:	2202      	movs	r2, #2
 800b168:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b16a:	e100      	b.n	800b36e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b174:	f107 0208 	add.w	r2, r7, #8
 800b178:	4610      	mov	r0, r2
 800b17a:	4798      	blx	r3
 800b17c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3301      	adds	r3, #1
 800b182:	2202      	movs	r2, #2
 800b184:	701a      	strb	r2, [r3, #0]
      break;
 800b186:	e0f2      	b.n	800b36e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	885b      	ldrh	r3, [r3, #2]
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b05      	cmp	r3, #5
 800b190:	f200 80ac 	bhi.w	800b2ec <USBD_GetDescriptor+0x204>
 800b194:	a201      	add	r2, pc, #4	@ (adr r2, 800b19c <USBD_GetDescriptor+0xb4>)
 800b196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19a:	bf00      	nop
 800b19c:	0800b1b5 	.word	0x0800b1b5
 800b1a0:	0800b1e9 	.word	0x0800b1e9
 800b1a4:	0800b21d 	.word	0x0800b21d
 800b1a8:	0800b251 	.word	0x0800b251
 800b1ac:	0800b285 	.word	0x0800b285
 800b1b0:	0800b2b9 	.word	0x0800b2b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7c12      	ldrb	r2, [r2, #16]
 800b1cc:	f107 0108 	add.w	r1, r7, #8
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
 800b1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d6:	e091      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa94 	bl	800b708 <USBD_CtlError>
            err++;
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e6:	e089      	b.n	800b2fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	7c12      	ldrb	r2, [r2, #16]
 800b200:	f107 0108 	add.w	r1, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20a:	e077      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa7a 	bl	800b708 <USBD_CtlError>
            err++;
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	3301      	adds	r3, #1
 800b218:	72fb      	strb	r3, [r7, #11]
          break;
 800b21a:	e06f      	b.n	800b2fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7c12      	ldrb	r2, [r2, #16]
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23e:	e05d      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa60 	bl	800b708 <USBD_CtlError>
            err++;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	3301      	adds	r3, #1
 800b24c:	72fb      	strb	r3, [r7, #11]
          break;
 800b24e:	e055      	b.n	800b2fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	7c12      	ldrb	r2, [r2, #16]
 800b268:	f107 0108 	add.w	r1, r7, #8
 800b26c:	4610      	mov	r0, r2
 800b26e:	4798      	blx	r3
 800b270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b272:	e043      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fa46 	bl	800b708 <USBD_CtlError>
            err++;
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	3301      	adds	r3, #1
 800b280:	72fb      	strb	r3, [r7, #11]
          break;
 800b282:	e03b      	b.n	800b2fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	7c12      	ldrb	r2, [r2, #16]
 800b29c:	f107 0108 	add.w	r1, r7, #8
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2a6:	e029      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fa2c 	bl	800b708 <USBD_CtlError>
            err++;
 800b2b0:	7afb      	ldrb	r3, [r7, #11]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2b6:	e021      	b.n	800b2fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00b      	beq.n	800b2dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	7c12      	ldrb	r2, [r2, #16]
 800b2d0:	f107 0108 	add.w	r1, r7, #8
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4798      	blx	r3
 800b2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2da:	e00f      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fa12 	bl	800b708 <USBD_CtlError>
            err++;
 800b2e4:	7afb      	ldrb	r3, [r7, #11]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ea:	e007      	b.n	800b2fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa0a 	bl	800b708 <USBD_CtlError>
          err++;
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b2fa:	e038      	b.n	800b36e <USBD_GetDescriptor+0x286>
 800b2fc:	e037      	b.n	800b36e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	7c1b      	ldrb	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d109      	bne.n	800b31a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30e:	f107 0208 	add.w	r2, r7, #8
 800b312:	4610      	mov	r0, r2
 800b314:	4798      	blx	r3
 800b316:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b318:	e029      	b.n	800b36e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f9f3 	bl	800b708 <USBD_CtlError>
        err++;
 800b322:	7afb      	ldrb	r3, [r7, #11]
 800b324:	3301      	adds	r3, #1
 800b326:	72fb      	strb	r3, [r7, #11]
      break;
 800b328:	e021      	b.n	800b36e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	7c1b      	ldrb	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10d      	bne.n	800b34e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b33a:	f107 0208 	add.w	r2, r7, #8
 800b33e:	4610      	mov	r0, r2
 800b340:	4798      	blx	r3
 800b342:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3301      	adds	r3, #1
 800b348:	2207      	movs	r2, #7
 800b34a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b34c:	e00f      	b.n	800b36e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f9d9 	bl	800b708 <USBD_CtlError>
        err++;
 800b356:	7afb      	ldrb	r3, [r7, #11]
 800b358:	3301      	adds	r3, #1
 800b35a:	72fb      	strb	r3, [r7, #11]
      break;
 800b35c:	e007      	b.n	800b36e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f9d1 	bl	800b708 <USBD_CtlError>
      err++;
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	3301      	adds	r3, #1
 800b36a:	72fb      	strb	r3, [r7, #11]
      break;
 800b36c:	bf00      	nop
  }

  if (err != 0U)
 800b36e:	7afb      	ldrb	r3, [r7, #11]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d11c      	bne.n	800b3ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b374:	893b      	ldrh	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d011      	beq.n	800b39e <USBD_GetDescriptor+0x2b6>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	88db      	ldrh	r3, [r3, #6]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00d      	beq.n	800b39e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	88da      	ldrh	r2, [r3, #6]
 800b386:	893b      	ldrh	r3, [r7, #8]
 800b388:	4293      	cmp	r3, r2
 800b38a:	bf28      	it	cs
 800b38c:	4613      	movcs	r3, r2
 800b38e:	b29b      	uxth	r3, r3
 800b390:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b392:	893b      	ldrh	r3, [r7, #8]
 800b394:	461a      	mov	r2, r3
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fa1f 	bl	800b7dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	88db      	ldrh	r3, [r3, #6]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa76 	bl	800b898 <USBD_CtlSendStatus>
 800b3ac:	e000      	b.n	800b3b0 <USBD_GetDescriptor+0x2c8>
    return;
 800b3ae:	bf00      	nop
    }
  }
}
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop

0800b3b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	889b      	ldrh	r3, [r3, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d130      	bne.n	800b42c <USBD_SetAddress+0x74>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	88db      	ldrh	r3, [r3, #6]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d12c      	bne.n	800b42c <USBD_SetAddress+0x74>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	885b      	ldrh	r3, [r3, #2]
 800b3d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3d8:	d828      	bhi.n	800b42c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	885b      	ldrh	r3, [r3, #2]
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d104      	bne.n	800b3fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f988 	bl	800b708 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f8:	e01d      	b.n	800b436 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7bfa      	ldrb	r2, [r7, #15]
 800b3fe:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fea3 	bl	800c152 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fa43 	bl	800b898 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b420:	e009      	b.n	800b436 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42a:	e004      	b.n	800b436 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f96a 	bl	800b708 <USBD_CtlError>
  }
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	4b41      	ldr	r3, [pc, #260]	@ (800b558 <USBD_SetConfig+0x118>)
 800b452:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b454:	4b40      	ldr	r3, [pc, #256]	@ (800b558 <USBD_SetConfig+0x118>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d904      	bls.n	800b466 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f952 	bl	800b708 <USBD_CtlError>
 800b464:	e075      	b.n	800b552 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d002      	beq.n	800b476 <USBD_SetConfig+0x36>
 800b470:	2b03      	cmp	r3, #3
 800b472:	d023      	beq.n	800b4bc <USBD_SetConfig+0x7c>
 800b474:	e062      	b.n	800b53c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b476:	4b38      	ldr	r3, [pc, #224]	@ (800b558 <USBD_SetConfig+0x118>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d01a      	beq.n	800b4b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b47e:	4b36      	ldr	r3, [pc, #216]	@ (800b558 <USBD_SetConfig+0x118>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2203      	movs	r2, #3
 800b48c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b490:	4b31      	ldr	r3, [pc, #196]	@ (800b558 <USBD_SetConfig+0x118>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff f9e7 	bl	800a86a <USBD_SetClassConfig>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d104      	bne.n	800b4ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f92f 	bl	800b708 <USBD_CtlError>
            return;
 800b4aa:	e052      	b.n	800b552 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f9f3 	bl	800b898 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4b2:	e04e      	b.n	800b552 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f9ef 	bl	800b898 <USBD_CtlSendStatus>
        break;
 800b4ba:	e04a      	b.n	800b552 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b4bc:	4b26      	ldr	r3, [pc, #152]	@ (800b558 <USBD_SetConfig+0x118>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d112      	bne.n	800b4ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b4cc:	4b22      	ldr	r3, [pc, #136]	@ (800b558 <USBD_SetConfig+0x118>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b4d6:	4b20      	ldr	r3, [pc, #128]	@ (800b558 <USBD_SetConfig+0x118>)
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff f9e3 	bl	800a8a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f9d8 	bl	800b898 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4e8:	e033      	b.n	800b552 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b558 <USBD_SetConfig+0x118>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d01d      	beq.n	800b534 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff f9d1 	bl	800a8a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b506:	4b14      	ldr	r3, [pc, #80]	@ (800b558 <USBD_SetConfig+0x118>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b510:	4b11      	ldr	r3, [pc, #68]	@ (800b558 <USBD_SetConfig+0x118>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff f9a7 	bl	800a86a <USBD_SetClassConfig>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d104      	bne.n	800b52c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f8ef 	bl	800b708 <USBD_CtlError>
            return;
 800b52a:	e012      	b.n	800b552 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f9b3 	bl	800b898 <USBD_CtlSendStatus>
        break;
 800b532:	e00e      	b.n	800b552 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f9af 	bl	800b898 <USBD_CtlSendStatus>
        break;
 800b53a:	e00a      	b.n	800b552 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f8e2 	bl	800b708 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b544:	4b04      	ldr	r3, [pc, #16]	@ (800b558 <USBD_SetConfig+0x118>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff f9ac 	bl	800a8a8 <USBD_ClrClassConfig>
        break;
 800b550:	bf00      	nop
    }
  }
}
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20000660 	.word	0x20000660

0800b55c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	88db      	ldrh	r3, [r3, #6]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d004      	beq.n	800b578 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f8c9 	bl	800b708 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b576:	e022      	b.n	800b5be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b57e:	2b02      	cmp	r3, #2
 800b580:	dc02      	bgt.n	800b588 <USBD_GetConfig+0x2c>
 800b582:	2b00      	cmp	r3, #0
 800b584:	dc03      	bgt.n	800b58e <USBD_GetConfig+0x32>
 800b586:	e015      	b.n	800b5b4 <USBD_GetConfig+0x58>
 800b588:	2b03      	cmp	r3, #3
 800b58a:	d00b      	beq.n	800b5a4 <USBD_GetConfig+0x48>
 800b58c:	e012      	b.n	800b5b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3308      	adds	r3, #8
 800b598:	2201      	movs	r2, #1
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f91d 	bl	800b7dc <USBD_CtlSendData>
        break;
 800b5a2:	e00c      	b.n	800b5be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f915 	bl	800b7dc <USBD_CtlSendData>
        break;
 800b5b2:	e004      	b.n	800b5be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f8a6 	bl	800b708 <USBD_CtlError>
        break;
 800b5bc:	bf00      	nop
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d81e      	bhi.n	800b61a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	88db      	ldrh	r3, [r3, #6]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d004      	beq.n	800b5ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f88e 	bl	800b708 <USBD_CtlError>
        break;
 800b5ec:	e01a      	b.n	800b624 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d005      	beq.n	800b60a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	f043 0202 	orr.w	r2, r3, #2
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	330c      	adds	r3, #12
 800b60e:	2202      	movs	r2, #2
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f8e2 	bl	800b7dc <USBD_CtlSendData>
      break;
 800b618:	e004      	b.n	800b624 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f873 	bl	800b708 <USBD_CtlError>
      break;
 800b622:	bf00      	nop
  }
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	885b      	ldrh	r3, [r3, #2]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d106      	bne.n	800b64c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f926 	bl	800b898 <USBD_CtlSendStatus>
  }
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b664:	3b01      	subs	r3, #1
 800b666:	2b02      	cmp	r3, #2
 800b668:	d80b      	bhi.n	800b682 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	885b      	ldrh	r3, [r3, #2]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d10c      	bne.n	800b68c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f90c 	bl	800b898 <USBD_CtlSendStatus>
      }
      break;
 800b680:	e004      	b.n	800b68c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f83f 	bl	800b708 <USBD_CtlError>
      break;
 800b68a:	e000      	b.n	800b68e <USBD_ClrFeature+0x3a>
      break;
 800b68c:	bf00      	nop
  }
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	781a      	ldrb	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	785a      	ldrb	r2, [r3, #1]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	3302      	adds	r3, #2
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	3303      	adds	r3, #3
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	4413      	add	r3, r2
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	3305      	adds	r3, #5
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	021b      	lsls	r3, r3, #8
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	4413      	add	r3, r2
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	3306      	adds	r3, #6
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	3307      	adds	r3, #7
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	021b      	lsls	r3, r3, #8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	4413      	add	r3, r2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	80da      	strh	r2, [r3, #6]

}
 800b6fe:	bf00      	nop
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	bc80      	pop	{r7}
 800b706:	4770      	bx	lr

0800b708 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b712:	2180      	movs	r1, #128	@ 0x80
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fcb3 	bl	800c080 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b71a:	2100      	movs	r1, #0
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fcaf 	bl	800c080 <USBD_LL_StallEP>
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d032      	beq.n	800b7a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f834 	bl	800b7ae <USBD_GetLen>
 800b746:	4603      	mov	r3, r0
 800b748:	3301      	adds	r3, #1
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	75fa      	strb	r2, [r7, #23]
 800b75a:	461a      	mov	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	4413      	add	r3, r2
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	7812      	ldrb	r2, [r2, #0]
 800b764:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	75fa      	strb	r2, [r7, #23]
 800b76c:	461a      	mov	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4413      	add	r3, r2
 800b772:	2203      	movs	r2, #3
 800b774:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b776:	e012      	b.n	800b79e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	60fa      	str	r2, [r7, #12]
 800b77e:	7dfa      	ldrb	r2, [r7, #23]
 800b780:	1c51      	adds	r1, r2, #1
 800b782:	75f9      	strb	r1, [r7, #23]
 800b784:	4611      	mov	r1, r2
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	440a      	add	r2, r1
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	75fa      	strb	r2, [r7, #23]
 800b794:	461a      	mov	r2, r3
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	4413      	add	r3, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e8      	bne.n	800b778 <USBD_GetString+0x4e>
    }
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b7ba:	e005      	b.n	800b7c8 <USBD_GetLen+0x1a>
  {
    len++;
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1f5      	bne.n	800b7bc <USBD_GetLen+0xe>
  }

  return len;
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bc80      	pop	{r7}
 800b7da:	4770      	bx	lr

0800b7dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b7f2:	88fa      	ldrh	r2, [r7, #6]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b7f8:	88fa      	ldrh	r2, [r7, #6]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7fe:	88fb      	ldrh	r3, [r7, #6]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	2100      	movs	r1, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 fcc3 	bl	800c190 <USBD_LL_Transmit>

  return USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	4613      	mov	r3, r2
 800b820:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	2100      	movs	r1, #0
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 fcb1 	bl	800c190 <USBD_LL_Transmit>

  return USBD_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4613      	mov	r3, r2
 800b844:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2203      	movs	r2, #3
 800b84a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b84e:	88fa      	ldrh	r2, [r7, #6]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b856:	88fa      	ldrh	r2, [r7, #6]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b85e:	88fb      	ldrh	r3, [r7, #6]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	2100      	movs	r1, #0
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 fcb6 	bl	800c1d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	4613      	mov	r3, r2
 800b880:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b882:	88fb      	ldrh	r3, [r7, #6]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	2100      	movs	r1, #0
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 fca4 	bl	800c1d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fc6e 	bl	800c190 <USBD_LL_Transmit>

  return USBD_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2205      	movs	r2, #5
 800b8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc7e 	bl	800c1d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b8fa:	4b1e      	ldr	r3, [pc, #120]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b8fc:	7a5b      	ldrb	r3, [r3, #9]
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	2b01      	cmp	r3, #1
 800b902:	d831      	bhi.n	800b968 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b904:	4b1b      	ldr	r3, [pc, #108]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b906:	7a5b      	ldrb	r3, [r3, #9]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b19      	ldr	r3, [pc, #100]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b90e:	2100      	movs	r1, #0
 800b910:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b912:	4b18      	ldr	r3, [pc, #96]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b914:	7a5b      	ldrb	r3, [r3, #9]
 800b916:	b2db      	uxtb	r3, r3
 800b918:	4a16      	ldr	r2, [pc, #88]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b922:	4b14      	ldr	r3, [pc, #80]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b924:	7a5b      	ldrb	r3, [r3, #9]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	461a      	mov	r2, r3
 800b92a:	4b12      	ldr	r3, [pc, #72]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b92c:	4413      	add	r3, r2
 800b92e:	79fa      	ldrb	r2, [r7, #7]
 800b930:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b932:	4b10      	ldr	r3, [pc, #64]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b934:	7a5b      	ldrb	r3, [r3, #9]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	b2d1      	uxtb	r1, r2
 800b93c:	4a0d      	ldr	r2, [pc, #52]	@ (800b974 <FATFS_LinkDriverEx+0x90>)
 800b93e:	7251      	strb	r1, [r2, #9]
 800b940:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b942:	7dbb      	ldrb	r3, [r7, #22]
 800b944:	3330      	adds	r3, #48	@ 0x30
 800b946:	b2da      	uxtb	r2, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	3301      	adds	r3, #1
 800b950:	223a      	movs	r2, #58	@ 0x3a
 800b952:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	3302      	adds	r3, #2
 800b958:	222f      	movs	r2, #47	@ 0x2f
 800b95a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	3303      	adds	r3, #3
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	371c      	adds	r7, #28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bc80      	pop	{r7}
 800b972:	4770      	bx	lr
 800b974:	20000664 	.word	0x20000664

0800b978 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b982:	2200      	movs	r2, #0
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff ffac 	bl	800b8e4 <FATFS_LinkDriverEx>
 800b98c:	4603      	mov	r3, r0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b99c:	2200      	movs	r2, #0
 800b99e:	4912      	ldr	r1, [pc, #72]	@ (800b9e8 <MX_USB_DEVICE_Init+0x50>)
 800b9a0:	4812      	ldr	r0, [pc, #72]	@ (800b9ec <MX_USB_DEVICE_Init+0x54>)
 800b9a2:	f7fe ff08 	bl	800a7b6 <USBD_Init>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b9ac:	f7f6 fd56 	bl	800245c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b9b0:	490f      	ldr	r1, [pc, #60]	@ (800b9f0 <MX_USB_DEVICE_Init+0x58>)
 800b9b2:	480e      	ldr	r0, [pc, #56]	@ (800b9ec <MX_USB_DEVICE_Init+0x54>)
 800b9b4:	f7fe ff2a 	bl	800a80c <USBD_RegisterClass>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b9be:	f7f6 fd4d 	bl	800245c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b9c2:	490c      	ldr	r1, [pc, #48]	@ (800b9f4 <MX_USB_DEVICE_Init+0x5c>)
 800b9c4:	4809      	ldr	r0, [pc, #36]	@ (800b9ec <MX_USB_DEVICE_Init+0x54>)
 800b9c6:	f7fe fe5b 	bl	800a680 <USBD_CDC_RegisterInterface>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b9d0:	f7f6 fd44 	bl	800245c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9d4:	4805      	ldr	r0, [pc, #20]	@ (800b9ec <MX_USB_DEVICE_Init+0x54>)
 800b9d6:	f7fe ff32 	bl	800a83e <USBD_Start>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b9e0:	f7f6 fd3c 	bl	800245c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9e4:	bf00      	nop
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000140 	.word	0x20000140
 800b9ec:	20000670 	.word	0x20000670
 800b9f0:	2000002c 	.word	0x2000002c
 800b9f4:	20000130 	.word	0x20000130

0800b9f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4905      	ldr	r1, [pc, #20]	@ (800ba14 <CDC_Init_FS+0x1c>)
 800ba00:	4805      	ldr	r0, [pc, #20]	@ (800ba18 <CDC_Init_FS+0x20>)
 800ba02:	f7fe fe53 	bl	800a6ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba06:	4905      	ldr	r1, [pc, #20]	@ (800ba1c <CDC_Init_FS+0x24>)
 800ba08:	4803      	ldr	r0, [pc, #12]	@ (800ba18 <CDC_Init_FS+0x20>)
 800ba0a:	f7fe fe68 	bl	800a6de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20000d34 	.word	0x20000d34
 800ba18:	20000670 	.word	0x20000670
 800ba1c:	20000934 	.word	0x20000934

0800ba20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr
	...

0800ba30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	2b23      	cmp	r3, #35	@ 0x23
 800ba44:	d84a      	bhi.n	800badc <CDC_Control_FS+0xac>
 800ba46:	a201      	add	r2, pc, #4	@ (adr r2, 800ba4c <CDC_Control_FS+0x1c>)
 800ba48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4c:	0800badd 	.word	0x0800badd
 800ba50:	0800badd 	.word	0x0800badd
 800ba54:	0800badd 	.word	0x0800badd
 800ba58:	0800badd 	.word	0x0800badd
 800ba5c:	0800badd 	.word	0x0800badd
 800ba60:	0800badd 	.word	0x0800badd
 800ba64:	0800badd 	.word	0x0800badd
 800ba68:	0800badd 	.word	0x0800badd
 800ba6c:	0800badd 	.word	0x0800badd
 800ba70:	0800badd 	.word	0x0800badd
 800ba74:	0800badd 	.word	0x0800badd
 800ba78:	0800badd 	.word	0x0800badd
 800ba7c:	0800badd 	.word	0x0800badd
 800ba80:	0800badd 	.word	0x0800badd
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	0800badd 	.word	0x0800badd
 800ba8c:	0800badd 	.word	0x0800badd
 800ba90:	0800badd 	.word	0x0800badd
 800ba94:	0800badd 	.word	0x0800badd
 800ba98:	0800badd 	.word	0x0800badd
 800ba9c:	0800badd 	.word	0x0800badd
 800baa0:	0800badd 	.word	0x0800badd
 800baa4:	0800badd 	.word	0x0800badd
 800baa8:	0800badd 	.word	0x0800badd
 800baac:	0800badd 	.word	0x0800badd
 800bab0:	0800badd 	.word	0x0800badd
 800bab4:	0800badd 	.word	0x0800badd
 800bab8:	0800badd 	.word	0x0800badd
 800babc:	0800badd 	.word	0x0800badd
 800bac0:	0800badd 	.word	0x0800badd
 800bac4:	0800badd 	.word	0x0800badd
 800bac8:	0800badd 	.word	0x0800badd
 800bacc:	0800badd 	.word	0x0800badd
 800bad0:	0800badd 	.word	0x0800badd
 800bad4:	0800badd 	.word	0x0800badd
 800bad8:	0800badd 	.word	0x0800badd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800badc:	bf00      	nop
  }

  return (USBD_OK);
 800bade:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bc80      	pop	{r7}
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop

0800baec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	4808      	ldr	r0, [pc, #32]	@ (800bb1c <CDC_Receive_FS+0x30>)
 800bafa:	f7fe fdf0 	bl	800a6de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bafe:	4807      	ldr	r0, [pc, #28]	@ (800bb1c <CDC_Receive_FS+0x30>)
 800bb00:	f7fe fe2f 	bl	800a762 <USBD_CDC_ReceivePacket>
  // Panggil fungsi callback di main.c
  CDC_On_Receive(Buf, *Len);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7f6 fb6a 	bl	80021e4 <CDC_On_Receive>
  return (USBD_OK);
 800bb10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20000670 	.word	0x20000670

0800bb20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bb30:	4b0d      	ldr	r3, [pc, #52]	@ (800bb68 <CDC_Transmit_FS+0x48>)
 800bb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <CDC_Transmit_FS+0x26>
  {
    return USBD_BUSY;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e00b      	b.n	800bb5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bb46:	887b      	ldrh	r3, [r7, #2]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	4806      	ldr	r0, [pc, #24]	@ (800bb68 <CDC_Transmit_FS+0x48>)
 800bb4e:	f7fe fdad 	bl	800a6ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bb52:	4805      	ldr	r0, [pc, #20]	@ (800bb68 <CDC_Transmit_FS+0x48>)
 800bb54:	f7fe fdd6 	bl	800a704 <USBD_CDC_TransmitPacket>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000670 	.word	0x20000670

0800bb6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	6039      	str	r1, [r7, #0]
 800bb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2212      	movs	r2, #18
 800bb7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb7e:	4b03      	ldr	r3, [pc, #12]	@ (800bb8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bc80      	pop	{r7}
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	2000015c 	.word	0x2000015c

0800bb90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	6039      	str	r1, [r7, #0]
 800bb9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2204      	movs	r2, #4
 800bba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bba2:	4b03      	ldr	r3, [pc, #12]	@ (800bbb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bc80      	pop	{r7}
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	20000170 	.word	0x20000170

0800bbb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6039      	str	r1, [r7, #0]
 800bbbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d105      	bne.n	800bbd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	4907      	ldr	r1, [pc, #28]	@ (800bbe8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bbca:	4808      	ldr	r0, [pc, #32]	@ (800bbec <USBD_FS_ProductStrDescriptor+0x38>)
 800bbcc:	f7ff fdad 	bl	800b72a <USBD_GetString>
 800bbd0:	e004      	b.n	800bbdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	4904      	ldr	r1, [pc, #16]	@ (800bbe8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bbd6:	4805      	ldr	r0, [pc, #20]	@ (800bbec <USBD_FS_ProductStrDescriptor+0x38>)
 800bbd8:	f7ff fda7 	bl	800b72a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbdc:	4b02      	ldr	r3, [pc, #8]	@ (800bbe8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20001134 	.word	0x20001134
 800bbec:	08011848 	.word	0x08011848

0800bbf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	6039      	str	r1, [r7, #0]
 800bbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	4904      	ldr	r1, [pc, #16]	@ (800bc10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc00:	4804      	ldr	r0, [pc, #16]	@ (800bc14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc02:	f7ff fd92 	bl	800b72a <USBD_GetString>
  return USBD_StrDesc;
 800bc06:	4b02      	ldr	r3, [pc, #8]	@ (800bc10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20001134 	.word	0x20001134
 800bc14:	08011860 	.word	0x08011860

0800bc18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	6039      	str	r1, [r7, #0]
 800bc22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	221a      	movs	r2, #26
 800bc28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc2a:	f000 f843 	bl	800bcb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc2e:	4b02      	ldr	r3, [pc, #8]	@ (800bc38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20000174 	.word	0x20000174

0800bc3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	6039      	str	r1, [r7, #0]
 800bc46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc48:	79fb      	ldrb	r3, [r7, #7]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d105      	bne.n	800bc5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	4907      	ldr	r1, [pc, #28]	@ (800bc70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc52:	4808      	ldr	r0, [pc, #32]	@ (800bc74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc54:	f7ff fd69 	bl	800b72a <USBD_GetString>
 800bc58:	e004      	b.n	800bc64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	4904      	ldr	r1, [pc, #16]	@ (800bc70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc5e:	4805      	ldr	r0, [pc, #20]	@ (800bc74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc60:	f7ff fd63 	bl	800b72a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc64:	4b02      	ldr	r3, [pc, #8]	@ (800bc70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20001134 	.word	0x20001134
 800bc74:	08011874 	.word	0x08011874

0800bc78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	6039      	str	r1, [r7, #0]
 800bc82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc84:	79fb      	ldrb	r3, [r7, #7]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	4907      	ldr	r1, [pc, #28]	@ (800bcac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc8e:	4808      	ldr	r0, [pc, #32]	@ (800bcb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc90:	f7ff fd4b 	bl	800b72a <USBD_GetString>
 800bc94:	e004      	b.n	800bca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	4904      	ldr	r1, [pc, #16]	@ (800bcac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc9a:	4805      	ldr	r0, [pc, #20]	@ (800bcb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc9c:	f7ff fd45 	bl	800b72a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bca0:	4b02      	ldr	r3, [pc, #8]	@ (800bcac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20001134 	.word	0x20001134
 800bcb0:	08011880 	.word	0x08011880

0800bcb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcba:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf8 <Get_SerialNum+0x44>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcfc <Get_SerialNum+0x48>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bcc6:	4b0e      	ldr	r3, [pc, #56]	@ (800bd00 <Get_SerialNum+0x4c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d009      	beq.n	800bcee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bcda:	2208      	movs	r2, #8
 800bcdc:	4909      	ldr	r1, [pc, #36]	@ (800bd04 <Get_SerialNum+0x50>)
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f814 	bl	800bd0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bce4:	2204      	movs	r2, #4
 800bce6:	4908      	ldr	r1, [pc, #32]	@ (800bd08 <Get_SerialNum+0x54>)
 800bce8:	68b8      	ldr	r0, [r7, #8]
 800bcea:	f000 f80f 	bl	800bd0c <IntToUnicode>
  }
}
 800bcee:	bf00      	nop
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	1ffff7e8 	.word	0x1ffff7e8
 800bcfc:	1ffff7ec 	.word	0x1ffff7ec
 800bd00:	1ffff7f0 	.word	0x1ffff7f0
 800bd04:	20000176 	.word	0x20000176
 800bd08:	20000186 	.word	0x20000186

0800bd0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	75fb      	strb	r3, [r7, #23]
 800bd22:	e027      	b.n	800bd74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	0f1b      	lsrs	r3, r3, #28
 800bd28:	2b09      	cmp	r3, #9
 800bd2a:	d80b      	bhi.n	800bd44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	0f1b      	lsrs	r3, r3, #28
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	4619      	mov	r1, r3
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	440b      	add	r3, r1
 800bd3c:	3230      	adds	r2, #48	@ 0x30
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	e00a      	b.n	800bd5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	0f1b      	lsrs	r3, r3, #28
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	4619      	mov	r1, r3
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	440b      	add	r3, r1
 800bd54:	3237      	adds	r2, #55	@ 0x37
 800bd56:	b2d2      	uxtb	r2, r2
 800bd58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	011b      	lsls	r3, r3, #4
 800bd5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	3301      	adds	r3, #1
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	4413      	add	r3, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
 800bd70:	3301      	adds	r3, #1
 800bd72:	75fb      	strb	r3, [r7, #23]
 800bd74:	7dfa      	ldrb	r2, [r7, #23]
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d3d3      	bcc.n	800bd24 <IntToUnicode+0x18>
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	371c      	adds	r7, #28
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bc80      	pop	{r7}
 800bd86:	4770      	bx	lr

0800bd88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a0d      	ldr	r2, [pc, #52]	@ (800bdcc <HAL_PCD_MspInit+0x44>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d113      	bne.n	800bdc2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd0 <HAL_PCD_MspInit+0x48>)
 800bd9c:	69db      	ldr	r3, [r3, #28]
 800bd9e:	4a0c      	ldr	r2, [pc, #48]	@ (800bdd0 <HAL_PCD_MspInit+0x48>)
 800bda0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bda4:	61d3      	str	r3, [r2, #28]
 800bda6:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd0 <HAL_PCD_MspInit+0x48>)
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	2014      	movs	r0, #20
 800bdb8:	f7f6 ffbd 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bdbc:	2014      	movs	r0, #20
 800bdbe:	f7f6 ffd6 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bdc2:	bf00      	nop
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	40005c00 	.word	0x40005c00
 800bdd0:	40021000 	.word	0x40021000

0800bdd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe fd6f 	bl	800a8ce <USBD_LL_SetupStage>
}
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800be0a:	78fa      	ldrb	r2, [r7, #3]
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	440b      	add	r3, r1
 800be18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	78fb      	ldrb	r3, [r7, #3]
 800be20:	4619      	mov	r1, r3
 800be22:	f7fe fda1 	bl	800a968 <USBD_LL_DataOutStage>
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	3324      	adds	r3, #36	@ 0x24
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	4619      	mov	r1, r3
 800be56:	f7fe fdf8 	bl	800aa4a <USBD_LL_DataInStage>
}
 800be5a:	bf00      	nop
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe ff08 	bl	800ac86 <USBD_LL_SOF>
}
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be86:	2301      	movs	r3, #1
 800be88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	799b      	ldrb	r3, [r3, #6]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d001      	beq.n	800be96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be92:	f7f6 fae3 	bl	800245c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be9c:	7bfa      	ldrb	r2, [r7, #15]
 800be9e:	4611      	mov	r1, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe feb8 	bl	800ac16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800beac:	4618      	mov	r0, r3
 800beae:	f7fe fe71 	bl	800ab94 <USBD_LL_Reset>
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe feb2 	bl	800ac34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7a9b      	ldrb	r3, [r3, #10]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bed8:	4b04      	ldr	r3, [pc, #16]	@ (800beec <HAL_PCD_SuspendCallback+0x30>)
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	4a03      	ldr	r2, [pc, #12]	@ (800beec <HAL_PCD_SuspendCallback+0x30>)
 800bede:	f043 0306 	orr.w	r3, r3, #6
 800bee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	e000ed00 	.word	0xe000ed00

0800bef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe feac 	bl	800ac5c <USBD_LL_Resume>
}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bf14:	4a28      	ldr	r2, [pc, #160]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a26      	ldr	r2, [pc, #152]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bf24:	4b24      	ldr	r3, [pc, #144]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf26:	4a25      	ldr	r2, [pc, #148]	@ (800bfbc <USBD_LL_Init+0xb0>)
 800bf28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf2a:	4b23      	ldr	r3, [pc, #140]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf2c:	2208      	movs	r2, #8
 800bf2e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf30:	4b21      	ldr	r3, [pc, #132]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf32:	2202      	movs	r2, #2
 800bf34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf36:	4b20      	ldr	r3, [pc, #128]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf3c:	4b1e      	ldr	r3, [pc, #120]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf42:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf48:	481b      	ldr	r0, [pc, #108]	@ (800bfb8 <USBD_LL_Init+0xac>)
 800bf4a:	f7f8 f815 	bl	8003f78 <HAL_PCD_Init>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bf54:	f7f6 fa82 	bl	800245c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf5e:	2318      	movs	r3, #24
 800bf60:	2200      	movs	r2, #0
 800bf62:	2100      	movs	r1, #0
 800bf64:	f7f9 fd26 	bl	80059b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf6e:	2358      	movs	r3, #88	@ 0x58
 800bf70:	2200      	movs	r2, #0
 800bf72:	2180      	movs	r1, #128	@ 0x80
 800bf74:	f7f9 fd1e 	bl	80059b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf7e:	23c0      	movs	r3, #192	@ 0xc0
 800bf80:	2200      	movs	r2, #0
 800bf82:	2181      	movs	r1, #129	@ 0x81
 800bf84:	f7f9 fd16 	bl	80059b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bf92:	2200      	movs	r2, #0
 800bf94:	2101      	movs	r1, #1
 800bf96:	f7f9 fd0d 	bl	80059b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bfa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2182      	movs	r1, #130	@ 0x82
 800bfa8:	f7f9 fd04 	bl	80059b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20001334 	.word	0x20001334
 800bfbc:	40005c00 	.word	0x40005c00

0800bfc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7f8 f8c4 	bl	8004164 <HAL_PCD_Start>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f94e 	bl	800c284 <USBD_Get_USB_Status>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	461a      	mov	r2, r3
 800c004:	4603      	mov	r3, r0
 800c006:	70fb      	strb	r3, [r7, #3]
 800c008:	460b      	mov	r3, r1
 800c00a:	70bb      	strb	r3, [r7, #2]
 800c00c:	4613      	mov	r3, r2
 800c00e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c01e:	78bb      	ldrb	r3, [r7, #2]
 800c020:	883a      	ldrh	r2, [r7, #0]
 800c022:	78f9      	ldrb	r1, [r7, #3]
 800c024:	f7f8 fa18 	bl	8004458 <HAL_PCD_EP_Open>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f928 	bl	800c284 <USBD_Get_USB_Status>
 800c034:	4603      	mov	r3, r0
 800c036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c038:	7bbb      	ldrb	r3, [r7, #14]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f7f8 fa56 	bl	8004512 <HAL_PCD_EP_Close>
 800c066:	4603      	mov	r3, r0
 800c068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 f909 	bl	800c284 <USBD_Get_USB_Status>
 800c072:	4603      	mov	r3, r0
 800c074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c076:	7bbb      	ldrb	r3, [r7, #14]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	4611      	mov	r1, r2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f8 fafe 	bl	80046a0 <HAL_PCD_EP_SetStall>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f8ea 	bl	800c284 <USBD_Get_USB_Status>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c0d8:	78fa      	ldrb	r2, [r7, #3]
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f8 fb3f 	bl	8004760 <HAL_PCD_EP_ClrStall>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f8cb 	bl	800c284 <USBD_Get_USB_Status>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c10e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c114:	2b00      	cmp	r3, #0
 800c116:	da0b      	bge.n	800c130 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c11e:	68f9      	ldr	r1, [r7, #12]
 800c120:	4613      	mov	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	440b      	add	r3, r1
 800c12a:	3312      	adds	r3, #18
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	e00b      	b.n	800c148 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	440b      	add	r3, r1
 800c142:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c146:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bc80      	pop	{r7}
 800c150:	4770      	bx	lr

0800c152 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c16c:	78fa      	ldrb	r2, [r7, #3]
 800c16e:	4611      	mov	r1, r2
 800c170:	4618      	mov	r0, r3
 800c172:	f7f8 f94d 	bl	8004410 <HAL_PCD_SetAddress>
 800c176:	4603      	mov	r3, r0
 800c178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 f881 	bl	800c284 <USBD_Get_USB_Status>
 800c182:	4603      	mov	r3, r0
 800c184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c186:	7bbb      	ldrb	r3, [r7, #14]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	607a      	str	r2, [r7, #4]
 800c19a:	461a      	mov	r2, r3
 800c19c:	460b      	mov	r3, r1
 800c19e:	72fb      	strb	r3, [r7, #11]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c1b2:	893b      	ldrh	r3, [r7, #8]
 800c1b4:	7af9      	ldrb	r1, [r7, #11]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	f7f8 fa3b 	bl	8004632 <HAL_PCD_EP_Transmit>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 f85e 	bl	800c284 <USBD_Get_USB_Status>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b086      	sub	sp, #24
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	72fb      	strb	r3, [r7, #11]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c1f8:	893b      	ldrh	r3, [r7, #8]
 800c1fa:	7af9      	ldrb	r1, [r7, #11]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	f7f8 f9d0 	bl	80045a2 <HAL_PCD_EP_Receive>
 800c202:	4603      	mov	r3, r0
 800c204:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 f83b 	bl	800c284 <USBD_Get_USB_Status>
 800c20e:	4603      	mov	r3, r0
 800c210:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c212:	7dbb      	ldrb	r3, [r7, #22]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c22e:	78fa      	ldrb	r2, [r7, #3]
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f7f8 f9e6 	bl	8004604 <HAL_PCD_EP_GetRxCount>
 800c238:	4603      	mov	r3, r0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c24c:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <USBD_static_malloc+0x14>)
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	bc80      	pop	{r7}
 800c256:	4770      	bx	lr
 800c258:	2000160c 	.word	0x2000160c

0800c25c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]

}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	bc80      	pop	{r7}
 800c26c:	4770      	bx	lr

0800c26e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26e:	b480      	push	{r7}
 800c270:	b083      	sub	sp, #12
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c27a:	bf00      	nop
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	bc80      	pop	{r7}
 800c282:	4770      	bx	lr

0800c284 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	2b03      	cmp	r3, #3
 800c296:	d817      	bhi.n	800c2c8 <USBD_Get_USB_Status+0x44>
 800c298:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a0 <USBD_Get_USB_Status+0x1c>)
 800c29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29e:	bf00      	nop
 800c2a0:	0800c2b1 	.word	0x0800c2b1
 800c2a4:	0800c2b7 	.word	0x0800c2b7
 800c2a8:	0800c2bd 	.word	0x0800c2bd
 800c2ac:	0800c2c3 	.word	0x0800c2c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b4:	e00b      	b.n	800c2ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2b6:	2302      	movs	r3, #2
 800c2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ba:	e008      	b.n	800c2ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c0:	e005      	b.n	800c2ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c6:	e002      	b.n	800c2ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c2cc:	bf00      	nop
  }
  return usb_status;
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bc80      	pop	{r7}
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop

0800c2dc <__cvt>:
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e2:	461d      	mov	r5, r3
 800c2e4:	bfbb      	ittet	lt
 800c2e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800c2ea:	461d      	movlt	r5, r3
 800c2ec:	2300      	movge	r3, #0
 800c2ee:	232d      	movlt	r3, #45	@ 0x2d
 800c2f0:	b088      	sub	sp, #32
 800c2f2:	4614      	mov	r4, r2
 800c2f4:	bfb8      	it	lt
 800c2f6:	4614      	movlt	r4, r2
 800c2f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c2fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c2fc:	7013      	strb	r3, [r2, #0]
 800c2fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c300:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c304:	f023 0820 	bic.w	r8, r3, #32
 800c308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c30c:	d005      	beq.n	800c31a <__cvt+0x3e>
 800c30e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c312:	d100      	bne.n	800c316 <__cvt+0x3a>
 800c314:	3601      	adds	r6, #1
 800c316:	2302      	movs	r3, #2
 800c318:	e000      	b.n	800c31c <__cvt+0x40>
 800c31a:	2303      	movs	r3, #3
 800c31c:	aa07      	add	r2, sp, #28
 800c31e:	9204      	str	r2, [sp, #16]
 800c320:	aa06      	add	r2, sp, #24
 800c322:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c326:	e9cd 3600 	strd	r3, r6, [sp]
 800c32a:	4622      	mov	r2, r4
 800c32c:	462b      	mov	r3, r5
 800c32e:	f001 f8f7 	bl	800d520 <_dtoa_r>
 800c332:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c336:	4607      	mov	r7, r0
 800c338:	d119      	bne.n	800c36e <__cvt+0x92>
 800c33a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c33c:	07db      	lsls	r3, r3, #31
 800c33e:	d50e      	bpl.n	800c35e <__cvt+0x82>
 800c340:	eb00 0906 	add.w	r9, r0, r6
 800c344:	2200      	movs	r2, #0
 800c346:	2300      	movs	r3, #0
 800c348:	4620      	mov	r0, r4
 800c34a:	4629      	mov	r1, r5
 800c34c:	f7f4 fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 800c350:	b108      	cbz	r0, 800c356 <__cvt+0x7a>
 800c352:	f8cd 901c 	str.w	r9, [sp, #28]
 800c356:	2230      	movs	r2, #48	@ 0x30
 800c358:	9b07      	ldr	r3, [sp, #28]
 800c35a:	454b      	cmp	r3, r9
 800c35c:	d31e      	bcc.n	800c39c <__cvt+0xc0>
 800c35e:	4638      	mov	r0, r7
 800c360:	9b07      	ldr	r3, [sp, #28]
 800c362:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c364:	1bdb      	subs	r3, r3, r7
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	b008      	add	sp, #32
 800c36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c372:	eb00 0906 	add.w	r9, r0, r6
 800c376:	d1e5      	bne.n	800c344 <__cvt+0x68>
 800c378:	7803      	ldrb	r3, [r0, #0]
 800c37a:	2b30      	cmp	r3, #48	@ 0x30
 800c37c:	d10a      	bne.n	800c394 <__cvt+0xb8>
 800c37e:	2200      	movs	r2, #0
 800c380:	2300      	movs	r3, #0
 800c382:	4620      	mov	r0, r4
 800c384:	4629      	mov	r1, r5
 800c386:	f7f4 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800c38a:	b918      	cbnz	r0, 800c394 <__cvt+0xb8>
 800c38c:	f1c6 0601 	rsb	r6, r6, #1
 800c390:	f8ca 6000 	str.w	r6, [sl]
 800c394:	f8da 3000 	ldr.w	r3, [sl]
 800c398:	4499      	add	r9, r3
 800c39a:	e7d3      	b.n	800c344 <__cvt+0x68>
 800c39c:	1c59      	adds	r1, r3, #1
 800c39e:	9107      	str	r1, [sp, #28]
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	e7d9      	b.n	800c358 <__cvt+0x7c>

0800c3a4 <__exponent>:
 800c3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3a6:	2900      	cmp	r1, #0
 800c3a8:	bfb6      	itet	lt
 800c3aa:	232d      	movlt	r3, #45	@ 0x2d
 800c3ac:	232b      	movge	r3, #43	@ 0x2b
 800c3ae:	4249      	neglt	r1, r1
 800c3b0:	2909      	cmp	r1, #9
 800c3b2:	7002      	strb	r2, [r0, #0]
 800c3b4:	7043      	strb	r3, [r0, #1]
 800c3b6:	dd29      	ble.n	800c40c <__exponent+0x68>
 800c3b8:	f10d 0307 	add.w	r3, sp, #7
 800c3bc:	461d      	mov	r5, r3
 800c3be:	270a      	movs	r7, #10
 800c3c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	fb07 1416 	mls	r4, r7, r6, r1
 800c3ca:	3430      	adds	r4, #48	@ 0x30
 800c3cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	2c63      	cmp	r4, #99	@ 0x63
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3da:	dcf1      	bgt.n	800c3c0 <__exponent+0x1c>
 800c3dc:	3130      	adds	r1, #48	@ 0x30
 800c3de:	1e94      	subs	r4, r2, #2
 800c3e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c3e4:	4623      	mov	r3, r4
 800c3e6:	1c41      	adds	r1, r0, #1
 800c3e8:	42ab      	cmp	r3, r5
 800c3ea:	d30a      	bcc.n	800c402 <__exponent+0x5e>
 800c3ec:	f10d 0309 	add.w	r3, sp, #9
 800c3f0:	1a9b      	subs	r3, r3, r2
 800c3f2:	42ac      	cmp	r4, r5
 800c3f4:	bf88      	it	hi
 800c3f6:	2300      	movhi	r3, #0
 800c3f8:	3302      	adds	r3, #2
 800c3fa:	4403      	add	r3, r0
 800c3fc:	1a18      	subs	r0, r3, r0
 800c3fe:	b003      	add	sp, #12
 800c400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c402:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c406:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c40a:	e7ed      	b.n	800c3e8 <__exponent+0x44>
 800c40c:	2330      	movs	r3, #48	@ 0x30
 800c40e:	3130      	adds	r1, #48	@ 0x30
 800c410:	7083      	strb	r3, [r0, #2]
 800c412:	70c1      	strb	r1, [r0, #3]
 800c414:	1d03      	adds	r3, r0, #4
 800c416:	e7f1      	b.n	800c3fc <__exponent+0x58>

0800c418 <_printf_float>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	b091      	sub	sp, #68	@ 0x44
 800c41e:	460c      	mov	r4, r1
 800c420:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800c424:	4616      	mov	r6, r2
 800c426:	461f      	mov	r7, r3
 800c428:	4605      	mov	r5, r0
 800c42a:	f000 ff67 	bl	800d2fc <_localeconv_r>
 800c42e:	6803      	ldr	r3, [r0, #0]
 800c430:	4618      	mov	r0, r3
 800c432:	9308      	str	r3, [sp, #32]
 800c434:	f7f3 fe8c 	bl	8000150 <strlen>
 800c438:	2300      	movs	r3, #0
 800c43a:	930e      	str	r3, [sp, #56]	@ 0x38
 800c43c:	f8d8 3000 	ldr.w	r3, [r8]
 800c440:	9009      	str	r0, [sp, #36]	@ 0x24
 800c442:	3307      	adds	r3, #7
 800c444:	f023 0307 	bic.w	r3, r3, #7
 800c448:	f103 0208 	add.w	r2, r3, #8
 800c44c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c450:	f8d4 b000 	ldr.w	fp, [r4]
 800c454:	f8c8 2000 	str.w	r2, [r8]
 800c458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c45c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c462:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c466:	f04f 32ff 	mov.w	r2, #4294967295
 800c46a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c46e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c472:	4b9c      	ldr	r3, [pc, #624]	@ (800c6e4 <_printf_float+0x2cc>)
 800c474:	f7f4 faca 	bl	8000a0c <__aeabi_dcmpun>
 800c478:	bb70      	cbnz	r0, 800c4d8 <_printf_float+0xc0>
 800c47a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c47e:	f04f 32ff 	mov.w	r2, #4294967295
 800c482:	4b98      	ldr	r3, [pc, #608]	@ (800c6e4 <_printf_float+0x2cc>)
 800c484:	f7f4 faa4 	bl	80009d0 <__aeabi_dcmple>
 800c488:	bb30      	cbnz	r0, 800c4d8 <_printf_float+0xc0>
 800c48a:	2200      	movs	r2, #0
 800c48c:	2300      	movs	r3, #0
 800c48e:	4640      	mov	r0, r8
 800c490:	4649      	mov	r1, r9
 800c492:	f7f4 fa93 	bl	80009bc <__aeabi_dcmplt>
 800c496:	b110      	cbz	r0, 800c49e <_printf_float+0x86>
 800c498:	232d      	movs	r3, #45	@ 0x2d
 800c49a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c49e:	4a92      	ldr	r2, [pc, #584]	@ (800c6e8 <_printf_float+0x2d0>)
 800c4a0:	4b92      	ldr	r3, [pc, #584]	@ (800c6ec <_printf_float+0x2d4>)
 800c4a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c4a6:	bf8c      	ite	hi
 800c4a8:	4690      	movhi	r8, r2
 800c4aa:	4698      	movls	r8, r3
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	f04f 0900 	mov.w	r9, #0
 800c4b2:	6123      	str	r3, [r4, #16]
 800c4b4:	f02b 0304 	bic.w	r3, fp, #4
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	4633      	mov	r3, r6
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4628      	mov	r0, r5
 800c4c0:	9700      	str	r7, [sp, #0]
 800c4c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c4c4:	f000 f9d4 	bl	800c870 <_printf_common>
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	f040 8090 	bne.w	800c5ee <_printf_float+0x1d6>
 800c4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d2:	b011      	add	sp, #68	@ 0x44
 800c4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d8:	4642      	mov	r2, r8
 800c4da:	464b      	mov	r3, r9
 800c4dc:	4640      	mov	r0, r8
 800c4de:	4649      	mov	r1, r9
 800c4e0:	f7f4 fa94 	bl	8000a0c <__aeabi_dcmpun>
 800c4e4:	b148      	cbz	r0, 800c4fa <_printf_float+0xe2>
 800c4e6:	464b      	mov	r3, r9
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	bfb8      	it	lt
 800c4ec:	232d      	movlt	r3, #45	@ 0x2d
 800c4ee:	4a80      	ldr	r2, [pc, #512]	@ (800c6f0 <_printf_float+0x2d8>)
 800c4f0:	bfb8      	it	lt
 800c4f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c4f6:	4b7f      	ldr	r3, [pc, #508]	@ (800c6f4 <_printf_float+0x2dc>)
 800c4f8:	e7d3      	b.n	800c4a2 <_printf_float+0x8a>
 800c4fa:	6863      	ldr	r3, [r4, #4]
 800c4fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	d13f      	bne.n	800c584 <_printf_float+0x16c>
 800c504:	2306      	movs	r3, #6
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	9206      	str	r2, [sp, #24]
 800c512:	aa0e      	add	r2, sp, #56	@ 0x38
 800c514:	e9cd a204 	strd	sl, r2, [sp, #16]
 800c518:	aa0d      	add	r2, sp, #52	@ 0x34
 800c51a:	9203      	str	r2, [sp, #12]
 800c51c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800c520:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c524:	6863      	ldr	r3, [r4, #4]
 800c526:	4642      	mov	r2, r8
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	4628      	mov	r0, r5
 800c52c:	464b      	mov	r3, r9
 800c52e:	910a      	str	r1, [sp, #40]	@ 0x28
 800c530:	f7ff fed4 	bl	800c2dc <__cvt>
 800c534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c536:	4680      	mov	r8, r0
 800c538:	2947      	cmp	r1, #71	@ 0x47
 800c53a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c53c:	d128      	bne.n	800c590 <_printf_float+0x178>
 800c53e:	1cc8      	adds	r0, r1, #3
 800c540:	db02      	blt.n	800c548 <_printf_float+0x130>
 800c542:	6863      	ldr	r3, [r4, #4]
 800c544:	4299      	cmp	r1, r3
 800c546:	dd40      	ble.n	800c5ca <_printf_float+0x1b2>
 800c548:	f1aa 0a02 	sub.w	sl, sl, #2
 800c54c:	fa5f fa8a 	uxtb.w	sl, sl
 800c550:	4652      	mov	r2, sl
 800c552:	3901      	subs	r1, #1
 800c554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c558:	910d      	str	r1, [sp, #52]	@ 0x34
 800c55a:	f7ff ff23 	bl	800c3a4 <__exponent>
 800c55e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c560:	4681      	mov	r9, r0
 800c562:	1813      	adds	r3, r2, r0
 800c564:	2a01      	cmp	r2, #1
 800c566:	6123      	str	r3, [r4, #16]
 800c568:	dc02      	bgt.n	800c570 <_printf_float+0x158>
 800c56a:	6822      	ldr	r2, [r4, #0]
 800c56c:	07d2      	lsls	r2, r2, #31
 800c56e:	d501      	bpl.n	800c574 <_printf_float+0x15c>
 800c570:	3301      	adds	r3, #1
 800c572:	6123      	str	r3, [r4, #16]
 800c574:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d09e      	beq.n	800c4ba <_printf_float+0xa2>
 800c57c:	232d      	movs	r3, #45	@ 0x2d
 800c57e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c582:	e79a      	b.n	800c4ba <_printf_float+0xa2>
 800c584:	2947      	cmp	r1, #71	@ 0x47
 800c586:	d1bf      	bne.n	800c508 <_printf_float+0xf0>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1bd      	bne.n	800c508 <_printf_float+0xf0>
 800c58c:	2301      	movs	r3, #1
 800c58e:	e7ba      	b.n	800c506 <_printf_float+0xee>
 800c590:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c594:	d9dc      	bls.n	800c550 <_printf_float+0x138>
 800c596:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c59a:	d118      	bne.n	800c5ce <_printf_float+0x1b6>
 800c59c:	2900      	cmp	r1, #0
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	dd0b      	ble.n	800c5ba <_printf_float+0x1a2>
 800c5a2:	6121      	str	r1, [r4, #16]
 800c5a4:	b913      	cbnz	r3, 800c5ac <_printf_float+0x194>
 800c5a6:	6822      	ldr	r2, [r4, #0]
 800c5a8:	07d0      	lsls	r0, r2, #31
 800c5aa:	d502      	bpl.n	800c5b2 <_printf_float+0x19a>
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	440b      	add	r3, r1
 800c5b0:	6123      	str	r3, [r4, #16]
 800c5b2:	f04f 0900 	mov.w	r9, #0
 800c5b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c5b8:	e7dc      	b.n	800c574 <_printf_float+0x15c>
 800c5ba:	b913      	cbnz	r3, 800c5c2 <_printf_float+0x1aa>
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	07d2      	lsls	r2, r2, #31
 800c5c0:	d501      	bpl.n	800c5c6 <_printf_float+0x1ae>
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	e7f4      	b.n	800c5b0 <_printf_float+0x198>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7f2      	b.n	800c5b0 <_printf_float+0x198>
 800c5ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	db05      	blt.n	800c5e0 <_printf_float+0x1c8>
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	6121      	str	r1, [r4, #16]
 800c5d8:	07d8      	lsls	r0, r3, #31
 800c5da:	d5ea      	bpl.n	800c5b2 <_printf_float+0x19a>
 800c5dc:	1c4b      	adds	r3, r1, #1
 800c5de:	e7e7      	b.n	800c5b0 <_printf_float+0x198>
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	bfcc      	ite	gt
 800c5e4:	2201      	movgt	r2, #1
 800c5e6:	f1c1 0202 	rsble	r2, r1, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	e7e0      	b.n	800c5b0 <_printf_float+0x198>
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	055a      	lsls	r2, r3, #21
 800c5f2:	d407      	bmi.n	800c604 <_printf_float+0x1ec>
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	d12b      	bne.n	800c65a <_printf_float+0x242>
 800c602:	e764      	b.n	800c4ce <_printf_float+0xb6>
 800c604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c608:	f240 80dc 	bls.w	800c7c4 <_printf_float+0x3ac>
 800c60c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c610:	2200      	movs	r2, #0
 800c612:	2300      	movs	r3, #0
 800c614:	f7f4 f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d033      	beq.n	800c684 <_printf_float+0x26c>
 800c61c:	2301      	movs	r3, #1
 800c61e:	4631      	mov	r1, r6
 800c620:	4628      	mov	r0, r5
 800c622:	4a35      	ldr	r2, [pc, #212]	@ (800c6f8 <_printf_float+0x2e0>)
 800c624:	47b8      	blx	r7
 800c626:	3001      	adds	r0, #1
 800c628:	f43f af51 	beq.w	800c4ce <_printf_float+0xb6>
 800c62c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800c630:	4543      	cmp	r3, r8
 800c632:	db02      	blt.n	800c63a <_printf_float+0x222>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	07d8      	lsls	r0, r3, #31
 800c638:	d50f      	bpl.n	800c65a <_printf_float+0x242>
 800c63a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c63e:	4631      	mov	r1, r6
 800c640:	4628      	mov	r0, r5
 800c642:	47b8      	blx	r7
 800c644:	3001      	adds	r0, #1
 800c646:	f43f af42 	beq.w	800c4ce <_printf_float+0xb6>
 800c64a:	f04f 0900 	mov.w	r9, #0
 800c64e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c652:	f104 0a1a 	add.w	sl, r4, #26
 800c656:	45c8      	cmp	r8, r9
 800c658:	dc09      	bgt.n	800c66e <_printf_float+0x256>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	079b      	lsls	r3, r3, #30
 800c65e:	f100 8102 	bmi.w	800c866 <_printf_float+0x44e>
 800c662:	68e0      	ldr	r0, [r4, #12]
 800c664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c666:	4298      	cmp	r0, r3
 800c668:	bfb8      	it	lt
 800c66a:	4618      	movlt	r0, r3
 800c66c:	e731      	b.n	800c4d2 <_printf_float+0xba>
 800c66e:	2301      	movs	r3, #1
 800c670:	4652      	mov	r2, sl
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f af28 	beq.w	800c4ce <_printf_float+0xb6>
 800c67e:	f109 0901 	add.w	r9, r9, #1
 800c682:	e7e8      	b.n	800c656 <_printf_float+0x23e>
 800c684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c686:	2b00      	cmp	r3, #0
 800c688:	dc38      	bgt.n	800c6fc <_printf_float+0x2e4>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	4a19      	ldr	r2, [pc, #100]	@ (800c6f8 <_printf_float+0x2e0>)
 800c692:	47b8      	blx	r7
 800c694:	3001      	adds	r0, #1
 800c696:	f43f af1a 	beq.w	800c4ce <_printf_float+0xb6>
 800c69a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800c69e:	ea59 0303 	orrs.w	r3, r9, r3
 800c6a2:	d102      	bne.n	800c6aa <_printf_float+0x292>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	07d9      	lsls	r1, r3, #31
 800c6a8:	d5d7      	bpl.n	800c65a <_printf_float+0x242>
 800c6aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	f43f af0a 	beq.w	800c4ce <_printf_float+0xb6>
 800c6ba:	f04f 0a00 	mov.w	sl, #0
 800c6be:	f104 0b1a 	add.w	fp, r4, #26
 800c6c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6c4:	425b      	negs	r3, r3
 800c6c6:	4553      	cmp	r3, sl
 800c6c8:	dc01      	bgt.n	800c6ce <_printf_float+0x2b6>
 800c6ca:	464b      	mov	r3, r9
 800c6cc:	e793      	b.n	800c5f6 <_printf_float+0x1de>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	465a      	mov	r2, fp
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	f43f aef8 	beq.w	800c4ce <_printf_float+0xb6>
 800c6de:	f10a 0a01 	add.w	sl, sl, #1
 800c6e2:	e7ee      	b.n	800c6c2 <_printf_float+0x2aa>
 800c6e4:	7fefffff 	.word	0x7fefffff
 800c6e8:	080118de 	.word	0x080118de
 800c6ec:	080118da 	.word	0x080118da
 800c6f0:	080118e6 	.word	0x080118e6
 800c6f4:	080118e2 	.word	0x080118e2
 800c6f8:	08011a20 	.word	0x08011a20
 800c6fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c6fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c702:	4553      	cmp	r3, sl
 800c704:	bfa8      	it	ge
 800c706:	4653      	movge	r3, sl
 800c708:	2b00      	cmp	r3, #0
 800c70a:	4699      	mov	r9, r3
 800c70c:	dc36      	bgt.n	800c77c <_printf_float+0x364>
 800c70e:	f04f 0b00 	mov.w	fp, #0
 800c712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c716:	f104 021a 	add.w	r2, r4, #26
 800c71a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c71c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c71e:	eba3 0309 	sub.w	r3, r3, r9
 800c722:	455b      	cmp	r3, fp
 800c724:	dc31      	bgt.n	800c78a <_printf_float+0x372>
 800c726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c728:	459a      	cmp	sl, r3
 800c72a:	dc3a      	bgt.n	800c7a2 <_printf_float+0x38a>
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	07da      	lsls	r2, r3, #31
 800c730:	d437      	bmi.n	800c7a2 <_printf_float+0x38a>
 800c732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c734:	ebaa 0903 	sub.w	r9, sl, r3
 800c738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c73a:	ebaa 0303 	sub.w	r3, sl, r3
 800c73e:	4599      	cmp	r9, r3
 800c740:	bfa8      	it	ge
 800c742:	4699      	movge	r9, r3
 800c744:	f1b9 0f00 	cmp.w	r9, #0
 800c748:	dc33      	bgt.n	800c7b2 <_printf_float+0x39a>
 800c74a:	f04f 0800 	mov.w	r8, #0
 800c74e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c752:	f104 0b1a 	add.w	fp, r4, #26
 800c756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c758:	ebaa 0303 	sub.w	r3, sl, r3
 800c75c:	eba3 0309 	sub.w	r3, r3, r9
 800c760:	4543      	cmp	r3, r8
 800c762:	f77f af7a 	ble.w	800c65a <_printf_float+0x242>
 800c766:	2301      	movs	r3, #1
 800c768:	465a      	mov	r2, fp
 800c76a:	4631      	mov	r1, r6
 800c76c:	4628      	mov	r0, r5
 800c76e:	47b8      	blx	r7
 800c770:	3001      	adds	r0, #1
 800c772:	f43f aeac 	beq.w	800c4ce <_printf_float+0xb6>
 800c776:	f108 0801 	add.w	r8, r8, #1
 800c77a:	e7ec      	b.n	800c756 <_printf_float+0x33e>
 800c77c:	4642      	mov	r2, r8
 800c77e:	4631      	mov	r1, r6
 800c780:	4628      	mov	r0, r5
 800c782:	47b8      	blx	r7
 800c784:	3001      	adds	r0, #1
 800c786:	d1c2      	bne.n	800c70e <_printf_float+0x2f6>
 800c788:	e6a1      	b.n	800c4ce <_printf_float+0xb6>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4631      	mov	r1, r6
 800c78e:	4628      	mov	r0, r5
 800c790:	920a      	str	r2, [sp, #40]	@ 0x28
 800c792:	47b8      	blx	r7
 800c794:	3001      	adds	r0, #1
 800c796:	f43f ae9a 	beq.w	800c4ce <_printf_float+0xb6>
 800c79a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c79c:	f10b 0b01 	add.w	fp, fp, #1
 800c7a0:	e7bb      	b.n	800c71a <_printf_float+0x302>
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b8      	blx	r7
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d1c0      	bne.n	800c732 <_printf_float+0x31a>
 800c7b0:	e68d      	b.n	800c4ce <_printf_float+0xb6>
 800c7b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	4442      	add	r2, r8
 800c7bc:	47b8      	blx	r7
 800c7be:	3001      	adds	r0, #1
 800c7c0:	d1c3      	bne.n	800c74a <_printf_float+0x332>
 800c7c2:	e684      	b.n	800c4ce <_printf_float+0xb6>
 800c7c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c7c8:	f1ba 0f01 	cmp.w	sl, #1
 800c7cc:	dc01      	bgt.n	800c7d2 <_printf_float+0x3ba>
 800c7ce:	07db      	lsls	r3, r3, #31
 800c7d0:	d536      	bpl.n	800c840 <_printf_float+0x428>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4628      	mov	r0, r5
 800c7da:	47b8      	blx	r7
 800c7dc:	3001      	adds	r0, #1
 800c7de:	f43f ae76 	beq.w	800c4ce <_printf_float+0xb6>
 800c7e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	47b8      	blx	r7
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	f43f ae6e 	beq.w	800c4ce <_printf_float+0xb6>
 800c7f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7fe:	f7f4 f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 800c802:	b9c0      	cbnz	r0, 800c836 <_printf_float+0x41e>
 800c804:	4653      	mov	r3, sl
 800c806:	f108 0201 	add.w	r2, r8, #1
 800c80a:	4631      	mov	r1, r6
 800c80c:	4628      	mov	r0, r5
 800c80e:	47b8      	blx	r7
 800c810:	3001      	adds	r0, #1
 800c812:	d10c      	bne.n	800c82e <_printf_float+0x416>
 800c814:	e65b      	b.n	800c4ce <_printf_float+0xb6>
 800c816:	2301      	movs	r3, #1
 800c818:	465a      	mov	r2, fp
 800c81a:	4631      	mov	r1, r6
 800c81c:	4628      	mov	r0, r5
 800c81e:	47b8      	blx	r7
 800c820:	3001      	adds	r0, #1
 800c822:	f43f ae54 	beq.w	800c4ce <_printf_float+0xb6>
 800c826:	f108 0801 	add.w	r8, r8, #1
 800c82a:	45d0      	cmp	r8, sl
 800c82c:	dbf3      	blt.n	800c816 <_printf_float+0x3fe>
 800c82e:	464b      	mov	r3, r9
 800c830:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c834:	e6e0      	b.n	800c5f8 <_printf_float+0x1e0>
 800c836:	f04f 0800 	mov.w	r8, #0
 800c83a:	f104 0b1a 	add.w	fp, r4, #26
 800c83e:	e7f4      	b.n	800c82a <_printf_float+0x412>
 800c840:	2301      	movs	r3, #1
 800c842:	4642      	mov	r2, r8
 800c844:	e7e1      	b.n	800c80a <_printf_float+0x3f2>
 800c846:	2301      	movs	r3, #1
 800c848:	464a      	mov	r2, r9
 800c84a:	4631      	mov	r1, r6
 800c84c:	4628      	mov	r0, r5
 800c84e:	47b8      	blx	r7
 800c850:	3001      	adds	r0, #1
 800c852:	f43f ae3c 	beq.w	800c4ce <_printf_float+0xb6>
 800c856:	f108 0801 	add.w	r8, r8, #1
 800c85a:	68e3      	ldr	r3, [r4, #12]
 800c85c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c85e:	1a5b      	subs	r3, r3, r1
 800c860:	4543      	cmp	r3, r8
 800c862:	dcf0      	bgt.n	800c846 <_printf_float+0x42e>
 800c864:	e6fd      	b.n	800c662 <_printf_float+0x24a>
 800c866:	f04f 0800 	mov.w	r8, #0
 800c86a:	f104 0919 	add.w	r9, r4, #25
 800c86e:	e7f4      	b.n	800c85a <_printf_float+0x442>

0800c870 <_printf_common>:
 800c870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c874:	4616      	mov	r6, r2
 800c876:	4698      	mov	r8, r3
 800c878:	688a      	ldr	r2, [r1, #8]
 800c87a:	690b      	ldr	r3, [r1, #16]
 800c87c:	4607      	mov	r7, r0
 800c87e:	4293      	cmp	r3, r2
 800c880:	bfb8      	it	lt
 800c882:	4613      	movlt	r3, r2
 800c884:	6033      	str	r3, [r6, #0]
 800c886:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c88a:	460c      	mov	r4, r1
 800c88c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c890:	b10a      	cbz	r2, 800c896 <_printf_common+0x26>
 800c892:	3301      	adds	r3, #1
 800c894:	6033      	str	r3, [r6, #0]
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	0699      	lsls	r1, r3, #26
 800c89a:	bf42      	ittt	mi
 800c89c:	6833      	ldrmi	r3, [r6, #0]
 800c89e:	3302      	addmi	r3, #2
 800c8a0:	6033      	strmi	r3, [r6, #0]
 800c8a2:	6825      	ldr	r5, [r4, #0]
 800c8a4:	f015 0506 	ands.w	r5, r5, #6
 800c8a8:	d106      	bne.n	800c8b8 <_printf_common+0x48>
 800c8aa:	f104 0a19 	add.w	sl, r4, #25
 800c8ae:	68e3      	ldr	r3, [r4, #12]
 800c8b0:	6832      	ldr	r2, [r6, #0]
 800c8b2:	1a9b      	subs	r3, r3, r2
 800c8b4:	42ab      	cmp	r3, r5
 800c8b6:	dc2b      	bgt.n	800c910 <_printf_common+0xa0>
 800c8b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8bc:	6822      	ldr	r2, [r4, #0]
 800c8be:	3b00      	subs	r3, #0
 800c8c0:	bf18      	it	ne
 800c8c2:	2301      	movne	r3, #1
 800c8c4:	0692      	lsls	r2, r2, #26
 800c8c6:	d430      	bmi.n	800c92a <_printf_common+0xba>
 800c8c8:	4641      	mov	r1, r8
 800c8ca:	4638      	mov	r0, r7
 800c8cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8d0:	47c8      	blx	r9
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d023      	beq.n	800c91e <_printf_common+0xae>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	6922      	ldr	r2, [r4, #16]
 800c8da:	f003 0306 	and.w	r3, r3, #6
 800c8de:	2b04      	cmp	r3, #4
 800c8e0:	bf14      	ite	ne
 800c8e2:	2500      	movne	r5, #0
 800c8e4:	6833      	ldreq	r3, [r6, #0]
 800c8e6:	f04f 0600 	mov.w	r6, #0
 800c8ea:	bf08      	it	eq
 800c8ec:	68e5      	ldreq	r5, [r4, #12]
 800c8ee:	f104 041a 	add.w	r4, r4, #26
 800c8f2:	bf08      	it	eq
 800c8f4:	1aed      	subeq	r5, r5, r3
 800c8f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c8fa:	bf08      	it	eq
 800c8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c900:	4293      	cmp	r3, r2
 800c902:	bfc4      	itt	gt
 800c904:	1a9b      	subgt	r3, r3, r2
 800c906:	18ed      	addgt	r5, r5, r3
 800c908:	42b5      	cmp	r5, r6
 800c90a:	d11a      	bne.n	800c942 <_printf_common+0xd2>
 800c90c:	2000      	movs	r0, #0
 800c90e:	e008      	b.n	800c922 <_printf_common+0xb2>
 800c910:	2301      	movs	r3, #1
 800c912:	4652      	mov	r2, sl
 800c914:	4641      	mov	r1, r8
 800c916:	4638      	mov	r0, r7
 800c918:	47c8      	blx	r9
 800c91a:	3001      	adds	r0, #1
 800c91c:	d103      	bne.n	800c926 <_printf_common+0xb6>
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c926:	3501      	adds	r5, #1
 800c928:	e7c1      	b.n	800c8ae <_printf_common+0x3e>
 800c92a:	2030      	movs	r0, #48	@ 0x30
 800c92c:	18e1      	adds	r1, r4, r3
 800c92e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c938:	4422      	add	r2, r4
 800c93a:	3302      	adds	r3, #2
 800c93c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c940:	e7c2      	b.n	800c8c8 <_printf_common+0x58>
 800c942:	2301      	movs	r3, #1
 800c944:	4622      	mov	r2, r4
 800c946:	4641      	mov	r1, r8
 800c948:	4638      	mov	r0, r7
 800c94a:	47c8      	blx	r9
 800c94c:	3001      	adds	r0, #1
 800c94e:	d0e6      	beq.n	800c91e <_printf_common+0xae>
 800c950:	3601      	adds	r6, #1
 800c952:	e7d9      	b.n	800c908 <_printf_common+0x98>

0800c954 <_printf_i>:
 800c954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	7e0f      	ldrb	r7, [r1, #24]
 800c95a:	4691      	mov	r9, r2
 800c95c:	2f78      	cmp	r7, #120	@ 0x78
 800c95e:	4680      	mov	r8, r0
 800c960:	460c      	mov	r4, r1
 800c962:	469a      	mov	sl, r3
 800c964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c96a:	d807      	bhi.n	800c97c <_printf_i+0x28>
 800c96c:	2f62      	cmp	r7, #98	@ 0x62
 800c96e:	d80a      	bhi.n	800c986 <_printf_i+0x32>
 800c970:	2f00      	cmp	r7, #0
 800c972:	f000 80d1 	beq.w	800cb18 <_printf_i+0x1c4>
 800c976:	2f58      	cmp	r7, #88	@ 0x58
 800c978:	f000 80b8 	beq.w	800caec <_printf_i+0x198>
 800c97c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c984:	e03a      	b.n	800c9fc <_printf_i+0xa8>
 800c986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c98a:	2b15      	cmp	r3, #21
 800c98c:	d8f6      	bhi.n	800c97c <_printf_i+0x28>
 800c98e:	a101      	add	r1, pc, #4	@ (adr r1, 800c994 <_printf_i+0x40>)
 800c990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c994:	0800c9ed 	.word	0x0800c9ed
 800c998:	0800ca01 	.word	0x0800ca01
 800c99c:	0800c97d 	.word	0x0800c97d
 800c9a0:	0800c97d 	.word	0x0800c97d
 800c9a4:	0800c97d 	.word	0x0800c97d
 800c9a8:	0800c97d 	.word	0x0800c97d
 800c9ac:	0800ca01 	.word	0x0800ca01
 800c9b0:	0800c97d 	.word	0x0800c97d
 800c9b4:	0800c97d 	.word	0x0800c97d
 800c9b8:	0800c97d 	.word	0x0800c97d
 800c9bc:	0800c97d 	.word	0x0800c97d
 800c9c0:	0800caff 	.word	0x0800caff
 800c9c4:	0800ca2b 	.word	0x0800ca2b
 800c9c8:	0800cab9 	.word	0x0800cab9
 800c9cc:	0800c97d 	.word	0x0800c97d
 800c9d0:	0800c97d 	.word	0x0800c97d
 800c9d4:	0800cb21 	.word	0x0800cb21
 800c9d8:	0800c97d 	.word	0x0800c97d
 800c9dc:	0800ca2b 	.word	0x0800ca2b
 800c9e0:	0800c97d 	.word	0x0800c97d
 800c9e4:	0800c97d 	.word	0x0800c97d
 800c9e8:	0800cac1 	.word	0x0800cac1
 800c9ec:	6833      	ldr	r3, [r6, #0]
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	6032      	str	r2, [r6, #0]
 800c9f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e09c      	b.n	800cb3a <_printf_i+0x1e6>
 800ca00:	6833      	ldr	r3, [r6, #0]
 800ca02:	6820      	ldr	r0, [r4, #0]
 800ca04:	1d19      	adds	r1, r3, #4
 800ca06:	6031      	str	r1, [r6, #0]
 800ca08:	0606      	lsls	r6, r0, #24
 800ca0a:	d501      	bpl.n	800ca10 <_printf_i+0xbc>
 800ca0c:	681d      	ldr	r5, [r3, #0]
 800ca0e:	e003      	b.n	800ca18 <_printf_i+0xc4>
 800ca10:	0645      	lsls	r5, r0, #25
 800ca12:	d5fb      	bpl.n	800ca0c <_printf_i+0xb8>
 800ca14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	da03      	bge.n	800ca24 <_printf_i+0xd0>
 800ca1c:	232d      	movs	r3, #45	@ 0x2d
 800ca1e:	426d      	negs	r5, r5
 800ca20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca24:	230a      	movs	r3, #10
 800ca26:	4858      	ldr	r0, [pc, #352]	@ (800cb88 <_printf_i+0x234>)
 800ca28:	e011      	b.n	800ca4e <_printf_i+0xfa>
 800ca2a:	6821      	ldr	r1, [r4, #0]
 800ca2c:	6833      	ldr	r3, [r6, #0]
 800ca2e:	0608      	lsls	r0, r1, #24
 800ca30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca34:	d402      	bmi.n	800ca3c <_printf_i+0xe8>
 800ca36:	0649      	lsls	r1, r1, #25
 800ca38:	bf48      	it	mi
 800ca3a:	b2ad      	uxthmi	r5, r5
 800ca3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca3e:	6033      	str	r3, [r6, #0]
 800ca40:	bf14      	ite	ne
 800ca42:	230a      	movne	r3, #10
 800ca44:	2308      	moveq	r3, #8
 800ca46:	4850      	ldr	r0, [pc, #320]	@ (800cb88 <_printf_i+0x234>)
 800ca48:	2100      	movs	r1, #0
 800ca4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca4e:	6866      	ldr	r6, [r4, #4]
 800ca50:	2e00      	cmp	r6, #0
 800ca52:	60a6      	str	r6, [r4, #8]
 800ca54:	db05      	blt.n	800ca62 <_printf_i+0x10e>
 800ca56:	6821      	ldr	r1, [r4, #0]
 800ca58:	432e      	orrs	r6, r5
 800ca5a:	f021 0104 	bic.w	r1, r1, #4
 800ca5e:	6021      	str	r1, [r4, #0]
 800ca60:	d04b      	beq.n	800cafa <_printf_i+0x1a6>
 800ca62:	4616      	mov	r6, r2
 800ca64:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca68:	fb03 5711 	mls	r7, r3, r1, r5
 800ca6c:	5dc7      	ldrb	r7, [r0, r7]
 800ca6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca72:	462f      	mov	r7, r5
 800ca74:	42bb      	cmp	r3, r7
 800ca76:	460d      	mov	r5, r1
 800ca78:	d9f4      	bls.n	800ca64 <_printf_i+0x110>
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d10b      	bne.n	800ca96 <_printf_i+0x142>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	07df      	lsls	r7, r3, #31
 800ca82:	d508      	bpl.n	800ca96 <_printf_i+0x142>
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	6861      	ldr	r1, [r4, #4]
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	bfde      	ittt	le
 800ca8c:	2330      	movle	r3, #48	@ 0x30
 800ca8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca96:	1b92      	subs	r2, r2, r6
 800ca98:	6122      	str	r2, [r4, #16]
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	4640      	mov	r0, r8
 800caa0:	f8cd a000 	str.w	sl, [sp]
 800caa4:	aa03      	add	r2, sp, #12
 800caa6:	f7ff fee3 	bl	800c870 <_printf_common>
 800caaa:	3001      	adds	r0, #1
 800caac:	d14a      	bne.n	800cb44 <_printf_i+0x1f0>
 800caae:	f04f 30ff 	mov.w	r0, #4294967295
 800cab2:	b004      	add	sp, #16
 800cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	f043 0320 	orr.w	r3, r3, #32
 800cabe:	6023      	str	r3, [r4, #0]
 800cac0:	2778      	movs	r7, #120	@ 0x78
 800cac2:	4832      	ldr	r0, [pc, #200]	@ (800cb8c <_printf_i+0x238>)
 800cac4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	6831      	ldr	r1, [r6, #0]
 800cacc:	061f      	lsls	r7, r3, #24
 800cace:	f851 5b04 	ldr.w	r5, [r1], #4
 800cad2:	d402      	bmi.n	800cada <_printf_i+0x186>
 800cad4:	065f      	lsls	r7, r3, #25
 800cad6:	bf48      	it	mi
 800cad8:	b2ad      	uxthmi	r5, r5
 800cada:	6031      	str	r1, [r6, #0]
 800cadc:	07d9      	lsls	r1, r3, #31
 800cade:	bf44      	itt	mi
 800cae0:	f043 0320 	orrmi.w	r3, r3, #32
 800cae4:	6023      	strmi	r3, [r4, #0]
 800cae6:	b11d      	cbz	r5, 800caf0 <_printf_i+0x19c>
 800cae8:	2310      	movs	r3, #16
 800caea:	e7ad      	b.n	800ca48 <_printf_i+0xf4>
 800caec:	4826      	ldr	r0, [pc, #152]	@ (800cb88 <_printf_i+0x234>)
 800caee:	e7e9      	b.n	800cac4 <_printf_i+0x170>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	f023 0320 	bic.w	r3, r3, #32
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	e7f6      	b.n	800cae8 <_printf_i+0x194>
 800cafa:	4616      	mov	r6, r2
 800cafc:	e7bd      	b.n	800ca7a <_printf_i+0x126>
 800cafe:	6833      	ldr	r3, [r6, #0]
 800cb00:	6825      	ldr	r5, [r4, #0]
 800cb02:	1d18      	adds	r0, r3, #4
 800cb04:	6961      	ldr	r1, [r4, #20]
 800cb06:	6030      	str	r0, [r6, #0]
 800cb08:	062e      	lsls	r6, r5, #24
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	d501      	bpl.n	800cb12 <_printf_i+0x1be>
 800cb0e:	6019      	str	r1, [r3, #0]
 800cb10:	e002      	b.n	800cb18 <_printf_i+0x1c4>
 800cb12:	0668      	lsls	r0, r5, #25
 800cb14:	d5fb      	bpl.n	800cb0e <_printf_i+0x1ba>
 800cb16:	8019      	strh	r1, [r3, #0]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4616      	mov	r6, r2
 800cb1c:	6123      	str	r3, [r4, #16]
 800cb1e:	e7bc      	b.n	800ca9a <_printf_i+0x146>
 800cb20:	6833      	ldr	r3, [r6, #0]
 800cb22:	2100      	movs	r1, #0
 800cb24:	1d1a      	adds	r2, r3, #4
 800cb26:	6032      	str	r2, [r6, #0]
 800cb28:	681e      	ldr	r6, [r3, #0]
 800cb2a:	6862      	ldr	r2, [r4, #4]
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f000 fc5c 	bl	800d3ea <memchr>
 800cb32:	b108      	cbz	r0, 800cb38 <_printf_i+0x1e4>
 800cb34:	1b80      	subs	r0, r0, r6
 800cb36:	6060      	str	r0, [r4, #4]
 800cb38:	6863      	ldr	r3, [r4, #4]
 800cb3a:	6123      	str	r3, [r4, #16]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb42:	e7aa      	b.n	800ca9a <_printf_i+0x146>
 800cb44:	4632      	mov	r2, r6
 800cb46:	4649      	mov	r1, r9
 800cb48:	4640      	mov	r0, r8
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	47d0      	blx	sl
 800cb4e:	3001      	adds	r0, #1
 800cb50:	d0ad      	beq.n	800caae <_printf_i+0x15a>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	079b      	lsls	r3, r3, #30
 800cb56:	d413      	bmi.n	800cb80 <_printf_i+0x22c>
 800cb58:	68e0      	ldr	r0, [r4, #12]
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	4298      	cmp	r0, r3
 800cb5e:	bfb8      	it	lt
 800cb60:	4618      	movlt	r0, r3
 800cb62:	e7a6      	b.n	800cab2 <_printf_i+0x15e>
 800cb64:	2301      	movs	r3, #1
 800cb66:	4632      	mov	r2, r6
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	47d0      	blx	sl
 800cb6e:	3001      	adds	r0, #1
 800cb70:	d09d      	beq.n	800caae <_printf_i+0x15a>
 800cb72:	3501      	adds	r5, #1
 800cb74:	68e3      	ldr	r3, [r4, #12]
 800cb76:	9903      	ldr	r1, [sp, #12]
 800cb78:	1a5b      	subs	r3, r3, r1
 800cb7a:	42ab      	cmp	r3, r5
 800cb7c:	dcf2      	bgt.n	800cb64 <_printf_i+0x210>
 800cb7e:	e7eb      	b.n	800cb58 <_printf_i+0x204>
 800cb80:	2500      	movs	r5, #0
 800cb82:	f104 0619 	add.w	r6, r4, #25
 800cb86:	e7f5      	b.n	800cb74 <_printf_i+0x220>
 800cb88:	080118ea 	.word	0x080118ea
 800cb8c:	080118fb 	.word	0x080118fb

0800cb90 <_scanf_float>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	b087      	sub	sp, #28
 800cb96:	9303      	str	r3, [sp, #12]
 800cb98:	688b      	ldr	r3, [r1, #8]
 800cb9a:	4691      	mov	r9, r2
 800cb9c:	1e5a      	subs	r2, r3, #1
 800cb9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cba2:	bf82      	ittt	hi
 800cba4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cba8:	eb03 0b05 	addhi.w	fp, r3, r5
 800cbac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cbb0:	460a      	mov	r2, r1
 800cbb2:	f04f 0500 	mov.w	r5, #0
 800cbb6:	bf88      	it	hi
 800cbb8:	608b      	strhi	r3, [r1, #8]
 800cbba:	680b      	ldr	r3, [r1, #0]
 800cbbc:	4680      	mov	r8, r0
 800cbbe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cbc2:	f842 3b1c 	str.w	r3, [r2], #28
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	bf98      	it	ls
 800cbca:	f04f 0b00 	movls.w	fp, #0
 800cbce:	4616      	mov	r6, r2
 800cbd0:	46aa      	mov	sl, r5
 800cbd2:	462f      	mov	r7, r5
 800cbd4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cbd8:	9201      	str	r2, [sp, #4]
 800cbda:	9502      	str	r5, [sp, #8]
 800cbdc:	68a2      	ldr	r2, [r4, #8]
 800cbde:	b15a      	cbz	r2, 800cbf8 <_scanf_float+0x68>
 800cbe0:	f8d9 3000 	ldr.w	r3, [r9]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	2b4e      	cmp	r3, #78	@ 0x4e
 800cbe8:	d862      	bhi.n	800ccb0 <_scanf_float+0x120>
 800cbea:	2b40      	cmp	r3, #64	@ 0x40
 800cbec:	d83a      	bhi.n	800cc64 <_scanf_float+0xd4>
 800cbee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cbf2:	b2c8      	uxtb	r0, r1
 800cbf4:	280e      	cmp	r0, #14
 800cbf6:	d938      	bls.n	800cc6a <_scanf_float+0xda>
 800cbf8:	b11f      	cbz	r7, 800cc02 <_scanf_float+0x72>
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc06:	f1ba 0f01 	cmp.w	sl, #1
 800cc0a:	f200 8114 	bhi.w	800ce36 <_scanf_float+0x2a6>
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	429e      	cmp	r6, r3
 800cc12:	f200 8105 	bhi.w	800ce20 <_scanf_float+0x290>
 800cc16:	2001      	movs	r0, #1
 800cc18:	b007      	add	sp, #28
 800cc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cc22:	2a0d      	cmp	r2, #13
 800cc24:	d8e8      	bhi.n	800cbf8 <_scanf_float+0x68>
 800cc26:	a101      	add	r1, pc, #4	@ (adr r1, 800cc2c <_scanf_float+0x9c>)
 800cc28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc2c:	0800cd75 	.word	0x0800cd75
 800cc30:	0800cbf9 	.word	0x0800cbf9
 800cc34:	0800cbf9 	.word	0x0800cbf9
 800cc38:	0800cbf9 	.word	0x0800cbf9
 800cc3c:	0800cdd1 	.word	0x0800cdd1
 800cc40:	0800cdab 	.word	0x0800cdab
 800cc44:	0800cbf9 	.word	0x0800cbf9
 800cc48:	0800cbf9 	.word	0x0800cbf9
 800cc4c:	0800cd83 	.word	0x0800cd83
 800cc50:	0800cbf9 	.word	0x0800cbf9
 800cc54:	0800cbf9 	.word	0x0800cbf9
 800cc58:	0800cbf9 	.word	0x0800cbf9
 800cc5c:	0800cbf9 	.word	0x0800cbf9
 800cc60:	0800cd3f 	.word	0x0800cd3f
 800cc64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cc68:	e7db      	b.n	800cc22 <_scanf_float+0x92>
 800cc6a:	290e      	cmp	r1, #14
 800cc6c:	d8c4      	bhi.n	800cbf8 <_scanf_float+0x68>
 800cc6e:	a001      	add	r0, pc, #4	@ (adr r0, 800cc74 <_scanf_float+0xe4>)
 800cc70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc74:	0800cd2f 	.word	0x0800cd2f
 800cc78:	0800cbf9 	.word	0x0800cbf9
 800cc7c:	0800cd2f 	.word	0x0800cd2f
 800cc80:	0800cdbf 	.word	0x0800cdbf
 800cc84:	0800cbf9 	.word	0x0800cbf9
 800cc88:	0800ccd1 	.word	0x0800ccd1
 800cc8c:	0800cd15 	.word	0x0800cd15
 800cc90:	0800cd15 	.word	0x0800cd15
 800cc94:	0800cd15 	.word	0x0800cd15
 800cc98:	0800cd15 	.word	0x0800cd15
 800cc9c:	0800cd15 	.word	0x0800cd15
 800cca0:	0800cd15 	.word	0x0800cd15
 800cca4:	0800cd15 	.word	0x0800cd15
 800cca8:	0800cd15 	.word	0x0800cd15
 800ccac:	0800cd15 	.word	0x0800cd15
 800ccb0:	2b6e      	cmp	r3, #110	@ 0x6e
 800ccb2:	d809      	bhi.n	800ccc8 <_scanf_float+0x138>
 800ccb4:	2b60      	cmp	r3, #96	@ 0x60
 800ccb6:	d8b2      	bhi.n	800cc1e <_scanf_float+0x8e>
 800ccb8:	2b54      	cmp	r3, #84	@ 0x54
 800ccba:	d07b      	beq.n	800cdb4 <_scanf_float+0x224>
 800ccbc:	2b59      	cmp	r3, #89	@ 0x59
 800ccbe:	d19b      	bne.n	800cbf8 <_scanf_float+0x68>
 800ccc0:	2d07      	cmp	r5, #7
 800ccc2:	d199      	bne.n	800cbf8 <_scanf_float+0x68>
 800ccc4:	2508      	movs	r5, #8
 800ccc6:	e02f      	b.n	800cd28 <_scanf_float+0x198>
 800ccc8:	2b74      	cmp	r3, #116	@ 0x74
 800ccca:	d073      	beq.n	800cdb4 <_scanf_float+0x224>
 800cccc:	2b79      	cmp	r3, #121	@ 0x79
 800ccce:	e7f6      	b.n	800ccbe <_scanf_float+0x12e>
 800ccd0:	6821      	ldr	r1, [r4, #0]
 800ccd2:	05c8      	lsls	r0, r1, #23
 800ccd4:	d51e      	bpl.n	800cd14 <_scanf_float+0x184>
 800ccd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ccda:	6021      	str	r1, [r4, #0]
 800ccdc:	3701      	adds	r7, #1
 800ccde:	f1bb 0f00 	cmp.w	fp, #0
 800cce2:	d003      	beq.n	800ccec <_scanf_float+0x15c>
 800cce4:	3201      	adds	r2, #1
 800cce6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccea:	60a2      	str	r2, [r4, #8]
 800ccec:	68a3      	ldr	r3, [r4, #8]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	60a3      	str	r3, [r4, #8]
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f8c9 3004 	str.w	r3, [r9, #4]
 800cd04:	f340 8083 	ble.w	800ce0e <_scanf_float+0x27e>
 800cd08:	f8d9 3000 	ldr.w	r3, [r9]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	f8c9 3000 	str.w	r3, [r9]
 800cd12:	e763      	b.n	800cbdc <_scanf_float+0x4c>
 800cd14:	eb1a 0105 	adds.w	r1, sl, r5
 800cd18:	f47f af6e 	bne.w	800cbf8 <_scanf_float+0x68>
 800cd1c:	460d      	mov	r5, r1
 800cd1e:	468a      	mov	sl, r1
 800cd20:	6822      	ldr	r2, [r4, #0]
 800cd22:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cd26:	6022      	str	r2, [r4, #0]
 800cd28:	f806 3b01 	strb.w	r3, [r6], #1
 800cd2c:	e7de      	b.n	800ccec <_scanf_float+0x15c>
 800cd2e:	6822      	ldr	r2, [r4, #0]
 800cd30:	0610      	lsls	r0, r2, #24
 800cd32:	f57f af61 	bpl.w	800cbf8 <_scanf_float+0x68>
 800cd36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd3a:	6022      	str	r2, [r4, #0]
 800cd3c:	e7f4      	b.n	800cd28 <_scanf_float+0x198>
 800cd3e:	f1ba 0f00 	cmp.w	sl, #0
 800cd42:	d10c      	bne.n	800cd5e <_scanf_float+0x1ce>
 800cd44:	b977      	cbnz	r7, 800cd64 <_scanf_float+0x1d4>
 800cd46:	6822      	ldr	r2, [r4, #0]
 800cd48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd50:	d108      	bne.n	800cd64 <_scanf_float+0x1d4>
 800cd52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd56:	f04f 0a01 	mov.w	sl, #1
 800cd5a:	6022      	str	r2, [r4, #0]
 800cd5c:	e7e4      	b.n	800cd28 <_scanf_float+0x198>
 800cd5e:	f1ba 0f02 	cmp.w	sl, #2
 800cd62:	d051      	beq.n	800ce08 <_scanf_float+0x278>
 800cd64:	2d01      	cmp	r5, #1
 800cd66:	d002      	beq.n	800cd6e <_scanf_float+0x1de>
 800cd68:	2d04      	cmp	r5, #4
 800cd6a:	f47f af45 	bne.w	800cbf8 <_scanf_float+0x68>
 800cd6e:	3501      	adds	r5, #1
 800cd70:	b2ed      	uxtb	r5, r5
 800cd72:	e7d9      	b.n	800cd28 <_scanf_float+0x198>
 800cd74:	f1ba 0f01 	cmp.w	sl, #1
 800cd78:	f47f af3e 	bne.w	800cbf8 <_scanf_float+0x68>
 800cd7c:	f04f 0a02 	mov.w	sl, #2
 800cd80:	e7d2      	b.n	800cd28 <_scanf_float+0x198>
 800cd82:	b975      	cbnz	r5, 800cda2 <_scanf_float+0x212>
 800cd84:	2f00      	cmp	r7, #0
 800cd86:	f47f af38 	bne.w	800cbfa <_scanf_float+0x6a>
 800cd8a:	6822      	ldr	r2, [r4, #0]
 800cd8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd94:	f040 80ff 	bne.w	800cf96 <_scanf_float+0x406>
 800cd98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd9c:	2501      	movs	r5, #1
 800cd9e:	6022      	str	r2, [r4, #0]
 800cda0:	e7c2      	b.n	800cd28 <_scanf_float+0x198>
 800cda2:	2d03      	cmp	r5, #3
 800cda4:	d0e3      	beq.n	800cd6e <_scanf_float+0x1de>
 800cda6:	2d05      	cmp	r5, #5
 800cda8:	e7df      	b.n	800cd6a <_scanf_float+0x1da>
 800cdaa:	2d02      	cmp	r5, #2
 800cdac:	f47f af24 	bne.w	800cbf8 <_scanf_float+0x68>
 800cdb0:	2503      	movs	r5, #3
 800cdb2:	e7b9      	b.n	800cd28 <_scanf_float+0x198>
 800cdb4:	2d06      	cmp	r5, #6
 800cdb6:	f47f af1f 	bne.w	800cbf8 <_scanf_float+0x68>
 800cdba:	2507      	movs	r5, #7
 800cdbc:	e7b4      	b.n	800cd28 <_scanf_float+0x198>
 800cdbe:	6822      	ldr	r2, [r4, #0]
 800cdc0:	0591      	lsls	r1, r2, #22
 800cdc2:	f57f af19 	bpl.w	800cbf8 <_scanf_float+0x68>
 800cdc6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cdca:	6022      	str	r2, [r4, #0]
 800cdcc:	9702      	str	r7, [sp, #8]
 800cdce:	e7ab      	b.n	800cd28 <_scanf_float+0x198>
 800cdd0:	6822      	ldr	r2, [r4, #0]
 800cdd2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cdd6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cdda:	d005      	beq.n	800cde8 <_scanf_float+0x258>
 800cddc:	0550      	lsls	r0, r2, #21
 800cdde:	f57f af0b 	bpl.w	800cbf8 <_scanf_float+0x68>
 800cde2:	2f00      	cmp	r7, #0
 800cde4:	f000 80d7 	beq.w	800cf96 <_scanf_float+0x406>
 800cde8:	0591      	lsls	r1, r2, #22
 800cdea:	bf58      	it	pl
 800cdec:	9902      	ldrpl	r1, [sp, #8]
 800cdee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cdf2:	bf58      	it	pl
 800cdf4:	1a79      	subpl	r1, r7, r1
 800cdf6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cdfa:	f04f 0700 	mov.w	r7, #0
 800cdfe:	bf58      	it	pl
 800ce00:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce04:	6022      	str	r2, [r4, #0]
 800ce06:	e78f      	b.n	800cd28 <_scanf_float+0x198>
 800ce08:	f04f 0a03 	mov.w	sl, #3
 800ce0c:	e78c      	b.n	800cd28 <_scanf_float+0x198>
 800ce0e:	4649      	mov	r1, r9
 800ce10:	4640      	mov	r0, r8
 800ce12:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ce16:	4798      	blx	r3
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f43f aedf 	beq.w	800cbdc <_scanf_float+0x4c>
 800ce1e:	e6eb      	b.n	800cbf8 <_scanf_float+0x68>
 800ce20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce24:	464a      	mov	r2, r9
 800ce26:	4640      	mov	r0, r8
 800ce28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce2c:	4798      	blx	r3
 800ce2e:	6923      	ldr	r3, [r4, #16]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	6123      	str	r3, [r4, #16]
 800ce34:	e6eb      	b.n	800cc0e <_scanf_float+0x7e>
 800ce36:	1e6b      	subs	r3, r5, #1
 800ce38:	2b06      	cmp	r3, #6
 800ce3a:	d824      	bhi.n	800ce86 <_scanf_float+0x2f6>
 800ce3c:	2d02      	cmp	r5, #2
 800ce3e:	d836      	bhi.n	800ceae <_scanf_float+0x31e>
 800ce40:	9b01      	ldr	r3, [sp, #4]
 800ce42:	429e      	cmp	r6, r3
 800ce44:	f67f aee7 	bls.w	800cc16 <_scanf_float+0x86>
 800ce48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce4c:	464a      	mov	r2, r9
 800ce4e:	4640      	mov	r0, r8
 800ce50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce54:	4798      	blx	r3
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	e7f0      	b.n	800ce40 <_scanf_float+0x2b0>
 800ce5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce62:	464a      	mov	r2, r9
 800ce64:	4640      	mov	r0, r8
 800ce66:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ce6a:	4798      	blx	r3
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	3b01      	subs	r3, #1
 800ce70:	6123      	str	r3, [r4, #16]
 800ce72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce76:	fa5f fa8a 	uxtb.w	sl, sl
 800ce7a:	f1ba 0f02 	cmp.w	sl, #2
 800ce7e:	d1ee      	bne.n	800ce5e <_scanf_float+0x2ce>
 800ce80:	3d03      	subs	r5, #3
 800ce82:	b2ed      	uxtb	r5, r5
 800ce84:	1b76      	subs	r6, r6, r5
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	05da      	lsls	r2, r3, #23
 800ce8a:	d530      	bpl.n	800ceee <_scanf_float+0x35e>
 800ce8c:	055b      	lsls	r3, r3, #21
 800ce8e:	d511      	bpl.n	800ceb4 <_scanf_float+0x324>
 800ce90:	9b01      	ldr	r3, [sp, #4]
 800ce92:	429e      	cmp	r6, r3
 800ce94:	f67f aebf 	bls.w	800cc16 <_scanf_float+0x86>
 800ce98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce9c:	464a      	mov	r2, r9
 800ce9e:	4640      	mov	r0, r8
 800cea0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cea4:	4798      	blx	r3
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	6123      	str	r3, [r4, #16]
 800ceac:	e7f0      	b.n	800ce90 <_scanf_float+0x300>
 800ceae:	46aa      	mov	sl, r5
 800ceb0:	46b3      	mov	fp, r6
 800ceb2:	e7de      	b.n	800ce72 <_scanf_float+0x2e2>
 800ceb4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	2965      	cmp	r1, #101	@ 0x65
 800cebc:	f103 33ff 	add.w	r3, r3, #4294967295
 800cec0:	f106 35ff 	add.w	r5, r6, #4294967295
 800cec4:	6123      	str	r3, [r4, #16]
 800cec6:	d00c      	beq.n	800cee2 <_scanf_float+0x352>
 800cec8:	2945      	cmp	r1, #69	@ 0x45
 800ceca:	d00a      	beq.n	800cee2 <_scanf_float+0x352>
 800cecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ced0:	464a      	mov	r2, r9
 800ced2:	4640      	mov	r0, r8
 800ced4:	4798      	blx	r3
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cedc:	3b01      	subs	r3, #1
 800cede:	1eb5      	subs	r5, r6, #2
 800cee0:	6123      	str	r3, [r4, #16]
 800cee2:	464a      	mov	r2, r9
 800cee4:	4640      	mov	r0, r8
 800cee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ceea:	4798      	blx	r3
 800ceec:	462e      	mov	r6, r5
 800ceee:	6822      	ldr	r2, [r4, #0]
 800cef0:	f012 0210 	ands.w	r2, r2, #16
 800cef4:	d001      	beq.n	800cefa <_scanf_float+0x36a>
 800cef6:	2000      	movs	r0, #0
 800cef8:	e68e      	b.n	800cc18 <_scanf_float+0x88>
 800cefa:	7032      	strb	r2, [r6, #0]
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cf02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf06:	d125      	bne.n	800cf54 <_scanf_float+0x3c4>
 800cf08:	9b02      	ldr	r3, [sp, #8]
 800cf0a:	429f      	cmp	r7, r3
 800cf0c:	d00a      	beq.n	800cf24 <_scanf_float+0x394>
 800cf0e:	1bda      	subs	r2, r3, r7
 800cf10:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cf14:	429e      	cmp	r6, r3
 800cf16:	bf28      	it	cs
 800cf18:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	491f      	ldr	r1, [pc, #124]	@ (800cf9c <_scanf_float+0x40c>)
 800cf20:	f000 f902 	bl	800d128 <siprintf>
 800cf24:	2200      	movs	r2, #0
 800cf26:	4640      	mov	r0, r8
 800cf28:	9901      	ldr	r1, [sp, #4]
 800cf2a:	f002 fc65 	bl	800f7f8 <_strtod_r>
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	6825      	ldr	r5, [r4, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f015 0f02 	tst.w	r5, #2
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	f103 0204 	add.w	r2, r3, #4
 800cf40:	d015      	beq.n	800cf6e <_scanf_float+0x3de>
 800cf42:	9903      	ldr	r1, [sp, #12]
 800cf44:	600a      	str	r2, [r1, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	e9c3 6700 	strd	r6, r7, [r3]
 800cf4c:	68e3      	ldr	r3, [r4, #12]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	60e3      	str	r3, [r4, #12]
 800cf52:	e7d0      	b.n	800cef6 <_scanf_float+0x366>
 800cf54:	9b04      	ldr	r3, [sp, #16]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d0e4      	beq.n	800cf24 <_scanf_float+0x394>
 800cf5a:	9905      	ldr	r1, [sp, #20]
 800cf5c:	230a      	movs	r3, #10
 800cf5e:	4640      	mov	r0, r8
 800cf60:	3101      	adds	r1, #1
 800cf62:	f002 fcc9 	bl	800f8f8 <_strtol_r>
 800cf66:	9b04      	ldr	r3, [sp, #16]
 800cf68:	9e05      	ldr	r6, [sp, #20]
 800cf6a:	1ac2      	subs	r2, r0, r3
 800cf6c:	e7d0      	b.n	800cf10 <_scanf_float+0x380>
 800cf6e:	076d      	lsls	r5, r5, #29
 800cf70:	d4e7      	bmi.n	800cf42 <_scanf_float+0x3b2>
 800cf72:	9d03      	ldr	r5, [sp, #12]
 800cf74:	602a      	str	r2, [r5, #0]
 800cf76:	681d      	ldr	r5, [r3, #0]
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	f7f3 fd46 	bl	8000a0c <__aeabi_dcmpun>
 800cf80:	b120      	cbz	r0, 800cf8c <_scanf_float+0x3fc>
 800cf82:	4807      	ldr	r0, [pc, #28]	@ (800cfa0 <_scanf_float+0x410>)
 800cf84:	f000 fa40 	bl	800d408 <nanf>
 800cf88:	6028      	str	r0, [r5, #0]
 800cf8a:	e7df      	b.n	800cf4c <_scanf_float+0x3bc>
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fd9a 	bl	8000ac8 <__aeabi_d2f>
 800cf94:	e7f8      	b.n	800cf88 <_scanf_float+0x3f8>
 800cf96:	2700      	movs	r7, #0
 800cf98:	e633      	b.n	800cc02 <_scanf_float+0x72>
 800cf9a:	bf00      	nop
 800cf9c:	0801190c 	.word	0x0801190c
 800cfa0:	08011a68 	.word	0x08011a68

0800cfa4 <std>:
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	b510      	push	{r4, lr}
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	e9c0 3300 	strd	r3, r3, [r0]
 800cfae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfb2:	6083      	str	r3, [r0, #8]
 800cfb4:	8181      	strh	r1, [r0, #12]
 800cfb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800cfb8:	81c2      	strh	r2, [r0, #14]
 800cfba:	6183      	str	r3, [r0, #24]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	2208      	movs	r2, #8
 800cfc0:	305c      	adds	r0, #92	@ 0x5c
 800cfc2:	f000 f981 	bl	800d2c8 <memset>
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800cffc <std+0x58>)
 800cfc8:	6224      	str	r4, [r4, #32]
 800cfca:	6263      	str	r3, [r4, #36]	@ 0x24
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	@ (800d000 <std+0x5c>)
 800cfce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800d004 <std+0x60>)
 800cfd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800d008 <std+0x64>)
 800cfd6:	6323      	str	r3, [r4, #48]	@ 0x30
 800cfd8:	4b0c      	ldr	r3, [pc, #48]	@ (800d00c <std+0x68>)
 800cfda:	429c      	cmp	r4, r3
 800cfdc:	d006      	beq.n	800cfec <std+0x48>
 800cfde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cfe2:	4294      	cmp	r4, r2
 800cfe4:	d002      	beq.n	800cfec <std+0x48>
 800cfe6:	33d0      	adds	r3, #208	@ 0xd0
 800cfe8:	429c      	cmp	r4, r3
 800cfea:	d105      	bne.n	800cff8 <std+0x54>
 800cfec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff4:	f000 b9f6 	b.w	800d3e4 <__retarget_lock_init_recursive>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	bf00      	nop
 800cffc:	0800d1c5 	.word	0x0800d1c5
 800d000:	0800d1eb 	.word	0x0800d1eb
 800d004:	0800d223 	.word	0x0800d223
 800d008:	0800d247 	.word	0x0800d247
 800d00c:	2000182c 	.word	0x2000182c

0800d010 <stdio_exit_handler>:
 800d010:	4a02      	ldr	r2, [pc, #8]	@ (800d01c <stdio_exit_handler+0xc>)
 800d012:	4903      	ldr	r1, [pc, #12]	@ (800d020 <stdio_exit_handler+0x10>)
 800d014:	4803      	ldr	r0, [pc, #12]	@ (800d024 <stdio_exit_handler+0x14>)
 800d016:	f000 b869 	b.w	800d0ec <_fwalk_sglue>
 800d01a:	bf00      	nop
 800d01c:	20000190 	.word	0x20000190
 800d020:	080102e1 	.word	0x080102e1
 800d024:	200001a0 	.word	0x200001a0

0800d028 <cleanup_stdio>:
 800d028:	6841      	ldr	r1, [r0, #4]
 800d02a:	4b0c      	ldr	r3, [pc, #48]	@ (800d05c <cleanup_stdio+0x34>)
 800d02c:	b510      	push	{r4, lr}
 800d02e:	4299      	cmp	r1, r3
 800d030:	4604      	mov	r4, r0
 800d032:	d001      	beq.n	800d038 <cleanup_stdio+0x10>
 800d034:	f003 f954 	bl	80102e0 <_fflush_r>
 800d038:	68a1      	ldr	r1, [r4, #8]
 800d03a:	4b09      	ldr	r3, [pc, #36]	@ (800d060 <cleanup_stdio+0x38>)
 800d03c:	4299      	cmp	r1, r3
 800d03e:	d002      	beq.n	800d046 <cleanup_stdio+0x1e>
 800d040:	4620      	mov	r0, r4
 800d042:	f003 f94d 	bl	80102e0 <_fflush_r>
 800d046:	68e1      	ldr	r1, [r4, #12]
 800d048:	4b06      	ldr	r3, [pc, #24]	@ (800d064 <cleanup_stdio+0x3c>)
 800d04a:	4299      	cmp	r1, r3
 800d04c:	d004      	beq.n	800d058 <cleanup_stdio+0x30>
 800d04e:	4620      	mov	r0, r4
 800d050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d054:	f003 b944 	b.w	80102e0 <_fflush_r>
 800d058:	bd10      	pop	{r4, pc}
 800d05a:	bf00      	nop
 800d05c:	2000182c 	.word	0x2000182c
 800d060:	20001894 	.word	0x20001894
 800d064:	200018fc 	.word	0x200018fc

0800d068 <global_stdio_init.part.0>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	4b0b      	ldr	r3, [pc, #44]	@ (800d098 <global_stdio_init.part.0+0x30>)
 800d06c:	4c0b      	ldr	r4, [pc, #44]	@ (800d09c <global_stdio_init.part.0+0x34>)
 800d06e:	4a0c      	ldr	r2, [pc, #48]	@ (800d0a0 <global_stdio_init.part.0+0x38>)
 800d070:	4620      	mov	r0, r4
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	2104      	movs	r1, #4
 800d076:	2200      	movs	r2, #0
 800d078:	f7ff ff94 	bl	800cfa4 <std>
 800d07c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d080:	2201      	movs	r2, #1
 800d082:	2109      	movs	r1, #9
 800d084:	f7ff ff8e 	bl	800cfa4 <std>
 800d088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d08c:	2202      	movs	r2, #2
 800d08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d092:	2112      	movs	r1, #18
 800d094:	f7ff bf86 	b.w	800cfa4 <std>
 800d098:	20001964 	.word	0x20001964
 800d09c:	2000182c 	.word	0x2000182c
 800d0a0:	0800d011 	.word	0x0800d011

0800d0a4 <__sfp_lock_acquire>:
 800d0a4:	4801      	ldr	r0, [pc, #4]	@ (800d0ac <__sfp_lock_acquire+0x8>)
 800d0a6:	f000 b99e 	b.w	800d3e6 <__retarget_lock_acquire_recursive>
 800d0aa:	bf00      	nop
 800d0ac:	2000196d 	.word	0x2000196d

0800d0b0 <__sfp_lock_release>:
 800d0b0:	4801      	ldr	r0, [pc, #4]	@ (800d0b8 <__sfp_lock_release+0x8>)
 800d0b2:	f000 b999 	b.w	800d3e8 <__retarget_lock_release_recursive>
 800d0b6:	bf00      	nop
 800d0b8:	2000196d 	.word	0x2000196d

0800d0bc <__sinit>:
 800d0bc:	b510      	push	{r4, lr}
 800d0be:	4604      	mov	r4, r0
 800d0c0:	f7ff fff0 	bl	800d0a4 <__sfp_lock_acquire>
 800d0c4:	6a23      	ldr	r3, [r4, #32]
 800d0c6:	b11b      	cbz	r3, 800d0d0 <__sinit+0x14>
 800d0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0cc:	f7ff bff0 	b.w	800d0b0 <__sfp_lock_release>
 800d0d0:	4b04      	ldr	r3, [pc, #16]	@ (800d0e4 <__sinit+0x28>)
 800d0d2:	6223      	str	r3, [r4, #32]
 800d0d4:	4b04      	ldr	r3, [pc, #16]	@ (800d0e8 <__sinit+0x2c>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1f5      	bne.n	800d0c8 <__sinit+0xc>
 800d0dc:	f7ff ffc4 	bl	800d068 <global_stdio_init.part.0>
 800d0e0:	e7f2      	b.n	800d0c8 <__sinit+0xc>
 800d0e2:	bf00      	nop
 800d0e4:	0800d029 	.word	0x0800d029
 800d0e8:	20001964 	.word	0x20001964

0800d0ec <_fwalk_sglue>:
 800d0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	4688      	mov	r8, r1
 800d0f4:	4614      	mov	r4, r2
 800d0f6:	2600      	movs	r6, #0
 800d0f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0fc:	f1b9 0901 	subs.w	r9, r9, #1
 800d100:	d505      	bpl.n	800d10e <_fwalk_sglue+0x22>
 800d102:	6824      	ldr	r4, [r4, #0]
 800d104:	2c00      	cmp	r4, #0
 800d106:	d1f7      	bne.n	800d0f8 <_fwalk_sglue+0xc>
 800d108:	4630      	mov	r0, r6
 800d10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d10e:	89ab      	ldrh	r3, [r5, #12]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d907      	bls.n	800d124 <_fwalk_sglue+0x38>
 800d114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d118:	3301      	adds	r3, #1
 800d11a:	d003      	beq.n	800d124 <_fwalk_sglue+0x38>
 800d11c:	4629      	mov	r1, r5
 800d11e:	4638      	mov	r0, r7
 800d120:	47c0      	blx	r8
 800d122:	4306      	orrs	r6, r0
 800d124:	3568      	adds	r5, #104	@ 0x68
 800d126:	e7e9      	b.n	800d0fc <_fwalk_sglue+0x10>

0800d128 <siprintf>:
 800d128:	b40e      	push	{r1, r2, r3}
 800d12a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d12e:	b510      	push	{r4, lr}
 800d130:	2400      	movs	r4, #0
 800d132:	b09d      	sub	sp, #116	@ 0x74
 800d134:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d136:	9002      	str	r0, [sp, #8]
 800d138:	9006      	str	r0, [sp, #24]
 800d13a:	9107      	str	r1, [sp, #28]
 800d13c:	9104      	str	r1, [sp, #16]
 800d13e:	4809      	ldr	r0, [pc, #36]	@ (800d164 <siprintf+0x3c>)
 800d140:	4909      	ldr	r1, [pc, #36]	@ (800d168 <siprintf+0x40>)
 800d142:	f853 2b04 	ldr.w	r2, [r3], #4
 800d146:	9105      	str	r1, [sp, #20]
 800d148:	6800      	ldr	r0, [r0, #0]
 800d14a:	a902      	add	r1, sp, #8
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d150:	f002 fc30 	bl	800f9b4 <_svfiprintf_r>
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	701c      	strb	r4, [r3, #0]
 800d158:	b01d      	add	sp, #116	@ 0x74
 800d15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d15e:	b003      	add	sp, #12
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	2000019c 	.word	0x2000019c
 800d168:	ffff0208 	.word	0xffff0208

0800d16c <siscanf>:
 800d16c:	b40e      	push	{r1, r2, r3}
 800d16e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d172:	b570      	push	{r4, r5, r6, lr}
 800d174:	2500      	movs	r5, #0
 800d176:	b09d      	sub	sp, #116	@ 0x74
 800d178:	ac21      	add	r4, sp, #132	@ 0x84
 800d17a:	f854 6b04 	ldr.w	r6, [r4], #4
 800d17e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d182:	951b      	str	r5, [sp, #108]	@ 0x6c
 800d184:	9002      	str	r0, [sp, #8]
 800d186:	9006      	str	r0, [sp, #24]
 800d188:	f7f2 ffe2 	bl	8000150 <strlen>
 800d18c:	4b0b      	ldr	r3, [pc, #44]	@ (800d1bc <siscanf+0x50>)
 800d18e:	9003      	str	r0, [sp, #12]
 800d190:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d192:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d196:	9007      	str	r0, [sp, #28]
 800d198:	4809      	ldr	r0, [pc, #36]	@ (800d1c0 <siscanf+0x54>)
 800d19a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d19e:	4632      	mov	r2, r6
 800d1a0:	4623      	mov	r3, r4
 800d1a2:	a902      	add	r1, sp, #8
 800d1a4:	6800      	ldr	r0, [r0, #0]
 800d1a6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d1a8:	9514      	str	r5, [sp, #80]	@ 0x50
 800d1aa:	9401      	str	r4, [sp, #4]
 800d1ac:	f002 fd58 	bl	800fc60 <__ssvfiscanf_r>
 800d1b0:	b01d      	add	sp, #116	@ 0x74
 800d1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1b6:	b003      	add	sp, #12
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	0800d1e7 	.word	0x0800d1e7
 800d1c0:	2000019c 	.word	0x2000019c

0800d1c4 <__sread>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1cc:	f000 f8bc 	bl	800d348 <_read_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	bfab      	itete	ge
 800d1d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d8:	181b      	addge	r3, r3, r0
 800d1da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1de:	bfac      	ite	ge
 800d1e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1e2:	81a3      	strhlt	r3, [r4, #12]
 800d1e4:	bd10      	pop	{r4, pc}

0800d1e6 <__seofread>:
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	4770      	bx	lr

0800d1ea <__swrite>:
 800d1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ee:	461f      	mov	r7, r3
 800d1f0:	898b      	ldrh	r3, [r1, #12]
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	05db      	lsls	r3, r3, #23
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	4616      	mov	r6, r2
 800d1fa:	d505      	bpl.n	800d208 <__swrite+0x1e>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	2200      	movs	r2, #0
 800d200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d204:	f000 f88e 	bl	800d324 <_lseek_r>
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	4632      	mov	r2, r6
 800d20c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	4628      	mov	r0, r5
 800d214:	463b      	mov	r3, r7
 800d216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	f000 b8a5 	b.w	800d36c <_write_r>

0800d222 <__sseek>:
 800d222:	b510      	push	{r4, lr}
 800d224:	460c      	mov	r4, r1
 800d226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d22a:	f000 f87b 	bl	800d324 <_lseek_r>
 800d22e:	1c43      	adds	r3, r0, #1
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	bf15      	itete	ne
 800d234:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d23a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d23e:	81a3      	strheq	r3, [r4, #12]
 800d240:	bf18      	it	ne
 800d242:	81a3      	strhne	r3, [r4, #12]
 800d244:	bd10      	pop	{r4, pc}

0800d246 <__sclose>:
 800d246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d24a:	f000 b85b 	b.w	800d304 <_close_r>

0800d24e <_vsniprintf_r>:
 800d24e:	b530      	push	{r4, r5, lr}
 800d250:	4614      	mov	r4, r2
 800d252:	2c00      	cmp	r4, #0
 800d254:	4605      	mov	r5, r0
 800d256:	461a      	mov	r2, r3
 800d258:	b09b      	sub	sp, #108	@ 0x6c
 800d25a:	da05      	bge.n	800d268 <_vsniprintf_r+0x1a>
 800d25c:	238b      	movs	r3, #139	@ 0x8b
 800d25e:	6003      	str	r3, [r0, #0]
 800d260:	f04f 30ff 	mov.w	r0, #4294967295
 800d264:	b01b      	add	sp, #108	@ 0x6c
 800d266:	bd30      	pop	{r4, r5, pc}
 800d268:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d26c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	9319      	str	r3, [sp, #100]	@ 0x64
 800d276:	bf0c      	ite	eq
 800d278:	4623      	moveq	r3, r4
 800d27a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d27e:	9302      	str	r3, [sp, #8]
 800d280:	9305      	str	r3, [sp, #20]
 800d282:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d286:	9100      	str	r1, [sp, #0]
 800d288:	9104      	str	r1, [sp, #16]
 800d28a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d28e:	4669      	mov	r1, sp
 800d290:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d292:	f002 fb8f 	bl	800f9b4 <_svfiprintf_r>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	bfbc      	itt	lt
 800d29a:	238b      	movlt	r3, #139	@ 0x8b
 800d29c:	602b      	strlt	r3, [r5, #0]
 800d29e:	2c00      	cmp	r4, #0
 800d2a0:	d0e0      	beq.n	800d264 <_vsniprintf_r+0x16>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	9b00      	ldr	r3, [sp, #0]
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	e7dc      	b.n	800d264 <_vsniprintf_r+0x16>
	...

0800d2ac <vsniprintf>:
 800d2ac:	b507      	push	{r0, r1, r2, lr}
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	460a      	mov	r2, r1
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	4803      	ldr	r0, [pc, #12]	@ (800d2c4 <vsniprintf+0x18>)
 800d2b8:	6800      	ldr	r0, [r0, #0]
 800d2ba:	f7ff ffc8 	bl	800d24e <_vsniprintf_r>
 800d2be:	b003      	add	sp, #12
 800d2c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2c4:	2000019c 	.word	0x2000019c

0800d2c8 <memset>:
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4402      	add	r2, r0
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d100      	bne.n	800d2d2 <memset+0xa>
 800d2d0:	4770      	bx	lr
 800d2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2d6:	e7f9      	b.n	800d2cc <memset+0x4>

0800d2d8 <strncmp>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	b16a      	cbz	r2, 800d2f8 <strncmp+0x20>
 800d2dc:	3901      	subs	r1, #1
 800d2de:	1884      	adds	r4, r0, r2
 800d2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d103      	bne.n	800d2f4 <strncmp+0x1c>
 800d2ec:	42a0      	cmp	r0, r4
 800d2ee:	d001      	beq.n	800d2f4 <strncmp+0x1c>
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	d1f5      	bne.n	800d2e0 <strncmp+0x8>
 800d2f4:	1ad0      	subs	r0, r2, r3
 800d2f6:	bd10      	pop	{r4, pc}
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	e7fc      	b.n	800d2f6 <strncmp+0x1e>

0800d2fc <_localeconv_r>:
 800d2fc:	4800      	ldr	r0, [pc, #0]	@ (800d300 <_localeconv_r+0x4>)
 800d2fe:	4770      	bx	lr
 800d300:	200002dc 	.word	0x200002dc

0800d304 <_close_r>:
 800d304:	b538      	push	{r3, r4, r5, lr}
 800d306:	2300      	movs	r3, #0
 800d308:	4d05      	ldr	r5, [pc, #20]	@ (800d320 <_close_r+0x1c>)
 800d30a:	4604      	mov	r4, r0
 800d30c:	4608      	mov	r0, r1
 800d30e:	602b      	str	r3, [r5, #0]
 800d310:	f7f5 fb21 	bl	8002956 <_close>
 800d314:	1c43      	adds	r3, r0, #1
 800d316:	d102      	bne.n	800d31e <_close_r+0x1a>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	b103      	cbz	r3, 800d31e <_close_r+0x1a>
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	20001968 	.word	0x20001968

0800d324 <_lseek_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	4611      	mov	r1, r2
 800d32c:	2200      	movs	r2, #0
 800d32e:	4d05      	ldr	r5, [pc, #20]	@ (800d344 <_lseek_r+0x20>)
 800d330:	602a      	str	r2, [r5, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	f7f5 fb33 	bl	800299e <_lseek>
 800d338:	1c43      	adds	r3, r0, #1
 800d33a:	d102      	bne.n	800d342 <_lseek_r+0x1e>
 800d33c:	682b      	ldr	r3, [r5, #0]
 800d33e:	b103      	cbz	r3, 800d342 <_lseek_r+0x1e>
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	bd38      	pop	{r3, r4, r5, pc}
 800d344:	20001968 	.word	0x20001968

0800d348 <_read_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	4611      	mov	r1, r2
 800d350:	2200      	movs	r2, #0
 800d352:	4d05      	ldr	r5, [pc, #20]	@ (800d368 <_read_r+0x20>)
 800d354:	602a      	str	r2, [r5, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	f7f5 fac4 	bl	80028e4 <_read>
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d102      	bne.n	800d366 <_read_r+0x1e>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b103      	cbz	r3, 800d366 <_read_r+0x1e>
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	20001968 	.word	0x20001968

0800d36c <_write_r>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4604      	mov	r4, r0
 800d370:	4608      	mov	r0, r1
 800d372:	4611      	mov	r1, r2
 800d374:	2200      	movs	r2, #0
 800d376:	4d05      	ldr	r5, [pc, #20]	@ (800d38c <_write_r+0x20>)
 800d378:	602a      	str	r2, [r5, #0]
 800d37a:	461a      	mov	r2, r3
 800d37c:	f7f5 facf 	bl	800291e <_write>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	d102      	bne.n	800d38a <_write_r+0x1e>
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	b103      	cbz	r3, 800d38a <_write_r+0x1e>
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	20001968 	.word	0x20001968

0800d390 <__errno>:
 800d390:	4b01      	ldr	r3, [pc, #4]	@ (800d398 <__errno+0x8>)
 800d392:	6818      	ldr	r0, [r3, #0]
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	2000019c 	.word	0x2000019c

0800d39c <__libc_init_array>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	2600      	movs	r6, #0
 800d3a0:	4d0c      	ldr	r5, [pc, #48]	@ (800d3d4 <__libc_init_array+0x38>)
 800d3a2:	4c0d      	ldr	r4, [pc, #52]	@ (800d3d8 <__libc_init_array+0x3c>)
 800d3a4:	1b64      	subs	r4, r4, r5
 800d3a6:	10a4      	asrs	r4, r4, #2
 800d3a8:	42a6      	cmp	r6, r4
 800d3aa:	d109      	bne.n	800d3c0 <__libc_init_array+0x24>
 800d3ac:	f003 ff56 	bl	801125c <_init>
 800d3b0:	2600      	movs	r6, #0
 800d3b2:	4d0a      	ldr	r5, [pc, #40]	@ (800d3dc <__libc_init_array+0x40>)
 800d3b4:	4c0a      	ldr	r4, [pc, #40]	@ (800d3e0 <__libc_init_array+0x44>)
 800d3b6:	1b64      	subs	r4, r4, r5
 800d3b8:	10a4      	asrs	r4, r4, #2
 800d3ba:	42a6      	cmp	r6, r4
 800d3bc:	d105      	bne.n	800d3ca <__libc_init_array+0x2e>
 800d3be:	bd70      	pop	{r4, r5, r6, pc}
 800d3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3c4:	4798      	blx	r3
 800d3c6:	3601      	adds	r6, #1
 800d3c8:	e7ee      	b.n	800d3a8 <__libc_init_array+0xc>
 800d3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ce:	4798      	blx	r3
 800d3d0:	3601      	adds	r6, #1
 800d3d2:	e7f2      	b.n	800d3ba <__libc_init_array+0x1e>
 800d3d4:	08011d24 	.word	0x08011d24
 800d3d8:	08011d24 	.word	0x08011d24
 800d3dc:	08011d24 	.word	0x08011d24
 800d3e0:	08011d28 	.word	0x08011d28

0800d3e4 <__retarget_lock_init_recursive>:
 800d3e4:	4770      	bx	lr

0800d3e6 <__retarget_lock_acquire_recursive>:
 800d3e6:	4770      	bx	lr

0800d3e8 <__retarget_lock_release_recursive>:
 800d3e8:	4770      	bx	lr

0800d3ea <memchr>:
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	b510      	push	{r4, lr}
 800d3ee:	b2c9      	uxtb	r1, r1
 800d3f0:	4402      	add	r2, r0
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	d101      	bne.n	800d3fc <memchr+0x12>
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e003      	b.n	800d404 <memchr+0x1a>
 800d3fc:	7804      	ldrb	r4, [r0, #0]
 800d3fe:	3301      	adds	r3, #1
 800d400:	428c      	cmp	r4, r1
 800d402:	d1f6      	bne.n	800d3f2 <memchr+0x8>
 800d404:	bd10      	pop	{r4, pc}
	...

0800d408 <nanf>:
 800d408:	4800      	ldr	r0, [pc, #0]	@ (800d40c <nanf+0x4>)
 800d40a:	4770      	bx	lr
 800d40c:	7fc00000 	.word	0x7fc00000

0800d410 <quorem>:
 800d410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	6903      	ldr	r3, [r0, #16]
 800d416:	690c      	ldr	r4, [r1, #16]
 800d418:	4607      	mov	r7, r0
 800d41a:	42a3      	cmp	r3, r4
 800d41c:	db7e      	blt.n	800d51c <quorem+0x10c>
 800d41e:	3c01      	subs	r4, #1
 800d420:	00a3      	lsls	r3, r4, #2
 800d422:	f100 0514 	add.w	r5, r0, #20
 800d426:	f101 0814 	add.w	r8, r1, #20
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d43a:	3301      	adds	r3, #1
 800d43c:	429a      	cmp	r2, r3
 800d43e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d442:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d446:	d32e      	bcc.n	800d4a6 <quorem+0x96>
 800d448:	f04f 0a00 	mov.w	sl, #0
 800d44c:	46c4      	mov	ip, r8
 800d44e:	46ae      	mov	lr, r5
 800d450:	46d3      	mov	fp, sl
 800d452:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d456:	b298      	uxth	r0, r3
 800d458:	fb06 a000 	mla	r0, r6, r0, sl
 800d45c:	0c1b      	lsrs	r3, r3, #16
 800d45e:	0c02      	lsrs	r2, r0, #16
 800d460:	fb06 2303 	mla	r3, r6, r3, r2
 800d464:	f8de 2000 	ldr.w	r2, [lr]
 800d468:	b280      	uxth	r0, r0
 800d46a:	b292      	uxth	r2, r2
 800d46c:	1a12      	subs	r2, r2, r0
 800d46e:	445a      	add	r2, fp
 800d470:	f8de 0000 	ldr.w	r0, [lr]
 800d474:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d478:	b29b      	uxth	r3, r3
 800d47a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d47e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d482:	b292      	uxth	r2, r2
 800d484:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d488:	45e1      	cmp	r9, ip
 800d48a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d48e:	f84e 2b04 	str.w	r2, [lr], #4
 800d492:	d2de      	bcs.n	800d452 <quorem+0x42>
 800d494:	9b00      	ldr	r3, [sp, #0]
 800d496:	58eb      	ldr	r3, [r5, r3]
 800d498:	b92b      	cbnz	r3, 800d4a6 <quorem+0x96>
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	3b04      	subs	r3, #4
 800d49e:	429d      	cmp	r5, r3
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	d32f      	bcc.n	800d504 <quorem+0xf4>
 800d4a4:	613c      	str	r4, [r7, #16]
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f001 f9c8 	bl	800e83c <__mcmp>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	db25      	blt.n	800d4fc <quorem+0xec>
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4b8:	f8d1 c000 	ldr.w	ip, [r1]
 800d4bc:	fa1f fe82 	uxth.w	lr, r2
 800d4c0:	fa1f f38c 	uxth.w	r3, ip
 800d4c4:	eba3 030e 	sub.w	r3, r3, lr
 800d4c8:	4403      	add	r3, r0
 800d4ca:	0c12      	lsrs	r2, r2, #16
 800d4cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d4d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4da:	45c1      	cmp	r9, r8
 800d4dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d4e0:	f841 3b04 	str.w	r3, [r1], #4
 800d4e4:	d2e6      	bcs.n	800d4b4 <quorem+0xa4>
 800d4e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4ee:	b922      	cbnz	r2, 800d4fa <quorem+0xea>
 800d4f0:	3b04      	subs	r3, #4
 800d4f2:	429d      	cmp	r5, r3
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	d30b      	bcc.n	800d510 <quorem+0x100>
 800d4f8:	613c      	str	r4, [r7, #16]
 800d4fa:	3601      	adds	r6, #1
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	b003      	add	sp, #12
 800d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d504:	6812      	ldr	r2, [r2, #0]
 800d506:	3b04      	subs	r3, #4
 800d508:	2a00      	cmp	r2, #0
 800d50a:	d1cb      	bne.n	800d4a4 <quorem+0x94>
 800d50c:	3c01      	subs	r4, #1
 800d50e:	e7c6      	b.n	800d49e <quorem+0x8e>
 800d510:	6812      	ldr	r2, [r2, #0]
 800d512:	3b04      	subs	r3, #4
 800d514:	2a00      	cmp	r2, #0
 800d516:	d1ef      	bne.n	800d4f8 <quorem+0xe8>
 800d518:	3c01      	subs	r4, #1
 800d51a:	e7ea      	b.n	800d4f2 <quorem+0xe2>
 800d51c:	2000      	movs	r0, #0
 800d51e:	e7ee      	b.n	800d4fe <quorem+0xee>

0800d520 <_dtoa_r>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	4614      	mov	r4, r2
 800d526:	461d      	mov	r5, r3
 800d528:	69c7      	ldr	r7, [r0, #28]
 800d52a:	b097      	sub	sp, #92	@ 0x5c
 800d52c:	4681      	mov	r9, r0
 800d52e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d532:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800d534:	b97f      	cbnz	r7, 800d556 <_dtoa_r+0x36>
 800d536:	2010      	movs	r0, #16
 800d538:	f000 fe0e 	bl	800e158 <malloc>
 800d53c:	4602      	mov	r2, r0
 800d53e:	f8c9 001c 	str.w	r0, [r9, #28]
 800d542:	b920      	cbnz	r0, 800d54e <_dtoa_r+0x2e>
 800d544:	21ef      	movs	r1, #239	@ 0xef
 800d546:	4bac      	ldr	r3, [pc, #688]	@ (800d7f8 <_dtoa_r+0x2d8>)
 800d548:	48ac      	ldr	r0, [pc, #688]	@ (800d7fc <_dtoa_r+0x2dc>)
 800d54a:	f002 ffa1 	bl	8010490 <__assert_func>
 800d54e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d552:	6007      	str	r7, [r0, #0]
 800d554:	60c7      	str	r7, [r0, #12]
 800d556:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d55a:	6819      	ldr	r1, [r3, #0]
 800d55c:	b159      	cbz	r1, 800d576 <_dtoa_r+0x56>
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	2301      	movs	r3, #1
 800d562:	4093      	lsls	r3, r2
 800d564:	604a      	str	r2, [r1, #4]
 800d566:	608b      	str	r3, [r1, #8]
 800d568:	4648      	mov	r0, r9
 800d56a:	f000 feeb 	bl	800e344 <_Bfree>
 800d56e:	2200      	movs	r2, #0
 800d570:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	1e2b      	subs	r3, r5, #0
 800d578:	bfaf      	iteee	ge
 800d57a:	2300      	movge	r3, #0
 800d57c:	2201      	movlt	r2, #1
 800d57e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d582:	9307      	strlt	r3, [sp, #28]
 800d584:	bfa8      	it	ge
 800d586:	6033      	strge	r3, [r6, #0]
 800d588:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d58c:	4b9c      	ldr	r3, [pc, #624]	@ (800d800 <_dtoa_r+0x2e0>)
 800d58e:	bfb8      	it	lt
 800d590:	6032      	strlt	r2, [r6, #0]
 800d592:	ea33 0308 	bics.w	r3, r3, r8
 800d596:	d112      	bne.n	800d5be <_dtoa_r+0x9e>
 800d598:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d59c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d5a4:	4323      	orrs	r3, r4
 800d5a6:	f000 855e 	beq.w	800e066 <_dtoa_r+0xb46>
 800d5aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d5ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d804 <_dtoa_r+0x2e4>
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8560 	beq.w	800e076 <_dtoa_r+0xb56>
 800d5b6:	f10a 0303 	add.w	r3, sl, #3
 800d5ba:	f000 bd5a 	b.w	800e072 <_dtoa_r+0xb52>
 800d5be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d5c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f7f3 f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 800d5d2:	4607      	mov	r7, r0
 800d5d4:	b158      	cbz	r0, 800d5ee <_dtoa_r+0xce>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d5de:	b113      	cbz	r3, 800d5e6 <_dtoa_r+0xc6>
 800d5e0:	4b89      	ldr	r3, [pc, #548]	@ (800d808 <_dtoa_r+0x2e8>)
 800d5e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800d80c <_dtoa_r+0x2ec>
 800d5ea:	f000 bd44 	b.w	800e076 <_dtoa_r+0xb56>
 800d5ee:	ab14      	add	r3, sp, #80	@ 0x50
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	ab15      	add	r3, sp, #84	@ 0x54
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	4648      	mov	r0, r9
 800d5f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d5fc:	f001 fa36 	bl	800ea6c <__d2b>
 800d600:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800d604:	9003      	str	r0, [sp, #12]
 800d606:	2e00      	cmp	r6, #0
 800d608:	d078      	beq.n	800d6fc <_dtoa_r+0x1dc>
 800d60a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d60e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d610:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d618:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d61c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d620:	9712      	str	r7, [sp, #72]	@ 0x48
 800d622:	4619      	mov	r1, r3
 800d624:	2200      	movs	r2, #0
 800d626:	4b7a      	ldr	r3, [pc, #488]	@ (800d810 <_dtoa_r+0x2f0>)
 800d628:	f7f2 fd9e 	bl	8000168 <__aeabi_dsub>
 800d62c:	a36c      	add	r3, pc, #432	@ (adr r3, 800d7e0 <_dtoa_r+0x2c0>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f7f2 ff51 	bl	80004d8 <__aeabi_dmul>
 800d636:	a36c      	add	r3, pc, #432	@ (adr r3, 800d7e8 <_dtoa_r+0x2c8>)
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	f7f2 fd96 	bl	800016c <__adddf3>
 800d640:	4604      	mov	r4, r0
 800d642:	4630      	mov	r0, r6
 800d644:	460d      	mov	r5, r1
 800d646:	f7f2 fedd 	bl	8000404 <__aeabi_i2d>
 800d64a:	a369      	add	r3, pc, #420	@ (adr r3, 800d7f0 <_dtoa_r+0x2d0>)
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	f7f2 ff42 	bl	80004d8 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4620      	mov	r0, r4
 800d65a:	4629      	mov	r1, r5
 800d65c:	f7f2 fd86 	bl	800016c <__adddf3>
 800d660:	4604      	mov	r4, r0
 800d662:	460d      	mov	r5, r1
 800d664:	f7f3 f9e8 	bl	8000a38 <__aeabi_d2iz>
 800d668:	2200      	movs	r2, #0
 800d66a:	4607      	mov	r7, r0
 800d66c:	2300      	movs	r3, #0
 800d66e:	4620      	mov	r0, r4
 800d670:	4629      	mov	r1, r5
 800d672:	f7f3 f9a3 	bl	80009bc <__aeabi_dcmplt>
 800d676:	b140      	cbz	r0, 800d68a <_dtoa_r+0x16a>
 800d678:	4638      	mov	r0, r7
 800d67a:	f7f2 fec3 	bl	8000404 <__aeabi_i2d>
 800d67e:	4622      	mov	r2, r4
 800d680:	462b      	mov	r3, r5
 800d682:	f7f3 f991 	bl	80009a8 <__aeabi_dcmpeq>
 800d686:	b900      	cbnz	r0, 800d68a <_dtoa_r+0x16a>
 800d688:	3f01      	subs	r7, #1
 800d68a:	2f16      	cmp	r7, #22
 800d68c:	d854      	bhi.n	800d738 <_dtoa_r+0x218>
 800d68e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d692:	4b60      	ldr	r3, [pc, #384]	@ (800d814 <_dtoa_r+0x2f4>)
 800d694:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69c:	f7f3 f98e 	bl	80009bc <__aeabi_dcmplt>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d04b      	beq.n	800d73c <_dtoa_r+0x21c>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	3f01      	subs	r7, #1
 800d6a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d6ac:	1b9b      	subs	r3, r3, r6
 800d6ae:	1e5a      	subs	r2, r3, #1
 800d6b0:	bf49      	itett	mi
 800d6b2:	f1c3 0301 	rsbmi	r3, r3, #1
 800d6b6:	2300      	movpl	r3, #0
 800d6b8:	9304      	strmi	r3, [sp, #16]
 800d6ba:	2300      	movmi	r3, #0
 800d6bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6be:	bf54      	ite	pl
 800d6c0:	9304      	strpl	r3, [sp, #16]
 800d6c2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800d6c4:	2f00      	cmp	r7, #0
 800d6c6:	db3b      	blt.n	800d740 <_dtoa_r+0x220>
 800d6c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ca:	970e      	str	r7, [sp, #56]	@ 0x38
 800d6cc:	443b      	add	r3, r7
 800d6ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d6d6:	2b09      	cmp	r3, #9
 800d6d8:	d865      	bhi.n	800d7a6 <_dtoa_r+0x286>
 800d6da:	2b05      	cmp	r3, #5
 800d6dc:	bfc4      	itt	gt
 800d6de:	3b04      	subgt	r3, #4
 800d6e0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800d6e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d6e4:	bfc8      	it	gt
 800d6e6:	2400      	movgt	r4, #0
 800d6e8:	f1a3 0302 	sub.w	r3, r3, #2
 800d6ec:	bfd8      	it	le
 800d6ee:	2401      	movle	r4, #1
 800d6f0:	2b03      	cmp	r3, #3
 800d6f2:	d864      	bhi.n	800d7be <_dtoa_r+0x29e>
 800d6f4:	e8df f003 	tbb	[pc, r3]
 800d6f8:	2c385553 	.word	0x2c385553
 800d6fc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d700:	441e      	add	r6, r3
 800d702:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d706:	2b20      	cmp	r3, #32
 800d708:	bfc1      	itttt	gt
 800d70a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d70e:	fa08 f803 	lslgt.w	r8, r8, r3
 800d712:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d716:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d71a:	bfd6      	itet	le
 800d71c:	f1c3 0320 	rsble	r3, r3, #32
 800d720:	ea48 0003 	orrgt.w	r0, r8, r3
 800d724:	fa04 f003 	lslle.w	r0, r4, r3
 800d728:	f7f2 fe5c 	bl	80003e4 <__aeabi_ui2d>
 800d72c:	2201      	movs	r2, #1
 800d72e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d732:	3e01      	subs	r6, #1
 800d734:	9212      	str	r2, [sp, #72]	@ 0x48
 800d736:	e774      	b.n	800d622 <_dtoa_r+0x102>
 800d738:	2301      	movs	r3, #1
 800d73a:	e7b5      	b.n	800d6a8 <_dtoa_r+0x188>
 800d73c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d73e:	e7b4      	b.n	800d6aa <_dtoa_r+0x18a>
 800d740:	9b04      	ldr	r3, [sp, #16]
 800d742:	1bdb      	subs	r3, r3, r7
 800d744:	9304      	str	r3, [sp, #16]
 800d746:	427b      	negs	r3, r7
 800d748:	930a      	str	r3, [sp, #40]	@ 0x28
 800d74a:	2300      	movs	r3, #0
 800d74c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d74e:	e7c1      	b.n	800d6d4 <_dtoa_r+0x1b4>
 800d750:	2301      	movs	r3, #1
 800d752:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d754:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d756:	eb07 0b03 	add.w	fp, r7, r3
 800d75a:	f10b 0301 	add.w	r3, fp, #1
 800d75e:	2b01      	cmp	r3, #1
 800d760:	9308      	str	r3, [sp, #32]
 800d762:	bfb8      	it	lt
 800d764:	2301      	movlt	r3, #1
 800d766:	e006      	b.n	800d776 <_dtoa_r+0x256>
 800d768:	2301      	movs	r3, #1
 800d76a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d76c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d76e:	2b00      	cmp	r3, #0
 800d770:	dd28      	ble.n	800d7c4 <_dtoa_r+0x2a4>
 800d772:	469b      	mov	fp, r3
 800d774:	9308      	str	r3, [sp, #32]
 800d776:	2100      	movs	r1, #0
 800d778:	2204      	movs	r2, #4
 800d77a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d77e:	f102 0514 	add.w	r5, r2, #20
 800d782:	429d      	cmp	r5, r3
 800d784:	d926      	bls.n	800d7d4 <_dtoa_r+0x2b4>
 800d786:	6041      	str	r1, [r0, #4]
 800d788:	4648      	mov	r0, r9
 800d78a:	f000 fd9b 	bl	800e2c4 <_Balloc>
 800d78e:	4682      	mov	sl, r0
 800d790:	2800      	cmp	r0, #0
 800d792:	d143      	bne.n	800d81c <_dtoa_r+0x2fc>
 800d794:	4602      	mov	r2, r0
 800d796:	f240 11af 	movw	r1, #431	@ 0x1af
 800d79a:	4b1f      	ldr	r3, [pc, #124]	@ (800d818 <_dtoa_r+0x2f8>)
 800d79c:	e6d4      	b.n	800d548 <_dtoa_r+0x28>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	e7e3      	b.n	800d76a <_dtoa_r+0x24a>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	e7d5      	b.n	800d752 <_dtoa_r+0x232>
 800d7a6:	2401      	movs	r4, #1
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d7ac:	9320      	str	r3, [sp, #128]	@ 0x80
 800d7ae:	f04f 3bff 	mov.w	fp, #4294967295
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2312      	movs	r3, #18
 800d7b6:	f8cd b020 	str.w	fp, [sp, #32]
 800d7ba:	9221      	str	r2, [sp, #132]	@ 0x84
 800d7bc:	e7db      	b.n	800d776 <_dtoa_r+0x256>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7c2:	e7f4      	b.n	800d7ae <_dtoa_r+0x28e>
 800d7c4:	f04f 0b01 	mov.w	fp, #1
 800d7c8:	465b      	mov	r3, fp
 800d7ca:	f8cd b020 	str.w	fp, [sp, #32]
 800d7ce:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800d7d2:	e7d0      	b.n	800d776 <_dtoa_r+0x256>
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	0052      	lsls	r2, r2, #1
 800d7d8:	e7d1      	b.n	800d77e <_dtoa_r+0x25e>
 800d7da:	bf00      	nop
 800d7dc:	f3af 8000 	nop.w
 800d7e0:	636f4361 	.word	0x636f4361
 800d7e4:	3fd287a7 	.word	0x3fd287a7
 800d7e8:	8b60c8b3 	.word	0x8b60c8b3
 800d7ec:	3fc68a28 	.word	0x3fc68a28
 800d7f0:	509f79fb 	.word	0x509f79fb
 800d7f4:	3fd34413 	.word	0x3fd34413
 800d7f8:	0801191e 	.word	0x0801191e
 800d7fc:	08011935 	.word	0x08011935
 800d800:	7ff00000 	.word	0x7ff00000
 800d804:	0801191a 	.word	0x0801191a
 800d808:	08011a21 	.word	0x08011a21
 800d80c:	08011a20 	.word	0x08011a20
 800d810:	3ff80000 	.word	0x3ff80000
 800d814:	08011b00 	.word	0x08011b00
 800d818:	0801198d 	.word	0x0801198d
 800d81c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d820:	6018      	str	r0, [r3, #0]
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	2b0e      	cmp	r3, #14
 800d826:	f200 80a1 	bhi.w	800d96c <_dtoa_r+0x44c>
 800d82a:	2c00      	cmp	r4, #0
 800d82c:	f000 809e 	beq.w	800d96c <_dtoa_r+0x44c>
 800d830:	2f00      	cmp	r7, #0
 800d832:	dd33      	ble.n	800d89c <_dtoa_r+0x37c>
 800d834:	4b9c      	ldr	r3, [pc, #624]	@ (800daa8 <_dtoa_r+0x588>)
 800d836:	f007 020f 	and.w	r2, r7, #15
 800d83a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d83e:	05f8      	lsls	r0, r7, #23
 800d840:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d844:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800d848:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d84c:	d516      	bpl.n	800d87c <_dtoa_r+0x35c>
 800d84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d852:	4b96      	ldr	r3, [pc, #600]	@ (800daac <_dtoa_r+0x58c>)
 800d854:	2603      	movs	r6, #3
 800d856:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d85a:	f7f2 ff67 	bl	800072c <__aeabi_ddiv>
 800d85e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d862:	f004 040f 	and.w	r4, r4, #15
 800d866:	4d91      	ldr	r5, [pc, #580]	@ (800daac <_dtoa_r+0x58c>)
 800d868:	b954      	cbnz	r4, 800d880 <_dtoa_r+0x360>
 800d86a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d86e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d872:	f7f2 ff5b 	bl	800072c <__aeabi_ddiv>
 800d876:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d87a:	e028      	b.n	800d8ce <_dtoa_r+0x3ae>
 800d87c:	2602      	movs	r6, #2
 800d87e:	e7f2      	b.n	800d866 <_dtoa_r+0x346>
 800d880:	07e1      	lsls	r1, r4, #31
 800d882:	d508      	bpl.n	800d896 <_dtoa_r+0x376>
 800d884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d88c:	f7f2 fe24 	bl	80004d8 <__aeabi_dmul>
 800d890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d894:	3601      	adds	r6, #1
 800d896:	1064      	asrs	r4, r4, #1
 800d898:	3508      	adds	r5, #8
 800d89a:	e7e5      	b.n	800d868 <_dtoa_r+0x348>
 800d89c:	f000 80af 	beq.w	800d9fe <_dtoa_r+0x4de>
 800d8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8a4:	427c      	negs	r4, r7
 800d8a6:	4b80      	ldr	r3, [pc, #512]	@ (800daa8 <_dtoa_r+0x588>)
 800d8a8:	f004 020f 	and.w	r2, r4, #15
 800d8ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b4:	f7f2 fe10 	bl	80004d8 <__aeabi_dmul>
 800d8b8:	2602      	movs	r6, #2
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d8c0:	4d7a      	ldr	r5, [pc, #488]	@ (800daac <_dtoa_r+0x58c>)
 800d8c2:	1124      	asrs	r4, r4, #4
 800d8c4:	2c00      	cmp	r4, #0
 800d8c6:	f040 808f 	bne.w	800d9e8 <_dtoa_r+0x4c8>
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1d3      	bne.n	800d876 <_dtoa_r+0x356>
 800d8ce:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800d8d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f000 8094 	beq.w	800da02 <_dtoa_r+0x4e2>
 800d8da:	2200      	movs	r2, #0
 800d8dc:	4620      	mov	r0, r4
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4b73      	ldr	r3, [pc, #460]	@ (800dab0 <_dtoa_r+0x590>)
 800d8e2:	f7f3 f86b 	bl	80009bc <__aeabi_dcmplt>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	f000 808b 	beq.w	800da02 <_dtoa_r+0x4e2>
 800d8ec:	9b08      	ldr	r3, [sp, #32]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 8087 	beq.w	800da02 <_dtoa_r+0x4e2>
 800d8f4:	f1bb 0f00 	cmp.w	fp, #0
 800d8f8:	dd34      	ble.n	800d964 <_dtoa_r+0x444>
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4629      	mov	r1, r5
 800d900:	4b6c      	ldr	r3, [pc, #432]	@ (800dab4 <_dtoa_r+0x594>)
 800d902:	f7f2 fde9 	bl	80004d8 <__aeabi_dmul>
 800d906:	465c      	mov	r4, fp
 800d908:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d90c:	f107 38ff 	add.w	r8, r7, #4294967295
 800d910:	3601      	adds	r6, #1
 800d912:	4630      	mov	r0, r6
 800d914:	f7f2 fd76 	bl	8000404 <__aeabi_i2d>
 800d918:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d91c:	f7f2 fddc 	bl	80004d8 <__aeabi_dmul>
 800d920:	2200      	movs	r2, #0
 800d922:	4b65      	ldr	r3, [pc, #404]	@ (800dab8 <_dtoa_r+0x598>)
 800d924:	f7f2 fc22 	bl	800016c <__adddf3>
 800d928:	4605      	mov	r5, r0
 800d92a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d92e:	2c00      	cmp	r4, #0
 800d930:	d16a      	bne.n	800da08 <_dtoa_r+0x4e8>
 800d932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d936:	2200      	movs	r2, #0
 800d938:	4b60      	ldr	r3, [pc, #384]	@ (800dabc <_dtoa_r+0x59c>)
 800d93a:	f7f2 fc15 	bl	8000168 <__aeabi_dsub>
 800d93e:	4602      	mov	r2, r0
 800d940:	460b      	mov	r3, r1
 800d942:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d946:	462a      	mov	r2, r5
 800d948:	4633      	mov	r3, r6
 800d94a:	f7f3 f855 	bl	80009f8 <__aeabi_dcmpgt>
 800d94e:	2800      	cmp	r0, #0
 800d950:	f040 8298 	bne.w	800de84 <_dtoa_r+0x964>
 800d954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d958:	462a      	mov	r2, r5
 800d95a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d95e:	f7f3 f82d 	bl	80009bc <__aeabi_dcmplt>
 800d962:	bb38      	cbnz	r0, 800d9b4 <_dtoa_r+0x494>
 800d964:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d968:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d96c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f2c0 8157 	blt.w	800dc22 <_dtoa_r+0x702>
 800d974:	2f0e      	cmp	r7, #14
 800d976:	f300 8154 	bgt.w	800dc22 <_dtoa_r+0x702>
 800d97a:	4b4b      	ldr	r3, [pc, #300]	@ (800daa8 <_dtoa_r+0x588>)
 800d97c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d980:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d984:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f280 80e5 	bge.w	800db5a <_dtoa_r+0x63a>
 800d990:	9b08      	ldr	r3, [sp, #32]
 800d992:	2b00      	cmp	r3, #0
 800d994:	f300 80e1 	bgt.w	800db5a <_dtoa_r+0x63a>
 800d998:	d10c      	bne.n	800d9b4 <_dtoa_r+0x494>
 800d99a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	4b46      	ldr	r3, [pc, #280]	@ (800dabc <_dtoa_r+0x59c>)
 800d9a2:	f7f2 fd99 	bl	80004d8 <__aeabi_dmul>
 800d9a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9aa:	f7f3 f81b 	bl	80009e4 <__aeabi_dcmpge>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f000 8266 	beq.w	800de80 <_dtoa_r+0x960>
 800d9b4:	2400      	movs	r4, #0
 800d9b6:	4625      	mov	r5, r4
 800d9b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d9ba:	4656      	mov	r6, sl
 800d9bc:	ea6f 0803 	mvn.w	r8, r3
 800d9c0:	2700      	movs	r7, #0
 800d9c2:	4621      	mov	r1, r4
 800d9c4:	4648      	mov	r0, r9
 800d9c6:	f000 fcbd 	bl	800e344 <_Bfree>
 800d9ca:	2d00      	cmp	r5, #0
 800d9cc:	f000 80bd 	beq.w	800db4a <_dtoa_r+0x62a>
 800d9d0:	b12f      	cbz	r7, 800d9de <_dtoa_r+0x4be>
 800d9d2:	42af      	cmp	r7, r5
 800d9d4:	d003      	beq.n	800d9de <_dtoa_r+0x4be>
 800d9d6:	4639      	mov	r1, r7
 800d9d8:	4648      	mov	r0, r9
 800d9da:	f000 fcb3 	bl	800e344 <_Bfree>
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4648      	mov	r0, r9
 800d9e2:	f000 fcaf 	bl	800e344 <_Bfree>
 800d9e6:	e0b0      	b.n	800db4a <_dtoa_r+0x62a>
 800d9e8:	07e2      	lsls	r2, r4, #31
 800d9ea:	d505      	bpl.n	800d9f8 <_dtoa_r+0x4d8>
 800d9ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9f0:	f7f2 fd72 	bl	80004d8 <__aeabi_dmul>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	3601      	adds	r6, #1
 800d9f8:	1064      	asrs	r4, r4, #1
 800d9fa:	3508      	adds	r5, #8
 800d9fc:	e762      	b.n	800d8c4 <_dtoa_r+0x3a4>
 800d9fe:	2602      	movs	r6, #2
 800da00:	e765      	b.n	800d8ce <_dtoa_r+0x3ae>
 800da02:	46b8      	mov	r8, r7
 800da04:	9c08      	ldr	r4, [sp, #32]
 800da06:	e784      	b.n	800d912 <_dtoa_r+0x3f2>
 800da08:	4b27      	ldr	r3, [pc, #156]	@ (800daa8 <_dtoa_r+0x588>)
 800da0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da14:	4454      	add	r4, sl
 800da16:	2900      	cmp	r1, #0
 800da18:	d054      	beq.n	800dac4 <_dtoa_r+0x5a4>
 800da1a:	2000      	movs	r0, #0
 800da1c:	4928      	ldr	r1, [pc, #160]	@ (800dac0 <_dtoa_r+0x5a0>)
 800da1e:	f7f2 fe85 	bl	800072c <__aeabi_ddiv>
 800da22:	4633      	mov	r3, r6
 800da24:	462a      	mov	r2, r5
 800da26:	f7f2 fb9f 	bl	8000168 <__aeabi_dsub>
 800da2a:	4656      	mov	r6, sl
 800da2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da34:	f7f3 f800 	bl	8000a38 <__aeabi_d2iz>
 800da38:	4605      	mov	r5, r0
 800da3a:	f7f2 fce3 	bl	8000404 <__aeabi_i2d>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da46:	f7f2 fb8f 	bl	8000168 <__aeabi_dsub>
 800da4a:	4602      	mov	r2, r0
 800da4c:	460b      	mov	r3, r1
 800da4e:	3530      	adds	r5, #48	@ 0x30
 800da50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da58:	f806 5b01 	strb.w	r5, [r6], #1
 800da5c:	f7f2 ffae 	bl	80009bc <__aeabi_dcmplt>
 800da60:	2800      	cmp	r0, #0
 800da62:	d172      	bne.n	800db4a <_dtoa_r+0x62a>
 800da64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da68:	2000      	movs	r0, #0
 800da6a:	4911      	ldr	r1, [pc, #68]	@ (800dab0 <_dtoa_r+0x590>)
 800da6c:	f7f2 fb7c 	bl	8000168 <__aeabi_dsub>
 800da70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da74:	f7f2 ffa2 	bl	80009bc <__aeabi_dcmplt>
 800da78:	2800      	cmp	r0, #0
 800da7a:	f040 80b4 	bne.w	800dbe6 <_dtoa_r+0x6c6>
 800da7e:	42a6      	cmp	r6, r4
 800da80:	f43f af70 	beq.w	800d964 <_dtoa_r+0x444>
 800da84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da88:	2200      	movs	r2, #0
 800da8a:	4b0a      	ldr	r3, [pc, #40]	@ (800dab4 <_dtoa_r+0x594>)
 800da8c:	f7f2 fd24 	bl	80004d8 <__aeabi_dmul>
 800da90:	2200      	movs	r2, #0
 800da92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da9a:	4b06      	ldr	r3, [pc, #24]	@ (800dab4 <_dtoa_r+0x594>)
 800da9c:	f7f2 fd1c 	bl	80004d8 <__aeabi_dmul>
 800daa0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800daa4:	e7c4      	b.n	800da30 <_dtoa_r+0x510>
 800daa6:	bf00      	nop
 800daa8:	08011b00 	.word	0x08011b00
 800daac:	08011ad8 	.word	0x08011ad8
 800dab0:	3ff00000 	.word	0x3ff00000
 800dab4:	40240000 	.word	0x40240000
 800dab8:	401c0000 	.word	0x401c0000
 800dabc:	40140000 	.word	0x40140000
 800dac0:	3fe00000 	.word	0x3fe00000
 800dac4:	4631      	mov	r1, r6
 800dac6:	4628      	mov	r0, r5
 800dac8:	f7f2 fd06 	bl	80004d8 <__aeabi_dmul>
 800dacc:	4656      	mov	r6, sl
 800dace:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dad2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dad8:	f7f2 ffae 	bl	8000a38 <__aeabi_d2iz>
 800dadc:	4605      	mov	r5, r0
 800dade:	f7f2 fc91 	bl	8000404 <__aeabi_i2d>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800daea:	f7f2 fb3d 	bl	8000168 <__aeabi_dsub>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	3530      	adds	r5, #48	@ 0x30
 800daf4:	f806 5b01 	strb.w	r5, [r6], #1
 800daf8:	42a6      	cmp	r6, r4
 800dafa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dafe:	f04f 0200 	mov.w	r2, #0
 800db02:	d124      	bne.n	800db4e <_dtoa_r+0x62e>
 800db04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800db08:	4bae      	ldr	r3, [pc, #696]	@ (800ddc4 <_dtoa_r+0x8a4>)
 800db0a:	f7f2 fb2f 	bl	800016c <__adddf3>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db16:	f7f2 ff6f 	bl	80009f8 <__aeabi_dcmpgt>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d163      	bne.n	800dbe6 <_dtoa_r+0x6c6>
 800db1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db22:	2000      	movs	r0, #0
 800db24:	49a7      	ldr	r1, [pc, #668]	@ (800ddc4 <_dtoa_r+0x8a4>)
 800db26:	f7f2 fb1f 	bl	8000168 <__aeabi_dsub>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db32:	f7f2 ff43 	bl	80009bc <__aeabi_dcmplt>
 800db36:	2800      	cmp	r0, #0
 800db38:	f43f af14 	beq.w	800d964 <_dtoa_r+0x444>
 800db3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800db3e:	1e73      	subs	r3, r6, #1
 800db40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db46:	2b30      	cmp	r3, #48	@ 0x30
 800db48:	d0f8      	beq.n	800db3c <_dtoa_r+0x61c>
 800db4a:	4647      	mov	r7, r8
 800db4c:	e03b      	b.n	800dbc6 <_dtoa_r+0x6a6>
 800db4e:	4b9e      	ldr	r3, [pc, #632]	@ (800ddc8 <_dtoa_r+0x8a8>)
 800db50:	f7f2 fcc2 	bl	80004d8 <__aeabi_dmul>
 800db54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db58:	e7bc      	b.n	800dad4 <_dtoa_r+0x5b4>
 800db5a:	4656      	mov	r6, sl
 800db5c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800db60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db64:	4620      	mov	r0, r4
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fde0 	bl	800072c <__aeabi_ddiv>
 800db6c:	f7f2 ff64 	bl	8000a38 <__aeabi_d2iz>
 800db70:	4680      	mov	r8, r0
 800db72:	f7f2 fc47 	bl	8000404 <__aeabi_i2d>
 800db76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db7a:	f7f2 fcad 	bl	80004d8 <__aeabi_dmul>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4620      	mov	r0, r4
 800db84:	4629      	mov	r1, r5
 800db86:	f7f2 faef 	bl	8000168 <__aeabi_dsub>
 800db8a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800db8e:	9d08      	ldr	r5, [sp, #32]
 800db90:	f806 4b01 	strb.w	r4, [r6], #1
 800db94:	eba6 040a 	sub.w	r4, r6, sl
 800db98:	42a5      	cmp	r5, r4
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	d133      	bne.n	800dc08 <_dtoa_r+0x6e8>
 800dba0:	f7f2 fae4 	bl	800016c <__adddf3>
 800dba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dba8:	4604      	mov	r4, r0
 800dbaa:	460d      	mov	r5, r1
 800dbac:	f7f2 ff24 	bl	80009f8 <__aeabi_dcmpgt>
 800dbb0:	b9c0      	cbnz	r0, 800dbe4 <_dtoa_r+0x6c4>
 800dbb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	4629      	mov	r1, r5
 800dbba:	f7f2 fef5 	bl	80009a8 <__aeabi_dcmpeq>
 800dbbe:	b110      	cbz	r0, 800dbc6 <_dtoa_r+0x6a6>
 800dbc0:	f018 0f01 	tst.w	r8, #1
 800dbc4:	d10e      	bne.n	800dbe4 <_dtoa_r+0x6c4>
 800dbc6:	4648      	mov	r0, r9
 800dbc8:	9903      	ldr	r1, [sp, #12]
 800dbca:	f000 fbbb 	bl	800e344 <_Bfree>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	7033      	strb	r3, [r6, #0]
 800dbd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dbd4:	3701      	adds	r7, #1
 800dbd6:	601f      	str	r7, [r3, #0]
 800dbd8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f000 824b 	beq.w	800e076 <_dtoa_r+0xb56>
 800dbe0:	601e      	str	r6, [r3, #0]
 800dbe2:	e248      	b.n	800e076 <_dtoa_r+0xb56>
 800dbe4:	46b8      	mov	r8, r7
 800dbe6:	4633      	mov	r3, r6
 800dbe8:	461e      	mov	r6, r3
 800dbea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbee:	2a39      	cmp	r2, #57	@ 0x39
 800dbf0:	d106      	bne.n	800dc00 <_dtoa_r+0x6e0>
 800dbf2:	459a      	cmp	sl, r3
 800dbf4:	d1f8      	bne.n	800dbe8 <_dtoa_r+0x6c8>
 800dbf6:	2230      	movs	r2, #48	@ 0x30
 800dbf8:	f108 0801 	add.w	r8, r8, #1
 800dbfc:	f88a 2000 	strb.w	r2, [sl]
 800dc00:	781a      	ldrb	r2, [r3, #0]
 800dc02:	3201      	adds	r2, #1
 800dc04:	701a      	strb	r2, [r3, #0]
 800dc06:	e7a0      	b.n	800db4a <_dtoa_r+0x62a>
 800dc08:	2200      	movs	r2, #0
 800dc0a:	4b6f      	ldr	r3, [pc, #444]	@ (800ddc8 <_dtoa_r+0x8a8>)
 800dc0c:	f7f2 fc64 	bl	80004d8 <__aeabi_dmul>
 800dc10:	2200      	movs	r2, #0
 800dc12:	2300      	movs	r3, #0
 800dc14:	4604      	mov	r4, r0
 800dc16:	460d      	mov	r5, r1
 800dc18:	f7f2 fec6 	bl	80009a8 <__aeabi_dcmpeq>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d09f      	beq.n	800db60 <_dtoa_r+0x640>
 800dc20:	e7d1      	b.n	800dbc6 <_dtoa_r+0x6a6>
 800dc22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc24:	2a00      	cmp	r2, #0
 800dc26:	f000 80ea 	beq.w	800ddfe <_dtoa_r+0x8de>
 800dc2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dc2c:	2a01      	cmp	r2, #1
 800dc2e:	f300 80cd 	bgt.w	800ddcc <_dtoa_r+0x8ac>
 800dc32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	f000 80c1 	beq.w	800ddbc <_dtoa_r+0x89c>
 800dc3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc40:	9e04      	ldr	r6, [sp, #16]
 800dc42:	9a04      	ldr	r2, [sp, #16]
 800dc44:	2101      	movs	r1, #1
 800dc46:	441a      	add	r2, r3
 800dc48:	9204      	str	r2, [sp, #16]
 800dc4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc4c:	4648      	mov	r0, r9
 800dc4e:	441a      	add	r2, r3
 800dc50:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc52:	f000 fc75 	bl	800e540 <__i2b>
 800dc56:	4605      	mov	r5, r0
 800dc58:	b166      	cbz	r6, 800dc74 <_dtoa_r+0x754>
 800dc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd09      	ble.n	800dc74 <_dtoa_r+0x754>
 800dc60:	42b3      	cmp	r3, r6
 800dc62:	bfa8      	it	ge
 800dc64:	4633      	movge	r3, r6
 800dc66:	9a04      	ldr	r2, [sp, #16]
 800dc68:	1af6      	subs	r6, r6, r3
 800dc6a:	1ad2      	subs	r2, r2, r3
 800dc6c:	9204      	str	r2, [sp, #16]
 800dc6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc76:	b30b      	cbz	r3, 800dcbc <_dtoa_r+0x79c>
 800dc78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f000 80c6 	beq.w	800de0c <_dtoa_r+0x8ec>
 800dc80:	2c00      	cmp	r4, #0
 800dc82:	f000 80c0 	beq.w	800de06 <_dtoa_r+0x8e6>
 800dc86:	4629      	mov	r1, r5
 800dc88:	4622      	mov	r2, r4
 800dc8a:	4648      	mov	r0, r9
 800dc8c:	f000 fd10 	bl	800e6b0 <__pow5mult>
 800dc90:	9a03      	ldr	r2, [sp, #12]
 800dc92:	4601      	mov	r1, r0
 800dc94:	4605      	mov	r5, r0
 800dc96:	4648      	mov	r0, r9
 800dc98:	f000 fc68 	bl	800e56c <__multiply>
 800dc9c:	9903      	ldr	r1, [sp, #12]
 800dc9e:	4680      	mov	r8, r0
 800dca0:	4648      	mov	r0, r9
 800dca2:	f000 fb4f 	bl	800e344 <_Bfree>
 800dca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dca8:	1b1b      	subs	r3, r3, r4
 800dcaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcac:	f000 80b1 	beq.w	800de12 <_dtoa_r+0x8f2>
 800dcb0:	4641      	mov	r1, r8
 800dcb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcb4:	4648      	mov	r0, r9
 800dcb6:	f000 fcfb 	bl	800e6b0 <__pow5mult>
 800dcba:	9003      	str	r0, [sp, #12]
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	4648      	mov	r0, r9
 800dcc0:	f000 fc3e 	bl	800e540 <__i2b>
 800dcc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f000 81d8 	beq.w	800e07e <_dtoa_r+0xb5e>
 800dcce:	461a      	mov	r2, r3
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4648      	mov	r0, r9
 800dcd4:	f000 fcec 	bl	800e6b0 <__pow5mult>
 800dcd8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dcda:	4604      	mov	r4, r0
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	f300 809f 	bgt.w	800de20 <_dtoa_r+0x900>
 800dce2:	9b06      	ldr	r3, [sp, #24]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f040 8097 	bne.w	800de18 <_dtoa_r+0x8f8>
 800dcea:	9b07      	ldr	r3, [sp, #28]
 800dcec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 8093 	bne.w	800de1c <_dtoa_r+0x8fc>
 800dcf6:	9b07      	ldr	r3, [sp, #28]
 800dcf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dcfc:	0d1b      	lsrs	r3, r3, #20
 800dcfe:	051b      	lsls	r3, r3, #20
 800dd00:	b133      	cbz	r3, 800dd10 <_dtoa_r+0x7f0>
 800dd02:	9b04      	ldr	r3, [sp, #16]
 800dd04:	3301      	adds	r3, #1
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	2301      	movs	r3, #1
 800dd10:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 81b8 	beq.w	800e08a <_dtoa_r+0xb6a>
 800dd1a:	6923      	ldr	r3, [r4, #16]
 800dd1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd20:	6918      	ldr	r0, [r3, #16]
 800dd22:	f000 fbc1 	bl	800e4a8 <__hi0bits>
 800dd26:	f1c0 0020 	rsb	r0, r0, #32
 800dd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd2c:	4418      	add	r0, r3
 800dd2e:	f010 001f 	ands.w	r0, r0, #31
 800dd32:	f000 8082 	beq.w	800de3a <_dtoa_r+0x91a>
 800dd36:	f1c0 0320 	rsb	r3, r0, #32
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	dd73      	ble.n	800de26 <_dtoa_r+0x906>
 800dd3e:	9b04      	ldr	r3, [sp, #16]
 800dd40:	f1c0 001c 	rsb	r0, r0, #28
 800dd44:	4403      	add	r3, r0
 800dd46:	9304      	str	r3, [sp, #16]
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	4406      	add	r6, r0
 800dd4c:	4403      	add	r3, r0
 800dd4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd50:	9b04      	ldr	r3, [sp, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	dd05      	ble.n	800dd62 <_dtoa_r+0x842>
 800dd56:	461a      	mov	r2, r3
 800dd58:	4648      	mov	r0, r9
 800dd5a:	9903      	ldr	r1, [sp, #12]
 800dd5c:	f000 fd02 	bl	800e764 <__lshift>
 800dd60:	9003      	str	r0, [sp, #12]
 800dd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	dd05      	ble.n	800dd74 <_dtoa_r+0x854>
 800dd68:	4621      	mov	r1, r4
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4648      	mov	r0, r9
 800dd6e:	f000 fcf9 	bl	800e764 <__lshift>
 800dd72:	4604      	mov	r4, r0
 800dd74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d061      	beq.n	800de3e <_dtoa_r+0x91e>
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	9803      	ldr	r0, [sp, #12]
 800dd7e:	f000 fd5d 	bl	800e83c <__mcmp>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	da5b      	bge.n	800de3e <_dtoa_r+0x91e>
 800dd86:	2300      	movs	r3, #0
 800dd88:	220a      	movs	r2, #10
 800dd8a:	4648      	mov	r0, r9
 800dd8c:	9903      	ldr	r1, [sp, #12]
 800dd8e:	f000 fafb 	bl	800e388 <__multadd>
 800dd92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd94:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd98:	9003      	str	r0, [sp, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 8177 	beq.w	800e08e <_dtoa_r+0xb6e>
 800dda0:	4629      	mov	r1, r5
 800dda2:	2300      	movs	r3, #0
 800dda4:	220a      	movs	r2, #10
 800dda6:	4648      	mov	r0, r9
 800dda8:	f000 faee 	bl	800e388 <__multadd>
 800ddac:	f1bb 0f00 	cmp.w	fp, #0
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	dc6f      	bgt.n	800de94 <_dtoa_r+0x974>
 800ddb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	dc49      	bgt.n	800de4e <_dtoa_r+0x92e>
 800ddba:	e06b      	b.n	800de94 <_dtoa_r+0x974>
 800ddbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ddbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ddc2:	e73c      	b.n	800dc3e <_dtoa_r+0x71e>
 800ddc4:	3fe00000 	.word	0x3fe00000
 800ddc8:	40240000 	.word	0x40240000
 800ddcc:	9b08      	ldr	r3, [sp, #32]
 800ddce:	1e5c      	subs	r4, r3, #1
 800ddd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddd2:	42a3      	cmp	r3, r4
 800ddd4:	db09      	blt.n	800ddea <_dtoa_r+0x8ca>
 800ddd6:	1b1c      	subs	r4, r3, r4
 800ddd8:	9b08      	ldr	r3, [sp, #32]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f6bf af30 	bge.w	800dc40 <_dtoa_r+0x720>
 800dde0:	9b04      	ldr	r3, [sp, #16]
 800dde2:	9a08      	ldr	r2, [sp, #32]
 800dde4:	1a9e      	subs	r6, r3, r2
 800dde6:	2300      	movs	r3, #0
 800dde8:	e72b      	b.n	800dc42 <_dtoa_r+0x722>
 800ddea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddee:	1ae3      	subs	r3, r4, r3
 800ddf0:	441a      	add	r2, r3
 800ddf2:	940a      	str	r4, [sp, #40]	@ 0x28
 800ddf4:	9e04      	ldr	r6, [sp, #16]
 800ddf6:	2400      	movs	r4, #0
 800ddf8:	9b08      	ldr	r3, [sp, #32]
 800ddfa:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddfc:	e721      	b.n	800dc42 <_dtoa_r+0x722>
 800ddfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de00:	9e04      	ldr	r6, [sp, #16]
 800de02:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800de04:	e728      	b.n	800dc58 <_dtoa_r+0x738>
 800de06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800de0a:	e751      	b.n	800dcb0 <_dtoa_r+0x790>
 800de0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de0e:	9903      	ldr	r1, [sp, #12]
 800de10:	e750      	b.n	800dcb4 <_dtoa_r+0x794>
 800de12:	f8cd 800c 	str.w	r8, [sp, #12]
 800de16:	e751      	b.n	800dcbc <_dtoa_r+0x79c>
 800de18:	2300      	movs	r3, #0
 800de1a:	e779      	b.n	800dd10 <_dtoa_r+0x7f0>
 800de1c:	9b06      	ldr	r3, [sp, #24]
 800de1e:	e777      	b.n	800dd10 <_dtoa_r+0x7f0>
 800de20:	2300      	movs	r3, #0
 800de22:	930a      	str	r3, [sp, #40]	@ 0x28
 800de24:	e779      	b.n	800dd1a <_dtoa_r+0x7fa>
 800de26:	d093      	beq.n	800dd50 <_dtoa_r+0x830>
 800de28:	9a04      	ldr	r2, [sp, #16]
 800de2a:	331c      	adds	r3, #28
 800de2c:	441a      	add	r2, r3
 800de2e:	9204      	str	r2, [sp, #16]
 800de30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de32:	441e      	add	r6, r3
 800de34:	441a      	add	r2, r3
 800de36:	9209      	str	r2, [sp, #36]	@ 0x24
 800de38:	e78a      	b.n	800dd50 <_dtoa_r+0x830>
 800de3a:	4603      	mov	r3, r0
 800de3c:	e7f4      	b.n	800de28 <_dtoa_r+0x908>
 800de3e:	9b08      	ldr	r3, [sp, #32]
 800de40:	46b8      	mov	r8, r7
 800de42:	2b00      	cmp	r3, #0
 800de44:	dc20      	bgt.n	800de88 <_dtoa_r+0x968>
 800de46:	469b      	mov	fp, r3
 800de48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	dd1e      	ble.n	800de8c <_dtoa_r+0x96c>
 800de4e:	f1bb 0f00 	cmp.w	fp, #0
 800de52:	f47f adb1 	bne.w	800d9b8 <_dtoa_r+0x498>
 800de56:	4621      	mov	r1, r4
 800de58:	465b      	mov	r3, fp
 800de5a:	2205      	movs	r2, #5
 800de5c:	4648      	mov	r0, r9
 800de5e:	f000 fa93 	bl	800e388 <__multadd>
 800de62:	4601      	mov	r1, r0
 800de64:	4604      	mov	r4, r0
 800de66:	9803      	ldr	r0, [sp, #12]
 800de68:	f000 fce8 	bl	800e83c <__mcmp>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	f77f ada3 	ble.w	800d9b8 <_dtoa_r+0x498>
 800de72:	4656      	mov	r6, sl
 800de74:	2331      	movs	r3, #49	@ 0x31
 800de76:	f108 0801 	add.w	r8, r8, #1
 800de7a:	f806 3b01 	strb.w	r3, [r6], #1
 800de7e:	e59f      	b.n	800d9c0 <_dtoa_r+0x4a0>
 800de80:	46b8      	mov	r8, r7
 800de82:	9c08      	ldr	r4, [sp, #32]
 800de84:	4625      	mov	r5, r4
 800de86:	e7f4      	b.n	800de72 <_dtoa_r+0x952>
 800de88:	f8dd b020 	ldr.w	fp, [sp, #32]
 800de8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f000 8101 	beq.w	800e096 <_dtoa_r+0xb76>
 800de94:	2e00      	cmp	r6, #0
 800de96:	dd05      	ble.n	800dea4 <_dtoa_r+0x984>
 800de98:	4629      	mov	r1, r5
 800de9a:	4632      	mov	r2, r6
 800de9c:	4648      	mov	r0, r9
 800de9e:	f000 fc61 	bl	800e764 <__lshift>
 800dea2:	4605      	mov	r5, r0
 800dea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d05c      	beq.n	800df64 <_dtoa_r+0xa44>
 800deaa:	4648      	mov	r0, r9
 800deac:	6869      	ldr	r1, [r5, #4]
 800deae:	f000 fa09 	bl	800e2c4 <_Balloc>
 800deb2:	4606      	mov	r6, r0
 800deb4:	b928      	cbnz	r0, 800dec2 <_dtoa_r+0x9a2>
 800deb6:	4602      	mov	r2, r0
 800deb8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800debc:	4b80      	ldr	r3, [pc, #512]	@ (800e0c0 <_dtoa_r+0xba0>)
 800debe:	f7ff bb43 	b.w	800d548 <_dtoa_r+0x28>
 800dec2:	692a      	ldr	r2, [r5, #16]
 800dec4:	f105 010c 	add.w	r1, r5, #12
 800dec8:	3202      	adds	r2, #2
 800deca:	0092      	lsls	r2, r2, #2
 800decc:	300c      	adds	r0, #12
 800dece:	f002 facb 	bl	8010468 <memcpy>
 800ded2:	2201      	movs	r2, #1
 800ded4:	4631      	mov	r1, r6
 800ded6:	4648      	mov	r0, r9
 800ded8:	f000 fc44 	bl	800e764 <__lshift>
 800dedc:	462f      	mov	r7, r5
 800dede:	4605      	mov	r5, r0
 800dee0:	f10a 0301 	add.w	r3, sl, #1
 800dee4:	9304      	str	r3, [sp, #16]
 800dee6:	eb0a 030b 	add.w	r3, sl, fp
 800deea:	930a      	str	r3, [sp, #40]	@ 0x28
 800deec:	9b06      	ldr	r3, [sp, #24]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	9309      	str	r3, [sp, #36]	@ 0x24
 800def4:	9b04      	ldr	r3, [sp, #16]
 800def6:	4621      	mov	r1, r4
 800def8:	9803      	ldr	r0, [sp, #12]
 800defa:	f103 3bff 	add.w	fp, r3, #4294967295
 800defe:	f7ff fa87 	bl	800d410 <quorem>
 800df02:	4603      	mov	r3, r0
 800df04:	4639      	mov	r1, r7
 800df06:	3330      	adds	r3, #48	@ 0x30
 800df08:	9006      	str	r0, [sp, #24]
 800df0a:	9803      	ldr	r0, [sp, #12]
 800df0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df0e:	f000 fc95 	bl	800e83c <__mcmp>
 800df12:	462a      	mov	r2, r5
 800df14:	9008      	str	r0, [sp, #32]
 800df16:	4621      	mov	r1, r4
 800df18:	4648      	mov	r0, r9
 800df1a:	f000 fcab 	bl	800e874 <__mdiff>
 800df1e:	68c2      	ldr	r2, [r0, #12]
 800df20:	4606      	mov	r6, r0
 800df22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df24:	bb02      	cbnz	r2, 800df68 <_dtoa_r+0xa48>
 800df26:	4601      	mov	r1, r0
 800df28:	9803      	ldr	r0, [sp, #12]
 800df2a:	f000 fc87 	bl	800e83c <__mcmp>
 800df2e:	4602      	mov	r2, r0
 800df30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df32:	4631      	mov	r1, r6
 800df34:	4648      	mov	r0, r9
 800df36:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800df3a:	f000 fa03 	bl	800e344 <_Bfree>
 800df3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800df40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df42:	9e04      	ldr	r6, [sp, #16]
 800df44:	ea42 0103 	orr.w	r1, r2, r3
 800df48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df4a:	4319      	orrs	r1, r3
 800df4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df4e:	d10d      	bne.n	800df6c <_dtoa_r+0xa4c>
 800df50:	2b39      	cmp	r3, #57	@ 0x39
 800df52:	d027      	beq.n	800dfa4 <_dtoa_r+0xa84>
 800df54:	9a08      	ldr	r2, [sp, #32]
 800df56:	2a00      	cmp	r2, #0
 800df58:	dd01      	ble.n	800df5e <_dtoa_r+0xa3e>
 800df5a:	9b06      	ldr	r3, [sp, #24]
 800df5c:	3331      	adds	r3, #49	@ 0x31
 800df5e:	f88b 3000 	strb.w	r3, [fp]
 800df62:	e52e      	b.n	800d9c2 <_dtoa_r+0x4a2>
 800df64:	4628      	mov	r0, r5
 800df66:	e7b9      	b.n	800dedc <_dtoa_r+0x9bc>
 800df68:	2201      	movs	r2, #1
 800df6a:	e7e2      	b.n	800df32 <_dtoa_r+0xa12>
 800df6c:	9908      	ldr	r1, [sp, #32]
 800df6e:	2900      	cmp	r1, #0
 800df70:	db04      	blt.n	800df7c <_dtoa_r+0xa5c>
 800df72:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800df74:	4301      	orrs	r1, r0
 800df76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df78:	4301      	orrs	r1, r0
 800df7a:	d120      	bne.n	800dfbe <_dtoa_r+0xa9e>
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	ddee      	ble.n	800df5e <_dtoa_r+0xa3e>
 800df80:	2201      	movs	r2, #1
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	4648      	mov	r0, r9
 800df86:	9304      	str	r3, [sp, #16]
 800df88:	f000 fbec 	bl	800e764 <__lshift>
 800df8c:	4621      	mov	r1, r4
 800df8e:	9003      	str	r0, [sp, #12]
 800df90:	f000 fc54 	bl	800e83c <__mcmp>
 800df94:	2800      	cmp	r0, #0
 800df96:	9b04      	ldr	r3, [sp, #16]
 800df98:	dc02      	bgt.n	800dfa0 <_dtoa_r+0xa80>
 800df9a:	d1e0      	bne.n	800df5e <_dtoa_r+0xa3e>
 800df9c:	07da      	lsls	r2, r3, #31
 800df9e:	d5de      	bpl.n	800df5e <_dtoa_r+0xa3e>
 800dfa0:	2b39      	cmp	r3, #57	@ 0x39
 800dfa2:	d1da      	bne.n	800df5a <_dtoa_r+0xa3a>
 800dfa4:	2339      	movs	r3, #57	@ 0x39
 800dfa6:	f88b 3000 	strb.w	r3, [fp]
 800dfaa:	4633      	mov	r3, r6
 800dfac:	461e      	mov	r6, r3
 800dfae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	2a39      	cmp	r2, #57	@ 0x39
 800dfb6:	d04e      	beq.n	800e056 <_dtoa_r+0xb36>
 800dfb8:	3201      	adds	r2, #1
 800dfba:	701a      	strb	r2, [r3, #0]
 800dfbc:	e501      	b.n	800d9c2 <_dtoa_r+0x4a2>
 800dfbe:	2a00      	cmp	r2, #0
 800dfc0:	dd03      	ble.n	800dfca <_dtoa_r+0xaaa>
 800dfc2:	2b39      	cmp	r3, #57	@ 0x39
 800dfc4:	d0ee      	beq.n	800dfa4 <_dtoa_r+0xa84>
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	e7c9      	b.n	800df5e <_dtoa_r+0xa3e>
 800dfca:	9a04      	ldr	r2, [sp, #16]
 800dfcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dfce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dfd2:	428a      	cmp	r2, r1
 800dfd4:	d028      	beq.n	800e028 <_dtoa_r+0xb08>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	220a      	movs	r2, #10
 800dfda:	9903      	ldr	r1, [sp, #12]
 800dfdc:	4648      	mov	r0, r9
 800dfde:	f000 f9d3 	bl	800e388 <__multadd>
 800dfe2:	42af      	cmp	r7, r5
 800dfe4:	9003      	str	r0, [sp, #12]
 800dfe6:	f04f 0300 	mov.w	r3, #0
 800dfea:	f04f 020a 	mov.w	r2, #10
 800dfee:	4639      	mov	r1, r7
 800dff0:	4648      	mov	r0, r9
 800dff2:	d107      	bne.n	800e004 <_dtoa_r+0xae4>
 800dff4:	f000 f9c8 	bl	800e388 <__multadd>
 800dff8:	4607      	mov	r7, r0
 800dffa:	4605      	mov	r5, r0
 800dffc:	9b04      	ldr	r3, [sp, #16]
 800dffe:	3301      	adds	r3, #1
 800e000:	9304      	str	r3, [sp, #16]
 800e002:	e777      	b.n	800def4 <_dtoa_r+0x9d4>
 800e004:	f000 f9c0 	bl	800e388 <__multadd>
 800e008:	4629      	mov	r1, r5
 800e00a:	4607      	mov	r7, r0
 800e00c:	2300      	movs	r3, #0
 800e00e:	220a      	movs	r2, #10
 800e010:	4648      	mov	r0, r9
 800e012:	f000 f9b9 	bl	800e388 <__multadd>
 800e016:	4605      	mov	r5, r0
 800e018:	e7f0      	b.n	800dffc <_dtoa_r+0xadc>
 800e01a:	f1bb 0f00 	cmp.w	fp, #0
 800e01e:	bfcc      	ite	gt
 800e020:	465e      	movgt	r6, fp
 800e022:	2601      	movle	r6, #1
 800e024:	2700      	movs	r7, #0
 800e026:	4456      	add	r6, sl
 800e028:	2201      	movs	r2, #1
 800e02a:	9903      	ldr	r1, [sp, #12]
 800e02c:	4648      	mov	r0, r9
 800e02e:	9304      	str	r3, [sp, #16]
 800e030:	f000 fb98 	bl	800e764 <__lshift>
 800e034:	4621      	mov	r1, r4
 800e036:	9003      	str	r0, [sp, #12]
 800e038:	f000 fc00 	bl	800e83c <__mcmp>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	dcb4      	bgt.n	800dfaa <_dtoa_r+0xa8a>
 800e040:	d102      	bne.n	800e048 <_dtoa_r+0xb28>
 800e042:	9b04      	ldr	r3, [sp, #16]
 800e044:	07db      	lsls	r3, r3, #31
 800e046:	d4b0      	bmi.n	800dfaa <_dtoa_r+0xa8a>
 800e048:	4633      	mov	r3, r6
 800e04a:	461e      	mov	r6, r3
 800e04c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e050:	2a30      	cmp	r2, #48	@ 0x30
 800e052:	d0fa      	beq.n	800e04a <_dtoa_r+0xb2a>
 800e054:	e4b5      	b.n	800d9c2 <_dtoa_r+0x4a2>
 800e056:	459a      	cmp	sl, r3
 800e058:	d1a8      	bne.n	800dfac <_dtoa_r+0xa8c>
 800e05a:	2331      	movs	r3, #49	@ 0x31
 800e05c:	f108 0801 	add.w	r8, r8, #1
 800e060:	f88a 3000 	strb.w	r3, [sl]
 800e064:	e4ad      	b.n	800d9c2 <_dtoa_r+0x4a2>
 800e066:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e068:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e0c4 <_dtoa_r+0xba4>
 800e06c:	b11b      	cbz	r3, 800e076 <_dtoa_r+0xb56>
 800e06e:	f10a 0308 	add.w	r3, sl, #8
 800e072:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e074:	6013      	str	r3, [r2, #0]
 800e076:	4650      	mov	r0, sl
 800e078:	b017      	add	sp, #92	@ 0x5c
 800e07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e080:	2b01      	cmp	r3, #1
 800e082:	f77f ae2e 	ble.w	800dce2 <_dtoa_r+0x7c2>
 800e086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e088:	930a      	str	r3, [sp, #40]	@ 0x28
 800e08a:	2001      	movs	r0, #1
 800e08c:	e64d      	b.n	800dd2a <_dtoa_r+0x80a>
 800e08e:	f1bb 0f00 	cmp.w	fp, #0
 800e092:	f77f aed9 	ble.w	800de48 <_dtoa_r+0x928>
 800e096:	4656      	mov	r6, sl
 800e098:	4621      	mov	r1, r4
 800e09a:	9803      	ldr	r0, [sp, #12]
 800e09c:	f7ff f9b8 	bl	800d410 <quorem>
 800e0a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e0a4:	f806 3b01 	strb.w	r3, [r6], #1
 800e0a8:	eba6 020a 	sub.w	r2, r6, sl
 800e0ac:	4593      	cmp	fp, r2
 800e0ae:	ddb4      	ble.n	800e01a <_dtoa_r+0xafa>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	220a      	movs	r2, #10
 800e0b4:	4648      	mov	r0, r9
 800e0b6:	9903      	ldr	r1, [sp, #12]
 800e0b8:	f000 f966 	bl	800e388 <__multadd>
 800e0bc:	9003      	str	r0, [sp, #12]
 800e0be:	e7eb      	b.n	800e098 <_dtoa_r+0xb78>
 800e0c0:	0801198d 	.word	0x0801198d
 800e0c4:	08011911 	.word	0x08011911

0800e0c8 <_free_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	2900      	cmp	r1, #0
 800e0ce:	d040      	beq.n	800e152 <_free_r+0x8a>
 800e0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d4:	1f0c      	subs	r4, r1, #4
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	bfb8      	it	lt
 800e0da:	18e4      	addlt	r4, r4, r3
 800e0dc:	f000 f8e6 	bl	800e2ac <__malloc_lock>
 800e0e0:	4a1c      	ldr	r2, [pc, #112]	@ (800e154 <_free_r+0x8c>)
 800e0e2:	6813      	ldr	r3, [r2, #0]
 800e0e4:	b933      	cbnz	r3, 800e0f4 <_free_r+0x2c>
 800e0e6:	6063      	str	r3, [r4, #4]
 800e0e8:	6014      	str	r4, [r2, #0]
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0f0:	f000 b8e2 	b.w	800e2b8 <__malloc_unlock>
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	d908      	bls.n	800e10a <_free_r+0x42>
 800e0f8:	6820      	ldr	r0, [r4, #0]
 800e0fa:	1821      	adds	r1, r4, r0
 800e0fc:	428b      	cmp	r3, r1
 800e0fe:	bf01      	itttt	eq
 800e100:	6819      	ldreq	r1, [r3, #0]
 800e102:	685b      	ldreq	r3, [r3, #4]
 800e104:	1809      	addeq	r1, r1, r0
 800e106:	6021      	streq	r1, [r4, #0]
 800e108:	e7ed      	b.n	800e0e6 <_free_r+0x1e>
 800e10a:	461a      	mov	r2, r3
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	b10b      	cbz	r3, 800e114 <_free_r+0x4c>
 800e110:	42a3      	cmp	r3, r4
 800e112:	d9fa      	bls.n	800e10a <_free_r+0x42>
 800e114:	6811      	ldr	r1, [r2, #0]
 800e116:	1850      	adds	r0, r2, r1
 800e118:	42a0      	cmp	r0, r4
 800e11a:	d10b      	bne.n	800e134 <_free_r+0x6c>
 800e11c:	6820      	ldr	r0, [r4, #0]
 800e11e:	4401      	add	r1, r0
 800e120:	1850      	adds	r0, r2, r1
 800e122:	4283      	cmp	r3, r0
 800e124:	6011      	str	r1, [r2, #0]
 800e126:	d1e0      	bne.n	800e0ea <_free_r+0x22>
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	4408      	add	r0, r1
 800e12e:	6010      	str	r0, [r2, #0]
 800e130:	6053      	str	r3, [r2, #4]
 800e132:	e7da      	b.n	800e0ea <_free_r+0x22>
 800e134:	d902      	bls.n	800e13c <_free_r+0x74>
 800e136:	230c      	movs	r3, #12
 800e138:	602b      	str	r3, [r5, #0]
 800e13a:	e7d6      	b.n	800e0ea <_free_r+0x22>
 800e13c:	6820      	ldr	r0, [r4, #0]
 800e13e:	1821      	adds	r1, r4, r0
 800e140:	428b      	cmp	r3, r1
 800e142:	bf01      	itttt	eq
 800e144:	6819      	ldreq	r1, [r3, #0]
 800e146:	685b      	ldreq	r3, [r3, #4]
 800e148:	1809      	addeq	r1, r1, r0
 800e14a:	6021      	streq	r1, [r4, #0]
 800e14c:	6063      	str	r3, [r4, #4]
 800e14e:	6054      	str	r4, [r2, #4]
 800e150:	e7cb      	b.n	800e0ea <_free_r+0x22>
 800e152:	bd38      	pop	{r3, r4, r5, pc}
 800e154:	20001974 	.word	0x20001974

0800e158 <malloc>:
 800e158:	4b02      	ldr	r3, [pc, #8]	@ (800e164 <malloc+0xc>)
 800e15a:	4601      	mov	r1, r0
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f000 b825 	b.w	800e1ac <_malloc_r>
 800e162:	bf00      	nop
 800e164:	2000019c 	.word	0x2000019c

0800e168 <sbrk_aligned>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	4e0f      	ldr	r6, [pc, #60]	@ (800e1a8 <sbrk_aligned+0x40>)
 800e16c:	460c      	mov	r4, r1
 800e16e:	6831      	ldr	r1, [r6, #0]
 800e170:	4605      	mov	r5, r0
 800e172:	b911      	cbnz	r1, 800e17a <sbrk_aligned+0x12>
 800e174:	f002 f968 	bl	8010448 <_sbrk_r>
 800e178:	6030      	str	r0, [r6, #0]
 800e17a:	4621      	mov	r1, r4
 800e17c:	4628      	mov	r0, r5
 800e17e:	f002 f963 	bl	8010448 <_sbrk_r>
 800e182:	1c43      	adds	r3, r0, #1
 800e184:	d103      	bne.n	800e18e <sbrk_aligned+0x26>
 800e186:	f04f 34ff 	mov.w	r4, #4294967295
 800e18a:	4620      	mov	r0, r4
 800e18c:	bd70      	pop	{r4, r5, r6, pc}
 800e18e:	1cc4      	adds	r4, r0, #3
 800e190:	f024 0403 	bic.w	r4, r4, #3
 800e194:	42a0      	cmp	r0, r4
 800e196:	d0f8      	beq.n	800e18a <sbrk_aligned+0x22>
 800e198:	1a21      	subs	r1, r4, r0
 800e19a:	4628      	mov	r0, r5
 800e19c:	f002 f954 	bl	8010448 <_sbrk_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d1f2      	bne.n	800e18a <sbrk_aligned+0x22>
 800e1a4:	e7ef      	b.n	800e186 <sbrk_aligned+0x1e>
 800e1a6:	bf00      	nop
 800e1a8:	20001970 	.word	0x20001970

0800e1ac <_malloc_r>:
 800e1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b0:	1ccd      	adds	r5, r1, #3
 800e1b2:	f025 0503 	bic.w	r5, r5, #3
 800e1b6:	3508      	adds	r5, #8
 800e1b8:	2d0c      	cmp	r5, #12
 800e1ba:	bf38      	it	cc
 800e1bc:	250c      	movcc	r5, #12
 800e1be:	2d00      	cmp	r5, #0
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	db01      	blt.n	800e1c8 <_malloc_r+0x1c>
 800e1c4:	42a9      	cmp	r1, r5
 800e1c6:	d904      	bls.n	800e1d2 <_malloc_r+0x26>
 800e1c8:	230c      	movs	r3, #12
 800e1ca:	6033      	str	r3, [r6, #0]
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2a8 <_malloc_r+0xfc>
 800e1d6:	f000 f869 	bl	800e2ac <__malloc_lock>
 800e1da:	f8d8 3000 	ldr.w	r3, [r8]
 800e1de:	461c      	mov	r4, r3
 800e1e0:	bb44      	cbnz	r4, 800e234 <_malloc_r+0x88>
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f7ff ffbf 	bl	800e168 <sbrk_aligned>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	d158      	bne.n	800e2a2 <_malloc_r+0xf6>
 800e1f0:	f8d8 4000 	ldr.w	r4, [r8]
 800e1f4:	4627      	mov	r7, r4
 800e1f6:	2f00      	cmp	r7, #0
 800e1f8:	d143      	bne.n	800e282 <_malloc_r+0xd6>
 800e1fa:	2c00      	cmp	r4, #0
 800e1fc:	d04b      	beq.n	800e296 <_malloc_r+0xea>
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	4639      	mov	r1, r7
 800e202:	4630      	mov	r0, r6
 800e204:	eb04 0903 	add.w	r9, r4, r3
 800e208:	f002 f91e 	bl	8010448 <_sbrk_r>
 800e20c:	4581      	cmp	r9, r0
 800e20e:	d142      	bne.n	800e296 <_malloc_r+0xea>
 800e210:	6821      	ldr	r1, [r4, #0]
 800e212:	4630      	mov	r0, r6
 800e214:	1a6d      	subs	r5, r5, r1
 800e216:	4629      	mov	r1, r5
 800e218:	f7ff ffa6 	bl	800e168 <sbrk_aligned>
 800e21c:	3001      	adds	r0, #1
 800e21e:	d03a      	beq.n	800e296 <_malloc_r+0xea>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	442b      	add	r3, r5
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	f8d8 3000 	ldr.w	r3, [r8]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	bb62      	cbnz	r2, 800e288 <_malloc_r+0xdc>
 800e22e:	f8c8 7000 	str.w	r7, [r8]
 800e232:	e00f      	b.n	800e254 <_malloc_r+0xa8>
 800e234:	6822      	ldr	r2, [r4, #0]
 800e236:	1b52      	subs	r2, r2, r5
 800e238:	d420      	bmi.n	800e27c <_malloc_r+0xd0>
 800e23a:	2a0b      	cmp	r2, #11
 800e23c:	d917      	bls.n	800e26e <_malloc_r+0xc2>
 800e23e:	1961      	adds	r1, r4, r5
 800e240:	42a3      	cmp	r3, r4
 800e242:	6025      	str	r5, [r4, #0]
 800e244:	bf18      	it	ne
 800e246:	6059      	strne	r1, [r3, #4]
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	bf08      	it	eq
 800e24c:	f8c8 1000 	streq.w	r1, [r8]
 800e250:	5162      	str	r2, [r4, r5]
 800e252:	604b      	str	r3, [r1, #4]
 800e254:	4630      	mov	r0, r6
 800e256:	f000 f82f 	bl	800e2b8 <__malloc_unlock>
 800e25a:	f104 000b 	add.w	r0, r4, #11
 800e25e:	1d23      	adds	r3, r4, #4
 800e260:	f020 0007 	bic.w	r0, r0, #7
 800e264:	1ac2      	subs	r2, r0, r3
 800e266:	bf1c      	itt	ne
 800e268:	1a1b      	subne	r3, r3, r0
 800e26a:	50a3      	strne	r3, [r4, r2]
 800e26c:	e7af      	b.n	800e1ce <_malloc_r+0x22>
 800e26e:	6862      	ldr	r2, [r4, #4]
 800e270:	42a3      	cmp	r3, r4
 800e272:	bf0c      	ite	eq
 800e274:	f8c8 2000 	streq.w	r2, [r8]
 800e278:	605a      	strne	r2, [r3, #4]
 800e27a:	e7eb      	b.n	800e254 <_malloc_r+0xa8>
 800e27c:	4623      	mov	r3, r4
 800e27e:	6864      	ldr	r4, [r4, #4]
 800e280:	e7ae      	b.n	800e1e0 <_malloc_r+0x34>
 800e282:	463c      	mov	r4, r7
 800e284:	687f      	ldr	r7, [r7, #4]
 800e286:	e7b6      	b.n	800e1f6 <_malloc_r+0x4a>
 800e288:	461a      	mov	r2, r3
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d1fb      	bne.n	800e288 <_malloc_r+0xdc>
 800e290:	2300      	movs	r3, #0
 800e292:	6053      	str	r3, [r2, #4]
 800e294:	e7de      	b.n	800e254 <_malloc_r+0xa8>
 800e296:	230c      	movs	r3, #12
 800e298:	4630      	mov	r0, r6
 800e29a:	6033      	str	r3, [r6, #0]
 800e29c:	f000 f80c 	bl	800e2b8 <__malloc_unlock>
 800e2a0:	e794      	b.n	800e1cc <_malloc_r+0x20>
 800e2a2:	6005      	str	r5, [r0, #0]
 800e2a4:	e7d6      	b.n	800e254 <_malloc_r+0xa8>
 800e2a6:	bf00      	nop
 800e2a8:	20001974 	.word	0x20001974

0800e2ac <__malloc_lock>:
 800e2ac:	4801      	ldr	r0, [pc, #4]	@ (800e2b4 <__malloc_lock+0x8>)
 800e2ae:	f7ff b89a 	b.w	800d3e6 <__retarget_lock_acquire_recursive>
 800e2b2:	bf00      	nop
 800e2b4:	2000196c 	.word	0x2000196c

0800e2b8 <__malloc_unlock>:
 800e2b8:	4801      	ldr	r0, [pc, #4]	@ (800e2c0 <__malloc_unlock+0x8>)
 800e2ba:	f7ff b895 	b.w	800d3e8 <__retarget_lock_release_recursive>
 800e2be:	bf00      	nop
 800e2c0:	2000196c 	.word	0x2000196c

0800e2c4 <_Balloc>:
 800e2c4:	b570      	push	{r4, r5, r6, lr}
 800e2c6:	69c6      	ldr	r6, [r0, #28]
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	b976      	cbnz	r6, 800e2ec <_Balloc+0x28>
 800e2ce:	2010      	movs	r0, #16
 800e2d0:	f7ff ff42 	bl	800e158 <malloc>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	61e0      	str	r0, [r4, #28]
 800e2d8:	b920      	cbnz	r0, 800e2e4 <_Balloc+0x20>
 800e2da:	216b      	movs	r1, #107	@ 0x6b
 800e2dc:	4b17      	ldr	r3, [pc, #92]	@ (800e33c <_Balloc+0x78>)
 800e2de:	4818      	ldr	r0, [pc, #96]	@ (800e340 <_Balloc+0x7c>)
 800e2e0:	f002 f8d6 	bl	8010490 <__assert_func>
 800e2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2e8:	6006      	str	r6, [r0, #0]
 800e2ea:	60c6      	str	r6, [r0, #12]
 800e2ec:	69e6      	ldr	r6, [r4, #28]
 800e2ee:	68f3      	ldr	r3, [r6, #12]
 800e2f0:	b183      	cbz	r3, 800e314 <_Balloc+0x50>
 800e2f2:	69e3      	ldr	r3, [r4, #28]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2fa:	b9b8      	cbnz	r0, 800e32c <_Balloc+0x68>
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	fa01 f605 	lsl.w	r6, r1, r5
 800e302:	1d72      	adds	r2, r6, #5
 800e304:	4620      	mov	r0, r4
 800e306:	0092      	lsls	r2, r2, #2
 800e308:	f002 f8e0 	bl	80104cc <_calloc_r>
 800e30c:	b160      	cbz	r0, 800e328 <_Balloc+0x64>
 800e30e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e312:	e00e      	b.n	800e332 <_Balloc+0x6e>
 800e314:	2221      	movs	r2, #33	@ 0x21
 800e316:	2104      	movs	r1, #4
 800e318:	4620      	mov	r0, r4
 800e31a:	f002 f8d7 	bl	80104cc <_calloc_r>
 800e31e:	69e3      	ldr	r3, [r4, #28]
 800e320:	60f0      	str	r0, [r6, #12]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1e4      	bne.n	800e2f2 <_Balloc+0x2e>
 800e328:	2000      	movs	r0, #0
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	6802      	ldr	r2, [r0, #0]
 800e32e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e332:	2300      	movs	r3, #0
 800e334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e338:	e7f7      	b.n	800e32a <_Balloc+0x66>
 800e33a:	bf00      	nop
 800e33c:	0801191e 	.word	0x0801191e
 800e340:	0801199e 	.word	0x0801199e

0800e344 <_Bfree>:
 800e344:	b570      	push	{r4, r5, r6, lr}
 800e346:	69c6      	ldr	r6, [r0, #28]
 800e348:	4605      	mov	r5, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	b976      	cbnz	r6, 800e36c <_Bfree+0x28>
 800e34e:	2010      	movs	r0, #16
 800e350:	f7ff ff02 	bl	800e158 <malloc>
 800e354:	4602      	mov	r2, r0
 800e356:	61e8      	str	r0, [r5, #28]
 800e358:	b920      	cbnz	r0, 800e364 <_Bfree+0x20>
 800e35a:	218f      	movs	r1, #143	@ 0x8f
 800e35c:	4b08      	ldr	r3, [pc, #32]	@ (800e380 <_Bfree+0x3c>)
 800e35e:	4809      	ldr	r0, [pc, #36]	@ (800e384 <_Bfree+0x40>)
 800e360:	f002 f896 	bl	8010490 <__assert_func>
 800e364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e368:	6006      	str	r6, [r0, #0]
 800e36a:	60c6      	str	r6, [r0, #12]
 800e36c:	b13c      	cbz	r4, 800e37e <_Bfree+0x3a>
 800e36e:	69eb      	ldr	r3, [r5, #28]
 800e370:	6862      	ldr	r2, [r4, #4]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e378:	6021      	str	r1, [r4, #0]
 800e37a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e37e:	bd70      	pop	{r4, r5, r6, pc}
 800e380:	0801191e 	.word	0x0801191e
 800e384:	0801199e 	.word	0x0801199e

0800e388 <__multadd>:
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	4607      	mov	r7, r0
 800e38e:	460c      	mov	r4, r1
 800e390:	461e      	mov	r6, r3
 800e392:	2000      	movs	r0, #0
 800e394:	690d      	ldr	r5, [r1, #16]
 800e396:	f101 0c14 	add.w	ip, r1, #20
 800e39a:	f8dc 3000 	ldr.w	r3, [ip]
 800e39e:	3001      	adds	r0, #1
 800e3a0:	b299      	uxth	r1, r3
 800e3a2:	fb02 6101 	mla	r1, r2, r1, r6
 800e3a6:	0c1e      	lsrs	r6, r3, #16
 800e3a8:	0c0b      	lsrs	r3, r1, #16
 800e3aa:	fb02 3306 	mla	r3, r2, r6, r3
 800e3ae:	b289      	uxth	r1, r1
 800e3b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3b4:	4285      	cmp	r5, r0
 800e3b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e3be:	dcec      	bgt.n	800e39a <__multadd+0x12>
 800e3c0:	b30e      	cbz	r6, 800e406 <__multadd+0x7e>
 800e3c2:	68a3      	ldr	r3, [r4, #8]
 800e3c4:	42ab      	cmp	r3, r5
 800e3c6:	dc19      	bgt.n	800e3fc <__multadd+0x74>
 800e3c8:	6861      	ldr	r1, [r4, #4]
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	3101      	adds	r1, #1
 800e3ce:	f7ff ff79 	bl	800e2c4 <_Balloc>
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	b928      	cbnz	r0, 800e3e2 <__multadd+0x5a>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	21ba      	movs	r1, #186	@ 0xba
 800e3da:	4b0c      	ldr	r3, [pc, #48]	@ (800e40c <__multadd+0x84>)
 800e3dc:	480c      	ldr	r0, [pc, #48]	@ (800e410 <__multadd+0x88>)
 800e3de:	f002 f857 	bl	8010490 <__assert_func>
 800e3e2:	6922      	ldr	r2, [r4, #16]
 800e3e4:	f104 010c 	add.w	r1, r4, #12
 800e3e8:	3202      	adds	r2, #2
 800e3ea:	0092      	lsls	r2, r2, #2
 800e3ec:	300c      	adds	r0, #12
 800e3ee:	f002 f83b 	bl	8010468 <memcpy>
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	f7ff ffa5 	bl	800e344 <_Bfree>
 800e3fa:	4644      	mov	r4, r8
 800e3fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e400:	3501      	adds	r5, #1
 800e402:	615e      	str	r6, [r3, #20]
 800e404:	6125      	str	r5, [r4, #16]
 800e406:	4620      	mov	r0, r4
 800e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40c:	0801198d 	.word	0x0801198d
 800e410:	0801199e 	.word	0x0801199e

0800e414 <__s2b>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4615      	mov	r5, r2
 800e41a:	2209      	movs	r2, #9
 800e41c:	461f      	mov	r7, r3
 800e41e:	3308      	adds	r3, #8
 800e420:	460c      	mov	r4, r1
 800e422:	fb93 f3f2 	sdiv	r3, r3, r2
 800e426:	4606      	mov	r6, r0
 800e428:	2201      	movs	r2, #1
 800e42a:	2100      	movs	r1, #0
 800e42c:	429a      	cmp	r2, r3
 800e42e:	db09      	blt.n	800e444 <__s2b+0x30>
 800e430:	4630      	mov	r0, r6
 800e432:	f7ff ff47 	bl	800e2c4 <_Balloc>
 800e436:	b940      	cbnz	r0, 800e44a <__s2b+0x36>
 800e438:	4602      	mov	r2, r0
 800e43a:	21d3      	movs	r1, #211	@ 0xd3
 800e43c:	4b18      	ldr	r3, [pc, #96]	@ (800e4a0 <__s2b+0x8c>)
 800e43e:	4819      	ldr	r0, [pc, #100]	@ (800e4a4 <__s2b+0x90>)
 800e440:	f002 f826 	bl	8010490 <__assert_func>
 800e444:	0052      	lsls	r2, r2, #1
 800e446:	3101      	adds	r1, #1
 800e448:	e7f0      	b.n	800e42c <__s2b+0x18>
 800e44a:	9b08      	ldr	r3, [sp, #32]
 800e44c:	2d09      	cmp	r5, #9
 800e44e:	6143      	str	r3, [r0, #20]
 800e450:	f04f 0301 	mov.w	r3, #1
 800e454:	6103      	str	r3, [r0, #16]
 800e456:	dd16      	ble.n	800e486 <__s2b+0x72>
 800e458:	f104 0909 	add.w	r9, r4, #9
 800e45c:	46c8      	mov	r8, r9
 800e45e:	442c      	add	r4, r5
 800e460:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e464:	4601      	mov	r1, r0
 800e466:	220a      	movs	r2, #10
 800e468:	4630      	mov	r0, r6
 800e46a:	3b30      	subs	r3, #48	@ 0x30
 800e46c:	f7ff ff8c 	bl	800e388 <__multadd>
 800e470:	45a0      	cmp	r8, r4
 800e472:	d1f5      	bne.n	800e460 <__s2b+0x4c>
 800e474:	f1a5 0408 	sub.w	r4, r5, #8
 800e478:	444c      	add	r4, r9
 800e47a:	1b2d      	subs	r5, r5, r4
 800e47c:	1963      	adds	r3, r4, r5
 800e47e:	42bb      	cmp	r3, r7
 800e480:	db04      	blt.n	800e48c <__s2b+0x78>
 800e482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e486:	2509      	movs	r5, #9
 800e488:	340a      	adds	r4, #10
 800e48a:	e7f6      	b.n	800e47a <__s2b+0x66>
 800e48c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e490:	4601      	mov	r1, r0
 800e492:	220a      	movs	r2, #10
 800e494:	4630      	mov	r0, r6
 800e496:	3b30      	subs	r3, #48	@ 0x30
 800e498:	f7ff ff76 	bl	800e388 <__multadd>
 800e49c:	e7ee      	b.n	800e47c <__s2b+0x68>
 800e49e:	bf00      	nop
 800e4a0:	0801198d 	.word	0x0801198d
 800e4a4:	0801199e 	.word	0x0801199e

0800e4a8 <__hi0bits>:
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e4ae:	bf3a      	itte	cc
 800e4b0:	0403      	lslcc	r3, r0, #16
 800e4b2:	2010      	movcc	r0, #16
 800e4b4:	2000      	movcs	r0, #0
 800e4b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4ba:	bf3c      	itt	cc
 800e4bc:	021b      	lslcc	r3, r3, #8
 800e4be:	3008      	addcc	r0, #8
 800e4c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4c4:	bf3c      	itt	cc
 800e4c6:	011b      	lslcc	r3, r3, #4
 800e4c8:	3004      	addcc	r0, #4
 800e4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ce:	bf3c      	itt	cc
 800e4d0:	009b      	lslcc	r3, r3, #2
 800e4d2:	3002      	addcc	r0, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	db05      	blt.n	800e4e4 <__hi0bits+0x3c>
 800e4d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e4dc:	f100 0001 	add.w	r0, r0, #1
 800e4e0:	bf08      	it	eq
 800e4e2:	2020      	moveq	r0, #32
 800e4e4:	4770      	bx	lr

0800e4e6 <__lo0bits>:
 800e4e6:	6803      	ldr	r3, [r0, #0]
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	f013 0007 	ands.w	r0, r3, #7
 800e4ee:	d00b      	beq.n	800e508 <__lo0bits+0x22>
 800e4f0:	07d9      	lsls	r1, r3, #31
 800e4f2:	d421      	bmi.n	800e538 <__lo0bits+0x52>
 800e4f4:	0798      	lsls	r0, r3, #30
 800e4f6:	bf49      	itett	mi
 800e4f8:	085b      	lsrmi	r3, r3, #1
 800e4fa:	089b      	lsrpl	r3, r3, #2
 800e4fc:	2001      	movmi	r0, #1
 800e4fe:	6013      	strmi	r3, [r2, #0]
 800e500:	bf5c      	itt	pl
 800e502:	2002      	movpl	r0, #2
 800e504:	6013      	strpl	r3, [r2, #0]
 800e506:	4770      	bx	lr
 800e508:	b299      	uxth	r1, r3
 800e50a:	b909      	cbnz	r1, 800e510 <__lo0bits+0x2a>
 800e50c:	2010      	movs	r0, #16
 800e50e:	0c1b      	lsrs	r3, r3, #16
 800e510:	b2d9      	uxtb	r1, r3
 800e512:	b909      	cbnz	r1, 800e518 <__lo0bits+0x32>
 800e514:	3008      	adds	r0, #8
 800e516:	0a1b      	lsrs	r3, r3, #8
 800e518:	0719      	lsls	r1, r3, #28
 800e51a:	bf04      	itt	eq
 800e51c:	091b      	lsreq	r3, r3, #4
 800e51e:	3004      	addeq	r0, #4
 800e520:	0799      	lsls	r1, r3, #30
 800e522:	bf04      	itt	eq
 800e524:	089b      	lsreq	r3, r3, #2
 800e526:	3002      	addeq	r0, #2
 800e528:	07d9      	lsls	r1, r3, #31
 800e52a:	d403      	bmi.n	800e534 <__lo0bits+0x4e>
 800e52c:	085b      	lsrs	r3, r3, #1
 800e52e:	f100 0001 	add.w	r0, r0, #1
 800e532:	d003      	beq.n	800e53c <__lo0bits+0x56>
 800e534:	6013      	str	r3, [r2, #0]
 800e536:	4770      	bx	lr
 800e538:	2000      	movs	r0, #0
 800e53a:	4770      	bx	lr
 800e53c:	2020      	movs	r0, #32
 800e53e:	4770      	bx	lr

0800e540 <__i2b>:
 800e540:	b510      	push	{r4, lr}
 800e542:	460c      	mov	r4, r1
 800e544:	2101      	movs	r1, #1
 800e546:	f7ff febd 	bl	800e2c4 <_Balloc>
 800e54a:	4602      	mov	r2, r0
 800e54c:	b928      	cbnz	r0, 800e55a <__i2b+0x1a>
 800e54e:	f240 1145 	movw	r1, #325	@ 0x145
 800e552:	4b04      	ldr	r3, [pc, #16]	@ (800e564 <__i2b+0x24>)
 800e554:	4804      	ldr	r0, [pc, #16]	@ (800e568 <__i2b+0x28>)
 800e556:	f001 ff9b 	bl	8010490 <__assert_func>
 800e55a:	2301      	movs	r3, #1
 800e55c:	6144      	str	r4, [r0, #20]
 800e55e:	6103      	str	r3, [r0, #16]
 800e560:	bd10      	pop	{r4, pc}
 800e562:	bf00      	nop
 800e564:	0801198d 	.word	0x0801198d
 800e568:	0801199e 	.word	0x0801199e

0800e56c <__multiply>:
 800e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e570:	4617      	mov	r7, r2
 800e572:	690a      	ldr	r2, [r1, #16]
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	4689      	mov	r9, r1
 800e578:	429a      	cmp	r2, r3
 800e57a:	bfa2      	ittt	ge
 800e57c:	463b      	movge	r3, r7
 800e57e:	460f      	movge	r7, r1
 800e580:	4699      	movge	r9, r3
 800e582:	693d      	ldr	r5, [r7, #16]
 800e584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	eb05 060a 	add.w	r6, r5, sl
 800e590:	42b3      	cmp	r3, r6
 800e592:	b085      	sub	sp, #20
 800e594:	bfb8      	it	lt
 800e596:	3101      	addlt	r1, #1
 800e598:	f7ff fe94 	bl	800e2c4 <_Balloc>
 800e59c:	b930      	cbnz	r0, 800e5ac <__multiply+0x40>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e5a4:	4b40      	ldr	r3, [pc, #256]	@ (800e6a8 <__multiply+0x13c>)
 800e5a6:	4841      	ldr	r0, [pc, #260]	@ (800e6ac <__multiply+0x140>)
 800e5a8:	f001 ff72 	bl	8010490 <__assert_func>
 800e5ac:	f100 0414 	add.w	r4, r0, #20
 800e5b0:	4623      	mov	r3, r4
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e5b8:	4573      	cmp	r3, lr
 800e5ba:	d320      	bcc.n	800e5fe <__multiply+0x92>
 800e5bc:	f107 0814 	add.w	r8, r7, #20
 800e5c0:	f109 0114 	add.w	r1, r9, #20
 800e5c4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e5c8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	1beb      	subs	r3, r5, r7
 800e5d0:	3b15      	subs	r3, #21
 800e5d2:	f023 0303 	bic.w	r3, r3, #3
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	3715      	adds	r7, #21
 800e5da:	42bd      	cmp	r5, r7
 800e5dc:	bf38      	it	cc
 800e5de:	2304      	movcc	r3, #4
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	9b02      	ldr	r3, [sp, #8]
 800e5e4:	9103      	str	r1, [sp, #12]
 800e5e6:	428b      	cmp	r3, r1
 800e5e8:	d80c      	bhi.n	800e604 <__multiply+0x98>
 800e5ea:	2e00      	cmp	r6, #0
 800e5ec:	dd03      	ble.n	800e5f6 <__multiply+0x8a>
 800e5ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d055      	beq.n	800e6a2 <__multiply+0x136>
 800e5f6:	6106      	str	r6, [r0, #16]
 800e5f8:	b005      	add	sp, #20
 800e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fe:	f843 2b04 	str.w	r2, [r3], #4
 800e602:	e7d9      	b.n	800e5b8 <__multiply+0x4c>
 800e604:	f8b1 a000 	ldrh.w	sl, [r1]
 800e608:	f1ba 0f00 	cmp.w	sl, #0
 800e60c:	d01f      	beq.n	800e64e <__multiply+0xe2>
 800e60e:	46c4      	mov	ip, r8
 800e610:	46a1      	mov	r9, r4
 800e612:	2700      	movs	r7, #0
 800e614:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e618:	f8d9 3000 	ldr.w	r3, [r9]
 800e61c:	fa1f fb82 	uxth.w	fp, r2
 800e620:	b29b      	uxth	r3, r3
 800e622:	fb0a 330b 	mla	r3, sl, fp, r3
 800e626:	443b      	add	r3, r7
 800e628:	f8d9 7000 	ldr.w	r7, [r9]
 800e62c:	0c12      	lsrs	r2, r2, #16
 800e62e:	0c3f      	lsrs	r7, r7, #16
 800e630:	fb0a 7202 	mla	r2, sl, r2, r7
 800e634:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e638:	b29b      	uxth	r3, r3
 800e63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e63e:	4565      	cmp	r5, ip
 800e640:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e644:	f849 3b04 	str.w	r3, [r9], #4
 800e648:	d8e4      	bhi.n	800e614 <__multiply+0xa8>
 800e64a:	9b01      	ldr	r3, [sp, #4]
 800e64c:	50e7      	str	r7, [r4, r3]
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	3104      	adds	r1, #4
 800e652:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e656:	f1b9 0f00 	cmp.w	r9, #0
 800e65a:	d020      	beq.n	800e69e <__multiply+0x132>
 800e65c:	4647      	mov	r7, r8
 800e65e:	46a4      	mov	ip, r4
 800e660:	f04f 0a00 	mov.w	sl, #0
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	f8b7 b000 	ldrh.w	fp, [r7]
 800e66a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e66e:	b29b      	uxth	r3, r3
 800e670:	fb09 220b 	mla	r2, r9, fp, r2
 800e674:	4452      	add	r2, sl
 800e676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e67a:	f84c 3b04 	str.w	r3, [ip], #4
 800e67e:	f857 3b04 	ldr.w	r3, [r7], #4
 800e682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e686:	f8bc 3000 	ldrh.w	r3, [ip]
 800e68a:	42bd      	cmp	r5, r7
 800e68c:	fb09 330a 	mla	r3, r9, sl, r3
 800e690:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e698:	d8e5      	bhi.n	800e666 <__multiply+0xfa>
 800e69a:	9a01      	ldr	r2, [sp, #4]
 800e69c:	50a3      	str	r3, [r4, r2]
 800e69e:	3404      	adds	r4, #4
 800e6a0:	e79f      	b.n	800e5e2 <__multiply+0x76>
 800e6a2:	3e01      	subs	r6, #1
 800e6a4:	e7a1      	b.n	800e5ea <__multiply+0x7e>
 800e6a6:	bf00      	nop
 800e6a8:	0801198d 	.word	0x0801198d
 800e6ac:	0801199e 	.word	0x0801199e

0800e6b0 <__pow5mult>:
 800e6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b4:	4615      	mov	r5, r2
 800e6b6:	f012 0203 	ands.w	r2, r2, #3
 800e6ba:	4607      	mov	r7, r0
 800e6bc:	460e      	mov	r6, r1
 800e6be:	d007      	beq.n	800e6d0 <__pow5mult+0x20>
 800e6c0:	4c25      	ldr	r4, [pc, #148]	@ (800e758 <__pow5mult+0xa8>)
 800e6c2:	3a01      	subs	r2, #1
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6ca:	f7ff fe5d 	bl	800e388 <__multadd>
 800e6ce:	4606      	mov	r6, r0
 800e6d0:	10ad      	asrs	r5, r5, #2
 800e6d2:	d03d      	beq.n	800e750 <__pow5mult+0xa0>
 800e6d4:	69fc      	ldr	r4, [r7, #28]
 800e6d6:	b97c      	cbnz	r4, 800e6f8 <__pow5mult+0x48>
 800e6d8:	2010      	movs	r0, #16
 800e6da:	f7ff fd3d 	bl	800e158 <malloc>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	61f8      	str	r0, [r7, #28]
 800e6e2:	b928      	cbnz	r0, 800e6f0 <__pow5mult+0x40>
 800e6e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e6e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e75c <__pow5mult+0xac>)
 800e6ea:	481d      	ldr	r0, [pc, #116]	@ (800e760 <__pow5mult+0xb0>)
 800e6ec:	f001 fed0 	bl	8010490 <__assert_func>
 800e6f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6f4:	6004      	str	r4, [r0, #0]
 800e6f6:	60c4      	str	r4, [r0, #12]
 800e6f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e6fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e700:	b94c      	cbnz	r4, 800e716 <__pow5mult+0x66>
 800e702:	f240 2171 	movw	r1, #625	@ 0x271
 800e706:	4638      	mov	r0, r7
 800e708:	f7ff ff1a 	bl	800e540 <__i2b>
 800e70c:	2300      	movs	r3, #0
 800e70e:	4604      	mov	r4, r0
 800e710:	f8c8 0008 	str.w	r0, [r8, #8]
 800e714:	6003      	str	r3, [r0, #0]
 800e716:	f04f 0900 	mov.w	r9, #0
 800e71a:	07eb      	lsls	r3, r5, #31
 800e71c:	d50a      	bpl.n	800e734 <__pow5mult+0x84>
 800e71e:	4631      	mov	r1, r6
 800e720:	4622      	mov	r2, r4
 800e722:	4638      	mov	r0, r7
 800e724:	f7ff ff22 	bl	800e56c <__multiply>
 800e728:	4680      	mov	r8, r0
 800e72a:	4631      	mov	r1, r6
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7ff fe09 	bl	800e344 <_Bfree>
 800e732:	4646      	mov	r6, r8
 800e734:	106d      	asrs	r5, r5, #1
 800e736:	d00b      	beq.n	800e750 <__pow5mult+0xa0>
 800e738:	6820      	ldr	r0, [r4, #0]
 800e73a:	b938      	cbnz	r0, 800e74c <__pow5mult+0x9c>
 800e73c:	4622      	mov	r2, r4
 800e73e:	4621      	mov	r1, r4
 800e740:	4638      	mov	r0, r7
 800e742:	f7ff ff13 	bl	800e56c <__multiply>
 800e746:	6020      	str	r0, [r4, #0]
 800e748:	f8c0 9000 	str.w	r9, [r0]
 800e74c:	4604      	mov	r4, r0
 800e74e:	e7e4      	b.n	800e71a <__pow5mult+0x6a>
 800e750:	4630      	mov	r0, r6
 800e752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e756:	bf00      	nop
 800e758:	08011acc 	.word	0x08011acc
 800e75c:	0801191e 	.word	0x0801191e
 800e760:	0801199e 	.word	0x0801199e

0800e764 <__lshift>:
 800e764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e768:	460c      	mov	r4, r1
 800e76a:	4607      	mov	r7, r0
 800e76c:	4691      	mov	r9, r2
 800e76e:	6923      	ldr	r3, [r4, #16]
 800e770:	6849      	ldr	r1, [r1, #4]
 800e772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e776:	68a3      	ldr	r3, [r4, #8]
 800e778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e77c:	f108 0601 	add.w	r6, r8, #1
 800e780:	42b3      	cmp	r3, r6
 800e782:	db0b      	blt.n	800e79c <__lshift+0x38>
 800e784:	4638      	mov	r0, r7
 800e786:	f7ff fd9d 	bl	800e2c4 <_Balloc>
 800e78a:	4605      	mov	r5, r0
 800e78c:	b948      	cbnz	r0, 800e7a2 <__lshift+0x3e>
 800e78e:	4602      	mov	r2, r0
 800e790:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e794:	4b27      	ldr	r3, [pc, #156]	@ (800e834 <__lshift+0xd0>)
 800e796:	4828      	ldr	r0, [pc, #160]	@ (800e838 <__lshift+0xd4>)
 800e798:	f001 fe7a 	bl	8010490 <__assert_func>
 800e79c:	3101      	adds	r1, #1
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	e7ee      	b.n	800e780 <__lshift+0x1c>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f100 0114 	add.w	r1, r0, #20
 800e7a8:	f100 0210 	add.w	r2, r0, #16
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	4553      	cmp	r3, sl
 800e7b0:	db33      	blt.n	800e81a <__lshift+0xb6>
 800e7b2:	6920      	ldr	r0, [r4, #16]
 800e7b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7b8:	f104 0314 	add.w	r3, r4, #20
 800e7bc:	f019 091f 	ands.w	r9, r9, #31
 800e7c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e7c8:	d02b      	beq.n	800e822 <__lshift+0xbe>
 800e7ca:	468a      	mov	sl, r1
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f1c9 0e20 	rsb	lr, r9, #32
 800e7d2:	6818      	ldr	r0, [r3, #0]
 800e7d4:	fa00 f009 	lsl.w	r0, r0, r9
 800e7d8:	4310      	orrs	r0, r2
 800e7da:	f84a 0b04 	str.w	r0, [sl], #4
 800e7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7e2:	459c      	cmp	ip, r3
 800e7e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e7e8:	d8f3      	bhi.n	800e7d2 <__lshift+0x6e>
 800e7ea:	ebac 0304 	sub.w	r3, ip, r4
 800e7ee:	3b15      	subs	r3, #21
 800e7f0:	f023 0303 	bic.w	r3, r3, #3
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	f104 0015 	add.w	r0, r4, #21
 800e7fa:	4560      	cmp	r0, ip
 800e7fc:	bf88      	it	hi
 800e7fe:	2304      	movhi	r3, #4
 800e800:	50ca      	str	r2, [r1, r3]
 800e802:	b10a      	cbz	r2, 800e808 <__lshift+0xa4>
 800e804:	f108 0602 	add.w	r6, r8, #2
 800e808:	3e01      	subs	r6, #1
 800e80a:	4638      	mov	r0, r7
 800e80c:	4621      	mov	r1, r4
 800e80e:	612e      	str	r6, [r5, #16]
 800e810:	f7ff fd98 	bl	800e344 <_Bfree>
 800e814:	4628      	mov	r0, r5
 800e816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e81e:	3301      	adds	r3, #1
 800e820:	e7c5      	b.n	800e7ae <__lshift+0x4a>
 800e822:	3904      	subs	r1, #4
 800e824:	f853 2b04 	ldr.w	r2, [r3], #4
 800e828:	459c      	cmp	ip, r3
 800e82a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e82e:	d8f9      	bhi.n	800e824 <__lshift+0xc0>
 800e830:	e7ea      	b.n	800e808 <__lshift+0xa4>
 800e832:	bf00      	nop
 800e834:	0801198d 	.word	0x0801198d
 800e838:	0801199e 	.word	0x0801199e

0800e83c <__mcmp>:
 800e83c:	4603      	mov	r3, r0
 800e83e:	690a      	ldr	r2, [r1, #16]
 800e840:	6900      	ldr	r0, [r0, #16]
 800e842:	b530      	push	{r4, r5, lr}
 800e844:	1a80      	subs	r0, r0, r2
 800e846:	d10e      	bne.n	800e866 <__mcmp+0x2a>
 800e848:	3314      	adds	r3, #20
 800e84a:	3114      	adds	r1, #20
 800e84c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e850:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e854:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e858:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e85c:	4295      	cmp	r5, r2
 800e85e:	d003      	beq.n	800e868 <__mcmp+0x2c>
 800e860:	d205      	bcs.n	800e86e <__mcmp+0x32>
 800e862:	f04f 30ff 	mov.w	r0, #4294967295
 800e866:	bd30      	pop	{r4, r5, pc}
 800e868:	42a3      	cmp	r3, r4
 800e86a:	d3f3      	bcc.n	800e854 <__mcmp+0x18>
 800e86c:	e7fb      	b.n	800e866 <__mcmp+0x2a>
 800e86e:	2001      	movs	r0, #1
 800e870:	e7f9      	b.n	800e866 <__mcmp+0x2a>
	...

0800e874 <__mdiff>:
 800e874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	4689      	mov	r9, r1
 800e87a:	4606      	mov	r6, r0
 800e87c:	4611      	mov	r1, r2
 800e87e:	4648      	mov	r0, r9
 800e880:	4614      	mov	r4, r2
 800e882:	f7ff ffdb 	bl	800e83c <__mcmp>
 800e886:	1e05      	subs	r5, r0, #0
 800e888:	d112      	bne.n	800e8b0 <__mdiff+0x3c>
 800e88a:	4629      	mov	r1, r5
 800e88c:	4630      	mov	r0, r6
 800e88e:	f7ff fd19 	bl	800e2c4 <_Balloc>
 800e892:	4602      	mov	r2, r0
 800e894:	b928      	cbnz	r0, 800e8a2 <__mdiff+0x2e>
 800e896:	f240 2137 	movw	r1, #567	@ 0x237
 800e89a:	4b3e      	ldr	r3, [pc, #248]	@ (800e994 <__mdiff+0x120>)
 800e89c:	483e      	ldr	r0, [pc, #248]	@ (800e998 <__mdiff+0x124>)
 800e89e:	f001 fdf7 	bl	8010490 <__assert_func>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	b003      	add	sp, #12
 800e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b0:	bfbc      	itt	lt
 800e8b2:	464b      	movlt	r3, r9
 800e8b4:	46a1      	movlt	r9, r4
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e8bc:	bfba      	itte	lt
 800e8be:	461c      	movlt	r4, r3
 800e8c0:	2501      	movlt	r5, #1
 800e8c2:	2500      	movge	r5, #0
 800e8c4:	f7ff fcfe 	bl	800e2c4 <_Balloc>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	b918      	cbnz	r0, 800e8d4 <__mdiff+0x60>
 800e8cc:	f240 2145 	movw	r1, #581	@ 0x245
 800e8d0:	4b30      	ldr	r3, [pc, #192]	@ (800e994 <__mdiff+0x120>)
 800e8d2:	e7e3      	b.n	800e89c <__mdiff+0x28>
 800e8d4:	f100 0b14 	add.w	fp, r0, #20
 800e8d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e8dc:	f109 0310 	add.w	r3, r9, #16
 800e8e0:	60c5      	str	r5, [r0, #12]
 800e8e2:	f04f 0c00 	mov.w	ip, #0
 800e8e6:	f109 0514 	add.w	r5, r9, #20
 800e8ea:	46d9      	mov	r9, fp
 800e8ec:	6926      	ldr	r6, [r4, #16]
 800e8ee:	f104 0e14 	add.w	lr, r4, #20
 800e8f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e8f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e8fa:	9301      	str	r3, [sp, #4]
 800e8fc:	9b01      	ldr	r3, [sp, #4]
 800e8fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e902:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e906:	b281      	uxth	r1, r0
 800e908:	9301      	str	r3, [sp, #4]
 800e90a:	fa1f f38a 	uxth.w	r3, sl
 800e90e:	1a5b      	subs	r3, r3, r1
 800e910:	0c00      	lsrs	r0, r0, #16
 800e912:	4463      	add	r3, ip
 800e914:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e918:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e922:	4576      	cmp	r6, lr
 800e924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e928:	f849 3b04 	str.w	r3, [r9], #4
 800e92c:	d8e6      	bhi.n	800e8fc <__mdiff+0x88>
 800e92e:	1b33      	subs	r3, r6, r4
 800e930:	3b15      	subs	r3, #21
 800e932:	f023 0303 	bic.w	r3, r3, #3
 800e936:	3415      	adds	r4, #21
 800e938:	3304      	adds	r3, #4
 800e93a:	42a6      	cmp	r6, r4
 800e93c:	bf38      	it	cc
 800e93e:	2304      	movcc	r3, #4
 800e940:	441d      	add	r5, r3
 800e942:	445b      	add	r3, fp
 800e944:	461e      	mov	r6, r3
 800e946:	462c      	mov	r4, r5
 800e948:	4544      	cmp	r4, r8
 800e94a:	d30e      	bcc.n	800e96a <__mdiff+0xf6>
 800e94c:	f108 0103 	add.w	r1, r8, #3
 800e950:	1b49      	subs	r1, r1, r5
 800e952:	f021 0103 	bic.w	r1, r1, #3
 800e956:	3d03      	subs	r5, #3
 800e958:	45a8      	cmp	r8, r5
 800e95a:	bf38      	it	cc
 800e95c:	2100      	movcc	r1, #0
 800e95e:	440b      	add	r3, r1
 800e960:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e964:	b199      	cbz	r1, 800e98e <__mdiff+0x11a>
 800e966:	6117      	str	r7, [r2, #16]
 800e968:	e79e      	b.n	800e8a8 <__mdiff+0x34>
 800e96a:	46e6      	mov	lr, ip
 800e96c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e970:	fa1f fc81 	uxth.w	ip, r1
 800e974:	44f4      	add	ip, lr
 800e976:	0c08      	lsrs	r0, r1, #16
 800e978:	4471      	add	r1, lr
 800e97a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e97e:	b289      	uxth	r1, r1
 800e980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e984:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e988:	f846 1b04 	str.w	r1, [r6], #4
 800e98c:	e7dc      	b.n	800e948 <__mdiff+0xd4>
 800e98e:	3f01      	subs	r7, #1
 800e990:	e7e6      	b.n	800e960 <__mdiff+0xec>
 800e992:	bf00      	nop
 800e994:	0801198d 	.word	0x0801198d
 800e998:	0801199e 	.word	0x0801199e

0800e99c <__ulp>:
 800e99c:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d8 <__ulp+0x3c>)
 800e99e:	400b      	ands	r3, r1
 800e9a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dc08      	bgt.n	800e9ba <__ulp+0x1e>
 800e9a8:	425b      	negs	r3, r3
 800e9aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e9ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e9b2:	da04      	bge.n	800e9be <__ulp+0x22>
 800e9b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e9b8:	4113      	asrs	r3, r2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	e008      	b.n	800e9d0 <__ulp+0x34>
 800e9be:	f1a2 0314 	sub.w	r3, r2, #20
 800e9c2:	2b1e      	cmp	r3, #30
 800e9c4:	bfd6      	itet	le
 800e9c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e9ca:	2201      	movgt	r2, #1
 800e9cc:	40da      	lsrle	r2, r3
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4610      	mov	r0, r2
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	7ff00000 	.word	0x7ff00000

0800e9dc <__b2d>:
 800e9dc:	6902      	ldr	r2, [r0, #16]
 800e9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e0:	f100 0614 	add.w	r6, r0, #20
 800e9e4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e9e8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800e9ec:	4f1e      	ldr	r7, [pc, #120]	@ (800ea68 <__b2d+0x8c>)
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7ff fd5a 	bl	800e4a8 <__hi0bits>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	f1c0 0020 	rsb	r0, r0, #32
 800e9fa:	2b0a      	cmp	r3, #10
 800e9fc:	f1a2 0504 	sub.w	r5, r2, #4
 800ea00:	6008      	str	r0, [r1, #0]
 800ea02:	dc12      	bgt.n	800ea2a <__b2d+0x4e>
 800ea04:	42ae      	cmp	r6, r5
 800ea06:	bf2c      	ite	cs
 800ea08:	2200      	movcs	r2, #0
 800ea0a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ea0e:	f1c3 0c0b 	rsb	ip, r3, #11
 800ea12:	3315      	adds	r3, #21
 800ea14:	fa24 fe0c 	lsr.w	lr, r4, ip
 800ea18:	fa04 f303 	lsl.w	r3, r4, r3
 800ea1c:	fa22 f20c 	lsr.w	r2, r2, ip
 800ea20:	ea4e 0107 	orr.w	r1, lr, r7
 800ea24:	431a      	orrs	r2, r3
 800ea26:	4610      	mov	r0, r2
 800ea28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea2a:	42ae      	cmp	r6, r5
 800ea2c:	bf36      	itet	cc
 800ea2e:	f1a2 0508 	subcc.w	r5, r2, #8
 800ea32:	2200      	movcs	r2, #0
 800ea34:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ea38:	3b0b      	subs	r3, #11
 800ea3a:	d012      	beq.n	800ea62 <__b2d+0x86>
 800ea3c:	f1c3 0720 	rsb	r7, r3, #32
 800ea40:	fa22 f107 	lsr.w	r1, r2, r7
 800ea44:	409c      	lsls	r4, r3
 800ea46:	430c      	orrs	r4, r1
 800ea48:	42b5      	cmp	r5, r6
 800ea4a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800ea4e:	bf94      	ite	ls
 800ea50:	2400      	movls	r4, #0
 800ea52:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800ea56:	409a      	lsls	r2, r3
 800ea58:	40fc      	lsrs	r4, r7
 800ea5a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ea5e:	4322      	orrs	r2, r4
 800ea60:	e7e1      	b.n	800ea26 <__b2d+0x4a>
 800ea62:	ea44 0107 	orr.w	r1, r4, r7
 800ea66:	e7de      	b.n	800ea26 <__b2d+0x4a>
 800ea68:	3ff00000 	.word	0x3ff00000

0800ea6c <__d2b>:
 800ea6c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ea70:	2101      	movs	r1, #1
 800ea72:	4690      	mov	r8, r2
 800ea74:	4699      	mov	r9, r3
 800ea76:	9e08      	ldr	r6, [sp, #32]
 800ea78:	f7ff fc24 	bl	800e2c4 <_Balloc>
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	b930      	cbnz	r0, 800ea8e <__d2b+0x22>
 800ea80:	4602      	mov	r2, r0
 800ea82:	f240 310f 	movw	r1, #783	@ 0x30f
 800ea86:	4b23      	ldr	r3, [pc, #140]	@ (800eb14 <__d2b+0xa8>)
 800ea88:	4823      	ldr	r0, [pc, #140]	@ (800eb18 <__d2b+0xac>)
 800ea8a:	f001 fd01 	bl	8010490 <__assert_func>
 800ea8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea96:	b10d      	cbz	r5, 800ea9c <__d2b+0x30>
 800ea98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea9c:	9301      	str	r3, [sp, #4]
 800ea9e:	f1b8 0300 	subs.w	r3, r8, #0
 800eaa2:	d024      	beq.n	800eaee <__d2b+0x82>
 800eaa4:	4668      	mov	r0, sp
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	f7ff fd1d 	bl	800e4e6 <__lo0bits>
 800eaac:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eab0:	b1d8      	cbz	r0, 800eaea <__d2b+0x7e>
 800eab2:	f1c0 0320 	rsb	r3, r0, #32
 800eab6:	fa02 f303 	lsl.w	r3, r2, r3
 800eaba:	430b      	orrs	r3, r1
 800eabc:	40c2      	lsrs	r2, r0
 800eabe:	6163      	str	r3, [r4, #20]
 800eac0:	9201      	str	r2, [sp, #4]
 800eac2:	9b01      	ldr	r3, [sp, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	bf0c      	ite	eq
 800eac8:	2201      	moveq	r2, #1
 800eaca:	2202      	movne	r2, #2
 800eacc:	61a3      	str	r3, [r4, #24]
 800eace:	6122      	str	r2, [r4, #16]
 800ead0:	b1ad      	cbz	r5, 800eafe <__d2b+0x92>
 800ead2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ead6:	4405      	add	r5, r0
 800ead8:	6035      	str	r5, [r6, #0]
 800eada:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae0:	6018      	str	r0, [r3, #0]
 800eae2:	4620      	mov	r0, r4
 800eae4:	b002      	add	sp, #8
 800eae6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800eaea:	6161      	str	r1, [r4, #20]
 800eaec:	e7e9      	b.n	800eac2 <__d2b+0x56>
 800eaee:	a801      	add	r0, sp, #4
 800eaf0:	f7ff fcf9 	bl	800e4e6 <__lo0bits>
 800eaf4:	9b01      	ldr	r3, [sp, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	6163      	str	r3, [r4, #20]
 800eafa:	3020      	adds	r0, #32
 800eafc:	e7e7      	b.n	800eace <__d2b+0x62>
 800eafe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb06:	6030      	str	r0, [r6, #0]
 800eb08:	6918      	ldr	r0, [r3, #16]
 800eb0a:	f7ff fccd 	bl	800e4a8 <__hi0bits>
 800eb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb12:	e7e4      	b.n	800eade <__d2b+0x72>
 800eb14:	0801198d 	.word	0x0801198d
 800eb18:	0801199e 	.word	0x0801199e

0800eb1c <__ratio>:
 800eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	b085      	sub	sp, #20
 800eb22:	e9cd 1000 	strd	r1, r0, [sp]
 800eb26:	a902      	add	r1, sp, #8
 800eb28:	f7ff ff58 	bl	800e9dc <__b2d>
 800eb2c:	468b      	mov	fp, r1
 800eb2e:	4606      	mov	r6, r0
 800eb30:	460f      	mov	r7, r1
 800eb32:	9800      	ldr	r0, [sp, #0]
 800eb34:	a903      	add	r1, sp, #12
 800eb36:	f7ff ff51 	bl	800e9dc <__b2d>
 800eb3a:	460d      	mov	r5, r1
 800eb3c:	9b01      	ldr	r3, [sp, #4]
 800eb3e:	4689      	mov	r9, r1
 800eb40:	6919      	ldr	r1, [r3, #16]
 800eb42:	9b00      	ldr	r3, [sp, #0]
 800eb44:	4604      	mov	r4, r0
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	4630      	mov	r0, r6
 800eb4a:	1ac9      	subs	r1, r1, r3
 800eb4c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eb50:	1a9b      	subs	r3, r3, r2
 800eb52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bfcd      	iteet	gt
 800eb5a:	463a      	movgt	r2, r7
 800eb5c:	462a      	movle	r2, r5
 800eb5e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb62:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800eb66:	bfd8      	it	le
 800eb68:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eb6c:	464b      	mov	r3, r9
 800eb6e:	4622      	mov	r2, r4
 800eb70:	4659      	mov	r1, fp
 800eb72:	f7f1 fddb 	bl	800072c <__aeabi_ddiv>
 800eb76:	b005      	add	sp, #20
 800eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb7c <__copybits>:
 800eb7c:	3901      	subs	r1, #1
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	1149      	asrs	r1, r1, #5
 800eb82:	6914      	ldr	r4, [r2, #16]
 800eb84:	3101      	adds	r1, #1
 800eb86:	f102 0314 	add.w	r3, r2, #20
 800eb8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb92:	1f05      	subs	r5, r0, #4
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d30c      	bcc.n	800ebb2 <__copybits+0x36>
 800eb98:	1aa3      	subs	r3, r4, r2
 800eb9a:	3b11      	subs	r3, #17
 800eb9c:	f023 0303 	bic.w	r3, r3, #3
 800eba0:	3211      	adds	r2, #17
 800eba2:	42a2      	cmp	r2, r4
 800eba4:	bf88      	it	hi
 800eba6:	2300      	movhi	r3, #0
 800eba8:	4418      	add	r0, r3
 800ebaa:	2300      	movs	r3, #0
 800ebac:	4288      	cmp	r0, r1
 800ebae:	d305      	bcc.n	800ebbc <__copybits+0x40>
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	f853 6b04 	ldr.w	r6, [r3], #4
 800ebb6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ebba:	e7eb      	b.n	800eb94 <__copybits+0x18>
 800ebbc:	f840 3b04 	str.w	r3, [r0], #4
 800ebc0:	e7f4      	b.n	800ebac <__copybits+0x30>

0800ebc2 <__any_on>:
 800ebc2:	f100 0214 	add.w	r2, r0, #20
 800ebc6:	6900      	ldr	r0, [r0, #16]
 800ebc8:	114b      	asrs	r3, r1, #5
 800ebca:	4298      	cmp	r0, r3
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	db11      	blt.n	800ebf4 <__any_on+0x32>
 800ebd0:	dd0a      	ble.n	800ebe8 <__any_on+0x26>
 800ebd2:	f011 011f 	ands.w	r1, r1, #31
 800ebd6:	d007      	beq.n	800ebe8 <__any_on+0x26>
 800ebd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ebdc:	fa24 f001 	lsr.w	r0, r4, r1
 800ebe0:	fa00 f101 	lsl.w	r1, r0, r1
 800ebe4:	428c      	cmp	r4, r1
 800ebe6:	d10b      	bne.n	800ec00 <__any_on+0x3e>
 800ebe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d803      	bhi.n	800ebf8 <__any_on+0x36>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	bd10      	pop	{r4, pc}
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	e7f7      	b.n	800ebe8 <__any_on+0x26>
 800ebf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebfc:	2900      	cmp	r1, #0
 800ebfe:	d0f5      	beq.n	800ebec <__any_on+0x2a>
 800ec00:	2001      	movs	r0, #1
 800ec02:	e7f6      	b.n	800ebf2 <__any_on+0x30>

0800ec04 <sulp>:
 800ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec08:	460f      	mov	r7, r1
 800ec0a:	4690      	mov	r8, r2
 800ec0c:	f7ff fec6 	bl	800e99c <__ulp>
 800ec10:	4604      	mov	r4, r0
 800ec12:	460d      	mov	r5, r1
 800ec14:	f1b8 0f00 	cmp.w	r8, #0
 800ec18:	d011      	beq.n	800ec3e <sulp+0x3a>
 800ec1a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ec1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dd0b      	ble.n	800ec3e <sulp+0x3a>
 800ec26:	2400      	movs	r4, #0
 800ec28:	051b      	lsls	r3, r3, #20
 800ec2a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ec2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ec32:	4622      	mov	r2, r4
 800ec34:	462b      	mov	r3, r5
 800ec36:	f7f1 fc4f 	bl	80004d8 <__aeabi_dmul>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	460d      	mov	r5, r1
 800ec3e:	4620      	mov	r0, r4
 800ec40:	4629      	mov	r1, r5
 800ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ec48 <_strtod_l>:
 800ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	b09f      	sub	sp, #124	@ 0x7c
 800ec4e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ec50:	2200      	movs	r2, #0
 800ec52:	460c      	mov	r4, r1
 800ec54:	921a      	str	r2, [sp, #104]	@ 0x68
 800ec56:	f04f 0a00 	mov.w	sl, #0
 800ec5a:	f04f 0b00 	mov.w	fp, #0
 800ec5e:	460a      	mov	r2, r1
 800ec60:	9005      	str	r0, [sp, #20]
 800ec62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec64:	7811      	ldrb	r1, [r2, #0]
 800ec66:	292b      	cmp	r1, #43	@ 0x2b
 800ec68:	d048      	beq.n	800ecfc <_strtod_l+0xb4>
 800ec6a:	d836      	bhi.n	800ecda <_strtod_l+0x92>
 800ec6c:	290d      	cmp	r1, #13
 800ec6e:	d830      	bhi.n	800ecd2 <_strtod_l+0x8a>
 800ec70:	2908      	cmp	r1, #8
 800ec72:	d830      	bhi.n	800ecd6 <_strtod_l+0x8e>
 800ec74:	2900      	cmp	r1, #0
 800ec76:	d039      	beq.n	800ecec <_strtod_l+0xa4>
 800ec78:	2200      	movs	r2, #0
 800ec7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ec7e:	782a      	ldrb	r2, [r5, #0]
 800ec80:	2a30      	cmp	r2, #48	@ 0x30
 800ec82:	f040 80b0 	bne.w	800ede6 <_strtod_l+0x19e>
 800ec86:	786a      	ldrb	r2, [r5, #1]
 800ec88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec8c:	2a58      	cmp	r2, #88	@ 0x58
 800ec8e:	d16c      	bne.n	800ed6a <_strtod_l+0x122>
 800ec90:	9302      	str	r3, [sp, #8]
 800ec92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec94:	4a8f      	ldr	r2, [pc, #572]	@ (800eed4 <_strtod_l+0x28c>)
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	ab1a      	add	r3, sp, #104	@ 0x68
 800ec9a:	9300      	str	r3, [sp, #0]
 800ec9c:	9805      	ldr	r0, [sp, #20]
 800ec9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eca0:	a919      	add	r1, sp, #100	@ 0x64
 800eca2:	f001 fc8f 	bl	80105c4 <__gethex>
 800eca6:	f010 060f 	ands.w	r6, r0, #15
 800ecaa:	4604      	mov	r4, r0
 800ecac:	d005      	beq.n	800ecba <_strtod_l+0x72>
 800ecae:	2e06      	cmp	r6, #6
 800ecb0:	d126      	bne.n	800ed00 <_strtod_l+0xb8>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	3501      	adds	r5, #1
 800ecb6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ecb8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ecba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f040 8582 	bne.w	800f7c6 <_strtod_l+0xb7e>
 800ecc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecc4:	b1bb      	cbz	r3, 800ecf6 <_strtod_l+0xae>
 800ecc6:	4650      	mov	r0, sl
 800ecc8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800eccc:	b01f      	add	sp, #124	@ 0x7c
 800ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd2:	2920      	cmp	r1, #32
 800ecd4:	d1d0      	bne.n	800ec78 <_strtod_l+0x30>
 800ecd6:	3201      	adds	r2, #1
 800ecd8:	e7c3      	b.n	800ec62 <_strtod_l+0x1a>
 800ecda:	292d      	cmp	r1, #45	@ 0x2d
 800ecdc:	d1cc      	bne.n	800ec78 <_strtod_l+0x30>
 800ecde:	2101      	movs	r1, #1
 800ece0:	910e      	str	r1, [sp, #56]	@ 0x38
 800ece2:	1c51      	adds	r1, r2, #1
 800ece4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ece6:	7852      	ldrb	r2, [r2, #1]
 800ece8:	2a00      	cmp	r2, #0
 800ecea:	d1c7      	bne.n	800ec7c <_strtod_l+0x34>
 800ecec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecee:	9419      	str	r4, [sp, #100]	@ 0x64
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f040 8566 	bne.w	800f7c2 <_strtod_l+0xb7a>
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	4659      	mov	r1, fp
 800ecfa:	e7e7      	b.n	800eccc <_strtod_l+0x84>
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	e7ef      	b.n	800ece0 <_strtod_l+0x98>
 800ed00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed02:	b13a      	cbz	r2, 800ed14 <_strtod_l+0xcc>
 800ed04:	2135      	movs	r1, #53	@ 0x35
 800ed06:	a81c      	add	r0, sp, #112	@ 0x70
 800ed08:	f7ff ff38 	bl	800eb7c <__copybits>
 800ed0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed0e:	9805      	ldr	r0, [sp, #20]
 800ed10:	f7ff fb18 	bl	800e344 <_Bfree>
 800ed14:	3e01      	subs	r6, #1
 800ed16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ed18:	2e04      	cmp	r6, #4
 800ed1a:	d806      	bhi.n	800ed2a <_strtod_l+0xe2>
 800ed1c:	e8df f006 	tbb	[pc, r6]
 800ed20:	201d0314 	.word	0x201d0314
 800ed24:	14          	.byte	0x14
 800ed25:	00          	.byte	0x00
 800ed26:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ed2a:	05e1      	lsls	r1, r4, #23
 800ed2c:	bf48      	it	mi
 800ed2e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ed32:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed36:	0d1b      	lsrs	r3, r3, #20
 800ed38:	051b      	lsls	r3, r3, #20
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1bd      	bne.n	800ecba <_strtod_l+0x72>
 800ed3e:	f7fe fb27 	bl	800d390 <__errno>
 800ed42:	2322      	movs	r3, #34	@ 0x22
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	e7b8      	b.n	800ecba <_strtod_l+0x72>
 800ed48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ed4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ed50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ed54:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed58:	e7e7      	b.n	800ed2a <_strtod_l+0xe2>
 800ed5a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800eed8 <_strtod_l+0x290>
 800ed5e:	e7e4      	b.n	800ed2a <_strtod_l+0xe2>
 800ed60:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ed64:	f04f 3aff 	mov.w	sl, #4294967295
 800ed68:	e7df      	b.n	800ed2a <_strtod_l+0xe2>
 800ed6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed70:	785b      	ldrb	r3, [r3, #1]
 800ed72:	2b30      	cmp	r3, #48	@ 0x30
 800ed74:	d0f9      	beq.n	800ed6a <_strtod_l+0x122>
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d09f      	beq.n	800ecba <_strtod_l+0x72>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	2700      	movs	r7, #0
 800ed7e:	220a      	movs	r2, #10
 800ed80:	46b9      	mov	r9, r7
 800ed82:	9308      	str	r3, [sp, #32]
 800ed84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed86:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ed88:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed8a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ed8c:	7805      	ldrb	r5, [r0, #0]
 800ed8e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ed92:	b2d9      	uxtb	r1, r3
 800ed94:	2909      	cmp	r1, #9
 800ed96:	d928      	bls.n	800edea <_strtod_l+0x1a2>
 800ed98:	2201      	movs	r2, #1
 800ed9a:	4950      	ldr	r1, [pc, #320]	@ (800eedc <_strtod_l+0x294>)
 800ed9c:	f7fe fa9c 	bl	800d2d8 <strncmp>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	d032      	beq.n	800ee0a <_strtod_l+0x1c2>
 800eda4:	2000      	movs	r0, #0
 800eda6:	462a      	mov	r2, r5
 800eda8:	4603      	mov	r3, r0
 800edaa:	464d      	mov	r5, r9
 800edac:	900a      	str	r0, [sp, #40]	@ 0x28
 800edae:	2a65      	cmp	r2, #101	@ 0x65
 800edb0:	d001      	beq.n	800edb6 <_strtod_l+0x16e>
 800edb2:	2a45      	cmp	r2, #69	@ 0x45
 800edb4:	d114      	bne.n	800ede0 <_strtod_l+0x198>
 800edb6:	b91d      	cbnz	r5, 800edc0 <_strtod_l+0x178>
 800edb8:	9a08      	ldr	r2, [sp, #32]
 800edba:	4302      	orrs	r2, r0
 800edbc:	d096      	beq.n	800ecec <_strtod_l+0xa4>
 800edbe:	2500      	movs	r5, #0
 800edc0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800edc2:	1c62      	adds	r2, r4, #1
 800edc4:	9219      	str	r2, [sp, #100]	@ 0x64
 800edc6:	7862      	ldrb	r2, [r4, #1]
 800edc8:	2a2b      	cmp	r2, #43	@ 0x2b
 800edca:	d07a      	beq.n	800eec2 <_strtod_l+0x27a>
 800edcc:	2a2d      	cmp	r2, #45	@ 0x2d
 800edce:	d07e      	beq.n	800eece <_strtod_l+0x286>
 800edd0:	f04f 0c00 	mov.w	ip, #0
 800edd4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800edd8:	2909      	cmp	r1, #9
 800edda:	f240 8085 	bls.w	800eee8 <_strtod_l+0x2a0>
 800edde:	9419      	str	r4, [sp, #100]	@ 0x64
 800ede0:	f04f 0800 	mov.w	r8, #0
 800ede4:	e0a5      	b.n	800ef32 <_strtod_l+0x2ea>
 800ede6:	2300      	movs	r3, #0
 800ede8:	e7c8      	b.n	800ed7c <_strtod_l+0x134>
 800edea:	f1b9 0f08 	cmp.w	r9, #8
 800edee:	bfd8      	it	le
 800edf0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800edf2:	f100 0001 	add.w	r0, r0, #1
 800edf6:	bfd6      	itet	le
 800edf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800edfc:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ee00:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ee02:	f109 0901 	add.w	r9, r9, #1
 800ee06:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee08:	e7bf      	b.n	800ed8a <_strtod_l+0x142>
 800ee0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee10:	785a      	ldrb	r2, [r3, #1]
 800ee12:	f1b9 0f00 	cmp.w	r9, #0
 800ee16:	d03b      	beq.n	800ee90 <_strtod_l+0x248>
 800ee18:	464d      	mov	r5, r9
 800ee1a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee1c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ee20:	2b09      	cmp	r3, #9
 800ee22:	d912      	bls.n	800ee4a <_strtod_l+0x202>
 800ee24:	2301      	movs	r3, #1
 800ee26:	e7c2      	b.n	800edae <_strtod_l+0x166>
 800ee28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	1c5a      	adds	r2, r3, #1
 800ee2e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee30:	785a      	ldrb	r2, [r3, #1]
 800ee32:	2a30      	cmp	r2, #48	@ 0x30
 800ee34:	d0f8      	beq.n	800ee28 <_strtod_l+0x1e0>
 800ee36:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ee3a:	2b08      	cmp	r3, #8
 800ee3c:	f200 84c8 	bhi.w	800f7d0 <_strtod_l+0xb88>
 800ee40:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee42:	2000      	movs	r0, #0
 800ee44:	4605      	mov	r5, r0
 800ee46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee48:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee4a:	3a30      	subs	r2, #48	@ 0x30
 800ee4c:	f100 0301 	add.w	r3, r0, #1
 800ee50:	d018      	beq.n	800ee84 <_strtod_l+0x23c>
 800ee52:	462e      	mov	r6, r5
 800ee54:	f04f 0e0a 	mov.w	lr, #10
 800ee58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee5a:	4419      	add	r1, r3
 800ee5c:	910a      	str	r1, [sp, #40]	@ 0x28
 800ee5e:	1c71      	adds	r1, r6, #1
 800ee60:	eba1 0c05 	sub.w	ip, r1, r5
 800ee64:	4563      	cmp	r3, ip
 800ee66:	dc15      	bgt.n	800ee94 <_strtod_l+0x24c>
 800ee68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ee6c:	182b      	adds	r3, r5, r0
 800ee6e:	2b08      	cmp	r3, #8
 800ee70:	f105 0501 	add.w	r5, r5, #1
 800ee74:	4405      	add	r5, r0
 800ee76:	dc1a      	bgt.n	800eeae <_strtod_l+0x266>
 800ee78:	230a      	movs	r3, #10
 800ee7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee7c:	fb03 2301 	mla	r3, r3, r1, r2
 800ee80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee82:	2300      	movs	r3, #0
 800ee84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee86:	4618      	mov	r0, r3
 800ee88:	1c51      	adds	r1, r2, #1
 800ee8a:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee8c:	7852      	ldrb	r2, [r2, #1]
 800ee8e:	e7c5      	b.n	800ee1c <_strtod_l+0x1d4>
 800ee90:	4648      	mov	r0, r9
 800ee92:	e7ce      	b.n	800ee32 <_strtod_l+0x1ea>
 800ee94:	2e08      	cmp	r6, #8
 800ee96:	dc05      	bgt.n	800eea4 <_strtod_l+0x25c>
 800ee98:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ee9a:	fb0e f606 	mul.w	r6, lr, r6
 800ee9e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800eea0:	460e      	mov	r6, r1
 800eea2:	e7dc      	b.n	800ee5e <_strtod_l+0x216>
 800eea4:	2910      	cmp	r1, #16
 800eea6:	bfd8      	it	le
 800eea8:	fb0e f707 	mulle.w	r7, lr, r7
 800eeac:	e7f8      	b.n	800eea0 <_strtod_l+0x258>
 800eeae:	2b0f      	cmp	r3, #15
 800eeb0:	bfdc      	itt	le
 800eeb2:	230a      	movle	r3, #10
 800eeb4:	fb03 2707 	mlale	r7, r3, r7, r2
 800eeb8:	e7e3      	b.n	800ee82 <_strtod_l+0x23a>
 800eeba:	2300      	movs	r3, #0
 800eebc:	930a      	str	r3, [sp, #40]	@ 0x28
 800eebe:	2301      	movs	r3, #1
 800eec0:	e77a      	b.n	800edb8 <_strtod_l+0x170>
 800eec2:	f04f 0c00 	mov.w	ip, #0
 800eec6:	1ca2      	adds	r2, r4, #2
 800eec8:	9219      	str	r2, [sp, #100]	@ 0x64
 800eeca:	78a2      	ldrb	r2, [r4, #2]
 800eecc:	e782      	b.n	800edd4 <_strtod_l+0x18c>
 800eece:	f04f 0c01 	mov.w	ip, #1
 800eed2:	e7f8      	b.n	800eec6 <_strtod_l+0x27e>
 800eed4:	08011bdc 	.word	0x08011bdc
 800eed8:	7ff00000 	.word	0x7ff00000
 800eedc:	080119f7 	.word	0x080119f7
 800eee0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eee2:	1c51      	adds	r1, r2, #1
 800eee4:	9119      	str	r1, [sp, #100]	@ 0x64
 800eee6:	7852      	ldrb	r2, [r2, #1]
 800eee8:	2a30      	cmp	r2, #48	@ 0x30
 800eeea:	d0f9      	beq.n	800eee0 <_strtod_l+0x298>
 800eeec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eef0:	2908      	cmp	r1, #8
 800eef2:	f63f af75 	bhi.w	800ede0 <_strtod_l+0x198>
 800eef6:	f04f 080a 	mov.w	r8, #10
 800eefa:	3a30      	subs	r2, #48	@ 0x30
 800eefc:	9209      	str	r2, [sp, #36]	@ 0x24
 800eefe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef00:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ef02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef04:	1c56      	adds	r6, r2, #1
 800ef06:	9619      	str	r6, [sp, #100]	@ 0x64
 800ef08:	7852      	ldrb	r2, [r2, #1]
 800ef0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ef0e:	f1be 0f09 	cmp.w	lr, #9
 800ef12:	d939      	bls.n	800ef88 <_strtod_l+0x340>
 800ef14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ef1a:	1a76      	subs	r6, r6, r1
 800ef1c:	2e08      	cmp	r6, #8
 800ef1e:	dc03      	bgt.n	800ef28 <_strtod_l+0x2e0>
 800ef20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef22:	4588      	cmp	r8, r1
 800ef24:	bfa8      	it	ge
 800ef26:	4688      	movge	r8, r1
 800ef28:	f1bc 0f00 	cmp.w	ip, #0
 800ef2c:	d001      	beq.n	800ef32 <_strtod_l+0x2ea>
 800ef2e:	f1c8 0800 	rsb	r8, r8, #0
 800ef32:	2d00      	cmp	r5, #0
 800ef34:	d14e      	bne.n	800efd4 <_strtod_l+0x38c>
 800ef36:	9908      	ldr	r1, [sp, #32]
 800ef38:	4308      	orrs	r0, r1
 800ef3a:	f47f aebe 	bne.w	800ecba <_strtod_l+0x72>
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f47f aed4 	bne.w	800ecec <_strtod_l+0xa4>
 800ef44:	2a69      	cmp	r2, #105	@ 0x69
 800ef46:	d028      	beq.n	800ef9a <_strtod_l+0x352>
 800ef48:	dc25      	bgt.n	800ef96 <_strtod_l+0x34e>
 800ef4a:	2a49      	cmp	r2, #73	@ 0x49
 800ef4c:	d025      	beq.n	800ef9a <_strtod_l+0x352>
 800ef4e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ef50:	f47f aecc 	bne.w	800ecec <_strtod_l+0xa4>
 800ef54:	4999      	ldr	r1, [pc, #612]	@ (800f1bc <_strtod_l+0x574>)
 800ef56:	a819      	add	r0, sp, #100	@ 0x64
 800ef58:	f001 fd56 	bl	8010a08 <__match>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	f43f aec5 	beq.w	800ecec <_strtod_l+0xa4>
 800ef62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2b28      	cmp	r3, #40	@ 0x28
 800ef68:	d12e      	bne.n	800efc8 <_strtod_l+0x380>
 800ef6a:	4995      	ldr	r1, [pc, #596]	@ (800f1c0 <_strtod_l+0x578>)
 800ef6c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef6e:	a819      	add	r0, sp, #100	@ 0x64
 800ef70:	f001 fd5e 	bl	8010a30 <__hexnan>
 800ef74:	2805      	cmp	r0, #5
 800ef76:	d127      	bne.n	800efc8 <_strtod_l+0x380>
 800ef78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ef7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ef82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ef86:	e698      	b.n	800ecba <_strtod_l+0x72>
 800ef88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef8a:	fb08 2101 	mla	r1, r8, r1, r2
 800ef8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ef92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef94:	e7b5      	b.n	800ef02 <_strtod_l+0x2ba>
 800ef96:	2a6e      	cmp	r2, #110	@ 0x6e
 800ef98:	e7da      	b.n	800ef50 <_strtod_l+0x308>
 800ef9a:	498a      	ldr	r1, [pc, #552]	@ (800f1c4 <_strtod_l+0x57c>)
 800ef9c:	a819      	add	r0, sp, #100	@ 0x64
 800ef9e:	f001 fd33 	bl	8010a08 <__match>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	f43f aea2 	beq.w	800ecec <_strtod_l+0xa4>
 800efa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efaa:	4987      	ldr	r1, [pc, #540]	@ (800f1c8 <_strtod_l+0x580>)
 800efac:	3b01      	subs	r3, #1
 800efae:	a819      	add	r0, sp, #100	@ 0x64
 800efb0:	9319      	str	r3, [sp, #100]	@ 0x64
 800efb2:	f001 fd29 	bl	8010a08 <__match>
 800efb6:	b910      	cbnz	r0, 800efbe <_strtod_l+0x376>
 800efb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efba:	3301      	adds	r3, #1
 800efbc:	9319      	str	r3, [sp, #100]	@ 0x64
 800efbe:	f04f 0a00 	mov.w	sl, #0
 800efc2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800f1cc <_strtod_l+0x584>
 800efc6:	e678      	b.n	800ecba <_strtod_l+0x72>
 800efc8:	4881      	ldr	r0, [pc, #516]	@ (800f1d0 <_strtod_l+0x588>)
 800efca:	f001 fa5b 	bl	8010484 <nan>
 800efce:	4682      	mov	sl, r0
 800efd0:	468b      	mov	fp, r1
 800efd2:	e672      	b.n	800ecba <_strtod_l+0x72>
 800efd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efd6:	f1b9 0f00 	cmp.w	r9, #0
 800efda:	bf08      	it	eq
 800efdc:	46a9      	moveq	r9, r5
 800efde:	eba8 0303 	sub.w	r3, r8, r3
 800efe2:	2d10      	cmp	r5, #16
 800efe4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800efe6:	462c      	mov	r4, r5
 800efe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800efea:	bfa8      	it	ge
 800efec:	2410      	movge	r4, #16
 800efee:	f7f1 f9f9 	bl	80003e4 <__aeabi_ui2d>
 800eff2:	2d09      	cmp	r5, #9
 800eff4:	4682      	mov	sl, r0
 800eff6:	468b      	mov	fp, r1
 800eff8:	dc11      	bgt.n	800f01e <_strtod_l+0x3d6>
 800effa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800effc:	2b00      	cmp	r3, #0
 800effe:	f43f ae5c 	beq.w	800ecba <_strtod_l+0x72>
 800f002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f004:	dd76      	ble.n	800f0f4 <_strtod_l+0x4ac>
 800f006:	2b16      	cmp	r3, #22
 800f008:	dc5d      	bgt.n	800f0c6 <_strtod_l+0x47e>
 800f00a:	4972      	ldr	r1, [pc, #456]	@ (800f1d4 <_strtod_l+0x58c>)
 800f00c:	4652      	mov	r2, sl
 800f00e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f012:	465b      	mov	r3, fp
 800f014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f018:	f7f1 fa5e 	bl	80004d8 <__aeabi_dmul>
 800f01c:	e7d7      	b.n	800efce <_strtod_l+0x386>
 800f01e:	4b6d      	ldr	r3, [pc, #436]	@ (800f1d4 <_strtod_l+0x58c>)
 800f020:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f024:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f028:	f7f1 fa56 	bl	80004d8 <__aeabi_dmul>
 800f02c:	4682      	mov	sl, r0
 800f02e:	4638      	mov	r0, r7
 800f030:	468b      	mov	fp, r1
 800f032:	f7f1 f9d7 	bl	80003e4 <__aeabi_ui2d>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4650      	mov	r0, sl
 800f03c:	4659      	mov	r1, fp
 800f03e:	f7f1 f895 	bl	800016c <__adddf3>
 800f042:	2d0f      	cmp	r5, #15
 800f044:	4682      	mov	sl, r0
 800f046:	468b      	mov	fp, r1
 800f048:	ddd7      	ble.n	800effa <_strtod_l+0x3b2>
 800f04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f04c:	1b2c      	subs	r4, r5, r4
 800f04e:	441c      	add	r4, r3
 800f050:	2c00      	cmp	r4, #0
 800f052:	f340 8093 	ble.w	800f17c <_strtod_l+0x534>
 800f056:	f014 030f 	ands.w	r3, r4, #15
 800f05a:	d00a      	beq.n	800f072 <_strtod_l+0x42a>
 800f05c:	495d      	ldr	r1, [pc, #372]	@ (800f1d4 <_strtod_l+0x58c>)
 800f05e:	4652      	mov	r2, sl
 800f060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f068:	465b      	mov	r3, fp
 800f06a:	f7f1 fa35 	bl	80004d8 <__aeabi_dmul>
 800f06e:	4682      	mov	sl, r0
 800f070:	468b      	mov	fp, r1
 800f072:	f034 040f 	bics.w	r4, r4, #15
 800f076:	d073      	beq.n	800f160 <_strtod_l+0x518>
 800f078:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f07c:	dd49      	ble.n	800f112 <_strtod_l+0x4ca>
 800f07e:	2400      	movs	r4, #0
 800f080:	46a0      	mov	r8, r4
 800f082:	46a1      	mov	r9, r4
 800f084:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f086:	2322      	movs	r3, #34	@ 0x22
 800f088:	f04f 0a00 	mov.w	sl, #0
 800f08c:	9a05      	ldr	r2, [sp, #20]
 800f08e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800f1cc <_strtod_l+0x584>
 800f092:	6013      	str	r3, [r2, #0]
 800f094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f096:	2b00      	cmp	r3, #0
 800f098:	f43f ae0f 	beq.w	800ecba <_strtod_l+0x72>
 800f09c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f09e:	9805      	ldr	r0, [sp, #20]
 800f0a0:	f7ff f950 	bl	800e344 <_Bfree>
 800f0a4:	4649      	mov	r1, r9
 800f0a6:	9805      	ldr	r0, [sp, #20]
 800f0a8:	f7ff f94c 	bl	800e344 <_Bfree>
 800f0ac:	4641      	mov	r1, r8
 800f0ae:	9805      	ldr	r0, [sp, #20]
 800f0b0:	f7ff f948 	bl	800e344 <_Bfree>
 800f0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f0b6:	9805      	ldr	r0, [sp, #20]
 800f0b8:	f7ff f944 	bl	800e344 <_Bfree>
 800f0bc:	4621      	mov	r1, r4
 800f0be:	9805      	ldr	r0, [sp, #20]
 800f0c0:	f7ff f940 	bl	800e344 <_Bfree>
 800f0c4:	e5f9      	b.n	800ecba <_strtod_l+0x72>
 800f0c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	dbbc      	blt.n	800f04a <_strtod_l+0x402>
 800f0d0:	4c40      	ldr	r4, [pc, #256]	@ (800f1d4 <_strtod_l+0x58c>)
 800f0d2:	f1c5 050f 	rsb	r5, r5, #15
 800f0d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f0da:	4652      	mov	r2, sl
 800f0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e0:	465b      	mov	r3, fp
 800f0e2:	f7f1 f9f9 	bl	80004d8 <__aeabi_dmul>
 800f0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e8:	1b5d      	subs	r5, r3, r5
 800f0ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f0ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0f2:	e791      	b.n	800f018 <_strtod_l+0x3d0>
 800f0f4:	3316      	adds	r3, #22
 800f0f6:	dba8      	blt.n	800f04a <_strtod_l+0x402>
 800f0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0fa:	4650      	mov	r0, sl
 800f0fc:	eba3 0808 	sub.w	r8, r3, r8
 800f100:	4b34      	ldr	r3, [pc, #208]	@ (800f1d4 <_strtod_l+0x58c>)
 800f102:	4659      	mov	r1, fp
 800f104:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f108:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f10c:	f7f1 fb0e 	bl	800072c <__aeabi_ddiv>
 800f110:	e75d      	b.n	800efce <_strtod_l+0x386>
 800f112:	2300      	movs	r3, #0
 800f114:	4650      	mov	r0, sl
 800f116:	4659      	mov	r1, fp
 800f118:	461e      	mov	r6, r3
 800f11a:	4f2f      	ldr	r7, [pc, #188]	@ (800f1d8 <_strtod_l+0x590>)
 800f11c:	1124      	asrs	r4, r4, #4
 800f11e:	2c01      	cmp	r4, #1
 800f120:	dc21      	bgt.n	800f166 <_strtod_l+0x51e>
 800f122:	b10b      	cbz	r3, 800f128 <_strtod_l+0x4e0>
 800f124:	4682      	mov	sl, r0
 800f126:	468b      	mov	fp, r1
 800f128:	492b      	ldr	r1, [pc, #172]	@ (800f1d8 <_strtod_l+0x590>)
 800f12a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f12e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f132:	4652      	mov	r2, sl
 800f134:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f138:	465b      	mov	r3, fp
 800f13a:	f7f1 f9cd 	bl	80004d8 <__aeabi_dmul>
 800f13e:	4b23      	ldr	r3, [pc, #140]	@ (800f1cc <_strtod_l+0x584>)
 800f140:	460a      	mov	r2, r1
 800f142:	400b      	ands	r3, r1
 800f144:	4925      	ldr	r1, [pc, #148]	@ (800f1dc <_strtod_l+0x594>)
 800f146:	4682      	mov	sl, r0
 800f148:	428b      	cmp	r3, r1
 800f14a:	d898      	bhi.n	800f07e <_strtod_l+0x436>
 800f14c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f150:	428b      	cmp	r3, r1
 800f152:	bf86      	itte	hi
 800f154:	f04f 3aff 	movhi.w	sl, #4294967295
 800f158:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800f1e0 <_strtod_l+0x598>
 800f15c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f160:	2300      	movs	r3, #0
 800f162:	9308      	str	r3, [sp, #32]
 800f164:	e076      	b.n	800f254 <_strtod_l+0x60c>
 800f166:	07e2      	lsls	r2, r4, #31
 800f168:	d504      	bpl.n	800f174 <_strtod_l+0x52c>
 800f16a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f16e:	f7f1 f9b3 	bl	80004d8 <__aeabi_dmul>
 800f172:	2301      	movs	r3, #1
 800f174:	3601      	adds	r6, #1
 800f176:	1064      	asrs	r4, r4, #1
 800f178:	3708      	adds	r7, #8
 800f17a:	e7d0      	b.n	800f11e <_strtod_l+0x4d6>
 800f17c:	d0f0      	beq.n	800f160 <_strtod_l+0x518>
 800f17e:	4264      	negs	r4, r4
 800f180:	f014 020f 	ands.w	r2, r4, #15
 800f184:	d00a      	beq.n	800f19c <_strtod_l+0x554>
 800f186:	4b13      	ldr	r3, [pc, #76]	@ (800f1d4 <_strtod_l+0x58c>)
 800f188:	4650      	mov	r0, sl
 800f18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18e:	4659      	mov	r1, fp
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	f7f1 faca 	bl	800072c <__aeabi_ddiv>
 800f198:	4682      	mov	sl, r0
 800f19a:	468b      	mov	fp, r1
 800f19c:	1124      	asrs	r4, r4, #4
 800f19e:	d0df      	beq.n	800f160 <_strtod_l+0x518>
 800f1a0:	2c1f      	cmp	r4, #31
 800f1a2:	dd1f      	ble.n	800f1e4 <_strtod_l+0x59c>
 800f1a4:	2400      	movs	r4, #0
 800f1a6:	46a0      	mov	r8, r4
 800f1a8:	46a1      	mov	r9, r4
 800f1aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1ac:	2322      	movs	r3, #34	@ 0x22
 800f1ae:	9a05      	ldr	r2, [sp, #20]
 800f1b0:	f04f 0a00 	mov.w	sl, #0
 800f1b4:	f04f 0b00 	mov.w	fp, #0
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	e76b      	b.n	800f094 <_strtod_l+0x44c>
 800f1bc:	080118e7 	.word	0x080118e7
 800f1c0:	08011bc8 	.word	0x08011bc8
 800f1c4:	080118df 	.word	0x080118df
 800f1c8:	08011914 	.word	0x08011914
 800f1cc:	7ff00000 	.word	0x7ff00000
 800f1d0:	08011a68 	.word	0x08011a68
 800f1d4:	08011b00 	.word	0x08011b00
 800f1d8:	08011ad8 	.word	0x08011ad8
 800f1dc:	7ca00000 	.word	0x7ca00000
 800f1e0:	7fefffff 	.word	0x7fefffff
 800f1e4:	f014 0310 	ands.w	r3, r4, #16
 800f1e8:	bf18      	it	ne
 800f1ea:	236a      	movne	r3, #106	@ 0x6a
 800f1ec:	4650      	mov	r0, sl
 800f1ee:	9308      	str	r3, [sp, #32]
 800f1f0:	4659      	mov	r1, fp
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4e77      	ldr	r6, [pc, #476]	@ (800f3d4 <_strtod_l+0x78c>)
 800f1f6:	07e7      	lsls	r7, r4, #31
 800f1f8:	d504      	bpl.n	800f204 <_strtod_l+0x5bc>
 800f1fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1fe:	f7f1 f96b 	bl	80004d8 <__aeabi_dmul>
 800f202:	2301      	movs	r3, #1
 800f204:	1064      	asrs	r4, r4, #1
 800f206:	f106 0608 	add.w	r6, r6, #8
 800f20a:	d1f4      	bne.n	800f1f6 <_strtod_l+0x5ae>
 800f20c:	b10b      	cbz	r3, 800f212 <_strtod_l+0x5ca>
 800f20e:	4682      	mov	sl, r0
 800f210:	468b      	mov	fp, r1
 800f212:	9b08      	ldr	r3, [sp, #32]
 800f214:	b1b3      	cbz	r3, 800f244 <_strtod_l+0x5fc>
 800f216:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f21a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f21e:	2b00      	cmp	r3, #0
 800f220:	4659      	mov	r1, fp
 800f222:	dd0f      	ble.n	800f244 <_strtod_l+0x5fc>
 800f224:	2b1f      	cmp	r3, #31
 800f226:	dd58      	ble.n	800f2da <_strtod_l+0x692>
 800f228:	2b34      	cmp	r3, #52	@ 0x34
 800f22a:	bfd8      	it	le
 800f22c:	f04f 33ff 	movle.w	r3, #4294967295
 800f230:	f04f 0a00 	mov.w	sl, #0
 800f234:	bfcf      	iteee	gt
 800f236:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f23a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f23e:	4093      	lslle	r3, r2
 800f240:	ea03 0b01 	andle.w	fp, r3, r1
 800f244:	2200      	movs	r2, #0
 800f246:	2300      	movs	r3, #0
 800f248:	4650      	mov	r0, sl
 800f24a:	4659      	mov	r1, fp
 800f24c:	f7f1 fbac 	bl	80009a8 <__aeabi_dcmpeq>
 800f250:	2800      	cmp	r0, #0
 800f252:	d1a7      	bne.n	800f1a4 <_strtod_l+0x55c>
 800f254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f256:	464a      	mov	r2, r9
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f25c:	462b      	mov	r3, r5
 800f25e:	9805      	ldr	r0, [sp, #20]
 800f260:	f7ff f8d8 	bl	800e414 <__s2b>
 800f264:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f266:	2800      	cmp	r0, #0
 800f268:	f43f af09 	beq.w	800f07e <_strtod_l+0x436>
 800f26c:	2400      	movs	r4, #0
 800f26e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f272:	2a00      	cmp	r2, #0
 800f274:	eba3 0308 	sub.w	r3, r3, r8
 800f278:	bfa8      	it	ge
 800f27a:	2300      	movge	r3, #0
 800f27c:	46a0      	mov	r8, r4
 800f27e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f280:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f284:	9316      	str	r3, [sp, #88]	@ 0x58
 800f286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f288:	9805      	ldr	r0, [sp, #20]
 800f28a:	6859      	ldr	r1, [r3, #4]
 800f28c:	f7ff f81a 	bl	800e2c4 <_Balloc>
 800f290:	4681      	mov	r9, r0
 800f292:	2800      	cmp	r0, #0
 800f294:	f43f aef7 	beq.w	800f086 <_strtod_l+0x43e>
 800f298:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f29a:	300c      	adds	r0, #12
 800f29c:	691a      	ldr	r2, [r3, #16]
 800f29e:	f103 010c 	add.w	r1, r3, #12
 800f2a2:	3202      	adds	r2, #2
 800f2a4:	0092      	lsls	r2, r2, #2
 800f2a6:	f001 f8df 	bl	8010468 <memcpy>
 800f2aa:	ab1c      	add	r3, sp, #112	@ 0x70
 800f2ac:	9301      	str	r3, [sp, #4]
 800f2ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	4652      	mov	r2, sl
 800f2b4:	465b      	mov	r3, fp
 800f2b6:	9805      	ldr	r0, [sp, #20]
 800f2b8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f2bc:	f7ff fbd6 	bl	800ea6c <__d2b>
 800f2c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	f43f aedf 	beq.w	800f086 <_strtod_l+0x43e>
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	9805      	ldr	r0, [sp, #20]
 800f2cc:	f7ff f938 	bl	800e540 <__i2b>
 800f2d0:	4680      	mov	r8, r0
 800f2d2:	b948      	cbnz	r0, 800f2e8 <_strtod_l+0x6a0>
 800f2d4:	f04f 0800 	mov.w	r8, #0
 800f2d8:	e6d5      	b.n	800f086 <_strtod_l+0x43e>
 800f2da:	f04f 32ff 	mov.w	r2, #4294967295
 800f2de:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e2:	ea03 0a0a 	and.w	sl, r3, sl
 800f2e6:	e7ad      	b.n	800f244 <_strtod_l+0x5fc>
 800f2e8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f2ea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f2ec:	2d00      	cmp	r5, #0
 800f2ee:	bfab      	itete	ge
 800f2f0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f2f2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f2f4:	18ef      	addge	r7, r5, r3
 800f2f6:	1b5e      	sublt	r6, r3, r5
 800f2f8:	9b08      	ldr	r3, [sp, #32]
 800f2fa:	bfa8      	it	ge
 800f2fc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f2fe:	eba5 0503 	sub.w	r5, r5, r3
 800f302:	4415      	add	r5, r2
 800f304:	4b34      	ldr	r3, [pc, #208]	@ (800f3d8 <_strtod_l+0x790>)
 800f306:	f105 35ff 	add.w	r5, r5, #4294967295
 800f30a:	bfb8      	it	lt
 800f30c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f30e:	429d      	cmp	r5, r3
 800f310:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f314:	da50      	bge.n	800f3b8 <_strtod_l+0x770>
 800f316:	1b5b      	subs	r3, r3, r5
 800f318:	2b1f      	cmp	r3, #31
 800f31a:	f04f 0101 	mov.w	r1, #1
 800f31e:	eba2 0203 	sub.w	r2, r2, r3
 800f322:	dc3d      	bgt.n	800f3a0 <_strtod_l+0x758>
 800f324:	fa01 f303 	lsl.w	r3, r1, r3
 800f328:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f32a:	2300      	movs	r3, #0
 800f32c:	9310      	str	r3, [sp, #64]	@ 0x40
 800f32e:	18bd      	adds	r5, r7, r2
 800f330:	9b08      	ldr	r3, [sp, #32]
 800f332:	42af      	cmp	r7, r5
 800f334:	4416      	add	r6, r2
 800f336:	441e      	add	r6, r3
 800f338:	463b      	mov	r3, r7
 800f33a:	bfa8      	it	ge
 800f33c:	462b      	movge	r3, r5
 800f33e:	42b3      	cmp	r3, r6
 800f340:	bfa8      	it	ge
 800f342:	4633      	movge	r3, r6
 800f344:	2b00      	cmp	r3, #0
 800f346:	bfc2      	ittt	gt
 800f348:	1aed      	subgt	r5, r5, r3
 800f34a:	1af6      	subgt	r6, r6, r3
 800f34c:	1aff      	subgt	r7, r7, r3
 800f34e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f350:	2b00      	cmp	r3, #0
 800f352:	dd16      	ble.n	800f382 <_strtod_l+0x73a>
 800f354:	4641      	mov	r1, r8
 800f356:	461a      	mov	r2, r3
 800f358:	9805      	ldr	r0, [sp, #20]
 800f35a:	f7ff f9a9 	bl	800e6b0 <__pow5mult>
 800f35e:	4680      	mov	r8, r0
 800f360:	2800      	cmp	r0, #0
 800f362:	d0b7      	beq.n	800f2d4 <_strtod_l+0x68c>
 800f364:	4601      	mov	r1, r0
 800f366:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f368:	9805      	ldr	r0, [sp, #20]
 800f36a:	f7ff f8ff 	bl	800e56c <__multiply>
 800f36e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f370:	2800      	cmp	r0, #0
 800f372:	f43f ae88 	beq.w	800f086 <_strtod_l+0x43e>
 800f376:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f378:	9805      	ldr	r0, [sp, #20]
 800f37a:	f7fe ffe3 	bl	800e344 <_Bfree>
 800f37e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f380:	931a      	str	r3, [sp, #104]	@ 0x68
 800f382:	2d00      	cmp	r5, #0
 800f384:	dc1d      	bgt.n	800f3c2 <_strtod_l+0x77a>
 800f386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f388:	2b00      	cmp	r3, #0
 800f38a:	dd27      	ble.n	800f3dc <_strtod_l+0x794>
 800f38c:	4649      	mov	r1, r9
 800f38e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f390:	9805      	ldr	r0, [sp, #20]
 800f392:	f7ff f98d 	bl	800e6b0 <__pow5mult>
 800f396:	4681      	mov	r9, r0
 800f398:	bb00      	cbnz	r0, 800f3dc <_strtod_l+0x794>
 800f39a:	f04f 0900 	mov.w	r9, #0
 800f39e:	e672      	b.n	800f086 <_strtod_l+0x43e>
 800f3a0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f3a4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f3a8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f3ac:	35e2      	adds	r5, #226	@ 0xe2
 800f3ae:	fa01 f305 	lsl.w	r3, r1, r5
 800f3b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3b4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f3b6:	e7ba      	b.n	800f32e <_strtod_l+0x6e6>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3bc:	2301      	movs	r3, #1
 800f3be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3c0:	e7b5      	b.n	800f32e <_strtod_l+0x6e6>
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3c6:	9805      	ldr	r0, [sp, #20]
 800f3c8:	f7ff f9cc 	bl	800e764 <__lshift>
 800f3cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d1d9      	bne.n	800f386 <_strtod_l+0x73e>
 800f3d2:	e658      	b.n	800f086 <_strtod_l+0x43e>
 800f3d4:	08011bf0 	.word	0x08011bf0
 800f3d8:	fffffc02 	.word	0xfffffc02
 800f3dc:	2e00      	cmp	r6, #0
 800f3de:	dd07      	ble.n	800f3f0 <_strtod_l+0x7a8>
 800f3e0:	4649      	mov	r1, r9
 800f3e2:	4632      	mov	r2, r6
 800f3e4:	9805      	ldr	r0, [sp, #20]
 800f3e6:	f7ff f9bd 	bl	800e764 <__lshift>
 800f3ea:	4681      	mov	r9, r0
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d0d4      	beq.n	800f39a <_strtod_l+0x752>
 800f3f0:	2f00      	cmp	r7, #0
 800f3f2:	dd08      	ble.n	800f406 <_strtod_l+0x7be>
 800f3f4:	4641      	mov	r1, r8
 800f3f6:	463a      	mov	r2, r7
 800f3f8:	9805      	ldr	r0, [sp, #20]
 800f3fa:	f7ff f9b3 	bl	800e764 <__lshift>
 800f3fe:	4680      	mov	r8, r0
 800f400:	2800      	cmp	r0, #0
 800f402:	f43f ae40 	beq.w	800f086 <_strtod_l+0x43e>
 800f406:	464a      	mov	r2, r9
 800f408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f40a:	9805      	ldr	r0, [sp, #20]
 800f40c:	f7ff fa32 	bl	800e874 <__mdiff>
 800f410:	4604      	mov	r4, r0
 800f412:	2800      	cmp	r0, #0
 800f414:	f43f ae37 	beq.w	800f086 <_strtod_l+0x43e>
 800f418:	68c3      	ldr	r3, [r0, #12]
 800f41a:	4641      	mov	r1, r8
 800f41c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f41e:	2300      	movs	r3, #0
 800f420:	60c3      	str	r3, [r0, #12]
 800f422:	f7ff fa0b 	bl	800e83c <__mcmp>
 800f426:	2800      	cmp	r0, #0
 800f428:	da3d      	bge.n	800f4a6 <_strtod_l+0x85e>
 800f42a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f42c:	ea53 030a 	orrs.w	r3, r3, sl
 800f430:	d163      	bne.n	800f4fa <_strtod_l+0x8b2>
 800f432:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f436:	2b00      	cmp	r3, #0
 800f438:	d15f      	bne.n	800f4fa <_strtod_l+0x8b2>
 800f43a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f43e:	0d1b      	lsrs	r3, r3, #20
 800f440:	051b      	lsls	r3, r3, #20
 800f442:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f446:	d958      	bls.n	800f4fa <_strtod_l+0x8b2>
 800f448:	6963      	ldr	r3, [r4, #20]
 800f44a:	b913      	cbnz	r3, 800f452 <_strtod_l+0x80a>
 800f44c:	6923      	ldr	r3, [r4, #16]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	dd53      	ble.n	800f4fa <_strtod_l+0x8b2>
 800f452:	4621      	mov	r1, r4
 800f454:	2201      	movs	r2, #1
 800f456:	9805      	ldr	r0, [sp, #20]
 800f458:	f7ff f984 	bl	800e764 <__lshift>
 800f45c:	4641      	mov	r1, r8
 800f45e:	4604      	mov	r4, r0
 800f460:	f7ff f9ec 	bl	800e83c <__mcmp>
 800f464:	2800      	cmp	r0, #0
 800f466:	dd48      	ble.n	800f4fa <_strtod_l+0x8b2>
 800f468:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f46c:	9a08      	ldr	r2, [sp, #32]
 800f46e:	0d1b      	lsrs	r3, r3, #20
 800f470:	051b      	lsls	r3, r3, #20
 800f472:	2a00      	cmp	r2, #0
 800f474:	d062      	beq.n	800f53c <_strtod_l+0x8f4>
 800f476:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f47a:	d85f      	bhi.n	800f53c <_strtod_l+0x8f4>
 800f47c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f480:	f67f ae94 	bls.w	800f1ac <_strtod_l+0x564>
 800f484:	4650      	mov	r0, sl
 800f486:	4659      	mov	r1, fp
 800f488:	4ba3      	ldr	r3, [pc, #652]	@ (800f718 <_strtod_l+0xad0>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	f7f1 f824 	bl	80004d8 <__aeabi_dmul>
 800f490:	4ba2      	ldr	r3, [pc, #648]	@ (800f71c <_strtod_l+0xad4>)
 800f492:	4682      	mov	sl, r0
 800f494:	400b      	ands	r3, r1
 800f496:	468b      	mov	fp, r1
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f47f adff 	bne.w	800f09c <_strtod_l+0x454>
 800f49e:	2322      	movs	r3, #34	@ 0x22
 800f4a0:	9a05      	ldr	r2, [sp, #20]
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	e5fa      	b.n	800f09c <_strtod_l+0x454>
 800f4a6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f4aa:	d165      	bne.n	800f578 <_strtod_l+0x930>
 800f4ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f4ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4b2:	b35a      	cbz	r2, 800f50c <_strtod_l+0x8c4>
 800f4b4:	4a9a      	ldr	r2, [pc, #616]	@ (800f720 <_strtod_l+0xad8>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d12b      	bne.n	800f512 <_strtod_l+0x8ca>
 800f4ba:	9b08      	ldr	r3, [sp, #32]
 800f4bc:	4651      	mov	r1, sl
 800f4be:	b303      	cbz	r3, 800f502 <_strtod_l+0x8ba>
 800f4c0:	465a      	mov	r2, fp
 800f4c2:	4b96      	ldr	r3, [pc, #600]	@ (800f71c <_strtod_l+0xad4>)
 800f4c4:	4013      	ands	r3, r2
 800f4c6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ce:	d81b      	bhi.n	800f508 <_strtod_l+0x8c0>
 800f4d0:	0d1b      	lsrs	r3, r3, #20
 800f4d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f4da:	4299      	cmp	r1, r3
 800f4dc:	d119      	bne.n	800f512 <_strtod_l+0x8ca>
 800f4de:	4b91      	ldr	r3, [pc, #580]	@ (800f724 <_strtod_l+0xadc>)
 800f4e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d102      	bne.n	800f4ec <_strtod_l+0x8a4>
 800f4e6:	3101      	adds	r1, #1
 800f4e8:	f43f adcd 	beq.w	800f086 <_strtod_l+0x43e>
 800f4ec:	f04f 0a00 	mov.w	sl, #0
 800f4f0:	4b8a      	ldr	r3, [pc, #552]	@ (800f71c <_strtod_l+0xad4>)
 800f4f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4f4:	401a      	ands	r2, r3
 800f4f6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f4fa:	9b08      	ldr	r3, [sp, #32]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1c1      	bne.n	800f484 <_strtod_l+0x83c>
 800f500:	e5cc      	b.n	800f09c <_strtod_l+0x454>
 800f502:	f04f 33ff 	mov.w	r3, #4294967295
 800f506:	e7e8      	b.n	800f4da <_strtod_l+0x892>
 800f508:	4613      	mov	r3, r2
 800f50a:	e7e6      	b.n	800f4da <_strtod_l+0x892>
 800f50c:	ea53 030a 	orrs.w	r3, r3, sl
 800f510:	d0aa      	beq.n	800f468 <_strtod_l+0x820>
 800f512:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f514:	b1db      	cbz	r3, 800f54e <_strtod_l+0x906>
 800f516:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f518:	4213      	tst	r3, r2
 800f51a:	d0ee      	beq.n	800f4fa <_strtod_l+0x8b2>
 800f51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f51e:	4650      	mov	r0, sl
 800f520:	4659      	mov	r1, fp
 800f522:	9a08      	ldr	r2, [sp, #32]
 800f524:	b1bb      	cbz	r3, 800f556 <_strtod_l+0x90e>
 800f526:	f7ff fb6d 	bl	800ec04 <sulp>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f532:	f7f0 fe1b 	bl	800016c <__adddf3>
 800f536:	4682      	mov	sl, r0
 800f538:	468b      	mov	fp, r1
 800f53a:	e7de      	b.n	800f4fa <_strtod_l+0x8b2>
 800f53c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f540:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f544:	f04f 3aff 	mov.w	sl, #4294967295
 800f548:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f54c:	e7d5      	b.n	800f4fa <_strtod_l+0x8b2>
 800f54e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f550:	ea13 0f0a 	tst.w	r3, sl
 800f554:	e7e1      	b.n	800f51a <_strtod_l+0x8d2>
 800f556:	f7ff fb55 	bl	800ec04 <sulp>
 800f55a:	4602      	mov	r2, r0
 800f55c:	460b      	mov	r3, r1
 800f55e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f562:	f7f0 fe01 	bl	8000168 <__aeabi_dsub>
 800f566:	2200      	movs	r2, #0
 800f568:	2300      	movs	r3, #0
 800f56a:	4682      	mov	sl, r0
 800f56c:	468b      	mov	fp, r1
 800f56e:	f7f1 fa1b 	bl	80009a8 <__aeabi_dcmpeq>
 800f572:	2800      	cmp	r0, #0
 800f574:	d0c1      	beq.n	800f4fa <_strtod_l+0x8b2>
 800f576:	e619      	b.n	800f1ac <_strtod_l+0x564>
 800f578:	4641      	mov	r1, r8
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7ff face 	bl	800eb1c <__ratio>
 800f580:	2200      	movs	r2, #0
 800f582:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f586:	4606      	mov	r6, r0
 800f588:	460f      	mov	r7, r1
 800f58a:	f7f1 fa21 	bl	80009d0 <__aeabi_dcmple>
 800f58e:	2800      	cmp	r0, #0
 800f590:	d06d      	beq.n	800f66e <_strtod_l+0xa26>
 800f592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f594:	2b00      	cmp	r3, #0
 800f596:	d178      	bne.n	800f68a <_strtod_l+0xa42>
 800f598:	f1ba 0f00 	cmp.w	sl, #0
 800f59c:	d156      	bne.n	800f64c <_strtod_l+0xa04>
 800f59e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d158      	bne.n	800f65a <_strtod_l+0xa12>
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	4b5e      	ldr	r3, [pc, #376]	@ (800f728 <_strtod_l+0xae0>)
 800f5b0:	f7f1 fa04 	bl	80009bc <__aeabi_dcmplt>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d157      	bne.n	800f668 <_strtod_l+0xa20>
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	4639      	mov	r1, r7
 800f5bc:	2200      	movs	r2, #0
 800f5be:	4b5b      	ldr	r3, [pc, #364]	@ (800f72c <_strtod_l+0xae4>)
 800f5c0:	f7f0 ff8a 	bl	80004d8 <__aeabi_dmul>
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	460f      	mov	r7, r1
 800f5c8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f5cc:	9606      	str	r6, [sp, #24]
 800f5ce:	9307      	str	r3, [sp, #28]
 800f5d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5d4:	4d51      	ldr	r5, [pc, #324]	@ (800f71c <_strtod_l+0xad4>)
 800f5d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f5da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5dc:	401d      	ands	r5, r3
 800f5de:	4b54      	ldr	r3, [pc, #336]	@ (800f730 <_strtod_l+0xae8>)
 800f5e0:	429d      	cmp	r5, r3
 800f5e2:	f040 80ab 	bne.w	800f73c <_strtod_l+0xaf4>
 800f5e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5e8:	4650      	mov	r0, sl
 800f5ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f5ee:	4659      	mov	r1, fp
 800f5f0:	f7ff f9d4 	bl	800e99c <__ulp>
 800f5f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5f8:	f7f0 ff6e 	bl	80004d8 <__aeabi_dmul>
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	465b      	mov	r3, fp
 800f600:	f7f0 fdb4 	bl	800016c <__adddf3>
 800f604:	460b      	mov	r3, r1
 800f606:	4945      	ldr	r1, [pc, #276]	@ (800f71c <_strtod_l+0xad4>)
 800f608:	4a4a      	ldr	r2, [pc, #296]	@ (800f734 <_strtod_l+0xaec>)
 800f60a:	4019      	ands	r1, r3
 800f60c:	4291      	cmp	r1, r2
 800f60e:	4682      	mov	sl, r0
 800f610:	d942      	bls.n	800f698 <_strtod_l+0xa50>
 800f612:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f614:	4b43      	ldr	r3, [pc, #268]	@ (800f724 <_strtod_l+0xadc>)
 800f616:	429a      	cmp	r2, r3
 800f618:	d103      	bne.n	800f622 <_strtod_l+0x9da>
 800f61a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f61c:	3301      	adds	r3, #1
 800f61e:	f43f ad32 	beq.w	800f086 <_strtod_l+0x43e>
 800f622:	f04f 3aff 	mov.w	sl, #4294967295
 800f626:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800f724 <_strtod_l+0xadc>
 800f62a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f62c:	9805      	ldr	r0, [sp, #20]
 800f62e:	f7fe fe89 	bl	800e344 <_Bfree>
 800f632:	4649      	mov	r1, r9
 800f634:	9805      	ldr	r0, [sp, #20]
 800f636:	f7fe fe85 	bl	800e344 <_Bfree>
 800f63a:	4641      	mov	r1, r8
 800f63c:	9805      	ldr	r0, [sp, #20]
 800f63e:	f7fe fe81 	bl	800e344 <_Bfree>
 800f642:	4621      	mov	r1, r4
 800f644:	9805      	ldr	r0, [sp, #20]
 800f646:	f7fe fe7d 	bl	800e344 <_Bfree>
 800f64a:	e61c      	b.n	800f286 <_strtod_l+0x63e>
 800f64c:	f1ba 0f01 	cmp.w	sl, #1
 800f650:	d103      	bne.n	800f65a <_strtod_l+0xa12>
 800f652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f654:	2b00      	cmp	r3, #0
 800f656:	f43f ada9 	beq.w	800f1ac <_strtod_l+0x564>
 800f65a:	2200      	movs	r2, #0
 800f65c:	4b36      	ldr	r3, [pc, #216]	@ (800f738 <_strtod_l+0xaf0>)
 800f65e:	2600      	movs	r6, #0
 800f660:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f664:	4f30      	ldr	r7, [pc, #192]	@ (800f728 <_strtod_l+0xae0>)
 800f666:	e7b3      	b.n	800f5d0 <_strtod_l+0x988>
 800f668:	2600      	movs	r6, #0
 800f66a:	4f30      	ldr	r7, [pc, #192]	@ (800f72c <_strtod_l+0xae4>)
 800f66c:	e7ac      	b.n	800f5c8 <_strtod_l+0x980>
 800f66e:	4630      	mov	r0, r6
 800f670:	4639      	mov	r1, r7
 800f672:	4b2e      	ldr	r3, [pc, #184]	@ (800f72c <_strtod_l+0xae4>)
 800f674:	2200      	movs	r2, #0
 800f676:	f7f0 ff2f 	bl	80004d8 <__aeabi_dmul>
 800f67a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f67c:	4606      	mov	r6, r0
 800f67e:	460f      	mov	r7, r1
 800f680:	2b00      	cmp	r3, #0
 800f682:	d0a1      	beq.n	800f5c8 <_strtod_l+0x980>
 800f684:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f688:	e7a2      	b.n	800f5d0 <_strtod_l+0x988>
 800f68a:	2200      	movs	r2, #0
 800f68c:	4b26      	ldr	r3, [pc, #152]	@ (800f728 <_strtod_l+0xae0>)
 800f68e:	4616      	mov	r6, r2
 800f690:	461f      	mov	r7, r3
 800f692:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f696:	e79b      	b.n	800f5d0 <_strtod_l+0x988>
 800f698:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f69c:	9b08      	ldr	r3, [sp, #32]
 800f69e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1c1      	bne.n	800f62a <_strtod_l+0x9e2>
 800f6a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6aa:	0d1b      	lsrs	r3, r3, #20
 800f6ac:	051b      	lsls	r3, r3, #20
 800f6ae:	429d      	cmp	r5, r3
 800f6b0:	d1bb      	bne.n	800f62a <_strtod_l+0x9e2>
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	4639      	mov	r1, r7
 800f6b6:	f7f1 fd2b 	bl	8001110 <__aeabi_d2lz>
 800f6ba:	f7f0 fedf 	bl	800047c <__aeabi_l2d>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	4639      	mov	r1, r7
 800f6c6:	f7f0 fd4f 	bl	8000168 <__aeabi_dsub>
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f6d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f6d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6d8:	ea46 060a 	orr.w	r6, r6, sl
 800f6dc:	431e      	orrs	r6, r3
 800f6de:	d06a      	beq.n	800f7b6 <_strtod_l+0xb6e>
 800f6e0:	a309      	add	r3, pc, #36	@ (adr r3, 800f708 <_strtod_l+0xac0>)
 800f6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e6:	f7f1 f969 	bl	80009bc <__aeabi_dcmplt>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	f47f acd6 	bne.w	800f09c <_strtod_l+0x454>
 800f6f0:	a307      	add	r3, pc, #28	@ (adr r3, 800f710 <_strtod_l+0xac8>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6fa:	f7f1 f97d 	bl	80009f8 <__aeabi_dcmpgt>
 800f6fe:	2800      	cmp	r0, #0
 800f700:	d093      	beq.n	800f62a <_strtod_l+0x9e2>
 800f702:	e4cb      	b.n	800f09c <_strtod_l+0x454>
 800f704:	f3af 8000 	nop.w
 800f708:	94a03595 	.word	0x94a03595
 800f70c:	3fdfffff 	.word	0x3fdfffff
 800f710:	35afe535 	.word	0x35afe535
 800f714:	3fe00000 	.word	0x3fe00000
 800f718:	39500000 	.word	0x39500000
 800f71c:	7ff00000 	.word	0x7ff00000
 800f720:	000fffff 	.word	0x000fffff
 800f724:	7fefffff 	.word	0x7fefffff
 800f728:	3ff00000 	.word	0x3ff00000
 800f72c:	3fe00000 	.word	0x3fe00000
 800f730:	7fe00000 	.word	0x7fe00000
 800f734:	7c9fffff 	.word	0x7c9fffff
 800f738:	bff00000 	.word	0xbff00000
 800f73c:	9b08      	ldr	r3, [sp, #32]
 800f73e:	b323      	cbz	r3, 800f78a <_strtod_l+0xb42>
 800f740:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f744:	d821      	bhi.n	800f78a <_strtod_l+0xb42>
 800f746:	a328      	add	r3, pc, #160	@ (adr r3, 800f7e8 <_strtod_l+0xba0>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	4630      	mov	r0, r6
 800f74e:	4639      	mov	r1, r7
 800f750:	f7f1 f93e 	bl	80009d0 <__aeabi_dcmple>
 800f754:	b1a0      	cbz	r0, 800f780 <_strtod_l+0xb38>
 800f756:	4639      	mov	r1, r7
 800f758:	4630      	mov	r0, r6
 800f75a:	f7f1 f995 	bl	8000a88 <__aeabi_d2uiz>
 800f75e:	2801      	cmp	r0, #1
 800f760:	bf38      	it	cc
 800f762:	2001      	movcc	r0, #1
 800f764:	f7f0 fe3e 	bl	80003e4 <__aeabi_ui2d>
 800f768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f76a:	4606      	mov	r6, r0
 800f76c:	460f      	mov	r7, r1
 800f76e:	b9fb      	cbnz	r3, 800f7b0 <_strtod_l+0xb68>
 800f770:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f774:	9014      	str	r0, [sp, #80]	@ 0x50
 800f776:	9315      	str	r3, [sp, #84]	@ 0x54
 800f778:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f77c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f780:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f782:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f786:	1b5b      	subs	r3, r3, r5
 800f788:	9311      	str	r3, [sp, #68]	@ 0x44
 800f78a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f78e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f792:	f7ff f903 	bl	800e99c <__ulp>
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	4650      	mov	r0, sl
 800f79c:	4659      	mov	r1, fp
 800f79e:	f7f0 fe9b 	bl	80004d8 <__aeabi_dmul>
 800f7a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f7a6:	f7f0 fce1 	bl	800016c <__adddf3>
 800f7aa:	4682      	mov	sl, r0
 800f7ac:	468b      	mov	fp, r1
 800f7ae:	e775      	b.n	800f69c <_strtod_l+0xa54>
 800f7b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f7b4:	e7e0      	b.n	800f778 <_strtod_l+0xb30>
 800f7b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f7f0 <_strtod_l+0xba8>)
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	f7f1 f8fe 	bl	80009bc <__aeabi_dcmplt>
 800f7c0:	e79d      	b.n	800f6fe <_strtod_l+0xab6>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800f7c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7c8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f7ca:	6013      	str	r3, [r2, #0]
 800f7cc:	f7ff ba79 	b.w	800ecc2 <_strtod_l+0x7a>
 800f7d0:	2a65      	cmp	r2, #101	@ 0x65
 800f7d2:	f43f ab72 	beq.w	800eeba <_strtod_l+0x272>
 800f7d6:	2a45      	cmp	r2, #69	@ 0x45
 800f7d8:	f43f ab6f 	beq.w	800eeba <_strtod_l+0x272>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	f7ff bbaa 	b.w	800ef36 <_strtod_l+0x2ee>
 800f7e2:	bf00      	nop
 800f7e4:	f3af 8000 	nop.w
 800f7e8:	ffc00000 	.word	0xffc00000
 800f7ec:	41dfffff 	.word	0x41dfffff
 800f7f0:	94a03595 	.word	0x94a03595
 800f7f4:	3fcfffff 	.word	0x3fcfffff

0800f7f8 <_strtod_r>:
 800f7f8:	4b01      	ldr	r3, [pc, #4]	@ (800f800 <_strtod_r+0x8>)
 800f7fa:	f7ff ba25 	b.w	800ec48 <_strtod_l>
 800f7fe:	bf00      	nop
 800f800:	200001ec 	.word	0x200001ec

0800f804 <_strtol_l.isra.0>:
 800f804:	2b24      	cmp	r3, #36	@ 0x24
 800f806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f80a:	4686      	mov	lr, r0
 800f80c:	4690      	mov	r8, r2
 800f80e:	d801      	bhi.n	800f814 <_strtol_l.isra.0+0x10>
 800f810:	2b01      	cmp	r3, #1
 800f812:	d106      	bne.n	800f822 <_strtol_l.isra.0+0x1e>
 800f814:	f7fd fdbc 	bl	800d390 <__errno>
 800f818:	2316      	movs	r3, #22
 800f81a:	6003      	str	r3, [r0, #0]
 800f81c:	2000      	movs	r0, #0
 800f81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f822:	460d      	mov	r5, r1
 800f824:	4833      	ldr	r0, [pc, #204]	@ (800f8f4 <_strtol_l.isra.0+0xf0>)
 800f826:	462a      	mov	r2, r5
 800f828:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f82c:	5d06      	ldrb	r6, [r0, r4]
 800f82e:	f016 0608 	ands.w	r6, r6, #8
 800f832:	d1f8      	bne.n	800f826 <_strtol_l.isra.0+0x22>
 800f834:	2c2d      	cmp	r4, #45	@ 0x2d
 800f836:	d110      	bne.n	800f85a <_strtol_l.isra.0+0x56>
 800f838:	2601      	movs	r6, #1
 800f83a:	782c      	ldrb	r4, [r5, #0]
 800f83c:	1c95      	adds	r5, r2, #2
 800f83e:	f033 0210 	bics.w	r2, r3, #16
 800f842:	d115      	bne.n	800f870 <_strtol_l.isra.0+0x6c>
 800f844:	2c30      	cmp	r4, #48	@ 0x30
 800f846:	d10d      	bne.n	800f864 <_strtol_l.isra.0+0x60>
 800f848:	782a      	ldrb	r2, [r5, #0]
 800f84a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f84e:	2a58      	cmp	r2, #88	@ 0x58
 800f850:	d108      	bne.n	800f864 <_strtol_l.isra.0+0x60>
 800f852:	786c      	ldrb	r4, [r5, #1]
 800f854:	3502      	adds	r5, #2
 800f856:	2310      	movs	r3, #16
 800f858:	e00a      	b.n	800f870 <_strtol_l.isra.0+0x6c>
 800f85a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f85c:	bf04      	itt	eq
 800f85e:	782c      	ldrbeq	r4, [r5, #0]
 800f860:	1c95      	addeq	r5, r2, #2
 800f862:	e7ec      	b.n	800f83e <_strtol_l.isra.0+0x3a>
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1f6      	bne.n	800f856 <_strtol_l.isra.0+0x52>
 800f868:	2c30      	cmp	r4, #48	@ 0x30
 800f86a:	bf14      	ite	ne
 800f86c:	230a      	movne	r3, #10
 800f86e:	2308      	moveq	r3, #8
 800f870:	2200      	movs	r2, #0
 800f872:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f876:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f87a:	fbbc f9f3 	udiv	r9, ip, r3
 800f87e:	4610      	mov	r0, r2
 800f880:	fb03 ca19 	mls	sl, r3, r9, ip
 800f884:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f888:	2f09      	cmp	r7, #9
 800f88a:	d80f      	bhi.n	800f8ac <_strtol_l.isra.0+0xa8>
 800f88c:	463c      	mov	r4, r7
 800f88e:	42a3      	cmp	r3, r4
 800f890:	dd1b      	ble.n	800f8ca <_strtol_l.isra.0+0xc6>
 800f892:	1c57      	adds	r7, r2, #1
 800f894:	d007      	beq.n	800f8a6 <_strtol_l.isra.0+0xa2>
 800f896:	4581      	cmp	r9, r0
 800f898:	d314      	bcc.n	800f8c4 <_strtol_l.isra.0+0xc0>
 800f89a:	d101      	bne.n	800f8a0 <_strtol_l.isra.0+0x9c>
 800f89c:	45a2      	cmp	sl, r4
 800f89e:	db11      	blt.n	800f8c4 <_strtol_l.isra.0+0xc0>
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	fb00 4003 	mla	r0, r0, r3, r4
 800f8a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8aa:	e7eb      	b.n	800f884 <_strtol_l.isra.0+0x80>
 800f8ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f8b0:	2f19      	cmp	r7, #25
 800f8b2:	d801      	bhi.n	800f8b8 <_strtol_l.isra.0+0xb4>
 800f8b4:	3c37      	subs	r4, #55	@ 0x37
 800f8b6:	e7ea      	b.n	800f88e <_strtol_l.isra.0+0x8a>
 800f8b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f8bc:	2f19      	cmp	r7, #25
 800f8be:	d804      	bhi.n	800f8ca <_strtol_l.isra.0+0xc6>
 800f8c0:	3c57      	subs	r4, #87	@ 0x57
 800f8c2:	e7e4      	b.n	800f88e <_strtol_l.isra.0+0x8a>
 800f8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8c8:	e7ed      	b.n	800f8a6 <_strtol_l.isra.0+0xa2>
 800f8ca:	1c53      	adds	r3, r2, #1
 800f8cc:	d108      	bne.n	800f8e0 <_strtol_l.isra.0+0xdc>
 800f8ce:	2322      	movs	r3, #34	@ 0x22
 800f8d0:	4660      	mov	r0, ip
 800f8d2:	f8ce 3000 	str.w	r3, [lr]
 800f8d6:	f1b8 0f00 	cmp.w	r8, #0
 800f8da:	d0a0      	beq.n	800f81e <_strtol_l.isra.0+0x1a>
 800f8dc:	1e69      	subs	r1, r5, #1
 800f8de:	e006      	b.n	800f8ee <_strtol_l.isra.0+0xea>
 800f8e0:	b106      	cbz	r6, 800f8e4 <_strtol_l.isra.0+0xe0>
 800f8e2:	4240      	negs	r0, r0
 800f8e4:	f1b8 0f00 	cmp.w	r8, #0
 800f8e8:	d099      	beq.n	800f81e <_strtol_l.isra.0+0x1a>
 800f8ea:	2a00      	cmp	r2, #0
 800f8ec:	d1f6      	bne.n	800f8dc <_strtol_l.isra.0+0xd8>
 800f8ee:	f8c8 1000 	str.w	r1, [r8]
 800f8f2:	e794      	b.n	800f81e <_strtol_l.isra.0+0x1a>
 800f8f4:	08011c19 	.word	0x08011c19

0800f8f8 <_strtol_r>:
 800f8f8:	f7ff bf84 	b.w	800f804 <_strtol_l.isra.0>

0800f8fc <__ssputs_r>:
 800f8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f900:	461f      	mov	r7, r3
 800f902:	688e      	ldr	r6, [r1, #8]
 800f904:	4682      	mov	sl, r0
 800f906:	42be      	cmp	r6, r7
 800f908:	460c      	mov	r4, r1
 800f90a:	4690      	mov	r8, r2
 800f90c:	680b      	ldr	r3, [r1, #0]
 800f90e:	d82d      	bhi.n	800f96c <__ssputs_r+0x70>
 800f910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f914:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f918:	d026      	beq.n	800f968 <__ssputs_r+0x6c>
 800f91a:	6965      	ldr	r5, [r4, #20]
 800f91c:	6909      	ldr	r1, [r1, #16]
 800f91e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f922:	eba3 0901 	sub.w	r9, r3, r1
 800f926:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f92a:	1c7b      	adds	r3, r7, #1
 800f92c:	444b      	add	r3, r9
 800f92e:	106d      	asrs	r5, r5, #1
 800f930:	429d      	cmp	r5, r3
 800f932:	bf38      	it	cc
 800f934:	461d      	movcc	r5, r3
 800f936:	0553      	lsls	r3, r2, #21
 800f938:	d527      	bpl.n	800f98a <__ssputs_r+0x8e>
 800f93a:	4629      	mov	r1, r5
 800f93c:	f7fe fc36 	bl	800e1ac <_malloc_r>
 800f940:	4606      	mov	r6, r0
 800f942:	b360      	cbz	r0, 800f99e <__ssputs_r+0xa2>
 800f944:	464a      	mov	r2, r9
 800f946:	6921      	ldr	r1, [r4, #16]
 800f948:	f000 fd8e 	bl	8010468 <memcpy>
 800f94c:	89a3      	ldrh	r3, [r4, #12]
 800f94e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f956:	81a3      	strh	r3, [r4, #12]
 800f958:	6126      	str	r6, [r4, #16]
 800f95a:	444e      	add	r6, r9
 800f95c:	6026      	str	r6, [r4, #0]
 800f95e:	463e      	mov	r6, r7
 800f960:	6165      	str	r5, [r4, #20]
 800f962:	eba5 0509 	sub.w	r5, r5, r9
 800f966:	60a5      	str	r5, [r4, #8]
 800f968:	42be      	cmp	r6, r7
 800f96a:	d900      	bls.n	800f96e <__ssputs_r+0x72>
 800f96c:	463e      	mov	r6, r7
 800f96e:	4632      	mov	r2, r6
 800f970:	4641      	mov	r1, r8
 800f972:	6820      	ldr	r0, [r4, #0]
 800f974:	f000 fd4d 	bl	8010412 <memmove>
 800f978:	2000      	movs	r0, #0
 800f97a:	68a3      	ldr	r3, [r4, #8]
 800f97c:	1b9b      	subs	r3, r3, r6
 800f97e:	60a3      	str	r3, [r4, #8]
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	4433      	add	r3, r6
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98a:	462a      	mov	r2, r5
 800f98c:	f001 f8fd 	bl	8010b8a <_realloc_r>
 800f990:	4606      	mov	r6, r0
 800f992:	2800      	cmp	r0, #0
 800f994:	d1e0      	bne.n	800f958 <__ssputs_r+0x5c>
 800f996:	4650      	mov	r0, sl
 800f998:	6921      	ldr	r1, [r4, #16]
 800f99a:	f7fe fb95 	bl	800e0c8 <_free_r>
 800f99e:	230c      	movs	r3, #12
 800f9a0:	f8ca 3000 	str.w	r3, [sl]
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ae:	81a3      	strh	r3, [r4, #12]
 800f9b0:	e7e9      	b.n	800f986 <__ssputs_r+0x8a>
	...

0800f9b4 <_svfiprintf_r>:
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	4698      	mov	r8, r3
 800f9ba:	898b      	ldrh	r3, [r1, #12]
 800f9bc:	4607      	mov	r7, r0
 800f9be:	061b      	lsls	r3, r3, #24
 800f9c0:	460d      	mov	r5, r1
 800f9c2:	4614      	mov	r4, r2
 800f9c4:	b09d      	sub	sp, #116	@ 0x74
 800f9c6:	d510      	bpl.n	800f9ea <_svfiprintf_r+0x36>
 800f9c8:	690b      	ldr	r3, [r1, #16]
 800f9ca:	b973      	cbnz	r3, 800f9ea <_svfiprintf_r+0x36>
 800f9cc:	2140      	movs	r1, #64	@ 0x40
 800f9ce:	f7fe fbed 	bl	800e1ac <_malloc_r>
 800f9d2:	6028      	str	r0, [r5, #0]
 800f9d4:	6128      	str	r0, [r5, #16]
 800f9d6:	b930      	cbnz	r0, 800f9e6 <_svfiprintf_r+0x32>
 800f9d8:	230c      	movs	r3, #12
 800f9da:	603b      	str	r3, [r7, #0]
 800f9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e0:	b01d      	add	sp, #116	@ 0x74
 800f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e6:	2340      	movs	r3, #64	@ 0x40
 800f9e8:	616b      	str	r3, [r5, #20]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9ee:	2320      	movs	r3, #32
 800f9f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9f4:	2330      	movs	r3, #48	@ 0x30
 800f9f6:	f04f 0901 	mov.w	r9, #1
 800f9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800fb98 <_svfiprintf_r+0x1e4>
 800fa02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa06:	4623      	mov	r3, r4
 800fa08:	469a      	mov	sl, r3
 800fa0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa0e:	b10a      	cbz	r2, 800fa14 <_svfiprintf_r+0x60>
 800fa10:	2a25      	cmp	r2, #37	@ 0x25
 800fa12:	d1f9      	bne.n	800fa08 <_svfiprintf_r+0x54>
 800fa14:	ebba 0b04 	subs.w	fp, sl, r4
 800fa18:	d00b      	beq.n	800fa32 <_svfiprintf_r+0x7e>
 800fa1a:	465b      	mov	r3, fp
 800fa1c:	4622      	mov	r2, r4
 800fa1e:	4629      	mov	r1, r5
 800fa20:	4638      	mov	r0, r7
 800fa22:	f7ff ff6b 	bl	800f8fc <__ssputs_r>
 800fa26:	3001      	adds	r0, #1
 800fa28:	f000 80a7 	beq.w	800fb7a <_svfiprintf_r+0x1c6>
 800fa2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa2e:	445a      	add	r2, fp
 800fa30:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa32:	f89a 3000 	ldrb.w	r3, [sl]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f000 809f 	beq.w	800fb7a <_svfiprintf_r+0x1c6>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa46:	f10a 0a01 	add.w	sl, sl, #1
 800fa4a:	9304      	str	r3, [sp, #16]
 800fa4c:	9307      	str	r3, [sp, #28]
 800fa4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa52:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa54:	4654      	mov	r4, sl
 800fa56:	2205      	movs	r2, #5
 800fa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa5c:	484e      	ldr	r0, [pc, #312]	@ (800fb98 <_svfiprintf_r+0x1e4>)
 800fa5e:	f7fd fcc4 	bl	800d3ea <memchr>
 800fa62:	9a04      	ldr	r2, [sp, #16]
 800fa64:	b9d8      	cbnz	r0, 800fa9e <_svfiprintf_r+0xea>
 800fa66:	06d0      	lsls	r0, r2, #27
 800fa68:	bf44      	itt	mi
 800fa6a:	2320      	movmi	r3, #32
 800fa6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa70:	0711      	lsls	r1, r2, #28
 800fa72:	bf44      	itt	mi
 800fa74:	232b      	movmi	r3, #43	@ 0x2b
 800fa76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa7a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa80:	d015      	beq.n	800faae <_svfiprintf_r+0xfa>
 800fa82:	4654      	mov	r4, sl
 800fa84:	2000      	movs	r0, #0
 800fa86:	f04f 0c0a 	mov.w	ip, #10
 800fa8a:	9a07      	ldr	r2, [sp, #28]
 800fa8c:	4621      	mov	r1, r4
 800fa8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa92:	3b30      	subs	r3, #48	@ 0x30
 800fa94:	2b09      	cmp	r3, #9
 800fa96:	d94b      	bls.n	800fb30 <_svfiprintf_r+0x17c>
 800fa98:	b1b0      	cbz	r0, 800fac8 <_svfiprintf_r+0x114>
 800fa9a:	9207      	str	r2, [sp, #28]
 800fa9c:	e014      	b.n	800fac8 <_svfiprintf_r+0x114>
 800fa9e:	eba0 0308 	sub.w	r3, r0, r8
 800faa2:	fa09 f303 	lsl.w	r3, r9, r3
 800faa6:	4313      	orrs	r3, r2
 800faa8:	46a2      	mov	sl, r4
 800faaa:	9304      	str	r3, [sp, #16]
 800faac:	e7d2      	b.n	800fa54 <_svfiprintf_r+0xa0>
 800faae:	9b03      	ldr	r3, [sp, #12]
 800fab0:	1d19      	adds	r1, r3, #4
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	9103      	str	r1, [sp, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	bfbb      	ittet	lt
 800faba:	425b      	neglt	r3, r3
 800fabc:	f042 0202 	orrlt.w	r2, r2, #2
 800fac0:	9307      	strge	r3, [sp, #28]
 800fac2:	9307      	strlt	r3, [sp, #28]
 800fac4:	bfb8      	it	lt
 800fac6:	9204      	strlt	r2, [sp, #16]
 800fac8:	7823      	ldrb	r3, [r4, #0]
 800faca:	2b2e      	cmp	r3, #46	@ 0x2e
 800facc:	d10a      	bne.n	800fae4 <_svfiprintf_r+0x130>
 800face:	7863      	ldrb	r3, [r4, #1]
 800fad0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fad2:	d132      	bne.n	800fb3a <_svfiprintf_r+0x186>
 800fad4:	9b03      	ldr	r3, [sp, #12]
 800fad6:	3402      	adds	r4, #2
 800fad8:	1d1a      	adds	r2, r3, #4
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	9203      	str	r2, [sp, #12]
 800fade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fae2:	9305      	str	r3, [sp, #20]
 800fae4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800fb9c <_svfiprintf_r+0x1e8>
 800fae8:	2203      	movs	r2, #3
 800faea:	4650      	mov	r0, sl
 800faec:	7821      	ldrb	r1, [r4, #0]
 800faee:	f7fd fc7c 	bl	800d3ea <memchr>
 800faf2:	b138      	cbz	r0, 800fb04 <_svfiprintf_r+0x150>
 800faf4:	2240      	movs	r2, #64	@ 0x40
 800faf6:	9b04      	ldr	r3, [sp, #16]
 800faf8:	eba0 000a 	sub.w	r0, r0, sl
 800fafc:	4082      	lsls	r2, r0
 800fafe:	4313      	orrs	r3, r2
 800fb00:	3401      	adds	r4, #1
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb08:	2206      	movs	r2, #6
 800fb0a:	4825      	ldr	r0, [pc, #148]	@ (800fba0 <_svfiprintf_r+0x1ec>)
 800fb0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb10:	f7fd fc6b 	bl	800d3ea <memchr>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d036      	beq.n	800fb86 <_svfiprintf_r+0x1d2>
 800fb18:	4b22      	ldr	r3, [pc, #136]	@ (800fba4 <_svfiprintf_r+0x1f0>)
 800fb1a:	bb1b      	cbnz	r3, 800fb64 <_svfiprintf_r+0x1b0>
 800fb1c:	9b03      	ldr	r3, [sp, #12]
 800fb1e:	3307      	adds	r3, #7
 800fb20:	f023 0307 	bic.w	r3, r3, #7
 800fb24:	3308      	adds	r3, #8
 800fb26:	9303      	str	r3, [sp, #12]
 800fb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb2a:	4433      	add	r3, r6
 800fb2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb2e:	e76a      	b.n	800fa06 <_svfiprintf_r+0x52>
 800fb30:	460c      	mov	r4, r1
 800fb32:	2001      	movs	r0, #1
 800fb34:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb38:	e7a8      	b.n	800fa8c <_svfiprintf_r+0xd8>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f04f 0c0a 	mov.w	ip, #10
 800fb40:	4619      	mov	r1, r3
 800fb42:	3401      	adds	r4, #1
 800fb44:	9305      	str	r3, [sp, #20]
 800fb46:	4620      	mov	r0, r4
 800fb48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb4c:	3a30      	subs	r2, #48	@ 0x30
 800fb4e:	2a09      	cmp	r2, #9
 800fb50:	d903      	bls.n	800fb5a <_svfiprintf_r+0x1a6>
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d0c6      	beq.n	800fae4 <_svfiprintf_r+0x130>
 800fb56:	9105      	str	r1, [sp, #20]
 800fb58:	e7c4      	b.n	800fae4 <_svfiprintf_r+0x130>
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb62:	e7f0      	b.n	800fb46 <_svfiprintf_r+0x192>
 800fb64:	ab03      	add	r3, sp, #12
 800fb66:	9300      	str	r3, [sp, #0]
 800fb68:	462a      	mov	r2, r5
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	@ (800fba8 <_svfiprintf_r+0x1f4>)
 800fb6e:	a904      	add	r1, sp, #16
 800fb70:	f7fc fc52 	bl	800c418 <_printf_float>
 800fb74:	1c42      	adds	r2, r0, #1
 800fb76:	4606      	mov	r6, r0
 800fb78:	d1d6      	bne.n	800fb28 <_svfiprintf_r+0x174>
 800fb7a:	89ab      	ldrh	r3, [r5, #12]
 800fb7c:	065b      	lsls	r3, r3, #25
 800fb7e:	f53f af2d 	bmi.w	800f9dc <_svfiprintf_r+0x28>
 800fb82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb84:	e72c      	b.n	800f9e0 <_svfiprintf_r+0x2c>
 800fb86:	ab03      	add	r3, sp, #12
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	462a      	mov	r2, r5
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	4b06      	ldr	r3, [pc, #24]	@ (800fba8 <_svfiprintf_r+0x1f4>)
 800fb90:	a904      	add	r1, sp, #16
 800fb92:	f7fc fedf 	bl	800c954 <_printf_i>
 800fb96:	e7ed      	b.n	800fb74 <_svfiprintf_r+0x1c0>
 800fb98:	080119f9 	.word	0x080119f9
 800fb9c:	080119ff 	.word	0x080119ff
 800fba0:	08011a03 	.word	0x08011a03
 800fba4:	0800c419 	.word	0x0800c419
 800fba8:	0800f8fd 	.word	0x0800f8fd

0800fbac <_sungetc_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	1c4b      	adds	r3, r1, #1
 800fbb0:	4614      	mov	r4, r2
 800fbb2:	d103      	bne.n	800fbbc <_sungetc_r+0x10>
 800fbb4:	f04f 35ff 	mov.w	r5, #4294967295
 800fbb8:	4628      	mov	r0, r5
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	8993      	ldrh	r3, [r2, #12]
 800fbbe:	b2cd      	uxtb	r5, r1
 800fbc0:	f023 0320 	bic.w	r3, r3, #32
 800fbc4:	8193      	strh	r3, [r2, #12]
 800fbc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fbc8:	6852      	ldr	r2, [r2, #4]
 800fbca:	b18b      	cbz	r3, 800fbf0 <_sungetc_r+0x44>
 800fbcc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	dd08      	ble.n	800fbe4 <_sungetc_r+0x38>
 800fbd2:	6823      	ldr	r3, [r4, #0]
 800fbd4:	1e5a      	subs	r2, r3, #1
 800fbd6:	6022      	str	r2, [r4, #0]
 800fbd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fbdc:	6863      	ldr	r3, [r4, #4]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	6063      	str	r3, [r4, #4]
 800fbe2:	e7e9      	b.n	800fbb8 <_sungetc_r+0xc>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	f000 fbdc 	bl	80103a2 <__submore>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d0f1      	beq.n	800fbd2 <_sungetc_r+0x26>
 800fbee:	e7e1      	b.n	800fbb4 <_sungetc_r+0x8>
 800fbf0:	6921      	ldr	r1, [r4, #16]
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	b151      	cbz	r1, 800fc0c <_sungetc_r+0x60>
 800fbf6:	4299      	cmp	r1, r3
 800fbf8:	d208      	bcs.n	800fc0c <_sungetc_r+0x60>
 800fbfa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fbfe:	42a9      	cmp	r1, r5
 800fc00:	d104      	bne.n	800fc0c <_sungetc_r+0x60>
 800fc02:	3b01      	subs	r3, #1
 800fc04:	3201      	adds	r2, #1
 800fc06:	6023      	str	r3, [r4, #0]
 800fc08:	6062      	str	r2, [r4, #4]
 800fc0a:	e7d5      	b.n	800fbb8 <_sungetc_r+0xc>
 800fc0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800fc10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc14:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc16:	2303      	movs	r3, #3
 800fc18:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fc1a:	4623      	mov	r3, r4
 800fc1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	2301      	movs	r3, #1
 800fc24:	e7dc      	b.n	800fbe0 <_sungetc_r+0x34>

0800fc26 <__ssrefill_r>:
 800fc26:	b510      	push	{r4, lr}
 800fc28:	460c      	mov	r4, r1
 800fc2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fc2c:	b169      	cbz	r1, 800fc4a <__ssrefill_r+0x24>
 800fc2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc32:	4299      	cmp	r1, r3
 800fc34:	d001      	beq.n	800fc3a <__ssrefill_r+0x14>
 800fc36:	f7fe fa47 	bl	800e0c8 <_free_r>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800fc40:	6063      	str	r3, [r4, #4]
 800fc42:	b113      	cbz	r3, 800fc4a <__ssrefill_r+0x24>
 800fc44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fc46:	6023      	str	r3, [r4, #0]
 800fc48:	bd10      	pop	{r4, pc}
 800fc4a:	6923      	ldr	r3, [r4, #16]
 800fc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	2300      	movs	r3, #0
 800fc54:	6063      	str	r3, [r4, #4]
 800fc56:	89a3      	ldrh	r3, [r4, #12]
 800fc58:	f043 0320 	orr.w	r3, r3, #32
 800fc5c:	81a3      	strh	r3, [r4, #12]
 800fc5e:	e7f3      	b.n	800fc48 <__ssrefill_r+0x22>

0800fc60 <__ssvfiscanf_r>:
 800fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	460c      	mov	r4, r1
 800fc66:	2100      	movs	r1, #0
 800fc68:	4606      	mov	r6, r0
 800fc6a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800fc6e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800fc72:	49ab      	ldr	r1, [pc, #684]	@ (800ff20 <__ssvfiscanf_r+0x2c0>)
 800fc74:	f10d 0804 	add.w	r8, sp, #4
 800fc78:	91a0      	str	r1, [sp, #640]	@ 0x280
 800fc7a:	49aa      	ldr	r1, [pc, #680]	@ (800ff24 <__ssvfiscanf_r+0x2c4>)
 800fc7c:	4faa      	ldr	r7, [pc, #680]	@ (800ff28 <__ssvfiscanf_r+0x2c8>)
 800fc7e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800fc82:	91a1      	str	r1, [sp, #644]	@ 0x284
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	f892 9000 	ldrb.w	r9, [r2]
 800fc8a:	f1b9 0f00 	cmp.w	r9, #0
 800fc8e:	f000 8159 	beq.w	800ff44 <__ssvfiscanf_r+0x2e4>
 800fc92:	f817 3009 	ldrb.w	r3, [r7, r9]
 800fc96:	1c55      	adds	r5, r2, #1
 800fc98:	f013 0308 	ands.w	r3, r3, #8
 800fc9c:	d019      	beq.n	800fcd2 <__ssvfiscanf_r+0x72>
 800fc9e:	6863      	ldr	r3, [r4, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	dd0f      	ble.n	800fcc4 <__ssvfiscanf_r+0x64>
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	781a      	ldrb	r2, [r3, #0]
 800fca8:	5cba      	ldrb	r2, [r7, r2]
 800fcaa:	0712      	lsls	r2, r2, #28
 800fcac:	d401      	bmi.n	800fcb2 <__ssvfiscanf_r+0x52>
 800fcae:	462a      	mov	r2, r5
 800fcb0:	e7e9      	b.n	800fc86 <__ssvfiscanf_r+0x26>
 800fcb2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	3201      	adds	r2, #1
 800fcb8:	9245      	str	r2, [sp, #276]	@ 0x114
 800fcba:	6862      	ldr	r2, [r4, #4]
 800fcbc:	6023      	str	r3, [r4, #0]
 800fcbe:	3a01      	subs	r2, #1
 800fcc0:	6062      	str	r2, [r4, #4]
 800fcc2:	e7ec      	b.n	800fc9e <__ssvfiscanf_r+0x3e>
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fcca:	4798      	blx	r3
 800fccc:	2800      	cmp	r0, #0
 800fcce:	d0e9      	beq.n	800fca4 <__ssvfiscanf_r+0x44>
 800fcd0:	e7ed      	b.n	800fcae <__ssvfiscanf_r+0x4e>
 800fcd2:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800fcd6:	f040 8086 	bne.w	800fde6 <__ssvfiscanf_r+0x186>
 800fcda:	9341      	str	r3, [sp, #260]	@ 0x104
 800fcdc:	9343      	str	r3, [sp, #268]	@ 0x10c
 800fcde:	7853      	ldrb	r3, [r2, #1]
 800fce0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fce2:	bf04      	itt	eq
 800fce4:	2310      	moveq	r3, #16
 800fce6:	1c95      	addeq	r5, r2, #2
 800fce8:	f04f 020a 	mov.w	r2, #10
 800fcec:	bf08      	it	eq
 800fcee:	9341      	streq	r3, [sp, #260]	@ 0x104
 800fcf0:	46aa      	mov	sl, r5
 800fcf2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fcf6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800fcfa:	2b09      	cmp	r3, #9
 800fcfc:	d91e      	bls.n	800fd3c <__ssvfiscanf_r+0xdc>
 800fcfe:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800ff2c <__ssvfiscanf_r+0x2cc>
 800fd02:	2203      	movs	r2, #3
 800fd04:	4658      	mov	r0, fp
 800fd06:	f7fd fb70 	bl	800d3ea <memchr>
 800fd0a:	b138      	cbz	r0, 800fd1c <__ssvfiscanf_r+0xbc>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	4655      	mov	r5, sl
 800fd10:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fd12:	eba0 000b 	sub.w	r0, r0, fp
 800fd16:	4083      	lsls	r3, r0
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	9341      	str	r3, [sp, #260]	@ 0x104
 800fd1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd20:	2b78      	cmp	r3, #120	@ 0x78
 800fd22:	d806      	bhi.n	800fd32 <__ssvfiscanf_r+0xd2>
 800fd24:	2b57      	cmp	r3, #87	@ 0x57
 800fd26:	d810      	bhi.n	800fd4a <__ssvfiscanf_r+0xea>
 800fd28:	2b25      	cmp	r3, #37	@ 0x25
 800fd2a:	d05c      	beq.n	800fde6 <__ssvfiscanf_r+0x186>
 800fd2c:	d856      	bhi.n	800fddc <__ssvfiscanf_r+0x17c>
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d074      	beq.n	800fe1c <__ssvfiscanf_r+0x1bc>
 800fd32:	2303      	movs	r3, #3
 800fd34:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fd36:	230a      	movs	r3, #10
 800fd38:	9342      	str	r3, [sp, #264]	@ 0x108
 800fd3a:	e087      	b.n	800fe4c <__ssvfiscanf_r+0x1ec>
 800fd3c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800fd3e:	4655      	mov	r5, sl
 800fd40:	fb02 1103 	mla	r1, r2, r3, r1
 800fd44:	3930      	subs	r1, #48	@ 0x30
 800fd46:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fd48:	e7d2      	b.n	800fcf0 <__ssvfiscanf_r+0x90>
 800fd4a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800fd4e:	2a20      	cmp	r2, #32
 800fd50:	d8ef      	bhi.n	800fd32 <__ssvfiscanf_r+0xd2>
 800fd52:	a101      	add	r1, pc, #4	@ (adr r1, 800fd58 <__ssvfiscanf_r+0xf8>)
 800fd54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fd58:	0800fe2b 	.word	0x0800fe2b
 800fd5c:	0800fd33 	.word	0x0800fd33
 800fd60:	0800fd33 	.word	0x0800fd33
 800fd64:	0800fe85 	.word	0x0800fe85
 800fd68:	0800fd33 	.word	0x0800fd33
 800fd6c:	0800fd33 	.word	0x0800fd33
 800fd70:	0800fd33 	.word	0x0800fd33
 800fd74:	0800fd33 	.word	0x0800fd33
 800fd78:	0800fd33 	.word	0x0800fd33
 800fd7c:	0800fd33 	.word	0x0800fd33
 800fd80:	0800fd33 	.word	0x0800fd33
 800fd84:	0800fe9b 	.word	0x0800fe9b
 800fd88:	0800fe81 	.word	0x0800fe81
 800fd8c:	0800fde3 	.word	0x0800fde3
 800fd90:	0800fde3 	.word	0x0800fde3
 800fd94:	0800fde3 	.word	0x0800fde3
 800fd98:	0800fd33 	.word	0x0800fd33
 800fd9c:	0800fe3d 	.word	0x0800fe3d
 800fda0:	0800fd33 	.word	0x0800fd33
 800fda4:	0800fd33 	.word	0x0800fd33
 800fda8:	0800fd33 	.word	0x0800fd33
 800fdac:	0800fd33 	.word	0x0800fd33
 800fdb0:	0800feab 	.word	0x0800feab
 800fdb4:	0800fe45 	.word	0x0800fe45
 800fdb8:	0800fe23 	.word	0x0800fe23
 800fdbc:	0800fd33 	.word	0x0800fd33
 800fdc0:	0800fd33 	.word	0x0800fd33
 800fdc4:	0800fea7 	.word	0x0800fea7
 800fdc8:	0800fd33 	.word	0x0800fd33
 800fdcc:	0800fe81 	.word	0x0800fe81
 800fdd0:	0800fd33 	.word	0x0800fd33
 800fdd4:	0800fd33 	.word	0x0800fd33
 800fdd8:	0800fe2b 	.word	0x0800fe2b
 800fddc:	3b45      	subs	r3, #69	@ 0x45
 800fdde:	2b02      	cmp	r3, #2
 800fde0:	d8a7      	bhi.n	800fd32 <__ssvfiscanf_r+0xd2>
 800fde2:	2305      	movs	r3, #5
 800fde4:	e031      	b.n	800fe4a <__ssvfiscanf_r+0x1ea>
 800fde6:	6863      	ldr	r3, [r4, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	dd0d      	ble.n	800fe08 <__ssvfiscanf_r+0x1a8>
 800fdec:	6823      	ldr	r3, [r4, #0]
 800fdee:	781a      	ldrb	r2, [r3, #0]
 800fdf0:	454a      	cmp	r2, r9
 800fdf2:	f040 80a7 	bne.w	800ff44 <__ssvfiscanf_r+0x2e4>
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	6862      	ldr	r2, [r4, #4]
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800fdfe:	3a01      	subs	r2, #1
 800fe00:	3301      	adds	r3, #1
 800fe02:	6062      	str	r2, [r4, #4]
 800fe04:	9345      	str	r3, [sp, #276]	@ 0x114
 800fe06:	e752      	b.n	800fcae <__ssvfiscanf_r+0x4e>
 800fe08:	4621      	mov	r1, r4
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fe0e:	4798      	blx	r3
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d0eb      	beq.n	800fdec <__ssvfiscanf_r+0x18c>
 800fe14:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f040 808c 	bne.w	800ff34 <__ssvfiscanf_r+0x2d4>
 800fe1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe20:	e08c      	b.n	800ff3c <__ssvfiscanf_r+0x2dc>
 800fe22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fe24:	f042 0220 	orr.w	r2, r2, #32
 800fe28:	9241      	str	r2, [sp, #260]	@ 0x104
 800fe2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fe2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fe30:	9241      	str	r2, [sp, #260]	@ 0x104
 800fe32:	2210      	movs	r2, #16
 800fe34:	2b6e      	cmp	r3, #110	@ 0x6e
 800fe36:	9242      	str	r2, [sp, #264]	@ 0x108
 800fe38:	d902      	bls.n	800fe40 <__ssvfiscanf_r+0x1e0>
 800fe3a:	e005      	b.n	800fe48 <__ssvfiscanf_r+0x1e8>
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800fe40:	2303      	movs	r3, #3
 800fe42:	e002      	b.n	800fe4a <__ssvfiscanf_r+0x1ea>
 800fe44:	2308      	movs	r3, #8
 800fe46:	9342      	str	r3, [sp, #264]	@ 0x108
 800fe48:	2304      	movs	r3, #4
 800fe4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fe4c:	6863      	ldr	r3, [r4, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	dd39      	ble.n	800fec6 <__ssvfiscanf_r+0x266>
 800fe52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fe54:	0659      	lsls	r1, r3, #25
 800fe56:	d404      	bmi.n	800fe62 <__ssvfiscanf_r+0x202>
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	781a      	ldrb	r2, [r3, #0]
 800fe5c:	5cba      	ldrb	r2, [r7, r2]
 800fe5e:	0712      	lsls	r2, r2, #28
 800fe60:	d438      	bmi.n	800fed4 <__ssvfiscanf_r+0x274>
 800fe62:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800fe64:	2b02      	cmp	r3, #2
 800fe66:	dc47      	bgt.n	800fef8 <__ssvfiscanf_r+0x298>
 800fe68:	466b      	mov	r3, sp
 800fe6a:	4622      	mov	r2, r4
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	a941      	add	r1, sp, #260	@ 0x104
 800fe70:	f000 f86a 	bl	800ff48 <_scanf_chars>
 800fe74:	2801      	cmp	r0, #1
 800fe76:	d065      	beq.n	800ff44 <__ssvfiscanf_r+0x2e4>
 800fe78:	2802      	cmp	r0, #2
 800fe7a:	f47f af18 	bne.w	800fcae <__ssvfiscanf_r+0x4e>
 800fe7e:	e7c9      	b.n	800fe14 <__ssvfiscanf_r+0x1b4>
 800fe80:	220a      	movs	r2, #10
 800fe82:	e7d7      	b.n	800fe34 <__ssvfiscanf_r+0x1d4>
 800fe84:	4629      	mov	r1, r5
 800fe86:	4640      	mov	r0, r8
 800fe88:	f000 fa52 	bl	8010330 <__sccl>
 800fe8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fe8e:	4605      	mov	r5, r0
 800fe90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe94:	9341      	str	r3, [sp, #260]	@ 0x104
 800fe96:	2301      	movs	r3, #1
 800fe98:	e7d7      	b.n	800fe4a <__ssvfiscanf_r+0x1ea>
 800fe9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fe9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fea0:	9341      	str	r3, [sp, #260]	@ 0x104
 800fea2:	2300      	movs	r3, #0
 800fea4:	e7d1      	b.n	800fe4a <__ssvfiscanf_r+0x1ea>
 800fea6:	2302      	movs	r3, #2
 800fea8:	e7cf      	b.n	800fe4a <__ssvfiscanf_r+0x1ea>
 800feaa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800feac:	06c3      	lsls	r3, r0, #27
 800feae:	f53f aefe 	bmi.w	800fcae <__ssvfiscanf_r+0x4e>
 800feb2:	9b00      	ldr	r3, [sp, #0]
 800feb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800feb6:	1d19      	adds	r1, r3, #4
 800feb8:	9100      	str	r1, [sp, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	07c0      	lsls	r0, r0, #31
 800febe:	bf4c      	ite	mi
 800fec0:	801a      	strhmi	r2, [r3, #0]
 800fec2:	601a      	strpl	r2, [r3, #0]
 800fec4:	e6f3      	b.n	800fcae <__ssvfiscanf_r+0x4e>
 800fec6:	4621      	mov	r1, r4
 800fec8:	4630      	mov	r0, r6
 800feca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fecc:	4798      	blx	r3
 800fece:	2800      	cmp	r0, #0
 800fed0:	d0bf      	beq.n	800fe52 <__ssvfiscanf_r+0x1f2>
 800fed2:	e79f      	b.n	800fe14 <__ssvfiscanf_r+0x1b4>
 800fed4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fed6:	3201      	adds	r2, #1
 800fed8:	9245      	str	r2, [sp, #276]	@ 0x114
 800feda:	6862      	ldr	r2, [r4, #4]
 800fedc:	3a01      	subs	r2, #1
 800fede:	2a00      	cmp	r2, #0
 800fee0:	6062      	str	r2, [r4, #4]
 800fee2:	dd02      	ble.n	800feea <__ssvfiscanf_r+0x28a>
 800fee4:	3301      	adds	r3, #1
 800fee6:	6023      	str	r3, [r4, #0]
 800fee8:	e7b6      	b.n	800fe58 <__ssvfiscanf_r+0x1f8>
 800feea:	4621      	mov	r1, r4
 800feec:	4630      	mov	r0, r6
 800feee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fef0:	4798      	blx	r3
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d0b0      	beq.n	800fe58 <__ssvfiscanf_r+0x1f8>
 800fef6:	e78d      	b.n	800fe14 <__ssvfiscanf_r+0x1b4>
 800fef8:	2b04      	cmp	r3, #4
 800fefa:	dc06      	bgt.n	800ff0a <__ssvfiscanf_r+0x2aa>
 800fefc:	466b      	mov	r3, sp
 800fefe:	4622      	mov	r2, r4
 800ff00:	4630      	mov	r0, r6
 800ff02:	a941      	add	r1, sp, #260	@ 0x104
 800ff04:	f000 f87a 	bl	800fffc <_scanf_i>
 800ff08:	e7b4      	b.n	800fe74 <__ssvfiscanf_r+0x214>
 800ff0a:	4b09      	ldr	r3, [pc, #36]	@ (800ff30 <__ssvfiscanf_r+0x2d0>)
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f43f aece 	beq.w	800fcae <__ssvfiscanf_r+0x4e>
 800ff12:	466b      	mov	r3, sp
 800ff14:	4622      	mov	r2, r4
 800ff16:	4630      	mov	r0, r6
 800ff18:	a941      	add	r1, sp, #260	@ 0x104
 800ff1a:	f7fc fe39 	bl	800cb90 <_scanf_float>
 800ff1e:	e7a9      	b.n	800fe74 <__ssvfiscanf_r+0x214>
 800ff20:	0800fbad 	.word	0x0800fbad
 800ff24:	0800fc27 	.word	0x0800fc27
 800ff28:	08011c19 	.word	0x08011c19
 800ff2c:	080119ff 	.word	0x080119ff
 800ff30:	0800cb91 	.word	0x0800cb91
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	065b      	lsls	r3, r3, #25
 800ff38:	f53f af70 	bmi.w	800fe1c <__ssvfiscanf_r+0x1bc>
 800ff3c:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ff40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff44:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ff46:	e7f9      	b.n	800ff3c <__ssvfiscanf_r+0x2dc>

0800ff48 <_scanf_chars>:
 800ff48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff4c:	4615      	mov	r5, r2
 800ff4e:	688a      	ldr	r2, [r1, #8]
 800ff50:	4680      	mov	r8, r0
 800ff52:	460c      	mov	r4, r1
 800ff54:	b932      	cbnz	r2, 800ff64 <_scanf_chars+0x1c>
 800ff56:	698a      	ldr	r2, [r1, #24]
 800ff58:	2a00      	cmp	r2, #0
 800ff5a:	bf14      	ite	ne
 800ff5c:	f04f 32ff 	movne.w	r2, #4294967295
 800ff60:	2201      	moveq	r2, #1
 800ff62:	608a      	str	r2, [r1, #8]
 800ff64:	2700      	movs	r7, #0
 800ff66:	6822      	ldr	r2, [r4, #0]
 800ff68:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800fff8 <_scanf_chars+0xb0>
 800ff6c:	06d1      	lsls	r1, r2, #27
 800ff6e:	bf5f      	itttt	pl
 800ff70:	681a      	ldrpl	r2, [r3, #0]
 800ff72:	1d11      	addpl	r1, r2, #4
 800ff74:	6019      	strpl	r1, [r3, #0]
 800ff76:	6816      	ldrpl	r6, [r2, #0]
 800ff78:	69a0      	ldr	r0, [r4, #24]
 800ff7a:	b188      	cbz	r0, 800ffa0 <_scanf_chars+0x58>
 800ff7c:	2801      	cmp	r0, #1
 800ff7e:	d107      	bne.n	800ff90 <_scanf_chars+0x48>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	781a      	ldrb	r2, [r3, #0]
 800ff84:	6963      	ldr	r3, [r4, #20]
 800ff86:	5c9b      	ldrb	r3, [r3, r2]
 800ff88:	b953      	cbnz	r3, 800ffa0 <_scanf_chars+0x58>
 800ff8a:	2f00      	cmp	r7, #0
 800ff8c:	d031      	beq.n	800fff2 <_scanf_chars+0xaa>
 800ff8e:	e022      	b.n	800ffd6 <_scanf_chars+0x8e>
 800ff90:	2802      	cmp	r0, #2
 800ff92:	d120      	bne.n	800ffd6 <_scanf_chars+0x8e>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ff9c:	071b      	lsls	r3, r3, #28
 800ff9e:	d41a      	bmi.n	800ffd6 <_scanf_chars+0x8e>
 800ffa0:	6823      	ldr	r3, [r4, #0]
 800ffa2:	3701      	adds	r7, #1
 800ffa4:	06da      	lsls	r2, r3, #27
 800ffa6:	bf5e      	ittt	pl
 800ffa8:	682b      	ldrpl	r3, [r5, #0]
 800ffaa:	781b      	ldrbpl	r3, [r3, #0]
 800ffac:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ffb0:	682a      	ldr	r2, [r5, #0]
 800ffb2:	686b      	ldr	r3, [r5, #4]
 800ffb4:	3201      	adds	r2, #1
 800ffb6:	602a      	str	r2, [r5, #0]
 800ffb8:	68a2      	ldr	r2, [r4, #8]
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	3a01      	subs	r2, #1
 800ffbe:	606b      	str	r3, [r5, #4]
 800ffc0:	60a2      	str	r2, [r4, #8]
 800ffc2:	b142      	cbz	r2, 800ffd6 <_scanf_chars+0x8e>
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	dcd7      	bgt.n	800ff78 <_scanf_chars+0x30>
 800ffc8:	4629      	mov	r1, r5
 800ffca:	4640      	mov	r0, r8
 800ffcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ffd0:	4798      	blx	r3
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d0d0      	beq.n	800ff78 <_scanf_chars+0x30>
 800ffd6:	6823      	ldr	r3, [r4, #0]
 800ffd8:	f013 0310 	ands.w	r3, r3, #16
 800ffdc:	d105      	bne.n	800ffea <_scanf_chars+0xa2>
 800ffde:	68e2      	ldr	r2, [r4, #12]
 800ffe0:	3201      	adds	r2, #1
 800ffe2:	60e2      	str	r2, [r4, #12]
 800ffe4:	69a2      	ldr	r2, [r4, #24]
 800ffe6:	b102      	cbz	r2, 800ffea <_scanf_chars+0xa2>
 800ffe8:	7033      	strb	r3, [r6, #0]
 800ffea:	2000      	movs	r0, #0
 800ffec:	6923      	ldr	r3, [r4, #16]
 800ffee:	443b      	add	r3, r7
 800fff0:	6123      	str	r3, [r4, #16]
 800fff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff6:	bf00      	nop
 800fff8:	08011c19 	.word	0x08011c19

0800fffc <_scanf_i>:
 800fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	4698      	mov	r8, r3
 8010004:	4b72      	ldr	r3, [pc, #456]	@ (80101d0 <_scanf_i+0x1d4>)
 8010006:	b087      	sub	sp, #28
 8010008:	4682      	mov	sl, r0
 801000a:	4616      	mov	r6, r2
 801000c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010010:	ab03      	add	r3, sp, #12
 8010012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010016:	4b6f      	ldr	r3, [pc, #444]	@ (80101d4 <_scanf_i+0x1d8>)
 8010018:	69a1      	ldr	r1, [r4, #24]
 801001a:	4a6f      	ldr	r2, [pc, #444]	@ (80101d8 <_scanf_i+0x1dc>)
 801001c:	4627      	mov	r7, r4
 801001e:	2903      	cmp	r1, #3
 8010020:	bf08      	it	eq
 8010022:	461a      	moveq	r2, r3
 8010024:	68a3      	ldr	r3, [r4, #8]
 8010026:	9201      	str	r2, [sp, #4]
 8010028:	1e5a      	subs	r2, r3, #1
 801002a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801002e:	bf81      	itttt	hi
 8010030:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010034:	eb03 0905 	addhi.w	r9, r3, r5
 8010038:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801003c:	60a3      	strhi	r3, [r4, #8]
 801003e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010042:	bf98      	it	ls
 8010044:	f04f 0900 	movls.w	r9, #0
 8010048:	463d      	mov	r5, r7
 801004a:	f04f 0b00 	mov.w	fp, #0
 801004e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010052:	6023      	str	r3, [r4, #0]
 8010054:	6831      	ldr	r1, [r6, #0]
 8010056:	ab03      	add	r3, sp, #12
 8010058:	2202      	movs	r2, #2
 801005a:	7809      	ldrb	r1, [r1, #0]
 801005c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010060:	f7fd f9c3 	bl	800d3ea <memchr>
 8010064:	b328      	cbz	r0, 80100b2 <_scanf_i+0xb6>
 8010066:	f1bb 0f01 	cmp.w	fp, #1
 801006a:	d159      	bne.n	8010120 <_scanf_i+0x124>
 801006c:	6862      	ldr	r2, [r4, #4]
 801006e:	b92a      	cbnz	r2, 801007c <_scanf_i+0x80>
 8010070:	2108      	movs	r1, #8
 8010072:	6822      	ldr	r2, [r4, #0]
 8010074:	6061      	str	r1, [r4, #4]
 8010076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801007a:	6022      	str	r2, [r4, #0]
 801007c:	6822      	ldr	r2, [r4, #0]
 801007e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010082:	6022      	str	r2, [r4, #0]
 8010084:	68a2      	ldr	r2, [r4, #8]
 8010086:	1e51      	subs	r1, r2, #1
 8010088:	60a1      	str	r1, [r4, #8]
 801008a:	b192      	cbz	r2, 80100b2 <_scanf_i+0xb6>
 801008c:	6832      	ldr	r2, [r6, #0]
 801008e:	1c51      	adds	r1, r2, #1
 8010090:	6031      	str	r1, [r6, #0]
 8010092:	7812      	ldrb	r2, [r2, #0]
 8010094:	f805 2b01 	strb.w	r2, [r5], #1
 8010098:	6872      	ldr	r2, [r6, #4]
 801009a:	3a01      	subs	r2, #1
 801009c:	2a00      	cmp	r2, #0
 801009e:	6072      	str	r2, [r6, #4]
 80100a0:	dc07      	bgt.n	80100b2 <_scanf_i+0xb6>
 80100a2:	4631      	mov	r1, r6
 80100a4:	4650      	mov	r0, sl
 80100a6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80100aa:	4790      	blx	r2
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f040 8085 	bne.w	80101bc <_scanf_i+0x1c0>
 80100b2:	f10b 0b01 	add.w	fp, fp, #1
 80100b6:	f1bb 0f03 	cmp.w	fp, #3
 80100ba:	d1cb      	bne.n	8010054 <_scanf_i+0x58>
 80100bc:	6863      	ldr	r3, [r4, #4]
 80100be:	b90b      	cbnz	r3, 80100c4 <_scanf_i+0xc8>
 80100c0:	230a      	movs	r3, #10
 80100c2:	6063      	str	r3, [r4, #4]
 80100c4:	6863      	ldr	r3, [r4, #4]
 80100c6:	4945      	ldr	r1, [pc, #276]	@ (80101dc <_scanf_i+0x1e0>)
 80100c8:	6960      	ldr	r0, [r4, #20]
 80100ca:	1ac9      	subs	r1, r1, r3
 80100cc:	f000 f930 	bl	8010330 <__sccl>
 80100d0:	f04f 0b00 	mov.w	fp, #0
 80100d4:	68a3      	ldr	r3, [r4, #8]
 80100d6:	6822      	ldr	r2, [r4, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d03d      	beq.n	8010158 <_scanf_i+0x15c>
 80100dc:	6831      	ldr	r1, [r6, #0]
 80100de:	6960      	ldr	r0, [r4, #20]
 80100e0:	f891 c000 	ldrb.w	ip, [r1]
 80100e4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80100e8:	2800      	cmp	r0, #0
 80100ea:	d035      	beq.n	8010158 <_scanf_i+0x15c>
 80100ec:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80100f0:	d124      	bne.n	801013c <_scanf_i+0x140>
 80100f2:	0510      	lsls	r0, r2, #20
 80100f4:	d522      	bpl.n	801013c <_scanf_i+0x140>
 80100f6:	f10b 0b01 	add.w	fp, fp, #1
 80100fa:	f1b9 0f00 	cmp.w	r9, #0
 80100fe:	d003      	beq.n	8010108 <_scanf_i+0x10c>
 8010100:	3301      	adds	r3, #1
 8010102:	f109 39ff 	add.w	r9, r9, #4294967295
 8010106:	60a3      	str	r3, [r4, #8]
 8010108:	6873      	ldr	r3, [r6, #4]
 801010a:	3b01      	subs	r3, #1
 801010c:	2b00      	cmp	r3, #0
 801010e:	6073      	str	r3, [r6, #4]
 8010110:	dd1b      	ble.n	801014a <_scanf_i+0x14e>
 8010112:	6833      	ldr	r3, [r6, #0]
 8010114:	3301      	adds	r3, #1
 8010116:	6033      	str	r3, [r6, #0]
 8010118:	68a3      	ldr	r3, [r4, #8]
 801011a:	3b01      	subs	r3, #1
 801011c:	60a3      	str	r3, [r4, #8]
 801011e:	e7d9      	b.n	80100d4 <_scanf_i+0xd8>
 8010120:	f1bb 0f02 	cmp.w	fp, #2
 8010124:	d1ae      	bne.n	8010084 <_scanf_i+0x88>
 8010126:	6822      	ldr	r2, [r4, #0]
 8010128:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801012c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010130:	d1c4      	bne.n	80100bc <_scanf_i+0xc0>
 8010132:	2110      	movs	r1, #16
 8010134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010138:	6061      	str	r1, [r4, #4]
 801013a:	e7a2      	b.n	8010082 <_scanf_i+0x86>
 801013c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010140:	6022      	str	r2, [r4, #0]
 8010142:	780b      	ldrb	r3, [r1, #0]
 8010144:	f805 3b01 	strb.w	r3, [r5], #1
 8010148:	e7de      	b.n	8010108 <_scanf_i+0x10c>
 801014a:	4631      	mov	r1, r6
 801014c:	4650      	mov	r0, sl
 801014e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010152:	4798      	blx	r3
 8010154:	2800      	cmp	r0, #0
 8010156:	d0df      	beq.n	8010118 <_scanf_i+0x11c>
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	05d9      	lsls	r1, r3, #23
 801015c:	d50d      	bpl.n	801017a <_scanf_i+0x17e>
 801015e:	42bd      	cmp	r5, r7
 8010160:	d909      	bls.n	8010176 <_scanf_i+0x17a>
 8010162:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010166:	4632      	mov	r2, r6
 8010168:	4650      	mov	r0, sl
 801016a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801016e:	f105 39ff 	add.w	r9, r5, #4294967295
 8010172:	4798      	blx	r3
 8010174:	464d      	mov	r5, r9
 8010176:	42bd      	cmp	r5, r7
 8010178:	d028      	beq.n	80101cc <_scanf_i+0x1d0>
 801017a:	6822      	ldr	r2, [r4, #0]
 801017c:	f012 0210 	ands.w	r2, r2, #16
 8010180:	d113      	bne.n	80101aa <_scanf_i+0x1ae>
 8010182:	702a      	strb	r2, [r5, #0]
 8010184:	4639      	mov	r1, r7
 8010186:	6863      	ldr	r3, [r4, #4]
 8010188:	4650      	mov	r0, sl
 801018a:	9e01      	ldr	r6, [sp, #4]
 801018c:	47b0      	blx	r6
 801018e:	f8d8 3000 	ldr.w	r3, [r8]
 8010192:	6821      	ldr	r1, [r4, #0]
 8010194:	1d1a      	adds	r2, r3, #4
 8010196:	f8c8 2000 	str.w	r2, [r8]
 801019a:	f011 0f20 	tst.w	r1, #32
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	d00f      	beq.n	80101c2 <_scanf_i+0x1c6>
 80101a2:	6018      	str	r0, [r3, #0]
 80101a4:	68e3      	ldr	r3, [r4, #12]
 80101a6:	3301      	adds	r3, #1
 80101a8:	60e3      	str	r3, [r4, #12]
 80101aa:	2000      	movs	r0, #0
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	1bed      	subs	r5, r5, r7
 80101b0:	445d      	add	r5, fp
 80101b2:	442b      	add	r3, r5
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	b007      	add	sp, #28
 80101b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101bc:	f04f 0b00 	mov.w	fp, #0
 80101c0:	e7ca      	b.n	8010158 <_scanf_i+0x15c>
 80101c2:	07ca      	lsls	r2, r1, #31
 80101c4:	bf4c      	ite	mi
 80101c6:	8018      	strhmi	r0, [r3, #0]
 80101c8:	6018      	strpl	r0, [r3, #0]
 80101ca:	e7eb      	b.n	80101a4 <_scanf_i+0x1a8>
 80101cc:	2001      	movs	r0, #1
 80101ce:	e7f2      	b.n	80101b6 <_scanf_i+0x1ba>
 80101d0:	08011890 	.word	0x08011890
 80101d4:	0800f8f9 	.word	0x0800f8f9
 80101d8:	08010cc5 	.word	0x08010cc5
 80101dc:	08011a1a 	.word	0x08011a1a

080101e0 <__sflush_r>:
 80101e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e6:	0716      	lsls	r6, r2, #28
 80101e8:	4605      	mov	r5, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	d454      	bmi.n	8010298 <__sflush_r+0xb8>
 80101ee:	684b      	ldr	r3, [r1, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	dc02      	bgt.n	80101fa <__sflush_r+0x1a>
 80101f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	dd48      	ble.n	801028c <__sflush_r+0xac>
 80101fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101fc:	2e00      	cmp	r6, #0
 80101fe:	d045      	beq.n	801028c <__sflush_r+0xac>
 8010200:	2300      	movs	r3, #0
 8010202:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010206:	682f      	ldr	r7, [r5, #0]
 8010208:	6a21      	ldr	r1, [r4, #32]
 801020a:	602b      	str	r3, [r5, #0]
 801020c:	d030      	beq.n	8010270 <__sflush_r+0x90>
 801020e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	0759      	lsls	r1, r3, #29
 8010214:	d505      	bpl.n	8010222 <__sflush_r+0x42>
 8010216:	6863      	ldr	r3, [r4, #4]
 8010218:	1ad2      	subs	r2, r2, r3
 801021a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801021c:	b10b      	cbz	r3, 8010222 <__sflush_r+0x42>
 801021e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010220:	1ad2      	subs	r2, r2, r3
 8010222:	2300      	movs	r3, #0
 8010224:	4628      	mov	r0, r5
 8010226:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010228:	6a21      	ldr	r1, [r4, #32]
 801022a:	47b0      	blx	r6
 801022c:	1c43      	adds	r3, r0, #1
 801022e:	89a3      	ldrh	r3, [r4, #12]
 8010230:	d106      	bne.n	8010240 <__sflush_r+0x60>
 8010232:	6829      	ldr	r1, [r5, #0]
 8010234:	291d      	cmp	r1, #29
 8010236:	d82b      	bhi.n	8010290 <__sflush_r+0xb0>
 8010238:	4a28      	ldr	r2, [pc, #160]	@ (80102dc <__sflush_r+0xfc>)
 801023a:	40ca      	lsrs	r2, r1
 801023c:	07d6      	lsls	r6, r2, #31
 801023e:	d527      	bpl.n	8010290 <__sflush_r+0xb0>
 8010240:	2200      	movs	r2, #0
 8010242:	6062      	str	r2, [r4, #4]
 8010244:	6922      	ldr	r2, [r4, #16]
 8010246:	04d9      	lsls	r1, r3, #19
 8010248:	6022      	str	r2, [r4, #0]
 801024a:	d504      	bpl.n	8010256 <__sflush_r+0x76>
 801024c:	1c42      	adds	r2, r0, #1
 801024e:	d101      	bne.n	8010254 <__sflush_r+0x74>
 8010250:	682b      	ldr	r3, [r5, #0]
 8010252:	b903      	cbnz	r3, 8010256 <__sflush_r+0x76>
 8010254:	6560      	str	r0, [r4, #84]	@ 0x54
 8010256:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010258:	602f      	str	r7, [r5, #0]
 801025a:	b1b9      	cbz	r1, 801028c <__sflush_r+0xac>
 801025c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010260:	4299      	cmp	r1, r3
 8010262:	d002      	beq.n	801026a <__sflush_r+0x8a>
 8010264:	4628      	mov	r0, r5
 8010266:	f7fd ff2f 	bl	800e0c8 <_free_r>
 801026a:	2300      	movs	r3, #0
 801026c:	6363      	str	r3, [r4, #52]	@ 0x34
 801026e:	e00d      	b.n	801028c <__sflush_r+0xac>
 8010270:	2301      	movs	r3, #1
 8010272:	4628      	mov	r0, r5
 8010274:	47b0      	blx	r6
 8010276:	4602      	mov	r2, r0
 8010278:	1c50      	adds	r0, r2, #1
 801027a:	d1c9      	bne.n	8010210 <__sflush_r+0x30>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d0c6      	beq.n	8010210 <__sflush_r+0x30>
 8010282:	2b1d      	cmp	r3, #29
 8010284:	d001      	beq.n	801028a <__sflush_r+0xaa>
 8010286:	2b16      	cmp	r3, #22
 8010288:	d11d      	bne.n	80102c6 <__sflush_r+0xe6>
 801028a:	602f      	str	r7, [r5, #0]
 801028c:	2000      	movs	r0, #0
 801028e:	e021      	b.n	80102d4 <__sflush_r+0xf4>
 8010290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010294:	b21b      	sxth	r3, r3
 8010296:	e01a      	b.n	80102ce <__sflush_r+0xee>
 8010298:	690f      	ldr	r7, [r1, #16]
 801029a:	2f00      	cmp	r7, #0
 801029c:	d0f6      	beq.n	801028c <__sflush_r+0xac>
 801029e:	0793      	lsls	r3, r2, #30
 80102a0:	bf18      	it	ne
 80102a2:	2300      	movne	r3, #0
 80102a4:	680e      	ldr	r6, [r1, #0]
 80102a6:	bf08      	it	eq
 80102a8:	694b      	ldreq	r3, [r1, #20]
 80102aa:	1bf6      	subs	r6, r6, r7
 80102ac:	600f      	str	r7, [r1, #0]
 80102ae:	608b      	str	r3, [r1, #8]
 80102b0:	2e00      	cmp	r6, #0
 80102b2:	ddeb      	ble.n	801028c <__sflush_r+0xac>
 80102b4:	4633      	mov	r3, r6
 80102b6:	463a      	mov	r2, r7
 80102b8:	4628      	mov	r0, r5
 80102ba:	6a21      	ldr	r1, [r4, #32]
 80102bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80102c0:	47e0      	blx	ip
 80102c2:	2800      	cmp	r0, #0
 80102c4:	dc07      	bgt.n	80102d6 <__sflush_r+0xf6>
 80102c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102ce:	f04f 30ff 	mov.w	r0, #4294967295
 80102d2:	81a3      	strh	r3, [r4, #12]
 80102d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102d6:	4407      	add	r7, r0
 80102d8:	1a36      	subs	r6, r6, r0
 80102da:	e7e9      	b.n	80102b0 <__sflush_r+0xd0>
 80102dc:	20400001 	.word	0x20400001

080102e0 <_fflush_r>:
 80102e0:	b538      	push	{r3, r4, r5, lr}
 80102e2:	690b      	ldr	r3, [r1, #16]
 80102e4:	4605      	mov	r5, r0
 80102e6:	460c      	mov	r4, r1
 80102e8:	b913      	cbnz	r3, 80102f0 <_fflush_r+0x10>
 80102ea:	2500      	movs	r5, #0
 80102ec:	4628      	mov	r0, r5
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	b118      	cbz	r0, 80102fa <_fflush_r+0x1a>
 80102f2:	6a03      	ldr	r3, [r0, #32]
 80102f4:	b90b      	cbnz	r3, 80102fa <_fflush_r+0x1a>
 80102f6:	f7fc fee1 	bl	800d0bc <__sinit>
 80102fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d0f3      	beq.n	80102ea <_fflush_r+0xa>
 8010302:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010304:	07d0      	lsls	r0, r2, #31
 8010306:	d404      	bmi.n	8010312 <_fflush_r+0x32>
 8010308:	0599      	lsls	r1, r3, #22
 801030a:	d402      	bmi.n	8010312 <_fflush_r+0x32>
 801030c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801030e:	f7fd f86a 	bl	800d3e6 <__retarget_lock_acquire_recursive>
 8010312:	4628      	mov	r0, r5
 8010314:	4621      	mov	r1, r4
 8010316:	f7ff ff63 	bl	80101e0 <__sflush_r>
 801031a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801031c:	4605      	mov	r5, r0
 801031e:	07da      	lsls	r2, r3, #31
 8010320:	d4e4      	bmi.n	80102ec <_fflush_r+0xc>
 8010322:	89a3      	ldrh	r3, [r4, #12]
 8010324:	059b      	lsls	r3, r3, #22
 8010326:	d4e1      	bmi.n	80102ec <_fflush_r+0xc>
 8010328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801032a:	f7fd f85d 	bl	800d3e8 <__retarget_lock_release_recursive>
 801032e:	e7dd      	b.n	80102ec <_fflush_r+0xc>

08010330 <__sccl>:
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	780b      	ldrb	r3, [r1, #0]
 8010334:	4604      	mov	r4, r0
 8010336:	2b5e      	cmp	r3, #94	@ 0x5e
 8010338:	bf0b      	itete	eq
 801033a:	784b      	ldrbeq	r3, [r1, #1]
 801033c:	1c4a      	addne	r2, r1, #1
 801033e:	1c8a      	addeq	r2, r1, #2
 8010340:	2100      	movne	r1, #0
 8010342:	bf08      	it	eq
 8010344:	2101      	moveq	r1, #1
 8010346:	3801      	subs	r0, #1
 8010348:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801034c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010350:	42a8      	cmp	r0, r5
 8010352:	d1fb      	bne.n	801034c <__sccl+0x1c>
 8010354:	b90b      	cbnz	r3, 801035a <__sccl+0x2a>
 8010356:	1e50      	subs	r0, r2, #1
 8010358:	bd70      	pop	{r4, r5, r6, pc}
 801035a:	f081 0101 	eor.w	r1, r1, #1
 801035e:	4610      	mov	r0, r2
 8010360:	54e1      	strb	r1, [r4, r3]
 8010362:	4602      	mov	r2, r0
 8010364:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010368:	2d2d      	cmp	r5, #45	@ 0x2d
 801036a:	d005      	beq.n	8010378 <__sccl+0x48>
 801036c:	2d5d      	cmp	r5, #93	@ 0x5d
 801036e:	d016      	beq.n	801039e <__sccl+0x6e>
 8010370:	2d00      	cmp	r5, #0
 8010372:	d0f1      	beq.n	8010358 <__sccl+0x28>
 8010374:	462b      	mov	r3, r5
 8010376:	e7f2      	b.n	801035e <__sccl+0x2e>
 8010378:	7846      	ldrb	r6, [r0, #1]
 801037a:	2e5d      	cmp	r6, #93	@ 0x5d
 801037c:	d0fa      	beq.n	8010374 <__sccl+0x44>
 801037e:	42b3      	cmp	r3, r6
 8010380:	dcf8      	bgt.n	8010374 <__sccl+0x44>
 8010382:	461a      	mov	r2, r3
 8010384:	3002      	adds	r0, #2
 8010386:	3201      	adds	r2, #1
 8010388:	4296      	cmp	r6, r2
 801038a:	54a1      	strb	r1, [r4, r2]
 801038c:	dcfb      	bgt.n	8010386 <__sccl+0x56>
 801038e:	1af2      	subs	r2, r6, r3
 8010390:	3a01      	subs	r2, #1
 8010392:	42b3      	cmp	r3, r6
 8010394:	bfa8      	it	ge
 8010396:	2200      	movge	r2, #0
 8010398:	1c5d      	adds	r5, r3, #1
 801039a:	18ab      	adds	r3, r5, r2
 801039c:	e7e1      	b.n	8010362 <__sccl+0x32>
 801039e:	4610      	mov	r0, r2
 80103a0:	e7da      	b.n	8010358 <__sccl+0x28>

080103a2 <__submore>:
 80103a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a6:	460c      	mov	r4, r1
 80103a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80103aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80103ae:	4299      	cmp	r1, r3
 80103b0:	d11b      	bne.n	80103ea <__submore+0x48>
 80103b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80103b6:	f7fd fef9 	bl	800e1ac <_malloc_r>
 80103ba:	b918      	cbnz	r0, 80103c4 <__submore+0x22>
 80103bc:	f04f 30ff 	mov.w	r0, #4294967295
 80103c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80103ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80103ce:	6360      	str	r0, [r4, #52]	@ 0x34
 80103d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80103d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80103d8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80103dc:	7043      	strb	r3, [r0, #1]
 80103de:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80103e2:	7003      	strb	r3, [r0, #0]
 80103e4:	6020      	str	r0, [r4, #0]
 80103e6:	2000      	movs	r0, #0
 80103e8:	e7ea      	b.n	80103c0 <__submore+0x1e>
 80103ea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80103ec:	0077      	lsls	r7, r6, #1
 80103ee:	463a      	mov	r2, r7
 80103f0:	f000 fbcb 	bl	8010b8a <_realloc_r>
 80103f4:	4605      	mov	r5, r0
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d0e0      	beq.n	80103bc <__submore+0x1a>
 80103fa:	eb00 0806 	add.w	r8, r0, r6
 80103fe:	4601      	mov	r1, r0
 8010400:	4632      	mov	r2, r6
 8010402:	4640      	mov	r0, r8
 8010404:	f000 f830 	bl	8010468 <memcpy>
 8010408:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801040c:	f8c4 8000 	str.w	r8, [r4]
 8010410:	e7e9      	b.n	80103e6 <__submore+0x44>

08010412 <memmove>:
 8010412:	4288      	cmp	r0, r1
 8010414:	b510      	push	{r4, lr}
 8010416:	eb01 0402 	add.w	r4, r1, r2
 801041a:	d902      	bls.n	8010422 <memmove+0x10>
 801041c:	4284      	cmp	r4, r0
 801041e:	4623      	mov	r3, r4
 8010420:	d807      	bhi.n	8010432 <memmove+0x20>
 8010422:	1e43      	subs	r3, r0, #1
 8010424:	42a1      	cmp	r1, r4
 8010426:	d008      	beq.n	801043a <memmove+0x28>
 8010428:	f811 2b01 	ldrb.w	r2, [r1], #1
 801042c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010430:	e7f8      	b.n	8010424 <memmove+0x12>
 8010432:	4601      	mov	r1, r0
 8010434:	4402      	add	r2, r0
 8010436:	428a      	cmp	r2, r1
 8010438:	d100      	bne.n	801043c <memmove+0x2a>
 801043a:	bd10      	pop	{r4, pc}
 801043c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010440:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010444:	e7f7      	b.n	8010436 <memmove+0x24>
	...

08010448 <_sbrk_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	2300      	movs	r3, #0
 801044c:	4d05      	ldr	r5, [pc, #20]	@ (8010464 <_sbrk_r+0x1c>)
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	602b      	str	r3, [r5, #0]
 8010454:	f7f2 fab0 	bl	80029b8 <_sbrk>
 8010458:	1c43      	adds	r3, r0, #1
 801045a:	d102      	bne.n	8010462 <_sbrk_r+0x1a>
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	b103      	cbz	r3, 8010462 <_sbrk_r+0x1a>
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	bd38      	pop	{r3, r4, r5, pc}
 8010464:	20001968 	.word	0x20001968

08010468 <memcpy>:
 8010468:	440a      	add	r2, r1
 801046a:	4291      	cmp	r1, r2
 801046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010470:	d100      	bne.n	8010474 <memcpy+0xc>
 8010472:	4770      	bx	lr
 8010474:	b510      	push	{r4, lr}
 8010476:	f811 4b01 	ldrb.w	r4, [r1], #1
 801047a:	4291      	cmp	r1, r2
 801047c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010480:	d1f9      	bne.n	8010476 <memcpy+0xe>
 8010482:	bd10      	pop	{r4, pc}

08010484 <nan>:
 8010484:	2000      	movs	r0, #0
 8010486:	4901      	ldr	r1, [pc, #4]	@ (801048c <nan+0x8>)
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	7ff80000 	.word	0x7ff80000

08010490 <__assert_func>:
 8010490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010492:	4614      	mov	r4, r2
 8010494:	461a      	mov	r2, r3
 8010496:	4b09      	ldr	r3, [pc, #36]	@ (80104bc <__assert_func+0x2c>)
 8010498:	4605      	mov	r5, r0
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68d8      	ldr	r0, [r3, #12]
 801049e:	b14c      	cbz	r4, 80104b4 <__assert_func+0x24>
 80104a0:	4b07      	ldr	r3, [pc, #28]	@ (80104c0 <__assert_func+0x30>)
 80104a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104a6:	9100      	str	r1, [sp, #0]
 80104a8:	462b      	mov	r3, r5
 80104aa:	4906      	ldr	r1, [pc, #24]	@ (80104c4 <__assert_func+0x34>)
 80104ac:	f000 fc1a 	bl	8010ce4 <fiprintf>
 80104b0:	f000 fc2a 	bl	8010d08 <abort>
 80104b4:	4b04      	ldr	r3, [pc, #16]	@ (80104c8 <__assert_func+0x38>)
 80104b6:	461c      	mov	r4, r3
 80104b8:	e7f3      	b.n	80104a2 <__assert_func+0x12>
 80104ba:	bf00      	nop
 80104bc:	2000019c 	.word	0x2000019c
 80104c0:	08011a2d 	.word	0x08011a2d
 80104c4:	08011a3a 	.word	0x08011a3a
 80104c8:	08011a68 	.word	0x08011a68

080104cc <_calloc_r>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	fba1 5402 	umull	r5, r4, r1, r2
 80104d2:	b934      	cbnz	r4, 80104e2 <_calloc_r+0x16>
 80104d4:	4629      	mov	r1, r5
 80104d6:	f7fd fe69 	bl	800e1ac <_malloc_r>
 80104da:	4606      	mov	r6, r0
 80104dc:	b928      	cbnz	r0, 80104ea <_calloc_r+0x1e>
 80104de:	4630      	mov	r0, r6
 80104e0:	bd70      	pop	{r4, r5, r6, pc}
 80104e2:	220c      	movs	r2, #12
 80104e4:	2600      	movs	r6, #0
 80104e6:	6002      	str	r2, [r0, #0]
 80104e8:	e7f9      	b.n	80104de <_calloc_r+0x12>
 80104ea:	462a      	mov	r2, r5
 80104ec:	4621      	mov	r1, r4
 80104ee:	f7fc feeb 	bl	800d2c8 <memset>
 80104f2:	e7f4      	b.n	80104de <_calloc_r+0x12>

080104f4 <rshift>:
 80104f4:	6903      	ldr	r3, [r0, #16]
 80104f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80104fe:	f100 0414 	add.w	r4, r0, #20
 8010502:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010506:	dd46      	ble.n	8010596 <rshift+0xa2>
 8010508:	f011 011f 	ands.w	r1, r1, #31
 801050c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010510:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010514:	d10c      	bne.n	8010530 <rshift+0x3c>
 8010516:	4629      	mov	r1, r5
 8010518:	f100 0710 	add.w	r7, r0, #16
 801051c:	42b1      	cmp	r1, r6
 801051e:	d335      	bcc.n	801058c <rshift+0x98>
 8010520:	1a9b      	subs	r3, r3, r2
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	1eea      	subs	r2, r5, #3
 8010526:	4296      	cmp	r6, r2
 8010528:	bf38      	it	cc
 801052a:	2300      	movcc	r3, #0
 801052c:	4423      	add	r3, r4
 801052e:	e015      	b.n	801055c <rshift+0x68>
 8010530:	46a1      	mov	r9, r4
 8010532:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010536:	f1c1 0820 	rsb	r8, r1, #32
 801053a:	40cf      	lsrs	r7, r1
 801053c:	f105 0e04 	add.w	lr, r5, #4
 8010540:	4576      	cmp	r6, lr
 8010542:	46f4      	mov	ip, lr
 8010544:	d816      	bhi.n	8010574 <rshift+0x80>
 8010546:	1a9a      	subs	r2, r3, r2
 8010548:	0092      	lsls	r2, r2, #2
 801054a:	3a04      	subs	r2, #4
 801054c:	3501      	adds	r5, #1
 801054e:	42ae      	cmp	r6, r5
 8010550:	bf38      	it	cc
 8010552:	2200      	movcc	r2, #0
 8010554:	18a3      	adds	r3, r4, r2
 8010556:	50a7      	str	r7, [r4, r2]
 8010558:	b107      	cbz	r7, 801055c <rshift+0x68>
 801055a:	3304      	adds	r3, #4
 801055c:	42a3      	cmp	r3, r4
 801055e:	eba3 0204 	sub.w	r2, r3, r4
 8010562:	bf08      	it	eq
 8010564:	2300      	moveq	r3, #0
 8010566:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801056a:	6102      	str	r2, [r0, #16]
 801056c:	bf08      	it	eq
 801056e:	6143      	streq	r3, [r0, #20]
 8010570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010574:	f8dc c000 	ldr.w	ip, [ip]
 8010578:	fa0c fc08 	lsl.w	ip, ip, r8
 801057c:	ea4c 0707 	orr.w	r7, ip, r7
 8010580:	f849 7b04 	str.w	r7, [r9], #4
 8010584:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010588:	40cf      	lsrs	r7, r1
 801058a:	e7d9      	b.n	8010540 <rshift+0x4c>
 801058c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010590:	f847 cf04 	str.w	ip, [r7, #4]!
 8010594:	e7c2      	b.n	801051c <rshift+0x28>
 8010596:	4623      	mov	r3, r4
 8010598:	e7e0      	b.n	801055c <rshift+0x68>

0801059a <__hexdig_fun>:
 801059a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801059e:	2b09      	cmp	r3, #9
 80105a0:	d802      	bhi.n	80105a8 <__hexdig_fun+0xe>
 80105a2:	3820      	subs	r0, #32
 80105a4:	b2c0      	uxtb	r0, r0
 80105a6:	4770      	bx	lr
 80105a8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80105ac:	2b05      	cmp	r3, #5
 80105ae:	d801      	bhi.n	80105b4 <__hexdig_fun+0x1a>
 80105b0:	3847      	subs	r0, #71	@ 0x47
 80105b2:	e7f7      	b.n	80105a4 <__hexdig_fun+0xa>
 80105b4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80105b8:	2b05      	cmp	r3, #5
 80105ba:	d801      	bhi.n	80105c0 <__hexdig_fun+0x26>
 80105bc:	3827      	subs	r0, #39	@ 0x27
 80105be:	e7f1      	b.n	80105a4 <__hexdig_fun+0xa>
 80105c0:	2000      	movs	r0, #0
 80105c2:	4770      	bx	lr

080105c4 <__gethex>:
 80105c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c8:	468a      	mov	sl, r1
 80105ca:	4690      	mov	r8, r2
 80105cc:	b085      	sub	sp, #20
 80105ce:	9302      	str	r3, [sp, #8]
 80105d0:	680b      	ldr	r3, [r1, #0]
 80105d2:	9001      	str	r0, [sp, #4]
 80105d4:	1c9c      	adds	r4, r3, #2
 80105d6:	46a1      	mov	r9, r4
 80105d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80105dc:	2830      	cmp	r0, #48	@ 0x30
 80105de:	d0fa      	beq.n	80105d6 <__gethex+0x12>
 80105e0:	eba9 0303 	sub.w	r3, r9, r3
 80105e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80105e8:	f7ff ffd7 	bl	801059a <__hexdig_fun>
 80105ec:	4605      	mov	r5, r0
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d168      	bne.n	80106c4 <__gethex+0x100>
 80105f2:	2201      	movs	r2, #1
 80105f4:	4648      	mov	r0, r9
 80105f6:	499f      	ldr	r1, [pc, #636]	@ (8010874 <__gethex+0x2b0>)
 80105f8:	f7fc fe6e 	bl	800d2d8 <strncmp>
 80105fc:	4607      	mov	r7, r0
 80105fe:	2800      	cmp	r0, #0
 8010600:	d167      	bne.n	80106d2 <__gethex+0x10e>
 8010602:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010606:	4626      	mov	r6, r4
 8010608:	f7ff ffc7 	bl	801059a <__hexdig_fun>
 801060c:	2800      	cmp	r0, #0
 801060e:	d062      	beq.n	80106d6 <__gethex+0x112>
 8010610:	4623      	mov	r3, r4
 8010612:	7818      	ldrb	r0, [r3, #0]
 8010614:	4699      	mov	r9, r3
 8010616:	2830      	cmp	r0, #48	@ 0x30
 8010618:	f103 0301 	add.w	r3, r3, #1
 801061c:	d0f9      	beq.n	8010612 <__gethex+0x4e>
 801061e:	f7ff ffbc 	bl	801059a <__hexdig_fun>
 8010622:	fab0 f580 	clz	r5, r0
 8010626:	f04f 0b01 	mov.w	fp, #1
 801062a:	096d      	lsrs	r5, r5, #5
 801062c:	464a      	mov	r2, r9
 801062e:	4616      	mov	r6, r2
 8010630:	7830      	ldrb	r0, [r6, #0]
 8010632:	3201      	adds	r2, #1
 8010634:	f7ff ffb1 	bl	801059a <__hexdig_fun>
 8010638:	2800      	cmp	r0, #0
 801063a:	d1f8      	bne.n	801062e <__gethex+0x6a>
 801063c:	2201      	movs	r2, #1
 801063e:	4630      	mov	r0, r6
 8010640:	498c      	ldr	r1, [pc, #560]	@ (8010874 <__gethex+0x2b0>)
 8010642:	f7fc fe49 	bl	800d2d8 <strncmp>
 8010646:	2800      	cmp	r0, #0
 8010648:	d13f      	bne.n	80106ca <__gethex+0x106>
 801064a:	b944      	cbnz	r4, 801065e <__gethex+0x9a>
 801064c:	1c74      	adds	r4, r6, #1
 801064e:	4622      	mov	r2, r4
 8010650:	4616      	mov	r6, r2
 8010652:	7830      	ldrb	r0, [r6, #0]
 8010654:	3201      	adds	r2, #1
 8010656:	f7ff ffa0 	bl	801059a <__hexdig_fun>
 801065a:	2800      	cmp	r0, #0
 801065c:	d1f8      	bne.n	8010650 <__gethex+0x8c>
 801065e:	1ba4      	subs	r4, r4, r6
 8010660:	00a7      	lsls	r7, r4, #2
 8010662:	7833      	ldrb	r3, [r6, #0]
 8010664:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010668:	2b50      	cmp	r3, #80	@ 0x50
 801066a:	d13e      	bne.n	80106ea <__gethex+0x126>
 801066c:	7873      	ldrb	r3, [r6, #1]
 801066e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010670:	d033      	beq.n	80106da <__gethex+0x116>
 8010672:	2b2d      	cmp	r3, #45	@ 0x2d
 8010674:	d034      	beq.n	80106e0 <__gethex+0x11c>
 8010676:	2400      	movs	r4, #0
 8010678:	1c71      	adds	r1, r6, #1
 801067a:	7808      	ldrb	r0, [r1, #0]
 801067c:	f7ff ff8d 	bl	801059a <__hexdig_fun>
 8010680:	1e43      	subs	r3, r0, #1
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b18      	cmp	r3, #24
 8010686:	d830      	bhi.n	80106ea <__gethex+0x126>
 8010688:	f1a0 0210 	sub.w	r2, r0, #16
 801068c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010690:	f7ff ff83 	bl	801059a <__hexdig_fun>
 8010694:	f100 3cff 	add.w	ip, r0, #4294967295
 8010698:	fa5f fc8c 	uxtb.w	ip, ip
 801069c:	f1bc 0f18 	cmp.w	ip, #24
 80106a0:	f04f 030a 	mov.w	r3, #10
 80106a4:	d91e      	bls.n	80106e4 <__gethex+0x120>
 80106a6:	b104      	cbz	r4, 80106aa <__gethex+0xe6>
 80106a8:	4252      	negs	r2, r2
 80106aa:	4417      	add	r7, r2
 80106ac:	f8ca 1000 	str.w	r1, [sl]
 80106b0:	b1ed      	cbz	r5, 80106ee <__gethex+0x12a>
 80106b2:	f1bb 0f00 	cmp.w	fp, #0
 80106b6:	bf0c      	ite	eq
 80106b8:	2506      	moveq	r5, #6
 80106ba:	2500      	movne	r5, #0
 80106bc:	4628      	mov	r0, r5
 80106be:	b005      	add	sp, #20
 80106c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c4:	2500      	movs	r5, #0
 80106c6:	462c      	mov	r4, r5
 80106c8:	e7b0      	b.n	801062c <__gethex+0x68>
 80106ca:	2c00      	cmp	r4, #0
 80106cc:	d1c7      	bne.n	801065e <__gethex+0x9a>
 80106ce:	4627      	mov	r7, r4
 80106d0:	e7c7      	b.n	8010662 <__gethex+0x9e>
 80106d2:	464e      	mov	r6, r9
 80106d4:	462f      	mov	r7, r5
 80106d6:	2501      	movs	r5, #1
 80106d8:	e7c3      	b.n	8010662 <__gethex+0x9e>
 80106da:	2400      	movs	r4, #0
 80106dc:	1cb1      	adds	r1, r6, #2
 80106de:	e7cc      	b.n	801067a <__gethex+0xb6>
 80106e0:	2401      	movs	r4, #1
 80106e2:	e7fb      	b.n	80106dc <__gethex+0x118>
 80106e4:	fb03 0002 	mla	r0, r3, r2, r0
 80106e8:	e7ce      	b.n	8010688 <__gethex+0xc4>
 80106ea:	4631      	mov	r1, r6
 80106ec:	e7de      	b.n	80106ac <__gethex+0xe8>
 80106ee:	4629      	mov	r1, r5
 80106f0:	eba6 0309 	sub.w	r3, r6, r9
 80106f4:	3b01      	subs	r3, #1
 80106f6:	2b07      	cmp	r3, #7
 80106f8:	dc0a      	bgt.n	8010710 <__gethex+0x14c>
 80106fa:	9801      	ldr	r0, [sp, #4]
 80106fc:	f7fd fde2 	bl	800e2c4 <_Balloc>
 8010700:	4604      	mov	r4, r0
 8010702:	b940      	cbnz	r0, 8010716 <__gethex+0x152>
 8010704:	4602      	mov	r2, r0
 8010706:	21e4      	movs	r1, #228	@ 0xe4
 8010708:	4b5b      	ldr	r3, [pc, #364]	@ (8010878 <__gethex+0x2b4>)
 801070a:	485c      	ldr	r0, [pc, #368]	@ (801087c <__gethex+0x2b8>)
 801070c:	f7ff fec0 	bl	8010490 <__assert_func>
 8010710:	3101      	adds	r1, #1
 8010712:	105b      	asrs	r3, r3, #1
 8010714:	e7ef      	b.n	80106f6 <__gethex+0x132>
 8010716:	2300      	movs	r3, #0
 8010718:	f100 0a14 	add.w	sl, r0, #20
 801071c:	4655      	mov	r5, sl
 801071e:	469b      	mov	fp, r3
 8010720:	45b1      	cmp	r9, r6
 8010722:	d337      	bcc.n	8010794 <__gethex+0x1d0>
 8010724:	f845 bb04 	str.w	fp, [r5], #4
 8010728:	eba5 050a 	sub.w	r5, r5, sl
 801072c:	10ad      	asrs	r5, r5, #2
 801072e:	6125      	str	r5, [r4, #16]
 8010730:	4658      	mov	r0, fp
 8010732:	f7fd feb9 	bl	800e4a8 <__hi0bits>
 8010736:	016d      	lsls	r5, r5, #5
 8010738:	f8d8 6000 	ldr.w	r6, [r8]
 801073c:	1a2d      	subs	r5, r5, r0
 801073e:	42b5      	cmp	r5, r6
 8010740:	dd54      	ble.n	80107ec <__gethex+0x228>
 8010742:	1bad      	subs	r5, r5, r6
 8010744:	4629      	mov	r1, r5
 8010746:	4620      	mov	r0, r4
 8010748:	f7fe fa3b 	bl	800ebc2 <__any_on>
 801074c:	4681      	mov	r9, r0
 801074e:	b178      	cbz	r0, 8010770 <__gethex+0x1ac>
 8010750:	f04f 0901 	mov.w	r9, #1
 8010754:	1e6b      	subs	r3, r5, #1
 8010756:	1159      	asrs	r1, r3, #5
 8010758:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801075c:	f003 021f 	and.w	r2, r3, #31
 8010760:	fa09 f202 	lsl.w	r2, r9, r2
 8010764:	420a      	tst	r2, r1
 8010766:	d003      	beq.n	8010770 <__gethex+0x1ac>
 8010768:	454b      	cmp	r3, r9
 801076a:	dc36      	bgt.n	80107da <__gethex+0x216>
 801076c:	f04f 0902 	mov.w	r9, #2
 8010770:	4629      	mov	r1, r5
 8010772:	4620      	mov	r0, r4
 8010774:	f7ff febe 	bl	80104f4 <rshift>
 8010778:	442f      	add	r7, r5
 801077a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801077e:	42bb      	cmp	r3, r7
 8010780:	da42      	bge.n	8010808 <__gethex+0x244>
 8010782:	4621      	mov	r1, r4
 8010784:	9801      	ldr	r0, [sp, #4]
 8010786:	f7fd fddd 	bl	800e344 <_Bfree>
 801078a:	2300      	movs	r3, #0
 801078c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801078e:	25a3      	movs	r5, #163	@ 0xa3
 8010790:	6013      	str	r3, [r2, #0]
 8010792:	e793      	b.n	80106bc <__gethex+0xf8>
 8010794:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010798:	2a2e      	cmp	r2, #46	@ 0x2e
 801079a:	d012      	beq.n	80107c2 <__gethex+0x1fe>
 801079c:	2b20      	cmp	r3, #32
 801079e:	d104      	bne.n	80107aa <__gethex+0x1e6>
 80107a0:	f845 bb04 	str.w	fp, [r5], #4
 80107a4:	f04f 0b00 	mov.w	fp, #0
 80107a8:	465b      	mov	r3, fp
 80107aa:	7830      	ldrb	r0, [r6, #0]
 80107ac:	9303      	str	r3, [sp, #12]
 80107ae:	f7ff fef4 	bl	801059a <__hexdig_fun>
 80107b2:	9b03      	ldr	r3, [sp, #12]
 80107b4:	f000 000f 	and.w	r0, r0, #15
 80107b8:	4098      	lsls	r0, r3
 80107ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80107be:	3304      	adds	r3, #4
 80107c0:	e7ae      	b.n	8010720 <__gethex+0x15c>
 80107c2:	45b1      	cmp	r9, r6
 80107c4:	d8ea      	bhi.n	801079c <__gethex+0x1d8>
 80107c6:	2201      	movs	r2, #1
 80107c8:	4630      	mov	r0, r6
 80107ca:	492a      	ldr	r1, [pc, #168]	@ (8010874 <__gethex+0x2b0>)
 80107cc:	9303      	str	r3, [sp, #12]
 80107ce:	f7fc fd83 	bl	800d2d8 <strncmp>
 80107d2:	9b03      	ldr	r3, [sp, #12]
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d1e1      	bne.n	801079c <__gethex+0x1d8>
 80107d8:	e7a2      	b.n	8010720 <__gethex+0x15c>
 80107da:	4620      	mov	r0, r4
 80107dc:	1ea9      	subs	r1, r5, #2
 80107de:	f7fe f9f0 	bl	800ebc2 <__any_on>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d0c2      	beq.n	801076c <__gethex+0x1a8>
 80107e6:	f04f 0903 	mov.w	r9, #3
 80107ea:	e7c1      	b.n	8010770 <__gethex+0x1ac>
 80107ec:	da09      	bge.n	8010802 <__gethex+0x23e>
 80107ee:	1b75      	subs	r5, r6, r5
 80107f0:	4621      	mov	r1, r4
 80107f2:	462a      	mov	r2, r5
 80107f4:	9801      	ldr	r0, [sp, #4]
 80107f6:	f7fd ffb5 	bl	800e764 <__lshift>
 80107fa:	4604      	mov	r4, r0
 80107fc:	1b7f      	subs	r7, r7, r5
 80107fe:	f100 0a14 	add.w	sl, r0, #20
 8010802:	f04f 0900 	mov.w	r9, #0
 8010806:	e7b8      	b.n	801077a <__gethex+0x1b6>
 8010808:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801080c:	42bd      	cmp	r5, r7
 801080e:	dd6f      	ble.n	80108f0 <__gethex+0x32c>
 8010810:	1bed      	subs	r5, r5, r7
 8010812:	42ae      	cmp	r6, r5
 8010814:	dc34      	bgt.n	8010880 <__gethex+0x2bc>
 8010816:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801081a:	2b02      	cmp	r3, #2
 801081c:	d022      	beq.n	8010864 <__gethex+0x2a0>
 801081e:	2b03      	cmp	r3, #3
 8010820:	d024      	beq.n	801086c <__gethex+0x2a8>
 8010822:	2b01      	cmp	r3, #1
 8010824:	d115      	bne.n	8010852 <__gethex+0x28e>
 8010826:	42ae      	cmp	r6, r5
 8010828:	d113      	bne.n	8010852 <__gethex+0x28e>
 801082a:	2e01      	cmp	r6, #1
 801082c:	d10b      	bne.n	8010846 <__gethex+0x282>
 801082e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010832:	9a02      	ldr	r2, [sp, #8]
 8010834:	2562      	movs	r5, #98	@ 0x62
 8010836:	6013      	str	r3, [r2, #0]
 8010838:	2301      	movs	r3, #1
 801083a:	6123      	str	r3, [r4, #16]
 801083c:	f8ca 3000 	str.w	r3, [sl]
 8010840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010842:	601c      	str	r4, [r3, #0]
 8010844:	e73a      	b.n	80106bc <__gethex+0xf8>
 8010846:	4620      	mov	r0, r4
 8010848:	1e71      	subs	r1, r6, #1
 801084a:	f7fe f9ba 	bl	800ebc2 <__any_on>
 801084e:	2800      	cmp	r0, #0
 8010850:	d1ed      	bne.n	801082e <__gethex+0x26a>
 8010852:	4621      	mov	r1, r4
 8010854:	9801      	ldr	r0, [sp, #4]
 8010856:	f7fd fd75 	bl	800e344 <_Bfree>
 801085a:	2300      	movs	r3, #0
 801085c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801085e:	2550      	movs	r5, #80	@ 0x50
 8010860:	6013      	str	r3, [r2, #0]
 8010862:	e72b      	b.n	80106bc <__gethex+0xf8>
 8010864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010866:	2b00      	cmp	r3, #0
 8010868:	d1f3      	bne.n	8010852 <__gethex+0x28e>
 801086a:	e7e0      	b.n	801082e <__gethex+0x26a>
 801086c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1dd      	bne.n	801082e <__gethex+0x26a>
 8010872:	e7ee      	b.n	8010852 <__gethex+0x28e>
 8010874:	080119f7 	.word	0x080119f7
 8010878:	0801198d 	.word	0x0801198d
 801087c:	08011a69 	.word	0x08011a69
 8010880:	1e6f      	subs	r7, r5, #1
 8010882:	f1b9 0f00 	cmp.w	r9, #0
 8010886:	d130      	bne.n	80108ea <__gethex+0x326>
 8010888:	b127      	cbz	r7, 8010894 <__gethex+0x2d0>
 801088a:	4639      	mov	r1, r7
 801088c:	4620      	mov	r0, r4
 801088e:	f7fe f998 	bl	800ebc2 <__any_on>
 8010892:	4681      	mov	r9, r0
 8010894:	2301      	movs	r3, #1
 8010896:	4629      	mov	r1, r5
 8010898:	1b76      	subs	r6, r6, r5
 801089a:	2502      	movs	r5, #2
 801089c:	117a      	asrs	r2, r7, #5
 801089e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80108a2:	f007 071f 	and.w	r7, r7, #31
 80108a6:	40bb      	lsls	r3, r7
 80108a8:	4213      	tst	r3, r2
 80108aa:	4620      	mov	r0, r4
 80108ac:	bf18      	it	ne
 80108ae:	f049 0902 	orrne.w	r9, r9, #2
 80108b2:	f7ff fe1f 	bl	80104f4 <rshift>
 80108b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80108ba:	f1b9 0f00 	cmp.w	r9, #0
 80108be:	d047      	beq.n	8010950 <__gethex+0x38c>
 80108c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d015      	beq.n	80108f4 <__gethex+0x330>
 80108c8:	2b03      	cmp	r3, #3
 80108ca:	d017      	beq.n	80108fc <__gethex+0x338>
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d109      	bne.n	80108e4 <__gethex+0x320>
 80108d0:	f019 0f02 	tst.w	r9, #2
 80108d4:	d006      	beq.n	80108e4 <__gethex+0x320>
 80108d6:	f8da 3000 	ldr.w	r3, [sl]
 80108da:	ea49 0903 	orr.w	r9, r9, r3
 80108de:	f019 0f01 	tst.w	r9, #1
 80108e2:	d10e      	bne.n	8010902 <__gethex+0x33e>
 80108e4:	f045 0510 	orr.w	r5, r5, #16
 80108e8:	e032      	b.n	8010950 <__gethex+0x38c>
 80108ea:	f04f 0901 	mov.w	r9, #1
 80108ee:	e7d1      	b.n	8010894 <__gethex+0x2d0>
 80108f0:	2501      	movs	r5, #1
 80108f2:	e7e2      	b.n	80108ba <__gethex+0x2f6>
 80108f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108f6:	f1c3 0301 	rsb	r3, r3, #1
 80108fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d0f0      	beq.n	80108e4 <__gethex+0x320>
 8010902:	f04f 0c00 	mov.w	ip, #0
 8010906:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801090a:	f104 0314 	add.w	r3, r4, #20
 801090e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010912:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010916:	4618      	mov	r0, r3
 8010918:	f853 2b04 	ldr.w	r2, [r3], #4
 801091c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010920:	d01b      	beq.n	801095a <__gethex+0x396>
 8010922:	3201      	adds	r2, #1
 8010924:	6002      	str	r2, [r0, #0]
 8010926:	2d02      	cmp	r5, #2
 8010928:	f104 0314 	add.w	r3, r4, #20
 801092c:	d13c      	bne.n	80109a8 <__gethex+0x3e4>
 801092e:	f8d8 2000 	ldr.w	r2, [r8]
 8010932:	3a01      	subs	r2, #1
 8010934:	42b2      	cmp	r2, r6
 8010936:	d109      	bne.n	801094c <__gethex+0x388>
 8010938:	2201      	movs	r2, #1
 801093a:	1171      	asrs	r1, r6, #5
 801093c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010940:	f006 061f 	and.w	r6, r6, #31
 8010944:	fa02 f606 	lsl.w	r6, r2, r6
 8010948:	421e      	tst	r6, r3
 801094a:	d13a      	bne.n	80109c2 <__gethex+0x3fe>
 801094c:	f045 0520 	orr.w	r5, r5, #32
 8010950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010952:	601c      	str	r4, [r3, #0]
 8010954:	9b02      	ldr	r3, [sp, #8]
 8010956:	601f      	str	r7, [r3, #0]
 8010958:	e6b0      	b.n	80106bc <__gethex+0xf8>
 801095a:	4299      	cmp	r1, r3
 801095c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010960:	d8d9      	bhi.n	8010916 <__gethex+0x352>
 8010962:	68a3      	ldr	r3, [r4, #8]
 8010964:	459b      	cmp	fp, r3
 8010966:	db17      	blt.n	8010998 <__gethex+0x3d4>
 8010968:	6861      	ldr	r1, [r4, #4]
 801096a:	9801      	ldr	r0, [sp, #4]
 801096c:	3101      	adds	r1, #1
 801096e:	f7fd fca9 	bl	800e2c4 <_Balloc>
 8010972:	4681      	mov	r9, r0
 8010974:	b918      	cbnz	r0, 801097e <__gethex+0x3ba>
 8010976:	4602      	mov	r2, r0
 8010978:	2184      	movs	r1, #132	@ 0x84
 801097a:	4b19      	ldr	r3, [pc, #100]	@ (80109e0 <__gethex+0x41c>)
 801097c:	e6c5      	b.n	801070a <__gethex+0x146>
 801097e:	6922      	ldr	r2, [r4, #16]
 8010980:	f104 010c 	add.w	r1, r4, #12
 8010984:	3202      	adds	r2, #2
 8010986:	0092      	lsls	r2, r2, #2
 8010988:	300c      	adds	r0, #12
 801098a:	f7ff fd6d 	bl	8010468 <memcpy>
 801098e:	4621      	mov	r1, r4
 8010990:	9801      	ldr	r0, [sp, #4]
 8010992:	f7fd fcd7 	bl	800e344 <_Bfree>
 8010996:	464c      	mov	r4, r9
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	1c5a      	adds	r2, r3, #1
 801099c:	6122      	str	r2, [r4, #16]
 801099e:	2201      	movs	r2, #1
 80109a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109a4:	615a      	str	r2, [r3, #20]
 80109a6:	e7be      	b.n	8010926 <__gethex+0x362>
 80109a8:	6922      	ldr	r2, [r4, #16]
 80109aa:	455a      	cmp	r2, fp
 80109ac:	dd0b      	ble.n	80109c6 <__gethex+0x402>
 80109ae:	2101      	movs	r1, #1
 80109b0:	4620      	mov	r0, r4
 80109b2:	f7ff fd9f 	bl	80104f4 <rshift>
 80109b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109ba:	3701      	adds	r7, #1
 80109bc:	42bb      	cmp	r3, r7
 80109be:	f6ff aee0 	blt.w	8010782 <__gethex+0x1be>
 80109c2:	2501      	movs	r5, #1
 80109c4:	e7c2      	b.n	801094c <__gethex+0x388>
 80109c6:	f016 061f 	ands.w	r6, r6, #31
 80109ca:	d0fa      	beq.n	80109c2 <__gethex+0x3fe>
 80109cc:	4453      	add	r3, sl
 80109ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80109d2:	f7fd fd69 	bl	800e4a8 <__hi0bits>
 80109d6:	f1c6 0620 	rsb	r6, r6, #32
 80109da:	42b0      	cmp	r0, r6
 80109dc:	dbe7      	blt.n	80109ae <__gethex+0x3ea>
 80109de:	e7f0      	b.n	80109c2 <__gethex+0x3fe>
 80109e0:	0801198d 	.word	0x0801198d

080109e4 <L_shift>:
 80109e4:	f1c2 0208 	rsb	r2, r2, #8
 80109e8:	0092      	lsls	r2, r2, #2
 80109ea:	b570      	push	{r4, r5, r6, lr}
 80109ec:	f1c2 0620 	rsb	r6, r2, #32
 80109f0:	6843      	ldr	r3, [r0, #4]
 80109f2:	6804      	ldr	r4, [r0, #0]
 80109f4:	fa03 f506 	lsl.w	r5, r3, r6
 80109f8:	432c      	orrs	r4, r5
 80109fa:	40d3      	lsrs	r3, r2
 80109fc:	6004      	str	r4, [r0, #0]
 80109fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010a02:	4288      	cmp	r0, r1
 8010a04:	d3f4      	bcc.n	80109f0 <L_shift+0xc>
 8010a06:	bd70      	pop	{r4, r5, r6, pc}

08010a08 <__match>:
 8010a08:	b530      	push	{r4, r5, lr}
 8010a0a:	6803      	ldr	r3, [r0, #0]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a12:	b914      	cbnz	r4, 8010a1a <__match+0x12>
 8010a14:	6003      	str	r3, [r0, #0]
 8010a16:	2001      	movs	r0, #1
 8010a18:	bd30      	pop	{r4, r5, pc}
 8010a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010a22:	2d19      	cmp	r5, #25
 8010a24:	bf98      	it	ls
 8010a26:	3220      	addls	r2, #32
 8010a28:	42a2      	cmp	r2, r4
 8010a2a:	d0f0      	beq.n	8010a0e <__match+0x6>
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	e7f3      	b.n	8010a18 <__match+0x10>

08010a30 <__hexnan>:
 8010a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a34:	2500      	movs	r5, #0
 8010a36:	680b      	ldr	r3, [r1, #0]
 8010a38:	4682      	mov	sl, r0
 8010a3a:	115e      	asrs	r6, r3, #5
 8010a3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a40:	f013 031f 	ands.w	r3, r3, #31
 8010a44:	bf18      	it	ne
 8010a46:	3604      	addne	r6, #4
 8010a48:	1f37      	subs	r7, r6, #4
 8010a4a:	4690      	mov	r8, r2
 8010a4c:	46b9      	mov	r9, r7
 8010a4e:	463c      	mov	r4, r7
 8010a50:	46ab      	mov	fp, r5
 8010a52:	b087      	sub	sp, #28
 8010a54:	6801      	ldr	r1, [r0, #0]
 8010a56:	9301      	str	r3, [sp, #4]
 8010a58:	f846 5c04 	str.w	r5, [r6, #-4]
 8010a5c:	9502      	str	r5, [sp, #8]
 8010a5e:	784a      	ldrb	r2, [r1, #1]
 8010a60:	1c4b      	adds	r3, r1, #1
 8010a62:	9303      	str	r3, [sp, #12]
 8010a64:	b342      	cbz	r2, 8010ab8 <__hexnan+0x88>
 8010a66:	4610      	mov	r0, r2
 8010a68:	9105      	str	r1, [sp, #20]
 8010a6a:	9204      	str	r2, [sp, #16]
 8010a6c:	f7ff fd95 	bl	801059a <__hexdig_fun>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d151      	bne.n	8010b18 <__hexnan+0xe8>
 8010a74:	9a04      	ldr	r2, [sp, #16]
 8010a76:	9905      	ldr	r1, [sp, #20]
 8010a78:	2a20      	cmp	r2, #32
 8010a7a:	d818      	bhi.n	8010aae <__hexnan+0x7e>
 8010a7c:	9b02      	ldr	r3, [sp, #8]
 8010a7e:	459b      	cmp	fp, r3
 8010a80:	dd13      	ble.n	8010aaa <__hexnan+0x7a>
 8010a82:	454c      	cmp	r4, r9
 8010a84:	d206      	bcs.n	8010a94 <__hexnan+0x64>
 8010a86:	2d07      	cmp	r5, #7
 8010a88:	dc04      	bgt.n	8010a94 <__hexnan+0x64>
 8010a8a:	462a      	mov	r2, r5
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f7ff ffa8 	bl	80109e4 <L_shift>
 8010a94:	4544      	cmp	r4, r8
 8010a96:	d952      	bls.n	8010b3e <__hexnan+0x10e>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f1a4 0904 	sub.w	r9, r4, #4
 8010a9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010aa2:	461d      	mov	r5, r3
 8010aa4:	464c      	mov	r4, r9
 8010aa6:	f8cd b008 	str.w	fp, [sp, #8]
 8010aaa:	9903      	ldr	r1, [sp, #12]
 8010aac:	e7d7      	b.n	8010a5e <__hexnan+0x2e>
 8010aae:	2a29      	cmp	r2, #41	@ 0x29
 8010ab0:	d157      	bne.n	8010b62 <__hexnan+0x132>
 8010ab2:	3102      	adds	r1, #2
 8010ab4:	f8ca 1000 	str.w	r1, [sl]
 8010ab8:	f1bb 0f00 	cmp.w	fp, #0
 8010abc:	d051      	beq.n	8010b62 <__hexnan+0x132>
 8010abe:	454c      	cmp	r4, r9
 8010ac0:	d206      	bcs.n	8010ad0 <__hexnan+0xa0>
 8010ac2:	2d07      	cmp	r5, #7
 8010ac4:	dc04      	bgt.n	8010ad0 <__hexnan+0xa0>
 8010ac6:	462a      	mov	r2, r5
 8010ac8:	4649      	mov	r1, r9
 8010aca:	4620      	mov	r0, r4
 8010acc:	f7ff ff8a 	bl	80109e4 <L_shift>
 8010ad0:	4544      	cmp	r4, r8
 8010ad2:	d936      	bls.n	8010b42 <__hexnan+0x112>
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	f1a8 0204 	sub.w	r2, r8, #4
 8010ada:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ade:	429f      	cmp	r7, r3
 8010ae0:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ae4:	d2f9      	bcs.n	8010ada <__hexnan+0xaa>
 8010ae6:	1b3b      	subs	r3, r7, r4
 8010ae8:	f023 0303 	bic.w	r3, r3, #3
 8010aec:	3304      	adds	r3, #4
 8010aee:	3401      	adds	r4, #1
 8010af0:	3e03      	subs	r6, #3
 8010af2:	42b4      	cmp	r4, r6
 8010af4:	bf88      	it	hi
 8010af6:	2304      	movhi	r3, #4
 8010af8:	2200      	movs	r2, #0
 8010afa:	4443      	add	r3, r8
 8010afc:	f843 2b04 	str.w	r2, [r3], #4
 8010b00:	429f      	cmp	r7, r3
 8010b02:	d2fb      	bcs.n	8010afc <__hexnan+0xcc>
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	b91b      	cbnz	r3, 8010b10 <__hexnan+0xe0>
 8010b08:	4547      	cmp	r7, r8
 8010b0a:	d128      	bne.n	8010b5e <__hexnan+0x12e>
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	603b      	str	r3, [r7, #0]
 8010b10:	2005      	movs	r0, #5
 8010b12:	b007      	add	sp, #28
 8010b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b18:	3501      	adds	r5, #1
 8010b1a:	2d08      	cmp	r5, #8
 8010b1c:	f10b 0b01 	add.w	fp, fp, #1
 8010b20:	dd06      	ble.n	8010b30 <__hexnan+0x100>
 8010b22:	4544      	cmp	r4, r8
 8010b24:	d9c1      	bls.n	8010aaa <__hexnan+0x7a>
 8010b26:	2300      	movs	r3, #0
 8010b28:	2501      	movs	r5, #1
 8010b2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b2e:	3c04      	subs	r4, #4
 8010b30:	6822      	ldr	r2, [r4, #0]
 8010b32:	f000 000f 	and.w	r0, r0, #15
 8010b36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010b3a:	6020      	str	r0, [r4, #0]
 8010b3c:	e7b5      	b.n	8010aaa <__hexnan+0x7a>
 8010b3e:	2508      	movs	r5, #8
 8010b40:	e7b3      	b.n	8010aaa <__hexnan+0x7a>
 8010b42:	9b01      	ldr	r3, [sp, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d0dd      	beq.n	8010b04 <__hexnan+0xd4>
 8010b48:	f04f 32ff 	mov.w	r2, #4294967295
 8010b4c:	f1c3 0320 	rsb	r3, r3, #32
 8010b50:	40da      	lsrs	r2, r3
 8010b52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b56:	4013      	ands	r3, r2
 8010b58:	f846 3c04 	str.w	r3, [r6, #-4]
 8010b5c:	e7d2      	b.n	8010b04 <__hexnan+0xd4>
 8010b5e:	3f04      	subs	r7, #4
 8010b60:	e7d0      	b.n	8010b04 <__hexnan+0xd4>
 8010b62:	2004      	movs	r0, #4
 8010b64:	e7d5      	b.n	8010b12 <__hexnan+0xe2>

08010b66 <__ascii_mbtowc>:
 8010b66:	b082      	sub	sp, #8
 8010b68:	b901      	cbnz	r1, 8010b6c <__ascii_mbtowc+0x6>
 8010b6a:	a901      	add	r1, sp, #4
 8010b6c:	b142      	cbz	r2, 8010b80 <__ascii_mbtowc+0x1a>
 8010b6e:	b14b      	cbz	r3, 8010b84 <__ascii_mbtowc+0x1e>
 8010b70:	7813      	ldrb	r3, [r2, #0]
 8010b72:	600b      	str	r3, [r1, #0]
 8010b74:	7812      	ldrb	r2, [r2, #0]
 8010b76:	1e10      	subs	r0, r2, #0
 8010b78:	bf18      	it	ne
 8010b7a:	2001      	movne	r0, #1
 8010b7c:	b002      	add	sp, #8
 8010b7e:	4770      	bx	lr
 8010b80:	4610      	mov	r0, r2
 8010b82:	e7fb      	b.n	8010b7c <__ascii_mbtowc+0x16>
 8010b84:	f06f 0001 	mvn.w	r0, #1
 8010b88:	e7f8      	b.n	8010b7c <__ascii_mbtowc+0x16>

08010b8a <_realloc_r>:
 8010b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8e:	4607      	mov	r7, r0
 8010b90:	4614      	mov	r4, r2
 8010b92:	460d      	mov	r5, r1
 8010b94:	b921      	cbnz	r1, 8010ba0 <_realloc_r+0x16>
 8010b96:	4611      	mov	r1, r2
 8010b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9c:	f7fd bb06 	b.w	800e1ac <_malloc_r>
 8010ba0:	b92a      	cbnz	r2, 8010bae <_realloc_r+0x24>
 8010ba2:	f7fd fa91 	bl	800e0c8 <_free_r>
 8010ba6:	4625      	mov	r5, r4
 8010ba8:	4628      	mov	r0, r5
 8010baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bae:	f000 f8b2 	bl	8010d16 <_malloc_usable_size_r>
 8010bb2:	4284      	cmp	r4, r0
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	d802      	bhi.n	8010bbe <_realloc_r+0x34>
 8010bb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010bbc:	d8f4      	bhi.n	8010ba8 <_realloc_r+0x1e>
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4638      	mov	r0, r7
 8010bc2:	f7fd faf3 	bl	800e1ac <_malloc_r>
 8010bc6:	4680      	mov	r8, r0
 8010bc8:	b908      	cbnz	r0, 8010bce <_realloc_r+0x44>
 8010bca:	4645      	mov	r5, r8
 8010bcc:	e7ec      	b.n	8010ba8 <_realloc_r+0x1e>
 8010bce:	42b4      	cmp	r4, r6
 8010bd0:	4622      	mov	r2, r4
 8010bd2:	4629      	mov	r1, r5
 8010bd4:	bf28      	it	cs
 8010bd6:	4632      	movcs	r2, r6
 8010bd8:	f7ff fc46 	bl	8010468 <memcpy>
 8010bdc:	4629      	mov	r1, r5
 8010bde:	4638      	mov	r0, r7
 8010be0:	f7fd fa72 	bl	800e0c8 <_free_r>
 8010be4:	e7f1      	b.n	8010bca <_realloc_r+0x40>
	...

08010be8 <_strtoul_l.isra.0>:
 8010be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bec:	4686      	mov	lr, r0
 8010bee:	460d      	mov	r5, r1
 8010bf0:	4e33      	ldr	r6, [pc, #204]	@ (8010cc0 <_strtoul_l.isra.0+0xd8>)
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bf8:	5d37      	ldrb	r7, [r6, r4]
 8010bfa:	f017 0708 	ands.w	r7, r7, #8
 8010bfe:	d1f8      	bne.n	8010bf2 <_strtoul_l.isra.0+0xa>
 8010c00:	2c2d      	cmp	r4, #45	@ 0x2d
 8010c02:	d110      	bne.n	8010c26 <_strtoul_l.isra.0+0x3e>
 8010c04:	2701      	movs	r7, #1
 8010c06:	782c      	ldrb	r4, [r5, #0]
 8010c08:	1c85      	adds	r5, r0, #2
 8010c0a:	f033 0010 	bics.w	r0, r3, #16
 8010c0e:	d115      	bne.n	8010c3c <_strtoul_l.isra.0+0x54>
 8010c10:	2c30      	cmp	r4, #48	@ 0x30
 8010c12:	d10d      	bne.n	8010c30 <_strtoul_l.isra.0+0x48>
 8010c14:	7828      	ldrb	r0, [r5, #0]
 8010c16:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010c1a:	2858      	cmp	r0, #88	@ 0x58
 8010c1c:	d108      	bne.n	8010c30 <_strtoul_l.isra.0+0x48>
 8010c1e:	786c      	ldrb	r4, [r5, #1]
 8010c20:	3502      	adds	r5, #2
 8010c22:	2310      	movs	r3, #16
 8010c24:	e00a      	b.n	8010c3c <_strtoul_l.isra.0+0x54>
 8010c26:	2c2b      	cmp	r4, #43	@ 0x2b
 8010c28:	bf04      	itt	eq
 8010c2a:	782c      	ldrbeq	r4, [r5, #0]
 8010c2c:	1c85      	addeq	r5, r0, #2
 8010c2e:	e7ec      	b.n	8010c0a <_strtoul_l.isra.0+0x22>
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d1f6      	bne.n	8010c22 <_strtoul_l.isra.0+0x3a>
 8010c34:	2c30      	cmp	r4, #48	@ 0x30
 8010c36:	bf14      	ite	ne
 8010c38:	230a      	movne	r3, #10
 8010c3a:	2308      	moveq	r3, #8
 8010c3c:	f04f 38ff 	mov.w	r8, #4294967295
 8010c40:	fbb8 f8f3 	udiv	r8, r8, r3
 8010c44:	2600      	movs	r6, #0
 8010c46:	fb03 f908 	mul.w	r9, r3, r8
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	ea6f 0909 	mvn.w	r9, r9
 8010c50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010c54:	f1bc 0f09 	cmp.w	ip, #9
 8010c58:	d810      	bhi.n	8010c7c <_strtoul_l.isra.0+0x94>
 8010c5a:	4664      	mov	r4, ip
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	dd1e      	ble.n	8010c9e <_strtoul_l.isra.0+0xb6>
 8010c60:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010c64:	d007      	beq.n	8010c76 <_strtoul_l.isra.0+0x8e>
 8010c66:	4580      	cmp	r8, r0
 8010c68:	d316      	bcc.n	8010c98 <_strtoul_l.isra.0+0xb0>
 8010c6a:	d101      	bne.n	8010c70 <_strtoul_l.isra.0+0x88>
 8010c6c:	45a1      	cmp	r9, r4
 8010c6e:	db13      	blt.n	8010c98 <_strtoul_l.isra.0+0xb0>
 8010c70:	2601      	movs	r6, #1
 8010c72:	fb00 4003 	mla	r0, r0, r3, r4
 8010c76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c7a:	e7e9      	b.n	8010c50 <_strtoul_l.isra.0+0x68>
 8010c7c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010c80:	f1bc 0f19 	cmp.w	ip, #25
 8010c84:	d801      	bhi.n	8010c8a <_strtoul_l.isra.0+0xa2>
 8010c86:	3c37      	subs	r4, #55	@ 0x37
 8010c88:	e7e8      	b.n	8010c5c <_strtoul_l.isra.0+0x74>
 8010c8a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010c8e:	f1bc 0f19 	cmp.w	ip, #25
 8010c92:	d804      	bhi.n	8010c9e <_strtoul_l.isra.0+0xb6>
 8010c94:	3c57      	subs	r4, #87	@ 0x57
 8010c96:	e7e1      	b.n	8010c5c <_strtoul_l.isra.0+0x74>
 8010c98:	f04f 36ff 	mov.w	r6, #4294967295
 8010c9c:	e7eb      	b.n	8010c76 <_strtoul_l.isra.0+0x8e>
 8010c9e:	1c73      	adds	r3, r6, #1
 8010ca0:	d106      	bne.n	8010cb0 <_strtoul_l.isra.0+0xc8>
 8010ca2:	2322      	movs	r3, #34	@ 0x22
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	f8ce 3000 	str.w	r3, [lr]
 8010caa:	b932      	cbnz	r2, 8010cba <_strtoul_l.isra.0+0xd2>
 8010cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb0:	b107      	cbz	r7, 8010cb4 <_strtoul_l.isra.0+0xcc>
 8010cb2:	4240      	negs	r0, r0
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	d0f9      	beq.n	8010cac <_strtoul_l.isra.0+0xc4>
 8010cb8:	b106      	cbz	r6, 8010cbc <_strtoul_l.isra.0+0xd4>
 8010cba:	1e69      	subs	r1, r5, #1
 8010cbc:	6011      	str	r1, [r2, #0]
 8010cbe:	e7f5      	b.n	8010cac <_strtoul_l.isra.0+0xc4>
 8010cc0:	08011c19 	.word	0x08011c19

08010cc4 <_strtoul_r>:
 8010cc4:	f7ff bf90 	b.w	8010be8 <_strtoul_l.isra.0>

08010cc8 <__ascii_wctomb>:
 8010cc8:	4603      	mov	r3, r0
 8010cca:	4608      	mov	r0, r1
 8010ccc:	b141      	cbz	r1, 8010ce0 <__ascii_wctomb+0x18>
 8010cce:	2aff      	cmp	r2, #255	@ 0xff
 8010cd0:	d904      	bls.n	8010cdc <__ascii_wctomb+0x14>
 8010cd2:	228a      	movs	r2, #138	@ 0x8a
 8010cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	4770      	bx	lr
 8010cdc:	2001      	movs	r0, #1
 8010cde:	700a      	strb	r2, [r1, #0]
 8010ce0:	4770      	bx	lr
	...

08010ce4 <fiprintf>:
 8010ce4:	b40e      	push	{r1, r2, r3}
 8010ce6:	b503      	push	{r0, r1, lr}
 8010ce8:	4601      	mov	r1, r0
 8010cea:	ab03      	add	r3, sp, #12
 8010cec:	4805      	ldr	r0, [pc, #20]	@ (8010d04 <fiprintf+0x20>)
 8010cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cf2:	6800      	ldr	r0, [r0, #0]
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	f000 f83d 	bl	8010d74 <_vfiprintf_r>
 8010cfa:	b002      	add	sp, #8
 8010cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d00:	b003      	add	sp, #12
 8010d02:	4770      	bx	lr
 8010d04:	2000019c 	.word	0x2000019c

08010d08 <abort>:
 8010d08:	2006      	movs	r0, #6
 8010d0a:	b508      	push	{r3, lr}
 8010d0c:	f000 fa06 	bl	801111c <raise>
 8010d10:	2001      	movs	r0, #1
 8010d12:	f7f1 fddc 	bl	80028ce <_exit>

08010d16 <_malloc_usable_size_r>:
 8010d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d1a:	1f18      	subs	r0, r3, #4
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	bfbc      	itt	lt
 8010d20:	580b      	ldrlt	r3, [r1, r0]
 8010d22:	18c0      	addlt	r0, r0, r3
 8010d24:	4770      	bx	lr

08010d26 <__sfputc_r>:
 8010d26:	6893      	ldr	r3, [r2, #8]
 8010d28:	b410      	push	{r4}
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	6093      	str	r3, [r2, #8]
 8010d30:	da07      	bge.n	8010d42 <__sfputc_r+0x1c>
 8010d32:	6994      	ldr	r4, [r2, #24]
 8010d34:	42a3      	cmp	r3, r4
 8010d36:	db01      	blt.n	8010d3c <__sfputc_r+0x16>
 8010d38:	290a      	cmp	r1, #10
 8010d3a:	d102      	bne.n	8010d42 <__sfputc_r+0x1c>
 8010d3c:	bc10      	pop	{r4}
 8010d3e:	f000 b931 	b.w	8010fa4 <__swbuf_r>
 8010d42:	6813      	ldr	r3, [r2, #0]
 8010d44:	1c58      	adds	r0, r3, #1
 8010d46:	6010      	str	r0, [r2, #0]
 8010d48:	7019      	strb	r1, [r3, #0]
 8010d4a:	4608      	mov	r0, r1
 8010d4c:	bc10      	pop	{r4}
 8010d4e:	4770      	bx	lr

08010d50 <__sfputs_r>:
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d52:	4606      	mov	r6, r0
 8010d54:	460f      	mov	r7, r1
 8010d56:	4614      	mov	r4, r2
 8010d58:	18d5      	adds	r5, r2, r3
 8010d5a:	42ac      	cmp	r4, r5
 8010d5c:	d101      	bne.n	8010d62 <__sfputs_r+0x12>
 8010d5e:	2000      	movs	r0, #0
 8010d60:	e007      	b.n	8010d72 <__sfputs_r+0x22>
 8010d62:	463a      	mov	r2, r7
 8010d64:	4630      	mov	r0, r6
 8010d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d6a:	f7ff ffdc 	bl	8010d26 <__sfputc_r>
 8010d6e:	1c43      	adds	r3, r0, #1
 8010d70:	d1f3      	bne.n	8010d5a <__sfputs_r+0xa>
 8010d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d74 <_vfiprintf_r>:
 8010d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d78:	460d      	mov	r5, r1
 8010d7a:	4614      	mov	r4, r2
 8010d7c:	4698      	mov	r8, r3
 8010d7e:	4606      	mov	r6, r0
 8010d80:	b09d      	sub	sp, #116	@ 0x74
 8010d82:	b118      	cbz	r0, 8010d8c <_vfiprintf_r+0x18>
 8010d84:	6a03      	ldr	r3, [r0, #32]
 8010d86:	b90b      	cbnz	r3, 8010d8c <_vfiprintf_r+0x18>
 8010d88:	f7fc f998 	bl	800d0bc <__sinit>
 8010d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d8e:	07d9      	lsls	r1, r3, #31
 8010d90:	d405      	bmi.n	8010d9e <_vfiprintf_r+0x2a>
 8010d92:	89ab      	ldrh	r3, [r5, #12]
 8010d94:	059a      	lsls	r2, r3, #22
 8010d96:	d402      	bmi.n	8010d9e <_vfiprintf_r+0x2a>
 8010d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d9a:	f7fc fb24 	bl	800d3e6 <__retarget_lock_acquire_recursive>
 8010d9e:	89ab      	ldrh	r3, [r5, #12]
 8010da0:	071b      	lsls	r3, r3, #28
 8010da2:	d501      	bpl.n	8010da8 <_vfiprintf_r+0x34>
 8010da4:	692b      	ldr	r3, [r5, #16]
 8010da6:	b99b      	cbnz	r3, 8010dd0 <_vfiprintf_r+0x5c>
 8010da8:	4629      	mov	r1, r5
 8010daa:	4630      	mov	r0, r6
 8010dac:	f000 f938 	bl	8011020 <__swsetup_r>
 8010db0:	b170      	cbz	r0, 8010dd0 <_vfiprintf_r+0x5c>
 8010db2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010db4:	07dc      	lsls	r4, r3, #31
 8010db6:	d504      	bpl.n	8010dc2 <_vfiprintf_r+0x4e>
 8010db8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dbc:	b01d      	add	sp, #116	@ 0x74
 8010dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc2:	89ab      	ldrh	r3, [r5, #12]
 8010dc4:	0598      	lsls	r0, r3, #22
 8010dc6:	d4f7      	bmi.n	8010db8 <_vfiprintf_r+0x44>
 8010dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dca:	f7fc fb0d 	bl	800d3e8 <__retarget_lock_release_recursive>
 8010dce:	e7f3      	b.n	8010db8 <_vfiprintf_r+0x44>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dd4:	2320      	movs	r3, #32
 8010dd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010dda:	2330      	movs	r3, #48	@ 0x30
 8010ddc:	f04f 0901 	mov.w	r9, #1
 8010de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010de4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8010f90 <_vfiprintf_r+0x21c>
 8010de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010dec:	4623      	mov	r3, r4
 8010dee:	469a      	mov	sl, r3
 8010df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010df4:	b10a      	cbz	r2, 8010dfa <_vfiprintf_r+0x86>
 8010df6:	2a25      	cmp	r2, #37	@ 0x25
 8010df8:	d1f9      	bne.n	8010dee <_vfiprintf_r+0x7a>
 8010dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8010dfe:	d00b      	beq.n	8010e18 <_vfiprintf_r+0xa4>
 8010e00:	465b      	mov	r3, fp
 8010e02:	4622      	mov	r2, r4
 8010e04:	4629      	mov	r1, r5
 8010e06:	4630      	mov	r0, r6
 8010e08:	f7ff ffa2 	bl	8010d50 <__sfputs_r>
 8010e0c:	3001      	adds	r0, #1
 8010e0e:	f000 80a7 	beq.w	8010f60 <_vfiprintf_r+0x1ec>
 8010e12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e14:	445a      	add	r2, fp
 8010e16:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e18:	f89a 3000 	ldrb.w	r3, [sl]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 809f 	beq.w	8010f60 <_vfiprintf_r+0x1ec>
 8010e22:	2300      	movs	r3, #0
 8010e24:	f04f 32ff 	mov.w	r2, #4294967295
 8010e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e2c:	f10a 0a01 	add.w	sl, sl, #1
 8010e30:	9304      	str	r3, [sp, #16]
 8010e32:	9307      	str	r3, [sp, #28]
 8010e34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e38:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e3a:	4654      	mov	r4, sl
 8010e3c:	2205      	movs	r2, #5
 8010e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e42:	4853      	ldr	r0, [pc, #332]	@ (8010f90 <_vfiprintf_r+0x21c>)
 8010e44:	f7fc fad1 	bl	800d3ea <memchr>
 8010e48:	9a04      	ldr	r2, [sp, #16]
 8010e4a:	b9d8      	cbnz	r0, 8010e84 <_vfiprintf_r+0x110>
 8010e4c:	06d1      	lsls	r1, r2, #27
 8010e4e:	bf44      	itt	mi
 8010e50:	2320      	movmi	r3, #32
 8010e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e56:	0713      	lsls	r3, r2, #28
 8010e58:	bf44      	itt	mi
 8010e5a:	232b      	movmi	r3, #43	@ 0x2b
 8010e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e60:	f89a 3000 	ldrb.w	r3, [sl]
 8010e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e66:	d015      	beq.n	8010e94 <_vfiprintf_r+0x120>
 8010e68:	4654      	mov	r4, sl
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	f04f 0c0a 	mov.w	ip, #10
 8010e70:	9a07      	ldr	r2, [sp, #28]
 8010e72:	4621      	mov	r1, r4
 8010e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e78:	3b30      	subs	r3, #48	@ 0x30
 8010e7a:	2b09      	cmp	r3, #9
 8010e7c:	d94b      	bls.n	8010f16 <_vfiprintf_r+0x1a2>
 8010e7e:	b1b0      	cbz	r0, 8010eae <_vfiprintf_r+0x13a>
 8010e80:	9207      	str	r2, [sp, #28]
 8010e82:	e014      	b.n	8010eae <_vfiprintf_r+0x13a>
 8010e84:	eba0 0308 	sub.w	r3, r0, r8
 8010e88:	fa09 f303 	lsl.w	r3, r9, r3
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	46a2      	mov	sl, r4
 8010e90:	9304      	str	r3, [sp, #16]
 8010e92:	e7d2      	b.n	8010e3a <_vfiprintf_r+0xc6>
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	1d19      	adds	r1, r3, #4
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	9103      	str	r1, [sp, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	bfbb      	ittet	lt
 8010ea0:	425b      	neglt	r3, r3
 8010ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ea6:	9307      	strge	r3, [sp, #28]
 8010ea8:	9307      	strlt	r3, [sp, #28]
 8010eaa:	bfb8      	it	lt
 8010eac:	9204      	strlt	r2, [sp, #16]
 8010eae:	7823      	ldrb	r3, [r4, #0]
 8010eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010eb2:	d10a      	bne.n	8010eca <_vfiprintf_r+0x156>
 8010eb4:	7863      	ldrb	r3, [r4, #1]
 8010eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eb8:	d132      	bne.n	8010f20 <_vfiprintf_r+0x1ac>
 8010eba:	9b03      	ldr	r3, [sp, #12]
 8010ebc:	3402      	adds	r4, #2
 8010ebe:	1d1a      	adds	r2, r3, #4
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	9203      	str	r2, [sp, #12]
 8010ec4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ec8:	9305      	str	r3, [sp, #20]
 8010eca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8010f94 <_vfiprintf_r+0x220>
 8010ece:	2203      	movs	r2, #3
 8010ed0:	4650      	mov	r0, sl
 8010ed2:	7821      	ldrb	r1, [r4, #0]
 8010ed4:	f7fc fa89 	bl	800d3ea <memchr>
 8010ed8:	b138      	cbz	r0, 8010eea <_vfiprintf_r+0x176>
 8010eda:	2240      	movs	r2, #64	@ 0x40
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	eba0 000a 	sub.w	r0, r0, sl
 8010ee2:	4082      	lsls	r2, r0
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	3401      	adds	r4, #1
 8010ee8:	9304      	str	r3, [sp, #16]
 8010eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eee:	2206      	movs	r2, #6
 8010ef0:	4829      	ldr	r0, [pc, #164]	@ (8010f98 <_vfiprintf_r+0x224>)
 8010ef2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ef6:	f7fc fa78 	bl	800d3ea <memchr>
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d03f      	beq.n	8010f7e <_vfiprintf_r+0x20a>
 8010efe:	4b27      	ldr	r3, [pc, #156]	@ (8010f9c <_vfiprintf_r+0x228>)
 8010f00:	bb1b      	cbnz	r3, 8010f4a <_vfiprintf_r+0x1d6>
 8010f02:	9b03      	ldr	r3, [sp, #12]
 8010f04:	3307      	adds	r3, #7
 8010f06:	f023 0307 	bic.w	r3, r3, #7
 8010f0a:	3308      	adds	r3, #8
 8010f0c:	9303      	str	r3, [sp, #12]
 8010f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f10:	443b      	add	r3, r7
 8010f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f14:	e76a      	b.n	8010dec <_vfiprintf_r+0x78>
 8010f16:	460c      	mov	r4, r1
 8010f18:	2001      	movs	r0, #1
 8010f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f1e:	e7a8      	b.n	8010e72 <_vfiprintf_r+0xfe>
 8010f20:	2300      	movs	r3, #0
 8010f22:	f04f 0c0a 	mov.w	ip, #10
 8010f26:	4619      	mov	r1, r3
 8010f28:	3401      	adds	r4, #1
 8010f2a:	9305      	str	r3, [sp, #20]
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f32:	3a30      	subs	r2, #48	@ 0x30
 8010f34:	2a09      	cmp	r2, #9
 8010f36:	d903      	bls.n	8010f40 <_vfiprintf_r+0x1cc>
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d0c6      	beq.n	8010eca <_vfiprintf_r+0x156>
 8010f3c:	9105      	str	r1, [sp, #20]
 8010f3e:	e7c4      	b.n	8010eca <_vfiprintf_r+0x156>
 8010f40:	4604      	mov	r4, r0
 8010f42:	2301      	movs	r3, #1
 8010f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f48:	e7f0      	b.n	8010f2c <_vfiprintf_r+0x1b8>
 8010f4a:	ab03      	add	r3, sp, #12
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	462a      	mov	r2, r5
 8010f50:	4630      	mov	r0, r6
 8010f52:	4b13      	ldr	r3, [pc, #76]	@ (8010fa0 <_vfiprintf_r+0x22c>)
 8010f54:	a904      	add	r1, sp, #16
 8010f56:	f7fb fa5f 	bl	800c418 <_printf_float>
 8010f5a:	4607      	mov	r7, r0
 8010f5c:	1c78      	adds	r0, r7, #1
 8010f5e:	d1d6      	bne.n	8010f0e <_vfiprintf_r+0x19a>
 8010f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f62:	07d9      	lsls	r1, r3, #31
 8010f64:	d405      	bmi.n	8010f72 <_vfiprintf_r+0x1fe>
 8010f66:	89ab      	ldrh	r3, [r5, #12]
 8010f68:	059a      	lsls	r2, r3, #22
 8010f6a:	d402      	bmi.n	8010f72 <_vfiprintf_r+0x1fe>
 8010f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f6e:	f7fc fa3b 	bl	800d3e8 <__retarget_lock_release_recursive>
 8010f72:	89ab      	ldrh	r3, [r5, #12]
 8010f74:	065b      	lsls	r3, r3, #25
 8010f76:	f53f af1f 	bmi.w	8010db8 <_vfiprintf_r+0x44>
 8010f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f7c:	e71e      	b.n	8010dbc <_vfiprintf_r+0x48>
 8010f7e:	ab03      	add	r3, sp, #12
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	462a      	mov	r2, r5
 8010f84:	4630      	mov	r0, r6
 8010f86:	4b06      	ldr	r3, [pc, #24]	@ (8010fa0 <_vfiprintf_r+0x22c>)
 8010f88:	a904      	add	r1, sp, #16
 8010f8a:	f7fb fce3 	bl	800c954 <_printf_i>
 8010f8e:	e7e4      	b.n	8010f5a <_vfiprintf_r+0x1e6>
 8010f90:	080119f9 	.word	0x080119f9
 8010f94:	080119ff 	.word	0x080119ff
 8010f98:	08011a03 	.word	0x08011a03
 8010f9c:	0800c419 	.word	0x0800c419
 8010fa0:	08010d51 	.word	0x08010d51

08010fa4 <__swbuf_r>:
 8010fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa6:	460e      	mov	r6, r1
 8010fa8:	4614      	mov	r4, r2
 8010faa:	4605      	mov	r5, r0
 8010fac:	b118      	cbz	r0, 8010fb6 <__swbuf_r+0x12>
 8010fae:	6a03      	ldr	r3, [r0, #32]
 8010fb0:	b90b      	cbnz	r3, 8010fb6 <__swbuf_r+0x12>
 8010fb2:	f7fc f883 	bl	800d0bc <__sinit>
 8010fb6:	69a3      	ldr	r3, [r4, #24]
 8010fb8:	60a3      	str	r3, [r4, #8]
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	071a      	lsls	r2, r3, #28
 8010fbe:	d501      	bpl.n	8010fc4 <__swbuf_r+0x20>
 8010fc0:	6923      	ldr	r3, [r4, #16]
 8010fc2:	b943      	cbnz	r3, 8010fd6 <__swbuf_r+0x32>
 8010fc4:	4621      	mov	r1, r4
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f000 f82a 	bl	8011020 <__swsetup_r>
 8010fcc:	b118      	cbz	r0, 8010fd6 <__swbuf_r+0x32>
 8010fce:	f04f 37ff 	mov.w	r7, #4294967295
 8010fd2:	4638      	mov	r0, r7
 8010fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	6922      	ldr	r2, [r4, #16]
 8010fda:	b2f6      	uxtb	r6, r6
 8010fdc:	1a98      	subs	r0, r3, r2
 8010fde:	6963      	ldr	r3, [r4, #20]
 8010fe0:	4637      	mov	r7, r6
 8010fe2:	4283      	cmp	r3, r0
 8010fe4:	dc05      	bgt.n	8010ff2 <__swbuf_r+0x4e>
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f7ff f979 	bl	80102e0 <_fflush_r>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d1ed      	bne.n	8010fce <__swbuf_r+0x2a>
 8010ff2:	68a3      	ldr	r3, [r4, #8]
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	60a3      	str	r3, [r4, #8]
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	1c5a      	adds	r2, r3, #1
 8010ffc:	6022      	str	r2, [r4, #0]
 8010ffe:	701e      	strb	r6, [r3, #0]
 8011000:	6962      	ldr	r2, [r4, #20]
 8011002:	1c43      	adds	r3, r0, #1
 8011004:	429a      	cmp	r2, r3
 8011006:	d004      	beq.n	8011012 <__swbuf_r+0x6e>
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	07db      	lsls	r3, r3, #31
 801100c:	d5e1      	bpl.n	8010fd2 <__swbuf_r+0x2e>
 801100e:	2e0a      	cmp	r6, #10
 8011010:	d1df      	bne.n	8010fd2 <__swbuf_r+0x2e>
 8011012:	4621      	mov	r1, r4
 8011014:	4628      	mov	r0, r5
 8011016:	f7ff f963 	bl	80102e0 <_fflush_r>
 801101a:	2800      	cmp	r0, #0
 801101c:	d0d9      	beq.n	8010fd2 <__swbuf_r+0x2e>
 801101e:	e7d6      	b.n	8010fce <__swbuf_r+0x2a>

08011020 <__swsetup_r>:
 8011020:	b538      	push	{r3, r4, r5, lr}
 8011022:	4b29      	ldr	r3, [pc, #164]	@ (80110c8 <__swsetup_r+0xa8>)
 8011024:	4605      	mov	r5, r0
 8011026:	6818      	ldr	r0, [r3, #0]
 8011028:	460c      	mov	r4, r1
 801102a:	b118      	cbz	r0, 8011034 <__swsetup_r+0x14>
 801102c:	6a03      	ldr	r3, [r0, #32]
 801102e:	b90b      	cbnz	r3, 8011034 <__swsetup_r+0x14>
 8011030:	f7fc f844 	bl	800d0bc <__sinit>
 8011034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011038:	0719      	lsls	r1, r3, #28
 801103a:	d422      	bmi.n	8011082 <__swsetup_r+0x62>
 801103c:	06da      	lsls	r2, r3, #27
 801103e:	d407      	bmi.n	8011050 <__swsetup_r+0x30>
 8011040:	2209      	movs	r2, #9
 8011042:	602a      	str	r2, [r5, #0]
 8011044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011048:	f04f 30ff 	mov.w	r0, #4294967295
 801104c:	81a3      	strh	r3, [r4, #12]
 801104e:	e033      	b.n	80110b8 <__swsetup_r+0x98>
 8011050:	0758      	lsls	r0, r3, #29
 8011052:	d512      	bpl.n	801107a <__swsetup_r+0x5a>
 8011054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011056:	b141      	cbz	r1, 801106a <__swsetup_r+0x4a>
 8011058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801105c:	4299      	cmp	r1, r3
 801105e:	d002      	beq.n	8011066 <__swsetup_r+0x46>
 8011060:	4628      	mov	r0, r5
 8011062:	f7fd f831 	bl	800e0c8 <_free_r>
 8011066:	2300      	movs	r3, #0
 8011068:	6363      	str	r3, [r4, #52]	@ 0x34
 801106a:	89a3      	ldrh	r3, [r4, #12]
 801106c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	2300      	movs	r3, #0
 8011074:	6063      	str	r3, [r4, #4]
 8011076:	6923      	ldr	r3, [r4, #16]
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	89a3      	ldrh	r3, [r4, #12]
 801107c:	f043 0308 	orr.w	r3, r3, #8
 8011080:	81a3      	strh	r3, [r4, #12]
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	b94b      	cbnz	r3, 801109a <__swsetup_r+0x7a>
 8011086:	89a3      	ldrh	r3, [r4, #12]
 8011088:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801108c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011090:	d003      	beq.n	801109a <__swsetup_r+0x7a>
 8011092:	4621      	mov	r1, r4
 8011094:	4628      	mov	r0, r5
 8011096:	f000 f882 	bl	801119e <__smakebuf_r>
 801109a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801109e:	f013 0201 	ands.w	r2, r3, #1
 80110a2:	d00a      	beq.n	80110ba <__swsetup_r+0x9a>
 80110a4:	2200      	movs	r2, #0
 80110a6:	60a2      	str	r2, [r4, #8]
 80110a8:	6962      	ldr	r2, [r4, #20]
 80110aa:	4252      	negs	r2, r2
 80110ac:	61a2      	str	r2, [r4, #24]
 80110ae:	6922      	ldr	r2, [r4, #16]
 80110b0:	b942      	cbnz	r2, 80110c4 <__swsetup_r+0xa4>
 80110b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80110b6:	d1c5      	bne.n	8011044 <__swsetup_r+0x24>
 80110b8:	bd38      	pop	{r3, r4, r5, pc}
 80110ba:	0799      	lsls	r1, r3, #30
 80110bc:	bf58      	it	pl
 80110be:	6962      	ldrpl	r2, [r4, #20]
 80110c0:	60a2      	str	r2, [r4, #8]
 80110c2:	e7f4      	b.n	80110ae <__swsetup_r+0x8e>
 80110c4:	2000      	movs	r0, #0
 80110c6:	e7f7      	b.n	80110b8 <__swsetup_r+0x98>
 80110c8:	2000019c 	.word	0x2000019c

080110cc <_raise_r>:
 80110cc:	291f      	cmp	r1, #31
 80110ce:	b538      	push	{r3, r4, r5, lr}
 80110d0:	4605      	mov	r5, r0
 80110d2:	460c      	mov	r4, r1
 80110d4:	d904      	bls.n	80110e0 <_raise_r+0x14>
 80110d6:	2316      	movs	r3, #22
 80110d8:	6003      	str	r3, [r0, #0]
 80110da:	f04f 30ff 	mov.w	r0, #4294967295
 80110de:	bd38      	pop	{r3, r4, r5, pc}
 80110e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80110e2:	b112      	cbz	r2, 80110ea <_raise_r+0x1e>
 80110e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110e8:	b94b      	cbnz	r3, 80110fe <_raise_r+0x32>
 80110ea:	4628      	mov	r0, r5
 80110ec:	f000 f830 	bl	8011150 <_getpid_r>
 80110f0:	4622      	mov	r2, r4
 80110f2:	4601      	mov	r1, r0
 80110f4:	4628      	mov	r0, r5
 80110f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110fa:	f000 b817 	b.w	801112c <_kill_r>
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d00a      	beq.n	8011118 <_raise_r+0x4c>
 8011102:	1c59      	adds	r1, r3, #1
 8011104:	d103      	bne.n	801110e <_raise_r+0x42>
 8011106:	2316      	movs	r3, #22
 8011108:	6003      	str	r3, [r0, #0]
 801110a:	2001      	movs	r0, #1
 801110c:	e7e7      	b.n	80110de <_raise_r+0x12>
 801110e:	2100      	movs	r1, #0
 8011110:	4620      	mov	r0, r4
 8011112:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011116:	4798      	blx	r3
 8011118:	2000      	movs	r0, #0
 801111a:	e7e0      	b.n	80110de <_raise_r+0x12>

0801111c <raise>:
 801111c:	4b02      	ldr	r3, [pc, #8]	@ (8011128 <raise+0xc>)
 801111e:	4601      	mov	r1, r0
 8011120:	6818      	ldr	r0, [r3, #0]
 8011122:	f7ff bfd3 	b.w	80110cc <_raise_r>
 8011126:	bf00      	nop
 8011128:	2000019c 	.word	0x2000019c

0801112c <_kill_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	2300      	movs	r3, #0
 8011130:	4d06      	ldr	r5, [pc, #24]	@ (801114c <_kill_r+0x20>)
 8011132:	4604      	mov	r4, r0
 8011134:	4608      	mov	r0, r1
 8011136:	4611      	mov	r1, r2
 8011138:	602b      	str	r3, [r5, #0]
 801113a:	f7f1 fbb8 	bl	80028ae <_kill>
 801113e:	1c43      	adds	r3, r0, #1
 8011140:	d102      	bne.n	8011148 <_kill_r+0x1c>
 8011142:	682b      	ldr	r3, [r5, #0]
 8011144:	b103      	cbz	r3, 8011148 <_kill_r+0x1c>
 8011146:	6023      	str	r3, [r4, #0]
 8011148:	bd38      	pop	{r3, r4, r5, pc}
 801114a:	bf00      	nop
 801114c:	20001968 	.word	0x20001968

08011150 <_getpid_r>:
 8011150:	f7f1 bba6 	b.w	80028a0 <_getpid>

08011154 <__swhatbuf_r>:
 8011154:	b570      	push	{r4, r5, r6, lr}
 8011156:	460c      	mov	r4, r1
 8011158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801115c:	4615      	mov	r5, r2
 801115e:	2900      	cmp	r1, #0
 8011160:	461e      	mov	r6, r3
 8011162:	b096      	sub	sp, #88	@ 0x58
 8011164:	da0c      	bge.n	8011180 <__swhatbuf_r+0x2c>
 8011166:	89a3      	ldrh	r3, [r4, #12]
 8011168:	2100      	movs	r1, #0
 801116a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801116e:	bf14      	ite	ne
 8011170:	2340      	movne	r3, #64	@ 0x40
 8011172:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011176:	2000      	movs	r0, #0
 8011178:	6031      	str	r1, [r6, #0]
 801117a:	602b      	str	r3, [r5, #0]
 801117c:	b016      	add	sp, #88	@ 0x58
 801117e:	bd70      	pop	{r4, r5, r6, pc}
 8011180:	466a      	mov	r2, sp
 8011182:	f000 f849 	bl	8011218 <_fstat_r>
 8011186:	2800      	cmp	r0, #0
 8011188:	dbed      	blt.n	8011166 <__swhatbuf_r+0x12>
 801118a:	9901      	ldr	r1, [sp, #4]
 801118c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011190:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011194:	4259      	negs	r1, r3
 8011196:	4159      	adcs	r1, r3
 8011198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801119c:	e7eb      	b.n	8011176 <__swhatbuf_r+0x22>

0801119e <__smakebuf_r>:
 801119e:	898b      	ldrh	r3, [r1, #12]
 80111a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111a2:	079d      	lsls	r5, r3, #30
 80111a4:	4606      	mov	r6, r0
 80111a6:	460c      	mov	r4, r1
 80111a8:	d507      	bpl.n	80111ba <__smakebuf_r+0x1c>
 80111aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80111ae:	6023      	str	r3, [r4, #0]
 80111b0:	6123      	str	r3, [r4, #16]
 80111b2:	2301      	movs	r3, #1
 80111b4:	6163      	str	r3, [r4, #20]
 80111b6:	b003      	add	sp, #12
 80111b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ba:	466a      	mov	r2, sp
 80111bc:	ab01      	add	r3, sp, #4
 80111be:	f7ff ffc9 	bl	8011154 <__swhatbuf_r>
 80111c2:	9f00      	ldr	r7, [sp, #0]
 80111c4:	4605      	mov	r5, r0
 80111c6:	4639      	mov	r1, r7
 80111c8:	4630      	mov	r0, r6
 80111ca:	f7fc ffef 	bl	800e1ac <_malloc_r>
 80111ce:	b948      	cbnz	r0, 80111e4 <__smakebuf_r+0x46>
 80111d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111d4:	059a      	lsls	r2, r3, #22
 80111d6:	d4ee      	bmi.n	80111b6 <__smakebuf_r+0x18>
 80111d8:	f023 0303 	bic.w	r3, r3, #3
 80111dc:	f043 0302 	orr.w	r3, r3, #2
 80111e0:	81a3      	strh	r3, [r4, #12]
 80111e2:	e7e2      	b.n	80111aa <__smakebuf_r+0xc>
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80111ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111ee:	81a3      	strh	r3, [r4, #12]
 80111f0:	9b01      	ldr	r3, [sp, #4]
 80111f2:	6020      	str	r0, [r4, #0]
 80111f4:	b15b      	cbz	r3, 801120e <__smakebuf_r+0x70>
 80111f6:	4630      	mov	r0, r6
 80111f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111fc:	f000 f81e 	bl	801123c <_isatty_r>
 8011200:	b128      	cbz	r0, 801120e <__smakebuf_r+0x70>
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	f023 0303 	bic.w	r3, r3, #3
 8011208:	f043 0301 	orr.w	r3, r3, #1
 801120c:	81a3      	strh	r3, [r4, #12]
 801120e:	89a3      	ldrh	r3, [r4, #12]
 8011210:	431d      	orrs	r5, r3
 8011212:	81a5      	strh	r5, [r4, #12]
 8011214:	e7cf      	b.n	80111b6 <__smakebuf_r+0x18>
	...

08011218 <_fstat_r>:
 8011218:	b538      	push	{r3, r4, r5, lr}
 801121a:	2300      	movs	r3, #0
 801121c:	4d06      	ldr	r5, [pc, #24]	@ (8011238 <_fstat_r+0x20>)
 801121e:	4604      	mov	r4, r0
 8011220:	4608      	mov	r0, r1
 8011222:	4611      	mov	r1, r2
 8011224:	602b      	str	r3, [r5, #0]
 8011226:	f7f1 fba1 	bl	800296c <_fstat>
 801122a:	1c43      	adds	r3, r0, #1
 801122c:	d102      	bne.n	8011234 <_fstat_r+0x1c>
 801122e:	682b      	ldr	r3, [r5, #0]
 8011230:	b103      	cbz	r3, 8011234 <_fstat_r+0x1c>
 8011232:	6023      	str	r3, [r4, #0]
 8011234:	bd38      	pop	{r3, r4, r5, pc}
 8011236:	bf00      	nop
 8011238:	20001968 	.word	0x20001968

0801123c <_isatty_r>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	2300      	movs	r3, #0
 8011240:	4d05      	ldr	r5, [pc, #20]	@ (8011258 <_isatty_r+0x1c>)
 8011242:	4604      	mov	r4, r0
 8011244:	4608      	mov	r0, r1
 8011246:	602b      	str	r3, [r5, #0]
 8011248:	f7f1 fb9f 	bl	800298a <_isatty>
 801124c:	1c43      	adds	r3, r0, #1
 801124e:	d102      	bne.n	8011256 <_isatty_r+0x1a>
 8011250:	682b      	ldr	r3, [r5, #0]
 8011252:	b103      	cbz	r3, 8011256 <_isatty_r+0x1a>
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	bd38      	pop	{r3, r4, r5, pc}
 8011258:	20001968 	.word	0x20001968

0801125c <_init>:
 801125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125e:	bf00      	nop
 8011260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011262:	bc08      	pop	{r3}
 8011264:	469e      	mov	lr, r3
 8011266:	4770      	bx	lr

08011268 <_fini>:
 8011268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126a:	bf00      	nop
 801126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801126e:	bc08      	pop	{r3}
 8011270:	469e      	mov	lr, r3
 8011272:	4770      	bx	lr
