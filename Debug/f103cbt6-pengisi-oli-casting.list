
f103cbt6-pengisi-oli-casting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001204c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  08012160  08012160  00013160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cfc  08012cfc  0001435c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012cfc  08012cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d04  08012d04  0001435c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d04  08012d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012d08  08012d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  08012d0c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001760  20000360  08013068  00014360  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac0  08013068  00014ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001435c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae96  00000000  00000000  00014385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af6  00000000  00000000  0002f21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a8  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9c9  00000000  00000000  00036a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000217fb  00000000  00000000  00054459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e7a  00000000  00000000  00075c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008304  00000000  00000000  0010cb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00114e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	08012144 	.word	0x08012144

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	08012144 	.word	0x08012144

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	@ 0x58
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8001188:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	4993      	ldr	r1, [pc, #588]	@ (800140c <HCSR04_Init+0x290>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a90      	ldr	r2, [pc, #576]	@ (8001410 <HCSR04_Init+0x294>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10c      	bne.n	80011ec <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b90      	ldr	r3, [pc, #576]	@ (8001414 <HCSR04_Init+0x298>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a8f      	ldr	r2, [pc, #572]	@ (8001414 <HCSR04_Init+0x298>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b8d      	ldr	r3, [pc, #564]	@ (8001414 <HCSR04_Init+0x298>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	e05e      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	4987      	ldr	r1, [pc, #540]	@ (800140c <HCSR04_Init+0x290>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a86      	ldr	r2, [pc, #536]	@ (8001418 <HCSR04_Init+0x29c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10c      	bne.n	800121c <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b84      	ldr	r3, [pc, #528]	@ (8001414 <HCSR04_Init+0x298>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a83      	ldr	r2, [pc, #524]	@ (8001414 <HCSR04_Init+0x298>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b81      	ldr	r3, [pc, #516]	@ (8001414 <HCSR04_Init+0x298>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	e046      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	497b      	ldr	r1, [pc, #492]	@ (800140c <HCSR04_Init+0x290>)
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a7b      	ldr	r2, [pc, #492]	@ (800141c <HCSR04_Init+0x2a0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10c      	bne.n	800124c <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b78      	ldr	r3, [pc, #480]	@ (8001414 <HCSR04_Init+0x298>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a77      	ldr	r2, [pc, #476]	@ (8001414 <HCSR04_Init+0x298>)
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <HCSR04_Init+0x298>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	e02e      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	496f      	ldr	r1, [pc, #444]	@ (800140c <HCSR04_Init+0x290>)
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a70      	ldr	r2, [pc, #448]	@ (8001420 <HCSR04_Init+0x2a4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10c      	bne.n	800127c <HCSR04_Init+0x100>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <HCSR04_Init+0x298>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a6b      	ldr	r2, [pc, #428]	@ (8001414 <HCSR04_Init+0x298>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <HCSR04_Init+0x298>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	e016      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4963      	ldr	r1, [pc, #396]	@ (800140c <HCSR04_Init+0x290>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a65      	ldr	r2, [pc, #404]	@ (8001424 <HCSR04_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10b      	bne.n	80012aa <HCSR04_Init+0x12e>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001292:	4b60      	ldr	r3, [pc, #384]	@ (8001414 <HCSR04_Init+0x298>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a5f      	ldr	r2, [pc, #380]	@ (8001414 <HCSR04_Init+0x298>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <HCSR04_Init+0x298>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4957      	ldr	r1, [pc, #348]	@ (800140c <HCSR04_Init+0x290>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3304      	adds	r3, #4
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2302      	movs	r3, #2
 80012c8:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	494f      	ldr	r1, [pc, #316]	@ (800140c <HCSR04_Init+0x290>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fe85 	bl	8003ff0 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4948      	ldr	r1, [pc, #288]	@ (800140c <HCSR04_Init+0x290>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3308      	adds	r3, #8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012fc:	484a      	ldr	r0, [pc, #296]	@ (8001428 <HCSR04_Init+0x2ac>)
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	3304      	adds	r3, #4
 800130a:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	493f      	ldr	r1, [pc, #252]	@ (800140c <HCSR04_Init+0x290>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3308      	adds	r3, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001322:	4841      	ldr	r0, [pc, #260]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4403      	add	r3, r0
 800132e:	3308      	adds	r3, #8
 8001330:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	493c      	ldr	r1, [pc, #240]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	3302      	adds	r3, #2
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4937      	ldr	r1, [pc, #220]	@ (8001428 <HCSR04_Init+0x2ac>)
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	331c      	adds	r3, #28
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	4932      	ldr	r1, [pc, #200]	@ (8001428 <HCSR04_Init+0x2ac>)
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3308      	adds	r3, #8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <HCSR04_Init+0x20a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	492d      	ldr	r1, [pc, #180]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3308      	adds	r3, #8
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4920      	ldr	r1, [pc, #128]	@ (800140c <HCSR04_Init+0x290>)
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	330c      	adds	r3, #12
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10a      	bne.n	80013b2 <HCSR04_Init+0x236>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	4922      	ldr	r1, [pc, #136]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3320      	adds	r3, #32
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e051      	b.n	8001456 <HCSR04_Init+0x2da>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	4915      	ldr	r1, [pc, #84]	@ (800140c <HCSR04_Init+0x290>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	330c      	adds	r3, #12
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d10a      	bne.n	80013de <HCSR04_Init+0x262>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4917      	ldr	r1, [pc, #92]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3320      	adds	r3, #32
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e03b      	b.n	8001456 <HCSR04_Init+0x2da>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	490a      	ldr	r1, [pc, #40]	@ (800140c <HCSR04_Init+0x290>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	330c      	adds	r3, #12
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d11b      	bne.n	800142c <HCSR04_Init+0x2b0>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	490c      	ldr	r1, [pc, #48]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3320      	adds	r3, #32
 8001404:	2204      	movs	r2, #4
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e025      	b.n	8001456 <HCSR04_Init+0x2da>
 800140a:	bf00      	nop
 800140c:	0801283c 	.word	0x0801283c
 8001410:	40010800 	.word	0x40010800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40011800 	.word	0x40011800
 8001428:	2000037c 	.word	0x2000037c
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4941      	ldr	r1, [pc, #260]	@ (8001534 <HCSR04_Init+0x3b8>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d109      	bne.n	8001456 <HCSR04_Init+0x2da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	493c      	ldr	r1, [pc, #240]	@ (8001538 <HCSR04_Init+0x3bc>)
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3320      	adds	r3, #32
 8001452:	2208      	movs	r2, #8
 8001454:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4936      	ldr	r1, [pc, #216]	@ (8001534 <HCSR04_Init+0x3b8>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4932      	ldr	r1, [pc, #200]	@ (8001538 <HCSR04_Init+0x3bc>)
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	492b      	ldr	r1, [pc, #172]	@ (8001538 <HCSR04_Init+0x3bc>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3308      	adds	r3, #8
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f006 fac8 	bl	8007a40 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80014b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ba:	4619      	mov	r1, r3
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f006 fe51 	bl	8008164 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f006 fb5e 	bl	8007b84 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80014d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014d4:	4619      	mov	r1, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f007 f9a2 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigIC.ICFilter = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4911      	ldr	r1, [pc, #68]	@ (8001534 <HCSR04_Init+0x3b8>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	330c      	adds	r3, #12
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4619      	mov	r1, r3
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f006 fd91 	bl	800802c <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f006 fae8 	bl	8007ae0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <HCSR04_Init+0x3b8>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	330c      	adds	r3, #12
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f006 fb85 	bl	8007c34 <HAL_TIM_IC_Start_IT>
}
 800152a:	bf00      	nop
 800152c:	3758      	adds	r7, #88	@ 0x58
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	0801283c 	.word	0x0801283c
 8001538:	2000037c 	.word	0x2000037c

0800153c <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e023      	b.n	8001596 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <HCSR04_TMR_OVF_ISR+0x6c>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4403      	add	r3, r0
 8001560:	3308      	adds	r3, #8
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4299      	cmp	r1, r3
 8001566:	d113      	bne.n	8001590 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	4910      	ldr	r1, [pc, #64]	@ (80015ac <HCSR04_TMR_OVF_ISR+0x70>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3302      	adds	r3, #2
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b298      	uxth	r0, r3
 800157e:	490b      	ldr	r1, [pc, #44]	@ (80015ac <HCSR04_TMR_OVF_ISR+0x70>)
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3302      	adds	r3, #2
 800158c:	4602      	mov	r2, r0
 800158e:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	3301      	adds	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d9d8      	bls.n	800154e <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	0801283c 	.word	0x0801283c
 80015ac:	2000037c 	.word	0x2000037c

080015b0 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e22a      	b.n	8001a1c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	486b      	ldr	r0, [pc, #428]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3308      	adds	r3, #8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4299      	cmp	r1, r3
 80015de:	f040 821a 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f19      	ldrb	r1, [r3, #28]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	4865      	ldr	r0, [pc, #404]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	3320      	adds	r3, #32
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4299      	cmp	r1, r3
 80015fa:	f040 820c 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	495f      	ldr	r1, [pc, #380]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80b8 	bne.w	8001784 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	4959      	ldr	r1, [pc, #356]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	330c      	adds	r3, #12
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bfc      	ldrb	r4, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f006 fe62 	bl	80082f4 <HAL_TIM_ReadCapturedValue>
 8001630:	4602      	mov	r2, r0
 8001632:	4953      	ldr	r1, [pc, #332]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001634:	4623      	mov	r3, r4
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4423      	add	r3, r4
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	494e      	ldr	r1, [pc, #312]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	4949      	ldr	r1, [pc, #292]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	330c      	adds	r3, #12
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d108      	bne.n	800167c <HCSR04_TMR_IC_ISR+0xcc>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020a 	bic.w	r2, r2, #10
 8001678:	621a      	str	r2, [r3, #32]
 800167a:	e02f      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	493f      	ldr	r1, [pc, #252]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	330c      	adds	r3, #12
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d108      	bne.n	80016a4 <HCSR04_TMR_IC_ISR+0xf4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e01b      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	4935      	ldr	r1, [pc, #212]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	330c      	adds	r3, #12
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d108      	bne.n	80016cc <HCSR04_TMR_IC_ISR+0x11c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e007      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	4927      	ldr	r1, [pc, #156]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	330c      	adds	r3, #12
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HCSR04_TMR_IC_ISR+0x154>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0202 	orr.w	r2, r2, #2
 8001700:	621a      	str	r2, [r3, #32]
 8001702:	e02f      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	491d      	ldr	r1, [pc, #116]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	330c      	adds	r3, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d108      	bne.n	800172c <HCSR04_TMR_IC_ISR+0x17c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	e01b      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	4913      	ldr	r1, [pc, #76]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d108      	bne.n	8001754 <HCSR04_TMR_IC_ISR+0x1a4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	e007      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001762:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	4906      	ldr	r1, [pc, #24]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3302      	adds	r3, #2
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	e14d      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 800177a:	bf00      	nop
 800177c:	0801283c 	.word	0x0801283c
 8001780:	2000037c 	.word	0x2000037c
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	49ac      	ldr	r1, [pc, #688]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	f040 813e 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	49a7      	ldr	r1, [pc, #668]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3308      	adds	r3, #8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	49a2      	ldr	r1, [pc, #648]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c6:	489c      	ldr	r0, [pc, #624]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4403      	add	r3, r0
 80017d2:	3308      	adds	r3, #8
 80017d4:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	4998      	ldr	r1, [pc, #608]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	330c      	adds	r3, #12
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	7bfc      	ldrb	r4, [r7, #15]
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f006 fd81 	bl	80082f4 <HAL_TIM_ReadCapturedValue>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4990      	ldr	r1, [pc, #576]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80017f6:	4623      	mov	r3, r4
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4423      	add	r3, r4
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3310      	adds	r3, #16
 8001802:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	498c      	ldr	r1, [pc, #560]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3310      	adds	r3, #16
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	4887      	ldr	r0, [pc, #540]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4403      	add	r3, r0
 8001824:	3302      	adds	r3, #2
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	461c      	mov	r4, r3
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	4882      	ldr	r0, [pc, #520]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4403      	add	r3, r0
 8001838:	3308      	adds	r3, #8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	fb04 f303 	mul.w	r3, r4, r3
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	4419      	add	r1, r3
 8001846:	487c      	ldr	r0, [pc, #496]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4403      	add	r3, r0
 8001852:	3310      	adds	r3, #16
 8001854:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	4977      	ldr	r1, [pc, #476]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3310      	adds	r3, #16
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	4873      	ldr	r0, [pc, #460]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4403      	add	r3, r0
 8001876:	330c      	adds	r3, #12
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	1ac9      	subs	r1, r1, r3
 800187e:	486e      	ldr	r0, [pc, #440]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4403      	add	r3, r0
 800188a:	3314      	adds	r3, #20
 800188c:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	4969      	ldr	r1, [pc, #420]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3314      	adds	r3, #20
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fd9f 	bl	80003e4 <__aeabi_ui2d>
 80018a6:	a362      	add	r3, pc, #392	@ (adr r3, 8001a30 <HCSR04_TMR_IC_ISR+0x480>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe14 	bl	80004d8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	4960      	ldr	r1, [pc, #384]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3310      	adds	r3, #16
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd86 	bl	80003e4 <__aeabi_ui2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe ff24 	bl	800072c <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	7bfc      	ldrb	r4, [r7, #15]
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f8eb 	bl	8000ac8 <__aeabi_d2f>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4950      	ldr	r1, [pc, #320]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80018f6:	4623      	mov	r3, r4
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4423      	add	r3, r4
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3318      	adds	r3, #24
 8001902:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	494c      	ldr	r1, [pc, #304]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	4948      	ldr	r1, [pc, #288]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	330c      	adds	r3, #12
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <HCSR04_TMR_IC_ISR+0x38e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a1a      	ldr	r2, [r3, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	621a      	str	r2, [r3, #32]
 800193c:	e02f      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	493e      	ldr	r1, [pc, #248]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	330c      	adds	r3, #12
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d108      	bne.n	8001966 <HCSR04_TMR_IC_ISR+0x3b6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	e01b      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	4934      	ldr	r1, [pc, #208]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	330c      	adds	r3, #12
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d108      	bne.n	800198e <HCSR04_TMR_IC_ISR+0x3de>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	e007      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800199c:	6213      	str	r3, [r2, #32]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	4926      	ldr	r1, [pc, #152]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HCSR04_TMR_IC_ISR+0x412>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a12      	ldr	r2, [r2, #32]
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	e029      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	491d      	ldr	r1, [pc, #116]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	330c      	adds	r3, #12
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d106      	bne.n	80019e6 <HCSR04_TMR_IC_ISR+0x436>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e017      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	4914      	ldr	r1, [pc, #80]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	330c      	adds	r3, #12
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d106      	bne.n	8001a0a <HCSR04_TMR_IC_ISR+0x45a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e005      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	f67f add1 	bls.w	80015c6 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	b020c49c 	.word	0xb020c49c
 8001a34:	3f916872 	.word	0x3f916872
 8001a38:	2000037c 	.word	0x2000037c
 8001a3c:	0801283c 	.word	0x0801283c

08001a40 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <HCSR04_Read+0x28>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3318      	adds	r3, #24
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000037c 	.word	0x2000037c

08001a6c <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4923      	ldr	r1, [pc, #140]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	491f      	ldr	r1, [pc, #124]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3304      	adds	r3, #4
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f002 fc2c 	bl	80042f8 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <HCSR04_Trigger+0xa0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HCSR04_Trigger+0xa4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001b14 <HCSR04_Trigger+0xa8>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0c9b      	lsrs	r3, r3, #18
 8001ab2:	005a      	lsls	r2, r3, #1
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HCSR04_Trigger+0xa4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <HCSR04_Trigger+0xa8>)
 8001aba:	fba1 1303 	umull	r1, r3, r1, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HCSR04_Trigger+0xa0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f8      	bhi.n	8001ac6 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3304      	adds	r3, #4
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	4619      	mov	r1, r3
 8001afa:	f002 fbfd 	bl	80042f8 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0801283c 	.word	0x0801283c
 8001b0c:	e000e010 	.word	0xe000e010
 8001b10:	20000004 	.word	0x20000004
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <lcd_send_cmd>:
#define LCD_I2C_ADDR 0x4E // Alamat umum adalah 0x27 << 1 atau 0x3F << 1. Cek datasheet.

I2C_HandleTypeDef *i2c_handle;

void lcd_send_cmd(char cmd)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f023 030f 	bic.w	r3, r3, #15
 8001b28:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // en=1, rs=0
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f043 030c 	orr.w	r3, r3, #12
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // en=0, rs=0
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // en=1, rs=0
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	f043 030c 	orr.w	r3, r3, #12
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // en=0, rs=0
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <lcd_send_cmd+0x5c>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f107 0208 	add.w	r2, r7, #8
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2304      	movs	r3, #4
 8001b66:	214e      	movs	r1, #78	@ 0x4e
 8001b68:	f002 fd22 	bl	80045b0 <HAL_I2C_Master_Transmit>
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200003e8 	.word	0x200003e8

08001b78 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f023 030f 	bic.w	r3, r3, #15
 8001b88:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // en=1, rs=1
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f043 030d 	orr.w	r3, r3, #13
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // en=0, rs=1
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f043 0309 	orr.w	r3, r3, #9
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // en=1, rs=1
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	f043 030d 	orr.w	r3, r3, #13
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // en=0, rs=1
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	f043 0309 	orr.w	r3, r3, #9
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <lcd_send_data+0x5c>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	2364      	movs	r3, #100	@ 0x64
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	214e      	movs	r1, #78	@ 0x4e
 8001bc8:	f002 fcf2 	bl	80045b0 <HAL_I2C_Master_Transmit>
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200003e8 	.word	0x200003e8

08001bd8 <lcd_clear>:

void lcd_clear(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff9b 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(2);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f001 fed2 	bl	800398c <HAL_Delay>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <lcd_set_cursor>:

void lcd_set_cursor(int row, int col)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    uint8_t cursor_addr;
    switch (row)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <lcd_set_cursor+0x18>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <lcd_set_cursor+0x22>
 8001c02:	e009      	b.n	8001c18 <lcd_set_cursor+0x2c>
    {
    case 0:
        cursor_addr = 0x80 + col;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3b80      	subs	r3, #128	@ 0x80
 8001c0a:	73fb      	strb	r3, [r7, #15]
        break;
 8001c0c:	e008      	b.n	8001c20 <lcd_set_cursor+0x34>
    case 1:
        cursor_addr = 0xC0 + col;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b40      	subs	r3, #64	@ 0x40
 8001c14:	73fb      	strb	r3, [r7, #15]
        break;
 8001c16:	e003      	b.n	8001c20 <lcd_set_cursor+0x34>
    default:
        cursor_addr = 0x80 + col;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3b80      	subs	r3, #128	@ 0x80
 8001c1e:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(cursor_addr);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff78 	bl	8001b18 <lcd_send_cmd>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <lcd_init+0x84>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001c3e:	2032      	movs	r0, #50	@ 0x32
 8001c40:	f001 fea4 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c44:	2030      	movs	r0, #48	@ 0x30
 8001c46:	f7ff ff67 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(5);
 8001c4a:	2005      	movs	r0, #5
 8001c4c:	f001 fe9e 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c50:	2030      	movs	r0, #48	@ 0x30
 8001c52:	f7ff ff61 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f001 fe98 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c5c:	2030      	movs	r0, #48	@ 0x30
 8001c5e:	f7ff ff5b 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f001 fe92 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x20);
 8001c68:	2020      	movs	r0, #32
 8001c6a:	f7ff ff55 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(10);
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f001 fe8c 	bl	800398c <HAL_Delay>

    lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001c74:	2028      	movs	r0, #40	@ 0x28
 8001c76:	f7ff ff4f 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f001 fe86 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8001c80:	2008      	movs	r0, #8
 8001c82:	f7ff ff49 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f001 fe80 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x01); // clear display
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff ff43 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(2);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f001 fe7a 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c98:	2006      	movs	r0, #6
 8001c9a:	f7ff ff3d 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f001 fe74 	bl	800398c <HAL_Delay>
    lcd_send_cmd(0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001ca4:	200c      	movs	r0, #12
 8001ca6:	f7ff ff37 	bl	8001b18 <lcd_send_cmd>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200003e8 	.word	0x200003e8

08001cb8 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    while (*str)
 8001cc0:	e006      	b.n	8001cd0 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff54 	bl	8001b78 <lcd_send_data>
    while (*str)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f4      	bne.n	8001cc2 <lcd_send_string+0xa>
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cea:	f001 fded 	bl	80038c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cee:	f000 f8b3 	bl	8001e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf2:	f000 fb0f 	bl	8002314 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cf6:	f000 f90f 	bl	8001f18 <MX_I2C1_Init>
  MX_RTC_Init();
 8001cfa:	f000 f93b 	bl	8001f74 <MX_RTC_Init>
  MX_SPI1_Init();
 8001cfe:	f000 f983 	bl	8002008 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001d02:	f009 f993 	bl	800b02c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001d06:	f00a fdb9 	bl	800c87c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001d0a:	f000 f9b3 	bl	8002074 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d0e:	f000 fa21 	bl	8002154 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d12:	f000 fa8f 	bl	8002234 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#if GUNAKAN_LCD
  lcd_init(&hi2c1); // Inisialisasi LCD I2C
 8001d16:	4840      	ldr	r0, [pc, #256]	@ (8001e18 <main+0x134>)
 8001d18:	f7ff ff8a 	bl	8001c30 <lcd_init>
  lcd_clear();      // Bersihkan LCD
 8001d1c:	f7ff ff5c 	bl	8001bd8 <lcd_clear>

  // pesan awal di LCD
  lcd_set_cursor(0, 0);
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ff62 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "hai dunia");
 8001d28:	493c      	ldr	r1, [pc, #240]	@ (8001e1c <main+0x138>)
 8001d2a:	483d      	ldr	r0, [pc, #244]	@ (8001e20 <main+0x13c>)
 8001d2c:	f00c f96e 	bl	800e00c <siprintf>
  lcd_send_string(lcd_buffer);
 8001d30:	483b      	ldr	r0, [pc, #236]	@ (8001e20 <main+0x13c>)
 8001d32:	f7ff ffc1 	bl	8001cb8 <lcd_send_string>
#endif

  // inisialisasi sensor ultrasonik
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8001d36:	493b      	ldr	r1, [pc, #236]	@ (8001e24 <main+0x140>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fa1f 	bl	800117c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR2, &htim3);
 8001d3e:	493a      	ldr	r1, [pc, #232]	@ (8001e28 <main+0x144>)
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fa1b 	bl	800117c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR3, &htim4);
 8001d46:	4939      	ldr	r1, [pc, #228]	@ (8001e2c <main+0x148>)
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fa17 	bl	800117c <HCSR04_Init>

  // Muat parameter dari Flash saat startup
  Load_Parameters_From_Flash();
 8001d4e:	f000 fc4d 	bl	80025ec <Load_Parameters_From_Flash>

  // Beri sedikit waktu agar USB siap
  HAL_Delay(2000);
 8001d52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d56:	f001 fe19 	bl	800398c <HAL_Delay>
  VCP_printf("\r\nSistem Kontrol Drum Siap. Ketik '$H' untuk bantuan.\r\n");
 8001d5a:	4835      	ldr	r0, [pc, #212]	@ (8001e30 <main+0x14c>)
 8001d5c:	f000 fb94 	bl	8002488 <VCP_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fe6d 	bl	8001a40 <HCSR04_Read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a32      	ldr	r2, [pc, #200]	@ (8001e34 <main+0x150>)
 8001d6a:	6013      	str	r3, [r2, #0]
    Distance2 = HCSR04_Read(HCSR04_SENSOR2);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fe67 	bl	8001a40 <HCSR04_Read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a30      	ldr	r2, [pc, #192]	@ (8001e38 <main+0x154>)
 8001d76:	6013      	str	r3, [r2, #0]
    Distance3 = HCSR04_Read(HCSR04_SENSOR3);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fe61 	bl	8001a40 <HCSR04_Read>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a2e      	ldr	r2, [pc, #184]	@ (8001e3c <main+0x158>)
 8001d82:	6013      	str	r3, [r2, #0]

    uint32_t current_time = HAL_GetTick();
 8001d84:	f001 fdf8 	bl	8003978 <HAL_GetTick>
 8001d88:	6078      	str	r0, [r7, #4]

    // --- Task-like functions execution ---

    // Run HCSR04_Trigger every 100ms
    if (current_time - last_trig_time >= trig_time)
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <main+0x15c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <main+0x160>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d323      	bcc.n	8001de2 <main+0xfe>
    {

      if (counter_trig == 1)
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <main+0x164>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d103      	bne.n	8001daa <main+0xc6>
        HCSR04_Trigger(HCSR04_SENSOR1);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff fe62 	bl	8001a6c <HCSR04_Trigger>
 8001da8:	e012      	b.n	8001dd0 <main+0xec>
      else if (counter_trig == 2)
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <main+0x164>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d103      	bne.n	8001dba <main+0xd6>
        HCSR04_Trigger(HCSR04_SENSOR2);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff fe5a 	bl	8001a6c <HCSR04_Trigger>
 8001db8:	e00a      	b.n	8001dd0 <main+0xec>
      else if (counter_trig == 3)
 8001dba:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <main+0x164>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d103      	bne.n	8001dca <main+0xe6>
        HCSR04_Trigger(HCSR04_SENSOR3);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff fe52 	bl	8001a6c <HCSR04_Trigger>
 8001dc8:	e002      	b.n	8001dd0 <main+0xec>
      else
        counter_trig = 0;
 8001dca:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <main+0x164>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

      counter_trig++;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <main+0x164>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <main+0x164>)
 8001dda:	701a      	strb	r2, [r3, #0]
      last_trig_time = current_time;
 8001ddc:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <main+0x15c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
    }

    // Cek apakah ada perintah baru dari USB VCP untuk diproses
    if (g_command_ready)
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <main+0x168>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00d      	beq.n	8001e08 <main+0x124>
    {
      Process_Command(g_usb_rx_buffer);
 8001dec:	4818      	ldr	r0, [pc, #96]	@ (8001e50 <main+0x16c>)
 8001dee:	f000 fc27 	bl	8002640 <Process_Command>
      // Reset buffer dan flag
      memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	2100      	movs	r1, #0
 8001df6:	4816      	ldr	r0, [pc, #88]	@ (8001e50 <main+0x16c>)
 8001df8:	f00c f9d8 	bl	800e1ac <memset>
      g_rx_index = 0;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <main+0x170>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
      g_command_ready = 0;
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <main+0x168>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
    }

    Run_Control_Logic();
 8001e08:	f000 ff96 	bl	8002d38 <Run_Control_Logic>

#if GUNAKAN_LCD == 1
    Update_LCD_Display();
 8001e0c:	f001 f99e 	bl	800314c <Update_LCD_Display>
#endif

    HAL_Delay(100);
 8001e10:	2064      	movs	r0, #100	@ 0x64
 8001e12:	f001 fdbb 	bl	800398c <HAL_Delay>
  {
 8001e16:	e7a3      	b.n	8001d60 <main+0x7c>
 8001e18:	200003ec 	.word	0x200003ec
 8001e1c:	08012160 	.word	0x08012160
 8001e20:	20000688 	.word	0x20000688
 8001e24:	200004ac 	.word	0x200004ac
 8001e28:	200004f4 	.word	0x200004f4
 8001e2c:	2000053c 	.word	0x2000053c
 8001e30:	0801216c 	.word	0x0801216c
 8001e34:	20000764 	.word	0x20000764
 8001e38:	20000768 	.word	0x20000768
 8001e3c:	2000076c 	.word	0x2000076c
 8001e40:	20000770 	.word	0x20000770
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000774 	.word	0x20000774
 8001e4c:	20000760 	.word	0x20000760
 8001e50:	200006dc 	.word	0x200006dc
 8001e54:	2000075c 	.word	0x2000075c

08001e58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b094      	sub	sp, #80	@ 0x50
 8001e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e62:	2228      	movs	r2, #40	@ 0x28
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00c f9a0 	bl	800e1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001e88:	2309      	movs	r3, #9
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e96:	2301      	movs	r3, #1
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001ea8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fc40 	bl	8006738 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001ebe:	f001 f9f5 	bl	80032ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 feac 	bl	8006c3c <HAL_RCC_ClockConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eea:	f001 f9df 	bl	80032ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 8001eee:	2311      	movs	r3, #17
 8001ef0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ef8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001efc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 f829 	bl	8006f58 <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001f0c:	f001 f9ce 	bl	80032ac <Error_Handler>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3750      	adds	r7, #80	@ 0x50
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f1e:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <MX_I2C1_Init+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <MX_I2C1_Init+0x58>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <MX_I2C1_Init+0x50>)
 8001f56:	f002 f9e7 	bl	8004328 <HAL_I2C_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f60:	f001 f9a4 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200003ec 	.word	0x200003ec
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	000186a0 	.word	0x000186a0

08001f74 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	460a      	mov	r2, r1
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	460a      	mov	r2, r1
 8001f84:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <MX_RTC_Init+0x8c>)
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002004 <MX_RTC_Init+0x90>)
 8001f8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <MX_RTC_Init+0x8c>)
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295
 8001f96:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <MX_RTC_Init+0x8c>)
 8001f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f9e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fa0:	4817      	ldr	r0, [pc, #92]	@ (8002000 <MX_RTC_Init+0x8c>)
 8001fa2:	f005 f945 	bl	8007230 <HAL_RTC_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001fac:	f001 f97e 	bl	80032ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480f      	ldr	r0, [pc, #60]	@ (8002000 <MX_RTC_Init+0x8c>)
 8001fc4:	f005 f9c0 	bl	8007348 <HAL_RTC_SetTime>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001fce:	f001 f96d 	bl	80032ac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_RTC_Init+0x8c>)
 8001fea:	f005 fa45 	bl	8007478 <HAL_RTC_SetDate>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001ff4:	f001 f95a 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000440 	.word	0x20000440
 8002004:	40002800 	.word	0x40002800

08002008 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <MX_SPI1_Init+0x64>)
 800200e:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <MX_SPI1_Init+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <MX_SPI1_Init+0x64>)
 8002014:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <MX_SPI1_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <MX_SPI1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_SPI1_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_SPI1_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <MX_SPI1_Init+0x64>)
 8002034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002038:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <MX_SPI1_Init+0x64>)
 800203c:	2208      	movs	r2, #8
 800203e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <MX_SPI1_Init+0x64>)
 8002054:	220a      	movs	r2, #10
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	@ (800206c <MX_SPI1_Init+0x64>)
 800205a:	f005 fc6d 	bl	8007938 <HAL_SPI_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002064:	f001 f922 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000454 	.word	0x20000454
 8002070:	40013000 	.word	0x40013000

08002074 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002092:	463b      	mov	r3, r7
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800209e:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020b2:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b25      	ldr	r3, [pc, #148]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c6:	4822      	ldr	r0, [pc, #136]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020c8:	f005 fcba 	bl	8007a40 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80020d2:	f001 f8eb 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	4619      	mov	r1, r3
 80020e2:	481b      	ldr	r0, [pc, #108]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020e4:	f006 f83e 	bl	8008164 <HAL_TIM_ConfigClockSource>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020ee:	f001 f8dd 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020f2:	4817      	ldr	r0, [pc, #92]	@ (8002150 <MX_TIM2_Init+0xdc>)
 80020f4:	f005 fd46 	bl	8007b84 <HAL_TIM_IC_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020fe:	f001 f8d5 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4619      	mov	r1, r3
 8002110:	480f      	ldr	r0, [pc, #60]	@ (8002150 <MX_TIM2_Init+0xdc>)
 8002112:	f006 fb85 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800211c:	f001 f8c6 	bl	80032ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002120:	2300      	movs	r3, #0
 8002122:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002124:	2301      	movs	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	@ (8002150 <MX_TIM2_Init+0xdc>)
 8002138:	f005 ff78 	bl	800802c <HAL_TIM_IC_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002142:	f001 f8b3 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	@ 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200004ac 	.word	0x200004ac

08002154 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215a:	f107 0318 	add.w	r3, r7, #24
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800217e:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <MX_TIM3_Init+0xd8>)
 8002180:	4a2b      	ldr	r2, [pc, #172]	@ (8002230 <MX_TIM3_Init+0xdc>)
 8002182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002184:	4b29      	ldr	r3, [pc, #164]	@ (800222c <MX_TIM3_Init+0xd8>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b28      	ldr	r3, [pc, #160]	@ (800222c <MX_TIM3_Init+0xd8>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002190:	4b26      	ldr	r3, [pc, #152]	@ (800222c <MX_TIM3_Init+0xd8>)
 8002192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b24      	ldr	r3, [pc, #144]	@ (800222c <MX_TIM3_Init+0xd8>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b23      	ldr	r3, [pc, #140]	@ (800222c <MX_TIM3_Init+0xd8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021a4:	4821      	ldr	r0, [pc, #132]	@ (800222c <MX_TIM3_Init+0xd8>)
 80021a6:	f005 fc4b 	bl	8007a40 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80021b0:	f001 f87c 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	4619      	mov	r1, r3
 80021c0:	481a      	ldr	r0, [pc, #104]	@ (800222c <MX_TIM3_Init+0xd8>)
 80021c2:	f005 ffcf 	bl	8008164 <HAL_TIM_ConfigClockSource>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021cc:	f001 f86e 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80021d0:	4816      	ldr	r0, [pc, #88]	@ (800222c <MX_TIM3_Init+0xd8>)
 80021d2:	f005 fcd7 	bl	8007b84 <HAL_TIM_IC_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021dc:	f001 f866 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4619      	mov	r1, r3
 80021ee:	480f      	ldr	r0, [pc, #60]	@ (800222c <MX_TIM3_Init+0xd8>)
 80021f0:	f006 fb16 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80021fa:	f001 f857 	bl	80032ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002202:	2301      	movs	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	@ (800222c <MX_TIM3_Init+0xd8>)
 8002216:	f005 ff09 	bl	800802c <HAL_TIM_IC_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002220:	f001 f844 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	@ 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200004f4 	.word	0x200004f4
 8002230:	40000400 	.word	0x40000400

08002234 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223a:	f107 0318 	add.w	r3, r7, #24
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800225e:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <MX_TIM4_Init+0xd8>)
 8002260:	4a2b      	ldr	r2, [pc, #172]	@ (8002310 <MX_TIM4_Init+0xdc>)
 8002262:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002264:	4b29      	ldr	r3, [pc, #164]	@ (800230c <MX_TIM4_Init+0xd8>)
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b28      	ldr	r3, [pc, #160]	@ (800230c <MX_TIM4_Init+0xd8>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002270:	4b26      	ldr	r3, [pc, #152]	@ (800230c <MX_TIM4_Init+0xd8>)
 8002272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002276:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002278:	4b24      	ldr	r3, [pc, #144]	@ (800230c <MX_TIM4_Init+0xd8>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b23      	ldr	r3, [pc, #140]	@ (800230c <MX_TIM4_Init+0xd8>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002284:	4821      	ldr	r0, [pc, #132]	@ (800230c <MX_TIM4_Init+0xd8>)
 8002286:	f005 fbdb 	bl	8007a40 <HAL_TIM_Base_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002290:	f001 f80c 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002298:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	4619      	mov	r1, r3
 80022a0:	481a      	ldr	r0, [pc, #104]	@ (800230c <MX_TIM4_Init+0xd8>)
 80022a2:	f005 ff5f 	bl	8008164 <HAL_TIM_ConfigClockSource>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80022ac:	f000 fffe 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80022b0:	4816      	ldr	r0, [pc, #88]	@ (800230c <MX_TIM4_Init+0xd8>)
 80022b2:	f005 fc67 	bl	8007b84 <HAL_TIM_IC_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80022bc:	f000 fff6 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4619      	mov	r1, r3
 80022ce:	480f      	ldr	r0, [pc, #60]	@ (800230c <MX_TIM4_Init+0xd8>)
 80022d0:	f006 faa6 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80022da:	f000 ffe7 	bl	80032ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022e2:	2301      	movs	r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	@ (800230c <MX_TIM4_Init+0xd8>)
 80022f6:	f005 fe99 	bl	800802c <HAL_TIM_IC_ConfigChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002300:	f000 ffd4 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	@ 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000053c 	.word	0x2000053c
 8002310:	40000800 	.word	0x40000800

08002314 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002328:	4b2a      	ldr	r3, [pc, #168]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a29      	ldr	r2, [pc, #164]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b27      	ldr	r3, [pc, #156]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a23      	ldr	r2, [pc, #140]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <MX_GPIO_Init+0xc0>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin | USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin | TRIG_1_Pin | TRIG_2_Pin | TRIG_3_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	f24f 01ad 	movw	r1, #61613	@ 0xf0ad
 800238e:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <MX_GPIO_Init+0xc4>)
 8002390:	f001 ffb2 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <MX_GPIO_Init+0xc8>)
 80023a8:	f001 fe22 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin USER_LED_Pin LED_GREEN_Pin LED_RED_Pin
                           POMPA_BA_Pin POMPA_CB_Pin TRIG_1_Pin TRIG_2_Pin
                           TRIG_3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin | USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin | TRIG_1_Pin | TRIG_2_Pin | TRIG_3_Pin;
 80023ac:	f24f 03ad 	movw	r3, #61613	@ 0xf0ad
 80023b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4619      	mov	r1, r3
 80023c4:	4804      	ldr	r0, [pc, #16]	@ (80023d8 <MX_GPIO_Init+0xc4>)
 80023c6:	f001 fe13 	bl	8003ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	40010800 	.word	0x40010800

080023e0 <calculate_moving_average>:

/* USER CODE BEGIN 4 */
// kalkukasi moving average
float calculate_moving_average(float *buffer, uint8_t size, uint8_t is_full)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	70bb      	strb	r3, [r7, #2]
  float sum = 0.0f;
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint8_t count = is_full ? size : buffer_index_1; // Gunakan jumlah data yang ada
 80023f6:	78bb      	ldrb	r3, [r7, #2]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <calculate_moving_average+0x20>
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	e001      	b.n	8002404 <calculate_moving_average+0x24>
 8002400:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <calculate_moving_average+0x78>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	73fb      	strb	r3, [r7, #15]

  if (count == 0)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <calculate_moving_average+0x32>
    return 0.0f;
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e01e      	b.n	8002450 <calculate_moving_average+0x70>

  for (int i = 0; i < count; i++)
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e00d      	b.n	8002434 <calculate_moving_average+0x54>
  {
    sum += buffer[i];
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f7fe fba5 	bl	8000b74 <__addsf3>
 800242a:	4603      	mov	r3, r0
 800242c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < count; i++)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	3301      	adds	r3, #1
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbed      	blt.n	8002418 <calculate_moving_average+0x38>
  }
  return sum / count;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fc4c 	bl	8000cdc <__aeabi_i2f>
 8002444:	4603      	mov	r3, r0
 8002446:	4619      	mov	r1, r3
 8002448:	6978      	ldr	r0, [r7, #20]
 800244a:	f7fe fd4f 	bl	8000eec <__aeabi_fdiv>
 800244e:	4603      	mov	r3, r0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000680 	.word	0x20000680

0800245c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_IC_ISR(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff f8a3 	bl	80015b0 <HCSR04_TMR_IC_ISR>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_OVF_ISR(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f85e 	bl	800153c <HCSR04_TMR_OVF_ISR>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <VCP_printf>:

/**
 * @brief Mengirim string terformat melalui USB VCP.
 */
void VCP_printf(const char *format, ...)
{
 8002488:	b40f      	push	{r0, r1, r2, r3}
 800248a:	b580      	push	{r7, lr}
 800248c:	b0a2      	sub	sp, #136	@ 0x88
 800248e:	af00      	add	r7, sp, #0
  char buf[126];
  va_list args;
  va_start(args, format);
 8002490:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002494:	607b      	str	r3, [r7, #4]
  vsnprintf(buf, sizeof(buf), format, args);
 8002496:	f107 0008 	add.w	r0, r7, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024a0:	217e      	movs	r1, #126	@ 0x7e
 80024a2:	f00b fe75 	bl	800e190 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe50 	bl	8000150 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00a faa2 	bl	800ca04 <CDC_Transmit_FS>
}
 80024c0:	bf00      	nop
 80024c2:	3788      	adds	r7, #136	@ 0x88
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ca:	b004      	add	sp, #16
 80024cc:	4770      	bx	lr
	...

080024d0 <Set_Default_Parameters>:

/**
 * @brief Mengatur parameter ke nilai default.
 */
void Set_Default_Parameters(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  g_params.magic_number = FLASH_MAGIC_NUMBER;
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024d6:	4a15      	ldr	r2, [pc, #84]	@ (800252c <Set_Default_Parameters+0x5c>)
 80024d8:	601a      	str	r2, [r3, #0]
  g_params.tinggi_A = 100.0f;
 80024da:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <Set_Default_Parameters+0x60>)
 80024de:	605a      	str	r2, [r3, #4]
  g_params.ambang_bawah_A = 25.0f;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <Set_Default_Parameters+0x64>)
 80024e4:	609a      	str	r2, [r3, #8]
  g_params.target_penuh_A = 95.0f;
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024e8:	4a13      	ldr	r2, [pc, #76]	@ (8002538 <Set_Default_Parameters+0x68>)
 80024ea:	60da      	str	r2, [r3, #12]
  g_params.tinggi_B = 150.0f;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024ee:	4a13      	ldr	r2, [pc, #76]	@ (800253c <Set_Default_Parameters+0x6c>)
 80024f0:	611a      	str	r2, [r3, #16]
  g_params.ambang_bawah_B = 25.0f;
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002534 <Set_Default_Parameters+0x64>)
 80024f6:	615a      	str	r2, [r3, #20]
  g_params.target_penuh_B = 95.0f;
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <Set_Default_Parameters+0x58>)
 80024fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002538 <Set_Default_Parameters+0x68>)
 80024fc:	619a      	str	r2, [r3, #24]
  g_params.tinggi_C = 120.0f;
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <Set_Default_Parameters+0x58>)
 8002500:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <Set_Default_Parameters+0x70>)
 8002502:	61da      	str	r2, [r3, #28]
  g_params.ambang_bawah_C = 25.0f;
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <Set_Default_Parameters+0x58>)
 8002506:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <Set_Default_Parameters+0x64>)
 8002508:	621a      	str	r2, [r3, #32]
  g_params.target_penuh_C = 95.0f;
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <Set_Default_Parameters+0x58>)
 800250c:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <Set_Default_Parameters+0x68>)
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24
  g_params.sumber_kosong = 1.0f;
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <Set_Default_Parameters+0x58>)
 8002512:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
  g_params.moving_avg_size = 20; // Nilai default 5
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <Set_Default_Parameters+0x58>)
 800251a:	2214      	movs	r2, #20
 800251c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	200006ac 	.word	0x200006ac
 800252c:	deadbeef 	.word	0xdeadbeef
 8002530:	42c80000 	.word	0x42c80000
 8002534:	41c80000 	.word	0x41c80000
 8002538:	42be0000 	.word	0x42be0000
 800253c:	43160000 	.word	0x43160000
 8002540:	42f00000 	.word	0x42f00000

08002544 <Save_Parameters_To_Flash>:

/**
 * @brief Menyimpan parameter ke Flash.
 */
void Save_Parameters_To_Flash(void)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 800254a:	f001 fbc1 	bl	8003cd0 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
  EraseInitStruct.PageAddress = FLASH_STORAGE_ADDRESS;
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <Save_Parameters_To_Flash+0x94>)
 8002558:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.NbPages = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 800255e:	463a      	mov	r2, r7
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fc9b 	bl	8003ea0 <HAL_FLASHEx_Erase>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <Save_Parameters_To_Flash+0x38>
  {
    VCP_printf("Error: Gagal menghapus Flash!\r\n");
 8002570:	481a      	ldr	r0, [pc, #104]	@ (80025dc <Save_Parameters_To_Flash+0x98>)
 8002572:	f7ff ff89 	bl	8002488 <VCP_printf>
    HAL_FLASH_Lock();
 8002576:	f001 fbd1 	bl	8003d1c <HAL_FLASH_Lock>
 800257a:	e029      	b.n	80025d0 <Save_Parameters_To_Flash+0x8c>
    return;
  }

  uint32_t address = FLASH_STORAGE_ADDRESS;
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <Save_Parameters_To_Flash+0x94>)
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t *data_ptr = (uint32_t *)&g_params;
 8002580:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <Save_Parameters_To_Flash+0x9c>)
 8002582:	617b      	str	r3, [r7, #20]
  for (size_t i = 0; i < sizeof(ControlParams) / 4; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e01a      	b.n	80025c0 <Save_Parameters_To_Flash+0x7c>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data_ptr[i]) != HAL_OK)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	461c      	mov	r4, r3
 8002598:	4615      	mov	r5, r2
 800259a:	4622      	mov	r2, r4
 800259c:	462b      	mov	r3, r5
 800259e:	69f9      	ldr	r1, [r7, #28]
 80025a0:	2002      	movs	r0, #2
 80025a2:	f001 fb25 	bl	8003bf0 <HAL_FLASH_Program>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <Save_Parameters_To_Flash+0x70>
    {
      VCP_printf("Error: Gagal menulis ke Flash!\r\n");
 80025ac:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <Save_Parameters_To_Flash+0xa0>)
 80025ae:	f7ff ff6b 	bl	8002488 <VCP_printf>
      break;
 80025b2:	e008      	b.n	80025c6 <Save_Parameters_To_Flash+0x82>
    }
    address += 4;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3304      	adds	r3, #4
 80025b8:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < sizeof(ControlParams) / 4; i++)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3301      	adds	r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b0b      	cmp	r3, #11
 80025c4:	d9e1      	bls.n	800258a <Save_Parameters_To_Flash+0x46>
  }

  HAL_FLASH_Lock();
 80025c6:	f001 fba9 	bl	8003d1c <HAL_FLASH_Lock>
  VCP_printf("OK: Parameter berhasil disimpan ke Flash.\r\n");
 80025ca:	4807      	ldr	r0, [pc, #28]	@ (80025e8 <Save_Parameters_To_Flash+0xa4>)
 80025cc:	f7ff ff5c 	bl	8002488 <VCP_printf>
}
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdb0      	pop	{r4, r5, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	0800fc00 	.word	0x0800fc00
 80025dc:	080121a4 	.word	0x080121a4
 80025e0:	200006ac 	.word	0x200006ac
 80025e4:	080121c4 	.word	0x080121c4
 80025e8:	080121e8 	.word	0x080121e8

080025ec <Load_Parameters_From_Flash>:

/**
 * @brief Memuat parameter dari Flash. Jika gagal, gunakan nilai default.
 */
void Load_Parameters_From_Flash(void)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b08c      	sub	sp, #48	@ 0x30
 80025f0:	af00      	add	r7, sp, #0
  ControlParams params_from_flash;
  memcpy(&params_from_flash, (void *)FLASH_STORAGE_ADDRESS,
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <Load_Parameters_From_Flash+0x48>)
 80025f4:	463c      	mov	r4, r7
 80025f6:	461d      	mov	r5, r3
 80025f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002600:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         sizeof(ControlParams));

  if (params_from_flash.magic_number == FLASH_MAGIC_NUMBER)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <Load_Parameters_From_Flash+0x4c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10b      	bne.n	8002628 <Load_Parameters_From_Flash+0x3c>
  {
    memcpy(&g_params, &params_from_flash, sizeof(ControlParams));
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <Load_Parameters_From_Flash+0x50>)
 8002612:	461d      	mov	r5, r3
 8002614:	463c      	mov	r4, r7
 8002616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002622:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  }
  else
  {
    Set_Default_Parameters();
  }
}
 8002626:	e001      	b.n	800262c <Load_Parameters_From_Flash+0x40>
    Set_Default_Parameters();
 8002628:	f7ff ff52 	bl	80024d0 <Set_Default_Parameters>
}
 800262c:	bf00      	nop
 800262e:	3730      	adds	r7, #48	@ 0x30
 8002630:	46bd      	mov	sp, r7
 8002632:	bdb0      	pop	{r4, r5, r7, pc}
 8002634:	0800fc00 	.word	0x0800fc00
 8002638:	deadbeef 	.word	0xdeadbeef
 800263c:	200006ac 	.word	0x200006ac

08002640 <Process_Command>:

/**
 * @brief Memproses perintah yang diterima dari USB VCP.
 */
void Process_Command(uint8_t *cmd_buffer)
{
 8002640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002644:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 8002648:	af04      	add	r7, sp, #16
 800264a:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 800264e:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8002652:	6018      	str	r0, [r3, #0]
  char *cmd = (char *)cmd_buffer;
 8002654:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8002658:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
  float min, max;
  uint16_t val;

  if (strncmp(cmd, "$$", 2) == 0)
 8002662:	2202      	movs	r2, #2
 8002664:	49a3      	ldr	r1, [pc, #652]	@ (80028f4 <Process_Command+0x2b4>)
 8002666:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 800266a:	f00b fda7 	bl	800e1bc <strncmp>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 80b0 	bne.w	80027d6 <Process_Command+0x196>
  {
    char large_buffer[2048]; // Gunakan buffer yang lebih besar
    int len = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    len += sprintf(large_buffer + len, "--- Parameter Saat Ini ---\r\n");
 800267c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	4413      	add	r3, r2
 8002686:	499c      	ldr	r1, [pc, #624]	@ (80028f8 <Process_Command+0x2b8>)
 8002688:	4618      	mov	r0, r3
 800268a:	f00b fcbf 	bl	800e00c <siprintf>
 800268e:	4602      	mov	r2, r0
 8002690:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002694:	4413      	add	r3, r2
 8002696:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_A, g_params.ambang_bawah_A, g_params.target_penuh_A);
 800269a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800269e:	f107 020c 	add.w	r2, r7, #12
 80026a2:	18d6      	adds	r6, r2, r3
 80026a4:	4b95      	ldr	r3, [pc, #596]	@ (80028fc <Process_Command+0x2bc>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd febd 	bl	8000428 <__aeabi_f2d>
 80026ae:	4680      	mov	r8, r0
 80026b0:	4689      	mov	r9, r1
 80026b2:	4b92      	ldr	r3, [pc, #584]	@ (80028fc <Process_Command+0x2bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd feb6 	bl	8000428 <__aeabi_f2d>
 80026bc:	4604      	mov	r4, r0
 80026be:	460d      	mov	r5, r1
 80026c0:	4b8e      	ldr	r3, [pc, #568]	@ (80028fc <Process_Command+0x2bc>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd feaf 	bl	8000428 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026d2:	e9cd 4500 	strd	r4, r5, [sp]
 80026d6:	4642      	mov	r2, r8
 80026d8:	464b      	mov	r3, r9
 80026da:	4989      	ldr	r1, [pc, #548]	@ (8002900 <Process_Command+0x2c0>)
 80026dc:	4630      	mov	r0, r6
 80026de:	f00b fc95 	bl	800e00c <siprintf>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80026e8:	4413      	add	r3, r2
 80026ea:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_B, g_params.ambang_bawah_B, g_params.target_penuh_B);
 80026ee:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80026f2:	f107 020c 	add.w	r2, r7, #12
 80026f6:	18d6      	adds	r6, r2, r3
 80026f8:	4b80      	ldr	r3, [pc, #512]	@ (80028fc <Process_Command+0x2bc>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fe93 	bl	8000428 <__aeabi_f2d>
 8002702:	4680      	mov	r8, r0
 8002704:	4689      	mov	r9, r1
 8002706:	4b7d      	ldr	r3, [pc, #500]	@ (80028fc <Process_Command+0x2bc>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fe8c 	bl	8000428 <__aeabi_f2d>
 8002710:	4604      	mov	r4, r0
 8002712:	460d      	mov	r5, r1
 8002714:	4b79      	ldr	r3, [pc, #484]	@ (80028fc <Process_Command+0x2bc>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fe85 	bl	8000428 <__aeabi_f2d>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002726:	e9cd 4500 	strd	r4, r5, [sp]
 800272a:	4642      	mov	r2, r8
 800272c:	464b      	mov	r3, r9
 800272e:	4975      	ldr	r1, [pc, #468]	@ (8002904 <Process_Command+0x2c4>)
 8002730:	4630      	mov	r0, r6
 8002732:	f00b fc6b 	bl	800e00c <siprintf>
 8002736:	4602      	mov	r2, r0
 8002738:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800273c:	4413      	add	r3, r2
 800273e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_C, g_params.ambang_bawah_C, g_params.target_penuh_C);
 8002742:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002746:	f107 020c 	add.w	r2, r7, #12
 800274a:	18d6      	adds	r6, r2, r3
 800274c:	4b6b      	ldr	r3, [pc, #428]	@ (80028fc <Process_Command+0x2bc>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fe69 	bl	8000428 <__aeabi_f2d>
 8002756:	4680      	mov	r8, r0
 8002758:	4689      	mov	r9, r1
 800275a:	4b68      	ldr	r3, [pc, #416]	@ (80028fc <Process_Command+0x2bc>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe62 	bl	8000428 <__aeabi_f2d>
 8002764:	4604      	mov	r4, r0
 8002766:	460d      	mov	r5, r1
 8002768:	4b64      	ldr	r3, [pc, #400]	@ (80028fc <Process_Command+0x2bc>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fe5b 	bl	8000428 <__aeabi_f2d>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800277a:	e9cd 4500 	strd	r4, r5, [sp]
 800277e:	4642      	mov	r2, r8
 8002780:	464b      	mov	r3, r9
 8002782:	4961      	ldr	r1, [pc, #388]	@ (8002908 <Process_Command+0x2c8>)
 8002784:	4630      	mov	r0, r6
 8002786:	f00b fc41 	bl	800e00c <siprintf>
 800278a:	4602      	mov	r2, r0
 800278c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002790:	4413      	add	r3, r2
 8002792:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Ambang Sumber Kosong: %.1f%%\r\n", g_params.sumber_kosong);
 8002796:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800279a:	f107 020c 	add.w	r2, r7, #12
 800279e:	18d4      	adds	r4, r2, r3
 80027a0:	4b56      	ldr	r3, [pc, #344]	@ (80028fc <Process_Command+0x2bc>)
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe3f 	bl	8000428 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4957      	ldr	r1, [pc, #348]	@ (800290c <Process_Command+0x2cc>)
 80027b0:	4620      	mov	r0, r4
 80027b2:	f00b fc2b 	bl	800e00c <siprintf>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027bc:	4413      	add	r3, r2
 80027be:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 80027c2:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00a f918 	bl	800ca04 <CDC_Transmit_FS>
  else
  {
    VCP_printf(
        "Error: Perintah tidak dikenali. Ketik '$H' untuk bantuan.\r\n");
  }
}
 80027d4:	e2a4      	b.n	8002d20 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$P", 2) == 0)
 80027d6:	2202      	movs	r2, #2
 80027d8:	494d      	ldr	r1, [pc, #308]	@ (8002910 <Process_Command+0x2d0>)
 80027da:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 80027de:	f00b fced 	bl	800e1bc <strncmp>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 80a5 	bne.w	8002934 <Process_Command+0x2f4>
    int len = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "--- Daftar Pin ---\r\n");
 80027f0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80027f4:	f107 020c 	add.w	r2, r7, #12
 80027f8:	4413      	add	r3, r2
 80027fa:	4946      	ldr	r1, [pc, #280]	@ (8002914 <Process_Command+0x2d4>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00b fc05 	bl	800e00c <siprintf>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002808:	4413      	add	r3, r2
 800280a:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor A (TIM2_CH1): PB3 (TRIG), PA15 (ECHO)\r\n");
 800280e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002812:	f107 020c 	add.w	r2, r7, #12
 8002816:	4413      	add	r3, r2
 8002818:	493f      	ldr	r1, [pc, #252]	@ (8002918 <Process_Command+0x2d8>)
 800281a:	4618      	mov	r0, r3
 800281c:	f00b fbf6 	bl	800e00c <siprintf>
 8002820:	4602      	mov	r2, r0
 8002822:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002826:	4413      	add	r3, r2
 8002828:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor B (TIM3_CH1): PB5 (TRIG), PB4 (ECHO)\r\n");
 800282c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002830:	f107 020c 	add.w	r2, r7, #12
 8002834:	4413      	add	r3, r2
 8002836:	4939      	ldr	r1, [pc, #228]	@ (800291c <Process_Command+0x2dc>)
 8002838:	4618      	mov	r0, r3
 800283a:	f00b fbe7 	bl	800e00c <siprintf>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002844:	4413      	add	r3, r2
 8002846:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor C (TIM4_CH1): PB7 (TRIG), PB6 (ECHO)\r\n");
 800284a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800284e:	f107 020c 	add.w	r2, r7, #12
 8002852:	4413      	add	r3, r2
 8002854:	4932      	ldr	r1, [pc, #200]	@ (8002920 <Process_Command+0x2e0>)
 8002856:	4618      	mov	r0, r3
 8002858:	f00b fbd8 	bl	800e00c <siprintf>
 800285c:	4602      	mov	r2, r0
 800285e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002862:	4413      	add	r3, r2
 8002864:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Pompa B->A: PB14\r\n");
 8002868:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	4413      	add	r3, r2
 8002872:	492c      	ldr	r1, [pc, #176]	@ (8002924 <Process_Command+0x2e4>)
 8002874:	4618      	mov	r0, r3
 8002876:	f00b fbc9 	bl	800e00c <siprintf>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002880:	4413      	add	r3, r2
 8002882:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Pompa C->B: PB15\r\n");
 8002886:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800288a:	f107 020c 	add.w	r2, r7, #12
 800288e:	4413      	add	r3, r2
 8002890:	4925      	ldr	r1, [pc, #148]	@ (8002928 <Process_Command+0x2e8>)
 8002892:	4618      	mov	r0, r3
 8002894:	f00b fbba 	bl	800e00c <siprintf>
 8002898:	4602      	mov	r2, r0
 800289a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800289e:	4413      	add	r3, r2
 80028a0:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "LED Merah (Alert): PB13\r\n");
 80028a4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028a8:	f107 020c 	add.w	r2, r7, #12
 80028ac:	4413      	add	r3, r2
 80028ae:	491f      	ldr	r1, [pc, #124]	@ (800292c <Process_Command+0x2ec>)
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00b fbab 	bl	800e00c <siprintf>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028bc:	4413      	add	r3, r2
 80028be:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "LCD I2C (I2C1): PB6 (SCL), PB7 (SDA)\r\n");
 80028c2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028c6:	f107 020c 	add.w	r2, r7, #12
 80028ca:	4413      	add	r3, r2
 80028cc:	4918      	ldr	r1, [pc, #96]	@ (8002930 <Process_Command+0x2f0>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00b fb9c 	bl	800e00c <siprintf>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028da:	4413      	add	r3, r2
 80028dc:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 80028e0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f00a f889 	bl	800ca04 <CDC_Transmit_FS>
}
 80028f2:	e215      	b.n	8002d20 <Process_Command+0x6e0>
 80028f4:	08012214 	.word	0x08012214
 80028f8:	08012218 	.word	0x08012218
 80028fc:	200006ac 	.word	0x200006ac
 8002900:	08012238 	.word	0x08012238
 8002904:	08012268 	.word	0x08012268
 8002908:	08012298 	.word	0x08012298
 800290c:	080122c8 	.word	0x080122c8
 8002910:	080122e8 	.word	0x080122e8
 8002914:	080122ec 	.word	0x080122ec
 8002918:	08012304 	.word	0x08012304
 800291c:	08012334 	.word	0x08012334
 8002920:	08012364 	.word	0x08012364
 8002924:	08012394 	.word	0x08012394
 8002928:	080123a8 	.word	0x080123a8
 800292c:	080123bc 	.word	0x080123bc
 8002930:	080123d8 	.word	0x080123d8
  else if (strncmp(cmd, "$H", 2) == 0)
 8002934:	2202      	movs	r2, #2
 8002936:	49ce      	ldr	r1, [pc, #824]	@ (8002c70 <Process_Command+0x630>)
 8002938:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 800293c:	f00b fc3e 	bl	800e1bc <strncmp>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 80b2 	bne.w	8002aac <Process_Command+0x46c>
    int len = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "--- Bantuan ---\r\n");
 800294e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002952:	f107 020c 	add.w	r2, r7, #12
 8002956:	4413      	add	r3, r2
 8002958:	49c6      	ldr	r1, [pc, #792]	@ (8002c74 <Process_Command+0x634>)
 800295a:	4618      	mov	r0, r3
 800295c:	f00b fb56 	bl	800e00c <siprintf>
 8002960:	4602      	mov	r2, r0
 8002962:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002966:	4413      	add	r3, r2
 8002968:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$$          : Lihat semua parameter\r\n");
 800296c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002970:	f107 020c 	add.w	r2, r7, #12
 8002974:	4413      	add	r3, r2
 8002976:	49c0      	ldr	r1, [pc, #768]	@ (8002c78 <Process_Command+0x638>)
 8002978:	4618      	mov	r0, r3
 800297a:	f00b fb47 	bl	800e00c <siprintf>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002984:	4413      	add	r3, r2
 8002986:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$P          : Lihat daftar pin\r\n");
 800298a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800298e:	f107 020c 	add.w	r2, r7, #12
 8002992:	4413      	add	r3, r2
 8002994:	49b9      	ldr	r1, [pc, #740]	@ (8002c7c <Process_Command+0x63c>)
 8002996:	4618      	mov	r0, r3
 8002998:	f00b fb38 	bl	800e00c <siprintf>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029a2:	4413      	add	r3, r2
 80029a4:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$H          : Tampilkan pesan ini\r\n");
 80029a8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	4413      	add	r3, r2
 80029b2:	49b3      	ldr	r1, [pc, #716]	@ (8002c80 <Process_Command+0x640>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00b fb29 	bl	800e00c <siprintf>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029c0:	4413      	add	r3, r2
 80029c2:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$1=<min>,<max> : Set ambang batas Drum A\r\n");
 80029c6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029ca:	f107 020c 	add.w	r2, r7, #12
 80029ce:	4413      	add	r3, r2
 80029d0:	49ac      	ldr	r1, [pc, #688]	@ (8002c84 <Process_Command+0x644>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00b fb1a 	bl	800e00c <siprintf>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029de:	4413      	add	r3, r2
 80029e0:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$2=<min>,<max> : Set ambang batas Drum B\r\n");
 80029e4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029e8:	f107 020c 	add.w	r2, r7, #12
 80029ec:	4413      	add	r3, r2
 80029ee:	49a6      	ldr	r1, [pc, #664]	@ (8002c88 <Process_Command+0x648>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00b fb0b 	bl	800e00c <siprintf>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029fc:	4413      	add	r3, r2
 80029fe:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$3=<min>,<max> : Set ambang batas Drum C\r\n");
 8002a02:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a06:	f107 020c 	add.w	r2, r7, #12
 8002a0a:	4413      	add	r3, r2
 8002a0c:	499f      	ldr	r1, [pc, #636]	@ (8002c8c <Process_Command+0x64c>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00b fafc 	bl	800e00c <siprintf>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$M=<num>       : Set nilai mov avrg sensor\r\n");
 8002a20:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a24:	f107 020c 	add.w	r2, r7, #12
 8002a28:	4413      	add	r3, r2
 8002a2a:	4999      	ldr	r1, [pc, #612]	@ (8002c90 <Process_Command+0x650>)
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00b faed 	bl	800e00c <siprintf>
 8002a32:	4602      	mov	r2, r0
 8002a34:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$S          : Simpan parameter ke Flash\r\n");
 8002a3e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a42:	f107 020c 	add.w	r2, r7, #12
 8002a46:	4413      	add	r3, r2
 8002a48:	4992      	ldr	r1, [pc, #584]	@ (8002c94 <Process_Command+0x654>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f00b fade 	bl	800e00c <siprintf>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a56:	4413      	add	r3, r2
 8002a58:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$L          : Muat parameter dari Flash\r\n");
 8002a5c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	4413      	add	r3, r2
 8002a66:	498c      	ldr	r1, [pc, #560]	@ (8002c98 <Process_Command+0x658>)
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00b facf 	bl	800e00c <siprintf>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a74:	4413      	add	r3, r2
 8002a76:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$D          : Kembalikan ke pengaturan default\r\n");
 8002a7a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a7e:	f107 020c 	add.w	r2, r7, #12
 8002a82:	4413      	add	r3, r2
 8002a84:	4985      	ldr	r1, [pc, #532]	@ (8002c9c <Process_Command+0x65c>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00b fac0 	bl	800e00c <siprintf>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a92:	4413      	add	r3, r2
 8002a94:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002a98:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f009 ffad 	bl	800ca04 <CDC_Transmit_FS>
}
 8002aaa:	e139      	b.n	8002d20 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$1=%f,%f", &min, &max) == 2)
 8002aac:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002ab0:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002ab4:	497a      	ldr	r1, [pc, #488]	@ (8002ca0 <Process_Command+0x660>)
 8002ab6:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002aba:	f00b fac9 	bl	800e050 <siscanf>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d11d      	bne.n	8002b00 <Process_Command+0x4c0>
    g_params.ambang_bawah_A = min;
 8002ac4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002ac8:	4a76      	ldr	r2, [pc, #472]	@ (8002ca4 <Process_Command+0x664>)
 8002aca:	6093      	str	r3, [r2, #8]
    g_params.target_penuh_A = max;
 8002acc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002ad0:	4a74      	ldr	r2, [pc, #464]	@ (8002ca4 <Process_Command+0x664>)
 8002ad2:	60d3      	str	r3, [r2, #12]
    VCP_printf("OK: Parameter Drum A diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002ad4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fca5 	bl	8000428 <__aeabi_f2d>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	460d      	mov	r5, r1
 8002ae2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fc9e 	bl	8000428 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	e9cd 2300 	strd	r2, r3, [sp]
 8002af4:	4622      	mov	r2, r4
 8002af6:	462b      	mov	r3, r5
 8002af8:	486b      	ldr	r0, [pc, #428]	@ (8002ca8 <Process_Command+0x668>)
 8002afa:	f7ff fcc5 	bl	8002488 <VCP_printf>
}
 8002afe:	e10f      	b.n	8002d20 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$2=%f,%f", &min, &max) == 2)
 8002b00:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002b04:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002b08:	4968      	ldr	r1, [pc, #416]	@ (8002cac <Process_Command+0x66c>)
 8002b0a:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002b0e:	f00b fa9f 	bl	800e050 <siscanf>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d11d      	bne.n	8002b54 <Process_Command+0x514>
    g_params.ambang_bawah_B = min;
 8002b18:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b1c:	4a61      	ldr	r2, [pc, #388]	@ (8002ca4 <Process_Command+0x664>)
 8002b1e:	6153      	str	r3, [r2, #20]
    g_params.target_penuh_B = max;
 8002b20:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca4 <Process_Command+0x664>)
 8002b26:	6193      	str	r3, [r2, #24]
    VCP_printf("OK: Parameter Drum B diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002b28:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fc7b 	bl	8000428 <__aeabi_f2d>
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
 8002b36:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fc74 	bl	8000428 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	e9cd 2300 	strd	r2, r3, [sp]
 8002b48:	4622      	mov	r2, r4
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	4858      	ldr	r0, [pc, #352]	@ (8002cb0 <Process_Command+0x670>)
 8002b4e:	f7ff fc9b 	bl	8002488 <VCP_printf>
}
 8002b52:	e0e5      	b.n	8002d20 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$3=%f,%f", &min, &max) == 2)
 8002b54:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002b58:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002b5c:	4955      	ldr	r1, [pc, #340]	@ (8002cb4 <Process_Command+0x674>)
 8002b5e:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002b62:	f00b fa75 	bl	800e050 <siscanf>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11d      	bne.n	8002ba8 <Process_Command+0x568>
    g_params.ambang_bawah_C = min;
 8002b6c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b70:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca4 <Process_Command+0x664>)
 8002b72:	6213      	str	r3, [r2, #32]
    g_params.target_penuh_C = max;
 8002b74:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca4 <Process_Command+0x664>)
 8002b7a:	6253      	str	r3, [r2, #36]	@ 0x24
    VCP_printf("OK: Parameter Drum C diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002b7c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fc51 	bl	8000428 <__aeabi_f2d>
 8002b86:	4604      	mov	r4, r0
 8002b88:	460d      	mov	r5, r1
 8002b8a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fc4a 	bl	8000428 <__aeabi_f2d>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	e9cd 2300 	strd	r2, r3, [sp]
 8002b9c:	4622      	mov	r2, r4
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	4845      	ldr	r0, [pc, #276]	@ (8002cb8 <Process_Command+0x678>)
 8002ba2:	f7ff fc71 	bl	8002488 <VCP_printf>
}
 8002ba6:	e0bb      	b.n	8002d20 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$M=%hd", &val) == 1)
 8002ba8:	f607 030e 	addw	r3, r7, #2062	@ 0x80e
 8002bac:	461a      	mov	r2, r3
 8002bae:	4943      	ldr	r1, [pc, #268]	@ (8002cbc <Process_Command+0x67c>)
 8002bb0:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002bb4:	f00b fa4c 	bl	800e050 <siscanf>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d13a      	bne.n	8002c34 <Process_Command+0x5f4>
    if (val > 0 && val <= MAX_MOVING_AVG_SIZE)
 8002bbe:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d031      	beq.n	8002c2a <Process_Command+0x5ea>
 8002bc6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002bca:	2b14      	cmp	r3, #20
 8002bcc:	d82d      	bhi.n	8002c2a <Process_Command+0x5ea>
      g_params.moving_avg_size = (uint8_t)val;
 8002bce:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <Process_Command+0x664>)
 8002bd6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
      VCP_printf("OK: Ukuran Moving Average diubah -> %d\r\n", val);
 8002bda:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002bde:	4619      	mov	r1, r3
 8002be0:	4837      	ldr	r0, [pc, #220]	@ (8002cc0 <Process_Command+0x680>)
 8002be2:	f7ff fc51 	bl	8002488 <VCP_printf>
      memset(Distance1_buffer, 0, sizeof(Distance1_buffer));
 8002be6:	2250      	movs	r2, #80	@ 0x50
 8002be8:	2100      	movs	r1, #0
 8002bea:	4836      	ldr	r0, [pc, #216]	@ (8002cc4 <Process_Command+0x684>)
 8002bec:	f00b fade 	bl	800e1ac <memset>
      memset(Distance2_buffer, 0, sizeof(Distance2_buffer));
 8002bf0:	2250      	movs	r2, #80	@ 0x50
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4834      	ldr	r0, [pc, #208]	@ (8002cc8 <Process_Command+0x688>)
 8002bf6:	f00b fad9 	bl	800e1ac <memset>
      memset(Distance3_buffer, 0, sizeof(Distance3_buffer));
 8002bfa:	2250      	movs	r2, #80	@ 0x50
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4833      	ldr	r0, [pc, #204]	@ (8002ccc <Process_Command+0x68c>)
 8002c00:	f00b fad4 	bl	800e1ac <memset>
      buffer_index_1 = 0;
 8002c04:	4b32      	ldr	r3, [pc, #200]	@ (8002cd0 <Process_Command+0x690>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
      buffer_index_2 = 0;
 8002c0a:	4b32      	ldr	r3, [pc, #200]	@ (8002cd4 <Process_Command+0x694>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
      buffer_index_3 = 0;
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <Process_Command+0x698>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
      is_buffer_full_1 = 0;
 8002c16:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <Process_Command+0x69c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
      is_buffer_full_2 = 0;
 8002c1c:	4b30      	ldr	r3, [pc, #192]	@ (8002ce0 <Process_Command+0x6a0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
      is_buffer_full_3 = 0;
 8002c22:	4b30      	ldr	r3, [pc, #192]	@ (8002ce4 <Process_Command+0x6a4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
}
 8002c28:	e07a      	b.n	8002d20 <Process_Command+0x6e0>
      VCP_printf("Error: Ukuran Moving Average tidak valid (1-%d).\r\n", MAX_MOVING_AVG_SIZE);
 8002c2a:	2114      	movs	r1, #20
 8002c2c:	482e      	ldr	r0, [pc, #184]	@ (8002ce8 <Process_Command+0x6a8>)
 8002c2e:	f7ff fc2b 	bl	8002488 <VCP_printf>
}
 8002c32:	e075      	b.n	8002d20 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$S", 2) == 0)
 8002c34:	2202      	movs	r2, #2
 8002c36:	492d      	ldr	r1, [pc, #180]	@ (8002cec <Process_Command+0x6ac>)
 8002c38:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002c3c:	f00b fabe 	bl	800e1bc <strncmp>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <Process_Command+0x612>
    Save_Parameters_To_Flash();
 8002c46:	f7ff fc7d 	bl	8002544 <Save_Parameters_To_Flash>
    VCP_printf("OK: Parameter disimpan ke Flash.\r\n");
 8002c4a:	4829      	ldr	r0, [pc, #164]	@ (8002cf0 <Process_Command+0x6b0>)
 8002c4c:	f7ff fc1c 	bl	8002488 <VCP_printf>
}
 8002c50:	e066      	b.n	8002d20 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$L", 2) == 0)
 8002c52:	2202      	movs	r2, #2
 8002c54:	4927      	ldr	r1, [pc, #156]	@ (8002cf4 <Process_Command+0x6b4>)
 8002c56:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002c5a:	f00b faaf 	bl	800e1bc <strncmp>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d14b      	bne.n	8002cfc <Process_Command+0x6bc>
    Load_Parameters_From_Flash();
 8002c64:	f7ff fcc2 	bl	80025ec <Load_Parameters_From_Flash>
    VCP_printf("OK: Parameter dimuat dari Flash.\r\n");
 8002c68:	4823      	ldr	r0, [pc, #140]	@ (8002cf8 <Process_Command+0x6b8>)
 8002c6a:	f7ff fc0d 	bl	8002488 <VCP_printf>
}
 8002c6e:	e057      	b.n	8002d20 <Process_Command+0x6e0>
 8002c70:	08012400 	.word	0x08012400
 8002c74:	08012404 	.word	0x08012404
 8002c78:	08012418 	.word	0x08012418
 8002c7c:	08012440 	.word	0x08012440
 8002c80:	08012464 	.word	0x08012464
 8002c84:	08012488 	.word	0x08012488
 8002c88:	080124b4 	.word	0x080124b4
 8002c8c:	080124e0 	.word	0x080124e0
 8002c90:	0801250c 	.word	0x0801250c
 8002c94:	0801253c 	.word	0x0801253c
 8002c98:	08012568 	.word	0x08012568
 8002c9c:	08012594 	.word	0x08012594
 8002ca0:	080125c8 	.word	0x080125c8
 8002ca4:	200006ac 	.word	0x200006ac
 8002ca8:	080125d4 	.word	0x080125d4
 8002cac:	08012608 	.word	0x08012608
 8002cb0:	08012614 	.word	0x08012614
 8002cb4:	08012648 	.word	0x08012648
 8002cb8:	08012654 	.word	0x08012654
 8002cbc:	08012688 	.word	0x08012688
 8002cc0:	08012690 	.word	0x08012690
 8002cc4:	20000584 	.word	0x20000584
 8002cc8:	200005d4 	.word	0x200005d4
 8002ccc:	20000624 	.word	0x20000624
 8002cd0:	20000680 	.word	0x20000680
 8002cd4:	20000681 	.word	0x20000681
 8002cd8:	20000682 	.word	0x20000682
 8002cdc:	20000683 	.word	0x20000683
 8002ce0:	20000684 	.word	0x20000684
 8002ce4:	20000685 	.word	0x20000685
 8002ce8:	080126bc 	.word	0x080126bc
 8002cec:	080126f0 	.word	0x080126f0
 8002cf0:	080126f4 	.word	0x080126f4
 8002cf4:	08012718 	.word	0x08012718
 8002cf8:	0801271c 	.word	0x0801271c
  else if (strncmp(cmd, "$D", 2) == 0)
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	490b      	ldr	r1, [pc, #44]	@ (8002d2c <Process_Command+0x6ec>)
 8002d00:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002d04:	f00b fa5a 	bl	800e1bc <strncmp>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d105      	bne.n	8002d1a <Process_Command+0x6da>
    Set_Default_Parameters();
 8002d0e:	f7ff fbdf 	bl	80024d0 <Set_Default_Parameters>
    VCP_printf("OK: Parameter dikembalikan ke default.\r\n");
 8002d12:	4807      	ldr	r0, [pc, #28]	@ (8002d30 <Process_Command+0x6f0>)
 8002d14:	f7ff fbb8 	bl	8002488 <VCP_printf>
}
 8002d18:	e002      	b.n	8002d20 <Process_Command+0x6e0>
    VCP_printf(
 8002d1a:	4806      	ldr	r0, [pc, #24]	@ (8002d34 <Process_Command+0x6f4>)
 8002d1c:	f7ff fbb4 	bl	8002488 <VCP_printf>
}
 8002d20:	bf00      	nop
 8002d22:	f607 072c 	addw	r7, r7, #2092	@ 0x82c
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d2c:	08012740 	.word	0x08012740
 8002d30:	08012744 	.word	0x08012744
 8002d34:	08012770 	.word	0x08012770

08002d38 <Run_Control_Logic>:

void Run_Control_Logic(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
  // --- Proses Moving Average untuk Sensor 1 ---
  Distance1_buffer[buffer_index_1] = Distance1;
 8002d3e:	4b85      	ldr	r3, [pc, #532]	@ (8002f54 <Run_Control_Logic+0x21c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4b84      	ldr	r3, [pc, #528]	@ (8002f58 <Run_Control_Logic+0x220>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a84      	ldr	r2, [pc, #528]	@ (8002f5c <Run_Control_Logic+0x224>)
 8002d4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  buffer_index_1 = (buffer_index_1 + 1) % g_params.moving_avg_size;
 8002d4e:	4b81      	ldr	r3, [pc, #516]	@ (8002f54 <Run_Control_Logic+0x21c>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	4a82      	ldr	r2, [pc, #520]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002d56:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002d5a:	fb93 f1f2 	sdiv	r1, r3, r2
 8002d5e:	fb01 f202 	mul.w	r2, r1, r2
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b7b      	ldr	r3, [pc, #492]	@ (8002f54 <Run_Control_Logic+0x21c>)
 8002d68:	701a      	strb	r2, [r3, #0]
  if (buffer_index_1 == 0)
 8002d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f54 <Run_Control_Logic+0x21c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <Run_Control_Logic+0x40>
    is_buffer_full_1 = 1;
 8002d72:	4b7c      	ldr	r3, [pc, #496]	@ (8002f64 <Run_Control_Logic+0x22c>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]

  filtered_distance1 = calculate_moving_average(Distance1_buffer, g_params.moving_avg_size, is_buffer_full_1);
 8002d78:	4b79      	ldr	r3, [pc, #484]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002d7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002d7e:	4a79      	ldr	r2, [pc, #484]	@ (8002f64 <Run_Control_Logic+0x22c>)
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	4619      	mov	r1, r3
 8002d84:	4875      	ldr	r0, [pc, #468]	@ (8002f5c <Run_Control_Logic+0x224>)
 8002d86:	f7ff fb2b 	bl	80023e0 <calculate_moving_average>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a76      	ldr	r2, [pc, #472]	@ (8002f68 <Run_Control_Logic+0x230>)
 8002d8e:	6013      	str	r3, [r2, #0]

  // --- Proses Moving Average untuk Sensor 2 ---
  Distance2_buffer[buffer_index_2] = Distance2;
 8002d90:	4b76      	ldr	r3, [pc, #472]	@ (8002f6c <Run_Control_Logic+0x234>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4b76      	ldr	r3, [pc, #472]	@ (8002f70 <Run_Control_Logic+0x238>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a76      	ldr	r2, [pc, #472]	@ (8002f74 <Run_Control_Logic+0x23c>)
 8002d9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  buffer_index_2 = (buffer_index_2 + 1) % g_params.moving_avg_size;
 8002da0:	4b72      	ldr	r3, [pc, #456]	@ (8002f6c <Run_Control_Logic+0x234>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a6e      	ldr	r2, [pc, #440]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002da8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002dac:	fb93 f1f2 	sdiv	r1, r3, r2
 8002db0:	fb01 f202 	mul.w	r2, r1, r2
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f6c <Run_Control_Logic+0x234>)
 8002dba:	701a      	strb	r2, [r3, #0]
  if (buffer_index_2 == 0)
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002f6c <Run_Control_Logic+0x234>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <Run_Control_Logic+0x92>
    is_buffer_full_2 = 1;
 8002dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f78 <Run_Control_Logic+0x240>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]

  filtered_distance2 = calculate_moving_average(Distance2_buffer, g_params.moving_avg_size, is_buffer_full_2);
 8002dca:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002dcc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002dd0:	4a69      	ldr	r2, [pc, #420]	@ (8002f78 <Run_Control_Logic+0x240>)
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4867      	ldr	r0, [pc, #412]	@ (8002f74 <Run_Control_Logic+0x23c>)
 8002dd8:	f7ff fb02 	bl	80023e0 <calculate_moving_average>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a67      	ldr	r2, [pc, #412]	@ (8002f7c <Run_Control_Logic+0x244>)
 8002de0:	6013      	str	r3, [r2, #0]

  // --- Proses Moving Average untuk Sensor 3 ---
  Distance3_buffer[buffer_index_3] = Distance3;
 8002de2:	4b67      	ldr	r3, [pc, #412]	@ (8002f80 <Run_Control_Logic+0x248>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	4b66      	ldr	r3, [pc, #408]	@ (8002f84 <Run_Control_Logic+0x24c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a66      	ldr	r2, [pc, #408]	@ (8002f88 <Run_Control_Logic+0x250>)
 8002dee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  buffer_index_3 = (buffer_index_3 + 1) % g_params.moving_avg_size;
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <Run_Control_Logic+0x248>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	3301      	adds	r3, #1
 8002df8:	4a59      	ldr	r2, [pc, #356]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002dfa:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002dfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e02:	fb01 f202 	mul.w	r2, r1, r2
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f80 <Run_Control_Logic+0x248>)
 8002e0c:	701a      	strb	r2, [r3, #0]
  if (buffer_index_3 == 0)
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f80 <Run_Control_Logic+0x248>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <Run_Control_Logic+0xe4>
    is_buffer_full_3 = 1;
 8002e16:	4b5d      	ldr	r3, [pc, #372]	@ (8002f8c <Run_Control_Logic+0x254>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]

  filtered_distance3 = calculate_moving_average(Distance3_buffer, g_params.moving_avg_size, is_buffer_full_3);
 8002e1c:	4b50      	ldr	r3, [pc, #320]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002e1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e22:	4a5a      	ldr	r2, [pc, #360]	@ (8002f8c <Run_Control_Logic+0x254>)
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	4857      	ldr	r0, [pc, #348]	@ (8002f88 <Run_Control_Logic+0x250>)
 8002e2a:	f7ff fad9 	bl	80023e0 <calculate_moving_average>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a57      	ldr	r2, [pc, #348]	@ (8002f90 <Run_Control_Logic+0x258>)
 8002e32:	6013      	str	r3, [r2, #0]

  // Gunakan nilai jarak yang sudah difilter
  float LevelA_cm = g_params.tinggi_A - filtered_distance1;
 8002e34:	4b4a      	ldr	r3, [pc, #296]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	@ (8002f68 <Run_Control_Logic+0x230>)
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fe96 	bl	8000b70 <__aeabi_fsub>
 8002e44:	4603      	mov	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]
  float LevelB_cm = g_params.tinggi_B - filtered_distance2;
 8002e48:	4b45      	ldr	r3, [pc, #276]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f7c <Run_Control_Logic+0x244>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fe8c 	bl	8000b70 <__aeabi_fsub>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60bb      	str	r3, [r7, #8]
  float LevelC_cm = g_params.tinggi_C - filtered_distance3;
 8002e5c:	4b40      	ldr	r3, [pc, #256]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a4b      	ldr	r2, [pc, #300]	@ (8002f90 <Run_Control_Logic+0x258>)
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fe82 	bl	8000b70 <__aeabi_fsub>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	607b      	str	r3, [r7, #4]

  LevelA_persen = (LevelA_cm / g_params.tinggi_A) * 100.0f;
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4619      	mov	r1, r3
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7fe f838 	bl	8000eec <__aeabi_fdiv>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4945      	ldr	r1, [pc, #276]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd ff7f 	bl	8000d84 <__aeabi_fmul>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b43      	ldr	r3, [pc, #268]	@ (8002f98 <Run_Control_Logic+0x260>)
 8002e8c:	601a      	str	r2, [r3, #0]
  LevelB_persen = (LevelB_cm / g_params.tinggi_B) * 100.0f;
 8002e8e:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	4619      	mov	r1, r3
 8002e94:	68b8      	ldr	r0, [r7, #8]
 8002e96:	f7fe f829 	bl	8000eec <__aeabi_fdiv>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	493d      	ldr	r1, [pc, #244]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd ff70 	bl	8000d84 <__aeabi_fmul>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8002f9c <Run_Control_Logic+0x264>)
 8002eaa:	601a      	str	r2, [r3, #0]
  LevelC_persen = (LevelC_cm / g_params.tinggi_C) * 100.0f;
 8002eac:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <Run_Control_Logic+0x228>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f81a 	bl	8000eec <__aeabi_fdiv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4936      	ldr	r1, [pc, #216]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd ff61 	bl	8000d84 <__aeabi_fmul>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b36      	ldr	r3, [pc, #216]	@ (8002fa0 <Run_Control_Logic+0x268>)
 8002ec8:	601a      	str	r2, [r3, #0]
  if (LevelA_persen < 0)
 8002eca:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <Run_Control_Logic+0x260>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f8f4 	bl	80010c0 <__aeabi_fcmplt>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <Run_Control_Logic+0x1b0>
    LevelA_persen = 0;
 8002ede:	4b2e      	ldr	r3, [pc, #184]	@ (8002f98 <Run_Control_Logic+0x260>)
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e00b      	b.n	8002f00 <Run_Control_Logic+0x1c8>
  else if (LevelA_persen > 100)
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <Run_Control_Logic+0x260>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4929      	ldr	r1, [pc, #164]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe f904 	bl	80010fc <__aeabi_fcmpgt>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <Run_Control_Logic+0x1c8>
    LevelA_persen = 100;
 8002efa:	4b27      	ldr	r3, [pc, #156]	@ (8002f98 <Run_Control_Logic+0x260>)
 8002efc:	4a25      	ldr	r2, [pc, #148]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002efe:	601a      	str	r2, [r3, #0]
  if (LevelB_persen < 0)
 8002f00:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <Run_Control_Logic+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe f8d9 	bl	80010c0 <__aeabi_fcmplt>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <Run_Control_Logic+0x1e6>
    LevelB_persen = 0;
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <Run_Control_Logic+0x264>)
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e00b      	b.n	8002f36 <Run_Control_Logic+0x1fe>
  else if (LevelB_persen > 100)
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <Run_Control_Logic+0x264>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	491c      	ldr	r1, [pc, #112]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe f8e9 	bl	80010fc <__aeabi_fcmpgt>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <Run_Control_Logic+0x1fe>
    LevelB_persen = 100;
 8002f30:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <Run_Control_Logic+0x264>)
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <Run_Control_Logic+0x25c>)
 8002f34:	601a      	str	r2, [r3, #0]
  if (LevelC_persen < 0)
 8002f36:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa0 <Run_Control_Logic+0x268>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f8be 	bl	80010c0 <__aeabi_fcmplt>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d02c      	beq.n	8002fa4 <Run_Control_Logic+0x26c>
    LevelC_persen = 0;
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <Run_Control_Logic+0x268>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e033      	b.n	8002fbc <Run_Control_Logic+0x284>
 8002f54:	20000680 	.word	0x20000680
 8002f58:	20000764 	.word	0x20000764
 8002f5c:	20000584 	.word	0x20000584
 8002f60:	200006ac 	.word	0x200006ac
 8002f64:	20000683 	.word	0x20000683
 8002f68:	20000674 	.word	0x20000674
 8002f6c:	20000681 	.word	0x20000681
 8002f70:	20000768 	.word	0x20000768
 8002f74:	200005d4 	.word	0x200005d4
 8002f78:	20000684 	.word	0x20000684
 8002f7c:	20000678 	.word	0x20000678
 8002f80:	20000682 	.word	0x20000682
 8002f84:	2000076c 	.word	0x2000076c
 8002f88:	20000624 	.word	0x20000624
 8002f8c:	20000685 	.word	0x20000685
 8002f90:	2000067c 	.word	0x2000067c
 8002f94:	42c80000 	.word	0x42c80000
 8002f98:	2000069c 	.word	0x2000069c
 8002f9c:	200006a0 	.word	0x200006a0
 8002fa0:	200006a4 	.word	0x200006a4
  else if (LevelC_persen > 100)
 8002fa4:	4b61      	ldr	r3, [pc, #388]	@ (800312c <Run_Control_Logic+0x3f4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4961      	ldr	r1, [pc, #388]	@ (8003130 <Run_Control_Logic+0x3f8>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe f8a6 	bl	80010fc <__aeabi_fcmpgt>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <Run_Control_Logic+0x284>
    LevelC_persen = 100;
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800312c <Run_Control_Logic+0x3f4>)
 8002fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8003130 <Run_Control_Logic+0x3f8>)
 8002fba:	601a      	str	r2, [r3, #0]

  if (state_A == STATE_IDLE && LevelA_persen <= g_params.ambang_bawah_A)
 8002fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8003134 <Run_Control_Logic+0x3fc>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11f      	bne.n	8003004 <Run_Control_Logic+0x2cc>
 8002fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8003138 <Run_Control_Logic+0x400>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800313c <Run_Control_Logic+0x404>)
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f88a 	bl	80010e8 <__aeabi_fcmpge>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d014      	beq.n	8003004 <Run_Control_Logic+0x2cc>
  {
    if (LevelB_persen > g_params.sumber_kosong)
 8002fda:	4b57      	ldr	r3, [pc, #348]	@ (8003138 <Run_Control_Logic+0x400>)
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fde:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <Run_Control_Logic+0x408>)
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe f86b 	bl	80010c0 <__aeabi_fcmplt>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02c      	beq.n	800304a <Run_Control_Logic+0x312>
    {
      state_A = STATE_FILLING;
 8002ff0:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <Run_Control_Logic+0x3fc>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_SET);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ffc:	4851      	ldr	r0, [pc, #324]	@ (8003144 <Run_Control_Logic+0x40c>)
 8002ffe:	f001 f97b 	bl	80042f8 <HAL_GPIO_WritePin>
    if (LevelB_persen > g_params.sumber_kosong)
 8003002:	e022      	b.n	800304a <Run_Control_Logic+0x312>
    }
  }
  else if (state_A == STATE_FILLING)
 8003004:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <Run_Control_Logic+0x3fc>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11e      	bne.n	800304a <Run_Control_Logic+0x312>
  {
    if (LevelA_persen >= g_params.target_penuh_A || LevelB_persen <= g_params.sumber_kosong)
 800300c:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <Run_Control_Logic+0x400>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a4a      	ldr	r2, [pc, #296]	@ (800313c <Run_Control_Logic+0x404>)
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe f85c 	bl	80010d4 <__aeabi_fcmple>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <Run_Control_Logic+0x300>
 8003022:	4b45      	ldr	r3, [pc, #276]	@ (8003138 <Run_Control_Logic+0x400>)
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	4a46      	ldr	r2, [pc, #280]	@ (8003140 <Run_Control_Logic+0x408>)
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe f85b 	bl	80010e8 <__aeabi_fcmpge>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <Run_Control_Logic+0x312>
    {
      state_A = STATE_IDLE;
 8003038:	4b3e      	ldr	r3, [pc, #248]	@ (8003134 <Run_Control_Logic+0x3fc>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003044:	483f      	ldr	r0, [pc, #252]	@ (8003144 <Run_Control_Logic+0x40c>)
 8003046:	f001 f957 	bl	80042f8 <HAL_GPIO_WritePin>
    }
  }

  if (state_A == STATE_IDLE)
 800304a:	4b3a      	ldr	r3, [pc, #232]	@ (8003134 <Run_Control_Logic+0x3fc>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d147      	bne.n	80030e2 <Run_Control_Logic+0x3aa>
  {
    if (state_B == STATE_IDLE && LevelB_persen <= g_params.ambang_bawah_B)
 8003052:	4b3d      	ldr	r3, [pc, #244]	@ (8003148 <Run_Control_Logic+0x410>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11f      	bne.n	800309a <Run_Control_Logic+0x362>
 800305a:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <Run_Control_Logic+0x400>)
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4a38      	ldr	r2, [pc, #224]	@ (8003140 <Run_Control_Logic+0x408>)
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe f83f 	bl	80010e8 <__aeabi_fcmpge>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d014      	beq.n	800309a <Run_Control_Logic+0x362>
    {
      if (LevelC_persen > g_params.sumber_kosong)
 8003070:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <Run_Control_Logic+0x400>)
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <Run_Control_Logic+0x3f4>)
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f820 	bl	80010c0 <__aeabi_fcmplt>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d036      	beq.n	80030f4 <Run_Control_Logic+0x3bc>
      {
        state_B = STATE_FILLING;
 8003086:	4b30      	ldr	r3, [pc, #192]	@ (8003148 <Run_Control_Logic+0x410>)
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin,
 800308c:	2201      	movs	r2, #1
 800308e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003092:	482c      	ldr	r0, [pc, #176]	@ (8003144 <Run_Control_Logic+0x40c>)
 8003094:	f001 f930 	bl	80042f8 <HAL_GPIO_WritePin>
      if (LevelC_persen > g_params.sumber_kosong)
 8003098:	e02c      	b.n	80030f4 <Run_Control_Logic+0x3bc>
                          GPIO_PIN_SET);
      }
    }
    else if (state_B == STATE_FILLING)
 800309a:	4b2b      	ldr	r3, [pc, #172]	@ (8003148 <Run_Control_Logic+0x410>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d128      	bne.n	80030f4 <Run_Control_Logic+0x3bc>
    {
      if (LevelB_persen >= g_params.target_penuh_B || LevelC_persen <= g_params.sumber_kosong)
 80030a2:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <Run_Control_Logic+0x400>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	4a26      	ldr	r2, [pc, #152]	@ (8003140 <Run_Control_Logic+0x408>)
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe f811 	bl	80010d4 <__aeabi_fcmple>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <Run_Control_Logic+0x396>
 80030b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <Run_Control_Logic+0x400>)
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <Run_Control_Logic+0x3f4>)
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f810 	bl	80010e8 <__aeabi_fcmpge>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <Run_Control_Logic+0x3bc>
      {
        state_B = STATE_IDLE;
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <Run_Control_Logic+0x410>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin,
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030da:	481a      	ldr	r0, [pc, #104]	@ (8003144 <Run_Control_Logic+0x40c>)
 80030dc:	f001 f90c 	bl	80042f8 <HAL_GPIO_WritePin>
 80030e0:	e008      	b.n	80030f4 <Run_Control_Logic+0x3bc>
      }
    }
  }
  else
  {
    state_B = STATE_IDLE;
 80030e2:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <Run_Control_Logic+0x410>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030ee:	4815      	ldr	r0, [pc, #84]	@ (8003144 <Run_Control_Logic+0x40c>)
 80030f0:	f001 f902 	bl	80042f8 <HAL_GPIO_WritePin>
  }

  if (LevelC_persen <= g_params.ambang_bawah_C)
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <Run_Control_Logic+0x400>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a0c      	ldr	r2, [pc, #48]	@ (800312c <Run_Control_Logic+0x3f4>)
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fff2 	bl	80010e8 <__aeabi_fcmpge>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <Run_Control_Logic+0x3e0>
  {
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800310a:	2201      	movs	r2, #1
 800310c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003110:	480c      	ldr	r0, [pc, #48]	@ (8003144 <Run_Control_Logic+0x40c>)
 8003112:	f001 f8f1 	bl	80042f8 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
  }
}
 8003116:	e005      	b.n	8003124 <Run_Control_Logic+0x3ec>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800311e:	4809      	ldr	r0, [pc, #36]	@ (8003144 <Run_Control_Logic+0x40c>)
 8003120:	f001 f8ea 	bl	80042f8 <HAL_GPIO_WritePin>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200006a4 	.word	0x200006a4
 8003130:	42c80000 	.word	0x42c80000
 8003134:	200006a8 	.word	0x200006a8
 8003138:	200006ac 	.word	0x200006ac
 800313c:	2000069c 	.word	0x2000069c
 8003140:	200006a0 	.word	0x200006a0
 8003144:	40010c00 	.word	0x40010c00
 8003148:	200006a9 	.word	0x200006a9

0800314c <Update_LCD_Display>:

void Update_LCD_Display(void)
{
 800314c:	b5b0      	push	{r4, r5, r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af02      	add	r7, sp, #8
  lcd_set_cursor(0, 0);
 8003152:	2100      	movs	r1, #0
 8003154:	2000      	movs	r0, #0
 8003156:	f7fe fd49 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "A:%3.0f%% B:%3.0f%%", LevelA_persen, LevelB_persen);
 800315a:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <Update_LCD_Display+0x98>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f962 	bl	8000428 <__aeabi_f2d>
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
 8003168:	4b1f      	ldr	r3, [pc, #124]	@ (80031e8 <Update_LCD_Display+0x9c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f95b 	bl	8000428 <__aeabi_f2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	e9cd 2300 	strd	r2, r3, [sp]
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	491b      	ldr	r1, [pc, #108]	@ (80031ec <Update_LCD_Display+0xa0>)
 8003180:	481b      	ldr	r0, [pc, #108]	@ (80031f0 <Update_LCD_Display+0xa4>)
 8003182:	f00a ff43 	bl	800e00c <siprintf>
  lcd_send_string(lcd_buffer);
 8003186:	481a      	ldr	r0, [pc, #104]	@ (80031f0 <Update_LCD_Display+0xa4>)
 8003188:	f7fe fd96 	bl	8001cb8 <lcd_send_string>
  lcd_set_cursor(1, 0);
 800318c:	2100      	movs	r1, #0
 800318e:	2001      	movs	r0, #1
 8003190:	f7fe fd2c 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8003194:	4b17      	ldr	r3, [pc, #92]	@ (80031f4 <Update_LCD_Display+0xa8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd f945 	bl	8000428 <__aeabi_f2d>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
          (state_A == STATE_FILLING) ? 'A' : ' ',
 80031a2:	4915      	ldr	r1, [pc, #84]	@ (80031f8 <Update_LCD_Display+0xac>)
 80031a4:	7809      	ldrb	r1, [r1, #0]
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 80031a6:	2901      	cmp	r1, #1
 80031a8:	d101      	bne.n	80031ae <Update_LCD_Display+0x62>
 80031aa:	2141      	movs	r1, #65	@ 0x41
 80031ac:	e000      	b.n	80031b0 <Update_LCD_Display+0x64>
 80031ae:	2120      	movs	r1, #32
          (state_B == STATE_FILLING) ? 'B' : ' ');
 80031b0:	4812      	ldr	r0, [pc, #72]	@ (80031fc <Update_LCD_Display+0xb0>)
 80031b2:	7800      	ldrb	r0, [r0, #0]
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 80031b4:	2801      	cmp	r0, #1
 80031b6:	d101      	bne.n	80031bc <Update_LCD_Display+0x70>
 80031b8:	2042      	movs	r0, #66	@ 0x42
 80031ba:	e000      	b.n	80031be <Update_LCD_Display+0x72>
 80031bc:	2020      	movs	r0, #32
 80031be:	9001      	str	r0, [sp, #4]
 80031c0:	9100      	str	r1, [sp, #0]
 80031c2:	490f      	ldr	r1, [pc, #60]	@ (8003200 <Update_LCD_Display+0xb4>)
 80031c4:	480a      	ldr	r0, [pc, #40]	@ (80031f0 <Update_LCD_Display+0xa4>)
 80031c6:	f00a ff21 	bl	800e00c <siprintf>
  lcd_send_string("                ");
 80031ca:	480e      	ldr	r0, [pc, #56]	@ (8003204 <Update_LCD_Display+0xb8>)
 80031cc:	f7fe fd74 	bl	8001cb8 <lcd_send_string>
  lcd_set_cursor(1, 0);
 80031d0:	2100      	movs	r1, #0
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fe fd0a 	bl	8001bec <lcd_set_cursor>
  lcd_send_string(lcd_buffer);
 80031d8:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <Update_LCD_Display+0xa4>)
 80031da:	f7fe fd6d 	bl	8001cb8 <lcd_send_string>
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	2000069c 	.word	0x2000069c
 80031e8:	200006a0 	.word	0x200006a0
 80031ec:	080127ac 	.word	0x080127ac
 80031f0:	20000688 	.word	0x20000688
 80031f4:	200006a4 	.word	0x200006a4
 80031f8:	200006a8 	.word	0x200006a8
 80031fc:	200006a9 	.word	0x200006a9
 8003200:	080127c0 	.word	0x080127c0
 8003204:	080127d4 	.word	0x080127d4

08003208 <CDC_On_Receive>:

/**
 * @brief  Callback ini dipanggil dari usbd_cdc_if.c setiap kali data diterima dari USB VCP.
 */
void CDC_On_Receive(uint8_t *Buf, uint32_t Len)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < Len; i++)
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e039      	b.n	800328c <CDC_On_Receive+0x84>
  {
    // Cek jika buffer penuh
    if (g_rx_index >= RX_BUFFER_SIZE - 1)
 8003218:	4b21      	ldr	r3, [pc, #132]	@ (80032a0 <CDC_On_Receive+0x98>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b7e      	cmp	r3, #126	@ 0x7e
 800321e:	d907      	bls.n	8003230 <CDC_On_Receive+0x28>
    {
      g_rx_index = 0; // Reset jika overflow
 8003220:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <CDC_On_Receive+0x98>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
      memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	2100      	movs	r1, #0
 800322a:	481e      	ldr	r0, [pc, #120]	@ (80032a4 <CDC_On_Receive+0x9c>)
 800322c:	f00a ffbe 	bl	800e1ac <memset>
    }

    // Echo karakter kembali ke terminal
    CDC_Transmit_FS(&Buf[i], 1);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f009 fbe3 	bl	800ca04 <CDC_Transmit_FS>

    // Jika menerima Enter (CR) atau Newline (LF)
    if (Buf[i] == '\r' || Buf[i] == '\n')
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b0d      	cmp	r3, #13
 8003248:	d005      	beq.n	8003256 <CDC_On_Receive+0x4e>
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b0a      	cmp	r3, #10
 8003254:	d10c      	bne.n	8003270 <CDC_On_Receive+0x68>
    {
      // Abaikan jika buffer kosong
      if (g_rx_index > 0)
 8003256:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <CDC_On_Receive+0x98>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <CDC_On_Receive+0x7e>
      {
        g_usb_rx_buffer[g_rx_index] = '\0'; // Null-terminate string
 800325e:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <CDC_On_Receive+0x98>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a10      	ldr	r2, [pc, #64]	@ (80032a4 <CDC_On_Receive+0x9c>)
 8003264:	2100      	movs	r1, #0
 8003266:	54d1      	strb	r1, [r2, r3]
        g_command_ready = 1;                // Set flag untuk diproses di main loop
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <CDC_On_Receive+0xa0>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
      if (g_rx_index > 0)
 800326e:	e00a      	b.n	8003286 <CDC_On_Receive+0x7e>
      }
    }
    else
    {
      g_usb_rx_buffer[g_rx_index++] = Buf[i]; // Tambahkan karakter ke buffer
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	441a      	add	r2, r3
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <CDC_On_Receive+0x98>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	4808      	ldr	r0, [pc, #32]	@ (80032a0 <CDC_On_Receive+0x98>)
 800327e:	6001      	str	r1, [r0, #0]
 8003280:	7811      	ldrb	r1, [r2, #0]
 8003282:	4a08      	ldr	r2, [pc, #32]	@ (80032a4 <CDC_On_Receive+0x9c>)
 8003284:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i < Len; i++)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3301      	adds	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d3c1      	bcc.n	8003218 <CDC_On_Receive+0x10>
    }
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	2000075c 	.word	0x2000075c
 80032a4:	200006dc 	.word	0x200006dc
 80032a8:	20000760 	.word	0x20000760

080032ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b0:	b672      	cpsid	i
}
 80032b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <Error_Handler+0x8>

080032b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <HAL_MspInit+0x5c>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	4a14      	ldr	r2, [pc, #80]	@ (8003314 <HAL_MspInit+0x5c>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6193      	str	r3, [r2, #24]
 80032ca:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <HAL_MspInit+0x5c>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <HAL_MspInit+0x5c>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a0e      	ldr	r2, [pc, #56]	@ (8003314 <HAL_MspInit+0x5c>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <HAL_MspInit+0x5c>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <HAL_MspInit+0x60>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <HAL_MspInit+0x60>)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000

0800331c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <HAL_I2C_MspInit+0x90>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d132      	bne.n	80033a2 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003342:	f043 0308 	orr.w	r3, r3, #8
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003354:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335a:	2312      	movs	r3, #18
 800335c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	4812      	ldr	r0, [pc, #72]	@ (80033b4 <HAL_I2C_MspInit+0x98>)
 800336a:	f000 fe41 	bl	8003ff0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800336e:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <HAL_I2C_MspInit+0x9c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
 8003384:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <HAL_I2C_MspInit+0x9c>)
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800338a:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4a08      	ldr	r2, [pc, #32]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003390:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003394:	61d3      	str	r3, [r2, #28]
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033a2:	bf00      	nop
 80033a4:	3728      	adds	r7, #40	@ 0x28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40005400 	.word	0x40005400
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40010c00 	.word	0x40010c00
 80033b8:	40010000 	.word	0x40010000

080033bc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0b      	ldr	r2, [pc, #44]	@ (80033f8 <HAL_RTC_MspInit+0x3c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d110      	bne.n	80033f0 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80033ce:	f003 f9a7 	bl	8006720 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <HAL_RTC_MspInit+0x40>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a09      	ldr	r2, [pc, #36]	@ (80033fc <HAL_RTC_MspInit+0x40>)
 80033d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033dc:	61d3      	str	r3, [r2, #28]
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HAL_RTC_MspInit+0x40>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RTC_MspInit+0x44>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40002800 	.word	0x40002800
 80033fc:	40021000 	.word	0x40021000
 8003400:	4242043c 	.word	0x4242043c

08003404 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1b      	ldr	r2, [pc, #108]	@ (800348c <HAL_SPI_MspInit+0x88>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d12f      	bne.n	8003484 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_SPI_MspInit+0x8c>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <HAL_SPI_MspInit+0x8c>)
 800342a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <HAL_SPI_MspInit+0x8c>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_SPI_MspInit+0x8c>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_SPI_MspInit+0x8c>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6193      	str	r3, [r2, #24]
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_SPI_MspInit+0x8c>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003454:	23a0      	movs	r3, #160	@ 0xa0
 8003456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	4619      	mov	r1, r3
 8003466:	480b      	ldr	r0, [pc, #44]	@ (8003494 <HAL_SPI_MspInit+0x90>)
 8003468:	f000 fdc2 	bl	8003ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800346c:	2340      	movs	r3, #64	@ 0x40
 800346e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	f107 0310 	add.w	r3, r7, #16
 800347c:	4619      	mov	r1, r3
 800347e:	4805      	ldr	r0, [pc, #20]	@ (8003494 <HAL_SPI_MspInit+0x90>)
 8003480:	f000 fdb6 	bl	8003ff0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40013000 	.word	0x40013000
 8003490:	40021000 	.word	0x40021000
 8003494:	40010800 	.word	0x40010800

08003498 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08e      	sub	sp, #56	@ 0x38
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b6:	d13f      	bne.n	8003538 <HAL_TIM_Base_MspInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034b8:	4b5c      	ldr	r3, [pc, #368]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a5b      	ldr	r2, [pc, #364]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	61d3      	str	r3, [r2, #28]
 80034c4:	4b59      	ldr	r3, [pc, #356]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d0:	4b56      	ldr	r3, [pc, #344]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4a55      	ldr	r2, [pc, #340]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	6193      	str	r3, [r2, #24]
 80034dc:	4b53      	ldr	r3, [pc, #332]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f107 0320 	add.w	r3, r7, #32
 80034fa:	4619      	mov	r1, r3
 80034fc:	484c      	ldr	r0, [pc, #304]	@ (8003630 <HAL_TIM_Base_MspInit+0x198>)
 80034fe:	f000 fd77 	bl	8003ff0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003502:	4b4c      	ldr	r3, [pc, #304]	@ (8003634 <HAL_TIM_Base_MspInit+0x19c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003520:	4a44      	ldr	r2, [pc, #272]	@ (8003634 <HAL_TIM_Base_MspInit+0x19c>)
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	201c      	movs	r0, #28
 800352c:	f000 fb29 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003530:	201c      	movs	r0, #28
 8003532:	f000 fb42 	bl	8003bba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003536:	e074      	b.n	8003622 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3e      	ldr	r2, [pc, #248]	@ (8003638 <HAL_TIM_Base_MspInit+0x1a0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d13e      	bne.n	80035c0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003542:	4b3a      	ldr	r3, [pc, #232]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4a39      	ldr	r2, [pc, #228]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	61d3      	str	r3, [r2, #28]
 800354e:	4b37      	ldr	r3, [pc, #220]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	4a33      	ldr	r2, [pc, #204]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 8003560:	f043 0308 	orr.w	r3, r3, #8
 8003564:	6193      	str	r3, [r2, #24]
 8003566:	4b31      	ldr	r3, [pc, #196]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003572:	2310      	movs	r3, #16
 8003574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357e:	f107 0320 	add.w	r3, r7, #32
 8003582:	4619      	mov	r1, r3
 8003584:	482d      	ldr	r0, [pc, #180]	@ (800363c <HAL_TIM_Base_MspInit+0x1a4>)
 8003586:	f000 fd33 	bl	8003ff0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800358a:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <HAL_TIM_Base_MspInit+0x19c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003592:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800359e:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a8:	4a22      	ldr	r2, [pc, #136]	@ (8003634 <HAL_TIM_Base_MspInit+0x19c>)
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	201d      	movs	r0, #29
 80035b4:	f000 fae5 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035b8:	201d      	movs	r0, #29
 80035ba:	f000 fafe 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 80035be:	e030      	b.n	8003622 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003640 <HAL_TIM_Base_MspInit+0x1a8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d12b      	bne.n	8003622 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4a17      	ldr	r2, [pc, #92]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	61d3      	str	r3, [r2, #28]
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e2:	4b12      	ldr	r3, [pc, #72]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	4a11      	ldr	r2, [pc, #68]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6193      	str	r3, [r2, #24]
 80035ee:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <HAL_TIM_Base_MspInit+0x194>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035fa:	2340      	movs	r3, #64	@ 0x40
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003606:	f107 0320 	add.w	r3, r7, #32
 800360a:	4619      	mov	r1, r3
 800360c:	480b      	ldr	r0, [pc, #44]	@ (800363c <HAL_TIM_Base_MspInit+0x1a4>)
 800360e:	f000 fcef 	bl	8003ff0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003612:	2200      	movs	r2, #0
 8003614:	2100      	movs	r1, #0
 8003616:	201e      	movs	r0, #30
 8003618:	f000 fab3 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800361c:	201e      	movs	r0, #30
 800361e:	f000 facc 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3738      	adds	r7, #56	@ 0x38
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40010800 	.word	0x40010800
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40010c00 	.word	0x40010c00
 8003640:	40000800 	.word	0x40000800

08003644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <NMI_Handler+0x4>

0800364c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <HardFault_Handler+0x4>

08003654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <MemManage_Handler+0x4>

0800365c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <BusFault_Handler+0x4>

08003664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <UsageFault_Handler+0x4>

0800366c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003694:	f000 f95e 	bl	8003954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80036a0:	4802      	ldr	r0, [pc, #8]	@ (80036ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80036a2:	f001 fbf9 	bl	8004e98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	2000147c 	.word	0x2000147c

080036b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036b4:	4802      	ldr	r0, [pc, #8]	@ (80036c0 <TIM2_IRQHandler+0x10>)
 80036b6:	f004 fbc9 	bl	8007e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200004ac 	.word	0x200004ac

080036c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036c8:	4802      	ldr	r0, [pc, #8]	@ (80036d4 <TIM3_IRQHandler+0x10>)
 80036ca:	f004 fbbf 	bl	8007e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200004f4 	.word	0x200004f4

080036d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036dc:	4802      	ldr	r0, [pc, #8]	@ (80036e8 <TIM4_IRQHandler+0x10>)
 80036de:	f004 fbb5 	bl	8007e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000053c 	.word	0x2000053c

080036ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return 1;
 80036f0:	2301      	movs	r3, #1
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <_kill>:

int _kill(int pid, int sig)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003704:	f00a fdb6 	bl	800e274 <__errno>
 8003708:	4603      	mov	r3, r0
 800370a:	2216      	movs	r2, #22
 800370c:	601a      	str	r2, [r3, #0]
  return -1;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_exit>:

void _exit (int status)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003722:	f04f 31ff 	mov.w	r1, #4294967295
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffe7 	bl	80036fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <_exit+0x12>

08003730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e00a      	b.n	8003758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003742:	f3af 8000 	nop.w
 8003746:	4601      	mov	r1, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	60ba      	str	r2, [r7, #8]
 800374e:	b2ca      	uxtb	r2, r1
 8003750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3301      	adds	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	dbf0      	blt.n	8003742 <_read+0x12>
  }

  return len;
 8003760:	687b      	ldr	r3, [r7, #4]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e009      	b.n	8003790 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	60ba      	str	r2, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	dbf1      	blt.n	800377c <_write+0x12>
  }
  return len;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_close>:

int _close(int file)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037c8:	605a      	str	r2, [r3, #4]
  return 0;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <_isatty>:

int _isatty(int file)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
	...

08003804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800380c:	4a14      	ldr	r2, [pc, #80]	@ (8003860 <_sbrk+0x5c>)
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <_sbrk+0x60>)
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <_sbrk+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <_sbrk+0x64>)
 8003822:	4a12      	ldr	r2, [pc, #72]	@ (800386c <_sbrk+0x68>)
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <_sbrk+0x64>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d207      	bcs.n	8003844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003834:	f00a fd1e 	bl	800e274 <__errno>
 8003838:	4603      	mov	r3, r0
 800383a:	220c      	movs	r2, #12
 800383c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	e009      	b.n	8003858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003844:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <_sbrk+0x64>)
 8003854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20005000 	.word	0x20005000
 8003864:	00000400 	.word	0x00000400
 8003868:	20000778 	.word	0x20000778
 800386c:	20001ac0 	.word	0x20001ac0

08003870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800387c:	f7ff fff8 	bl	8003870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003880:	480b      	ldr	r0, [pc, #44]	@ (80038b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003882:	490c      	ldr	r1, [pc, #48]	@ (80038b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003884:	4a0c      	ldr	r2, [pc, #48]	@ (80038b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a09      	ldr	r2, [pc, #36]	@ (80038bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003898:	4c09      	ldr	r4, [pc, #36]	@ (80038c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038a6:	f00a fceb 	bl	800e280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038aa:	f7fe fa1b 	bl	8001ce4 <main>
  bx lr
 80038ae:	4770      	bx	lr
  ldr r0, =_sdata
 80038b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b4:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80038b8:	08012d0c 	.word	0x08012d0c
  ldr r2, =_sbss
 80038bc:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80038c0:	20001ac0 	.word	0x20001ac0

080038c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c4:	e7fe      	b.n	80038c4 <ADC1_2_IRQHandler>
	...

080038c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <HAL_Init+0x28>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	@ (80038f0 <HAL_Init+0x28>)
 80038d2:	f043 0310 	orr.w	r3, r3, #16
 80038d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 f947 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038de:	200f      	movs	r0, #15
 80038e0:	f000 f808 	bl	80038f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e4:	f7ff fce8 	bl	80032b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000

080038f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_InitTick+0x54>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_InitTick+0x58>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f95f 	bl	8003bd6 <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f000 f927 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003934:	4a06      	ldr	r2, [pc, #24]	@ (8003950 <HAL_InitTick+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000004 	.word	0x20000004
 800394c:	2000000c 	.word	0x2000000c
 8003950:	20000008 	.word	0x20000008

08003954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_IncTick+0x1c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_IncTick+0x20>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a03      	ldr	r2, [pc, #12]	@ (8003974 <HAL_IncTick+0x20>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	2000000c 	.word	0x2000000c
 8003974:	2000077c 	.word	0x2000077c

08003978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b02      	ldr	r3, [pc, #8]	@ (8003988 <HAL_GetTick+0x10>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	2000077c 	.word	0x2000077c

0800398c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff fff0 	bl	8003978 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d005      	beq.n	80039b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <HAL_Delay+0x44>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039b2:	bf00      	nop
 80039b4:	f7ff ffe0 	bl	8003978 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d8f7      	bhi.n	80039b4 <HAL_Delay+0x28>
  {
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000000c 	.word	0x2000000c

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4906      	ldr	r1, [pc, #24]	@ (8003a6c <__NVIC_EnableIRQ+0x34>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	@ (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff90 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff2d 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff42 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff90 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5f 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff35 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa2 	bl	8003b28 <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc8 <HAL_FLASH_Program+0xd8>)
 8003c0c:	7e1b      	ldrb	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_FLASH_Program+0x26>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e054      	b.n	8003cc0 <HAL_FLASH_Program+0xd0>
 8003c16:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc8 <HAL_FLASH_Program+0xd8>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c20:	f000 f8a8 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d144      	bne.n	8003cb8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	757b      	strb	r3, [r7, #21]
 8003c38:	e007      	b.n	8003c4a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d102      	bne.n	8003c46 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003c40:	2302      	movs	r3, #2
 8003c42:	757b      	strb	r3, [r7, #21]
 8003c44:	e001      	b.n	8003c4a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003c46:	2304      	movs	r3, #4
 8003c48:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75bb      	strb	r3, [r7, #22]
 8003c4e:	e02d      	b.n	8003cac <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003c50:	7dbb      	ldrb	r3, [r7, #22]
 8003c52:	005a      	lsls	r2, r3, #1
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	eb02 0c03 	add.w	ip, r2, r3
 8003c5a:	7dbb      	ldrb	r3, [r7, #22]
 8003c5c:	0119      	lsls	r1, r3, #4
 8003c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c62:	f1c1 0620 	rsb	r6, r1, #32
 8003c66:	f1a1 0020 	sub.w	r0, r1, #32
 8003c6a:	fa22 f401 	lsr.w	r4, r2, r1
 8003c6e:	fa03 f606 	lsl.w	r6, r3, r6
 8003c72:	4334      	orrs	r4, r6
 8003c74:	fa23 f000 	lsr.w	r0, r3, r0
 8003c78:	4304      	orrs	r4, r0
 8003c7a:	fa23 f501 	lsr.w	r5, r3, r1
 8003c7e:	b2a3      	uxth	r3, r4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4660      	mov	r0, ip
 8003c84:	f000 f85a 	bl	8003d3c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c8c:	f000 f872 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_FLASH_Program+0xdc>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4a0c      	ldr	r2, [pc, #48]	@ (8003ccc <HAL_FLASH_Program+0xdc>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003ca6:	7dbb      	ldrb	r3, [r7, #22]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	75bb      	strb	r3, [r7, #22]
 8003cac:	7dba      	ldrb	r2, [r7, #22]
 8003cae:	7d7b      	ldrb	r3, [r7, #21]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3cd      	bcc.n	8003c50 <HAL_FLASH_Program+0x60>
 8003cb4:	e000      	b.n	8003cb8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003cb6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003cb8:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <HAL_FLASH_Program+0xd8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	761a      	strb	r2, [r3, #24]

  return status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc8:	20000780 	.word	0x20000780
 8003ccc:	40022000 	.word	0x40022000

08003cd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cda:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <HAL_FLASH_Unlock+0x40>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_FLASH_Unlock+0x40>)
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <HAL_FLASH_Unlock+0x44>)
 8003cea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cec:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <HAL_FLASH_Unlock+0x40>)
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_FLASH_Unlock+0x48>)
 8003cf0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cf2:	4b07      	ldr	r3, [pc, #28]	@ (8003d10 <HAL_FLASH_Unlock+0x40>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003d02:	79fb      	ldrb	r3, [r7, #7]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40022000 	.word	0x40022000
 8003d14:	45670123 	.word	0x45670123
 8003d18:	cdef89ab 	.word	0xcdef89ab

08003d1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_FLASH_Lock+0x1c>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <HAL_FLASH_Lock+0x1c>)
 8003d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40022000 	.word	0x40022000

08003d3c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d48:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <FLASH_Program_HalfWord+0x30>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d4e:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <FLASH_Program_HalfWord+0x34>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	4a07      	ldr	r2, [pc, #28]	@ (8003d70 <FLASH_Program_HalfWord+0x34>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	801a      	strh	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000780 	.word	0x20000780
 8003d70:	40022000 	.word	0x40022000

08003d74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003d7c:	f7ff fdfc 	bl	8003978 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d82:	e010      	b.n	8003da6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d00c      	beq.n	8003da6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <FLASH_WaitForLastOperation+0x2e>
 8003d92:	f7ff fdf1 	bl	8003978 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d201      	bcs.n	8003da6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e025      	b.n	8003df2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <FLASH_WaitForLastOperation+0x88>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e8      	bne.n	8003d84 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003db2:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <FLASH_WaitForLastOperation+0x88>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <FLASH_WaitForLastOperation+0x88>)
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <FLASH_WaitForLastOperation+0x88>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <FLASH_WaitForLastOperation+0x88>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ddc:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <FLASH_WaitForLastOperation+0x88>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003de8:	f000 f80a 	bl	8003e00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40022000 	.word	0x40022000

08003e00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003e0a:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003e16:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <FLASH_SetErrorCode+0x9c>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003e9c <FLASH_SetErrorCode+0x9c>)
 8003e20:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f043 0310 	orr.w	r3, r3, #16
 8003e28:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003e36:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <FLASH_SetErrorCode+0x9c>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <FLASH_SetErrorCode+0x9c>)
 8003e40:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003e4a:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003e56:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <FLASH_SetErrorCode+0x9c>)
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e9c <FLASH_SetErrorCode+0x9c>)
 8003e60:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003e62:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f240 1201 	movw	r2, #257	@ 0x101
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d106      	bne.n	8003e86 <FLASH_SetErrorCode+0x86>
 8003e78:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4a06      	ldr	r2, [pc, #24]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	61d3      	str	r3, [r2, #28]
}  
 8003e84:	e002      	b.n	8003e8c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e86:	4a04      	ldr	r2, [pc, #16]	@ (8003e98 <FLASH_SetErrorCode+0x98>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60d3      	str	r3, [r2, #12]
}  
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40022000 	.word	0x40022000
 8003e9c:	20000780 	.word	0x20000780

08003ea0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <HAL_FLASHEx_Erase+0xd0>)
 8003eb4:	7e1b      	ldrb	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_FLASHEx_Erase+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e053      	b.n	8003f66 <HAL_FLASHEx_Erase+0xc6>
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8003f70 <HAL_FLASHEx_Erase+0xd0>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d116      	bne.n	8003efa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003ecc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ed0:	f7ff ff50 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d141      	bne.n	8003f5e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f000 f84c 	bl	8003f78 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ee0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ee4:	f7ff ff46 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003eec:	4b21      	ldr	r3, [pc, #132]	@ (8003f74 <HAL_FLASHEx_Erase+0xd4>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	@ (8003f74 <HAL_FLASHEx_Erase+0xd4>)
 8003ef2:	f023 0304 	bic.w	r3, r3, #4
 8003ef6:	6113      	str	r3, [r2, #16]
 8003ef8:	e031      	b.n	8003f5e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003efa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003efe:	f7ff ff39 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d12a      	bne.n	8003f5e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	e019      	b.n	8003f4c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003f18:	68b8      	ldr	r0, [r7, #8]
 8003f1a:	f000 f849 	bl	8003fb0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f1e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f22:	f7ff ff27 	bl	8003d74 <FLASH_WaitForLastOperation>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003f2a:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <HAL_FLASHEx_Erase+0xd4>)
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	4a11      	ldr	r2, [pc, #68]	@ (8003f74 <HAL_FLASHEx_Erase+0xd4>)
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	601a      	str	r2, [r3, #0]
            break;
 8003f42:	e00c      	b.n	8003f5e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f4a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	029a      	lsls	r2, r3, #10
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4413      	add	r3, r2
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3dc      	bcc.n	8003f18 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f5e:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <HAL_FLASHEx_Erase+0xd0>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	761a      	strb	r2, [r3, #24]

  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000780 	.word	0x20000780
 8003f74:	40022000 	.word	0x40022000

08003f78 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <FLASH_MassErase+0x30>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f86:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <FLASH_MassErase+0x34>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	4a08      	ldr	r2, [pc, #32]	@ (8003fac <FLASH_MassErase+0x34>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <FLASH_MassErase+0x34>)
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <FLASH_MassErase+0x34>)
 8003f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f9c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	20000780 	.word	0x20000780
 8003fac:	40022000 	.word	0x40022000

08003fb0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <FLASH_PageErase+0x38>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <FLASH_PageErase+0x3c>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <FLASH_PageErase+0x3c>)
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003fca:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <FLASH_PageErase+0x3c>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003fd0:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <FLASH_PageErase+0x3c>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	4a05      	ldr	r2, [pc, #20]	@ (8003fec <FLASH_PageErase+0x3c>)
 8003fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fda:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000780 	.word	0x20000780
 8003fec:	40022000 	.word	0x40022000

08003ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b08b      	sub	sp, #44	@ 0x2c
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004002:	e169      	b.n	80042d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004004:	2201      	movs	r2, #1
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	f040 8158 	bne.w	80042d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4a9a      	ldr	r2, [pc, #616]	@ (8004290 <HAL_GPIO_Init+0x2a0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d05e      	beq.n	80040ea <HAL_GPIO_Init+0xfa>
 800402c:	4a98      	ldr	r2, [pc, #608]	@ (8004290 <HAL_GPIO_Init+0x2a0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d875      	bhi.n	800411e <HAL_GPIO_Init+0x12e>
 8004032:	4a98      	ldr	r2, [pc, #608]	@ (8004294 <HAL_GPIO_Init+0x2a4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d058      	beq.n	80040ea <HAL_GPIO_Init+0xfa>
 8004038:	4a96      	ldr	r2, [pc, #600]	@ (8004294 <HAL_GPIO_Init+0x2a4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d86f      	bhi.n	800411e <HAL_GPIO_Init+0x12e>
 800403e:	4a96      	ldr	r2, [pc, #600]	@ (8004298 <HAL_GPIO_Init+0x2a8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d052      	beq.n	80040ea <HAL_GPIO_Init+0xfa>
 8004044:	4a94      	ldr	r2, [pc, #592]	@ (8004298 <HAL_GPIO_Init+0x2a8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d869      	bhi.n	800411e <HAL_GPIO_Init+0x12e>
 800404a:	4a94      	ldr	r2, [pc, #592]	@ (800429c <HAL_GPIO_Init+0x2ac>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d04c      	beq.n	80040ea <HAL_GPIO_Init+0xfa>
 8004050:	4a92      	ldr	r2, [pc, #584]	@ (800429c <HAL_GPIO_Init+0x2ac>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d863      	bhi.n	800411e <HAL_GPIO_Init+0x12e>
 8004056:	4a92      	ldr	r2, [pc, #584]	@ (80042a0 <HAL_GPIO_Init+0x2b0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d046      	beq.n	80040ea <HAL_GPIO_Init+0xfa>
 800405c:	4a90      	ldr	r2, [pc, #576]	@ (80042a0 <HAL_GPIO_Init+0x2b0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d85d      	bhi.n	800411e <HAL_GPIO_Init+0x12e>
 8004062:	2b12      	cmp	r3, #18
 8004064:	d82a      	bhi.n	80040bc <HAL_GPIO_Init+0xcc>
 8004066:	2b12      	cmp	r3, #18
 8004068:	d859      	bhi.n	800411e <HAL_GPIO_Init+0x12e>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <HAL_GPIO_Init+0x80>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	080040eb 	.word	0x080040eb
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040d7 	.word	0x080040d7
 800407c:	08004119 	.word	0x08004119
 8004080:	0800411f 	.word	0x0800411f
 8004084:	0800411f 	.word	0x0800411f
 8004088:	0800411f 	.word	0x0800411f
 800408c:	0800411f 	.word	0x0800411f
 8004090:	0800411f 	.word	0x0800411f
 8004094:	0800411f 	.word	0x0800411f
 8004098:	0800411f 	.word	0x0800411f
 800409c:	0800411f 	.word	0x0800411f
 80040a0:	0800411f 	.word	0x0800411f
 80040a4:	0800411f 	.word	0x0800411f
 80040a8:	0800411f 	.word	0x0800411f
 80040ac:	0800411f 	.word	0x0800411f
 80040b0:	0800411f 	.word	0x0800411f
 80040b4:	080040cd 	.word	0x080040cd
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	4a79      	ldr	r2, [pc, #484]	@ (80042a4 <HAL_GPIO_Init+0x2b4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040c2:	e02c      	b.n	800411e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	623b      	str	r3, [r7, #32]
          break;
 80040ca:	e029      	b.n	8004120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	3304      	adds	r3, #4
 80040d2:	623b      	str	r3, [r7, #32]
          break;
 80040d4:	e024      	b.n	8004120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	3308      	adds	r3, #8
 80040dc:	623b      	str	r3, [r7, #32]
          break;
 80040de:	e01f      	b.n	8004120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	330c      	adds	r3, #12
 80040e6:	623b      	str	r3, [r7, #32]
          break;
 80040e8:	e01a      	b.n	8004120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040f2:	2304      	movs	r3, #4
 80040f4:	623b      	str	r3, [r7, #32]
          break;
 80040f6:	e013      	b.n	8004120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004100:	2308      	movs	r3, #8
 8004102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	611a      	str	r2, [r3, #16]
          break;
 800410a:	e009      	b.n	8004120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800410c:	2308      	movs	r3, #8
 800410e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	615a      	str	r2, [r3, #20]
          break;
 8004116:	e003      	b.n	8004120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004118:	2300      	movs	r3, #0
 800411a:	623b      	str	r3, [r7, #32]
          break;
 800411c:	e000      	b.n	8004120 <HAL_GPIO_Init+0x130>
          break;
 800411e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2bff      	cmp	r3, #255	@ 0xff
 8004124:	d801      	bhi.n	800412a <HAL_GPIO_Init+0x13a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	e001      	b.n	800412e <HAL_GPIO_Init+0x13e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2bff      	cmp	r3, #255	@ 0xff
 8004134:	d802      	bhi.n	800413c <HAL_GPIO_Init+0x14c>
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	e002      	b.n	8004142 <HAL_GPIO_Init+0x152>
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	3b08      	subs	r3, #8
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	210f      	movs	r1, #15
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	401a      	ands	r2, r3
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	431a      	orrs	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80b1 	beq.w	80042d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004170:	4b4d      	ldr	r3, [pc, #308]	@ (80042a8 <HAL_GPIO_Init+0x2b8>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4a4c      	ldr	r2, [pc, #304]	@ (80042a8 <HAL_GPIO_Init+0x2b8>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6193      	str	r3, [r2, #24]
 800417c:	4b4a      	ldr	r3, [pc, #296]	@ (80042a8 <HAL_GPIO_Init+0x2b8>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004188:	4a48      	ldr	r2, [pc, #288]	@ (80042ac <HAL_GPIO_Init+0x2bc>)
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	220f      	movs	r2, #15
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a40      	ldr	r2, [pc, #256]	@ (80042b0 <HAL_GPIO_Init+0x2c0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_GPIO_Init+0x1ec>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a3f      	ldr	r2, [pc, #252]	@ (80042b4 <HAL_GPIO_Init+0x2c4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00d      	beq.n	80041d8 <HAL_GPIO_Init+0x1e8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3e      	ldr	r2, [pc, #248]	@ (80042b8 <HAL_GPIO_Init+0x2c8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <HAL_GPIO_Init+0x1e4>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3d      	ldr	r2, [pc, #244]	@ (80042bc <HAL_GPIO_Init+0x2cc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_GPIO_Init+0x1e0>
 80041cc:	2303      	movs	r3, #3
 80041ce:	e006      	b.n	80041de <HAL_GPIO_Init+0x1ee>
 80041d0:	2304      	movs	r3, #4
 80041d2:	e004      	b.n	80041de <HAL_GPIO_Init+0x1ee>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e002      	b.n	80041de <HAL_GPIO_Init+0x1ee>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_GPIO_Init+0x1ee>
 80041dc:	2300      	movs	r3, #0
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	f002 0203 	and.w	r2, r2, #3
 80041e4:	0092      	lsls	r2, r2, #2
 80041e6:	4093      	lsls	r3, r2
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041ee:	492f      	ldr	r1, [pc, #188]	@ (80042ac <HAL_GPIO_Init+0x2bc>)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	3302      	adds	r3, #2
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004208:	4b2d      	ldr	r3, [pc, #180]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	492c      	ldr	r1, [pc, #176]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004216:	4b2a      	ldr	r3, [pc, #168]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	43db      	mvns	r3, r3
 800421e:	4928      	ldr	r1, [pc, #160]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004220:	4013      	ands	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d006      	beq.n	800423e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004230:	4b23      	ldr	r3, [pc, #140]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	4922      	ldr	r1, [pc, #136]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
 800423c:	e006      	b.n	800424c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800423e:	4b20      	ldr	r3, [pc, #128]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	43db      	mvns	r3, r3
 8004246:	491e      	ldr	r1, [pc, #120]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004248:	4013      	ands	r3, r2
 800424a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004258:	4b19      	ldr	r3, [pc, #100]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	4918      	ldr	r1, [pc, #96]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
 8004264:	e006      	b.n	8004274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004266:	4b16      	ldr	r3, [pc, #88]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	43db      	mvns	r3, r3
 800426e:	4914      	ldr	r1, [pc, #80]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004270:	4013      	ands	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d021      	beq.n	80042c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004280:	4b0f      	ldr	r3, [pc, #60]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	490e      	ldr	r1, [pc, #56]	@ (80042c0 <HAL_GPIO_Init+0x2d0>)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e021      	b.n	80042d2 <HAL_GPIO_Init+0x2e2>
 800428e:	bf00      	nop
 8004290:	10320000 	.word	0x10320000
 8004294:	10310000 	.word	0x10310000
 8004298:	10220000 	.word	0x10220000
 800429c:	10210000 	.word	0x10210000
 80042a0:	10120000 	.word	0x10120000
 80042a4:	10110000 	.word	0x10110000
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40010800 	.word	0x40010800
 80042b4:	40010c00 	.word	0x40010c00
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40011400 	.word	0x40011400
 80042c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_GPIO_Init+0x304>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4909      	ldr	r1, [pc, #36]	@ (80042f4 <HAL_GPIO_Init+0x304>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	3301      	adds	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f47f ae8e 	bne.w	8004004 <HAL_GPIO_Init+0x14>
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	372c      	adds	r7, #44	@ 0x2c
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	40010400 	.word	0x40010400

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	611a      	str	r2, [r3, #16]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e12b      	b.n	8004592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe ffe4 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	@ 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800438c:	f002 fd9e 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a81      	ldr	r2, [pc, #516]	@ (800459c <HAL_I2C_Init+0x274>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d807      	bhi.n	80043ac <HAL_I2C_Init+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a80      	ldr	r2, [pc, #512]	@ (80045a0 <HAL_I2C_Init+0x278>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e006      	b.n	80043ba <HAL_I2C_Init+0x92>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a7d      	ldr	r2, [pc, #500]	@ (80045a4 <HAL_I2C_Init+0x27c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0e7      	b.n	8004592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a78      	ldr	r2, [pc, #480]	@ (80045a8 <HAL_I2C_Init+0x280>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0c9b      	lsrs	r3, r3, #18
 80043cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a6a      	ldr	r2, [pc, #424]	@ (800459c <HAL_I2C_Init+0x274>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d802      	bhi.n	80043fc <HAL_I2C_Init+0xd4>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	e009      	b.n	8004410 <HAL_I2C_Init+0xe8>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <HAL_I2C_Init+0x284>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	3301      	adds	r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	495c      	ldr	r1, [pc, #368]	@ (800459c <HAL_I2C_Init+0x274>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d819      	bhi.n	8004464 <HAL_I2C_Init+0x13c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e59      	subs	r1, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fbb1 f3f3 	udiv	r3, r1, r3
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004444:	400b      	ands	r3, r1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_I2C_Init+0x138>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e59      	subs	r1, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fbb1 f3f3 	udiv	r3, r1, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	e051      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004460:	2304      	movs	r3, #4
 8004462:	e04f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <HAL_I2C_Init+0x168>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	fbb0 f3f3 	udiv	r3, r0, r3
 800447e:	3301      	adds	r3, #1
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e012      	b.n	80044b6 <HAL_I2C_Init+0x18e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Init+0x196>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_I2C_Init+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1e58      	subs	r0, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e2:	e00f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6809      	ldr	r1, [r1, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6911      	ldr	r1, [r2, #16]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	000186a0 	.word	0x000186a0
 80045a0:	001e847f 	.word	0x001e847f
 80045a4:	003d08ff 	.word	0x003d08ff
 80045a8:	431bde83 	.word	0x431bde83
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff f9d8 	bl	8003978 <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	f040 80e0 	bne.w	8004798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2319      	movs	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	4970      	ldr	r1, [pc, #448]	@ (80047a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f964 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0d3      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2C_Master_Transmit+0x50>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0cc      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d007      	beq.n	8004626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2221      	movs	r2, #33	@ 0x21
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2210      	movs	r2, #16
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	893a      	ldrh	r2, [r7, #8]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a50      	ldr	r2, [pc, #320]	@ (80047a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004668:	8979      	ldrh	r1, [r7, #10]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f89c 	bl	80047ac <I2C_MasterRequestWrite>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e08d      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004694:	e066      	b.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa22 	bl	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d107      	bne.n	80046be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06b      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11b      	bne.n	8004738 <HAL_I2C_Master_Transmit+0x188>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d017      	beq.n	8004738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa19 	bl	8004b74 <I2C_WaitOnBTFFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	2b04      	cmp	r3, #4
 800474e:	d107      	bne.n	8004760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e01a      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d194      	bne.n	8004696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	00100002 	.word	0x00100002
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d006      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d003      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d4:	d108      	bne.n	80047e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e00b      	b.n	8004800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ec:	2b12      	cmp	r3, #18
 80047ee:	d107      	bne.n	8004800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f84f 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004826:	d103      	bne.n	8004830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e035      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	e01b      	b.n	8004888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	11db      	asrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f063 030f 	orn	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	490e      	ldr	r1, [pc, #56]	@ (80048a8 <I2C_MasterRequestWrite+0xfc>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f898 	bl	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e010      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4907      	ldr	r1, [pc, #28]	@ (80048ac <I2C_MasterRequestWrite+0x100>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f888 	bl	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	00010008 	.word	0x00010008
 80048ac:	00010002 	.word	0x00010002

080048b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c0:	e048      	b.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d044      	beq.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7ff f855 	bl	8003978 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d139      	bne.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10d      	bne.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x56>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	e00c      	b.n	8004920 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	43da      	mvns	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	d116      	bne.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e023      	b.n	800499c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10d      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0xca>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	e00c      	b.n	8004994 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	43da      	mvns	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	429a      	cmp	r2, r3
 8004998:	d093      	beq.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b2:	e071      	b.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d123      	bne.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e067      	b.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d041      	beq.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fe ffb0 	bl	8003978 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d136      	bne.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e00b      	b.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e021      	b.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10c      	bne.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	43da      	mvns	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e00b      	b.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f47f af6d 	bne.w	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af0:	e034      	b.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f886 	bl	8004c04 <I2C_IsAcknowledgeFailed>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e034      	b.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d028      	beq.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0a:	f7fe ff35 	bl	8003978 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11d      	bne.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b80      	cmp	r3, #128	@ 0x80
 8004b2c:	d016      	beq.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d1c3      	bne.n	8004af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b80:	e034      	b.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f83e 	bl	8004c04 <I2C_IsAcknowledgeFailed>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e034      	b.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d028      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fe feed 	bl	8003978 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11d      	bne.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d016      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e007      	b.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d1c3      	bne.n	8004b82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d11b      	bne.n	8004c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0e8      	b.n	8004e44 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f007 fff0 	bl	800cc6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fe51 	bl	8008946 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cae:	f003 fe27 	bl	8008900 <USB_CoreInit>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0bf      	b.n	8004e44 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f003 fe55 	bl	800897a <USB_SetCurrentMode>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0b0      	b.n	8004e44 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e03e      	b.n	8004d66 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3311      	adds	r3, #17
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3310      	adds	r3, #16
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3313      	adds	r3, #19
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d24:	7bfa      	ldrb	r2, [r7, #15]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	3320      	adds	r3, #32
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	3324      	adds	r3, #36	@ 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	3301      	adds	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	791b      	ldrb	r3, [r3, #4]
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3bb      	bcc.n	8004ce8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e044      	b.n	8004e00 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	440b      	add	r3, r1
 8004d84:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d8c:	7bfa      	ldrb	r2, [r7, #15]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004da2:	7bfa      	ldrb	r2, [r7, #15]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	440b      	add	r3, r1
 8004ddc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	440b      	add	r3, r1
 8004df2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	791b      	ldrb	r3, [r3, #4]
 8004e04:	7bfa      	ldrb	r2, [r7, #15]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3b5      	bcc.n	8004d76 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e14:	f003 fdbd 	bl	8008992 <USB_DevInit>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e00c      	b.n	8004e44 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f006 f83c 	bl	800aeba <USB_DevDisconnect>

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_PCD_Start+0x16>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e016      	b.n	8004e90 <HAL_PCD_Start+0x44>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f003 fd53 	bl	800891a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004e74:	2101      	movs	r1, #1
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f008 f96b 	bl	800d152 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f006 f810 	bl	800aea6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f006 f812 	bl	800aece <USB_ReadInterrupts>
 8004eaa:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fb1a 	bl	80054f0 <PCD_EP_ISR_Handler>

    return;
 8004ebc:	e119      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eda:	b292      	uxth	r2, r2
 8004edc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f007 ff3e 	bl	800cd62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f905 	bl	80050f8 <HAL_PCD_SetAddress>

    return;
 8004eee:	e100      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f0c:	b292      	uxth	r2, r2
 8004f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f12:	e0ee      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f30:	b292      	uxth	r2, r2
 8004f32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f36:	e0dc      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d027      	beq.n	8004f92 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0204 	bic.w	r2, r2, #4
 8004f54:	b292      	uxth	r2, r2
 8004f56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0208 	bic.w	r2, r2, #8
 8004f6c:	b292      	uxth	r2, r2
 8004f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f007 ff2e 	bl	800cdd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f8a:	b292      	uxth	r2, r2
 8004f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f90:	e0af      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8083 	beq.w	80050a4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e010      	b.n	8004fc6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	7ffb      	ldrb	r3, [r7, #31]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	7ffb      	ldrb	r3, [r7, #31]
 8004fb2:	8812      	ldrh	r2, [r2, #0]
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	3320      	adds	r3, #32
 8004fba:	443b      	add	r3, r7
 8004fbc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004fc0:	7ffb      	ldrb	r3, [r7, #31]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	7ffb      	ldrb	r3, [r7, #31]
 8004fc8:	2b07      	cmp	r3, #7
 8004fca:	d9eb      	bls.n	8004fa4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004ffc:	bf00      	nop
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005006:	b29b      	uxth	r3, r3
 8005008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f6      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005022:	b292      	uxth	r2, r2
 8005024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e00f      	b.n	800504e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	4611      	mov	r1, r2
 8005036:	7ffa      	ldrb	r2, [r7, #31]
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	440a      	add	r2, r1
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	3320      	adds	r3, #32
 8005040:	443b      	add	r3, r7
 8005042:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005046:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005048:	7ffb      	ldrb	r3, [r7, #31]
 800504a:	3301      	adds	r3, #1
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	2b07      	cmp	r3, #7
 8005052:	d9ec      	bls.n	800502e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0208 	orr.w	r2, r2, #8
 8005066:	b292      	uxth	r2, r2
 8005068:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800507e:	b292      	uxth	r2, r2
 8005080:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0204 	orr.w	r2, r2, #4
 8005096:	b292      	uxth	r2, r2
 8005098:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f007 fe7f 	bl	800cda0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80050a2:	e026      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00f      	beq.n	80050ce <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050c0:	b292      	uxth	r2, r2
 80050c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f007 fe3d 	bl	800cd46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80050cc:	e011      	b.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050ea:	b292      	uxth	r2, r2
 80050ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050f0:	bf00      	nop
  }
}
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_PCD_SetAddress+0x1a>
 800510e:	2302      	movs	r3, #2
 8005110:	e012      	b.n	8005138 <HAL_PCD_SetAddress+0x40>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f005 fea9 	bl	800ae80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4603      	mov	r3, r0
 8005150:	70fb      	strb	r3, [r7, #3]
 8005152:	460b      	mov	r3, r1
 8005154:	803b      	strh	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800515e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005162:	2b00      	cmp	r3, #0
 8005164:	da0e      	bge.n	8005184 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	f003 0207 	and.w	r2, r3, #7
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	3310      	adds	r3, #16
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4413      	add	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	705a      	strb	r2, [r3, #1]
 8005182:	e00e      	b.n	80051a2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051ae:	883a      	ldrh	r2, [r7, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	78ba      	ldrb	r2, [r7, #2]
 80051b8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051ba:	78bb      	ldrb	r3, [r7, #2]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d102      	bne.n	80051c6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_PCD_EP_Open+0x94>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e00e      	b.n	80051f2 <HAL_PCD_EP_Open+0xb2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f003 fbf2 	bl	80089cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80051f0:	7afb      	ldrb	r3, [r7, #11]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800520a:	2b00      	cmp	r3, #0
 800520c:	da0e      	bge.n	800522c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	f003 0207 	and.w	r2, r3, #7
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	3310      	adds	r3, #16
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	705a      	strb	r2, [r3, #1]
 800522a:	e00e      	b.n	800524a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 0207 	and.w	r2, r3, #7
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_PCD_EP_Close+0x6a>
 8005260:	2302      	movs	r3, #2
 8005262:	e00e      	b.n	8005282 <HAL_PCD_EP_Close+0x88>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	f003 ff6a 	bl	800914c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	460b      	mov	r3, r1
 8005298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	f003 0207 	and.w	r2, r3, #7
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ca:	7afb      	ldrb	r3, [r7, #11]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6979      	ldr	r1, [r7, #20]
 80052dc:	4618      	mov	r0, r3
 80052de:	f004 f921 	bl	8009524 <USB_EPStartXfer>

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	f003 0207 	and.w	r2, r3, #7
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	460b      	mov	r3, r1
 8005328:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	f003 0207 	and.w	r2, r3, #7
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	3310      	adds	r3, #16
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2201      	movs	r2, #1
 8005364:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	b2da      	uxtb	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	4618      	mov	r0, r3
 800537a:	f004 f8d3 	bl	8009524 <USB_EPStartXfer>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	7912      	ldrb	r2, [r2, #4]
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e04c      	b.n	8005440 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da0e      	bge.n	80053cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	f003 0207 	and.w	r2, r3, #7
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	3310      	adds	r3, #16
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	705a      	strb	r2, [r3, #1]
 80053ca:	e00c      	b.n	80053e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4413      	add	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_PCD_EP_SetStall+0x7e>
 8005402:	2302      	movs	r3, #2
 8005404:	e01c      	b.n	8005440 <HAL_PCD_EP_SetStall+0xb8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	4618      	mov	r0, r3
 8005416:	f005 fc36 	bl	800ac86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	2b00      	cmp	r3, #0
 8005422:	d108      	bne.n	8005436 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800542e:	4619      	mov	r1, r3
 8005430:	4610      	mov	r0, r2
 8005432:	f005 fd5b 	bl	800aeec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	7912      	ldrb	r2, [r2, #4]
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e040      	b.n	80054e8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800546a:	2b00      	cmp	r3, #0
 800546c:	da0e      	bge.n	800548c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 0207 	and.w	r2, r3, #7
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3310      	adds	r3, #16
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	705a      	strb	r2, [r3, #1]
 800548a:	e00e      	b.n	80054aa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f003 0207 	and.w	r2, r3, #7
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_PCD_EP_ClrStall+0x82>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e00e      	b.n	80054e8 <HAL_PCD_EP_ClrStall+0xa0>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	4618      	mov	r0, r3
 80054da:	f005 fc24 	bl	800ad26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b096      	sub	sp, #88	@ 0x58
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80054f8:	e3bb      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005502:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005514:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005518:	2b00      	cmp	r3, #0
 800551a:	f040 8175 	bne.w	8005808 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800551e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d14e      	bne.n	80055c8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	81fb      	strh	r3, [r7, #14]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554a:	b29b      	uxth	r3, r3
 800554c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3310      	adds	r3, #16
 8005552:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555c:	b29b      	uxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	3302      	adds	r3, #2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800557c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	441a      	add	r2, r3
 800558a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800558e:	2100      	movs	r1, #0
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f007 fbbe 	bl	800cd12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7b5b      	ldrb	r3, [r3, #13]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8368 	beq.w	8005c72 <PCD_EP_ISR_Handler+0x782>
 80055a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f040 8363 	bne.w	8005c72 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	7b5b      	ldrb	r3, [r3, #13]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	735a      	strb	r2, [r3, #13]
 80055c6:	e354      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055ce:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80055de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d034      	beq.n	8005650 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	3306      	adds	r3, #6
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800561c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005622:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005624:	b29b      	uxth	r3, r3
 8005626:	f005 fcb2 	bl	800af8e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29a      	uxth	r2, r3
 8005632:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005636:	4013      	ands	r3, r2
 8005638:	823b      	strh	r3, [r7, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	8a3a      	ldrh	r2, [r7, #16]
 8005640:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005644:	b292      	uxth	r2, r2
 8005646:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f007 fb35 	bl	800ccb8 <HAL_PCD_SetupStageCallback>
 800564e:	e310      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005650:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005654:	2b00      	cmp	r3, #0
 8005656:	f280 830c 	bge.w	8005c72 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29a      	uxth	r2, r3
 8005662:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005666:	4013      	ands	r3, r2
 8005668:	83fb      	strh	r3, [r7, #30]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	8bfa      	ldrh	r2, [r7, #30]
 8005670:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005674:	b292      	uxth	r2, r2
 8005676:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005680:	b29b      	uxth	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	3306      	adds	r3, #6
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80056a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d019      	beq.n	80056e0 <PCD_EP_ISR_Handler+0x1f0>
 80056ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ba:	6959      	ldr	r1, [r3, #20]
 80056bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f005 fc62 	bl	800af8e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	441a      	add	r2, r3
 80056d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056d8:	2100      	movs	r1, #0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f007 fafe 	bl	800ccdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80056ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 82bd 	bne.w	8005c72 <PCD_EP_ISR_Handler+0x782>
 80056f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056fc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005704:	f000 82b5 	beq.w	8005c72 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	4413      	add	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005732:	b29a      	uxth	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b3e      	cmp	r3, #62	@ 0x3e
 800573e:	d91d      	bls.n	800577c <PCD_EP_ISR_Handler+0x28c>
 8005740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	647b      	str	r3, [r7, #68]	@ 0x44
 8005748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <PCD_EP_ISR_Handler+0x26a>
 8005754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005756:	3b01      	subs	r3, #1
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29a      	uxth	r2, r3
 8005760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005762:	b29b      	uxth	r3, r3
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	b29b      	uxth	r3, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005774:	b29a      	uxth	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e026      	b.n	80057ca <PCD_EP_ISR_Handler+0x2da>
 800577c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <PCD_EP_ISR_Handler+0x2aa>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005792:	b29a      	uxth	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e017      	b.n	80057ca <PCD_EP_ISR_Handler+0x2da>
 800579a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <PCD_EP_ISR_Handler+0x2c4>
 80057ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b0:	3301      	adds	r3, #1
 80057b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057da:	827b      	strh	r3, [r7, #18]
 80057dc:	8a7b      	ldrh	r3, [r7, #18]
 80057de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057e2:	827b      	strh	r3, [r7, #18]
 80057e4:	8a7b      	ldrh	r3, [r7, #18]
 80057e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057ea:	827b      	strh	r3, [r7, #18]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	8a7b      	ldrh	r3, [r7, #18]
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
 8005806:	e234      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800581c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005820:	2b00      	cmp	r3, #0
 8005822:	f280 80fc 	bge.w	8005a1e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800583c:	4013      	ands	r3, r2
 800583e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005854:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005858:	b292      	uxth	r2, r2
 800585a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800585c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4413      	add	r3, r2
 8005870:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005874:	7b1b      	ldrb	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d125      	bne.n	80058c6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	3306      	adds	r3, #6
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80058a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8092 	beq.w	80059d4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b6:	6959      	ldr	r1, [r3, #20]
 80058b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ba:	88da      	ldrh	r2, [r3, #6]
 80058bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058c0:	f005 fb65 	bl	800af8e <USB_ReadPMA>
 80058c4:	e086      	b.n	80059d4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80058c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c8:	78db      	ldrb	r3, [r3, #3]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d10a      	bne.n	80058e4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80058ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058d2:	461a      	mov	r2, r3
 80058d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9d9 	bl	8005c8e <HAL_PCD_EP_DB_Receive>
 80058dc:	4603      	mov	r3, r0
 80058de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80058e2:	e077      	b.n	80059d4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800591c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005920:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d024      	beq.n	800598c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	3302      	adds	r3, #2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800596a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800596e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02e      	beq.n	80059d4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	6959      	ldr	r1, [r3, #20]
 800597e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005980:	891a      	ldrh	r2, [r3, #8]
 8005982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005986:	f005 fb02 	bl	800af8e <USB_ReadPMA>
 800598a:	e023      	b.n	80059d4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	3306      	adds	r3, #6
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80059b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c6:	6959      	ldr	r1, [r3, #20]
 80059c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ca:	895a      	ldrh	r2, [r3, #10]
 80059cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059d0:	f005 fadd 	bl	800af8e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80059d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059dc:	441a      	add	r2, r3
 80059de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80059e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059ea:	441a      	add	r2, r3
 80059ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80059f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <PCD_EP_ISR_Handler+0x514>
 80059f8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80059fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d206      	bcs.n	8005a12 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f007 f966 	bl	800ccdc <HAL_PCD_DataOutStageCallback>
 8005a10:	e005      	b.n	8005a1e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f003 fd83 	bl	8009524 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8123 	beq.w	8005c72 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a2c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	3310      	adds	r3, #16
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	441a      	add	r2, r3
 8005a6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f040 80a2 	bne.w	8005bca <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a88:	2200      	movs	r2, #0
 8005a8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8e:	7b1b      	ldrb	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8093 	beq.w	8005bbc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d046      	beq.n	8005b30 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d126      	bne.n	8005af8 <PCD_EP_ISR_Handler+0x608>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	4413      	add	r3, r2
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	011a      	lsls	r2, r3, #4
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	4413      	add	r3, r2
 8005acc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e061      	b.n	8005bbc <PCD_EP_ISR_Handler+0x6cc>
 8005af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d15d      	bne.n	8005bbc <PCD_EP_ISR_Handler+0x6cc>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	4413      	add	r3, r2
 8005b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	011a      	lsls	r2, r3, #4
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e045      	b.n	8005bbc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d126      	bne.n	8005b8c <PCD_EP_ISR_Handler+0x69c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	4413      	add	r3, r2
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	011a      	lsls	r2, r3, #4
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e017      	b.n	8005bbc <PCD_EP_ISR_Handler+0x6cc>
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d113      	bne.n	8005bbc <PCD_EP_ISR_Handler+0x6cc>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba2:	4413      	add	r3, r2
 8005ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	011a      	lsls	r2, r3, #4
 8005bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	2200      	movs	r2, #0
 8005bba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f007 f8a5 	bl	800cd12 <HAL_PCD_DataInStageCallback>
 8005bc8:	e053      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005bca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d146      	bne.n	8005c64 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	3302      	adds	r3, #2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bfe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d907      	bls.n	8005c1e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8005c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c1a:	619a      	str	r2, [r3, #24]
 8005c1c:	e002      	b.n	8005c24 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f007 f86d 	bl	800cd12 <HAL_PCD_DataInStageCallback>
 8005c38:	e01b      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c42:	441a      	add	r2, r3
 8005c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c46:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c50:	441a      	add	r2, r3
 8005c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c54:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f003 fc61 	bl	8009524 <USB_EPStartXfer>
 8005c62:	e006      	b.n	8005c72 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005c64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f91b 	bl	8005ea8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f6ff ac3b 	blt.w	80054fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3758      	adds	r7, #88	@ 0x58
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b088      	sub	sp, #32
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d07e      	beq.n	8005da4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	3302      	adds	r3, #2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	8b7b      	ldrh	r3, [r7, #26]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d306      	bcc.n	8005ce8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	8b7b      	ldrh	r3, [r7, #26]
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	619a      	str	r2, [r3, #24]
 8005ce6:	e002      	b.n	8005cee <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d123      	bne.n	8005d3e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d10:	833b      	strh	r3, [r7, #24]
 8005d12:	8b3b      	ldrh	r3, [r7, #24]
 8005d14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d18:	833b      	strh	r3, [r7, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	8b3b      	ldrh	r3, [r7, #24]
 8005d2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01f      	beq.n	8005d88 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d62:	82fb      	strh	r3, [r7, #22]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	8afb      	ldrh	r3, [r7, #22]
 8005d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d88:	8b7b      	ldrh	r3, [r7, #26]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8087 	beq.w	8005e9e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6959      	ldr	r1, [r3, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	891a      	ldrh	r2, [r3, #8]
 8005d9c:	8b7b      	ldrh	r3, [r7, #26]
 8005d9e:	f005 f8f6 	bl	800af8e <USB_ReadPMA>
 8005da2:	e07c      	b.n	8005e9e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	3306      	adds	r3, #6
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dcc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	8b7b      	ldrh	r3, [r7, #26]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d306      	bcc.n	8005de6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	8b7b      	ldrh	r3, [r7, #26]
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	619a      	str	r2, [r3, #24]
 8005de4:	e002      	b.n	8005dec <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2200      	movs	r2, #0
 8005dea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d123      	bne.n	8005e3c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0e:	83fb      	strh	r3, [r7, #30]
 8005e10:	8bfb      	ldrh	r3, [r7, #30]
 8005e12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e16:	83fb      	strh	r3, [r7, #30]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	8bfb      	ldrh	r3, [r7, #30]
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11f      	bne.n	8005e86 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e60:	83bb      	strh	r3, [r7, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	8bbb      	ldrh	r3, [r7, #28]
 8005e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6959      	ldr	r1, [r3, #20]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	895a      	ldrh	r2, [r3, #10]
 8005e98:	8b7b      	ldrh	r3, [r7, #26]
 8005e9a:	f005 f878 	bl	800af8e <USB_ReadPMA>
    }
  }

  return count;
 8005e9e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b0a4      	sub	sp, #144	@ 0x90
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 81dd 	beq.w	800627c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d907      	bls.n	8005f0a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f02:	1ad2      	subs	r2, r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	619a      	str	r2, [r3, #24]
 8005f08:	e002      	b.n	8005f10 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 80b9 	bne.w	800608c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d126      	bne.n	8005f70 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	4413      	add	r3, r2
 8005f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	011a      	lsls	r2, r3, #4
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	4413      	add	r3, r2
 8005f44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	801a      	strh	r2, [r3, #0]
 8005f6e:	e01a      	b.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d116      	bne.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	4413      	add	r3, r2
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d126      	bne.n	8006002 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	011a      	lsls	r2, r3, #4
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e017      	b.n	8006032 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d113      	bne.n	8006032 <HAL_PCD_EP_DB_Transmit+0x18a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	4413      	add	r3, r2
 800601a:	627b      	str	r3, [r7, #36]	@ 0x24
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	011a      	lsls	r2, r3, #4
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	4413      	add	r3, r2
 8006026:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800602a:	623b      	str	r3, [r7, #32]
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2200      	movs	r2, #0
 8006030:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f006 fe6a 	bl	800cd12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 82fc 	beq.w	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006064:	82fb      	strh	r3, [r7, #22]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	8afb      	ldrh	r3, [r7, #22]
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800607e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
 800608a:	e2da      	b.n	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d021      	beq.n	80060da <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 82ae 	bne.w	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060ee:	441a      	add	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060fc:	441a      	add	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6a1a      	ldr	r2, [r3, #32]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d30b      	bcc.n	8006126 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6a1a      	ldr	r2, [r3, #32]
 800611a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	621a      	str	r2, [r3, #32]
 8006124:	e017      	b.n	8006156 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d108      	bne.n	8006140 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800612e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800613e:	e00a      	b.n	8006156 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d165      	bne.n	800622a <HAL_PCD_EP_DB_Transmit+0x382>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	4413      	add	r3, r2
 8006174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	011a      	lsls	r2, r3, #4
 800617c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617e:	4413      	add	r3, r2
 8006180:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006184:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800619a:	2b3e      	cmp	r3, #62	@ 0x3e
 800619c:	d91d      	bls.n	80061da <HAL_PCD_EP_DB_Transmit+0x332>
 800619e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x310>
 80061b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061b4:	3b01      	subs	r3, #1
 80061b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e044      	b.n	8006264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80061da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_PCD_EP_DB_Transmit+0x350>
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e035      	b.n	8006264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80061f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_PCD_EP_DB_Transmit+0x36a>
 800620c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800620e:	3301      	adds	r3, #1
 8006210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29a      	uxth	r2, r3
 8006218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800621a:	b29b      	uxth	r3, r3
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	b29b      	uxth	r3, r3
 8006220:	4313      	orrs	r3, r2
 8006222:	b29a      	uxth	r2, r3
 8006224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e01c      	b.n	8006264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d118      	bne.n	8006264 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	647b      	str	r3, [r7, #68]	@ 0x44
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006240:	b29b      	uxth	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006246:	4413      	add	r3, r2
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	011a      	lsls	r2, r3, #4
 8006250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006252:	4413      	add	r3, r2
 8006254:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006258:	643b      	str	r3, [r7, #64]	@ 0x40
 800625a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625e:	b29a      	uxth	r2, r3
 8006260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006262:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6959      	ldr	r1, [r3, #20]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	891a      	ldrh	r2, [r3, #8]
 8006270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006274:	b29b      	uxth	r3, r3
 8006276:	f004 fe44 	bl	800af02 <USB_WritePMA>
 800627a:	e1e2      	b.n	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4413      	add	r3, r2
 8006290:	3306      	adds	r3, #6
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d307      	bcc.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062bc:	1ad2      	subs	r2, r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	619a      	str	r2, [r3, #24]
 80062c2:	e002      	b.n	80062ca <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 80c0 	bne.w	8006454 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d126      	bne.n	800632a <HAL_PCD_EP_DB_Transmit+0x482>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062f0:	4413      	add	r3, r2
 80062f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062fc:	4413      	add	r3, r2
 80062fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006302:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800630e:	b29a      	uxth	r2, r3
 8006310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e01a      	b.n	8006360 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d116      	bne.n	8006360 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	667b      	str	r3, [r7, #100]	@ 0x64
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006340:	b29b      	uxth	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006346:	4413      	add	r3, r2
 8006348:	667b      	str	r3, [r7, #100]	@ 0x64
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	011a      	lsls	r2, r3, #4
 8006350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006352:	4413      	add	r3, r2
 8006354:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006358:	663b      	str	r3, [r7, #96]	@ 0x60
 800635a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800635c:	2200      	movs	r2, #0
 800635e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	677b      	str	r3, [r7, #116]	@ 0x74
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12b      	bne.n	80063c6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006382:	4413      	add	r3, r2
 8006384:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	011a      	lsls	r2, r3, #4
 800638c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800638e:	4413      	add	r3, r2
 8006390:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e017      	b.n	80063f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d113      	bne.n	80063f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063dc:	4413      	add	r3, r2
 80063de:	677b      	str	r3, [r7, #116]	@ 0x74
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	011a      	lsls	r2, r3, #4
 80063e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80063f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063f2:	2200      	movs	r2, #0
 80063f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	4619      	mov	r1, r3
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f006 fc88 	bl	800cd12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 811a 	bne.w	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006428:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
 8006452:	e0f6      	b.n	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d121      	bne.n	80064a2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006478:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	f040 80ca 	bne.w	8006642 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064b6:	441a      	add	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064c4:	441a      	add	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d30b      	bcc.n	80064ee <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6a1a      	ldr	r2, [r3, #32]
 80064e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	621a      	str	r2, [r3, #32]
 80064ec:	e017      	b.n	800651e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80064f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006506:	e00a      	b.n	800651e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	657b      	str	r3, [r7, #84]	@ 0x54
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d165      	bne.n	80065f8 <HAL_PCD_EP_DB_Transmit+0x750>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006540:	4413      	add	r3, r2
 8006542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	011a      	lsls	r2, r3, #4
 800654a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800654c:	4413      	add	r3, r2
 800654e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655e:	b29a      	uxth	r2, r3
 8006560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006568:	2b3e      	cmp	r3, #62	@ 0x3e
 800656a:	d91d      	bls.n	80065a8 <HAL_PCD_EP_DB_Transmit+0x700>
 800656c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <HAL_PCD_EP_DB_Transmit+0x6de>
 8006580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006582:	3b01      	subs	r3, #1
 8006584:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29a      	uxth	r2, r3
 800658c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e041      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x784>
 80065a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80065b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065be:	b29a      	uxth	r2, r3
 80065c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e032      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x784>
 80065c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_PCD_EP_DB_Transmit+0x738>
 80065da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065dc:	3301      	adds	r3, #1
 80065de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	029b      	lsls	r3, r3, #10
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	4313      	orrs	r3, r2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e019      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x784>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d115      	bne.n	800662c <HAL_PCD_EP_DB_Transmit+0x784>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660e:	4413      	add	r3, r2
 8006610:	657b      	str	r3, [r7, #84]	@ 0x54
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	011a      	lsls	r2, r3, #4
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	4413      	add	r3, r2
 800661c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006620:	653b      	str	r3, [r7, #80]	@ 0x50
 8006622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006626:	b29a      	uxth	r2, r3
 8006628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800662a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6959      	ldr	r1, [r3, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	895a      	ldrh	r2, [r3, #10]
 8006638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663c:	b29b      	uxth	r3, r3
 800663e:	f004 fc60 	bl	800af02 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800665c:	82bb      	strh	r3, [r7, #20]
 800665e:	8abb      	ldrh	r3, [r7, #20]
 8006660:	f083 0310 	eor.w	r3, r3, #16
 8006664:	82bb      	strh	r3, [r7, #20]
 8006666:	8abb      	ldrh	r3, [r7, #20]
 8006668:	f083 0320 	eor.w	r3, r3, #32
 800666c:	82bb      	strh	r3, [r7, #20]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	8abb      	ldrh	r3, [r7, #20]
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800668a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3790      	adds	r7, #144	@ 0x90
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	817b      	strh	r3, [r7, #10]
 80066aa:	4613      	mov	r3, r2
 80066ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80066ae:	897b      	ldrh	r3, [r7, #10]
 80066b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ba:	897b      	ldrh	r3, [r7, #10]
 80066bc:	f003 0207 	and.w	r2, r3, #7
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	3310      	adds	r3, #16
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e009      	b.n	80066e6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066d2:	897a      	ldrh	r2, [r7, #10]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d107      	bne.n	80066fc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	80da      	strh	r2, [r3, #6]
 80066fa:	e00b      	b.n	8006714 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2201      	movs	r2, #1
 8006700:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	b29a      	uxth	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	b29a      	uxth	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006724:	4b03      	ldr	r3, [pc, #12]	@ (8006734 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	420e0020 	.word	0x420e0020

08006738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e272      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8087 	beq.w	8006866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006758:	4b92      	ldr	r3, [pc, #584]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b04      	cmp	r3, #4
 8006762:	d00c      	beq.n	800677e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006764:	4b8f      	ldr	r3, [pc, #572]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d112      	bne.n	8006796 <HAL_RCC_OscConfig+0x5e>
 8006770:	4b8c      	ldr	r3, [pc, #560]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800677c:	d10b      	bne.n	8006796 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800677e:	4b89      	ldr	r3, [pc, #548]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06c      	beq.n	8006864 <HAL_RCC_OscConfig+0x12c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d168      	bne.n	8006864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e24c      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679e:	d106      	bne.n	80067ae <HAL_RCC_OscConfig+0x76>
 80067a0:	4b80      	ldr	r3, [pc, #512]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a7f      	ldr	r2, [pc, #508]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e02e      	b.n	800680c <HAL_RCC_OscConfig+0xd4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x98>
 80067b6:	4b7b      	ldr	r3, [pc, #492]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7a      	ldr	r2, [pc, #488]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	4b78      	ldr	r3, [pc, #480]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a77      	ldr	r2, [pc, #476]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e01d      	b.n	800680c <HAL_RCC_OscConfig+0xd4>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0xbc>
 80067da:	4b72      	ldr	r3, [pc, #456]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a71      	ldr	r2, [pc, #452]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b6f      	ldr	r3, [pc, #444]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6e      	ldr	r2, [pc, #440]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0xd4>
 80067f4:	4b6b      	ldr	r3, [pc, #428]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a6a      	ldr	r2, [pc, #424]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80067fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b68      	ldr	r3, [pc, #416]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a67      	ldr	r2, [pc, #412]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800680a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fd f8b0 	bl	8003978 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800681c:	f7fd f8ac 	bl	8003978 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	@ 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e200      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682e:	4b5d      	ldr	r3, [pc, #372]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0xe4>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683c:	f7fd f89c 	bl	8003978 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006844:	f7fd f898 	bl	8003978 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	@ 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e1ec      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006856:	4b53      	ldr	r3, [pc, #332]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x10c>
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d063      	beq.n	800693a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006872:	4b4c      	ldr	r3, [pc, #304]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800687e:	4b49      	ldr	r3, [pc, #292]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f003 030c 	and.w	r3, r3, #12
 8006886:	2b08      	cmp	r3, #8
 8006888:	d11c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x18c>
 800688a:	4b46      	ldr	r3, [pc, #280]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006896:	4b43      	ldr	r3, [pc, #268]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCC_OscConfig+0x176>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e1c0      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ae:	4b3d      	ldr	r3, [pc, #244]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4939      	ldr	r1, [pc, #228]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068c2:	e03a      	b.n	800693a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068cc:	4b36      	ldr	r3, [pc, #216]	@ (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fd f851 	bl	8003978 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068da:	f7fd f84d 	bl	8003978 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e1a1      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ec:	4b2d      	ldr	r3, [pc, #180]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f8:	4b2a      	ldr	r3, [pc, #168]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4927      	ldr	r1, [pc, #156]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006908:	4313      	orrs	r3, r2
 800690a:	600b      	str	r3, [r1, #0]
 800690c:	e015      	b.n	800693a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800690e:	4b26      	ldr	r3, [pc, #152]	@ (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006914:	f7fd f830 	bl	8003978 <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691c:	f7fd f82c 	bl	8003978 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e180      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692e:	4b1d      	ldr	r3, [pc, #116]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d03a      	beq.n	80069bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d019      	beq.n	8006982 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800694e:	4b17      	ldr	r3, [pc, #92]	@ (80069ac <HAL_RCC_OscConfig+0x274>)
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006954:	f7fd f810 	bl	8003978 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695c:	f7fd f80c 	bl	8003978 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e160      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696e:	4b0d      	ldr	r3, [pc, #52]	@ (80069a4 <HAL_RCC_OscConfig+0x26c>)
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800697a:	2001      	movs	r0, #1
 800697c:	f000 face 	bl	8006f1c <RCC_Delay>
 8006980:	e01c      	b.n	80069bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006982:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <HAL_RCC_OscConfig+0x274>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006988:	f7fc fff6 	bl	8003978 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800698e:	e00f      	b.n	80069b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006990:	f7fc fff2 	bl	8003978 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d908      	bls.n	80069b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e146      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
 80069a2:	bf00      	nop
 80069a4:	40021000 	.word	0x40021000
 80069a8:	42420000 	.word	0x42420000
 80069ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b0:	4b92      	ldr	r3, [pc, #584]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e9      	bne.n	8006990 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80a6 	beq.w	8006b16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ce:	4b8b      	ldr	r3, [pc, #556]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069da:	4b88      	ldr	r3, [pc, #544]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4a87      	ldr	r2, [pc, #540]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 80069e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e4:	61d3      	str	r3, [r2, #28]
 80069e6:	4b85      	ldr	r3, [pc, #532]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069f2:	2301      	movs	r3, #1
 80069f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f6:	4b82      	ldr	r3, [pc, #520]	@ (8006c00 <HAL_RCC_OscConfig+0x4c8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d118      	bne.n	8006a34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a02:	4b7f      	ldr	r3, [pc, #508]	@ (8006c00 <HAL_RCC_OscConfig+0x4c8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7e      	ldr	r2, [pc, #504]	@ (8006c00 <HAL_RCC_OscConfig+0x4c8>)
 8006a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0e:	f7fc ffb3 	bl	8003978 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a16:	f7fc ffaf 	bl	8003978 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b64      	cmp	r3, #100	@ 0x64
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e103      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a28:	4b75      	ldr	r3, [pc, #468]	@ (8006c00 <HAL_RCC_OscConfig+0x4c8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d106      	bne.n	8006a4a <HAL_RCC_OscConfig+0x312>
 8006a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	4a6e      	ldr	r2, [pc, #440]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	6213      	str	r3, [r2, #32]
 8006a48:	e02d      	b.n	8006aa6 <HAL_RCC_OscConfig+0x36e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x334>
 8006a52:	4b6a      	ldr	r3, [pc, #424]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	4a69      	ldr	r2, [pc, #420]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	6213      	str	r3, [r2, #32]
 8006a5e:	4b67      	ldr	r3, [pc, #412]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	4a66      	ldr	r2, [pc, #408]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a64:	f023 0304 	bic.w	r3, r3, #4
 8006a68:	6213      	str	r3, [r2, #32]
 8006a6a:	e01c      	b.n	8006aa6 <HAL_RCC_OscConfig+0x36e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d10c      	bne.n	8006a8e <HAL_RCC_OscConfig+0x356>
 8006a74:	4b61      	ldr	r3, [pc, #388]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	4a60      	ldr	r2, [pc, #384]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a7a:	f043 0304 	orr.w	r3, r3, #4
 8006a7e:	6213      	str	r3, [r2, #32]
 8006a80:	4b5e      	ldr	r3, [pc, #376]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	4a5d      	ldr	r2, [pc, #372]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	6213      	str	r3, [r2, #32]
 8006a8c:	e00b      	b.n	8006aa6 <HAL_RCC_OscConfig+0x36e>
 8006a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	4a5a      	ldr	r2, [pc, #360]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	6213      	str	r3, [r2, #32]
 8006a9a:	4b58      	ldr	r3, [pc, #352]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4a57      	ldr	r2, [pc, #348]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d015      	beq.n	8006ada <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aae:	f7fc ff63 	bl	8003978 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab4:	e00a      	b.n	8006acc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab6:	f7fc ff5f 	bl	8003978 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0b1      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006acc:	4b4b      	ldr	r3, [pc, #300]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0ee      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x37e>
 8006ad8:	e014      	b.n	8006b04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ada:	f7fc ff4d 	bl	8003978 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae0:	e00a      	b.n	8006af8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae2:	f7fc ff49 	bl	8003978 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e09b      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af8:	4b40      	ldr	r3, [pc, #256]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1ee      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	4a3b      	ldr	r2, [pc, #236]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8087 	beq.w	8006c2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b20:	4b36      	ldr	r3, [pc, #216]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f003 030c 	and.w	r3, r3, #12
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d061      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d146      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b34:	4b33      	ldr	r3, [pc, #204]	@ (8006c04 <HAL_RCC_OscConfig+0x4cc>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3a:	f7fc ff1d 	bl	8003978 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b42:	f7fc ff19 	bl	8003978 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e06d      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b54:	4b29      	ldr	r3, [pc, #164]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f0      	bne.n	8006b42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b68:	d108      	bne.n	8006b7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b6a:	4b24      	ldr	r3, [pc, #144]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	4921      	ldr	r1, [pc, #132]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a19      	ldr	r1, [r3, #32]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	491b      	ldr	r1, [pc, #108]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b94:	4b1b      	ldr	r3, [pc, #108]	@ (8006c04 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9a:	f7fc feed 	bl	8003978 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba2:	f7fc fee9 	bl	8003978 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e03d      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bb4:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x46a>
 8006bc0:	e035      	b.n	8006c2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc2:	4b10      	ldr	r3, [pc, #64]	@ (8006c04 <HAL_RCC_OscConfig+0x4cc>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc8:	f7fc fed6 	bl	8003978 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd0:	f7fc fed2 	bl	8003978 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e026      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006be2:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <HAL_RCC_OscConfig+0x4c4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x498>
 8006bee:	e01e      	b.n	8006c2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e019      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40007000 	.word	0x40007000
 8006c04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c08:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <HAL_RCC_OscConfig+0x500>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d106      	bne.n	8006c2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d001      	beq.n	8006c2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40021000 	.word	0x40021000

08006c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0d0      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c50:	4b6a      	ldr	r3, [pc, #424]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d910      	bls.n	8006c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5e:	4b67      	ldr	r3, [pc, #412]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f023 0207 	bic.w	r2, r3, #7
 8006c66:	4965      	ldr	r1, [pc, #404]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6e:	4b63      	ldr	r3, [pc, #396]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0b8      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d020      	beq.n	8006cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c98:	4b59      	ldr	r3, [pc, #356]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4a58      	ldr	r2, [pc, #352]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cb0:	4b53      	ldr	r3, [pc, #332]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a52      	ldr	r2, [pc, #328]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cbc:	4b50      	ldr	r3, [pc, #320]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	494d      	ldr	r1, [pc, #308]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d040      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce2:	4b47      	ldr	r3, [pc, #284]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d115      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e07f      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cfa:	4b41      	ldr	r3, [pc, #260]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e073      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e06b      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d1a:	4b39      	ldr	r3, [pc, #228]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f023 0203 	bic.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4936      	ldr	r1, [pc, #216]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d2c:	f7fc fe24 	bl	8003978 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	e00a      	b.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d34:	f7fc fe20 	bl	8003978 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e053      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f003 020c 	and.w	r2, r3, #12
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d1eb      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d5c:	4b27      	ldr	r3, [pc, #156]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d210      	bcs.n	8006d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6a:	4b24      	ldr	r3, [pc, #144]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f023 0207 	bic.w	r2, r3, #7
 8006d72:	4922      	ldr	r1, [pc, #136]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7a:	4b20      	ldr	r3, [pc, #128]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d001      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e032      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d98:	4b19      	ldr	r3, [pc, #100]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	4916      	ldr	r1, [pc, #88]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006db6:	4b12      	ldr	r3, [pc, #72]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	490e      	ldr	r1, [pc, #56]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dca:	f000 f821 	bl	8006e10 <HAL_RCC_GetSysClockFreq>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	091b      	lsrs	r3, r3, #4
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	490a      	ldr	r1, [pc, #40]	@ (8006e04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ddc:	5ccb      	ldrb	r3, [r1, r3]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <HAL_RCC_ClockConfig+0x1cc>)
 8006de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006de6:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <HAL_RCC_ClockConfig+0x1d0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fc fd82 	bl	80038f4 <HAL_InitTick>

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40022000 	.word	0x40022000
 8006e00:	40021000 	.word	0x40021000
 8006e04:	08012878 	.word	0x08012878
 8006e08:	20000004 	.word	0x20000004
 8006e0c:	20000008 	.word	0x20000008

08006e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	2300      	movs	r3, #0
 8006e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d002      	beq.n	8006e40 <HAL_RCC_GetSysClockFreq+0x30>
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCC_GetSysClockFreq+0x36>
 8006e3e:	e027      	b.n	8006e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e40:	4b19      	ldr	r3, [pc, #100]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e42:	613b      	str	r3, [r7, #16]
      break;
 8006e44:	e027      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	0c9b      	lsrs	r3, r3, #18
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	4a17      	ldr	r2, [pc, #92]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e50:	5cd3      	ldrb	r3, [r2, r3]
 8006e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d010      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	0c5b      	lsrs	r3, r3, #17
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	4a11      	ldr	r2, [pc, #68]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e6a:	5cd3      	ldrb	r3, [r2, r3]
 8006e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e72:	fb03 f202 	mul.w	r2, r3, r2
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	e004      	b.n	8006e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	613b      	str	r3, [r7, #16]
      break;
 8006e8e:	e002      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e92:	613b      	str	r3, [r7, #16]
      break;
 8006e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e96:	693b      	ldr	r3, [r7, #16]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	007a1200 	.word	0x007a1200
 8006eac:	08012890 	.word	0x08012890
 8006eb0:	080128a0 	.word	0x080128a0
 8006eb4:	003d0900 	.word	0x003d0900

08006eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ebc:	4b02      	ldr	r3, [pc, #8]	@ (8006ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr
 8006ec8:	20000004 	.word	0x20000004

08006ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ed0:	f7ff fff2 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4903      	ldr	r1, [pc, #12]	@ (8006ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	08012888 	.word	0x08012888

08006ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ef8:	f7ff ffde 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	0adb      	lsrs	r3, r3, #11
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	4903      	ldr	r1, [pc, #12]	@ (8006f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f0a:	5ccb      	ldrb	r3, [r1, r3]
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40021000 	.word	0x40021000
 8006f18:	08012888 	.word	0x08012888

08006f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <RCC_Delay+0x34>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a0a      	ldr	r2, [pc, #40]	@ (8006f54 <RCC_Delay+0x38>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	0a5b      	lsrs	r3, r3, #9
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f38:	bf00      	nop
  }
  while (Delay --);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1e5a      	subs	r2, r3, #1
 8006f3e:	60fa      	str	r2, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f9      	bne.n	8006f38 <RCC_Delay+0x1c>
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr
 8006f50:	20000004 	.word	0x20000004
 8006f54:	10624dd3 	.word	0x10624dd3

08006f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d07d      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f78:	4b4f      	ldr	r3, [pc, #316]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10d      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f84:	4b4c      	ldr	r3, [pc, #304]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	4a4b      	ldr	r2, [pc, #300]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f8e:	61d3      	str	r3, [r2, #28]
 8006f90:	4b49      	ldr	r3, [pc, #292]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa0:	4b46      	ldr	r3, [pc, #280]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d118      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fac:	4b43      	ldr	r3, [pc, #268]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a42      	ldr	r2, [pc, #264]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb8:	f7fc fcde 	bl	8003978 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc0:	f7fc fcda 	bl	8003978 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	@ 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e06d      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fde:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d02e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d027      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007004:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007006:	4b2e      	ldr	r3, [pc, #184]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007008:	2201      	movs	r2, #1
 800700a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800700c:	4b2c      	ldr	r3, [pc, #176]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007012:	4a29      	ldr	r2, [pc, #164]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d014      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007022:	f7fc fca9 	bl	8003978 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007028:	e00a      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702a:	f7fc fca5 	bl	8003978 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e036      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007040:	4b1d      	ldr	r3, [pc, #116]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ee      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704c:	4b1a      	ldr	r3, [pc, #104]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4917      	ldr	r1, [pc, #92]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705a:	4313      	orrs	r3, r2
 800705c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d105      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007064:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	4a13      	ldr	r2, [pc, #76]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800706e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d008      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800707c:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	490b      	ldr	r1, [pc, #44]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800709a:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	4904      	ldr	r1, [pc, #16]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40007000 	.word	0x40007000
 80070c0:	42420440 	.word	0x42420440

080070c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	f200 808a 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d045      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d075      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80070fa:	e082      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80070fc:	4b46      	ldr	r3, [pc, #280]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007102:	4b45      	ldr	r3, [pc, #276]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d07b      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	0c9b      	lsrs	r3, r3, #18
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	4a41      	ldr	r2, [pc, #260]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007118:	5cd3      	ldrb	r3, [r2, r3]
 800711a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d015      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007126:	4b3c      	ldr	r3, [pc, #240]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	0c5b      	lsrs	r3, r3, #17
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	4a3b      	ldr	r2, [pc, #236]	@ (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007132:	5cd3      	ldrb	r3, [r2, r3]
 8007134:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00d      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007140:	4a38      	ldr	r2, [pc, #224]	@ (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	fbb2 f2f3 	udiv	r2, r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	e004      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	4a34      	ldr	r2, [pc, #208]	@ (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800715c:	4b2e      	ldr	r3, [pc, #184]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007168:	d102      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	61bb      	str	r3, [r7, #24]
      break;
 800716e:	e04a      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	4a2d      	ldr	r2, [pc, #180]	@ (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007176:	fba2 2303 	umull	r2, r3, r2, r3
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	61bb      	str	r3, [r7, #24]
      break;
 800717e:	e042      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007180:	4b25      	ldr	r3, [pc, #148]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800718c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007190:	d108      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800719c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e01f      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ae:	d109      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80071b0:	4b19      	ldr	r3, [pc, #100]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80071bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	e00f      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ce:	d11c      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80071d0:	4b11      	ldr	r3, [pc, #68]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d016      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80071dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80071e0:	61bb      	str	r3, [r7, #24]
      break;
 80071e2:	e012      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80071e4:	e011      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80071e6:	f7ff fe85 	bl	8006ef4 <HAL_RCC_GetPCLK2Freq>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	0b9b      	lsrs	r3, r3, #14
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	3301      	adds	r3, #1
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	61bb      	str	r3, [r7, #24]
      break;
 8007200:	e004      	b.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007202:	bf00      	nop
 8007204:	e002      	b.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800720a:	bf00      	nop
    }
  }
  return (frequency);
 800720c:	69bb      	ldr	r3, [r7, #24]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	080128a4 	.word	0x080128a4
 8007220:	080128b4 	.word	0x080128b4
 8007224:	007a1200 	.word	0x007a1200
 8007228:	003d0900 	.word	0x003d0900
 800722c:	aaaaaaab 	.word	0xaaaaaaab

08007230 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e07a      	b.n	800733c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7c5b      	ldrb	r3, [r3, #17]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fc f8b0 	bl	80033bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9be 	bl	80075e4 <HAL_RTC_WaitForSynchro>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2204      	movs	r2, #4
 8007272:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e061      	b.n	800733c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa77 	bl	800776c <RTC_EnterInitMode>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2204      	movs	r2, #4
 8007288:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e056      	b.n	800733c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0207 	bic.w	r2, r2, #7
 800729c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80072a6:	4b27      	ldr	r3, [pc, #156]	@ (8007344 <HAL_RTC_Init+0x114>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	4a26      	ldr	r2, [pc, #152]	@ (8007344 <HAL_RTC_Init+0x114>)
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80072b2:	4b24      	ldr	r3, [pc, #144]	@ (8007344 <HAL_RTC_Init+0x114>)
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4921      	ldr	r1, [pc, #132]	@ (8007344 <HAL_RTC_Init+0x114>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d003      	beq.n	80072d6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e00e      	b.n	80072f4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80072d6:	2001      	movs	r0, #1
 80072d8:	f7ff fef4 	bl	80070c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80072dc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e026      	b.n	800733c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0c1a      	lsrs	r2, r3, #16
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f002 020f 	and.w	r2, r2, #15
 8007300:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	b292      	uxth	r2, r2
 800730a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fa55 	bl	80077bc <RTC_ExitInitMode>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2204      	movs	r2, #4
 800731c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e00c      	b.n	800733c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800733a:	2300      	movs	r3, #0
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40006c00 	.word	0x40006c00

08007348 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_RTC_SetTime+0x20>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e080      	b.n	800746e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	7c1b      	ldrb	r3, [r3, #16]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_RTC_SetTime+0x30>
 8007374:	2302      	movs	r3, #2
 8007376:	e07a      	b.n	800746e <HAL_RTC_SetTime+0x126>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2202      	movs	r2, #2
 8007382:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d113      	bne.n	80073b2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007394:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	4619      	mov	r1, r3
 800739e:	460b      	mov	r3, r1
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	1a5b      	subs	r3, r3, r1
 80073a4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80073a6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80073ac:	4413      	add	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	e01e      	b.n	80073f0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fa28 	bl	800780c <RTC_Bcd2ToByte>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80073c4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fa1d 	bl	800780c <RTC_Bcd2ToByte>
 80073d2:	4603      	mov	r3, r0
 80073d4:	461a      	mov	r2, r3
 80073d6:	4613      	mov	r3, r2
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80073de:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	789b      	ldrb	r3, [r3, #2]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fa11 	bl	800780c <RTC_Bcd2ToByte>
 80073ea:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80073ec:	4423      	add	r3, r4
 80073ee:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f953 	bl	800769e <RTC_WriteTimeCounter>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2204      	movs	r2, #4
 8007402:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e02f      	b.n	800746e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0205 	bic.w	r2, r2, #5
 800741c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f964 	bl	80076ec <RTC_ReadAlarmCounter>
 8007424:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d018      	beq.n	8007460 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	429a      	cmp	r2, r3
 8007434:	d214      	bcs.n	8007460 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800743c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007440:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007442:	6939      	ldr	r1, [r7, #16]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f96a 	bl	800771e <RTC_WriteAlarmCounter>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2204      	movs	r2, #4
 8007454:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e006      	b.n	800746e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800746c:	2300      	movs	r3, #0
  }
}
 800746e:	4618      	mov	r0, r3
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
	...

08007478 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_RTC_SetDate+0x24>
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e097      	b.n	80075d0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	7c1b      	ldrb	r3, [r3, #16]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_RTC_SetDate+0x34>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e091      	b.n	80075d0 <HAL_RTC_SetDate+0x158>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2202      	movs	r2, #2
 80074b6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10c      	bne.n	80074d8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	78da      	ldrb	r2, [r3, #3]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	785a      	ldrb	r2, [r3, #1]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	789a      	ldrb	r2, [r3, #2]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	739a      	strb	r2, [r3, #14]
 80074d6:	e01a      	b.n	800750e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f995 	bl	800780c <RTC_Bcd2ToByte>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 f98c 	bl	800780c <RTC_Bcd2ToByte>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	789b      	ldrb	r3, [r3, #2]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f983 	bl	800780c <RTC_Bcd2ToByte>
 8007506:	4603      	mov	r3, r0
 8007508:	461a      	mov	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	7bdb      	ldrb	r3, [r3, #15]
 8007512:	4618      	mov	r0, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7b59      	ldrb	r1, [r3, #13]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	7b9b      	ldrb	r3, [r3, #14]
 800751c:	461a      	mov	r2, r3
 800751e:	f000 f993 	bl	8007848 <RTC_WeekDayNum>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	7b1a      	ldrb	r2, [r3, #12]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f883 	bl	800763e <RTC_ReadTimeCounter>
 8007538:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4a26      	ldr	r2, [pc, #152]	@ (80075d8 <HAL_RTC_SetDate+0x160>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	0adb      	lsrs	r3, r3, #11
 8007544:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b18      	cmp	r3, #24
 800754a:	d93a      	bls.n	80075c2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4a23      	ldr	r2, [pc, #140]	@ (80075dc <HAL_RTC_SetDate+0x164>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	4a22      	ldr	r2, [pc, #136]	@ (80075e0 <HAL_RTC_SetDate+0x168>)
 8007558:	fb02 f303 	mul.w	r3, r2, r3
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007562:	69f9      	ldr	r1, [r7, #28]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f89a 	bl	800769e <RTC_WriteTimeCounter>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2204      	movs	r2, #4
 8007574:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e027      	b.n	80075d0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f8b3 	bl	80076ec <RTC_ReadAlarmCounter>
 8007586:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d018      	beq.n	80075c2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	429a      	cmp	r2, r3
 8007596:	d214      	bcs.n	80075c2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800759e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80075a2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f8b9 	bl	800771e <RTC_WriteAlarmCounter>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2204      	movs	r2, #4
 80075b6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e006      	b.n	80075d0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3720      	adds	r7, #32
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	91a2b3c5 	.word	0x91a2b3c5
 80075dc:	aaaaaaab 	.word	0xaaaaaaab
 80075e0:	00015180 	.word	0x00015180

080075e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e01d      	b.n	8007636 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0208 	bic.w	r2, r2, #8
 8007608:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800760a:	f7fc f9b5 	bl	8003978 <HAL_GetTick>
 800760e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007610:	e009      	b.n	8007626 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007612:	f7fc f9b1 	bl	8003978 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007620:	d901      	bls.n	8007626 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e007      	b.n	8007636 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ee      	beq.n	8007612 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	827b      	strh	r3, [r7, #18]
 800764a:	2300      	movs	r3, #0
 800764c:	823b      	strh	r3, [r7, #16]
 800764e:	2300      	movs	r3, #0
 8007650:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800766e:	8a7a      	ldrh	r2, [r7, #18]
 8007670:	8a3b      	ldrh	r3, [r7, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	d008      	beq.n	8007688 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007676:	8a3b      	ldrh	r3, [r7, #16]
 8007678:	041a      	lsls	r2, r3, #16
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	b29b      	uxth	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e004      	b.n	8007692 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007688:	8a7b      	ldrh	r3, [r7, #18]
 800768a:	041a      	lsls	r2, r3, #16
 800768c:	89fb      	ldrh	r3, [r7, #14]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007692:	697b      	ldr	r3, [r7, #20]
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr

0800769e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f85d 	bl	800776c <RTC_EnterInitMode>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
 80076bc:	e011      	b.n	80076e2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	0c12      	lsrs	r2, r2, #16
 80076c6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	b292      	uxth	r2, r2
 80076d0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f872 	bl	80077bc <RTC_ExitInitMode>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	81fb      	strh	r3, [r7, #14]
 80076f8:	2300      	movs	r3, #0
 80076fa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800770c:	89fb      	ldrh	r3, [r7, #14]
 800770e:	041a      	lsls	r2, r3, #16
 8007710:	89bb      	ldrh	r3, [r7, #12]
 8007712:	4313      	orrs	r3, r2
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f81d 	bl	800776c <RTC_EnterInitMode>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
 800773c:	e011      	b.n	8007762 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	0c12      	lsrs	r2, r2, #16
 8007746:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	b292      	uxth	r2, r2
 8007750:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f832 	bl	80077bc <RTC_ExitInitMode>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007778:	f7fc f8fe 	bl	8003978 <HAL_GetTick>
 800777c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800777e:	e009      	b.n	8007794 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007780:	f7fc f8fa 	bl	8003978 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800778e:	d901      	bls.n	8007794 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e00f      	b.n	80077b4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0ee      	beq.n	8007780 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0210 	orr.w	r2, r2, #16
 80077b0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0210 	bic.w	r2, r2, #16
 80077d6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80077d8:	f7fc f8ce 	bl	8003978 <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80077de:	e009      	b.n	80077f4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80077e0:	f7fc f8ca 	bl	8003978 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ee:	d901      	bls.n	80077f4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e007      	b.n	8007804 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0ee      	beq.n	80077e0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	b2db      	uxtb	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	b2da      	uxtb	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	4413      	add	r3, r2
 800783a:	b2db      	uxtb	r3, r3
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr
	...

08007848 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
 8007854:	4613      	mov	r3, r2
 8007856:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007866:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d82d      	bhi.n	80078ca <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	4613      	mov	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	4a2c      	ldr	r2, [pc, #176]	@ (800792c <RTC_WeekDayNum+0xe4>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	085a      	lsrs	r2, r3, #1
 8007882:	78bb      	ldrb	r3, [r7, #2]
 8007884:	441a      	add	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	441a      	add	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	3b01      	subs	r3, #1
 800788e:	089b      	lsrs	r3, r3, #2
 8007890:	441a      	add	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	3b01      	subs	r3, #1
 8007896:	4926      	ldr	r1, [pc, #152]	@ (8007930 <RTC_WeekDayNum+0xe8>)
 8007898:	fba1 1303 	umull	r1, r3, r1, r3
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	4922      	ldr	r1, [pc, #136]	@ (8007930 <RTC_WeekDayNum+0xe8>)
 80078a6:	fba1 1303 	umull	r1, r3, r1, r3
 80078aa:	09db      	lsrs	r3, r3, #7
 80078ac:	4413      	add	r3, r2
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	4b20      	ldr	r3, [pc, #128]	@ (8007934 <RTC_WeekDayNum+0xec>)
 80078b2:	fba3 1302 	umull	r1, r3, r3, r2
 80078b6:	1ad1      	subs	r1, r2, r3
 80078b8:	0849      	lsrs	r1, r1, #1
 80078ba:	440b      	add	r3, r1
 80078bc:	0899      	lsrs	r1, r3, #2
 80078be:	460b      	mov	r3, r1
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	1a5b      	subs	r3, r3, r1
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e029      	b.n	800791e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	4613      	mov	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	4413      	add	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	4a15      	ldr	r2, [pc, #84]	@ (800792c <RTC_WeekDayNum+0xe4>)
 80078d8:	fba2 2303 	umull	r2, r3, r2, r3
 80078dc:	085a      	lsrs	r2, r3, #1
 80078de:	78bb      	ldrb	r3, [r7, #2]
 80078e0:	441a      	add	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	441a      	add	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	441a      	add	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4910      	ldr	r1, [pc, #64]	@ (8007930 <RTC_WeekDayNum+0xe8>)
 80078f0:	fba1 1303 	umull	r1, r3, r1, r3
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	1ad2      	subs	r2, r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	490d      	ldr	r1, [pc, #52]	@ (8007930 <RTC_WeekDayNum+0xe8>)
 80078fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007900:	09db      	lsrs	r3, r3, #7
 8007902:	4413      	add	r3, r2
 8007904:	1c9a      	adds	r2, r3, #2
 8007906:	4b0b      	ldr	r3, [pc, #44]	@ (8007934 <RTC_WeekDayNum+0xec>)
 8007908:	fba3 1302 	umull	r1, r3, r3, r2
 800790c:	1ad1      	subs	r1, r2, r3
 800790e:	0849      	lsrs	r1, r1, #1
 8007910:	440b      	add	r3, r1
 8007912:	0899      	lsrs	r1, r3, #2
 8007914:	460b      	mov	r3, r1
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	1a5b      	subs	r3, r3, r1
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	b2db      	uxtb	r3, r3
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	bc80      	pop	{r7}
 800792a:	4770      	bx	lr
 800792c:	38e38e39 	.word	0x38e38e39
 8007930:	51eb851f 	.word	0x51eb851f
 8007934:	24924925 	.word	0x24924925

08007938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e076      	b.n	8007a38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d108      	bne.n	8007964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800795a:	d009      	beq.n	8007970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	61da      	str	r2, [r3, #28]
 8007962:	e005      	b.n	8007970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fb fd3a 	bl	8003404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f4:	ea42 0103 	orr.w	r1, r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	0c1a      	lsrs	r2, r3, #16
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f002 0204 	and.w	r2, r2, #4
 8007a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e041      	b.n	8007ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fb fd16 	bl	8003498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f000 fc98 	bl	80083b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d001      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e03a      	b.n	8007b6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0201 	orr.w	r2, r2, #1
 8007b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a18      	ldr	r2, [pc, #96]	@ (8007b78 <HAL_TIM_Base_Start_IT+0x98>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00e      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x58>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b22:	d009      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x58>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a14      	ldr	r2, [pc, #80]	@ (8007b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x58>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a13      	ldr	r2, [pc, #76]	@ (8007b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d111      	bne.n	8007b5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b06      	cmp	r3, #6
 8007b48:	d010      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5a:	e007      	b.n	8007b6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800

08007b84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e041      	b.n	8007c1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f839 	bl	8007c22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f000 fbf6 	bl	80083b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_IC_Start_IT+0x1e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	e013      	b.n	8007c7a <HAL_TIM_IC_Start_IT+0x46>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d104      	bne.n	8007c62 <HAL_TIM_IC_Start_IT+0x2e>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	e00b      	b.n	8007c7a <HAL_TIM_IC_Start_IT+0x46>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d104      	bne.n	8007c72 <HAL_TIM_IC_Start_IT+0x3e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	e003      	b.n	8007c7a <HAL_TIM_IC_Start_IT+0x46>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <HAL_TIM_IC_Start_IT+0x58>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	e013      	b.n	8007cb4 <HAL_TIM_IC_Start_IT+0x80>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d104      	bne.n	8007c9c <HAL_TIM_IC_Start_IT+0x68>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e00b      	b.n	8007cb4 <HAL_TIM_IC_Start_IT+0x80>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d104      	bne.n	8007cac <HAL_TIM_IC_Start_IT+0x78>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e003      	b.n	8007cb4 <HAL_TIM_IC_Start_IT+0x80>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d102      	bne.n	8007cc2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cbc:	7b7b      	ldrb	r3, [r7, #13]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d001      	beq.n	8007cc6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e0b8      	b.n	8007e38 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <HAL_TIM_IC_Start_IT+0xa2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cd4:	e013      	b.n	8007cfe <HAL_TIM_IC_Start_IT+0xca>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIM_IC_Start_IT+0xb2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ce4:	e00b      	b.n	8007cfe <HAL_TIM_IC_Start_IT+0xca>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIM_IC_Start_IT+0xc2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cf4:	e003      	b.n	8007cfe <HAL_TIM_IC_Start_IT+0xca>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_IC_Start_IT+0xda>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d0c:	e013      	b.n	8007d36 <HAL_TIM_IC_Start_IT+0x102>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d104      	bne.n	8007d1e <HAL_TIM_IC_Start_IT+0xea>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d1c:	e00b      	b.n	8007d36 <HAL_TIM_IC_Start_IT+0x102>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_IC_Start_IT+0xfa>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d2c:	e003      	b.n	8007d36 <HAL_TIM_IC_Start_IT+0x102>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d841      	bhi.n	8007dc0 <HAL_TIM_IC_Start_IT+0x18c>
 8007d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <HAL_TIM_IC_Start_IT+0x110>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007dc1 	.word	0x08007dc1
 8007d4c:	08007dc1 	.word	0x08007dc1
 8007d50:	08007dc1 	.word	0x08007dc1
 8007d54:	08007d8b 	.word	0x08007d8b
 8007d58:	08007dc1 	.word	0x08007dc1
 8007d5c:	08007dc1 	.word	0x08007dc1
 8007d60:	08007dc1 	.word	0x08007dc1
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007dc1 	.word	0x08007dc1
 8007d6c:	08007dc1 	.word	0x08007dc1
 8007d70:	08007dc1 	.word	0x08007dc1
 8007d74:	08007daf 	.word	0x08007daf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0202 	orr.w	r2, r2, #2
 8007d86:	60da      	str	r2, [r3, #12]
      break;
 8007d88:	e01d      	b.n	8007dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0204 	orr.w	r2, r2, #4
 8007d98:	60da      	str	r2, [r3, #12]
      break;
 8007d9a:	e014      	b.n	8007dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0208 	orr.w	r2, r2, #8
 8007daa:	60da      	str	r2, [r3, #12]
      break;
 8007dac:	e00b      	b.n	8007dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0210 	orr.w	r2, r2, #16
 8007dbc:	60da      	str	r2, [r3, #12]
      break;
 8007dbe:	e002      	b.n	8007dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d134      	bne.n	8007e36 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fcfe 	bl	80087d6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a18      	ldr	r2, [pc, #96]	@ (8007e40 <HAL_TIM_IC_Start_IT+0x20c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00e      	beq.n	8007e02 <HAL_TIM_IC_Start_IT+0x1ce>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dec:	d009      	beq.n	8007e02 <HAL_TIM_IC_Start_IT+0x1ce>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a14      	ldr	r2, [pc, #80]	@ (8007e44 <HAL_TIM_IC_Start_IT+0x210>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_TIM_IC_Start_IT+0x1ce>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a12      	ldr	r2, [pc, #72]	@ (8007e48 <HAL_TIM_IC_Start_IT+0x214>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d111      	bne.n	8007e26 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b06      	cmp	r3, #6
 8007e12:	d010      	beq.n	8007e36 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e24:	e007      	b.n	8007e36 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0201 	orr.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800

08007e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d020      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01b      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0202 	mvn.w	r2, #2
 8007e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fa fae0 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa6c 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa72 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d020      	beq.n	8007efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01b      	beq.n	8007efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0204 	mvn.w	r2, #4
 8007ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fa faba 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8007ee8:	e005      	b.n	8007ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa46 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa4c 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d020      	beq.n	8007f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01b      	beq.n	8007f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0208 	mvn.w	r2, #8
 8007f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fa fa94 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8007f34:	e005      	b.n	8007f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa20 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa26 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d020      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01b      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0210 	mvn.w	r2, #16
 8007f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2208      	movs	r2, #8
 8007f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fa fa6e 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9fa 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa00 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0201 	mvn.w	r2, #1
 8007fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fa fa5d 	bl	8002472 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00c      	beq.n	8007fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fc89 	bl	80088ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00c      	beq.n	8008000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f9d0 	bl	80083a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00c      	beq.n	8008024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f06f 0220 	mvn.w	r2, #32
 800801c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fc5c 	bl	80088dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008046:	2302      	movs	r3, #2
 8008048:	e088      	b.n	800815c <HAL_TIM_IC_ConfigChannel+0x130>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d11b      	bne.n	8008090 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008068:	f000 fa12 	bl	8008490 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 020c 	bic.w	r2, r2, #12
 800807a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6999      	ldr	r1, [r3, #24]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	619a      	str	r2, [r3, #24]
 800808e:	e060      	b.n	8008152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b04      	cmp	r3, #4
 8008094:	d11c      	bne.n	80080d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80080a6:	f000 fa7b 	bl	80085a0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	699a      	ldr	r2, [r3, #24]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80080b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6999      	ldr	r1, [r3, #24]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	021a      	lsls	r2, r3, #8
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	619a      	str	r2, [r3, #24]
 80080ce:	e040      	b.n	8008152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d11b      	bne.n	800810e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80080e6:	f000 fac6 	bl	8008676 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 020c 	bic.w	r2, r2, #12
 80080f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69d9      	ldr	r1, [r3, #28]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	61da      	str	r2, [r3, #28]
 800810c:	e021      	b.n	8008152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b0c      	cmp	r3, #12
 8008112:	d11c      	bne.n	800814e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008124:	f000 fae2 	bl	80086ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69da      	ldr	r2, [r3, #28]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008136:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69d9      	ldr	r1, [r3, #28]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	021a      	lsls	r2, r3, #8
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	61da      	str	r2, [r3, #28]
 800814c:	e001      	b.n	8008152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIM_ConfigClockSource+0x1c>
 800817c:	2302      	movs	r3, #2
 800817e:	e0b4      	b.n	80082ea <HAL_TIM_ConfigClockSource+0x186>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800819e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081b8:	d03e      	beq.n	8008238 <HAL_TIM_ConfigClockSource+0xd4>
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081be:	f200 8087 	bhi.w	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c6:	f000 8086 	beq.w	80082d6 <HAL_TIM_ConfigClockSource+0x172>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ce:	d87f      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081d0:	2b70      	cmp	r3, #112	@ 0x70
 80081d2:	d01a      	beq.n	800820a <HAL_TIM_ConfigClockSource+0xa6>
 80081d4:	2b70      	cmp	r3, #112	@ 0x70
 80081d6:	d87b      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081d8:	2b60      	cmp	r3, #96	@ 0x60
 80081da:	d050      	beq.n	800827e <HAL_TIM_ConfigClockSource+0x11a>
 80081dc:	2b60      	cmp	r3, #96	@ 0x60
 80081de:	d877      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081e0:	2b50      	cmp	r3, #80	@ 0x50
 80081e2:	d03c      	beq.n	800825e <HAL_TIM_ConfigClockSource+0xfa>
 80081e4:	2b50      	cmp	r3, #80	@ 0x50
 80081e6:	d873      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081e8:	2b40      	cmp	r3, #64	@ 0x40
 80081ea:	d058      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x13a>
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d86f      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081f0:	2b30      	cmp	r3, #48	@ 0x30
 80081f2:	d064      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x15a>
 80081f4:	2b30      	cmp	r3, #48	@ 0x30
 80081f6:	d86b      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d060      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x15a>
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d867      	bhi.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d05c      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x15a>
 8008204:	2b10      	cmp	r3, #16
 8008206:	d05a      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x15a>
 8008208:	e062      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800821a:	f000 fabd 	bl	8008798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800822c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	609a      	str	r2, [r3, #8]
      break;
 8008236:	e04f      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008248:	f000 faa6 	bl	8008798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800825a:	609a      	str	r2, [r3, #8]
      break;
 800825c:	e03c      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800826a:	461a      	mov	r2, r3
 800826c:	f000 f96a 	bl	8008544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2150      	movs	r1, #80	@ 0x50
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fa74 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 800827c:	e02c      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800828a:	461a      	mov	r2, r3
 800828c:	f000 f9c4 	bl	8008618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2160      	movs	r1, #96	@ 0x60
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fa64 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 800829c:	e01c      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082aa:	461a      	mov	r2, r3
 80082ac:	f000 f94a 	bl	8008544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2140      	movs	r1, #64	@ 0x40
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fa54 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 80082bc:	e00c      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f000 fa4b 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 80082ce:	e003      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
      break;
 80082d4:	e000      	b.n	80082d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b0c      	cmp	r3, #12
 8008306:	d831      	bhi.n	800836c <HAL_TIM_ReadCapturedValue+0x78>
 8008308:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <HAL_TIM_ReadCapturedValue+0x1c>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008345 	.word	0x08008345
 8008314:	0800836d 	.word	0x0800836d
 8008318:	0800836d 	.word	0x0800836d
 800831c:	0800836d 	.word	0x0800836d
 8008320:	0800834f 	.word	0x0800834f
 8008324:	0800836d 	.word	0x0800836d
 8008328:	0800836d 	.word	0x0800836d
 800832c:	0800836d 	.word	0x0800836d
 8008330:	08008359 	.word	0x08008359
 8008334:	0800836d 	.word	0x0800836d
 8008338:	0800836d 	.word	0x0800836d
 800833c:	0800836d 	.word	0x0800836d
 8008340:	08008363 	.word	0x08008363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800834a:	60fb      	str	r3, [r7, #12]

      break;
 800834c:	e00f      	b.n	800836e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008354:	60fb      	str	r3, [r7, #12]

      break;
 8008356:	e00a      	b.n	800836e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835e:	60fb      	str	r3, [r7, #12]

      break;
 8008360:	e005      	b.n	800836e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008368:	60fb      	str	r3, [r7, #12]

      break;
 800836a:	e000      	b.n	800836e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800836c:	bf00      	nop
  }

  return tmpreg;
 800836e:	68fb      	ldr	r3, [r7, #12]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop

0800837c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr

080083a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr
	...

080083b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008484 <TIM_Base_SetConfig+0xd0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00b      	beq.n	80083e4 <TIM_Base_SetConfig+0x30>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083d2:	d007      	beq.n	80083e4 <TIM_Base_SetConfig+0x30>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008488 <TIM_Base_SetConfig+0xd4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_Base_SetConfig+0x30>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a2b      	ldr	r2, [pc, #172]	@ (800848c <TIM_Base_SetConfig+0xd8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d108      	bne.n	80083f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a22      	ldr	r2, [pc, #136]	@ (8008484 <TIM_Base_SetConfig+0xd0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00b      	beq.n	8008416 <TIM_Base_SetConfig+0x62>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008404:	d007      	beq.n	8008416 <TIM_Base_SetConfig+0x62>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a1f      	ldr	r2, [pc, #124]	@ (8008488 <TIM_Base_SetConfig+0xd4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <TIM_Base_SetConfig+0x62>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a1e      	ldr	r2, [pc, #120]	@ (800848c <TIM_Base_SetConfig+0xd8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d108      	bne.n	8008428 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800841c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a0d      	ldr	r2, [pc, #52]	@ (8008484 <TIM_Base_SetConfig+0xd0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d103      	bne.n	800845c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f023 0201 	bic.w	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]
  }
}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	40012c00 	.word	0x40012c00
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800

08008490 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	f023 0201 	bic.w	r2, r3, #1
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008538 <TIM_TI1_SetConfig+0xa8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00b      	beq.n	80084d6 <TIM_TI1_SetConfig+0x46>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c4:	d007      	beq.n	80084d6 <TIM_TI1_SetConfig+0x46>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4a1c      	ldr	r2, [pc, #112]	@ (800853c <TIM_TI1_SetConfig+0xac>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_TI1_SetConfig+0x46>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008540 <TIM_TI1_SetConfig+0xb0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d101      	bne.n	80084da <TIM_TI1_SetConfig+0x4a>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <TIM_TI1_SetConfig+0x4c>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d008      	beq.n	80084f2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f023 0303 	bic.w	r3, r3, #3
 80084e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e003      	b.n	80084fa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f043 0301 	orr.w	r3, r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	011b      	lsls	r3, r3, #4
 8008506:	b2db      	uxtb	r3, r3
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f023 030a 	bic.w	r3, r3, #10
 8008514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f003 030a 	and.w	r3, r3, #10
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr
 8008538:	40012c00 	.word	0x40012c00
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800

08008544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800856e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 030a 	bic.w	r3, r3, #10
 8008580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	f023 0210 	bic.w	r2, r3, #16
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	031b      	lsls	r3, r3, #12
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f023 0210 	bic.w	r2, r3, #16
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	031b      	lsls	r3, r3, #12
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008654:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	621a      	str	r2, [r3, #32]
}
 800866c:	bf00      	nop
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008676:	b480      	push	{r7}
 8008678:	b087      	sub	sp, #28
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	021b      	lsls	r3, r3, #8
 80086cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	621a      	str	r2, [r3, #32]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008718:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800872a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	031b      	lsls	r3, r3, #12
 8008730:	b29b      	uxth	r3, r3
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800873e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	031b      	lsls	r3, r3, #12
 8008744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	f043 0307 	orr.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr

08008798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	021a      	lsls	r2, r3, #8
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4313      	orrs	r3, r2
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	609a      	str	r2, [r3, #8]
}
 80087cc:	bf00      	nop
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr

080087d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b087      	sub	sp, #28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	2201      	movs	r2, #1
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	43db      	mvns	r3, r3
 80087f8:	401a      	ands	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a1a      	ldr	r2, [r3, #32]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	fa01 f303 	lsl.w	r3, r1, r3
 800880e:	431a      	orrs	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	621a      	str	r2, [r3, #32]
}
 8008814:	bf00      	nop
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr
	...

08008820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008834:	2302      	movs	r3, #2
 8008836:	e046      	b.n	80088c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a16      	ldr	r2, [pc, #88]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00e      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008884:	d009      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a12      	ldr	r2, [pc, #72]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d004      	beq.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a10      	ldr	r2, [pc, #64]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d10c      	bne.n	80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bc80      	pop	{r7}
 80088ce:	4770      	bx	lr
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800

080088dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr

080088ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	4638      	mov	r0, r7
 800890a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr

0800891a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800892a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800892e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	b29a      	uxth	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr

08008946 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800894e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008952:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	b29b      	uxth	r3, r3
 8008960:	43db      	mvns	r3, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	4013      	ands	r3, r2
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr

0800897a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	4638      	mov	r0, r7
 800899c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr

080089cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b09d      	sub	sp, #116	@ 0x74
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80089ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	78db      	ldrb	r3, [r3, #3]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d81f      	bhi.n	8008a3e <USB_ActivateEndpoint+0x72>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <USB_ActivateEndpoint+0x38>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a47 	.word	0x08008a47
 8008a10:	08008a23 	.word	0x08008a23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008a20:	e012      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a26:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008a2a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008a2e:	e00b      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008a3c:	e004      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008a44:	e000      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>
      break;
 8008a46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	7812      	ldrb	r2, [r2, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	441a      	add	r2, r3
 8008a96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	7b1b      	ldrb	r3, [r3, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 8178 	bne.w	8008da8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 8084 	beq.w	8008bca <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	461a      	mov	r2, r3
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	011a      	lsls	r2, r3, #4
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	88db      	ldrh	r3, [r3, #6]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	827b      	strh	r3, [r7, #18]
 8008b04:	8a7b      	ldrh	r3, [r7, #18]
 8008b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01b      	beq.n	8008b46 <USB_ActivateEndpoint+0x17a>
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b24:	823b      	strh	r3, [r7, #16]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	441a      	add	r2, r3
 8008b30:	8a3b      	ldrh	r3, [r7, #16]
 8008b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	78db      	ldrb	r3, [r3, #3]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d020      	beq.n	8008b90 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b64:	81bb      	strh	r3, [r7, #12]
 8008b66:	89bb      	ldrh	r3, [r7, #12]
 8008b68:	f083 0320 	eor.w	r3, r3, #32
 8008b6c:	81bb      	strh	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	441a      	add	r2, r3
 8008b78:	89bb      	ldrh	r3, [r7, #12]
 8008b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	8013      	strh	r3, [r2, #0]
 8008b8e:	e2d5      	b.n	800913c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba6:	81fb      	strh	r3, [r7, #14]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	89fb      	ldrh	r3, [r7, #14]
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]
 8008bc8:	e2b8      	b.n	800913c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	4413      	add	r3, r2
 8008bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	011a      	lsls	r2, r3, #4
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	88db      	ldrh	r3, [r3, #6]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	4413      	add	r3, r2
 8008c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	011a      	lsls	r2, r3, #4
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	801a      	strh	r2, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c38:	d91d      	bls.n	8008c76 <USB_ActivateEndpoint+0x2aa>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 031f 	and.w	r3, r3, #31
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <USB_ActivateEndpoint+0x288>
 8008c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c50:	3b01      	subs	r3, #1
 8008c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e026      	b.n	8008cc4 <USB_ActivateEndpoint+0x2f8>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <USB_ActivateEndpoint+0x2c8>
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	801a      	strh	r2, [r3, #0]
 8008c92:	e017      	b.n	8008cc4 <USB_ActivateEndpoint+0x2f8>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <USB_ActivateEndpoint+0x2e2>
 8008ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008caa:	3301      	adds	r3, #1
 8008cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	029b      	lsls	r3, r3, #10
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008cd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01b      	beq.n	8008d14 <USB_ActivateEndpoint+0x348>
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cf2:	843b      	strh	r3, [r7, #32]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	8c3b      	ldrh	r3, [r7, #32]
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d124      	bne.n	8008d66 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d32:	83bb      	strh	r3, [r7, #28]
 8008d34:	8bbb      	ldrh	r3, [r7, #28]
 8008d36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d3a:	83bb      	strh	r3, [r7, #28]
 8008d3c:	8bbb      	ldrh	r3, [r7, #28]
 8008d3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d42:	83bb      	strh	r3, [r7, #28]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	441a      	add	r2, r3
 8008d4e:	8bbb      	ldrh	r3, [r7, #28]
 8008d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	8013      	strh	r3, [r2, #0]
 8008d64:	e1ea      	b.n	800913c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d7c:	83fb      	strh	r3, [r7, #30]
 8008d7e:	8bfb      	ldrh	r3, [r7, #30]
 8008d80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d84:	83fb      	strh	r3, [r7, #30]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	441a      	add	r2, r3
 8008d90:	8bfb      	ldrh	r3, [r7, #30]
 8008d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	8013      	strh	r3, [r2, #0]
 8008da6:	e1c9      	b.n	800913c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	78db      	ldrb	r3, [r3, #3]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d11e      	bne.n	8008dee <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	441a      	add	r2, r3
 8008dd4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	8013      	strh	r3, [r2, #0]
 8008dec:	e01d      	b.n	8008e2a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e04:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	441a      	add	r2, r3
 8008e12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	461a      	mov	r2, r3
 8008e38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e3a:	4413      	add	r3, r2
 8008e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	011a      	lsls	r2, r3, #4
 8008e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	891b      	ldrh	r3, [r3, #8]
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e5c:	801a      	strh	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e6e:	4413      	add	r3, r2
 8008e70:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	011a      	lsls	r2, r3, #4
 8008e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008e80:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	895b      	ldrh	r3, [r3, #10]
 8008e86:	085b      	lsrs	r3, r3, #1
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e90:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 8093 	bne.w	8008fc2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01b      	beq.n	8008ef0 <USB_ActivateEndpoint+0x524>
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ece:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	441a      	add	r2, r3
 8008eda:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008efe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01b      	beq.n	8008f40 <USB_ActivateEndpoint+0x574>
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	441a      	add	r2, r3
 8008f2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f56:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008f58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f5e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008f60:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f66:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]
 8008fc0:	e0bc      	b.n	800913c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008fd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01d      	beq.n	800901a <USB_ActivateEndpoint+0x64e>
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	441a      	add	r2, r3
 8009002:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800900a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800900e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009016:	b29b      	uxth	r3, r3
 8009018:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800902a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800902e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01d      	beq.n	8009072 <USB_ActivateEndpoint+0x6a6>
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	441a      	add	r2, r3
 800905a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800906a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	78db      	ldrb	r3, [r3, #3]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d024      	beq.n	80090c4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800908c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009090:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009094:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009098:	f083 0320 	eor.w	r3, r3, #32
 800909c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	441a      	add	r2, r3
 80090aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80090ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8013      	strh	r3, [r2, #0]
 80090c2:	e01d      	b.n	8009100 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	441a      	add	r2, r3
 80090e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80090ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009116:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	441a      	add	r2, r3
 8009124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800912c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009138:	b29b      	uxth	r3, r3
 800913a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800913c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009140:	4618      	mov	r0, r3
 8009142:	3774      	adds	r7, #116	@ 0x74
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop

0800914c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800914c:	b480      	push	{r7}
 800914e:	b08d      	sub	sp, #52	@ 0x34
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	7b1b      	ldrb	r3, [r3, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 808e 	bne.w	800927c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d044      	beq.n	80091f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	81bb      	strh	r3, [r7, #12]
 8009176:	89bb      	ldrh	r3, [r7, #12]
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01b      	beq.n	80091b8 <USB_DeactivateEndpoint+0x6c>
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009196:	817b      	strh	r3, [r7, #10]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	441a      	add	r2, r3
 80091a2:	897b      	ldrh	r3, [r7, #10]
 80091a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091ce:	813b      	strh	r3, [r7, #8]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	441a      	add	r2, r3
 80091da:	893b      	ldrh	r3, [r7, #8]
 80091dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]
 80091f0:	e192      	b.n	8009518 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	827b      	strh	r3, [r7, #18]
 8009200:	8a7b      	ldrh	r3, [r7, #18]
 8009202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01b      	beq.n	8009242 <USB_DeactivateEndpoint+0xf6>
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009220:	823b      	strh	r3, [r7, #16]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	441a      	add	r2, r3
 800922c:	8a3b      	ldrh	r3, [r7, #16]
 800922e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800923a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800923e:	b29b      	uxth	r3, r3
 8009240:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009258:	81fb      	strh	r3, [r7, #14]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	441a      	add	r2, r3
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800926a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800926e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009276:	b29b      	uxth	r3, r3
 8009278:	8013      	strh	r3, [r2, #0]
 800927a:	e14d      	b.n	8009518 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	785b      	ldrb	r3, [r3, #1]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 80a5 	bne.w	80093d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	843b      	strh	r3, [r7, #32]
 8009294:	8c3b      	ldrh	r3, [r7, #32]
 8009296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d01b      	beq.n	80092d6 <USB_DeactivateEndpoint+0x18a>
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b4:	83fb      	strh	r3, [r7, #30]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	441a      	add	r2, r3
 80092c0:	8bfb      	ldrh	r3, [r7, #30]
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	83bb      	strh	r3, [r7, #28]
 80092e4:	8bbb      	ldrh	r3, [r7, #28]
 80092e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d01b      	beq.n	8009326 <USB_DeactivateEndpoint+0x1da>
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009304:	837b      	strh	r3, [r7, #26]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	441a      	add	r2, r3
 8009310:	8b7b      	ldrh	r3, [r7, #26]
 8009312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800931e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009322:	b29b      	uxth	r3, r3
 8009324:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933c:	833b      	strh	r3, [r7, #24]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	441a      	add	r2, r3
 8009348:	8b3b      	ldrh	r3, [r7, #24]
 800934a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800934e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009356:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800935a:	b29b      	uxth	r3, r3
 800935c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009374:	82fb      	strh	r3, [r7, #22]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	441a      	add	r2, r3
 8009380:	8afb      	ldrh	r3, [r7, #22]
 8009382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800938a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800938e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009392:	b29b      	uxth	r3, r3
 8009394:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ac:	82bb      	strh	r3, [r7, #20]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	441a      	add	r2, r3
 80093b8:	8abb      	ldrh	r3, [r7, #20]
 80093ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	8013      	strh	r3, [r2, #0]
 80093ce:	e0a3      	b.n	8009518 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80093de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80093e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01b      	beq.n	8009420 <USB_DeactivateEndpoint+0x2d4>
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	441a      	add	r2, r3
 800940a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800940c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009414:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941c:	b29b      	uxth	r3, r3
 800941e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800942e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01b      	beq.n	8009470 <USB_DeactivateEndpoint+0x324>
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800944a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800944e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800945c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009468:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800946c:	b29b      	uxth	r3, r3
 800946e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009486:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	441a      	add	r2, r3
 8009492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800949c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	441a      	add	r2, r3
 80094ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094dc:	b29b      	uxth	r3, r3
 80094de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	441a      	add	r2, r3
 8009502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3734      	adds	r7, #52	@ 0x34
 800951e:	46bd      	mov	sp, r7
 8009520:	bc80      	pop	{r7}
 8009522:	4770      	bx	lr

08009524 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b0c2      	sub	sp, #264	@ 0x108
 8009528:	af00      	add	r7, sp, #0
 800952a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009532:	6018      	str	r0, [r3, #0]
 8009534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800953c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800953e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	2b01      	cmp	r3, #1
 800954c:	f040 86b7 	bne.w	800a2be <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	699a      	ldr	r2, [r3, #24]
 800955c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	429a      	cmp	r2, r3
 800956a:	d908      	bls.n	800957e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800956c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800957c:	e007      	b.n	800958e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800957e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800958e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	7b1b      	ldrb	r3, [r3, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d13a      	bne.n	8009614 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800959e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6959      	ldr	r1, [r3, #20]
 80095aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	88da      	ldrh	r2, [r3, #6]
 80095b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80095c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80095c4:	6800      	ldr	r0, [r0, #0]
 80095c6:	f001 fc9c 	bl	800af02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	461a      	mov	r2, r3
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	4413      	add	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
 80095ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	011a      	lsls	r2, r3, #4
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	4413      	add	r3, r2
 8009600:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	f000 be1f 	b.w	800a252 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	78db      	ldrb	r3, [r3, #3]
 8009620:	2b02      	cmp	r3, #2
 8009622:	f040 8462 	bne.w	8009eea <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a1a      	ldr	r2, [r3, #32]
 8009632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	429a      	cmp	r2, r3
 8009640:	f240 83df 	bls.w	8009e02 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800966e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	441a      	add	r2, r3
 8009688:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800968c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009694:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969c:	b29b      	uxth	r3, r3
 800969e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80096a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a1a      	ldr	r2, [r3, #32]
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	1ad2      	subs	r2, r2, r3
 80096b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 81c7 	beq.w	8009a74 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d177      	bne.n	80097f2 <USB_EPStartXfer+0x2ce>
 8009702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800970e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800971c:	b29b      	uxth	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	4413      	add	r3, r2
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	011a      	lsls	r2, r3, #4
 8009734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009736:	4413      	add	r3, r2
 8009738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009748:	b29a      	uxth	r2, r3
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	801a      	strh	r2, [r3, #0]
 800974e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009752:	2b3e      	cmp	r3, #62	@ 0x3e
 8009754:	d921      	bls.n	800979a <USB_EPStartXfer+0x276>
 8009756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	f003 031f 	and.w	r3, r3, #31
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <USB_EPStartXfer+0x252>
 800976c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009770:	3b01      	subs	r3, #1
 8009772:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29a      	uxth	r2, r3
 800977c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009780:	b29b      	uxth	r3, r3
 8009782:	029b      	lsls	r3, r3, #10
 8009784:	b29b      	uxth	r3, r3
 8009786:	4313      	orrs	r3, r2
 8009788:	b29b      	uxth	r3, r3
 800978a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800978e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009792:	b29a      	uxth	r2, r3
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	e050      	b.n	800983c <USB_EPStartXfer+0x318>
 800979a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <USB_EPStartXfer+0x294>
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	801a      	strh	r2, [r3, #0]
 80097b6:	e041      	b.n	800983c <USB_EPStartXfer+0x318>
 80097b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097bc:	085b      	lsrs	r3, r3, #1
 80097be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80097c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <USB_EPStartXfer+0x2b4>
 80097ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80097d2:	3301      	adds	r3, #1
 80097d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80097d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	029b      	lsls	r3, r3, #10
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	4313      	orrs	r3, r2
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	801a      	strh	r2, [r3, #0]
 80097f0:	e024      	b.n	800983c <USB_EPStartXfer+0x318>
 80097f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d11c      	bne.n	800983c <USB_EPStartXfer+0x318>
 8009802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009810:	b29b      	uxth	r3, r3
 8009812:	461a      	mov	r2, r3
 8009814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009816:	4413      	add	r3, r2
 8009818:	633b      	str	r3, [r7, #48]	@ 0x30
 800981a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	011a      	lsls	r2, r3, #4
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	4413      	add	r3, r2
 800982c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009836:	b29a      	uxth	r2, r3
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800983c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	895b      	ldrh	r3, [r3, #10]
 8009848:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800984c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6959      	ldr	r1, [r3, #20]
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	b29b      	uxth	r3, r3
 800985e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009862:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009866:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	f001 fb49 	bl	800af02 <USB_WritePMA>
            ep->xfer_buff += len;
 8009870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	695a      	ldr	r2, [r3, #20]
 800987c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009880:	441a      	add	r2, r3
 8009882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800988e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a1a      	ldr	r2, [r3, #32]
 800989a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d90f      	bls.n	80098ca <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80098aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6a1a      	ldr	r2, [r3, #32]
 80098b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ba:	1ad2      	subs	r2, r2, r3
 80098bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	621a      	str	r2, [r3, #32]
 80098c8:	e00e      	b.n	80098e8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80098ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80098da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2200      	movs	r2, #0
 80098e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d177      	bne.n	80099e8 <USB_EPStartXfer+0x4c4>
 80098f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	61bb      	str	r3, [r7, #24]
 8009904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009912:	b29b      	uxth	r3, r3
 8009914:	461a      	mov	r2, r3
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	4413      	add	r3, r2
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	011a      	lsls	r2, r3, #4
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	4413      	add	r3, r2
 800992e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800993e:	b29a      	uxth	r2, r3
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	801a      	strh	r2, [r3, #0]
 8009944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009948:	2b3e      	cmp	r3, #62	@ 0x3e
 800994a:	d921      	bls.n	8009990 <USB_EPStartXfer+0x46c>
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <USB_EPStartXfer+0x448>
 8009962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009966:	3b01      	subs	r3, #1
 8009968:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29a      	uxth	r2, r3
 8009972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009976:	b29b      	uxth	r3, r3
 8009978:	029b      	lsls	r3, r3, #10
 800997a:	b29b      	uxth	r3, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	b29b      	uxth	r3, r3
 8009980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009988:	b29a      	uxth	r2, r3
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	e056      	b.n	8009a3e <USB_EPStartXfer+0x51a>
 8009990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <USB_EPStartXfer+0x48a>
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	b29b      	uxth	r3, r3
 800999e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e047      	b.n	8009a3e <USB_EPStartXfer+0x51a>
 80099ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80099b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <USB_EPStartXfer+0x4aa>
 80099c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099c8:	3301      	adds	r3, #1
 80099ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099d8:	b29b      	uxth	r3, r3
 80099da:	029b      	lsls	r3, r3, #10
 80099dc:	b29b      	uxth	r3, r3
 80099de:	4313      	orrs	r3, r2
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	e02a      	b.n	8009a3e <USB_EPStartXfer+0x51a>
 80099e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	785b      	ldrb	r3, [r3, #1]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d122      	bne.n	8009a3e <USB_EPStartXfer+0x51a>
 80099f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	623b      	str	r3, [r7, #32]
 8009a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	461a      	mov	r2, r3
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	4413      	add	r3, r2
 8009a1a:	623b      	str	r3, [r7, #32]
 8009a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	011a      	lsls	r2, r3, #4
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	891b      	ldrh	r3, [r3, #8]
 8009a4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6959      	ldr	r1, [r3, #20]
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a6c:	6800      	ldr	r0, [r0, #0]
 8009a6e:	f001 fa48 	bl	800af02 <USB_WritePMA>
 8009a72:	e3ee      	b.n	800a252 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d177      	bne.n	8009b74 <USB_EPStartXfer+0x650>
 8009a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa4:	4413      	add	r3, r2
 8009aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	011a      	lsls	r2, r3, #4
 8009ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ad6:	d921      	bls.n	8009b1c <USB_EPStartXfer+0x5f8>
 8009ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	f003 031f 	and.w	r3, r3, #31
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <USB_EPStartXfer+0x5d4>
 8009aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009af2:	3b01      	subs	r3, #1
 8009af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	029b      	lsls	r3, r3, #10
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b18:	801a      	strh	r2, [r3, #0]
 8009b1a:	e056      	b.n	8009bca <USB_EPStartXfer+0x6a6>
 8009b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <USB_EPStartXfer+0x616>
 8009b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b36:	801a      	strh	r2, [r3, #0]
 8009b38:	e047      	b.n	8009bca <USB_EPStartXfer+0x6a6>
 8009b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <USB_EPStartXfer+0x636>
 8009b50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b54:	3301      	adds	r3, #1
 8009b56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	029b      	lsls	r3, r3, #10
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	e02a      	b.n	8009bca <USB_EPStartXfer+0x6a6>
 8009b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d122      	bne.n	8009bca <USB_EPStartXfer+0x6a6>
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba4:	4413      	add	r3, r2
 8009ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	011a      	lsls	r2, r3, #4
 8009bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bb8:	4413      	add	r3, r2
 8009bba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	891b      	ldrh	r3, [r3, #8]
 8009bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6959      	ldr	r1, [r3, #20]
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bf0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009bf4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009bf8:	6800      	ldr	r0, [r0, #0]
 8009bfa:	f001 f982 	bl	800af02 <USB_WritePMA>
            ep->xfer_buff += len;
 8009bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695a      	ldr	r2, [r3, #20]
 8009c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0e:	441a      	add	r2, r3
 8009c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6a1a      	ldr	r2, [r3, #32]
 8009c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d90f      	bls.n	8009c58 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6a1a      	ldr	r2, [r3, #32]
 8009c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c48:	1ad2      	subs	r2, r2, r3
 8009c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	621a      	str	r2, [r3, #32]
 8009c56:	e00e      	b.n	8009c76 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	785b      	ldrb	r3, [r3, #1]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d177      	bne.n	8009d82 <USB_EPStartXfer+0x85e>
 8009c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	4413      	add	r3, r2
 8009cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	011a      	lsls	r2, r3, #4
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cdc:	801a      	strh	r2, [r3, #0]
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ce4:	d921      	bls.n	8009d2a <USB_EPStartXfer+0x806>
 8009ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cea:	095b      	lsrs	r3, r3, #5
 8009cec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf4:	f003 031f 	and.w	r3, r3, #31
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <USB_EPStartXfer+0x7e2>
 8009cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d00:	3b01      	subs	r3, #1
 8009d02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	029b      	lsls	r3, r3, #10
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	4313      	orrs	r3, r2
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	e050      	b.n	8009dcc <USB_EPStartXfer+0x8a8>
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <USB_EPStartXfer+0x824>
 8009d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	e041      	b.n	8009dcc <USB_EPStartXfer+0x8a8>
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4c:	085b      	lsrs	r3, r3, #1
 8009d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <USB_EPStartXfer+0x844>
 8009d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d62:	3301      	adds	r3, #1
 8009d64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	029b      	lsls	r3, r3, #10
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	e024      	b.n	8009dcc <USB_EPStartXfer+0x8a8>
 8009d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d11c      	bne.n	8009dcc <USB_EPStartXfer+0x8a8>
 8009d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	461a      	mov	r2, r3
 8009da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009da6:	4413      	add	r3, r2
 8009da8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	011a      	lsls	r2, r3, #4
 8009db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dba:	4413      	add	r3, r2
 8009dbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	895b      	ldrh	r3, [r3, #10]
 8009dd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6959      	ldr	r1, [r3, #20]
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009df2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009df6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009dfa:	6800      	ldr	r0, [r0, #0]
 8009dfc:	f001 f881 	bl	800af02 <USB_WritePMA>
 8009e00:	e227      	b.n	800a252 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e38:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	441a      	add	r2, r3
 8009e56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e8e:	4413      	add	r3, r2
 8009e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	011a      	lsls	r2, r3, #4
 8009ea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	891b      	ldrh	r3, [r3, #8]
 8009ec0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6959      	ldr	r1, [r3, #20]
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009eda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ede:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ee2:	6800      	ldr	r0, [r0, #0]
 8009ee4:	f001 f80d 	bl	800af02 <USB_WritePMA>
 8009ee8:	e1b3      	b.n	800a252 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6a1a      	ldr	r2, [r3, #32]
 8009ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efa:	1ad2      	subs	r2, r2, r3
 8009efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 80c6 	beq.w	800a0bc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d177      	bne.n	800a03c <USB_EPStartXfer+0xb18>
 8009f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f6c:	4413      	add	r3, r2
 8009f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	011a      	lsls	r2, r3, #4
 8009f7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f80:	4413      	add	r3, r2
 8009f82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f86:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f8a:	881b      	ldrh	r3, [r3, #0]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f96:	801a      	strh	r2, [r3, #0]
 8009f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f9e:	d921      	bls.n	8009fe4 <USB_EPStartXfer+0xac0>
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fae:	f003 031f 	and.w	r3, r3, #31
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d104      	bne.n	8009fc0 <USB_EPStartXfer+0xa9c>
 8009fb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	029b      	lsls	r3, r3, #10
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	e050      	b.n	800a086 <USB_EPStartXfer+0xb62>
 8009fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <USB_EPStartXfer+0xade>
 8009fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	e041      	b.n	800a086 <USB_EPStartXfer+0xb62>
 800a002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a006:	085b      	lsrs	r3, r3, #1
 800a008:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <USB_EPStartXfer+0xafe>
 800a018:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a01c:	3301      	adds	r3, #1
 800a01e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29a      	uxth	r2, r3
 800a028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	029b      	lsls	r3, r3, #10
 800a030:	b29b      	uxth	r3, r3
 800a032:	4313      	orrs	r3, r2
 800a034:	b29a      	uxth	r2, r3
 800a036:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a038:	801a      	strh	r2, [r3, #0]
 800a03a:	e024      	b.n	800a086 <USB_EPStartXfer+0xb62>
 800a03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d11c      	bne.n	800a086 <USB_EPStartXfer+0xb62>
 800a04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a060:	4413      	add	r3, r2
 800a062:	673b      	str	r3, [r7, #112]	@ 0x70
 800a064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	011a      	lsls	r2, r3, #4
 800a072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a074:	4413      	add	r3, r2
 800a076:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a07a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a080:	b29a      	uxth	r2, r3
 800a082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a084:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	895b      	ldrh	r3, [r3, #10]
 800a092:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6959      	ldr	r1, [r3, #20]
 800a0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0b4:	6800      	ldr	r0, [r0, #0]
 800a0b6:	f000 ff24 	bl	800af02 <USB_WritePMA>
 800a0ba:	e0ca      	b.n	800a252 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d177      	bne.n	800a1bc <USB_EPStartXfer+0xc98>
 800a0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0ec:	4413      	add	r3, r2
 800a0ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	011a      	lsls	r2, r3, #4
 800a0fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a100:	4413      	add	r3, r2
 800a102:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a106:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a112:	b29a      	uxth	r2, r3
 800a114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a11e:	d921      	bls.n	800a164 <USB_EPStartXfer+0xc40>
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a12e:	f003 031f 	and.w	r3, r3, #31
 800a132:	2b00      	cmp	r3, #0
 800a134:	d104      	bne.n	800a140 <USB_EPStartXfer+0xc1c>
 800a136:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a13a:	3b01      	subs	r3, #1
 800a13c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29a      	uxth	r2, r3
 800a146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	029b      	lsls	r3, r3, #10
 800a14e:	b29b      	uxth	r3, r3
 800a150:	4313      	orrs	r3, r2
 800a152:	b29b      	uxth	r3, r3
 800a154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a160:	801a      	strh	r2, [r3, #0]
 800a162:	e05c      	b.n	800a21e <USB_EPStartXfer+0xcfa>
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <USB_EPStartXfer+0xc5e>
 800a16c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	e04d      	b.n	800a21e <USB_EPStartXfer+0xcfa>
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a186:	085b      	lsrs	r3, r3, #1
 800a188:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <USB_EPStartXfer+0xc7e>
 800a198:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a19c:	3301      	adds	r3, #1
 800a19e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a1a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	029b      	lsls	r3, r3, #10
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	e030      	b.n	800a21e <USB_EPStartXfer+0xcfa>
 800a1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d128      	bne.n	800a21e <USB_EPStartXfer+0xcfa>
 800a1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	011a      	lsls	r2, r3, #4
 800a204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a208:	4413      	add	r3, r2
 800a20a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a20e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a216:	b29a      	uxth	r2, r3
 800a218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a21c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	891b      	ldrh	r3, [r3, #8]
 800a22a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6959      	ldr	r1, [r3, #20]
 800a23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a23e:	b29b      	uxth	r3, r3
 800a240:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a244:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a248:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a24c:	6800      	ldr	r0, [r0, #0]
 800a24e:	f000 fe58 	bl	800af02 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a278:	817b      	strh	r3, [r7, #10]
 800a27a:	897b      	ldrh	r3, [r7, #10]
 800a27c:	f083 0310 	eor.w	r3, r3, #16
 800a280:	817b      	strh	r3, [r7, #10]
 800a282:	897b      	ldrh	r3, [r7, #10]
 800a284:	f083 0320 	eor.w	r3, r3, #32
 800a288:	817b      	strh	r3, [r7, #10]
 800a28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	897b      	ldrh	r3, [r7, #10]
 800a2a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	8013      	strh	r3, [r2, #0]
 800a2ba:	f000 bcde 	b.w	800ac7a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	7b1b      	ldrb	r3, [r3, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f040 80bb 	bne.w	800a446 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	699a      	ldr	r2, [r3, #24]
 800a2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d917      	bls.n	800a31c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a2ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699a      	ldr	r2, [r3, #24]
 800a308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a30c:	1ad2      	subs	r2, r2, r3
 800a30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	619a      	str	r2, [r3, #24]
 800a31a:	e00e      	b.n	800a33a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a356:	b29b      	uxth	r3, r3
 800a358:	461a      	mov	r2, r3
 800a35a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a35e:	4413      	add	r3, r2
 800a360:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	011a      	lsls	r2, r3, #4
 800a372:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a376:	4413      	add	r3, r2
 800a378:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a37c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a392:	801a      	strh	r2, [r3, #0]
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a398:	2b3e      	cmp	r3, #62	@ 0x3e
 800a39a:	d924      	bls.n	800a3e6 <USB_EPStartXfer+0xec2>
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a0:	095b      	lsrs	r3, r3, #5
 800a3a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3aa:	f003 031f 	and.w	r3, r3, #31
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d104      	bne.n	800a3bc <USB_EPStartXfer+0xe98>
 800a3b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	029b      	lsls	r3, r3, #10
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	f000 bc10 	b.w	800ac06 <USB_EPStartXfer+0x16e2>
 800a3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10c      	bne.n	800a408 <USB_EPStartXfer+0xee4>
 800a3ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	e3fe      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <USB_EPStartXfer+0xf04>
 800a41e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a422:	3301      	adds	r3, #1
 800a424:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a434:	b29b      	uxth	r3, r3
 800a436:	029b      	lsls	r3, r3, #10
 800a438:	b29b      	uxth	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a442:	801a      	strh	r2, [r3, #0]
 800a444:	e3df      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	78db      	ldrb	r3, [r3, #3]
 800a452:	2b02      	cmp	r3, #2
 800a454:	f040 8218 	bne.w	800a888 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a45c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f040 809d 	bne.w	800a5a4 <USB_EPStartXfer+0x1080>
 800a46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a46e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a47c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a486:	b29b      	uxth	r3, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a48e:	4413      	add	r3, r2
 800a490:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	011a      	lsls	r2, r3, #4
 800a4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a4ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4c2:	801a      	strh	r2, [r3, #0]
 800a4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4d2:	d92b      	bls.n	800a52c <USB_EPStartXfer+0x1008>
 800a4d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	095b      	lsrs	r3, r3, #5
 800a4e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a4e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f003 031f 	and.w	r3, r3, #31
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d104      	bne.n	800a504 <USB_EPStartXfer+0xfe0>
 800a4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4fe:	3b01      	subs	r3, #1
 800a500:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a510:	b29b      	uxth	r3, r3
 800a512:	029b      	lsls	r3, r3, #10
 800a514:	b29b      	uxth	r3, r3
 800a516:	4313      	orrs	r3, r2
 800a518:	b29b      	uxth	r3, r3
 800a51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a522:	b29a      	uxth	r2, r3
 800a524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a528:	801a      	strh	r2, [r3, #0]
 800a52a:	e070      	b.n	800a60e <USB_EPStartXfer+0x10ea>
 800a52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10c      	bne.n	800a556 <USB_EPStartXfer+0x1032>
 800a53c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	b29b      	uxth	r3, r3
 800a544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	e05b      	b.n	800a60e <USB_EPStartXfer+0x10ea>
 800a556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a55a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	085b      	lsrs	r3, r3, #1
 800a564:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <USB_EPStartXfer+0x1062>
 800a57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a580:	3301      	adds	r3, #1
 800a582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a592:	b29b      	uxth	r3, r3
 800a594:	029b      	lsls	r3, r3, #10
 800a596:	b29b      	uxth	r3, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	e034      	b.n	800a60e <USB_EPStartXfer+0x10ea>
 800a5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d12c      	bne.n	800a60e <USB_EPStartXfer+0x10ea>
 800a5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5d8:	4413      	add	r3, r2
 800a5da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	011a      	lsls	r2, r3, #4
 800a5ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a5f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	b29a      	uxth	r2, r3
 800a608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	785b      	ldrb	r3, [r3, #1]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f040 809d 	bne.w	800a768 <USB_EPStartXfer+0x1244>
 800a62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a63c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a652:	4413      	add	r3, r2
 800a654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	011a      	lsls	r2, r3, #4
 800a666:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a66a:	4413      	add	r3, r2
 800a66c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a680:	b29a      	uxth	r2, r3
 800a682:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a686:	801a      	strh	r2, [r3, #0]
 800a688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a68c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b3e      	cmp	r3, #62	@ 0x3e
 800a696:	d92b      	bls.n	800a6f0 <USB_EPStartXfer+0x11cc>
 800a698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	095b      	lsrs	r3, r3, #5
 800a6a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f003 031f 	and.w	r3, r3, #31
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d104      	bne.n	800a6c8 <USB_EPStartXfer+0x11a4>
 800a6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	029b      	lsls	r3, r3, #10
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6ec:	801a      	strh	r2, [r3, #0]
 800a6ee:	e069      	b.n	800a7c4 <USB_EPStartXfer+0x12a0>
 800a6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10c      	bne.n	800a71a <USB_EPStartXfer+0x11f6>
 800a700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	b29b      	uxth	r3, r3
 800a708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a710:	b29a      	uxth	r2, r3
 800a712:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a716:	801a      	strh	r2, [r3, #0]
 800a718:	e054      	b.n	800a7c4 <USB_EPStartXfer+0x12a0>
 800a71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a72c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <USB_EPStartXfer+0x1226>
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a744:	3301      	adds	r3, #1
 800a746:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a74a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a764:	801a      	strh	r2, [r3, #0]
 800a766:	e02d      	b.n	800a7c4 <USB_EPStartXfer+0x12a0>
 800a768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a76c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d125      	bne.n	800a7c4 <USB_EPStartXfer+0x12a0>
 800a778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a786:	b29b      	uxth	r3, r3
 800a788:	461a      	mov	r2, r3
 800a78a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a78e:	4413      	add	r3, r2
 800a790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	011a      	lsls	r2, r3, #4
 800a7a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a7ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a7c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8218 	beq.w	800ac06 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a7d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a7f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a7fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d005      	beq.n	800a80e <USB_EPStartXfer+0x12ea>
 800a802:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10d      	bne.n	800a82a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a80e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a816:	2b00      	cmp	r3, #0
 800a818:	f040 81f5 	bne.w	800ac06 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a81c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 81ee 	bne.w	800ac06 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a82a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a84c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a850:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	441a      	add	r2, r3
 800a86e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a87a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a87e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a882:	b29b      	uxth	r3, r3
 800a884:	8013      	strh	r3, [r2, #0]
 800a886:	e1be      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	78db      	ldrb	r3, [r3, #3]
 800a894:	2b01      	cmp	r3, #1
 800a896:	f040 81b4 	bne.w	800ac02 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d917      	bls.n	800a8e6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699a      	ldr	r2, [r3, #24]
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	619a      	str	r2, [r3, #24]
 800a8e4:	e00e      	b.n	800a904 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2200      	movs	r2, #0
 800a902:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f040 8085 	bne.w	800aa20 <USB_EPStartXfer+0x14fc>
 800a916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a932:	b29b      	uxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a93a:	4413      	add	r3, r2
 800a93c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	011a      	lsls	r2, r3, #4
 800a94e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a952:	4413      	add	r3, r2
 800a954:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a95c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	b29b      	uxth	r3, r3
 800a964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a968:	b29a      	uxth	r2, r3
 800a96a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a96e:	801a      	strh	r2, [r3, #0]
 800a970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a974:	2b3e      	cmp	r3, #62	@ 0x3e
 800a976:	d923      	bls.n	800a9c0 <USB_EPStartXfer+0x149c>
 800a978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a97c:	095b      	lsrs	r3, r3, #5
 800a97e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a986:	f003 031f 	and.w	r3, r3, #31
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d104      	bne.n	800a998 <USB_EPStartXfer+0x1474>
 800a98e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a992:	3b01      	subs	r3, #1
 800a994:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	029b      	lsls	r3, r3, #10
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e060      	b.n	800aa82 <USB_EPStartXfer+0x155e>
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10c      	bne.n	800a9e2 <USB_EPStartXfer+0x14be>
 800a9c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9de:	801a      	strh	r2, [r3, #0]
 800a9e0:	e04f      	b.n	800aa82 <USB_EPStartXfer+0x155e>
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e6:	085b      	lsrs	r3, r3, #1
 800a9e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <USB_EPStartXfer+0x14de>
 800a9f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	029b      	lsls	r3, r3, #10
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4313      	orrs	r3, r2
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa1c:	801a      	strh	r2, [r3, #0]
 800aa1e:	e030      	b.n	800aa82 <USB_EPStartXfer+0x155e>
 800aa20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d128      	bne.n	800aa82 <USB_EPStartXfer+0x155e>
 800aa30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa54:	4413      	add	r3, r2
 800aa56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	011a      	lsls	r2, r3, #4
 800aa68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aa72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aa80:	801a      	strh	r2, [r3, #0]
 800aa82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	785b      	ldrb	r3, [r3, #1]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f040 8085 	bne.w	800abac <USB_EPStartXfer+0x1688>
 800aaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	461a      	mov	r2, r3
 800aac2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aac6:	4413      	add	r3, r2
 800aac8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aacc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	011a      	lsls	r2, r3, #4
 800aada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aade:	4413      	add	r3, r2
 800aae0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aafa:	801a      	strh	r2, [r3, #0]
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab00:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab02:	d923      	bls.n	800ab4c <USB_EPStartXfer+0x1628>
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab12:	f003 031f 	and.w	r3, r3, #31
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d104      	bne.n	800ab24 <USB_EPStartXfer+0x1600>
 800ab1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	029b      	lsls	r3, r3, #10
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	4313      	orrs	r3, r2
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	e05c      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10c      	bne.n	800ab6e <USB_EPStartXfer+0x164a>
 800ab54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab6a:	801a      	strh	r2, [r3, #0]
 800ab6c:	e04b      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab72:	085b      	lsrs	r3, r3, #1
 800ab74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <USB_EPStartXfer+0x166a>
 800ab84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab88:	3301      	adds	r3, #1
 800ab8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	029b      	lsls	r3, r3, #10
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	4313      	orrs	r3, r2
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	e02c      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
 800abac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	785b      	ldrb	r3, [r3, #1]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d124      	bne.n	800ac06 <USB_EPStartXfer+0x16e2>
 800abbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abca:	b29b      	uxth	r3, r3
 800abcc:	461a      	mov	r2, r3
 800abce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abd2:	4413      	add	r3, r2
 800abd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	011a      	lsls	r2, r3, #4
 800abe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abea:	4413      	add	r3, r2
 800abec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800abf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e001      	b.n	800ac06 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e03a      	b.n	800ac7c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	441a      	add	r2, r3
 800ac62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b085      	sub	sp, #20
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d020      	beq.n	800acda <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acae:	81bb      	strh	r3, [r7, #12]
 800acb0:	89bb      	ldrh	r3, [r7, #12]
 800acb2:	f083 0310 	eor.w	r3, r3, #16
 800acb6:	81bb      	strh	r3, [r7, #12]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	441a      	add	r2, r3
 800acc2:	89bb      	ldrh	r3, [r7, #12]
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
 800acd8:	e01f      	b.n	800ad1a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf0:	81fb      	strh	r3, [r7, #14]
 800acf2:	89fb      	ldrh	r3, [r7, #14]
 800acf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800acf8:	81fb      	strh	r3, [r7, #14]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	441a      	add	r2, r3
 800ad04:	89fb      	ldrh	r3, [r7, #14]
 800ad06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr

0800ad26 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	7b1b      	ldrb	r3, [r3, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f040 809d 	bne.w	800ae74 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	785b      	ldrb	r3, [r3, #1]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d04c      	beq.n	800addc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	823b      	strh	r3, [r7, #16]
 800ad50:	8a3b      	ldrh	r3, [r7, #16]
 800ad52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d01b      	beq.n	800ad92 <USB_EPClearStall+0x6c>
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad70:	81fb      	strh	r3, [r7, #14]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	441a      	add	r2, r3
 800ad7c:	89fb      	ldrh	r3, [r7, #14]
 800ad7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	78db      	ldrb	r3, [r3, #3]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d06c      	beq.n	800ae74 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adb0:	81bb      	strh	r3, [r7, #12]
 800adb2:	89bb      	ldrh	r3, [r7, #12]
 800adb4:	f083 0320 	eor.w	r3, r3, #32
 800adb8:	81bb      	strh	r3, [r7, #12]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	441a      	add	r2, r3
 800adc4:	89bb      	ldrh	r3, [r7, #12]
 800adc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800add2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add6:	b29b      	uxth	r3, r3
 800add8:	8013      	strh	r3, [r2, #0]
 800adda:	e04b      	b.n	800ae74 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	82fb      	strh	r3, [r7, #22]
 800adea:	8afb      	ldrh	r3, [r7, #22]
 800adec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01b      	beq.n	800ae2c <USB_EPClearStall+0x106>
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae0a:	82bb      	strh	r3, [r7, #20]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	441a      	add	r2, r3
 800ae16:	8abb      	ldrh	r3, [r7, #20]
 800ae18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae42:	827b      	strh	r3, [r7, #18]
 800ae44:	8a7b      	ldrh	r3, [r7, #18]
 800ae46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae4a:	827b      	strh	r3, [r7, #18]
 800ae4c:	8a7b      	ldrh	r3, [r7, #18]
 800ae4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae52:	827b      	strh	r3, [r7, #18]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	441a      	add	r2, r3
 800ae5e:	8a7b      	ldrh	r3, [r7, #18]
 800ae60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr

0800ae80 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d103      	bne.n	800ae9a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2280      	movs	r2, #128	@ 0x80
 800ae96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bc80      	pop	{r7}
 800aea4:	4770      	bx	lr

0800aea6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bc80      	pop	{r7}
 800aeb8:	4770      	bx	lr

0800aeba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b083      	sub	sp, #12
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bc80      	pop	{r7}
 800aecc:	4770      	bx	lr

0800aece <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aedc:	b29b      	uxth	r3, r3
 800aede:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aee0:	68fb      	ldr	r3, [r7, #12]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc80      	pop	{r7}
 800aeea:	4770      	bx	lr

0800aeec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bc80      	pop	{r7}
 800af00:	4770      	bx	lr

0800af02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af02:	b480      	push	{r7}
 800af04:	b08b      	sub	sp, #44	@ 0x2c
 800af06:	af00      	add	r7, sp, #0
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	4611      	mov	r1, r2
 800af0e:	461a      	mov	r2, r3
 800af10:	460b      	mov	r3, r1
 800af12:	80fb      	strh	r3, [r7, #6]
 800af14:	4613      	mov	r3, r2
 800af16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af18:	88bb      	ldrh	r3, [r7, #4]
 800af1a:	3301      	adds	r3, #1
 800af1c:	085b      	lsrs	r3, r3, #1
 800af1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	005a      	lsls	r2, r3, #1
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	627b      	str	r3, [r7, #36]	@ 0x24
 800af3a:	e01f      	b.n	800af7c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	3301      	adds	r3, #1
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	b21b      	sxth	r3, r3
 800af4a:	021b      	lsls	r3, r3, #8
 800af4c:	b21a      	sxth	r2, r3
 800af4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af52:	4313      	orrs	r3, r2
 800af54:	b21b      	sxth	r3, r3
 800af56:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	8a7a      	ldrh	r2, [r7, #18]
 800af5c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	3302      	adds	r3, #2
 800af62:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	3302      	adds	r3, #2
 800af68:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	3301      	adds	r3, #1
 800af6e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	3301      	adds	r3, #1
 800af74:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	3b01      	subs	r3, #1
 800af7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1dc      	bne.n	800af3c <USB_WritePMA+0x3a>
  }
}
 800af82:	bf00      	nop
 800af84:	bf00      	nop
 800af86:	372c      	adds	r7, #44	@ 0x2c
 800af88:	46bd      	mov	sp, r7
 800af8a:	bc80      	pop	{r7}
 800af8c:	4770      	bx	lr

0800af8e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af8e:	b480      	push	{r7}
 800af90:	b08b      	sub	sp, #44	@ 0x2c
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	4611      	mov	r1, r2
 800af9a:	461a      	mov	r2, r3
 800af9c:	460b      	mov	r3, r1
 800af9e:	80fb      	strh	r3, [r7, #6]
 800afa0:	4613      	mov	r3, r2
 800afa2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800afa4:	88bb      	ldrh	r3, [r7, #4]
 800afa6:	085b      	lsrs	r3, r3, #1
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afb4:	88fb      	ldrh	r3, [r7, #6]
 800afb6:	005a      	lsls	r2, r3, #1
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afc0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800afc6:	e01b      	b.n	800b000 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	3302      	adds	r3, #2
 800afd4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	3301      	adds	r3, #1
 800afe2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	0a1b      	lsrs	r3, r3, #8
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	3301      	adds	r3, #1
 800aff2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	3302      	adds	r3, #2
 800aff8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	3b01      	subs	r3, #1
 800affe:	627b      	str	r3, [r7, #36]	@ 0x24
 800b000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e0      	bne.n	800afc8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b006:	88bb      	ldrh	r3, [r7, #4]
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d007      	beq.n	800b022 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	b29b      	uxth	r3, r3
 800b018:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	701a      	strb	r2, [r3, #0]
  }
}
 800b022:	bf00      	nop
 800b024:	372c      	adds	r7, #44	@ 0x2c
 800b026:	46bd      	mov	sp, r7
 800b028:	bc80      	pop	{r7}
 800b02a:	4770      	bx	lr

0800b02c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b030:	4904      	ldr	r1, [pc, #16]	@ (800b044 <MX_FATFS_Init+0x18>)
 800b032:	4805      	ldr	r0, [pc, #20]	@ (800b048 <MX_FATFS_Init+0x1c>)
 800b034:	f001 fc12 	bl	800c85c <FATFS_LinkDriver>
 800b038:	4603      	mov	r3, r0
 800b03a:	461a      	mov	r2, r3
 800b03c:	4b03      	ldr	r3, [pc, #12]	@ (800b04c <MX_FATFS_Init+0x20>)
 800b03e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b040:	bf00      	nop
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200007a4 	.word	0x200007a4
 800b048:	20000010 	.word	0x20000010
 800b04c:	200007a0 	.word	0x200007a0

0800b050 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b05a:	4b05      	ldr	r3, [pc, #20]	@ (800b070 <USER_initialize+0x20>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b060:	4b03      	ldr	r3, [pc, #12]	@ (800b070 <USER_initialize+0x20>)
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b066:	4618      	mov	r0, r3
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bc80      	pop	{r7}
 800b06e:	4770      	bx	lr
 800b070:	2000000d 	.word	0x2000000d

0800b074 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b07e:	4b05      	ldr	r3, [pc, #20]	@ (800b094 <USER_status+0x20>)
 800b080:	2201      	movs	r2, #1
 800b082:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b084:	4b03      	ldr	r3, [pc, #12]	@ (800b094 <USER_status+0x20>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	bc80      	pop	{r7}
 800b092:	4770      	bx	lr
 800b094:	2000000d 	.word	0x2000000d

0800b098 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b0a8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bc80      	pop	{r7}
 800b0b2:	4770      	bx	lr

0800b0b4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60b9      	str	r1, [r7, #8]
 800b0bc:	607a      	str	r2, [r7, #4]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b0c4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bc80      	pop	{r7}
 800b0ce:	4770      	bx	lr

0800b0d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	603a      	str	r2, [r7, #0]
 800b0da:	71fb      	strb	r3, [r7, #7]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	73fb      	strb	r3, [r7, #15]
    return res;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bc80      	pop	{r7}
 800b0ee:	4770      	bx	lr

0800b0f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7c1b      	ldrb	r3, [r3, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d115      	bne.n	800b134 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b10c:	2202      	movs	r2, #2
 800b10e:	2181      	movs	r1, #129	@ 0x81
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 fee2 	bl	800ceda <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b11c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b120:	2202      	movs	r2, #2
 800b122:	2101      	movs	r1, #1
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 fed8 	bl	800ceda <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b132:	e012      	b.n	800b15a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b134:	2340      	movs	r3, #64	@ 0x40
 800b136:	2202      	movs	r2, #2
 800b138:	2181      	movs	r1, #129	@ 0x81
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 fecd 	bl	800ceda <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b146:	2340      	movs	r3, #64	@ 0x40
 800b148:	2202      	movs	r2, #2
 800b14a:	2101      	movs	r1, #1
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fec4 	bl	800ceda <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b15a:	2308      	movs	r3, #8
 800b15c:	2203      	movs	r2, #3
 800b15e:	2182      	movs	r1, #130	@ 0x82
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f001 feba 	bl	800ceda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b16c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b170:	f001 ffda 	bl	800d128 <USBD_static_malloc>
 800b174:	4602      	mov	r2, r0
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d102      	bne.n	800b18c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b186:	2301      	movs	r3, #1
 800b188:	73fb      	strb	r3, [r7, #15]
 800b18a:	e026      	b.n	800b1da <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b192:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7c1b      	ldrb	r3, [r3, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d109      	bne.n	800b1ca <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f001 ff79 	bl	800d0ba <USBD_LL_PrepareReceive>
 800b1c8:	e007      	b.n	800b1da <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1d0:	2340      	movs	r3, #64	@ 0x40
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 ff70 	bl	800d0ba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b1f4:	2181      	movs	r1, #129	@ 0x81
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 fe95 	bl	800cf26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b202:	2101      	movs	r1, #1
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 fe8e 	bl	800cf26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b212:	2182      	movs	r1, #130	@ 0x82
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f001 fe86 	bl	800cf26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00e      	beq.n	800b248 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b23a:	4618      	mov	r0, r3
 800b23c:	f001 ff80 	bl	800d140 <USBD_static_free>
    pdev->pClassData = NULL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b086      	sub	sp, #24
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b262:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d039      	beq.n	800b2f0 <USBD_CDC_Setup+0x9e>
 800b27c:	2b20      	cmp	r3, #32
 800b27e:	d17f      	bne.n	800b380 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	88db      	ldrh	r3, [r3, #6]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d029      	beq.n	800b2dc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	b25b      	sxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	da11      	bge.n	800b2b6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b29e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	88d2      	ldrh	r2, [r2, #6]
 800b2a4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b2a6:	6939      	ldr	r1, [r7, #16]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	88db      	ldrh	r3, [r3, #6]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 fa06 	bl	800c6c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b2b4:	e06b      	b.n	800b38e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	785a      	ldrb	r2, [r3, #1]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	88db      	ldrh	r3, [r3, #6]
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b2cc:	6939      	ldr	r1, [r7, #16]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	88db      	ldrh	r3, [r3, #6]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 fa21 	bl	800c71c <USBD_CtlPrepareRx>
      break;
 800b2da:	e058      	b.n	800b38e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	7850      	ldrb	r0, [r2, #1]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	4798      	blx	r3
      break;
 800b2ee:	e04e      	b.n	800b38e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	2b0b      	cmp	r3, #11
 800b2f6:	d02e      	beq.n	800b356 <USBD_CDC_Setup+0x104>
 800b2f8:	2b0b      	cmp	r3, #11
 800b2fa:	dc38      	bgt.n	800b36e <USBD_CDC_Setup+0x11c>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <USBD_CDC_Setup+0xb4>
 800b300:	2b0a      	cmp	r3, #10
 800b302:	d014      	beq.n	800b32e <USBD_CDC_Setup+0xdc>
 800b304:	e033      	b.n	800b36e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d107      	bne.n	800b320 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b310:	f107 030c 	add.w	r3, r7, #12
 800b314:	2202      	movs	r2, #2
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f001 f9d1 	bl	800c6c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b31e:	e02e      	b.n	800b37e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 f962 	bl	800c5ec <USBD_CtlError>
            ret = USBD_FAIL;
 800b328:	2302      	movs	r3, #2
 800b32a:	75fb      	strb	r3, [r7, #23]
          break;
 800b32c:	e027      	b.n	800b37e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b334:	2b03      	cmp	r3, #3
 800b336:	d107      	bne.n	800b348 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b338:	f107 030f 	add.w	r3, r7, #15
 800b33c:	2201      	movs	r2, #1
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f001 f9bd 	bl	800c6c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b346:	e01a      	b.n	800b37e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 f94e 	bl	800c5ec <USBD_CtlError>
            ret = USBD_FAIL;
 800b350:	2302      	movs	r3, #2
 800b352:	75fb      	strb	r3, [r7, #23]
          break;
 800b354:	e013      	b.n	800b37e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d00d      	beq.n	800b37c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 f942 	bl	800c5ec <USBD_CtlError>
            ret = USBD_FAIL;
 800b368:	2302      	movs	r3, #2
 800b36a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b36c:	e006      	b.n	800b37c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 f93b 	bl	800c5ec <USBD_CtlError>
          ret = USBD_FAIL;
 800b376:	2302      	movs	r3, #2
 800b378:	75fb      	strb	r3, [r7, #23]
          break;
 800b37a:	e000      	b.n	800b37e <USBD_CDC_Setup+0x12c>
          break;
 800b37c:	bf00      	nop
      }
      break;
 800b37e:	e006      	b.n	800b38e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f001 f932 	bl	800c5ec <USBD_CtlError>
      ret = USBD_FAIL;
 800b388:	2302      	movs	r3, #2
 800b38a:	75fb      	strb	r3, [r7, #23]
      break;
 800b38c:	bf00      	nop
  }

  return ret;
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3aa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3b2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d03a      	beq.n	800b434 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	331c      	adds	r3, #28
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d029      	beq.n	800b428 <USBD_CDC_DataIn+0x90>
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	440b      	add	r3, r1
 800b3e2:	331c      	adds	r3, #28
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	78f9      	ldrb	r1, [r7, #3]
 800b3e8:	68b8      	ldr	r0, [r7, #8]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	440b      	add	r3, r1
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	4403      	add	r3, r0
 800b3f4:	3320      	adds	r3, #32
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3fc:	fb01 f303 	mul.w	r3, r1, r3
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d110      	bne.n	800b428 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	331c      	adds	r3, #28
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b41a:	78f9      	ldrb	r1, [r7, #3]
 800b41c:	2300      	movs	r3, #0
 800b41e:	2200      	movs	r2, #0
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fe27 	bl	800d074 <USBD_LL_Transmit>
 800b426:	e003      	b.n	800b430 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	e000      	b.n	800b436 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b434:	2302      	movs	r3, #2
  }
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	460b      	mov	r3, r1
 800b448:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b450:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f001 fe52 	bl	800d100 <USBD_LL_GetRxDataSize>
 800b45c:	4602      	mov	r2, r0
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00d      	beq.n	800b48a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b482:	4611      	mov	r1, r2
 800b484:	4798      	blx	r3

    return USBD_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	e000      	b.n	800b48c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b48a:	2302      	movs	r3, #2
  }
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d014      	beq.n	800b4d8 <USBD_CDC_EP0_RxReady+0x44>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b4b4:	2bff      	cmp	r3, #255	@ 0xff
 800b4b6:	d00f      	beq.n	800b4d8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b4c6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	22ff      	movs	r2, #255	@ 0xff
 800b4d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2243      	movs	r2, #67	@ 0x43
 800b4f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b4f2:	4b03      	ldr	r3, [pc, #12]	@ (800b500 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bc80      	pop	{r7}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	200000ac 	.word	0x200000ac

0800b504 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2243      	movs	r2, #67	@ 0x43
 800b510:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b512:	4b03      	ldr	r3, [pc, #12]	@ (800b520 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	bc80      	pop	{r7}
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	20000068 	.word	0x20000068

0800b524 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2243      	movs	r2, #67	@ 0x43
 800b530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b532:	4b03      	ldr	r3, [pc, #12]	@ (800b540 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b534:	4618      	mov	r0, r3
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	bc80      	pop	{r7}
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	200000f0 	.word	0x200000f0

0800b544 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	220a      	movs	r2, #10
 800b550:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b552:	4b03      	ldr	r3, [pc, #12]	@ (800b560 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b554:	4618      	mov	r0, r3
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	bc80      	pop	{r7}
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	20000024 	.word	0x20000024

0800b564 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b56e:	2302      	movs	r3, #2
 800b570:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d005      	beq.n	800b584 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bc80      	pop	{r7}
 800b58e:	4770      	bx	lr

0800b590 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b590:	b480      	push	{r7}
 800b592:	b087      	sub	sp, #28
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	4613      	mov	r3, r2
 800b59c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b5ae:	88fa      	ldrh	r2, [r7, #6]
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	371c      	adds	r7, #28
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bc80      	pop	{r7}
 800b5c0:	4770      	bx	lr

0800b5c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bc80      	pop	{r7}
 800b5e6:	4770      	bx	lr

0800b5e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d01c      	beq.n	800b63c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d115      	bne.n	800b638 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2201      	movs	r2, #1
 800b610:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	2181      	movs	r1, #129	@ 0x81
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 fd20 	bl	800d074 <USBD_LL_Transmit>

      return USBD_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	e002      	b.n	800b63e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b638:	2301      	movs	r3, #1
 800b63a:	e000      	b.n	800b63e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b63c:	2302      	movs	r3, #2
  }
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b654:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d017      	beq.n	800b690 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7c1b      	ldrb	r3, [r3, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d109      	bne.n	800b67c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b66e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b672:	2101      	movs	r1, #1
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 fd20 	bl	800d0ba <USBD_LL_PrepareReceive>
 800b67a:	e007      	b.n	800b68c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b682:	2340      	movs	r3, #64	@ 0x40
 800b684:	2101      	movs	r1, #1
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f001 fd17 	bl	800d0ba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	e000      	b.n	800b692 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b690:	2302      	movs	r3, #2
  }
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e01a      	b.n	800b6e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	79fa      	ldrb	r2, [r7, #7]
 800b6de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f001 fb85 	bl	800cdf0 <USBD_LL_Init>

  return USBD_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
 800b710:	e001      	b.n	800b716 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b712:	2302      	movs	r3, #2
 800b714:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b716:	7bfb      	ldrb	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bc80      	pop	{r7}
 800b720:	4770      	bx	lr

0800b722 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 fbba 	bl	800cea4 <USBD_LL_Start>

  return USBD_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	bc80      	pop	{r7}
 800b74c:	4770      	bx	lr

0800b74e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b75a:	2302      	movs	r3, #2
 800b75c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00c      	beq.n	800b782 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	4611      	mov	r1, r2
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	4798      	blx	r3
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b782:	7bfb      	ldrb	r3, [r7, #15]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	78fa      	ldrb	r2, [r7, #3]
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3

  return USBD_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 fed8 	bl	800c57a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7d8:	461a      	mov	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b7e6:	f003 031f 	and.w	r3, r3, #31
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d016      	beq.n	800b81c <USBD_LL_SetupStage+0x6a>
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d81c      	bhi.n	800b82c <USBD_LL_SetupStage+0x7a>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <USBD_LL_SetupStage+0x4a>
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d008      	beq.n	800b80c <USBD_LL_SetupStage+0x5a>
 800b7fa:	e017      	b.n	800b82c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f9cb 	bl	800bba0 <USBD_StdDevReq>
      break;
 800b80a:	e01a      	b.n	800b842 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fa2d 	bl	800bc74 <USBD_StdItfReq>
      break;
 800b81a:	e012      	b.n	800b842 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fa6d 	bl	800bd04 <USBD_StdEPReq>
      break;
 800b82a:	e00a      	b.n	800b842 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b832:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b836:	b2db      	uxtb	r3, r3
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 fb92 	bl	800cf64 <USBD_LL_StallEP>
      break;
 800b840:	bf00      	nop
  }

  return USBD_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	460b      	mov	r3, r1
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d14b      	bne.n	800b8f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b866:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d134      	bne.n	800b8dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	68da      	ldr	r2, [r3, #12]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d919      	bls.n	800b8b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	1ad2      	subs	r2, r2, r3
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b894:	429a      	cmp	r2, r3
 800b896:	d203      	bcs.n	800b8a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	e002      	b.n	800b8a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f000 ff54 	bl	800c758 <USBD_CtlContinueRx>
 800b8b0:	e038      	b.n	800b924 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d105      	bne.n	800b8d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 ff51 	bl	800c77c <USBD_CtlSendStatus>
 800b8da:	e023      	b.n	800b924 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8e2:	2b05      	cmp	r3, #5
 800b8e4:	d11e      	bne.n	800b924 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f001 fb37 	bl	800cf64 <USBD_LL_StallEP>
 800b8f6:	e015      	b.n	800b924 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00d      	beq.n	800b920 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	d108      	bne.n	800b920 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	7afa      	ldrb	r2, [r7, #11]
 800b918:	4611      	mov	r1, r2
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	4798      	blx	r3
 800b91e:	e001      	b.n	800b924 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b920:	2302      	movs	r3, #2
 800b922:	e000      	b.n	800b926 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b086      	sub	sp, #24
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	460b      	mov	r3, r1
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b93c:	7afb      	ldrb	r3, [r7, #11]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d17f      	bne.n	800ba42 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3314      	adds	r3, #20
 800b946:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d15c      	bne.n	800ba0c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d915      	bls.n	800b98a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	1ad2      	subs	r2, r2, r3
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	b29b      	uxth	r3, r3
 800b972:	461a      	mov	r2, r3
 800b974:	6879      	ldr	r1, [r7, #4]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 febe 	bl	800c6f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b97c:	2300      	movs	r3, #0
 800b97e:	2200      	movs	r2, #0
 800b980:	2100      	movs	r1, #0
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f001 fb99 	bl	800d0ba <USBD_LL_PrepareReceive>
 800b988:	e04e      	b.n	800ba28 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	6912      	ldr	r2, [r2, #16]
 800b992:	fbb3 f1f2 	udiv	r1, r3, r2
 800b996:	fb01 f202 	mul.w	r2, r1, r2
 800b99a:	1a9b      	subs	r3, r3, r2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d11c      	bne.n	800b9da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d316      	bcc.n	800b9da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d20f      	bcs.n	800b9da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f000 fe9a 	bl	800c6f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f001 fb71 	bl	800d0ba <USBD_LL_PrepareReceive>
 800b9d8:	e026      	b.n	800ba28 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d105      	bne.n	800b9fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b9fc:	2180      	movs	r1, #128	@ 0x80
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f001 fab0 	bl	800cf64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fecc 	bl	800c7a2 <USBD_CtlReceiveStatus>
 800ba0a:	e00d      	b.n	800ba28 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba12:	2b04      	cmp	r3, #4
 800ba14:	d004      	beq.n	800ba20 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d103      	bne.n	800ba28 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ba20:	2180      	movs	r1, #128	@ 0x80
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f001 fa9e 	bl	800cf64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d11d      	bne.n	800ba6e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff fe81 	bl	800b73a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ba40:	e015      	b.n	800ba6e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00d      	beq.n	800ba6a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d108      	bne.n	800ba6a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	7afa      	ldrb	r2, [r7, #11]
 800ba62:	4611      	mov	r1, r2
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	4798      	blx	r3
 800ba68:	e001      	b.n	800ba6e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e000      	b.n	800ba70 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba80:	2340      	movs	r3, #64	@ 0x40
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 fa27 	bl	800ceda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2240      	movs	r2, #64	@ 0x40
 800ba98:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba9c:	2340      	movs	r3, #64	@ 0x40
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2180      	movs	r1, #128	@ 0x80
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f001 fa19 	bl	800ceda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2240      	movs	r2, #64	@ 0x40
 800bab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d009      	beq.n	800baf0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	6852      	ldr	r2, [r2, #4]
 800bae8:	b2d2      	uxtb	r2, r2
 800baea:	4611      	mov	r1, r2
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
  }

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	78fa      	ldrb	r2, [r7, #3]
 800bb0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr

0800bb18 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2204      	movs	r2, #4
 800bb30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bc80      	pop	{r7}
 800bb3e:	4770      	bx	lr

0800bb40 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d105      	bne.n	800bb5e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bc80      	pop	{r7}
 800bb68:	4770      	bx	lr

0800bb6a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d10b      	bne.n	800bb94 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbb6:	2b40      	cmp	r3, #64	@ 0x40
 800bbb8:	d005      	beq.n	800bbc6 <USBD_StdDevReq+0x26>
 800bbba:	2b40      	cmp	r3, #64	@ 0x40
 800bbbc:	d84f      	bhi.n	800bc5e <USBD_StdDevReq+0xbe>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d009      	beq.n	800bbd6 <USBD_StdDevReq+0x36>
 800bbc2:	2b20      	cmp	r3, #32
 800bbc4:	d14b      	bne.n	800bc5e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
      break;
 800bbd4:	e048      	b.n	800bc68 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	785b      	ldrb	r3, [r3, #1]
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d839      	bhi.n	800bc52 <USBD_StdDevReq+0xb2>
 800bbde:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe4 <USBD_StdDevReq+0x44>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bc35 	.word	0x0800bc35
 800bbe8:	0800bc49 	.word	0x0800bc49
 800bbec:	0800bc53 	.word	0x0800bc53
 800bbf0:	0800bc3f 	.word	0x0800bc3f
 800bbf4:	0800bc53 	.word	0x0800bc53
 800bbf8:	0800bc17 	.word	0x0800bc17
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc53 	.word	0x0800bc53
 800bc04:	0800bc2b 	.word	0x0800bc2b
 800bc08:	0800bc21 	.word	0x0800bc21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f9dc 	bl	800bfcc <USBD_GetDescriptor>
          break;
 800bc14:	e022      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fb3f 	bl	800c29c <USBD_SetAddress>
          break;
 800bc1e:	e01d      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fb7e 	bl	800c324 <USBD_SetConfig>
          break;
 800bc28:	e018      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc07 	bl	800c440 <USBD_GetConfig>
          break;
 800bc32:	e013      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fc37 	bl	800c4aa <USBD_GetStatus>
          break;
 800bc3c:	e00e      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fc65 	bl	800c510 <USBD_SetFeature>
          break;
 800bc46:	e009      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fc74 	bl	800c538 <USBD_ClrFeature>
          break;
 800bc50:	e004      	b.n	800bc5c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fcc9 	bl	800c5ec <USBD_CtlError>
          break;
 800bc5a:	bf00      	nop
      }
      break;
 800bc5c:	e004      	b.n	800bc68 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fcc3 	bl	800c5ec <USBD_CtlError>
      break;
 800bc66:	bf00      	nop
  }

  return ret;
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop

0800bc74 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc8a:	2b40      	cmp	r3, #64	@ 0x40
 800bc8c:	d005      	beq.n	800bc9a <USBD_StdItfReq+0x26>
 800bc8e:	2b40      	cmp	r3, #64	@ 0x40
 800bc90:	d82e      	bhi.n	800bcf0 <USBD_StdItfReq+0x7c>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <USBD_StdItfReq+0x26>
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d12a      	bne.n	800bcf0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca0:	3b01      	subs	r3, #1
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d81d      	bhi.n	800bce2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	889b      	ldrh	r3, [r3, #4]
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d813      	bhi.n	800bcd8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	4798      	blx	r3
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	88db      	ldrh	r3, [r3, #6]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d110      	bne.n	800bcec <USBD_StdItfReq+0x78>
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10d      	bne.n	800bcec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fd53 	bl	800c77c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcd6:	e009      	b.n	800bcec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fc86 	bl	800c5ec <USBD_CtlError>
          break;
 800bce0:	e004      	b.n	800bcec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fc81 	bl	800c5ec <USBD_CtlError>
          break;
 800bcea:	e000      	b.n	800bcee <USBD_StdItfReq+0x7a>
          break;
 800bcec:	bf00      	nop
      }
      break;
 800bcee:	e004      	b.n	800bcfa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fc7a 	bl	800c5ec <USBD_CtlError>
      break;
 800bcf8:	bf00      	nop
  }

  return USBD_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	889b      	ldrh	r3, [r3, #4]
 800bd16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd20:	2b40      	cmp	r3, #64	@ 0x40
 800bd22:	d007      	beq.n	800bd34 <USBD_StdEPReq+0x30>
 800bd24:	2b40      	cmp	r3, #64	@ 0x40
 800bd26:	f200 8146 	bhi.w	800bfb6 <USBD_StdEPReq+0x2b2>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <USBD_StdEPReq+0x40>
 800bd2e:	2b20      	cmp	r3, #32
 800bd30:	f040 8141 	bne.w	800bfb6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	4798      	blx	r3
      break;
 800bd42:	e13d      	b.n	800bfc0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d10a      	bne.n	800bd66 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	4798      	blx	r3
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	e12d      	b.n	800bfc2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	785b      	ldrb	r3, [r3, #1]
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d007      	beq.n	800bd7e <USBD_StdEPReq+0x7a>
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	f300 811b 	bgt.w	800bfaa <USBD_StdEPReq+0x2a6>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d072      	beq.n	800be5e <USBD_StdEPReq+0x15a>
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d03a      	beq.n	800bdf2 <USBD_StdEPReq+0xee>
 800bd7c:	e115      	b.n	800bfaa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d002      	beq.n	800bd8e <USBD_StdEPReq+0x8a>
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d015      	beq.n	800bdb8 <USBD_StdEPReq+0xb4>
 800bd8c:	e02b      	b.n	800bde6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00c      	beq.n	800bdae <USBD_StdEPReq+0xaa>
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	2b80      	cmp	r3, #128	@ 0x80
 800bd98:	d009      	beq.n	800bdae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f001 f8e0 	bl	800cf64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bda4:	2180      	movs	r1, #128	@ 0x80
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f001 f8dc 	bl	800cf64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdac:	e020      	b.n	800bdf0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fc1b 	bl	800c5ec <USBD_CtlError>
              break;
 800bdb6:	e01b      	b.n	800bdf0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	885b      	ldrh	r3, [r3, #2]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10e      	bne.n	800bdde <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00b      	beq.n	800bdde <USBD_StdEPReq+0xda>
 800bdc6:	7bbb      	ldrb	r3, [r7, #14]
 800bdc8:	2b80      	cmp	r3, #128	@ 0x80
 800bdca:	d008      	beq.n	800bdde <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	88db      	ldrh	r3, [r3, #6]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d104      	bne.n	800bdde <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f001 f8c3 	bl	800cf64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fccc 	bl	800c77c <USBD_CtlSendStatus>

              break;
 800bde4:	e004      	b.n	800bdf0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fbff 	bl	800c5ec <USBD_CtlError>
              break;
 800bdee:	bf00      	nop
          }
          break;
 800bdf0:	e0e0      	b.n	800bfb4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d002      	beq.n	800be02 <USBD_StdEPReq+0xfe>
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d015      	beq.n	800be2c <USBD_StdEPReq+0x128>
 800be00:	e026      	b.n	800be50 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00c      	beq.n	800be22 <USBD_StdEPReq+0x11e>
 800be08:	7bbb      	ldrb	r3, [r7, #14]
 800be0a:	2b80      	cmp	r3, #128	@ 0x80
 800be0c:	d009      	beq.n	800be22 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 f8a6 	bl	800cf64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800be18:	2180      	movs	r1, #128	@ 0x80
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f001 f8a2 	bl	800cf64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be20:	e01c      	b.n	800be5c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fbe1 	bl	800c5ec <USBD_CtlError>
              break;
 800be2a:	e017      	b.n	800be5c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	885b      	ldrh	r3, [r3, #2]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d112      	bne.n	800be5a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f001 f8ad 	bl	800cfa2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fc97 	bl	800c77c <USBD_CtlSendStatus>
              }
              break;
 800be4e:	e004      	b.n	800be5a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fbca 	bl	800c5ec <USBD_CtlError>
              break;
 800be58:	e000      	b.n	800be5c <USBD_StdEPReq+0x158>
              break;
 800be5a:	bf00      	nop
          }
          break;
 800be5c:	e0aa      	b.n	800bfb4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be64:	2b02      	cmp	r3, #2
 800be66:	d002      	beq.n	800be6e <USBD_StdEPReq+0x16a>
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d032      	beq.n	800bed2 <USBD_StdEPReq+0x1ce>
 800be6c:	e097      	b.n	800bf9e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be6e:	7bbb      	ldrb	r3, [r7, #14]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d007      	beq.n	800be84 <USBD_StdEPReq+0x180>
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	2b80      	cmp	r3, #128	@ 0x80
 800be78:	d004      	beq.n	800be84 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fbb5 	bl	800c5ec <USBD_CtlError>
                break;
 800be82:	e091      	b.n	800bfa8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	da0b      	bge.n	800bea4 <USBD_StdEPReq+0x1a0>
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	3310      	adds	r3, #16
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	4413      	add	r3, r2
 800bea0:	3304      	adds	r3, #4
 800bea2:	e00b      	b.n	800bebc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bea4:	7bbb      	ldrb	r3, [r7, #14]
 800bea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	4413      	add	r3, r2
 800beba:	3304      	adds	r3, #4
 800bebc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2202      	movs	r2, #2
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fbf8 	bl	800c6c0 <USBD_CtlSendData>
              break;
 800bed0:	e06a      	b.n	800bfa8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	da11      	bge.n	800befe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beda:	7bbb      	ldrb	r3, [r7, #14]
 800bedc:	f003 020f 	and.w	r2, r3, #15
 800bee0:	6879      	ldr	r1, [r7, #4]
 800bee2:	4613      	mov	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	440b      	add	r3, r1
 800beec:	3318      	adds	r3, #24
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d117      	bne.n	800bf24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fb78 	bl	800c5ec <USBD_CtlError>
                  break;
 800befc:	e054      	b.n	800bfa8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800befe:	7bbb      	ldrb	r3, [r7, #14]
 800bf00:	f003 020f 	and.w	r2, r3, #15
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d104      	bne.n	800bf24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fb65 	bl	800c5ec <USBD_CtlError>
                  break;
 800bf22:	e041      	b.n	800bfa8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	da0b      	bge.n	800bf44 <USBD_StdEPReq+0x240>
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf32:	4613      	mov	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	3310      	adds	r3, #16
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	4413      	add	r3, r2
 800bf40:	3304      	adds	r3, #4
 800bf42:	e00b      	b.n	800bf5c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	4413      	add	r3, r2
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <USBD_StdEPReq+0x266>
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	2b80      	cmp	r3, #128	@ 0x80
 800bf68:	d103      	bne.n	800bf72 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	e00e      	b.n	800bf90 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bf72:	7bbb      	ldrb	r3, [r7, #14]
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 f832 	bl	800cfe0 <USBD_LL_IsStallEP>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d003      	beq.n	800bf8a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2201      	movs	r2, #1
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	e002      	b.n	800bf90 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2202      	movs	r2, #2
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fb92 	bl	800c6c0 <USBD_CtlSendData>
              break;
 800bf9c:	e004      	b.n	800bfa8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fb23 	bl	800c5ec <USBD_CtlError>
              break;
 800bfa6:	bf00      	nop
          }
          break;
 800bfa8:	e004      	b.n	800bfb4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fb1d 	bl	800c5ec <USBD_CtlError>
          break;
 800bfb2:	bf00      	nop
      }
      break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fb17 	bl	800c5ec <USBD_CtlError>
      break;
 800bfbe:	bf00      	nop
  }

  return ret;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
	...

0800bfcc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	885b      	ldrh	r3, [r3, #2]
 800bfe6:	0a1b      	lsrs	r3, r3, #8
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	3b01      	subs	r3, #1
 800bfec:	2b06      	cmp	r3, #6
 800bfee:	f200 8128 	bhi.w	800c242 <USBD_GetDescriptor+0x276>
 800bff2:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <USBD_GetDescriptor+0x2c>)
 800bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff8:	0800c015 	.word	0x0800c015
 800bffc:	0800c02d 	.word	0x0800c02d
 800c000:	0800c06d 	.word	0x0800c06d
 800c004:	0800c243 	.word	0x0800c243
 800c008:	0800c243 	.word	0x0800c243
 800c00c:	0800c1e3 	.word	0x0800c1e3
 800c010:	0800c20f 	.word	0x0800c20f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	7c12      	ldrb	r2, [r2, #16]
 800c020:	f107 0108 	add.w	r1, r7, #8
 800c024:	4610      	mov	r0, r2
 800c026:	4798      	blx	r3
 800c028:	60f8      	str	r0, [r7, #12]
      break;
 800c02a:	e112      	b.n	800c252 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7c1b      	ldrb	r3, [r3, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10d      	bne.n	800c050 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c03c:	f107 0208 	add.w	r2, r7, #8
 800c040:	4610      	mov	r0, r2
 800c042:	4798      	blx	r3
 800c044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3301      	adds	r3, #1
 800c04a:	2202      	movs	r2, #2
 800c04c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c04e:	e100      	b.n	800c252 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c058:	f107 0208 	add.w	r2, r7, #8
 800c05c:	4610      	mov	r0, r2
 800c05e:	4798      	blx	r3
 800c060:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3301      	adds	r3, #1
 800c066:	2202      	movs	r2, #2
 800c068:	701a      	strb	r2, [r3, #0]
      break;
 800c06a:	e0f2      	b.n	800c252 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	885b      	ldrh	r3, [r3, #2]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b05      	cmp	r3, #5
 800c074:	f200 80ac 	bhi.w	800c1d0 <USBD_GetDescriptor+0x204>
 800c078:	a201      	add	r2, pc, #4	@ (adr r2, 800c080 <USBD_GetDescriptor+0xb4>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c099 	.word	0x0800c099
 800c084:	0800c0cd 	.word	0x0800c0cd
 800c088:	0800c101 	.word	0x0800c101
 800c08c:	0800c135 	.word	0x0800c135
 800c090:	0800c169 	.word	0x0800c169
 800c094:	0800c19d 	.word	0x0800c19d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	7c12      	ldrb	r2, [r2, #16]
 800c0b0:	f107 0108 	add.w	r1, r7, #8
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	4798      	blx	r3
 800c0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ba:	e091      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fa94 	bl	800c5ec <USBD_CtlError>
            err++;
 800c0c4:	7afb      	ldrb	r3, [r7, #11]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ca:	e089      	b.n	800c1e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	7c12      	ldrb	r2, [r2, #16]
 800c0e4:	f107 0108 	add.w	r1, r7, #8
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	4798      	blx	r3
 800c0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ee:	e077      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fa7a 	bl	800c5ec <USBD_CtlError>
            err++;
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0fe:	e06f      	b.n	800c1e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00b      	beq.n	800c124 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	7c12      	ldrb	r2, [r2, #16]
 800c118:	f107 0108 	add.w	r1, r7, #8
 800c11c:	4610      	mov	r0, r2
 800c11e:	4798      	blx	r3
 800c120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c122:	e05d      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa60 	bl	800c5ec <USBD_CtlError>
            err++;
 800c12c:	7afb      	ldrb	r3, [r7, #11]
 800c12e:	3301      	adds	r3, #1
 800c130:	72fb      	strb	r3, [r7, #11]
          break;
 800c132:	e055      	b.n	800c1e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00b      	beq.n	800c158 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7c12      	ldrb	r2, [r2, #16]
 800c14c:	f107 0108 	add.w	r1, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c156:	e043      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa46 	bl	800c5ec <USBD_CtlError>
            err++;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	3301      	adds	r3, #1
 800c164:	72fb      	strb	r3, [r7, #11]
          break;
 800c166:	e03b      	b.n	800c1e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	7c12      	ldrb	r2, [r2, #16]
 800c180:	f107 0108 	add.w	r1, r7, #8
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
 800c188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c18a:	e029      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa2c 	bl	800c5ec <USBD_CtlError>
            err++;
 800c194:	7afb      	ldrb	r3, [r7, #11]
 800c196:	3301      	adds	r3, #1
 800c198:	72fb      	strb	r3, [r7, #11]
          break;
 800c19a:	e021      	b.n	800c1e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00b      	beq.n	800c1c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	7c12      	ldrb	r2, [r2, #16]
 800c1b4:	f107 0108 	add.w	r1, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1be:	e00f      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fa12 	bl	800c5ec <USBD_CtlError>
            err++;
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ce:	e007      	b.n	800c1e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fa0a 	bl	800c5ec <USBD_CtlError>
          err++;
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c1de:	e038      	b.n	800c252 <USBD_GetDescriptor+0x286>
 800c1e0:	e037      	b.n	800c252 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7c1b      	ldrb	r3, [r3, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1f2:	f107 0208 	add.w	r2, r7, #8
 800c1f6:	4610      	mov	r0, r2
 800c1f8:	4798      	blx	r3
 800c1fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1fc:	e029      	b.n	800c252 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f9f3 	bl	800c5ec <USBD_CtlError>
        err++;
 800c206:	7afb      	ldrb	r3, [r7, #11]
 800c208:	3301      	adds	r3, #1
 800c20a:	72fb      	strb	r3, [r7, #11]
      break;
 800c20c:	e021      	b.n	800c252 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7c1b      	ldrb	r3, [r3, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10d      	bne.n	800c232 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21e:	f107 0208 	add.w	r2, r7, #8
 800c222:	4610      	mov	r0, r2
 800c224:	4798      	blx	r3
 800c226:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3301      	adds	r3, #1
 800c22c:	2207      	movs	r2, #7
 800c22e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c230:	e00f      	b.n	800c252 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f9d9 	bl	800c5ec <USBD_CtlError>
        err++;
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	3301      	adds	r3, #1
 800c23e:	72fb      	strb	r3, [r7, #11]
      break;
 800c240:	e007      	b.n	800c252 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f9d1 	bl	800c5ec <USBD_CtlError>
      err++;
 800c24a:	7afb      	ldrb	r3, [r7, #11]
 800c24c:	3301      	adds	r3, #1
 800c24e:	72fb      	strb	r3, [r7, #11]
      break;
 800c250:	bf00      	nop
  }

  if (err != 0U)
 800c252:	7afb      	ldrb	r3, [r7, #11]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d11c      	bne.n	800c292 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c258:	893b      	ldrh	r3, [r7, #8]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d011      	beq.n	800c282 <USBD_GetDescriptor+0x2b6>
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	88db      	ldrh	r3, [r3, #6]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00d      	beq.n	800c282 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	88da      	ldrh	r2, [r3, #6]
 800c26a:	893b      	ldrh	r3, [r7, #8]
 800c26c:	4293      	cmp	r3, r2
 800c26e:	bf28      	it	cs
 800c270:	4613      	movcs	r3, r2
 800c272:	b29b      	uxth	r3, r3
 800c274:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c276:	893b      	ldrh	r3, [r7, #8]
 800c278:	461a      	mov	r2, r3
 800c27a:	68f9      	ldr	r1, [r7, #12]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa1f 	bl	800c6c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	88db      	ldrh	r3, [r3, #6]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d104      	bne.n	800c294 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fa76 	bl	800c77c <USBD_CtlSendStatus>
 800c290:	e000      	b.n	800c294 <USBD_GetDescriptor+0x2c8>
    return;
 800c292:	bf00      	nop
    }
  }
}
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop

0800c29c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	889b      	ldrh	r3, [r3, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d130      	bne.n	800c310 <USBD_SetAddress+0x74>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	88db      	ldrh	r3, [r3, #6]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d12c      	bne.n	800c310 <USBD_SetAddress+0x74>
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	885b      	ldrh	r3, [r3, #2]
 800c2ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2bc:	d828      	bhi.n	800c310 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d104      	bne.n	800c2de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f988 	bl	800c5ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2dc:	e01d      	b.n	800c31a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	7bfa      	ldrb	r2, [r7, #15]
 800c2e2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fea3 	bl	800d036 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa43 	bl	800c77c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d004      	beq.n	800c306 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c304:	e009      	b.n	800c31a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c30e:	e004      	b.n	800c31a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f96a 	bl	800c5ec <USBD_CtlError>
  }
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	885b      	ldrh	r3, [r3, #2]
 800c332:	b2da      	uxtb	r2, r3
 800c334:	4b41      	ldr	r3, [pc, #260]	@ (800c43c <USBD_SetConfig+0x118>)
 800c336:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c338:	4b40      	ldr	r3, [pc, #256]	@ (800c43c <USBD_SetConfig+0x118>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d904      	bls.n	800c34a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f952 	bl	800c5ec <USBD_CtlError>
 800c348:	e075      	b.n	800c436 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c350:	2b02      	cmp	r3, #2
 800c352:	d002      	beq.n	800c35a <USBD_SetConfig+0x36>
 800c354:	2b03      	cmp	r3, #3
 800c356:	d023      	beq.n	800c3a0 <USBD_SetConfig+0x7c>
 800c358:	e062      	b.n	800c420 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c35a:	4b38      	ldr	r3, [pc, #224]	@ (800c43c <USBD_SetConfig+0x118>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d01a      	beq.n	800c398 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c362:	4b36      	ldr	r3, [pc, #216]	@ (800c43c <USBD_SetConfig+0x118>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2203      	movs	r2, #3
 800c370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c374:	4b31      	ldr	r3, [pc, #196]	@ (800c43c <USBD_SetConfig+0x118>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff f9e7 	bl	800b74e <USBD_SetClassConfig>
 800c380:	4603      	mov	r3, r0
 800c382:	2b02      	cmp	r3, #2
 800c384:	d104      	bne.n	800c390 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f92f 	bl	800c5ec <USBD_CtlError>
            return;
 800c38e:	e052      	b.n	800c436 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f9f3 	bl	800c77c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c396:	e04e      	b.n	800c436 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f9ef 	bl	800c77c <USBD_CtlSendStatus>
        break;
 800c39e:	e04a      	b.n	800c436 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c3a0:	4b26      	ldr	r3, [pc, #152]	@ (800c43c <USBD_SetConfig+0x118>)
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d112      	bne.n	800c3ce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c3b0:	4b22      	ldr	r3, [pc, #136]	@ (800c43c <USBD_SetConfig+0x118>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c3ba:	4b20      	ldr	r3, [pc, #128]	@ (800c43c <USBD_SetConfig+0x118>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff f9e3 	bl	800b78c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f9d8 	bl	800c77c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c3cc:	e033      	b.n	800c436 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c3ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c43c <USBD_SetConfig+0x118>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d01d      	beq.n	800c418 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff f9d1 	bl	800b78c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c3ea:	4b14      	ldr	r3, [pc, #80]	@ (800c43c <USBD_SetConfig+0x118>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c3f4:	4b11      	ldr	r3, [pc, #68]	@ (800c43c <USBD_SetConfig+0x118>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff f9a7 	bl	800b74e <USBD_SetClassConfig>
 800c400:	4603      	mov	r3, r0
 800c402:	2b02      	cmp	r3, #2
 800c404:	d104      	bne.n	800c410 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f8ef 	bl	800c5ec <USBD_CtlError>
            return;
 800c40e:	e012      	b.n	800c436 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f9b3 	bl	800c77c <USBD_CtlSendStatus>
        break;
 800c416:	e00e      	b.n	800c436 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f9af 	bl	800c77c <USBD_CtlSendStatus>
        break;
 800c41e:	e00a      	b.n	800c436 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f8e2 	bl	800c5ec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c428:	4b04      	ldr	r3, [pc, #16]	@ (800c43c <USBD_SetConfig+0x118>)
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff f9ac 	bl	800b78c <USBD_ClrClassConfig>
        break;
 800c434:	bf00      	nop
    }
  }
}
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	200007a8 	.word	0x200007a8

0800c440 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	88db      	ldrh	r3, [r3, #6]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d004      	beq.n	800c45c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 f8c9 	bl	800c5ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c45a:	e022      	b.n	800c4a2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c462:	2b02      	cmp	r3, #2
 800c464:	dc02      	bgt.n	800c46c <USBD_GetConfig+0x2c>
 800c466:	2b00      	cmp	r3, #0
 800c468:	dc03      	bgt.n	800c472 <USBD_GetConfig+0x32>
 800c46a:	e015      	b.n	800c498 <USBD_GetConfig+0x58>
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d00b      	beq.n	800c488 <USBD_GetConfig+0x48>
 800c470:	e012      	b.n	800c498 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3308      	adds	r3, #8
 800c47c:	2201      	movs	r2, #1
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f91d 	bl	800c6c0 <USBD_CtlSendData>
        break;
 800c486:	e00c      	b.n	800c4a2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3304      	adds	r3, #4
 800c48c:	2201      	movs	r2, #1
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f915 	bl	800c6c0 <USBD_CtlSendData>
        break;
 800c496:	e004      	b.n	800c4a2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f8a6 	bl	800c5ec <USBD_CtlError>
        break;
 800c4a0:	bf00      	nop
}
 800c4a2:	bf00      	nop
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d81e      	bhi.n	800c4fe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	88db      	ldrh	r3, [r3, #6]
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d004      	beq.n	800c4d2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f88e 	bl	800c5ec <USBD_CtlError>
        break;
 800c4d0:	e01a      	b.n	800c508 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f043 0202 	orr.w	r2, r3, #2
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	330c      	adds	r3, #12
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f8e2 	bl	800c6c0 <USBD_CtlSendData>
      break;
 800c4fc:	e004      	b.n	800c508 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f873 	bl	800c5ec <USBD_CtlError>
      break;
 800c506:	bf00      	nop
  }
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	885b      	ldrh	r3, [r3, #2]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d106      	bne.n	800c530 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f926 	bl	800c77c <USBD_CtlSendStatus>
  }
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c548:	3b01      	subs	r3, #1
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d80b      	bhi.n	800c566 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	885b      	ldrh	r3, [r3, #2]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d10c      	bne.n	800c570 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f90c 	bl	800c77c <USBD_CtlSendStatus>
      }
      break;
 800c564:	e004      	b.n	800c570 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f83f 	bl	800c5ec <USBD_CtlError>
      break;
 800c56e:	e000      	b.n	800c572 <USBD_ClrFeature+0x3a>
      break;
 800c570:	bf00      	nop
  }
}
 800c572:	bf00      	nop
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781a      	ldrb	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	785a      	ldrb	r2, [r3, #1]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	3302      	adds	r3, #2
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	3303      	adds	r3, #3
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	021b      	lsls	r3, r3, #8
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4413      	add	r3, r2
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	3305      	adds	r3, #5
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	021b      	lsls	r3, r3, #8
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	4413      	add	r3, r2
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	3306      	adds	r3, #6
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	021b      	lsls	r3, r3, #8
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	4413      	add	r3, r2
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	80da      	strh	r2, [r3, #6]

}
 800c5e2:	bf00      	nop
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bc80      	pop	{r7}
 800c5ea:	4770      	bx	lr

0800c5ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c5f6:	2180      	movs	r1, #128	@ 0x80
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 fcb3 	bl	800cf64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c5fe:	2100      	movs	r1, #0
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fcaf 	bl	800cf64 <USBD_LL_StallEP>
}
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b086      	sub	sp, #24
 800c612:	af00      	add	r7, sp, #0
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	60b9      	str	r1, [r7, #8]
 800c618:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d032      	beq.n	800c68a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 f834 	bl	800c692 <USBD_GetLen>
 800c62a:	4603      	mov	r3, r0
 800c62c:	3301      	adds	r3, #1
 800c62e:	b29b      	uxth	r3, r3
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	b29a      	uxth	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c638:	7dfb      	ldrb	r3, [r7, #23]
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	75fa      	strb	r2, [r7, #23]
 800c63e:	461a      	mov	r2, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	4413      	add	r3, r2
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	7812      	ldrb	r2, [r2, #0]
 800c648:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	75fa      	strb	r2, [r7, #23]
 800c650:	461a      	mov	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	4413      	add	r3, r2
 800c656:	2203      	movs	r2, #3
 800c658:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c65a:	e012      	b.n	800c682 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	60fa      	str	r2, [r7, #12]
 800c662:	7dfa      	ldrb	r2, [r7, #23]
 800c664:	1c51      	adds	r1, r2, #1
 800c666:	75f9      	strb	r1, [r7, #23]
 800c668:	4611      	mov	r1, r2
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	440a      	add	r2, r1
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	75fa      	strb	r2, [r7, #23]
 800c678:	461a      	mov	r2, r3
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	4413      	add	r3, r2
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1e8      	bne.n	800c65c <USBD_GetString+0x4e>
    }
  }
}
 800c68a:	bf00      	nop
 800c68c:	3718      	adds	r7, #24
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c69a:	2300      	movs	r3, #0
 800c69c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c69e:	e005      	b.n	800c6ac <USBD_GetLen+0x1a>
  {
    len++;
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1f5      	bne.n	800c6a0 <USBD_GetLen+0xe>
  }

  return len;
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bc80      	pop	{r7}
 800c6be:	4770      	bx	lr

0800c6c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c6d6:	88fa      	ldrh	r2, [r7, #6]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c6dc:	88fa      	ldrh	r2, [r7, #6]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6e2:	88fb      	ldrh	r3, [r7, #6]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 fcc3 	bl	800d074 <USBD_LL_Transmit>

  return USBD_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	4613      	mov	r3, r2
 800c704:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c706:	88fb      	ldrh	r3, [r7, #6]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	2100      	movs	r1, #0
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f000 fcb1 	bl	800d074 <USBD_LL_Transmit>

  return USBD_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4613      	mov	r3, r2
 800c728:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2203      	movs	r2, #3
 800c72e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c732:	88fa      	ldrh	r2, [r7, #6]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c73a:	88fa      	ldrh	r2, [r7, #6]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c742:	88fb      	ldrh	r3, [r7, #6]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	2100      	movs	r1, #0
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 fcb6 	bl	800d0ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	4613      	mov	r3, r2
 800c764:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c766:	88fb      	ldrh	r3, [r7, #6]
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	2100      	movs	r1, #0
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 fca4 	bl	800d0ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2204      	movs	r2, #4
 800c788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c78c:	2300      	movs	r3, #0
 800c78e:	2200      	movs	r2, #0
 800c790:	2100      	movs	r1, #0
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fc6e 	bl	800d074 <USBD_LL_Transmit>

  return USBD_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2205      	movs	r2, #5
 800c7ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fc7e 	bl	800d0ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c7de:	4b1e      	ldr	r3, [pc, #120]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c7e0:	7a5b      	ldrb	r3, [r3, #9]
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d831      	bhi.n	800c84c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c7ea:	7a5b      	ldrb	r3, [r3, #9]
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4b19      	ldr	r3, [pc, #100]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c7f6:	4b18      	ldr	r3, [pc, #96]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c7f8:	7a5b      	ldrb	r3, [r3, #9]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	4a16      	ldr	r2, [pc, #88]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c806:	4b14      	ldr	r3, [pc, #80]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c808:	7a5b      	ldrb	r3, [r3, #9]
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	461a      	mov	r2, r3
 800c80e:	4b12      	ldr	r3, [pc, #72]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c810:	4413      	add	r3, r2
 800c812:	79fa      	ldrb	r2, [r7, #7]
 800c814:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c816:	4b10      	ldr	r3, [pc, #64]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c818:	7a5b      	ldrb	r3, [r3, #9]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	b2d1      	uxtb	r1, r2
 800c820:	4a0d      	ldr	r2, [pc, #52]	@ (800c858 <FATFS_LinkDriverEx+0x90>)
 800c822:	7251      	strb	r1, [r2, #9]
 800c824:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c826:	7dbb      	ldrb	r3, [r7, #22]
 800c828:	3330      	adds	r3, #48	@ 0x30
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	3301      	adds	r3, #1
 800c834:	223a      	movs	r2, #58	@ 0x3a
 800c836:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	3302      	adds	r3, #2
 800c83c:	222f      	movs	r2, #47	@ 0x2f
 800c83e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	3303      	adds	r3, #3
 800c844:	2200      	movs	r2, #0
 800c846:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	371c      	adds	r7, #28
 800c852:	46bd      	mov	sp, r7
 800c854:	bc80      	pop	{r7}
 800c856:	4770      	bx	lr
 800c858:	200007ac 	.word	0x200007ac

0800c85c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c866:	2200      	movs	r2, #0
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff ffac 	bl	800c7c8 <FATFS_LinkDriverEx>
 800c870:	4603      	mov	r3, r0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c880:	2200      	movs	r2, #0
 800c882:	4912      	ldr	r1, [pc, #72]	@ (800c8cc <MX_USB_DEVICE_Init+0x50>)
 800c884:	4812      	ldr	r0, [pc, #72]	@ (800c8d0 <MX_USB_DEVICE_Init+0x54>)
 800c886:	f7fe ff08 	bl	800b69a <USBD_Init>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c890:	f7f6 fd0c 	bl	80032ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c894:	490f      	ldr	r1, [pc, #60]	@ (800c8d4 <MX_USB_DEVICE_Init+0x58>)
 800c896:	480e      	ldr	r0, [pc, #56]	@ (800c8d0 <MX_USB_DEVICE_Init+0x54>)
 800c898:	f7fe ff2a 	bl	800b6f0 <USBD_RegisterClass>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c8a2:	f7f6 fd03 	bl	80032ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8a6:	490c      	ldr	r1, [pc, #48]	@ (800c8d8 <MX_USB_DEVICE_Init+0x5c>)
 800c8a8:	4809      	ldr	r0, [pc, #36]	@ (800c8d0 <MX_USB_DEVICE_Init+0x54>)
 800c8aa:	f7fe fe5b 	bl	800b564 <USBD_CDC_RegisterInterface>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d001      	beq.n	800c8b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c8b4:	f7f6 fcfa 	bl	80032ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c8b8:	4805      	ldr	r0, [pc, #20]	@ (800c8d0 <MX_USB_DEVICE_Init+0x54>)
 800c8ba:	f7fe ff32 	bl	800b722 <USBD_Start>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c8c4:	f7f6 fcf2 	bl	80032ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c8c8:	bf00      	nop
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	20000144 	.word	0x20000144
 800c8d0:	200007b8 	.word	0x200007b8
 800c8d4:	20000030 	.word	0x20000030
 800c8d8:	20000134 	.word	0x20000134

0800c8dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4905      	ldr	r1, [pc, #20]	@ (800c8f8 <CDC_Init_FS+0x1c>)
 800c8e4:	4805      	ldr	r0, [pc, #20]	@ (800c8fc <CDC_Init_FS+0x20>)
 800c8e6:	f7fe fe53 	bl	800b590 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8ea:	4905      	ldr	r1, [pc, #20]	@ (800c900 <CDC_Init_FS+0x24>)
 800c8ec:	4803      	ldr	r0, [pc, #12]	@ (800c8fc <CDC_Init_FS+0x20>)
 800c8ee:	f7fe fe68 	bl	800b5c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	20000e7c 	.word	0x20000e7c
 800c8fc:	200007b8 	.word	0x200007b8
 800c900:	20000a7c 	.word	0x20000a7c

0800c904 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c904:	b480      	push	{r7}
 800c906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bc80      	pop	{r7}
 800c910:	4770      	bx	lr
	...

0800c914 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	4603      	mov	r3, r0
 800c91c:	6039      	str	r1, [r7, #0]
 800c91e:	71fb      	strb	r3, [r7, #7]
 800c920:	4613      	mov	r3, r2
 800c922:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	2b23      	cmp	r3, #35	@ 0x23
 800c928:	d84a      	bhi.n	800c9c0 <CDC_Control_FS+0xac>
 800c92a:	a201      	add	r2, pc, #4	@ (adr r2, 800c930 <CDC_Control_FS+0x1c>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c9c1 	.word	0x0800c9c1
 800c934:	0800c9c1 	.word	0x0800c9c1
 800c938:	0800c9c1 	.word	0x0800c9c1
 800c93c:	0800c9c1 	.word	0x0800c9c1
 800c940:	0800c9c1 	.word	0x0800c9c1
 800c944:	0800c9c1 	.word	0x0800c9c1
 800c948:	0800c9c1 	.word	0x0800c9c1
 800c94c:	0800c9c1 	.word	0x0800c9c1
 800c950:	0800c9c1 	.word	0x0800c9c1
 800c954:	0800c9c1 	.word	0x0800c9c1
 800c958:	0800c9c1 	.word	0x0800c9c1
 800c95c:	0800c9c1 	.word	0x0800c9c1
 800c960:	0800c9c1 	.word	0x0800c9c1
 800c964:	0800c9c1 	.word	0x0800c9c1
 800c968:	0800c9c1 	.word	0x0800c9c1
 800c96c:	0800c9c1 	.word	0x0800c9c1
 800c970:	0800c9c1 	.word	0x0800c9c1
 800c974:	0800c9c1 	.word	0x0800c9c1
 800c978:	0800c9c1 	.word	0x0800c9c1
 800c97c:	0800c9c1 	.word	0x0800c9c1
 800c980:	0800c9c1 	.word	0x0800c9c1
 800c984:	0800c9c1 	.word	0x0800c9c1
 800c988:	0800c9c1 	.word	0x0800c9c1
 800c98c:	0800c9c1 	.word	0x0800c9c1
 800c990:	0800c9c1 	.word	0x0800c9c1
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	0800c9c1 	.word	0x0800c9c1
 800c99c:	0800c9c1 	.word	0x0800c9c1
 800c9a0:	0800c9c1 	.word	0x0800c9c1
 800c9a4:	0800c9c1 	.word	0x0800c9c1
 800c9a8:	0800c9c1 	.word	0x0800c9c1
 800c9ac:	0800c9c1 	.word	0x0800c9c1
 800c9b0:	0800c9c1 	.word	0x0800c9c1
 800c9b4:	0800c9c1 	.word	0x0800c9c1
 800c9b8:	0800c9c1 	.word	0x0800c9c1
 800c9bc:	0800c9c1 	.word	0x0800c9c1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c9c0:	bf00      	nop
  }

  return (USBD_OK);
 800c9c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop

0800c9d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	4808      	ldr	r0, [pc, #32]	@ (800ca00 <CDC_Receive_FS+0x30>)
 800c9de:	f7fe fdf0 	bl	800b5c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9e2:	4807      	ldr	r0, [pc, #28]	@ (800ca00 <CDC_Receive_FS+0x30>)
 800c9e4:	f7fe fe2f 	bl	800b646 <USBD_CDC_ReceivePacket>
  // Panggil fungsi callback di main.c
  CDC_On_Receive(Buf, *Len);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f6 fc0a 	bl	8003208 <CDC_On_Receive>
  return (USBD_OK);
 800c9f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	200007b8 	.word	0x200007b8

0800ca04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800ca14:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <CDC_Transmit_FS+0x48>)
 800ca16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <CDC_Transmit_FS+0x26>
  {
    return USBD_BUSY;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e00b      	b.n	800ca42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca2a:	887b      	ldrh	r3, [r7, #2]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	4806      	ldr	r0, [pc, #24]	@ (800ca4c <CDC_Transmit_FS+0x48>)
 800ca32:	f7fe fdad 	bl	800b590 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca36:	4805      	ldr	r0, [pc, #20]	@ (800ca4c <CDC_Transmit_FS+0x48>)
 800ca38:	f7fe fdd6 	bl	800b5e8 <USBD_CDC_TransmitPacket>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	200007b8 	.word	0x200007b8

0800ca50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	6039      	str	r1, [r7, #0]
 800ca5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2212      	movs	r2, #18
 800ca60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca62:	4b03      	ldr	r3, [pc, #12]	@ (800ca70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bc80      	pop	{r7}
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	20000160 	.word	0x20000160

0800ca74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	6039      	str	r1, [r7, #0]
 800ca7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2204      	movs	r2, #4
 800ca84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca86:	4b03      	ldr	r3, [pc, #12]	@ (800ca94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bc80      	pop	{r7}
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	20000174 	.word	0x20000174

0800ca98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d105      	bne.n	800cab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	4907      	ldr	r1, [pc, #28]	@ (800cacc <USBD_FS_ProductStrDescriptor+0x34>)
 800caae:	4808      	ldr	r0, [pc, #32]	@ (800cad0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cab0:	f7ff fdad 	bl	800c60e <USBD_GetString>
 800cab4:	e004      	b.n	800cac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	4904      	ldr	r1, [pc, #16]	@ (800cacc <USBD_FS_ProductStrDescriptor+0x34>)
 800caba:	4805      	ldr	r0, [pc, #20]	@ (800cad0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cabc:	f7ff fda7 	bl	800c60e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac0:	4b02      	ldr	r3, [pc, #8]	@ (800cacc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2000127c 	.word	0x2000127c
 800cad0:	080127e8 	.word	0x080127e8

0800cad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	6039      	str	r1, [r7, #0]
 800cade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	4904      	ldr	r1, [pc, #16]	@ (800caf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cae4:	4804      	ldr	r0, [pc, #16]	@ (800caf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cae6:	f7ff fd92 	bl	800c60e <USBD_GetString>
  return USBD_StrDesc;
 800caea:	4b02      	ldr	r3, [pc, #8]	@ (800caf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	2000127c 	.word	0x2000127c
 800caf8:	08012800 	.word	0x08012800

0800cafc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	6039      	str	r1, [r7, #0]
 800cb06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	221a      	movs	r2, #26
 800cb0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb0e:	f000 f843 	bl	800cb98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb12:	4b02      	ldr	r3, [pc, #8]	@ (800cb1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	20000178 	.word	0x20000178

0800cb20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d105      	bne.n	800cb3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	4907      	ldr	r1, [pc, #28]	@ (800cb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb36:	4808      	ldr	r0, [pc, #32]	@ (800cb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb38:	f7ff fd69 	bl	800c60e <USBD_GetString>
 800cb3c:	e004      	b.n	800cb48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	4904      	ldr	r1, [pc, #16]	@ (800cb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb42:	4805      	ldr	r0, [pc, #20]	@ (800cb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb44:	f7ff fd63 	bl	800c60e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb48:	4b02      	ldr	r3, [pc, #8]	@ (800cb54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	2000127c 	.word	0x2000127c
 800cb58:	08012814 	.word	0x08012814

0800cb5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	6039      	str	r1, [r7, #0]
 800cb66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d105      	bne.n	800cb7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	4907      	ldr	r1, [pc, #28]	@ (800cb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb72:	4808      	ldr	r0, [pc, #32]	@ (800cb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb74:	f7ff fd4b 	bl	800c60e <USBD_GetString>
 800cb78:	e004      	b.n	800cb84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	4904      	ldr	r1, [pc, #16]	@ (800cb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb7e:	4805      	ldr	r0, [pc, #20]	@ (800cb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb80:	f7ff fd45 	bl	800c60e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb84:	4b02      	ldr	r3, [pc, #8]	@ (800cb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	2000127c 	.word	0x2000127c
 800cb94:	08012820 	.word	0x08012820

0800cb98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cbdc <Get_SerialNum+0x44>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cba4:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe0 <Get_SerialNum+0x48>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe4 <Get_SerialNum+0x4c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbbe:	2208      	movs	r2, #8
 800cbc0:	4909      	ldr	r1, [pc, #36]	@ (800cbe8 <Get_SerialNum+0x50>)
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 f814 	bl	800cbf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbc8:	2204      	movs	r2, #4
 800cbca:	4908      	ldr	r1, [pc, #32]	@ (800cbec <Get_SerialNum+0x54>)
 800cbcc:	68b8      	ldr	r0, [r7, #8]
 800cbce:	f000 f80f 	bl	800cbf0 <IntToUnicode>
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	1ffff7e8 	.word	0x1ffff7e8
 800cbe0:	1ffff7ec 	.word	0x1ffff7ec
 800cbe4:	1ffff7f0 	.word	0x1ffff7f0
 800cbe8:	2000017a 	.word	0x2000017a
 800cbec:	2000018a 	.word	0x2000018a

0800cbf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc02:	2300      	movs	r3, #0
 800cc04:	75fb      	strb	r3, [r7, #23]
 800cc06:	e027      	b.n	800cc58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	0f1b      	lsrs	r3, r3, #28
 800cc0c:	2b09      	cmp	r3, #9
 800cc0e:	d80b      	bhi.n	800cc28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	0f1b      	lsrs	r3, r3, #28
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	440b      	add	r3, r1
 800cc20:	3230      	adds	r2, #48	@ 0x30
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	e00a      	b.n	800cc3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	0f1b      	lsrs	r3, r3, #28
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	4619      	mov	r1, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	440b      	add	r3, r1
 800cc38:	3237      	adds	r2, #55	@ 0x37
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	011b      	lsls	r3, r3, #4
 800cc42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	3301      	adds	r3, #1
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	3301      	adds	r3, #1
 800cc56:	75fb      	strb	r3, [r7, #23]
 800cc58:	7dfa      	ldrb	r2, [r7, #23]
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d3d3      	bcc.n	800cc08 <IntToUnicode+0x18>
  }
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	371c      	adds	r7, #28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bc80      	pop	{r7}
 800cc6a:	4770      	bx	lr

0800cc6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a0d      	ldr	r2, [pc, #52]	@ (800ccb0 <HAL_PCD_MspInit+0x44>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d113      	bne.n	800cca6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb4 <HAL_PCD_MspInit+0x48>)
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	4a0c      	ldr	r2, [pc, #48]	@ (800ccb4 <HAL_PCD_MspInit+0x48>)
 800cc84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cc88:	61d3      	str	r3, [r2, #28]
 800cc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb4 <HAL_PCD_MspInit+0x48>)
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cc96:	2200      	movs	r2, #0
 800cc98:	2100      	movs	r1, #0
 800cc9a:	2014      	movs	r0, #20
 800cc9c:	f7f6 ff71 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cca0:	2014      	movs	r0, #20
 800cca2:	f7f6 ff8a 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	40005c00 	.word	0x40005c00
 800ccb4:	40021000 	.word	0x40021000

0800ccb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cccc:	4619      	mov	r1, r3
 800ccce:	4610      	mov	r0, r2
 800ccd0:	f7fe fd6f 	bl	800b7b2 <USBD_LL_SetupStage>
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ccee:	78fa      	ldrb	r2, [r7, #3]
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	440b      	add	r3, r1
 800ccfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	4619      	mov	r1, r3
 800cd06:	f7fe fda1 	bl	800b84c <USBD_LL_DataOutStage>
}
 800cd0a:	bf00      	nop
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cd24:	78fa      	ldrb	r2, [r7, #3]
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	00db      	lsls	r3, r3, #3
 800cd30:	440b      	add	r3, r1
 800cd32:	3324      	adds	r3, #36	@ 0x24
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	78fb      	ldrb	r3, [r7, #3]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	f7fe fdf8 	bl	800b92e <USBD_LL_DataInStage>
}
 800cd3e:	bf00      	nop
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7fe ff08 	bl	800bb6a <USBD_LL_SOF>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	799b      	ldrb	r3, [r3, #6]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d001      	beq.n	800cd7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd76:	f7f6 fa99 	bl	80032ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd80:	7bfa      	ldrb	r2, [r7, #15]
 800cd82:	4611      	mov	r1, r2
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe feb8 	bl	800bafa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe fe71 	bl	800ba78 <USBD_LL_Reset>
}
 800cd96:	bf00      	nop
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fe feb2 	bl	800bb18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7a9b      	ldrb	r3, [r3, #10]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d005      	beq.n	800cdc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdbc:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <HAL_PCD_SuspendCallback+0x30>)
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	4a03      	ldr	r2, [pc, #12]	@ (800cdd0 <HAL_PCD_SuspendCallback+0x30>)
 800cdc2:	f043 0306 	orr.w	r3, r3, #6
 800cdc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	e000ed00 	.word	0xe000ed00

0800cdd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fe feac 	bl	800bb40 <USBD_LL_Resume>
}
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cdf8:	4a28      	ldr	r2, [pc, #160]	@ (800ce9c <USBD_LL_Init+0xac>)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a26      	ldr	r2, [pc, #152]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce04:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ce08:	4b24      	ldr	r3, [pc, #144]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce0a:	4a25      	ldr	r2, [pc, #148]	@ (800cea0 <USBD_LL_Init+0xb0>)
 800ce0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ce0e:	4b23      	ldr	r3, [pc, #140]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce10:	2208      	movs	r2, #8
 800ce12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ce14:	4b21      	ldr	r3, [pc, #132]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce16:	2202      	movs	r2, #2
 800ce18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce1a:	4b20      	ldr	r3, [pc, #128]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce20:	4b1e      	ldr	r3, [pc, #120]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce26:	4b1d      	ldr	r3, [pc, #116]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce2c:	481b      	ldr	r0, [pc, #108]	@ (800ce9c <USBD_LL_Init+0xac>)
 800ce2e:	f7f7 ff17 	bl	8004c60 <HAL_PCD_Init>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ce38:	f7f6 fa38 	bl	80032ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce42:	2318      	movs	r3, #24
 800ce44:	2200      	movs	r2, #0
 800ce46:	2100      	movs	r1, #0
 800ce48:	f7f9 fc28 	bl	800669c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce52:	2358      	movs	r3, #88	@ 0x58
 800ce54:	2200      	movs	r2, #0
 800ce56:	2180      	movs	r1, #128	@ 0x80
 800ce58:	f7f9 fc20 	bl	800669c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce62:	23c0      	movs	r3, #192	@ 0xc0
 800ce64:	2200      	movs	r2, #0
 800ce66:	2181      	movs	r1, #129	@ 0x81
 800ce68:	f7f9 fc18 	bl	800669c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ce76:	2200      	movs	r2, #0
 800ce78:	2101      	movs	r1, #1
 800ce7a:	f7f9 fc0f 	bl	800669c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2182      	movs	r1, #130	@ 0x82
 800ce8c:	f7f9 fc06 	bl	800669c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	2000147c 	.word	0x2000147c
 800cea0:	40005c00 	.word	0x40005c00

0800cea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f7 ffc6 	bl	8004e4c <HAL_PCD_Start>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 f94e 	bl	800d168 <USBD_Get_USB_Status>
 800cecc:	4603      	mov	r3, r0
 800cece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b084      	sub	sp, #16
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	461a      	mov	r2, r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	70fb      	strb	r3, [r7, #3]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70bb      	strb	r3, [r7, #2]
 800cef0:	4613      	mov	r3, r2
 800cef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cf02:	78bb      	ldrb	r3, [r7, #2]
 800cf04:	883a      	ldrh	r2, [r7, #0]
 800cf06:	78f9      	ldrb	r1, [r7, #3]
 800cf08:	f7f8 f91a 	bl	8005140 <HAL_PCD_EP_Open>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f928 	bl	800d168 <USBD_Get_USB_Status>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf40:	78fa      	ldrb	r2, [r7, #3]
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7f8 f958 	bl	80051fa <HAL_PCD_EP_Close>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 f909 	bl	800d168 <USBD_Get_USB_Status>
 800cf56:	4603      	mov	r3, r0
 800cf58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf7e:	78fa      	ldrb	r2, [r7, #3]
 800cf80:	4611      	mov	r1, r2
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7f8 fa00 	bl	8005388 <HAL_PCD_EP_SetStall>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 f8ea 	bl	800d168 <USBD_Get_USB_Status>
 800cf94:	4603      	mov	r3, r0
 800cf96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	460b      	mov	r3, r1
 800cfac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cfbc:	78fa      	ldrb	r2, [r7, #3]
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7f8 fa41 	bl	8005448 <HAL_PCD_EP_ClrStall>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 f8cb 	bl	800d168 <USBD_Get_USB_Status>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	da0b      	bge.n	800d014 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cffc:	78fb      	ldrb	r3, [r7, #3]
 800cffe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	4613      	mov	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4413      	add	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	440b      	add	r3, r1
 800d00e:	3312      	adds	r3, #18
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	e00b      	b.n	800d02c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d014:	78fb      	ldrb	r3, [r7, #3]
 800d016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d01a:	68f9      	ldr	r1, [r7, #12]
 800d01c:	4613      	mov	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	440b      	add	r3, r1
 800d026:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d02a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	bc80      	pop	{r7}
 800d034:	4770      	bx	lr

0800d036 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b084      	sub	sp, #16
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	460b      	mov	r3, r1
 800d040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d042:	2300      	movs	r3, #0
 800d044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d050:	78fa      	ldrb	r2, [r7, #3]
 800d052:	4611      	mov	r1, r2
 800d054:	4618      	mov	r0, r3
 800d056:	f7f8 f84f 	bl	80050f8 <HAL_PCD_SetAddress>
 800d05a:	4603      	mov	r3, r0
 800d05c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
 800d060:	4618      	mov	r0, r3
 800d062:	f000 f881 	bl	800d168 <USBD_Get_USB_Status>
 800d066:	4603      	mov	r3, r0
 800d068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d06a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	461a      	mov	r2, r3
 800d080:	460b      	mov	r3, r1
 800d082:	72fb      	strb	r3, [r7, #11]
 800d084:	4613      	mov	r3, r2
 800d086:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d096:	893b      	ldrh	r3, [r7, #8]
 800d098:	7af9      	ldrb	r1, [r7, #11]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	f7f8 f93d 	bl	800531a <HAL_PCD_EP_Transmit>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 f85e 	bl	800d168 <USBD_Get_USB_Status>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b086      	sub	sp, #24
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	72fb      	strb	r3, [r7, #11]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0dc:	893b      	ldrh	r3, [r7, #8]
 800d0de:	7af9      	ldrb	r1, [r7, #11]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	f7f8 f8d2 	bl	800528a <HAL_PCD_EP_Receive>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 f83b 	bl	800d168 <USBD_Get_USB_Status>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d112:	78fa      	ldrb	r2, [r7, #3]
 800d114:	4611      	mov	r1, r2
 800d116:	4618      	mov	r0, r3
 800d118:	f7f8 f8e8 	bl	80052ec <HAL_PCD_EP_GetRxCount>
 800d11c:	4603      	mov	r3, r0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d130:	4b02      	ldr	r3, [pc, #8]	@ (800d13c <USBD_static_malloc+0x14>)
}
 800d132:	4618      	mov	r0, r3
 800d134:	370c      	adds	r7, #12
 800d136:	46bd      	mov	sp, r7
 800d138:	bc80      	pop	{r7}
 800d13a:	4770      	bx	lr
 800d13c:	20001754 	.word	0x20001754

0800d140 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]

}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bc80      	pop	{r7}
 800d150:	4770      	bx	lr

0800d152 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d15e:	bf00      	nop
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	bc80      	pop	{r7}
 800d166:	4770      	bx	lr

0800d168 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d817      	bhi.n	800d1ac <USBD_Get_USB_Status+0x44>
 800d17c:	a201      	add	r2, pc, #4	@ (adr r2, 800d184 <USBD_Get_USB_Status+0x1c>)
 800d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d182:	bf00      	nop
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d19b 	.word	0x0800d19b
 800d18c:	0800d1a1 	.word	0x0800d1a1
 800d190:	0800d1a7 	.word	0x0800d1a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d194:	2300      	movs	r3, #0
 800d196:	73fb      	strb	r3, [r7, #15]
    break;
 800d198:	e00b      	b.n	800d1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d19a:	2302      	movs	r3, #2
 800d19c:	73fb      	strb	r3, [r7, #15]
    break;
 800d19e:	e008      	b.n	800d1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a4:	e005      	b.n	800d1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1aa:	e002      	b.n	800d1b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b0:	bf00      	nop
  }
  return usb_status;
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bc80      	pop	{r7}
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop

0800d1c0 <__cvt>:
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c6:	461d      	mov	r5, r3
 800d1c8:	bfbb      	ittet	lt
 800d1ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d1ce:	461d      	movlt	r5, r3
 800d1d0:	2300      	movge	r3, #0
 800d1d2:	232d      	movlt	r3, #45	@ 0x2d
 800d1d4:	b088      	sub	sp, #32
 800d1d6:	4614      	mov	r4, r2
 800d1d8:	bfb8      	it	lt
 800d1da:	4614      	movlt	r4, r2
 800d1dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d1de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d1e0:	7013      	strb	r3, [r2, #0]
 800d1e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d1e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d1e8:	f023 0820 	bic.w	r8, r3, #32
 800d1ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1f0:	d005      	beq.n	800d1fe <__cvt+0x3e>
 800d1f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d1f6:	d100      	bne.n	800d1fa <__cvt+0x3a>
 800d1f8:	3601      	adds	r6, #1
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	e000      	b.n	800d200 <__cvt+0x40>
 800d1fe:	2303      	movs	r3, #3
 800d200:	aa07      	add	r2, sp, #28
 800d202:	9204      	str	r2, [sp, #16]
 800d204:	aa06      	add	r2, sp, #24
 800d206:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d20a:	e9cd 3600 	strd	r3, r6, [sp]
 800d20e:	4622      	mov	r2, r4
 800d210:	462b      	mov	r3, r5
 800d212:	f001 f8f9 	bl	800e408 <_dtoa_r>
 800d216:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d21a:	4607      	mov	r7, r0
 800d21c:	d119      	bne.n	800d252 <__cvt+0x92>
 800d21e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d220:	07db      	lsls	r3, r3, #31
 800d222:	d50e      	bpl.n	800d242 <__cvt+0x82>
 800d224:	eb00 0906 	add.w	r9, r0, r6
 800d228:	2200      	movs	r2, #0
 800d22a:	2300      	movs	r3, #0
 800d22c:	4620      	mov	r0, r4
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 fbba 	bl	80009a8 <__aeabi_dcmpeq>
 800d234:	b108      	cbz	r0, 800d23a <__cvt+0x7a>
 800d236:	f8cd 901c 	str.w	r9, [sp, #28]
 800d23a:	2230      	movs	r2, #48	@ 0x30
 800d23c:	9b07      	ldr	r3, [sp, #28]
 800d23e:	454b      	cmp	r3, r9
 800d240:	d31e      	bcc.n	800d280 <__cvt+0xc0>
 800d242:	4638      	mov	r0, r7
 800d244:	9b07      	ldr	r3, [sp, #28]
 800d246:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d248:	1bdb      	subs	r3, r3, r7
 800d24a:	6013      	str	r3, [r2, #0]
 800d24c:	b008      	add	sp, #32
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d256:	eb00 0906 	add.w	r9, r0, r6
 800d25a:	d1e5      	bne.n	800d228 <__cvt+0x68>
 800d25c:	7803      	ldrb	r3, [r0, #0]
 800d25e:	2b30      	cmp	r3, #48	@ 0x30
 800d260:	d10a      	bne.n	800d278 <__cvt+0xb8>
 800d262:	2200      	movs	r2, #0
 800d264:	2300      	movs	r3, #0
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 fb9d 	bl	80009a8 <__aeabi_dcmpeq>
 800d26e:	b918      	cbnz	r0, 800d278 <__cvt+0xb8>
 800d270:	f1c6 0601 	rsb	r6, r6, #1
 800d274:	f8ca 6000 	str.w	r6, [sl]
 800d278:	f8da 3000 	ldr.w	r3, [sl]
 800d27c:	4499      	add	r9, r3
 800d27e:	e7d3      	b.n	800d228 <__cvt+0x68>
 800d280:	1c59      	adds	r1, r3, #1
 800d282:	9107      	str	r1, [sp, #28]
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e7d9      	b.n	800d23c <__cvt+0x7c>

0800d288 <__exponent>:
 800d288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d28a:	2900      	cmp	r1, #0
 800d28c:	bfb6      	itet	lt
 800d28e:	232d      	movlt	r3, #45	@ 0x2d
 800d290:	232b      	movge	r3, #43	@ 0x2b
 800d292:	4249      	neglt	r1, r1
 800d294:	2909      	cmp	r1, #9
 800d296:	7002      	strb	r2, [r0, #0]
 800d298:	7043      	strb	r3, [r0, #1]
 800d29a:	dd29      	ble.n	800d2f0 <__exponent+0x68>
 800d29c:	f10d 0307 	add.w	r3, sp, #7
 800d2a0:	461d      	mov	r5, r3
 800d2a2:	270a      	movs	r7, #10
 800d2a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	fb07 1416 	mls	r4, r7, r6, r1
 800d2ae:	3430      	adds	r4, #48	@ 0x30
 800d2b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	2c63      	cmp	r4, #99	@ 0x63
 800d2b8:	4631      	mov	r1, r6
 800d2ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2be:	dcf1      	bgt.n	800d2a4 <__exponent+0x1c>
 800d2c0:	3130      	adds	r1, #48	@ 0x30
 800d2c2:	1e94      	subs	r4, r2, #2
 800d2c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d2c8:	4623      	mov	r3, r4
 800d2ca:	1c41      	adds	r1, r0, #1
 800d2cc:	42ab      	cmp	r3, r5
 800d2ce:	d30a      	bcc.n	800d2e6 <__exponent+0x5e>
 800d2d0:	f10d 0309 	add.w	r3, sp, #9
 800d2d4:	1a9b      	subs	r3, r3, r2
 800d2d6:	42ac      	cmp	r4, r5
 800d2d8:	bf88      	it	hi
 800d2da:	2300      	movhi	r3, #0
 800d2dc:	3302      	adds	r3, #2
 800d2de:	4403      	add	r3, r0
 800d2e0:	1a18      	subs	r0, r3, r0
 800d2e2:	b003      	add	sp, #12
 800d2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d2ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d2ee:	e7ed      	b.n	800d2cc <__exponent+0x44>
 800d2f0:	2330      	movs	r3, #48	@ 0x30
 800d2f2:	3130      	adds	r1, #48	@ 0x30
 800d2f4:	7083      	strb	r3, [r0, #2]
 800d2f6:	70c1      	strb	r1, [r0, #3]
 800d2f8:	1d03      	adds	r3, r0, #4
 800d2fa:	e7f1      	b.n	800d2e0 <__exponent+0x58>

0800d2fc <_printf_float>:
 800d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	b091      	sub	sp, #68	@ 0x44
 800d302:	460c      	mov	r4, r1
 800d304:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d308:	4616      	mov	r6, r2
 800d30a:	461f      	mov	r7, r3
 800d30c:	4605      	mov	r5, r0
 800d30e:	f000 ff67 	bl	800e1e0 <_localeconv_r>
 800d312:	6803      	ldr	r3, [r0, #0]
 800d314:	4618      	mov	r0, r3
 800d316:	9308      	str	r3, [sp, #32]
 800d318:	f7f2 ff1a 	bl	8000150 <strlen>
 800d31c:	2300      	movs	r3, #0
 800d31e:	930e      	str	r3, [sp, #56]	@ 0x38
 800d320:	f8d8 3000 	ldr.w	r3, [r8]
 800d324:	9009      	str	r0, [sp, #36]	@ 0x24
 800d326:	3307      	adds	r3, #7
 800d328:	f023 0307 	bic.w	r3, r3, #7
 800d32c:	f103 0208 	add.w	r2, r3, #8
 800d330:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d334:	f8d4 b000 	ldr.w	fp, [r4]
 800d338:	f8c8 2000 	str.w	r2, [r8]
 800d33c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d340:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d344:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d346:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d34a:	f04f 32ff 	mov.w	r2, #4294967295
 800d34e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d352:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d356:	4b9c      	ldr	r3, [pc, #624]	@ (800d5c8 <_printf_float+0x2cc>)
 800d358:	f7f3 fb58 	bl	8000a0c <__aeabi_dcmpun>
 800d35c:	bb70      	cbnz	r0, 800d3bc <_printf_float+0xc0>
 800d35e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d362:	f04f 32ff 	mov.w	r2, #4294967295
 800d366:	4b98      	ldr	r3, [pc, #608]	@ (800d5c8 <_printf_float+0x2cc>)
 800d368:	f7f3 fb32 	bl	80009d0 <__aeabi_dcmple>
 800d36c:	bb30      	cbnz	r0, 800d3bc <_printf_float+0xc0>
 800d36e:	2200      	movs	r2, #0
 800d370:	2300      	movs	r3, #0
 800d372:	4640      	mov	r0, r8
 800d374:	4649      	mov	r1, r9
 800d376:	f7f3 fb21 	bl	80009bc <__aeabi_dcmplt>
 800d37a:	b110      	cbz	r0, 800d382 <_printf_float+0x86>
 800d37c:	232d      	movs	r3, #45	@ 0x2d
 800d37e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d382:	4a92      	ldr	r2, [pc, #584]	@ (800d5cc <_printf_float+0x2d0>)
 800d384:	4b92      	ldr	r3, [pc, #584]	@ (800d5d0 <_printf_float+0x2d4>)
 800d386:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d38a:	bf8c      	ite	hi
 800d38c:	4690      	movhi	r8, r2
 800d38e:	4698      	movls	r8, r3
 800d390:	2303      	movs	r3, #3
 800d392:	f04f 0900 	mov.w	r9, #0
 800d396:	6123      	str	r3, [r4, #16]
 800d398:	f02b 0304 	bic.w	r3, fp, #4
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	4633      	mov	r3, r6
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	9700      	str	r7, [sp, #0]
 800d3a6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d3a8:	f000 f9d4 	bl	800d754 <_printf_common>
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	f040 8090 	bne.w	800d4d2 <_printf_float+0x1d6>
 800d3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b6:	b011      	add	sp, #68	@ 0x44
 800d3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3bc:	4642      	mov	r2, r8
 800d3be:	464b      	mov	r3, r9
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	f7f3 fb22 	bl	8000a0c <__aeabi_dcmpun>
 800d3c8:	b148      	cbz	r0, 800d3de <_printf_float+0xe2>
 800d3ca:	464b      	mov	r3, r9
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bfb8      	it	lt
 800d3d0:	232d      	movlt	r3, #45	@ 0x2d
 800d3d2:	4a80      	ldr	r2, [pc, #512]	@ (800d5d4 <_printf_float+0x2d8>)
 800d3d4:	bfb8      	it	lt
 800d3d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d3da:	4b7f      	ldr	r3, [pc, #508]	@ (800d5d8 <_printf_float+0x2dc>)
 800d3dc:	e7d3      	b.n	800d386 <_printf_float+0x8a>
 800d3de:	6863      	ldr	r3, [r4, #4]
 800d3e0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	d13f      	bne.n	800d468 <_printf_float+0x16c>
 800d3e8:	2306      	movs	r3, #6
 800d3ea:	6063      	str	r3, [r4, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	9206      	str	r2, [sp, #24]
 800d3f6:	aa0e      	add	r2, sp, #56	@ 0x38
 800d3f8:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d3fc:	aa0d      	add	r2, sp, #52	@ 0x34
 800d3fe:	9203      	str	r2, [sp, #12]
 800d400:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d404:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d408:	6863      	ldr	r3, [r4, #4]
 800d40a:	4642      	mov	r2, r8
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	4628      	mov	r0, r5
 800d410:	464b      	mov	r3, r9
 800d412:	910a      	str	r1, [sp, #40]	@ 0x28
 800d414:	f7ff fed4 	bl	800d1c0 <__cvt>
 800d418:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d41a:	4680      	mov	r8, r0
 800d41c:	2947      	cmp	r1, #71	@ 0x47
 800d41e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d420:	d128      	bne.n	800d474 <_printf_float+0x178>
 800d422:	1cc8      	adds	r0, r1, #3
 800d424:	db02      	blt.n	800d42c <_printf_float+0x130>
 800d426:	6863      	ldr	r3, [r4, #4]
 800d428:	4299      	cmp	r1, r3
 800d42a:	dd40      	ble.n	800d4ae <_printf_float+0x1b2>
 800d42c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d430:	fa5f fa8a 	uxtb.w	sl, sl
 800d434:	4652      	mov	r2, sl
 800d436:	3901      	subs	r1, #1
 800d438:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d43c:	910d      	str	r1, [sp, #52]	@ 0x34
 800d43e:	f7ff ff23 	bl	800d288 <__exponent>
 800d442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d444:	4681      	mov	r9, r0
 800d446:	1813      	adds	r3, r2, r0
 800d448:	2a01      	cmp	r2, #1
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	dc02      	bgt.n	800d454 <_printf_float+0x158>
 800d44e:	6822      	ldr	r2, [r4, #0]
 800d450:	07d2      	lsls	r2, r2, #31
 800d452:	d501      	bpl.n	800d458 <_printf_float+0x15c>
 800d454:	3301      	adds	r3, #1
 800d456:	6123      	str	r3, [r4, #16]
 800d458:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d09e      	beq.n	800d39e <_printf_float+0xa2>
 800d460:	232d      	movs	r3, #45	@ 0x2d
 800d462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d466:	e79a      	b.n	800d39e <_printf_float+0xa2>
 800d468:	2947      	cmp	r1, #71	@ 0x47
 800d46a:	d1bf      	bne.n	800d3ec <_printf_float+0xf0>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1bd      	bne.n	800d3ec <_printf_float+0xf0>
 800d470:	2301      	movs	r3, #1
 800d472:	e7ba      	b.n	800d3ea <_printf_float+0xee>
 800d474:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d478:	d9dc      	bls.n	800d434 <_printf_float+0x138>
 800d47a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d47e:	d118      	bne.n	800d4b2 <_printf_float+0x1b6>
 800d480:	2900      	cmp	r1, #0
 800d482:	6863      	ldr	r3, [r4, #4]
 800d484:	dd0b      	ble.n	800d49e <_printf_float+0x1a2>
 800d486:	6121      	str	r1, [r4, #16]
 800d488:	b913      	cbnz	r3, 800d490 <_printf_float+0x194>
 800d48a:	6822      	ldr	r2, [r4, #0]
 800d48c:	07d0      	lsls	r0, r2, #31
 800d48e:	d502      	bpl.n	800d496 <_printf_float+0x19a>
 800d490:	3301      	adds	r3, #1
 800d492:	440b      	add	r3, r1
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	f04f 0900 	mov.w	r9, #0
 800d49a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d49c:	e7dc      	b.n	800d458 <_printf_float+0x15c>
 800d49e:	b913      	cbnz	r3, 800d4a6 <_printf_float+0x1aa>
 800d4a0:	6822      	ldr	r2, [r4, #0]
 800d4a2:	07d2      	lsls	r2, r2, #31
 800d4a4:	d501      	bpl.n	800d4aa <_printf_float+0x1ae>
 800d4a6:	3302      	adds	r3, #2
 800d4a8:	e7f4      	b.n	800d494 <_printf_float+0x198>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e7f2      	b.n	800d494 <_printf_float+0x198>
 800d4ae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b4:	4299      	cmp	r1, r3
 800d4b6:	db05      	blt.n	800d4c4 <_printf_float+0x1c8>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	6121      	str	r1, [r4, #16]
 800d4bc:	07d8      	lsls	r0, r3, #31
 800d4be:	d5ea      	bpl.n	800d496 <_printf_float+0x19a>
 800d4c0:	1c4b      	adds	r3, r1, #1
 800d4c2:	e7e7      	b.n	800d494 <_printf_float+0x198>
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	bfcc      	ite	gt
 800d4c8:	2201      	movgt	r2, #1
 800d4ca:	f1c1 0202 	rsble	r2, r1, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	e7e0      	b.n	800d494 <_printf_float+0x198>
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	055a      	lsls	r2, r3, #21
 800d4d6:	d407      	bmi.n	800d4e8 <_printf_float+0x1ec>
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	4642      	mov	r2, r8
 800d4dc:	4631      	mov	r1, r6
 800d4de:	4628      	mov	r0, r5
 800d4e0:	47b8      	blx	r7
 800d4e2:	3001      	adds	r0, #1
 800d4e4:	d12b      	bne.n	800d53e <_printf_float+0x242>
 800d4e6:	e764      	b.n	800d3b2 <_printf_float+0xb6>
 800d4e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4ec:	f240 80dc 	bls.w	800d6a8 <_printf_float+0x3ac>
 800d4f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f7f3 fa56 	bl	80009a8 <__aeabi_dcmpeq>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d033      	beq.n	800d568 <_printf_float+0x26c>
 800d500:	2301      	movs	r3, #1
 800d502:	4631      	mov	r1, r6
 800d504:	4628      	mov	r0, r5
 800d506:	4a35      	ldr	r2, [pc, #212]	@ (800d5dc <_printf_float+0x2e0>)
 800d508:	47b8      	blx	r7
 800d50a:	3001      	adds	r0, #1
 800d50c:	f43f af51 	beq.w	800d3b2 <_printf_float+0xb6>
 800d510:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d514:	4543      	cmp	r3, r8
 800d516:	db02      	blt.n	800d51e <_printf_float+0x222>
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	07d8      	lsls	r0, r3, #31
 800d51c:	d50f      	bpl.n	800d53e <_printf_float+0x242>
 800d51e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d522:	4631      	mov	r1, r6
 800d524:	4628      	mov	r0, r5
 800d526:	47b8      	blx	r7
 800d528:	3001      	adds	r0, #1
 800d52a:	f43f af42 	beq.w	800d3b2 <_printf_float+0xb6>
 800d52e:	f04f 0900 	mov.w	r9, #0
 800d532:	f108 38ff 	add.w	r8, r8, #4294967295
 800d536:	f104 0a1a 	add.w	sl, r4, #26
 800d53a:	45c8      	cmp	r8, r9
 800d53c:	dc09      	bgt.n	800d552 <_printf_float+0x256>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	079b      	lsls	r3, r3, #30
 800d542:	f100 8102 	bmi.w	800d74a <_printf_float+0x44e>
 800d546:	68e0      	ldr	r0, [r4, #12]
 800d548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d54a:	4298      	cmp	r0, r3
 800d54c:	bfb8      	it	lt
 800d54e:	4618      	movlt	r0, r3
 800d550:	e731      	b.n	800d3b6 <_printf_float+0xba>
 800d552:	2301      	movs	r3, #1
 800d554:	4652      	mov	r2, sl
 800d556:	4631      	mov	r1, r6
 800d558:	4628      	mov	r0, r5
 800d55a:	47b8      	blx	r7
 800d55c:	3001      	adds	r0, #1
 800d55e:	f43f af28 	beq.w	800d3b2 <_printf_float+0xb6>
 800d562:	f109 0901 	add.w	r9, r9, #1
 800d566:	e7e8      	b.n	800d53a <_printf_float+0x23e>
 800d568:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	dc38      	bgt.n	800d5e0 <_printf_float+0x2e4>
 800d56e:	2301      	movs	r3, #1
 800d570:	4631      	mov	r1, r6
 800d572:	4628      	mov	r0, r5
 800d574:	4a19      	ldr	r2, [pc, #100]	@ (800d5dc <_printf_float+0x2e0>)
 800d576:	47b8      	blx	r7
 800d578:	3001      	adds	r0, #1
 800d57a:	f43f af1a 	beq.w	800d3b2 <_printf_float+0xb6>
 800d57e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d582:	ea59 0303 	orrs.w	r3, r9, r3
 800d586:	d102      	bne.n	800d58e <_printf_float+0x292>
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	07d9      	lsls	r1, r3, #31
 800d58c:	d5d7      	bpl.n	800d53e <_printf_float+0x242>
 800d58e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d592:	4631      	mov	r1, r6
 800d594:	4628      	mov	r0, r5
 800d596:	47b8      	blx	r7
 800d598:	3001      	adds	r0, #1
 800d59a:	f43f af0a 	beq.w	800d3b2 <_printf_float+0xb6>
 800d59e:	f04f 0a00 	mov.w	sl, #0
 800d5a2:	f104 0b1a 	add.w	fp, r4, #26
 800d5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5a8:	425b      	negs	r3, r3
 800d5aa:	4553      	cmp	r3, sl
 800d5ac:	dc01      	bgt.n	800d5b2 <_printf_float+0x2b6>
 800d5ae:	464b      	mov	r3, r9
 800d5b0:	e793      	b.n	800d4da <_printf_float+0x1de>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	465a      	mov	r2, fp
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b8      	blx	r7
 800d5bc:	3001      	adds	r0, #1
 800d5be:	f43f aef8 	beq.w	800d3b2 <_printf_float+0xb6>
 800d5c2:	f10a 0a01 	add.w	sl, sl, #1
 800d5c6:	e7ee      	b.n	800d5a6 <_printf_float+0x2aa>
 800d5c8:	7fefffff 	.word	0x7fefffff
 800d5cc:	080128ba 	.word	0x080128ba
 800d5d0:	080128b6 	.word	0x080128b6
 800d5d4:	080128c2 	.word	0x080128c2
 800d5d8:	080128be 	.word	0x080128be
 800d5dc:	080129fc 	.word	0x080129fc
 800d5e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5e2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d5e6:	4553      	cmp	r3, sl
 800d5e8:	bfa8      	it	ge
 800d5ea:	4653      	movge	r3, sl
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	4699      	mov	r9, r3
 800d5f0:	dc36      	bgt.n	800d660 <_printf_float+0x364>
 800d5f2:	f04f 0b00 	mov.w	fp, #0
 800d5f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5fa:	f104 021a 	add.w	r2, r4, #26
 800d5fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d600:	930a      	str	r3, [sp, #40]	@ 0x28
 800d602:	eba3 0309 	sub.w	r3, r3, r9
 800d606:	455b      	cmp	r3, fp
 800d608:	dc31      	bgt.n	800d66e <_printf_float+0x372>
 800d60a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d60c:	459a      	cmp	sl, r3
 800d60e:	dc3a      	bgt.n	800d686 <_printf_float+0x38a>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	07da      	lsls	r2, r3, #31
 800d614:	d437      	bmi.n	800d686 <_printf_float+0x38a>
 800d616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d618:	ebaa 0903 	sub.w	r9, sl, r3
 800d61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d61e:	ebaa 0303 	sub.w	r3, sl, r3
 800d622:	4599      	cmp	r9, r3
 800d624:	bfa8      	it	ge
 800d626:	4699      	movge	r9, r3
 800d628:	f1b9 0f00 	cmp.w	r9, #0
 800d62c:	dc33      	bgt.n	800d696 <_printf_float+0x39a>
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d636:	f104 0b1a 	add.w	fp, r4, #26
 800d63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d63c:	ebaa 0303 	sub.w	r3, sl, r3
 800d640:	eba3 0309 	sub.w	r3, r3, r9
 800d644:	4543      	cmp	r3, r8
 800d646:	f77f af7a 	ble.w	800d53e <_printf_float+0x242>
 800d64a:	2301      	movs	r3, #1
 800d64c:	465a      	mov	r2, fp
 800d64e:	4631      	mov	r1, r6
 800d650:	4628      	mov	r0, r5
 800d652:	47b8      	blx	r7
 800d654:	3001      	adds	r0, #1
 800d656:	f43f aeac 	beq.w	800d3b2 <_printf_float+0xb6>
 800d65a:	f108 0801 	add.w	r8, r8, #1
 800d65e:	e7ec      	b.n	800d63a <_printf_float+0x33e>
 800d660:	4642      	mov	r2, r8
 800d662:	4631      	mov	r1, r6
 800d664:	4628      	mov	r0, r5
 800d666:	47b8      	blx	r7
 800d668:	3001      	adds	r0, #1
 800d66a:	d1c2      	bne.n	800d5f2 <_printf_float+0x2f6>
 800d66c:	e6a1      	b.n	800d3b2 <_printf_float+0xb6>
 800d66e:	2301      	movs	r3, #1
 800d670:	4631      	mov	r1, r6
 800d672:	4628      	mov	r0, r5
 800d674:	920a      	str	r2, [sp, #40]	@ 0x28
 800d676:	47b8      	blx	r7
 800d678:	3001      	adds	r0, #1
 800d67a:	f43f ae9a 	beq.w	800d3b2 <_printf_float+0xb6>
 800d67e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d680:	f10b 0b01 	add.w	fp, fp, #1
 800d684:	e7bb      	b.n	800d5fe <_printf_float+0x302>
 800d686:	4631      	mov	r1, r6
 800d688:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d68c:	4628      	mov	r0, r5
 800d68e:	47b8      	blx	r7
 800d690:	3001      	adds	r0, #1
 800d692:	d1c0      	bne.n	800d616 <_printf_float+0x31a>
 800d694:	e68d      	b.n	800d3b2 <_printf_float+0xb6>
 800d696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d698:	464b      	mov	r3, r9
 800d69a:	4631      	mov	r1, r6
 800d69c:	4628      	mov	r0, r5
 800d69e:	4442      	add	r2, r8
 800d6a0:	47b8      	blx	r7
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	d1c3      	bne.n	800d62e <_printf_float+0x332>
 800d6a6:	e684      	b.n	800d3b2 <_printf_float+0xb6>
 800d6a8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d6ac:	f1ba 0f01 	cmp.w	sl, #1
 800d6b0:	dc01      	bgt.n	800d6b6 <_printf_float+0x3ba>
 800d6b2:	07db      	lsls	r3, r3, #31
 800d6b4:	d536      	bpl.n	800d724 <_printf_float+0x428>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	4642      	mov	r2, r8
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	4628      	mov	r0, r5
 800d6be:	47b8      	blx	r7
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	f43f ae76 	beq.w	800d3b2 <_printf_float+0xb6>
 800d6c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	47b8      	blx	r7
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	f43f ae6e 	beq.w	800d3b2 <_printf_float+0xb6>
 800d6d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2300      	movs	r3, #0
 800d6de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6e2:	f7f3 f961 	bl	80009a8 <__aeabi_dcmpeq>
 800d6e6:	b9c0      	cbnz	r0, 800d71a <_printf_float+0x41e>
 800d6e8:	4653      	mov	r3, sl
 800d6ea:	f108 0201 	add.w	r2, r8, #1
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	47b8      	blx	r7
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d10c      	bne.n	800d712 <_printf_float+0x416>
 800d6f8:	e65b      	b.n	800d3b2 <_printf_float+0xb6>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	465a      	mov	r2, fp
 800d6fe:	4631      	mov	r1, r6
 800d700:	4628      	mov	r0, r5
 800d702:	47b8      	blx	r7
 800d704:	3001      	adds	r0, #1
 800d706:	f43f ae54 	beq.w	800d3b2 <_printf_float+0xb6>
 800d70a:	f108 0801 	add.w	r8, r8, #1
 800d70e:	45d0      	cmp	r8, sl
 800d710:	dbf3      	blt.n	800d6fa <_printf_float+0x3fe>
 800d712:	464b      	mov	r3, r9
 800d714:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d718:	e6e0      	b.n	800d4dc <_printf_float+0x1e0>
 800d71a:	f04f 0800 	mov.w	r8, #0
 800d71e:	f104 0b1a 	add.w	fp, r4, #26
 800d722:	e7f4      	b.n	800d70e <_printf_float+0x412>
 800d724:	2301      	movs	r3, #1
 800d726:	4642      	mov	r2, r8
 800d728:	e7e1      	b.n	800d6ee <_printf_float+0x3f2>
 800d72a:	2301      	movs	r3, #1
 800d72c:	464a      	mov	r2, r9
 800d72e:	4631      	mov	r1, r6
 800d730:	4628      	mov	r0, r5
 800d732:	47b8      	blx	r7
 800d734:	3001      	adds	r0, #1
 800d736:	f43f ae3c 	beq.w	800d3b2 <_printf_float+0xb6>
 800d73a:	f108 0801 	add.w	r8, r8, #1
 800d73e:	68e3      	ldr	r3, [r4, #12]
 800d740:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d742:	1a5b      	subs	r3, r3, r1
 800d744:	4543      	cmp	r3, r8
 800d746:	dcf0      	bgt.n	800d72a <_printf_float+0x42e>
 800d748:	e6fd      	b.n	800d546 <_printf_float+0x24a>
 800d74a:	f04f 0800 	mov.w	r8, #0
 800d74e:	f104 0919 	add.w	r9, r4, #25
 800d752:	e7f4      	b.n	800d73e <_printf_float+0x442>

0800d754 <_printf_common>:
 800d754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d758:	4616      	mov	r6, r2
 800d75a:	4698      	mov	r8, r3
 800d75c:	688a      	ldr	r2, [r1, #8]
 800d75e:	690b      	ldr	r3, [r1, #16]
 800d760:	4607      	mov	r7, r0
 800d762:	4293      	cmp	r3, r2
 800d764:	bfb8      	it	lt
 800d766:	4613      	movlt	r3, r2
 800d768:	6033      	str	r3, [r6, #0]
 800d76a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d76e:	460c      	mov	r4, r1
 800d770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d774:	b10a      	cbz	r2, 800d77a <_printf_common+0x26>
 800d776:	3301      	adds	r3, #1
 800d778:	6033      	str	r3, [r6, #0]
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	0699      	lsls	r1, r3, #26
 800d77e:	bf42      	ittt	mi
 800d780:	6833      	ldrmi	r3, [r6, #0]
 800d782:	3302      	addmi	r3, #2
 800d784:	6033      	strmi	r3, [r6, #0]
 800d786:	6825      	ldr	r5, [r4, #0]
 800d788:	f015 0506 	ands.w	r5, r5, #6
 800d78c:	d106      	bne.n	800d79c <_printf_common+0x48>
 800d78e:	f104 0a19 	add.w	sl, r4, #25
 800d792:	68e3      	ldr	r3, [r4, #12]
 800d794:	6832      	ldr	r2, [r6, #0]
 800d796:	1a9b      	subs	r3, r3, r2
 800d798:	42ab      	cmp	r3, r5
 800d79a:	dc2b      	bgt.n	800d7f4 <_printf_common+0xa0>
 800d79c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	3b00      	subs	r3, #0
 800d7a4:	bf18      	it	ne
 800d7a6:	2301      	movne	r3, #1
 800d7a8:	0692      	lsls	r2, r2, #26
 800d7aa:	d430      	bmi.n	800d80e <_printf_common+0xba>
 800d7ac:	4641      	mov	r1, r8
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7b4:	47c8      	blx	r9
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	d023      	beq.n	800d802 <_printf_common+0xae>
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	6922      	ldr	r2, [r4, #16]
 800d7be:	f003 0306 	and.w	r3, r3, #6
 800d7c2:	2b04      	cmp	r3, #4
 800d7c4:	bf14      	ite	ne
 800d7c6:	2500      	movne	r5, #0
 800d7c8:	6833      	ldreq	r3, [r6, #0]
 800d7ca:	f04f 0600 	mov.w	r6, #0
 800d7ce:	bf08      	it	eq
 800d7d0:	68e5      	ldreq	r5, [r4, #12]
 800d7d2:	f104 041a 	add.w	r4, r4, #26
 800d7d6:	bf08      	it	eq
 800d7d8:	1aed      	subeq	r5, r5, r3
 800d7da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d7de:	bf08      	it	eq
 800d7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	bfc4      	itt	gt
 800d7e8:	1a9b      	subgt	r3, r3, r2
 800d7ea:	18ed      	addgt	r5, r5, r3
 800d7ec:	42b5      	cmp	r5, r6
 800d7ee:	d11a      	bne.n	800d826 <_printf_common+0xd2>
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	e008      	b.n	800d806 <_printf_common+0xb2>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	4652      	mov	r2, sl
 800d7f8:	4641      	mov	r1, r8
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	47c8      	blx	r9
 800d7fe:	3001      	adds	r0, #1
 800d800:	d103      	bne.n	800d80a <_printf_common+0xb6>
 800d802:	f04f 30ff 	mov.w	r0, #4294967295
 800d806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80a:	3501      	adds	r5, #1
 800d80c:	e7c1      	b.n	800d792 <_printf_common+0x3e>
 800d80e:	2030      	movs	r0, #48	@ 0x30
 800d810:	18e1      	adds	r1, r4, r3
 800d812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d81c:	4422      	add	r2, r4
 800d81e:	3302      	adds	r3, #2
 800d820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d824:	e7c2      	b.n	800d7ac <_printf_common+0x58>
 800d826:	2301      	movs	r3, #1
 800d828:	4622      	mov	r2, r4
 800d82a:	4641      	mov	r1, r8
 800d82c:	4638      	mov	r0, r7
 800d82e:	47c8      	blx	r9
 800d830:	3001      	adds	r0, #1
 800d832:	d0e6      	beq.n	800d802 <_printf_common+0xae>
 800d834:	3601      	adds	r6, #1
 800d836:	e7d9      	b.n	800d7ec <_printf_common+0x98>

0800d838 <_printf_i>:
 800d838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	7e0f      	ldrb	r7, [r1, #24]
 800d83e:	4691      	mov	r9, r2
 800d840:	2f78      	cmp	r7, #120	@ 0x78
 800d842:	4680      	mov	r8, r0
 800d844:	460c      	mov	r4, r1
 800d846:	469a      	mov	sl, r3
 800d848:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d84a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d84e:	d807      	bhi.n	800d860 <_printf_i+0x28>
 800d850:	2f62      	cmp	r7, #98	@ 0x62
 800d852:	d80a      	bhi.n	800d86a <_printf_i+0x32>
 800d854:	2f00      	cmp	r7, #0
 800d856:	f000 80d1 	beq.w	800d9fc <_printf_i+0x1c4>
 800d85a:	2f58      	cmp	r7, #88	@ 0x58
 800d85c:	f000 80b8 	beq.w	800d9d0 <_printf_i+0x198>
 800d860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d868:	e03a      	b.n	800d8e0 <_printf_i+0xa8>
 800d86a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d86e:	2b15      	cmp	r3, #21
 800d870:	d8f6      	bhi.n	800d860 <_printf_i+0x28>
 800d872:	a101      	add	r1, pc, #4	@ (adr r1, 800d878 <_printf_i+0x40>)
 800d874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d878:	0800d8d1 	.word	0x0800d8d1
 800d87c:	0800d8e5 	.word	0x0800d8e5
 800d880:	0800d861 	.word	0x0800d861
 800d884:	0800d861 	.word	0x0800d861
 800d888:	0800d861 	.word	0x0800d861
 800d88c:	0800d861 	.word	0x0800d861
 800d890:	0800d8e5 	.word	0x0800d8e5
 800d894:	0800d861 	.word	0x0800d861
 800d898:	0800d861 	.word	0x0800d861
 800d89c:	0800d861 	.word	0x0800d861
 800d8a0:	0800d861 	.word	0x0800d861
 800d8a4:	0800d9e3 	.word	0x0800d9e3
 800d8a8:	0800d90f 	.word	0x0800d90f
 800d8ac:	0800d99d 	.word	0x0800d99d
 800d8b0:	0800d861 	.word	0x0800d861
 800d8b4:	0800d861 	.word	0x0800d861
 800d8b8:	0800da05 	.word	0x0800da05
 800d8bc:	0800d861 	.word	0x0800d861
 800d8c0:	0800d90f 	.word	0x0800d90f
 800d8c4:	0800d861 	.word	0x0800d861
 800d8c8:	0800d861 	.word	0x0800d861
 800d8cc:	0800d9a5 	.word	0x0800d9a5
 800d8d0:	6833      	ldr	r3, [r6, #0]
 800d8d2:	1d1a      	adds	r2, r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	6032      	str	r2, [r6, #0]
 800d8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e09c      	b.n	800da1e <_printf_i+0x1e6>
 800d8e4:	6833      	ldr	r3, [r6, #0]
 800d8e6:	6820      	ldr	r0, [r4, #0]
 800d8e8:	1d19      	adds	r1, r3, #4
 800d8ea:	6031      	str	r1, [r6, #0]
 800d8ec:	0606      	lsls	r6, r0, #24
 800d8ee:	d501      	bpl.n	800d8f4 <_printf_i+0xbc>
 800d8f0:	681d      	ldr	r5, [r3, #0]
 800d8f2:	e003      	b.n	800d8fc <_printf_i+0xc4>
 800d8f4:	0645      	lsls	r5, r0, #25
 800d8f6:	d5fb      	bpl.n	800d8f0 <_printf_i+0xb8>
 800d8f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8fc:	2d00      	cmp	r5, #0
 800d8fe:	da03      	bge.n	800d908 <_printf_i+0xd0>
 800d900:	232d      	movs	r3, #45	@ 0x2d
 800d902:	426d      	negs	r5, r5
 800d904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d908:	230a      	movs	r3, #10
 800d90a:	4858      	ldr	r0, [pc, #352]	@ (800da6c <_printf_i+0x234>)
 800d90c:	e011      	b.n	800d932 <_printf_i+0xfa>
 800d90e:	6821      	ldr	r1, [r4, #0]
 800d910:	6833      	ldr	r3, [r6, #0]
 800d912:	0608      	lsls	r0, r1, #24
 800d914:	f853 5b04 	ldr.w	r5, [r3], #4
 800d918:	d402      	bmi.n	800d920 <_printf_i+0xe8>
 800d91a:	0649      	lsls	r1, r1, #25
 800d91c:	bf48      	it	mi
 800d91e:	b2ad      	uxthmi	r5, r5
 800d920:	2f6f      	cmp	r7, #111	@ 0x6f
 800d922:	6033      	str	r3, [r6, #0]
 800d924:	bf14      	ite	ne
 800d926:	230a      	movne	r3, #10
 800d928:	2308      	moveq	r3, #8
 800d92a:	4850      	ldr	r0, [pc, #320]	@ (800da6c <_printf_i+0x234>)
 800d92c:	2100      	movs	r1, #0
 800d92e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d932:	6866      	ldr	r6, [r4, #4]
 800d934:	2e00      	cmp	r6, #0
 800d936:	60a6      	str	r6, [r4, #8]
 800d938:	db05      	blt.n	800d946 <_printf_i+0x10e>
 800d93a:	6821      	ldr	r1, [r4, #0]
 800d93c:	432e      	orrs	r6, r5
 800d93e:	f021 0104 	bic.w	r1, r1, #4
 800d942:	6021      	str	r1, [r4, #0]
 800d944:	d04b      	beq.n	800d9de <_printf_i+0x1a6>
 800d946:	4616      	mov	r6, r2
 800d948:	fbb5 f1f3 	udiv	r1, r5, r3
 800d94c:	fb03 5711 	mls	r7, r3, r1, r5
 800d950:	5dc7      	ldrb	r7, [r0, r7]
 800d952:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d956:	462f      	mov	r7, r5
 800d958:	42bb      	cmp	r3, r7
 800d95a:	460d      	mov	r5, r1
 800d95c:	d9f4      	bls.n	800d948 <_printf_i+0x110>
 800d95e:	2b08      	cmp	r3, #8
 800d960:	d10b      	bne.n	800d97a <_printf_i+0x142>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	07df      	lsls	r7, r3, #31
 800d966:	d508      	bpl.n	800d97a <_printf_i+0x142>
 800d968:	6923      	ldr	r3, [r4, #16]
 800d96a:	6861      	ldr	r1, [r4, #4]
 800d96c:	4299      	cmp	r1, r3
 800d96e:	bfde      	ittt	le
 800d970:	2330      	movle	r3, #48	@ 0x30
 800d972:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d976:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d97a:	1b92      	subs	r2, r2, r6
 800d97c:	6122      	str	r2, [r4, #16]
 800d97e:	464b      	mov	r3, r9
 800d980:	4621      	mov	r1, r4
 800d982:	4640      	mov	r0, r8
 800d984:	f8cd a000 	str.w	sl, [sp]
 800d988:	aa03      	add	r2, sp, #12
 800d98a:	f7ff fee3 	bl	800d754 <_printf_common>
 800d98e:	3001      	adds	r0, #1
 800d990:	d14a      	bne.n	800da28 <_printf_i+0x1f0>
 800d992:	f04f 30ff 	mov.w	r0, #4294967295
 800d996:	b004      	add	sp, #16
 800d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99c:	6823      	ldr	r3, [r4, #0]
 800d99e:	f043 0320 	orr.w	r3, r3, #32
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	2778      	movs	r7, #120	@ 0x78
 800d9a6:	4832      	ldr	r0, [pc, #200]	@ (800da70 <_printf_i+0x238>)
 800d9a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9ac:	6823      	ldr	r3, [r4, #0]
 800d9ae:	6831      	ldr	r1, [r6, #0]
 800d9b0:	061f      	lsls	r7, r3, #24
 800d9b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9b6:	d402      	bmi.n	800d9be <_printf_i+0x186>
 800d9b8:	065f      	lsls	r7, r3, #25
 800d9ba:	bf48      	it	mi
 800d9bc:	b2ad      	uxthmi	r5, r5
 800d9be:	6031      	str	r1, [r6, #0]
 800d9c0:	07d9      	lsls	r1, r3, #31
 800d9c2:	bf44      	itt	mi
 800d9c4:	f043 0320 	orrmi.w	r3, r3, #32
 800d9c8:	6023      	strmi	r3, [r4, #0]
 800d9ca:	b11d      	cbz	r5, 800d9d4 <_printf_i+0x19c>
 800d9cc:	2310      	movs	r3, #16
 800d9ce:	e7ad      	b.n	800d92c <_printf_i+0xf4>
 800d9d0:	4826      	ldr	r0, [pc, #152]	@ (800da6c <_printf_i+0x234>)
 800d9d2:	e7e9      	b.n	800d9a8 <_printf_i+0x170>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	f023 0320 	bic.w	r3, r3, #32
 800d9da:	6023      	str	r3, [r4, #0]
 800d9dc:	e7f6      	b.n	800d9cc <_printf_i+0x194>
 800d9de:	4616      	mov	r6, r2
 800d9e0:	e7bd      	b.n	800d95e <_printf_i+0x126>
 800d9e2:	6833      	ldr	r3, [r6, #0]
 800d9e4:	6825      	ldr	r5, [r4, #0]
 800d9e6:	1d18      	adds	r0, r3, #4
 800d9e8:	6961      	ldr	r1, [r4, #20]
 800d9ea:	6030      	str	r0, [r6, #0]
 800d9ec:	062e      	lsls	r6, r5, #24
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	d501      	bpl.n	800d9f6 <_printf_i+0x1be>
 800d9f2:	6019      	str	r1, [r3, #0]
 800d9f4:	e002      	b.n	800d9fc <_printf_i+0x1c4>
 800d9f6:	0668      	lsls	r0, r5, #25
 800d9f8:	d5fb      	bpl.n	800d9f2 <_printf_i+0x1ba>
 800d9fa:	8019      	strh	r1, [r3, #0]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4616      	mov	r6, r2
 800da00:	6123      	str	r3, [r4, #16]
 800da02:	e7bc      	b.n	800d97e <_printf_i+0x146>
 800da04:	6833      	ldr	r3, [r6, #0]
 800da06:	2100      	movs	r1, #0
 800da08:	1d1a      	adds	r2, r3, #4
 800da0a:	6032      	str	r2, [r6, #0]
 800da0c:	681e      	ldr	r6, [r3, #0]
 800da0e:	6862      	ldr	r2, [r4, #4]
 800da10:	4630      	mov	r0, r6
 800da12:	f000 fc5c 	bl	800e2ce <memchr>
 800da16:	b108      	cbz	r0, 800da1c <_printf_i+0x1e4>
 800da18:	1b80      	subs	r0, r0, r6
 800da1a:	6060      	str	r0, [r4, #4]
 800da1c:	6863      	ldr	r3, [r4, #4]
 800da1e:	6123      	str	r3, [r4, #16]
 800da20:	2300      	movs	r3, #0
 800da22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da26:	e7aa      	b.n	800d97e <_printf_i+0x146>
 800da28:	4632      	mov	r2, r6
 800da2a:	4649      	mov	r1, r9
 800da2c:	4640      	mov	r0, r8
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	47d0      	blx	sl
 800da32:	3001      	adds	r0, #1
 800da34:	d0ad      	beq.n	800d992 <_printf_i+0x15a>
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	079b      	lsls	r3, r3, #30
 800da3a:	d413      	bmi.n	800da64 <_printf_i+0x22c>
 800da3c:	68e0      	ldr	r0, [r4, #12]
 800da3e:	9b03      	ldr	r3, [sp, #12]
 800da40:	4298      	cmp	r0, r3
 800da42:	bfb8      	it	lt
 800da44:	4618      	movlt	r0, r3
 800da46:	e7a6      	b.n	800d996 <_printf_i+0x15e>
 800da48:	2301      	movs	r3, #1
 800da4a:	4632      	mov	r2, r6
 800da4c:	4649      	mov	r1, r9
 800da4e:	4640      	mov	r0, r8
 800da50:	47d0      	blx	sl
 800da52:	3001      	adds	r0, #1
 800da54:	d09d      	beq.n	800d992 <_printf_i+0x15a>
 800da56:	3501      	adds	r5, #1
 800da58:	68e3      	ldr	r3, [r4, #12]
 800da5a:	9903      	ldr	r1, [sp, #12]
 800da5c:	1a5b      	subs	r3, r3, r1
 800da5e:	42ab      	cmp	r3, r5
 800da60:	dcf2      	bgt.n	800da48 <_printf_i+0x210>
 800da62:	e7eb      	b.n	800da3c <_printf_i+0x204>
 800da64:	2500      	movs	r5, #0
 800da66:	f104 0619 	add.w	r6, r4, #25
 800da6a:	e7f5      	b.n	800da58 <_printf_i+0x220>
 800da6c:	080128c6 	.word	0x080128c6
 800da70:	080128d7 	.word	0x080128d7

0800da74 <_scanf_float>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	b087      	sub	sp, #28
 800da7a:	9303      	str	r3, [sp, #12]
 800da7c:	688b      	ldr	r3, [r1, #8]
 800da7e:	4691      	mov	r9, r2
 800da80:	1e5a      	subs	r2, r3, #1
 800da82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800da86:	bf82      	ittt	hi
 800da88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800da8c:	eb03 0b05 	addhi.w	fp, r3, r5
 800da90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800da94:	460a      	mov	r2, r1
 800da96:	f04f 0500 	mov.w	r5, #0
 800da9a:	bf88      	it	hi
 800da9c:	608b      	strhi	r3, [r1, #8]
 800da9e:	680b      	ldr	r3, [r1, #0]
 800daa0:	4680      	mov	r8, r0
 800daa2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800daa6:	f842 3b1c 	str.w	r3, [r2], #28
 800daaa:	460c      	mov	r4, r1
 800daac:	bf98      	it	ls
 800daae:	f04f 0b00 	movls.w	fp, #0
 800dab2:	4616      	mov	r6, r2
 800dab4:	46aa      	mov	sl, r5
 800dab6:	462f      	mov	r7, r5
 800dab8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dabc:	9201      	str	r2, [sp, #4]
 800dabe:	9502      	str	r5, [sp, #8]
 800dac0:	68a2      	ldr	r2, [r4, #8]
 800dac2:	b15a      	cbz	r2, 800dadc <_scanf_float+0x68>
 800dac4:	f8d9 3000 	ldr.w	r3, [r9]
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b4e      	cmp	r3, #78	@ 0x4e
 800dacc:	d862      	bhi.n	800db94 <_scanf_float+0x120>
 800dace:	2b40      	cmp	r3, #64	@ 0x40
 800dad0:	d83a      	bhi.n	800db48 <_scanf_float+0xd4>
 800dad2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dad6:	b2c8      	uxtb	r0, r1
 800dad8:	280e      	cmp	r0, #14
 800dada:	d938      	bls.n	800db4e <_scanf_float+0xda>
 800dadc:	b11f      	cbz	r7, 800dae6 <_scanf_float+0x72>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800daea:	f1ba 0f01 	cmp.w	sl, #1
 800daee:	f200 8114 	bhi.w	800dd1a <_scanf_float+0x2a6>
 800daf2:	9b01      	ldr	r3, [sp, #4]
 800daf4:	429e      	cmp	r6, r3
 800daf6:	f200 8105 	bhi.w	800dd04 <_scanf_float+0x290>
 800dafa:	2001      	movs	r0, #1
 800dafc:	b007      	add	sp, #28
 800dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db02:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800db06:	2a0d      	cmp	r2, #13
 800db08:	d8e8      	bhi.n	800dadc <_scanf_float+0x68>
 800db0a:	a101      	add	r1, pc, #4	@ (adr r1, 800db10 <_scanf_float+0x9c>)
 800db0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800db10:	0800dc59 	.word	0x0800dc59
 800db14:	0800dadd 	.word	0x0800dadd
 800db18:	0800dadd 	.word	0x0800dadd
 800db1c:	0800dadd 	.word	0x0800dadd
 800db20:	0800dcb5 	.word	0x0800dcb5
 800db24:	0800dc8f 	.word	0x0800dc8f
 800db28:	0800dadd 	.word	0x0800dadd
 800db2c:	0800dadd 	.word	0x0800dadd
 800db30:	0800dc67 	.word	0x0800dc67
 800db34:	0800dadd 	.word	0x0800dadd
 800db38:	0800dadd 	.word	0x0800dadd
 800db3c:	0800dadd 	.word	0x0800dadd
 800db40:	0800dadd 	.word	0x0800dadd
 800db44:	0800dc23 	.word	0x0800dc23
 800db48:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800db4c:	e7db      	b.n	800db06 <_scanf_float+0x92>
 800db4e:	290e      	cmp	r1, #14
 800db50:	d8c4      	bhi.n	800dadc <_scanf_float+0x68>
 800db52:	a001      	add	r0, pc, #4	@ (adr r0, 800db58 <_scanf_float+0xe4>)
 800db54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800db58:	0800dc13 	.word	0x0800dc13
 800db5c:	0800dadd 	.word	0x0800dadd
 800db60:	0800dc13 	.word	0x0800dc13
 800db64:	0800dca3 	.word	0x0800dca3
 800db68:	0800dadd 	.word	0x0800dadd
 800db6c:	0800dbb5 	.word	0x0800dbb5
 800db70:	0800dbf9 	.word	0x0800dbf9
 800db74:	0800dbf9 	.word	0x0800dbf9
 800db78:	0800dbf9 	.word	0x0800dbf9
 800db7c:	0800dbf9 	.word	0x0800dbf9
 800db80:	0800dbf9 	.word	0x0800dbf9
 800db84:	0800dbf9 	.word	0x0800dbf9
 800db88:	0800dbf9 	.word	0x0800dbf9
 800db8c:	0800dbf9 	.word	0x0800dbf9
 800db90:	0800dbf9 	.word	0x0800dbf9
 800db94:	2b6e      	cmp	r3, #110	@ 0x6e
 800db96:	d809      	bhi.n	800dbac <_scanf_float+0x138>
 800db98:	2b60      	cmp	r3, #96	@ 0x60
 800db9a:	d8b2      	bhi.n	800db02 <_scanf_float+0x8e>
 800db9c:	2b54      	cmp	r3, #84	@ 0x54
 800db9e:	d07b      	beq.n	800dc98 <_scanf_float+0x224>
 800dba0:	2b59      	cmp	r3, #89	@ 0x59
 800dba2:	d19b      	bne.n	800dadc <_scanf_float+0x68>
 800dba4:	2d07      	cmp	r5, #7
 800dba6:	d199      	bne.n	800dadc <_scanf_float+0x68>
 800dba8:	2508      	movs	r5, #8
 800dbaa:	e02f      	b.n	800dc0c <_scanf_float+0x198>
 800dbac:	2b74      	cmp	r3, #116	@ 0x74
 800dbae:	d073      	beq.n	800dc98 <_scanf_float+0x224>
 800dbb0:	2b79      	cmp	r3, #121	@ 0x79
 800dbb2:	e7f6      	b.n	800dba2 <_scanf_float+0x12e>
 800dbb4:	6821      	ldr	r1, [r4, #0]
 800dbb6:	05c8      	lsls	r0, r1, #23
 800dbb8:	d51e      	bpl.n	800dbf8 <_scanf_float+0x184>
 800dbba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dbbe:	6021      	str	r1, [r4, #0]
 800dbc0:	3701      	adds	r7, #1
 800dbc2:	f1bb 0f00 	cmp.w	fp, #0
 800dbc6:	d003      	beq.n	800dbd0 <_scanf_float+0x15c>
 800dbc8:	3201      	adds	r2, #1
 800dbca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbce:	60a2      	str	r2, [r4, #8]
 800dbd0:	68a3      	ldr	r3, [r4, #8]
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	60a3      	str	r3, [r4, #8]
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	6123      	str	r3, [r4, #16]
 800dbdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f8c9 3004 	str.w	r3, [r9, #4]
 800dbe8:	f340 8083 	ble.w	800dcf2 <_scanf_float+0x27e>
 800dbec:	f8d9 3000 	ldr.w	r3, [r9]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	f8c9 3000 	str.w	r3, [r9]
 800dbf6:	e763      	b.n	800dac0 <_scanf_float+0x4c>
 800dbf8:	eb1a 0105 	adds.w	r1, sl, r5
 800dbfc:	f47f af6e 	bne.w	800dadc <_scanf_float+0x68>
 800dc00:	460d      	mov	r5, r1
 800dc02:	468a      	mov	sl, r1
 800dc04:	6822      	ldr	r2, [r4, #0]
 800dc06:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dc0a:	6022      	str	r2, [r4, #0]
 800dc0c:	f806 3b01 	strb.w	r3, [r6], #1
 800dc10:	e7de      	b.n	800dbd0 <_scanf_float+0x15c>
 800dc12:	6822      	ldr	r2, [r4, #0]
 800dc14:	0610      	lsls	r0, r2, #24
 800dc16:	f57f af61 	bpl.w	800dadc <_scanf_float+0x68>
 800dc1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dc1e:	6022      	str	r2, [r4, #0]
 800dc20:	e7f4      	b.n	800dc0c <_scanf_float+0x198>
 800dc22:	f1ba 0f00 	cmp.w	sl, #0
 800dc26:	d10c      	bne.n	800dc42 <_scanf_float+0x1ce>
 800dc28:	b977      	cbnz	r7, 800dc48 <_scanf_float+0x1d4>
 800dc2a:	6822      	ldr	r2, [r4, #0]
 800dc2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dc30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dc34:	d108      	bne.n	800dc48 <_scanf_float+0x1d4>
 800dc36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc3a:	f04f 0a01 	mov.w	sl, #1
 800dc3e:	6022      	str	r2, [r4, #0]
 800dc40:	e7e4      	b.n	800dc0c <_scanf_float+0x198>
 800dc42:	f1ba 0f02 	cmp.w	sl, #2
 800dc46:	d051      	beq.n	800dcec <_scanf_float+0x278>
 800dc48:	2d01      	cmp	r5, #1
 800dc4a:	d002      	beq.n	800dc52 <_scanf_float+0x1de>
 800dc4c:	2d04      	cmp	r5, #4
 800dc4e:	f47f af45 	bne.w	800dadc <_scanf_float+0x68>
 800dc52:	3501      	adds	r5, #1
 800dc54:	b2ed      	uxtb	r5, r5
 800dc56:	e7d9      	b.n	800dc0c <_scanf_float+0x198>
 800dc58:	f1ba 0f01 	cmp.w	sl, #1
 800dc5c:	f47f af3e 	bne.w	800dadc <_scanf_float+0x68>
 800dc60:	f04f 0a02 	mov.w	sl, #2
 800dc64:	e7d2      	b.n	800dc0c <_scanf_float+0x198>
 800dc66:	b975      	cbnz	r5, 800dc86 <_scanf_float+0x212>
 800dc68:	2f00      	cmp	r7, #0
 800dc6a:	f47f af38 	bne.w	800dade <_scanf_float+0x6a>
 800dc6e:	6822      	ldr	r2, [r4, #0]
 800dc70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dc74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dc78:	f040 80ff 	bne.w	800de7a <_scanf_float+0x406>
 800dc7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc80:	2501      	movs	r5, #1
 800dc82:	6022      	str	r2, [r4, #0]
 800dc84:	e7c2      	b.n	800dc0c <_scanf_float+0x198>
 800dc86:	2d03      	cmp	r5, #3
 800dc88:	d0e3      	beq.n	800dc52 <_scanf_float+0x1de>
 800dc8a:	2d05      	cmp	r5, #5
 800dc8c:	e7df      	b.n	800dc4e <_scanf_float+0x1da>
 800dc8e:	2d02      	cmp	r5, #2
 800dc90:	f47f af24 	bne.w	800dadc <_scanf_float+0x68>
 800dc94:	2503      	movs	r5, #3
 800dc96:	e7b9      	b.n	800dc0c <_scanf_float+0x198>
 800dc98:	2d06      	cmp	r5, #6
 800dc9a:	f47f af1f 	bne.w	800dadc <_scanf_float+0x68>
 800dc9e:	2507      	movs	r5, #7
 800dca0:	e7b4      	b.n	800dc0c <_scanf_float+0x198>
 800dca2:	6822      	ldr	r2, [r4, #0]
 800dca4:	0591      	lsls	r1, r2, #22
 800dca6:	f57f af19 	bpl.w	800dadc <_scanf_float+0x68>
 800dcaa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dcae:	6022      	str	r2, [r4, #0]
 800dcb0:	9702      	str	r7, [sp, #8]
 800dcb2:	e7ab      	b.n	800dc0c <_scanf_float+0x198>
 800dcb4:	6822      	ldr	r2, [r4, #0]
 800dcb6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dcba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dcbe:	d005      	beq.n	800dccc <_scanf_float+0x258>
 800dcc0:	0550      	lsls	r0, r2, #21
 800dcc2:	f57f af0b 	bpl.w	800dadc <_scanf_float+0x68>
 800dcc6:	2f00      	cmp	r7, #0
 800dcc8:	f000 80d7 	beq.w	800de7a <_scanf_float+0x406>
 800dccc:	0591      	lsls	r1, r2, #22
 800dcce:	bf58      	it	pl
 800dcd0:	9902      	ldrpl	r1, [sp, #8]
 800dcd2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dcd6:	bf58      	it	pl
 800dcd8:	1a79      	subpl	r1, r7, r1
 800dcda:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dcde:	f04f 0700 	mov.w	r7, #0
 800dce2:	bf58      	it	pl
 800dce4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dce8:	6022      	str	r2, [r4, #0]
 800dcea:	e78f      	b.n	800dc0c <_scanf_float+0x198>
 800dcec:	f04f 0a03 	mov.w	sl, #3
 800dcf0:	e78c      	b.n	800dc0c <_scanf_float+0x198>
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dcfa:	4798      	blx	r3
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	f43f aedf 	beq.w	800dac0 <_scanf_float+0x4c>
 800dd02:	e6eb      	b.n	800dadc <_scanf_float+0x68>
 800dd04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd08:	464a      	mov	r2, r9
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd10:	4798      	blx	r3
 800dd12:	6923      	ldr	r3, [r4, #16]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	6123      	str	r3, [r4, #16]
 800dd18:	e6eb      	b.n	800daf2 <_scanf_float+0x7e>
 800dd1a:	1e6b      	subs	r3, r5, #1
 800dd1c:	2b06      	cmp	r3, #6
 800dd1e:	d824      	bhi.n	800dd6a <_scanf_float+0x2f6>
 800dd20:	2d02      	cmp	r5, #2
 800dd22:	d836      	bhi.n	800dd92 <_scanf_float+0x31e>
 800dd24:	9b01      	ldr	r3, [sp, #4]
 800dd26:	429e      	cmp	r6, r3
 800dd28:	f67f aee7 	bls.w	800dafa <_scanf_float+0x86>
 800dd2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd30:	464a      	mov	r2, r9
 800dd32:	4640      	mov	r0, r8
 800dd34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd38:	4798      	blx	r3
 800dd3a:	6923      	ldr	r3, [r4, #16]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	6123      	str	r3, [r4, #16]
 800dd40:	e7f0      	b.n	800dd24 <_scanf_float+0x2b0>
 800dd42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd46:	464a      	mov	r2, r9
 800dd48:	4640      	mov	r0, r8
 800dd4a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dd4e:	4798      	blx	r3
 800dd50:	6923      	ldr	r3, [r4, #16]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	6123      	str	r3, [r4, #16]
 800dd56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd5a:	fa5f fa8a 	uxtb.w	sl, sl
 800dd5e:	f1ba 0f02 	cmp.w	sl, #2
 800dd62:	d1ee      	bne.n	800dd42 <_scanf_float+0x2ce>
 800dd64:	3d03      	subs	r5, #3
 800dd66:	b2ed      	uxtb	r5, r5
 800dd68:	1b76      	subs	r6, r6, r5
 800dd6a:	6823      	ldr	r3, [r4, #0]
 800dd6c:	05da      	lsls	r2, r3, #23
 800dd6e:	d530      	bpl.n	800ddd2 <_scanf_float+0x35e>
 800dd70:	055b      	lsls	r3, r3, #21
 800dd72:	d511      	bpl.n	800dd98 <_scanf_float+0x324>
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	429e      	cmp	r6, r3
 800dd78:	f67f aebf 	bls.w	800dafa <_scanf_float+0x86>
 800dd7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd80:	464a      	mov	r2, r9
 800dd82:	4640      	mov	r0, r8
 800dd84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd88:	4798      	blx	r3
 800dd8a:	6923      	ldr	r3, [r4, #16]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	6123      	str	r3, [r4, #16]
 800dd90:	e7f0      	b.n	800dd74 <_scanf_float+0x300>
 800dd92:	46aa      	mov	sl, r5
 800dd94:	46b3      	mov	fp, r6
 800dd96:	e7de      	b.n	800dd56 <_scanf_float+0x2e2>
 800dd98:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd9c:	6923      	ldr	r3, [r4, #16]
 800dd9e:	2965      	cmp	r1, #101	@ 0x65
 800dda0:	f103 33ff 	add.w	r3, r3, #4294967295
 800dda4:	f106 35ff 	add.w	r5, r6, #4294967295
 800dda8:	6123      	str	r3, [r4, #16]
 800ddaa:	d00c      	beq.n	800ddc6 <_scanf_float+0x352>
 800ddac:	2945      	cmp	r1, #69	@ 0x45
 800ddae:	d00a      	beq.n	800ddc6 <_scanf_float+0x352>
 800ddb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ddb4:	464a      	mov	r2, r9
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	4798      	blx	r3
 800ddba:	6923      	ldr	r3, [r4, #16]
 800ddbc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	1eb5      	subs	r5, r6, #2
 800ddc4:	6123      	str	r3, [r4, #16]
 800ddc6:	464a      	mov	r2, r9
 800ddc8:	4640      	mov	r0, r8
 800ddca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ddce:	4798      	blx	r3
 800ddd0:	462e      	mov	r6, r5
 800ddd2:	6822      	ldr	r2, [r4, #0]
 800ddd4:	f012 0210 	ands.w	r2, r2, #16
 800ddd8:	d001      	beq.n	800ddde <_scanf_float+0x36a>
 800ddda:	2000      	movs	r0, #0
 800dddc:	e68e      	b.n	800dafc <_scanf_float+0x88>
 800ddde:	7032      	strb	r2, [r6, #0]
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dde6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddea:	d125      	bne.n	800de38 <_scanf_float+0x3c4>
 800ddec:	9b02      	ldr	r3, [sp, #8]
 800ddee:	429f      	cmp	r7, r3
 800ddf0:	d00a      	beq.n	800de08 <_scanf_float+0x394>
 800ddf2:	1bda      	subs	r2, r3, r7
 800ddf4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ddf8:	429e      	cmp	r6, r3
 800ddfa:	bf28      	it	cs
 800ddfc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800de00:	4630      	mov	r0, r6
 800de02:	491f      	ldr	r1, [pc, #124]	@ (800de80 <_scanf_float+0x40c>)
 800de04:	f000 f902 	bl	800e00c <siprintf>
 800de08:	2200      	movs	r2, #0
 800de0a:	4640      	mov	r0, r8
 800de0c:	9901      	ldr	r1, [sp, #4]
 800de0e:	f002 fc67 	bl	80106e0 <_strtod_r>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	6825      	ldr	r5, [r4, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f015 0f02 	tst.w	r5, #2
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	f103 0204 	add.w	r2, r3, #4
 800de24:	d015      	beq.n	800de52 <_scanf_float+0x3de>
 800de26:	9903      	ldr	r1, [sp, #12]
 800de28:	600a      	str	r2, [r1, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	e9c3 6700 	strd	r6, r7, [r3]
 800de30:	68e3      	ldr	r3, [r4, #12]
 800de32:	3301      	adds	r3, #1
 800de34:	60e3      	str	r3, [r4, #12]
 800de36:	e7d0      	b.n	800ddda <_scanf_float+0x366>
 800de38:	9b04      	ldr	r3, [sp, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d0e4      	beq.n	800de08 <_scanf_float+0x394>
 800de3e:	9905      	ldr	r1, [sp, #20]
 800de40:	230a      	movs	r3, #10
 800de42:	4640      	mov	r0, r8
 800de44:	3101      	adds	r1, #1
 800de46:	f002 fccb 	bl	80107e0 <_strtol_r>
 800de4a:	9b04      	ldr	r3, [sp, #16]
 800de4c:	9e05      	ldr	r6, [sp, #20]
 800de4e:	1ac2      	subs	r2, r0, r3
 800de50:	e7d0      	b.n	800ddf4 <_scanf_float+0x380>
 800de52:	076d      	lsls	r5, r5, #29
 800de54:	d4e7      	bmi.n	800de26 <_scanf_float+0x3b2>
 800de56:	9d03      	ldr	r5, [sp, #12]
 800de58:	602a      	str	r2, [r5, #0]
 800de5a:	681d      	ldr	r5, [r3, #0]
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	f7f2 fdd4 	bl	8000a0c <__aeabi_dcmpun>
 800de64:	b120      	cbz	r0, 800de70 <_scanf_float+0x3fc>
 800de66:	4807      	ldr	r0, [pc, #28]	@ (800de84 <_scanf_float+0x410>)
 800de68:	f000 fa40 	bl	800e2ec <nanf>
 800de6c:	6028      	str	r0, [r5, #0]
 800de6e:	e7df      	b.n	800de30 <_scanf_float+0x3bc>
 800de70:	4630      	mov	r0, r6
 800de72:	4639      	mov	r1, r7
 800de74:	f7f2 fe28 	bl	8000ac8 <__aeabi_d2f>
 800de78:	e7f8      	b.n	800de6c <_scanf_float+0x3f8>
 800de7a:	2700      	movs	r7, #0
 800de7c:	e633      	b.n	800dae6 <_scanf_float+0x72>
 800de7e:	bf00      	nop
 800de80:	080128e8 	.word	0x080128e8
 800de84:	08012a44 	.word	0x08012a44

0800de88 <std>:
 800de88:	2300      	movs	r3, #0
 800de8a:	b510      	push	{r4, lr}
 800de8c:	4604      	mov	r4, r0
 800de8e:	e9c0 3300 	strd	r3, r3, [r0]
 800de92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de96:	6083      	str	r3, [r0, #8]
 800de98:	8181      	strh	r1, [r0, #12]
 800de9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800de9c:	81c2      	strh	r2, [r0, #14]
 800de9e:	6183      	str	r3, [r0, #24]
 800dea0:	4619      	mov	r1, r3
 800dea2:	2208      	movs	r2, #8
 800dea4:	305c      	adds	r0, #92	@ 0x5c
 800dea6:	f000 f981 	bl	800e1ac <memset>
 800deaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dee0 <std+0x58>)
 800deac:	6224      	str	r4, [r4, #32]
 800deae:	6263      	str	r3, [r4, #36]	@ 0x24
 800deb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <std+0x5c>)
 800deb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800deb4:	4b0c      	ldr	r3, [pc, #48]	@ (800dee8 <std+0x60>)
 800deb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800deb8:	4b0c      	ldr	r3, [pc, #48]	@ (800deec <std+0x64>)
 800deba:	6323      	str	r3, [r4, #48]	@ 0x30
 800debc:	4b0c      	ldr	r3, [pc, #48]	@ (800def0 <std+0x68>)
 800debe:	429c      	cmp	r4, r3
 800dec0:	d006      	beq.n	800ded0 <std+0x48>
 800dec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dec6:	4294      	cmp	r4, r2
 800dec8:	d002      	beq.n	800ded0 <std+0x48>
 800deca:	33d0      	adds	r3, #208	@ 0xd0
 800decc:	429c      	cmp	r4, r3
 800dece:	d105      	bne.n	800dedc <std+0x54>
 800ded0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ded4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ded8:	f000 b9f6 	b.w	800e2c8 <__retarget_lock_init_recursive>
 800dedc:	bd10      	pop	{r4, pc}
 800dede:	bf00      	nop
 800dee0:	0800e0a9 	.word	0x0800e0a9
 800dee4:	0800e0cf 	.word	0x0800e0cf
 800dee8:	0800e107 	.word	0x0800e107
 800deec:	0800e12b 	.word	0x0800e12b
 800def0:	20001974 	.word	0x20001974

0800def4 <stdio_exit_handler>:
 800def4:	4a02      	ldr	r2, [pc, #8]	@ (800df00 <stdio_exit_handler+0xc>)
 800def6:	4903      	ldr	r1, [pc, #12]	@ (800df04 <stdio_exit_handler+0x10>)
 800def8:	4803      	ldr	r0, [pc, #12]	@ (800df08 <stdio_exit_handler+0x14>)
 800defa:	f000 b869 	b.w	800dfd0 <_fwalk_sglue>
 800defe:	bf00      	nop
 800df00:	20000194 	.word	0x20000194
 800df04:	080111c9 	.word	0x080111c9
 800df08:	200001a4 	.word	0x200001a4

0800df0c <cleanup_stdio>:
 800df0c:	6841      	ldr	r1, [r0, #4]
 800df0e:	4b0c      	ldr	r3, [pc, #48]	@ (800df40 <cleanup_stdio+0x34>)
 800df10:	b510      	push	{r4, lr}
 800df12:	4299      	cmp	r1, r3
 800df14:	4604      	mov	r4, r0
 800df16:	d001      	beq.n	800df1c <cleanup_stdio+0x10>
 800df18:	f003 f956 	bl	80111c8 <_fflush_r>
 800df1c:	68a1      	ldr	r1, [r4, #8]
 800df1e:	4b09      	ldr	r3, [pc, #36]	@ (800df44 <cleanup_stdio+0x38>)
 800df20:	4299      	cmp	r1, r3
 800df22:	d002      	beq.n	800df2a <cleanup_stdio+0x1e>
 800df24:	4620      	mov	r0, r4
 800df26:	f003 f94f 	bl	80111c8 <_fflush_r>
 800df2a:	68e1      	ldr	r1, [r4, #12]
 800df2c:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <cleanup_stdio+0x3c>)
 800df2e:	4299      	cmp	r1, r3
 800df30:	d004      	beq.n	800df3c <cleanup_stdio+0x30>
 800df32:	4620      	mov	r0, r4
 800df34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df38:	f003 b946 	b.w	80111c8 <_fflush_r>
 800df3c:	bd10      	pop	{r4, pc}
 800df3e:	bf00      	nop
 800df40:	20001974 	.word	0x20001974
 800df44:	200019dc 	.word	0x200019dc
 800df48:	20001a44 	.word	0x20001a44

0800df4c <global_stdio_init.part.0>:
 800df4c:	b510      	push	{r4, lr}
 800df4e:	4b0b      	ldr	r3, [pc, #44]	@ (800df7c <global_stdio_init.part.0+0x30>)
 800df50:	4c0b      	ldr	r4, [pc, #44]	@ (800df80 <global_stdio_init.part.0+0x34>)
 800df52:	4a0c      	ldr	r2, [pc, #48]	@ (800df84 <global_stdio_init.part.0+0x38>)
 800df54:	4620      	mov	r0, r4
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	2104      	movs	r1, #4
 800df5a:	2200      	movs	r2, #0
 800df5c:	f7ff ff94 	bl	800de88 <std>
 800df60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df64:	2201      	movs	r2, #1
 800df66:	2109      	movs	r1, #9
 800df68:	f7ff ff8e 	bl	800de88 <std>
 800df6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df70:	2202      	movs	r2, #2
 800df72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df76:	2112      	movs	r1, #18
 800df78:	f7ff bf86 	b.w	800de88 <std>
 800df7c:	20001aac 	.word	0x20001aac
 800df80:	20001974 	.word	0x20001974
 800df84:	0800def5 	.word	0x0800def5

0800df88 <__sfp_lock_acquire>:
 800df88:	4801      	ldr	r0, [pc, #4]	@ (800df90 <__sfp_lock_acquire+0x8>)
 800df8a:	f000 b99e 	b.w	800e2ca <__retarget_lock_acquire_recursive>
 800df8e:	bf00      	nop
 800df90:	20001ab5 	.word	0x20001ab5

0800df94 <__sfp_lock_release>:
 800df94:	4801      	ldr	r0, [pc, #4]	@ (800df9c <__sfp_lock_release+0x8>)
 800df96:	f000 b999 	b.w	800e2cc <__retarget_lock_release_recursive>
 800df9a:	bf00      	nop
 800df9c:	20001ab5 	.word	0x20001ab5

0800dfa0 <__sinit>:
 800dfa0:	b510      	push	{r4, lr}
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	f7ff fff0 	bl	800df88 <__sfp_lock_acquire>
 800dfa8:	6a23      	ldr	r3, [r4, #32]
 800dfaa:	b11b      	cbz	r3, 800dfb4 <__sinit+0x14>
 800dfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfb0:	f7ff bff0 	b.w	800df94 <__sfp_lock_release>
 800dfb4:	4b04      	ldr	r3, [pc, #16]	@ (800dfc8 <__sinit+0x28>)
 800dfb6:	6223      	str	r3, [r4, #32]
 800dfb8:	4b04      	ldr	r3, [pc, #16]	@ (800dfcc <__sinit+0x2c>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1f5      	bne.n	800dfac <__sinit+0xc>
 800dfc0:	f7ff ffc4 	bl	800df4c <global_stdio_init.part.0>
 800dfc4:	e7f2      	b.n	800dfac <__sinit+0xc>
 800dfc6:	bf00      	nop
 800dfc8:	0800df0d 	.word	0x0800df0d
 800dfcc:	20001aac 	.word	0x20001aac

0800dfd0 <_fwalk_sglue>:
 800dfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	4688      	mov	r8, r1
 800dfd8:	4614      	mov	r4, r2
 800dfda:	2600      	movs	r6, #0
 800dfdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfe0:	f1b9 0901 	subs.w	r9, r9, #1
 800dfe4:	d505      	bpl.n	800dff2 <_fwalk_sglue+0x22>
 800dfe6:	6824      	ldr	r4, [r4, #0]
 800dfe8:	2c00      	cmp	r4, #0
 800dfea:	d1f7      	bne.n	800dfdc <_fwalk_sglue+0xc>
 800dfec:	4630      	mov	r0, r6
 800dfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff2:	89ab      	ldrh	r3, [r5, #12]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d907      	bls.n	800e008 <_fwalk_sglue+0x38>
 800dff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dffc:	3301      	adds	r3, #1
 800dffe:	d003      	beq.n	800e008 <_fwalk_sglue+0x38>
 800e000:	4629      	mov	r1, r5
 800e002:	4638      	mov	r0, r7
 800e004:	47c0      	blx	r8
 800e006:	4306      	orrs	r6, r0
 800e008:	3568      	adds	r5, #104	@ 0x68
 800e00a:	e7e9      	b.n	800dfe0 <_fwalk_sglue+0x10>

0800e00c <siprintf>:
 800e00c:	b40e      	push	{r1, r2, r3}
 800e00e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e012:	b510      	push	{r4, lr}
 800e014:	2400      	movs	r4, #0
 800e016:	b09d      	sub	sp, #116	@ 0x74
 800e018:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e01a:	9002      	str	r0, [sp, #8]
 800e01c:	9006      	str	r0, [sp, #24]
 800e01e:	9107      	str	r1, [sp, #28]
 800e020:	9104      	str	r1, [sp, #16]
 800e022:	4809      	ldr	r0, [pc, #36]	@ (800e048 <siprintf+0x3c>)
 800e024:	4909      	ldr	r1, [pc, #36]	@ (800e04c <siprintf+0x40>)
 800e026:	f853 2b04 	ldr.w	r2, [r3], #4
 800e02a:	9105      	str	r1, [sp, #20]
 800e02c:	6800      	ldr	r0, [r0, #0]
 800e02e:	a902      	add	r1, sp, #8
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e034:	f002 fc32 	bl	801089c <_svfiprintf_r>
 800e038:	9b02      	ldr	r3, [sp, #8]
 800e03a:	701c      	strb	r4, [r3, #0]
 800e03c:	b01d      	add	sp, #116	@ 0x74
 800e03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e042:	b003      	add	sp, #12
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	200001a0 	.word	0x200001a0
 800e04c:	ffff0208 	.word	0xffff0208

0800e050 <siscanf>:
 800e050:	b40e      	push	{r1, r2, r3}
 800e052:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e056:	b570      	push	{r4, r5, r6, lr}
 800e058:	2500      	movs	r5, #0
 800e05a:	b09d      	sub	sp, #116	@ 0x74
 800e05c:	ac21      	add	r4, sp, #132	@ 0x84
 800e05e:	f854 6b04 	ldr.w	r6, [r4], #4
 800e062:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e066:	951b      	str	r5, [sp, #108]	@ 0x6c
 800e068:	9002      	str	r0, [sp, #8]
 800e06a:	9006      	str	r0, [sp, #24]
 800e06c:	f7f2 f870 	bl	8000150 <strlen>
 800e070:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a0 <siscanf+0x50>)
 800e072:	9003      	str	r0, [sp, #12]
 800e074:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e07a:	9007      	str	r0, [sp, #28]
 800e07c:	4809      	ldr	r0, [pc, #36]	@ (800e0a4 <siscanf+0x54>)
 800e07e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e082:	4632      	mov	r2, r6
 800e084:	4623      	mov	r3, r4
 800e086:	a902      	add	r1, sp, #8
 800e088:	6800      	ldr	r0, [r0, #0]
 800e08a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e08c:	9514      	str	r5, [sp, #80]	@ 0x50
 800e08e:	9401      	str	r4, [sp, #4]
 800e090:	f002 fd5a 	bl	8010b48 <__ssvfiscanf_r>
 800e094:	b01d      	add	sp, #116	@ 0x74
 800e096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e09a:	b003      	add	sp, #12
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop
 800e0a0:	0800e0cb 	.word	0x0800e0cb
 800e0a4:	200001a0 	.word	0x200001a0

0800e0a8 <__sread>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b0:	f000 f8bc 	bl	800e22c <_read_r>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	bfab      	itete	ge
 800e0b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e0bc:	181b      	addge	r3, r3, r0
 800e0be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0c2:	bfac      	ite	ge
 800e0c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0c6:	81a3      	strhlt	r3, [r4, #12]
 800e0c8:	bd10      	pop	{r4, pc}

0800e0ca <__seofread>:
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	4770      	bx	lr

0800e0ce <__swrite>:
 800e0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d2:	461f      	mov	r7, r3
 800e0d4:	898b      	ldrh	r3, [r1, #12]
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	05db      	lsls	r3, r3, #23
 800e0da:	460c      	mov	r4, r1
 800e0dc:	4616      	mov	r6, r2
 800e0de:	d505      	bpl.n	800e0ec <__swrite+0x1e>
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e8:	f000 f88e 	bl	800e208 <_lseek_r>
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	4632      	mov	r2, r6
 800e0f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0f4:	81a3      	strh	r3, [r4, #12]
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e102:	f000 b8a5 	b.w	800e250 <_write_r>

0800e106 <__sseek>:
 800e106:	b510      	push	{r4, lr}
 800e108:	460c      	mov	r4, r1
 800e10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e10e:	f000 f87b 	bl	800e208 <_lseek_r>
 800e112:	1c43      	adds	r3, r0, #1
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	bf15      	itete	ne
 800e118:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e11a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e11e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e122:	81a3      	strheq	r3, [r4, #12]
 800e124:	bf18      	it	ne
 800e126:	81a3      	strhne	r3, [r4, #12]
 800e128:	bd10      	pop	{r4, pc}

0800e12a <__sclose>:
 800e12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12e:	f000 b85b 	b.w	800e1e8 <_close_r>

0800e132 <_vsniprintf_r>:
 800e132:	b530      	push	{r4, r5, lr}
 800e134:	4614      	mov	r4, r2
 800e136:	2c00      	cmp	r4, #0
 800e138:	4605      	mov	r5, r0
 800e13a:	461a      	mov	r2, r3
 800e13c:	b09b      	sub	sp, #108	@ 0x6c
 800e13e:	da05      	bge.n	800e14c <_vsniprintf_r+0x1a>
 800e140:	238b      	movs	r3, #139	@ 0x8b
 800e142:	6003      	str	r3, [r0, #0]
 800e144:	f04f 30ff 	mov.w	r0, #4294967295
 800e148:	b01b      	add	sp, #108	@ 0x6c
 800e14a:	bd30      	pop	{r4, r5, pc}
 800e14c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e150:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e154:	f04f 0300 	mov.w	r3, #0
 800e158:	9319      	str	r3, [sp, #100]	@ 0x64
 800e15a:	bf0c      	ite	eq
 800e15c:	4623      	moveq	r3, r4
 800e15e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e162:	9302      	str	r3, [sp, #8]
 800e164:	9305      	str	r3, [sp, #20]
 800e166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e16a:	9100      	str	r1, [sp, #0]
 800e16c:	9104      	str	r1, [sp, #16]
 800e16e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e172:	4669      	mov	r1, sp
 800e174:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e176:	f002 fb91 	bl	801089c <_svfiprintf_r>
 800e17a:	1c43      	adds	r3, r0, #1
 800e17c:	bfbc      	itt	lt
 800e17e:	238b      	movlt	r3, #139	@ 0x8b
 800e180:	602b      	strlt	r3, [r5, #0]
 800e182:	2c00      	cmp	r4, #0
 800e184:	d0e0      	beq.n	800e148 <_vsniprintf_r+0x16>
 800e186:	2200      	movs	r2, #0
 800e188:	9b00      	ldr	r3, [sp, #0]
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	e7dc      	b.n	800e148 <_vsniprintf_r+0x16>
	...

0800e190 <vsniprintf>:
 800e190:	b507      	push	{r0, r1, r2, lr}
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	4613      	mov	r3, r2
 800e196:	460a      	mov	r2, r1
 800e198:	4601      	mov	r1, r0
 800e19a:	4803      	ldr	r0, [pc, #12]	@ (800e1a8 <vsniprintf+0x18>)
 800e19c:	6800      	ldr	r0, [r0, #0]
 800e19e:	f7ff ffc8 	bl	800e132 <_vsniprintf_r>
 800e1a2:	b003      	add	sp, #12
 800e1a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1a8:	200001a0 	.word	0x200001a0

0800e1ac <memset>:
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	4402      	add	r2, r0
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d100      	bne.n	800e1b6 <memset+0xa>
 800e1b4:	4770      	bx	lr
 800e1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ba:	e7f9      	b.n	800e1b0 <memset+0x4>

0800e1bc <strncmp>:
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	b16a      	cbz	r2, 800e1dc <strncmp+0x20>
 800e1c0:	3901      	subs	r1, #1
 800e1c2:	1884      	adds	r4, r0, r2
 800e1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d103      	bne.n	800e1d8 <strncmp+0x1c>
 800e1d0:	42a0      	cmp	r0, r4
 800e1d2:	d001      	beq.n	800e1d8 <strncmp+0x1c>
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	d1f5      	bne.n	800e1c4 <strncmp+0x8>
 800e1d8:	1ad0      	subs	r0, r2, r3
 800e1da:	bd10      	pop	{r4, pc}
 800e1dc:	4610      	mov	r0, r2
 800e1de:	e7fc      	b.n	800e1da <strncmp+0x1e>

0800e1e0 <_localeconv_r>:
 800e1e0:	4800      	ldr	r0, [pc, #0]	@ (800e1e4 <_localeconv_r+0x4>)
 800e1e2:	4770      	bx	lr
 800e1e4:	200002e0 	.word	0x200002e0

0800e1e8 <_close_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4d05      	ldr	r5, [pc, #20]	@ (800e204 <_close_r+0x1c>)
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	602b      	str	r3, [r5, #0]
 800e1f4:	f7f5 fad5 	bl	80037a2 <_close>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	d102      	bne.n	800e202 <_close_r+0x1a>
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	b103      	cbz	r3, 800e202 <_close_r+0x1a>
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	bd38      	pop	{r3, r4, r5, pc}
 800e204:	20001ab0 	.word	0x20001ab0

0800e208 <_lseek_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4604      	mov	r4, r0
 800e20c:	4608      	mov	r0, r1
 800e20e:	4611      	mov	r1, r2
 800e210:	2200      	movs	r2, #0
 800e212:	4d05      	ldr	r5, [pc, #20]	@ (800e228 <_lseek_r+0x20>)
 800e214:	602a      	str	r2, [r5, #0]
 800e216:	461a      	mov	r2, r3
 800e218:	f7f5 fae7 	bl	80037ea <_lseek>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d102      	bne.n	800e226 <_lseek_r+0x1e>
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	b103      	cbz	r3, 800e226 <_lseek_r+0x1e>
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	20001ab0 	.word	0x20001ab0

0800e22c <_read_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4604      	mov	r4, r0
 800e230:	4608      	mov	r0, r1
 800e232:	4611      	mov	r1, r2
 800e234:	2200      	movs	r2, #0
 800e236:	4d05      	ldr	r5, [pc, #20]	@ (800e24c <_read_r+0x20>)
 800e238:	602a      	str	r2, [r5, #0]
 800e23a:	461a      	mov	r2, r3
 800e23c:	f7f5 fa78 	bl	8003730 <_read>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_read_r+0x1e>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_read_r+0x1e>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	20001ab0 	.word	0x20001ab0

0800e250 <_write_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4604      	mov	r4, r0
 800e254:	4608      	mov	r0, r1
 800e256:	4611      	mov	r1, r2
 800e258:	2200      	movs	r2, #0
 800e25a:	4d05      	ldr	r5, [pc, #20]	@ (800e270 <_write_r+0x20>)
 800e25c:	602a      	str	r2, [r5, #0]
 800e25e:	461a      	mov	r2, r3
 800e260:	f7f5 fa83 	bl	800376a <_write>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	d102      	bne.n	800e26e <_write_r+0x1e>
 800e268:	682b      	ldr	r3, [r5, #0]
 800e26a:	b103      	cbz	r3, 800e26e <_write_r+0x1e>
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	20001ab0 	.word	0x20001ab0

0800e274 <__errno>:
 800e274:	4b01      	ldr	r3, [pc, #4]	@ (800e27c <__errno+0x8>)
 800e276:	6818      	ldr	r0, [r3, #0]
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	200001a0 	.word	0x200001a0

0800e280 <__libc_init_array>:
 800e280:	b570      	push	{r4, r5, r6, lr}
 800e282:	2600      	movs	r6, #0
 800e284:	4d0c      	ldr	r5, [pc, #48]	@ (800e2b8 <__libc_init_array+0x38>)
 800e286:	4c0d      	ldr	r4, [pc, #52]	@ (800e2bc <__libc_init_array+0x3c>)
 800e288:	1b64      	subs	r4, r4, r5
 800e28a:	10a4      	asrs	r4, r4, #2
 800e28c:	42a6      	cmp	r6, r4
 800e28e:	d109      	bne.n	800e2a4 <__libc_init_array+0x24>
 800e290:	f003 ff58 	bl	8012144 <_init>
 800e294:	2600      	movs	r6, #0
 800e296:	4d0a      	ldr	r5, [pc, #40]	@ (800e2c0 <__libc_init_array+0x40>)
 800e298:	4c0a      	ldr	r4, [pc, #40]	@ (800e2c4 <__libc_init_array+0x44>)
 800e29a:	1b64      	subs	r4, r4, r5
 800e29c:	10a4      	asrs	r4, r4, #2
 800e29e:	42a6      	cmp	r6, r4
 800e2a0:	d105      	bne.n	800e2ae <__libc_init_array+0x2e>
 800e2a2:	bd70      	pop	{r4, r5, r6, pc}
 800e2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2a8:	4798      	blx	r3
 800e2aa:	3601      	adds	r6, #1
 800e2ac:	e7ee      	b.n	800e28c <__libc_init_array+0xc>
 800e2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2b2:	4798      	blx	r3
 800e2b4:	3601      	adds	r6, #1
 800e2b6:	e7f2      	b.n	800e29e <__libc_init_array+0x1e>
 800e2b8:	08012d04 	.word	0x08012d04
 800e2bc:	08012d04 	.word	0x08012d04
 800e2c0:	08012d04 	.word	0x08012d04
 800e2c4:	08012d08 	.word	0x08012d08

0800e2c8 <__retarget_lock_init_recursive>:
 800e2c8:	4770      	bx	lr

0800e2ca <__retarget_lock_acquire_recursive>:
 800e2ca:	4770      	bx	lr

0800e2cc <__retarget_lock_release_recursive>:
 800e2cc:	4770      	bx	lr

0800e2ce <memchr>:
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	b2c9      	uxtb	r1, r1
 800e2d4:	4402      	add	r2, r0
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	4618      	mov	r0, r3
 800e2da:	d101      	bne.n	800e2e0 <memchr+0x12>
 800e2dc:	2000      	movs	r0, #0
 800e2de:	e003      	b.n	800e2e8 <memchr+0x1a>
 800e2e0:	7804      	ldrb	r4, [r0, #0]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	428c      	cmp	r4, r1
 800e2e6:	d1f6      	bne.n	800e2d6 <memchr+0x8>
 800e2e8:	bd10      	pop	{r4, pc}
	...

0800e2ec <nanf>:
 800e2ec:	4800      	ldr	r0, [pc, #0]	@ (800e2f0 <nanf+0x4>)
 800e2ee:	4770      	bx	lr
 800e2f0:	7fc00000 	.word	0x7fc00000

0800e2f4 <quorem>:
 800e2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f8:	6903      	ldr	r3, [r0, #16]
 800e2fa:	690c      	ldr	r4, [r1, #16]
 800e2fc:	4607      	mov	r7, r0
 800e2fe:	42a3      	cmp	r3, r4
 800e300:	db7e      	blt.n	800e400 <quorem+0x10c>
 800e302:	3c01      	subs	r4, #1
 800e304:	00a3      	lsls	r3, r4, #2
 800e306:	f100 0514 	add.w	r5, r0, #20
 800e30a:	f101 0814 	add.w	r8, r1, #20
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e314:	9301      	str	r3, [sp, #4]
 800e316:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e31a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e31e:	3301      	adds	r3, #1
 800e320:	429a      	cmp	r2, r3
 800e322:	fbb2 f6f3 	udiv	r6, r2, r3
 800e326:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e32a:	d32e      	bcc.n	800e38a <quorem+0x96>
 800e32c:	f04f 0a00 	mov.w	sl, #0
 800e330:	46c4      	mov	ip, r8
 800e332:	46ae      	mov	lr, r5
 800e334:	46d3      	mov	fp, sl
 800e336:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e33a:	b298      	uxth	r0, r3
 800e33c:	fb06 a000 	mla	r0, r6, r0, sl
 800e340:	0c1b      	lsrs	r3, r3, #16
 800e342:	0c02      	lsrs	r2, r0, #16
 800e344:	fb06 2303 	mla	r3, r6, r3, r2
 800e348:	f8de 2000 	ldr.w	r2, [lr]
 800e34c:	b280      	uxth	r0, r0
 800e34e:	b292      	uxth	r2, r2
 800e350:	1a12      	subs	r2, r2, r0
 800e352:	445a      	add	r2, fp
 800e354:	f8de 0000 	ldr.w	r0, [lr]
 800e358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e362:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e366:	b292      	uxth	r2, r2
 800e368:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e36c:	45e1      	cmp	r9, ip
 800e36e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e372:	f84e 2b04 	str.w	r2, [lr], #4
 800e376:	d2de      	bcs.n	800e336 <quorem+0x42>
 800e378:	9b00      	ldr	r3, [sp, #0]
 800e37a:	58eb      	ldr	r3, [r5, r3]
 800e37c:	b92b      	cbnz	r3, 800e38a <quorem+0x96>
 800e37e:	9b01      	ldr	r3, [sp, #4]
 800e380:	3b04      	subs	r3, #4
 800e382:	429d      	cmp	r5, r3
 800e384:	461a      	mov	r2, r3
 800e386:	d32f      	bcc.n	800e3e8 <quorem+0xf4>
 800e388:	613c      	str	r4, [r7, #16]
 800e38a:	4638      	mov	r0, r7
 800e38c:	f001 f9ca 	bl	800f724 <__mcmp>
 800e390:	2800      	cmp	r0, #0
 800e392:	db25      	blt.n	800e3e0 <quorem+0xec>
 800e394:	4629      	mov	r1, r5
 800e396:	2000      	movs	r0, #0
 800e398:	f858 2b04 	ldr.w	r2, [r8], #4
 800e39c:	f8d1 c000 	ldr.w	ip, [r1]
 800e3a0:	fa1f fe82 	uxth.w	lr, r2
 800e3a4:	fa1f f38c 	uxth.w	r3, ip
 800e3a8:	eba3 030e 	sub.w	r3, r3, lr
 800e3ac:	4403      	add	r3, r0
 800e3ae:	0c12      	lsrs	r2, r2, #16
 800e3b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e3b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3be:	45c1      	cmp	r9, r8
 800e3c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e3c4:	f841 3b04 	str.w	r3, [r1], #4
 800e3c8:	d2e6      	bcs.n	800e398 <quorem+0xa4>
 800e3ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3d2:	b922      	cbnz	r2, 800e3de <quorem+0xea>
 800e3d4:	3b04      	subs	r3, #4
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	461a      	mov	r2, r3
 800e3da:	d30b      	bcc.n	800e3f4 <quorem+0x100>
 800e3dc:	613c      	str	r4, [r7, #16]
 800e3de:	3601      	adds	r6, #1
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	b003      	add	sp, #12
 800e3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e8:	6812      	ldr	r2, [r2, #0]
 800e3ea:	3b04      	subs	r3, #4
 800e3ec:	2a00      	cmp	r2, #0
 800e3ee:	d1cb      	bne.n	800e388 <quorem+0x94>
 800e3f0:	3c01      	subs	r4, #1
 800e3f2:	e7c6      	b.n	800e382 <quorem+0x8e>
 800e3f4:	6812      	ldr	r2, [r2, #0]
 800e3f6:	3b04      	subs	r3, #4
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	d1ef      	bne.n	800e3dc <quorem+0xe8>
 800e3fc:	3c01      	subs	r4, #1
 800e3fe:	e7ea      	b.n	800e3d6 <quorem+0xe2>
 800e400:	2000      	movs	r0, #0
 800e402:	e7ee      	b.n	800e3e2 <quorem+0xee>
 800e404:	0000      	movs	r0, r0
	...

0800e408 <_dtoa_r>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	4614      	mov	r4, r2
 800e40e:	461d      	mov	r5, r3
 800e410:	69c7      	ldr	r7, [r0, #28]
 800e412:	b097      	sub	sp, #92	@ 0x5c
 800e414:	4681      	mov	r9, r0
 800e416:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e41a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e41c:	b97f      	cbnz	r7, 800e43e <_dtoa_r+0x36>
 800e41e:	2010      	movs	r0, #16
 800e420:	f000 fe0e 	bl	800f040 <malloc>
 800e424:	4602      	mov	r2, r0
 800e426:	f8c9 001c 	str.w	r0, [r9, #28]
 800e42a:	b920      	cbnz	r0, 800e436 <_dtoa_r+0x2e>
 800e42c:	21ef      	movs	r1, #239	@ 0xef
 800e42e:	4bac      	ldr	r3, [pc, #688]	@ (800e6e0 <_dtoa_r+0x2d8>)
 800e430:	48ac      	ldr	r0, [pc, #688]	@ (800e6e4 <_dtoa_r+0x2dc>)
 800e432:	f002 ffa1 	bl	8011378 <__assert_func>
 800e436:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e43a:	6007      	str	r7, [r0, #0]
 800e43c:	60c7      	str	r7, [r0, #12]
 800e43e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e442:	6819      	ldr	r1, [r3, #0]
 800e444:	b159      	cbz	r1, 800e45e <_dtoa_r+0x56>
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	2301      	movs	r3, #1
 800e44a:	4093      	lsls	r3, r2
 800e44c:	604a      	str	r2, [r1, #4]
 800e44e:	608b      	str	r3, [r1, #8]
 800e450:	4648      	mov	r0, r9
 800e452:	f000 feeb 	bl	800f22c <_Bfree>
 800e456:	2200      	movs	r2, #0
 800e458:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	1e2b      	subs	r3, r5, #0
 800e460:	bfaf      	iteee	ge
 800e462:	2300      	movge	r3, #0
 800e464:	2201      	movlt	r2, #1
 800e466:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e46a:	9307      	strlt	r3, [sp, #28]
 800e46c:	bfa8      	it	ge
 800e46e:	6033      	strge	r3, [r6, #0]
 800e470:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e474:	4b9c      	ldr	r3, [pc, #624]	@ (800e6e8 <_dtoa_r+0x2e0>)
 800e476:	bfb8      	it	lt
 800e478:	6032      	strlt	r2, [r6, #0]
 800e47a:	ea33 0308 	bics.w	r3, r3, r8
 800e47e:	d112      	bne.n	800e4a6 <_dtoa_r+0x9e>
 800e480:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e484:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e48c:	4323      	orrs	r3, r4
 800e48e:	f000 855e 	beq.w	800ef4e <_dtoa_r+0xb46>
 800e492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e494:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e6ec <_dtoa_r+0x2e4>
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 8560 	beq.w	800ef5e <_dtoa_r+0xb56>
 800e49e:	f10a 0303 	add.w	r3, sl, #3
 800e4a2:	f000 bd5a 	b.w	800ef5a <_dtoa_r+0xb52>
 800e4a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e4ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	f7f2 fa77 	bl	80009a8 <__aeabi_dcmpeq>
 800e4ba:	4607      	mov	r7, r0
 800e4bc:	b158      	cbz	r0, 800e4d6 <_dtoa_r+0xce>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e4c6:	b113      	cbz	r3, 800e4ce <_dtoa_r+0xc6>
 800e4c8:	4b89      	ldr	r3, [pc, #548]	@ (800e6f0 <_dtoa_r+0x2e8>)
 800e4ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e4cc:	6013      	str	r3, [r2, #0]
 800e4ce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e6f4 <_dtoa_r+0x2ec>
 800e4d2:	f000 bd44 	b.w	800ef5e <_dtoa_r+0xb56>
 800e4d6:	ab14      	add	r3, sp, #80	@ 0x50
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	ab15      	add	r3, sp, #84	@ 0x54
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	4648      	mov	r0, r9
 800e4e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e4e4:	f001 fa36 	bl	800f954 <__d2b>
 800e4e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e4ec:	9003      	str	r0, [sp, #12]
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	d078      	beq.n	800e5e4 <_dtoa_r+0x1dc>
 800e4f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e500:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e504:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e508:	9712      	str	r7, [sp, #72]	@ 0x48
 800e50a:	4619      	mov	r1, r3
 800e50c:	2200      	movs	r2, #0
 800e50e:	4b7a      	ldr	r3, [pc, #488]	@ (800e6f8 <_dtoa_r+0x2f0>)
 800e510:	f7f1 fe2a 	bl	8000168 <__aeabi_dsub>
 800e514:	a36c      	add	r3, pc, #432	@ (adr r3, 800e6c8 <_dtoa_r+0x2c0>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	f7f1 ffdd 	bl	80004d8 <__aeabi_dmul>
 800e51e:	a36c      	add	r3, pc, #432	@ (adr r3, 800e6d0 <_dtoa_r+0x2c8>)
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	f7f1 fe22 	bl	800016c <__adddf3>
 800e528:	4604      	mov	r4, r0
 800e52a:	4630      	mov	r0, r6
 800e52c:	460d      	mov	r5, r1
 800e52e:	f7f1 ff69 	bl	8000404 <__aeabi_i2d>
 800e532:	a369      	add	r3, pc, #420	@ (adr r3, 800e6d8 <_dtoa_r+0x2d0>)
 800e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e538:	f7f1 ffce 	bl	80004d8 <__aeabi_dmul>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4620      	mov	r0, r4
 800e542:	4629      	mov	r1, r5
 800e544:	f7f1 fe12 	bl	800016c <__adddf3>
 800e548:	4604      	mov	r4, r0
 800e54a:	460d      	mov	r5, r1
 800e54c:	f7f2 fa74 	bl	8000a38 <__aeabi_d2iz>
 800e550:	2200      	movs	r2, #0
 800e552:	4607      	mov	r7, r0
 800e554:	2300      	movs	r3, #0
 800e556:	4620      	mov	r0, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	f7f2 fa2f 	bl	80009bc <__aeabi_dcmplt>
 800e55e:	b140      	cbz	r0, 800e572 <_dtoa_r+0x16a>
 800e560:	4638      	mov	r0, r7
 800e562:	f7f1 ff4f 	bl	8000404 <__aeabi_i2d>
 800e566:	4622      	mov	r2, r4
 800e568:	462b      	mov	r3, r5
 800e56a:	f7f2 fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800e56e:	b900      	cbnz	r0, 800e572 <_dtoa_r+0x16a>
 800e570:	3f01      	subs	r7, #1
 800e572:	2f16      	cmp	r7, #22
 800e574:	d854      	bhi.n	800e620 <_dtoa_r+0x218>
 800e576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e57a:	4b60      	ldr	r3, [pc, #384]	@ (800e6fc <_dtoa_r+0x2f4>)
 800e57c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	f7f2 fa1a 	bl	80009bc <__aeabi_dcmplt>
 800e588:	2800      	cmp	r0, #0
 800e58a:	d04b      	beq.n	800e624 <_dtoa_r+0x21c>
 800e58c:	2300      	movs	r3, #0
 800e58e:	3f01      	subs	r7, #1
 800e590:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e594:	1b9b      	subs	r3, r3, r6
 800e596:	1e5a      	subs	r2, r3, #1
 800e598:	bf49      	itett	mi
 800e59a:	f1c3 0301 	rsbmi	r3, r3, #1
 800e59e:	2300      	movpl	r3, #0
 800e5a0:	9304      	strmi	r3, [sp, #16]
 800e5a2:	2300      	movmi	r3, #0
 800e5a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5a6:	bf54      	ite	pl
 800e5a8:	9304      	strpl	r3, [sp, #16]
 800e5aa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e5ac:	2f00      	cmp	r7, #0
 800e5ae:	db3b      	blt.n	800e628 <_dtoa_r+0x220>
 800e5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b2:	970e      	str	r7, [sp, #56]	@ 0x38
 800e5b4:	443b      	add	r3, r7
 800e5b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e5be:	2b09      	cmp	r3, #9
 800e5c0:	d865      	bhi.n	800e68e <_dtoa_r+0x286>
 800e5c2:	2b05      	cmp	r3, #5
 800e5c4:	bfc4      	itt	gt
 800e5c6:	3b04      	subgt	r3, #4
 800e5c8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e5ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e5cc:	bfc8      	it	gt
 800e5ce:	2400      	movgt	r4, #0
 800e5d0:	f1a3 0302 	sub.w	r3, r3, #2
 800e5d4:	bfd8      	it	le
 800e5d6:	2401      	movle	r4, #1
 800e5d8:	2b03      	cmp	r3, #3
 800e5da:	d864      	bhi.n	800e6a6 <_dtoa_r+0x29e>
 800e5dc:	e8df f003 	tbb	[pc, r3]
 800e5e0:	2c385553 	.word	0x2c385553
 800e5e4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e5e8:	441e      	add	r6, r3
 800e5ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e5ee:	2b20      	cmp	r3, #32
 800e5f0:	bfc1      	itttt	gt
 800e5f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e5f6:	fa08 f803 	lslgt.w	r8, r8, r3
 800e5fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e5fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e602:	bfd6      	itet	le
 800e604:	f1c3 0320 	rsble	r3, r3, #32
 800e608:	ea48 0003 	orrgt.w	r0, r8, r3
 800e60c:	fa04 f003 	lslle.w	r0, r4, r3
 800e610:	f7f1 fee8 	bl	80003e4 <__aeabi_ui2d>
 800e614:	2201      	movs	r2, #1
 800e616:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e61a:	3e01      	subs	r6, #1
 800e61c:	9212      	str	r2, [sp, #72]	@ 0x48
 800e61e:	e774      	b.n	800e50a <_dtoa_r+0x102>
 800e620:	2301      	movs	r3, #1
 800e622:	e7b5      	b.n	800e590 <_dtoa_r+0x188>
 800e624:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e626:	e7b4      	b.n	800e592 <_dtoa_r+0x18a>
 800e628:	9b04      	ldr	r3, [sp, #16]
 800e62a:	1bdb      	subs	r3, r3, r7
 800e62c:	9304      	str	r3, [sp, #16]
 800e62e:	427b      	negs	r3, r7
 800e630:	930a      	str	r3, [sp, #40]	@ 0x28
 800e632:	2300      	movs	r3, #0
 800e634:	930e      	str	r3, [sp, #56]	@ 0x38
 800e636:	e7c1      	b.n	800e5bc <_dtoa_r+0x1b4>
 800e638:	2301      	movs	r3, #1
 800e63a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e63c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e63e:	eb07 0b03 	add.w	fp, r7, r3
 800e642:	f10b 0301 	add.w	r3, fp, #1
 800e646:	2b01      	cmp	r3, #1
 800e648:	9308      	str	r3, [sp, #32]
 800e64a:	bfb8      	it	lt
 800e64c:	2301      	movlt	r3, #1
 800e64e:	e006      	b.n	800e65e <_dtoa_r+0x256>
 800e650:	2301      	movs	r3, #1
 800e652:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e654:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e656:	2b00      	cmp	r3, #0
 800e658:	dd28      	ble.n	800e6ac <_dtoa_r+0x2a4>
 800e65a:	469b      	mov	fp, r3
 800e65c:	9308      	str	r3, [sp, #32]
 800e65e:	2100      	movs	r1, #0
 800e660:	2204      	movs	r2, #4
 800e662:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e666:	f102 0514 	add.w	r5, r2, #20
 800e66a:	429d      	cmp	r5, r3
 800e66c:	d926      	bls.n	800e6bc <_dtoa_r+0x2b4>
 800e66e:	6041      	str	r1, [r0, #4]
 800e670:	4648      	mov	r0, r9
 800e672:	f000 fd9b 	bl	800f1ac <_Balloc>
 800e676:	4682      	mov	sl, r0
 800e678:	2800      	cmp	r0, #0
 800e67a:	d143      	bne.n	800e704 <_dtoa_r+0x2fc>
 800e67c:	4602      	mov	r2, r0
 800e67e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e682:	4b1f      	ldr	r3, [pc, #124]	@ (800e700 <_dtoa_r+0x2f8>)
 800e684:	e6d4      	b.n	800e430 <_dtoa_r+0x28>
 800e686:	2300      	movs	r3, #0
 800e688:	e7e3      	b.n	800e652 <_dtoa_r+0x24a>
 800e68a:	2300      	movs	r3, #0
 800e68c:	e7d5      	b.n	800e63a <_dtoa_r+0x232>
 800e68e:	2401      	movs	r4, #1
 800e690:	2300      	movs	r3, #0
 800e692:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e694:	9320      	str	r3, [sp, #128]	@ 0x80
 800e696:	f04f 3bff 	mov.w	fp, #4294967295
 800e69a:	2200      	movs	r2, #0
 800e69c:	2312      	movs	r3, #18
 800e69e:	f8cd b020 	str.w	fp, [sp, #32]
 800e6a2:	9221      	str	r2, [sp, #132]	@ 0x84
 800e6a4:	e7db      	b.n	800e65e <_dtoa_r+0x256>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6aa:	e7f4      	b.n	800e696 <_dtoa_r+0x28e>
 800e6ac:	f04f 0b01 	mov.w	fp, #1
 800e6b0:	465b      	mov	r3, fp
 800e6b2:	f8cd b020 	str.w	fp, [sp, #32]
 800e6b6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800e6ba:	e7d0      	b.n	800e65e <_dtoa_r+0x256>
 800e6bc:	3101      	adds	r1, #1
 800e6be:	0052      	lsls	r2, r2, #1
 800e6c0:	e7d1      	b.n	800e666 <_dtoa_r+0x25e>
 800e6c2:	bf00      	nop
 800e6c4:	f3af 8000 	nop.w
 800e6c8:	636f4361 	.word	0x636f4361
 800e6cc:	3fd287a7 	.word	0x3fd287a7
 800e6d0:	8b60c8b3 	.word	0x8b60c8b3
 800e6d4:	3fc68a28 	.word	0x3fc68a28
 800e6d8:	509f79fb 	.word	0x509f79fb
 800e6dc:	3fd34413 	.word	0x3fd34413
 800e6e0:	080128fa 	.word	0x080128fa
 800e6e4:	08012911 	.word	0x08012911
 800e6e8:	7ff00000 	.word	0x7ff00000
 800e6ec:	080128f6 	.word	0x080128f6
 800e6f0:	080129fd 	.word	0x080129fd
 800e6f4:	080129fc 	.word	0x080129fc
 800e6f8:	3ff80000 	.word	0x3ff80000
 800e6fc:	08012ae0 	.word	0x08012ae0
 800e700:	08012969 	.word	0x08012969
 800e704:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e708:	6018      	str	r0, [r3, #0]
 800e70a:	9b08      	ldr	r3, [sp, #32]
 800e70c:	2b0e      	cmp	r3, #14
 800e70e:	f200 80a1 	bhi.w	800e854 <_dtoa_r+0x44c>
 800e712:	2c00      	cmp	r4, #0
 800e714:	f000 809e 	beq.w	800e854 <_dtoa_r+0x44c>
 800e718:	2f00      	cmp	r7, #0
 800e71a:	dd33      	ble.n	800e784 <_dtoa_r+0x37c>
 800e71c:	4b9c      	ldr	r3, [pc, #624]	@ (800e990 <_dtoa_r+0x588>)
 800e71e:	f007 020f 	and.w	r2, r7, #15
 800e722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e726:	05f8      	lsls	r0, r7, #23
 800e728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e72c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800e730:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e734:	d516      	bpl.n	800e764 <_dtoa_r+0x35c>
 800e736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e73a:	4b96      	ldr	r3, [pc, #600]	@ (800e994 <_dtoa_r+0x58c>)
 800e73c:	2603      	movs	r6, #3
 800e73e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e742:	f7f1 fff3 	bl	800072c <__aeabi_ddiv>
 800e746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e74a:	f004 040f 	and.w	r4, r4, #15
 800e74e:	4d91      	ldr	r5, [pc, #580]	@ (800e994 <_dtoa_r+0x58c>)
 800e750:	b954      	cbnz	r4, 800e768 <_dtoa_r+0x360>
 800e752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e75a:	f7f1 ffe7 	bl	800072c <__aeabi_ddiv>
 800e75e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e762:	e028      	b.n	800e7b6 <_dtoa_r+0x3ae>
 800e764:	2602      	movs	r6, #2
 800e766:	e7f2      	b.n	800e74e <_dtoa_r+0x346>
 800e768:	07e1      	lsls	r1, r4, #31
 800e76a:	d508      	bpl.n	800e77e <_dtoa_r+0x376>
 800e76c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e770:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e774:	f7f1 feb0 	bl	80004d8 <__aeabi_dmul>
 800e778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e77c:	3601      	adds	r6, #1
 800e77e:	1064      	asrs	r4, r4, #1
 800e780:	3508      	adds	r5, #8
 800e782:	e7e5      	b.n	800e750 <_dtoa_r+0x348>
 800e784:	f000 80af 	beq.w	800e8e6 <_dtoa_r+0x4de>
 800e788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e78c:	427c      	negs	r4, r7
 800e78e:	4b80      	ldr	r3, [pc, #512]	@ (800e990 <_dtoa_r+0x588>)
 800e790:	f004 020f 	and.w	r2, r4, #15
 800e794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	f7f1 fe9c 	bl	80004d8 <__aeabi_dmul>
 800e7a0:	2602      	movs	r6, #2
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e7a8:	4d7a      	ldr	r5, [pc, #488]	@ (800e994 <_dtoa_r+0x58c>)
 800e7aa:	1124      	asrs	r4, r4, #4
 800e7ac:	2c00      	cmp	r4, #0
 800e7ae:	f040 808f 	bne.w	800e8d0 <_dtoa_r+0x4c8>
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1d3      	bne.n	800e75e <_dtoa_r+0x356>
 800e7b6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e7ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 8094 	beq.w	800e8ea <_dtoa_r+0x4e2>
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4b73      	ldr	r3, [pc, #460]	@ (800e998 <_dtoa_r+0x590>)
 800e7ca:	f7f2 f8f7 	bl	80009bc <__aeabi_dcmplt>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	f000 808b 	beq.w	800e8ea <_dtoa_r+0x4e2>
 800e7d4:	9b08      	ldr	r3, [sp, #32]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f000 8087 	beq.w	800e8ea <_dtoa_r+0x4e2>
 800e7dc:	f1bb 0f00 	cmp.w	fp, #0
 800e7e0:	dd34      	ble.n	800e84c <_dtoa_r+0x444>
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	4b6c      	ldr	r3, [pc, #432]	@ (800e99c <_dtoa_r+0x594>)
 800e7ea:	f7f1 fe75 	bl	80004d8 <__aeabi_dmul>
 800e7ee:	465c      	mov	r4, fp
 800e7f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e7f4:	f107 38ff 	add.w	r8, r7, #4294967295
 800e7f8:	3601      	adds	r6, #1
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7f1 fe02 	bl	8000404 <__aeabi_i2d>
 800e800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e804:	f7f1 fe68 	bl	80004d8 <__aeabi_dmul>
 800e808:	2200      	movs	r2, #0
 800e80a:	4b65      	ldr	r3, [pc, #404]	@ (800e9a0 <_dtoa_r+0x598>)
 800e80c:	f7f1 fcae 	bl	800016c <__adddf3>
 800e810:	4605      	mov	r5, r0
 800e812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e816:	2c00      	cmp	r4, #0
 800e818:	d16a      	bne.n	800e8f0 <_dtoa_r+0x4e8>
 800e81a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e81e:	2200      	movs	r2, #0
 800e820:	4b60      	ldr	r3, [pc, #384]	@ (800e9a4 <_dtoa_r+0x59c>)
 800e822:	f7f1 fca1 	bl	8000168 <__aeabi_dsub>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e82e:	462a      	mov	r2, r5
 800e830:	4633      	mov	r3, r6
 800e832:	f7f2 f8e1 	bl	80009f8 <__aeabi_dcmpgt>
 800e836:	2800      	cmp	r0, #0
 800e838:	f040 8298 	bne.w	800ed6c <_dtoa_r+0x964>
 800e83c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e840:	462a      	mov	r2, r5
 800e842:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e846:	f7f2 f8b9 	bl	80009bc <__aeabi_dcmplt>
 800e84a:	bb38      	cbnz	r0, 800e89c <_dtoa_r+0x494>
 800e84c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e850:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e854:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e856:	2b00      	cmp	r3, #0
 800e858:	f2c0 8157 	blt.w	800eb0a <_dtoa_r+0x702>
 800e85c:	2f0e      	cmp	r7, #14
 800e85e:	f300 8154 	bgt.w	800eb0a <_dtoa_r+0x702>
 800e862:	4b4b      	ldr	r3, [pc, #300]	@ (800e990 <_dtoa_r+0x588>)
 800e864:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e868:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e86c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e870:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e872:	2b00      	cmp	r3, #0
 800e874:	f280 80e5 	bge.w	800ea42 <_dtoa_r+0x63a>
 800e878:	9b08      	ldr	r3, [sp, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f300 80e1 	bgt.w	800ea42 <_dtoa_r+0x63a>
 800e880:	d10c      	bne.n	800e89c <_dtoa_r+0x494>
 800e882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e886:	2200      	movs	r2, #0
 800e888:	4b46      	ldr	r3, [pc, #280]	@ (800e9a4 <_dtoa_r+0x59c>)
 800e88a:	f7f1 fe25 	bl	80004d8 <__aeabi_dmul>
 800e88e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e892:	f7f2 f8a7 	bl	80009e4 <__aeabi_dcmpge>
 800e896:	2800      	cmp	r0, #0
 800e898:	f000 8266 	beq.w	800ed68 <_dtoa_r+0x960>
 800e89c:	2400      	movs	r4, #0
 800e89e:	4625      	mov	r5, r4
 800e8a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e8a2:	4656      	mov	r6, sl
 800e8a4:	ea6f 0803 	mvn.w	r8, r3
 800e8a8:	2700      	movs	r7, #0
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4648      	mov	r0, r9
 800e8ae:	f000 fcbd 	bl	800f22c <_Bfree>
 800e8b2:	2d00      	cmp	r5, #0
 800e8b4:	f000 80bd 	beq.w	800ea32 <_dtoa_r+0x62a>
 800e8b8:	b12f      	cbz	r7, 800e8c6 <_dtoa_r+0x4be>
 800e8ba:	42af      	cmp	r7, r5
 800e8bc:	d003      	beq.n	800e8c6 <_dtoa_r+0x4be>
 800e8be:	4639      	mov	r1, r7
 800e8c0:	4648      	mov	r0, r9
 800e8c2:	f000 fcb3 	bl	800f22c <_Bfree>
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4648      	mov	r0, r9
 800e8ca:	f000 fcaf 	bl	800f22c <_Bfree>
 800e8ce:	e0b0      	b.n	800ea32 <_dtoa_r+0x62a>
 800e8d0:	07e2      	lsls	r2, r4, #31
 800e8d2:	d505      	bpl.n	800e8e0 <_dtoa_r+0x4d8>
 800e8d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8d8:	f7f1 fdfe 	bl	80004d8 <__aeabi_dmul>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	3601      	adds	r6, #1
 800e8e0:	1064      	asrs	r4, r4, #1
 800e8e2:	3508      	adds	r5, #8
 800e8e4:	e762      	b.n	800e7ac <_dtoa_r+0x3a4>
 800e8e6:	2602      	movs	r6, #2
 800e8e8:	e765      	b.n	800e7b6 <_dtoa_r+0x3ae>
 800e8ea:	46b8      	mov	r8, r7
 800e8ec:	9c08      	ldr	r4, [sp, #32]
 800e8ee:	e784      	b.n	800e7fa <_dtoa_r+0x3f2>
 800e8f0:	4b27      	ldr	r3, [pc, #156]	@ (800e990 <_dtoa_r+0x588>)
 800e8f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8fc:	4454      	add	r4, sl
 800e8fe:	2900      	cmp	r1, #0
 800e900:	d054      	beq.n	800e9ac <_dtoa_r+0x5a4>
 800e902:	2000      	movs	r0, #0
 800e904:	4928      	ldr	r1, [pc, #160]	@ (800e9a8 <_dtoa_r+0x5a0>)
 800e906:	f7f1 ff11 	bl	800072c <__aeabi_ddiv>
 800e90a:	4633      	mov	r3, r6
 800e90c:	462a      	mov	r2, r5
 800e90e:	f7f1 fc2b 	bl	8000168 <__aeabi_dsub>
 800e912:	4656      	mov	r6, sl
 800e914:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e91c:	f7f2 f88c 	bl	8000a38 <__aeabi_d2iz>
 800e920:	4605      	mov	r5, r0
 800e922:	f7f1 fd6f 	bl	8000404 <__aeabi_i2d>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e92e:	f7f1 fc1b 	bl	8000168 <__aeabi_dsub>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	3530      	adds	r5, #48	@ 0x30
 800e938:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e93c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e940:	f806 5b01 	strb.w	r5, [r6], #1
 800e944:	f7f2 f83a 	bl	80009bc <__aeabi_dcmplt>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d172      	bne.n	800ea32 <_dtoa_r+0x62a>
 800e94c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e950:	2000      	movs	r0, #0
 800e952:	4911      	ldr	r1, [pc, #68]	@ (800e998 <_dtoa_r+0x590>)
 800e954:	f7f1 fc08 	bl	8000168 <__aeabi_dsub>
 800e958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e95c:	f7f2 f82e 	bl	80009bc <__aeabi_dcmplt>
 800e960:	2800      	cmp	r0, #0
 800e962:	f040 80b4 	bne.w	800eace <_dtoa_r+0x6c6>
 800e966:	42a6      	cmp	r6, r4
 800e968:	f43f af70 	beq.w	800e84c <_dtoa_r+0x444>
 800e96c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e970:	2200      	movs	r2, #0
 800e972:	4b0a      	ldr	r3, [pc, #40]	@ (800e99c <_dtoa_r+0x594>)
 800e974:	f7f1 fdb0 	bl	80004d8 <__aeabi_dmul>
 800e978:	2200      	movs	r2, #0
 800e97a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e97e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e982:	4b06      	ldr	r3, [pc, #24]	@ (800e99c <_dtoa_r+0x594>)
 800e984:	f7f1 fda8 	bl	80004d8 <__aeabi_dmul>
 800e988:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e98c:	e7c4      	b.n	800e918 <_dtoa_r+0x510>
 800e98e:	bf00      	nop
 800e990:	08012ae0 	.word	0x08012ae0
 800e994:	08012ab8 	.word	0x08012ab8
 800e998:	3ff00000 	.word	0x3ff00000
 800e99c:	40240000 	.word	0x40240000
 800e9a0:	401c0000 	.word	0x401c0000
 800e9a4:	40140000 	.word	0x40140000
 800e9a8:	3fe00000 	.word	0x3fe00000
 800e9ac:	4631      	mov	r1, r6
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f7f1 fd92 	bl	80004d8 <__aeabi_dmul>
 800e9b4:	4656      	mov	r6, sl
 800e9b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e9bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9c0:	f7f2 f83a 	bl	8000a38 <__aeabi_d2iz>
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	f7f1 fd1d 	bl	8000404 <__aeabi_i2d>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9d2:	f7f1 fbc9 	bl	8000168 <__aeabi_dsub>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	3530      	adds	r5, #48	@ 0x30
 800e9dc:	f806 5b01 	strb.w	r5, [r6], #1
 800e9e0:	42a6      	cmp	r6, r4
 800e9e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9e6:	f04f 0200 	mov.w	r2, #0
 800e9ea:	d124      	bne.n	800ea36 <_dtoa_r+0x62e>
 800e9ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e9f0:	4bae      	ldr	r3, [pc, #696]	@ (800ecac <_dtoa_r+0x8a4>)
 800e9f2:	f7f1 fbbb 	bl	800016c <__adddf3>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9fe:	f7f1 fffb 	bl	80009f8 <__aeabi_dcmpgt>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d163      	bne.n	800eace <_dtoa_r+0x6c6>
 800ea06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	49a7      	ldr	r1, [pc, #668]	@ (800ecac <_dtoa_r+0x8a4>)
 800ea0e:	f7f1 fbab 	bl	8000168 <__aeabi_dsub>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea1a:	f7f1 ffcf 	bl	80009bc <__aeabi_dcmplt>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f43f af14 	beq.w	800e84c <_dtoa_r+0x444>
 800ea24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ea26:	1e73      	subs	r3, r6, #1
 800ea28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ea2e:	2b30      	cmp	r3, #48	@ 0x30
 800ea30:	d0f8      	beq.n	800ea24 <_dtoa_r+0x61c>
 800ea32:	4647      	mov	r7, r8
 800ea34:	e03b      	b.n	800eaae <_dtoa_r+0x6a6>
 800ea36:	4b9e      	ldr	r3, [pc, #632]	@ (800ecb0 <_dtoa_r+0x8a8>)
 800ea38:	f7f1 fd4e 	bl	80004d8 <__aeabi_dmul>
 800ea3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea40:	e7bc      	b.n	800e9bc <_dtoa_r+0x5b4>
 800ea42:	4656      	mov	r6, sl
 800ea44:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ea48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	4629      	mov	r1, r5
 800ea50:	f7f1 fe6c 	bl	800072c <__aeabi_ddiv>
 800ea54:	f7f1 fff0 	bl	8000a38 <__aeabi_d2iz>
 800ea58:	4680      	mov	r8, r0
 800ea5a:	f7f1 fcd3 	bl	8000404 <__aeabi_i2d>
 800ea5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea62:	f7f1 fd39 	bl	80004d8 <__aeabi_dmul>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	f7f1 fb7b 	bl	8000168 <__aeabi_dsub>
 800ea72:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea76:	9d08      	ldr	r5, [sp, #32]
 800ea78:	f806 4b01 	strb.w	r4, [r6], #1
 800ea7c:	eba6 040a 	sub.w	r4, r6, sl
 800ea80:	42a5      	cmp	r5, r4
 800ea82:	4602      	mov	r2, r0
 800ea84:	460b      	mov	r3, r1
 800ea86:	d133      	bne.n	800eaf0 <_dtoa_r+0x6e8>
 800ea88:	f7f1 fb70 	bl	800016c <__adddf3>
 800ea8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea90:	4604      	mov	r4, r0
 800ea92:	460d      	mov	r5, r1
 800ea94:	f7f1 ffb0 	bl	80009f8 <__aeabi_dcmpgt>
 800ea98:	b9c0      	cbnz	r0, 800eacc <_dtoa_r+0x6c4>
 800ea9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	f7f1 ff81 	bl	80009a8 <__aeabi_dcmpeq>
 800eaa6:	b110      	cbz	r0, 800eaae <_dtoa_r+0x6a6>
 800eaa8:	f018 0f01 	tst.w	r8, #1
 800eaac:	d10e      	bne.n	800eacc <_dtoa_r+0x6c4>
 800eaae:	4648      	mov	r0, r9
 800eab0:	9903      	ldr	r1, [sp, #12]
 800eab2:	f000 fbbb 	bl	800f22c <_Bfree>
 800eab6:	2300      	movs	r3, #0
 800eab8:	7033      	strb	r3, [r6, #0]
 800eaba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eabc:	3701      	adds	r7, #1
 800eabe:	601f      	str	r7, [r3, #0]
 800eac0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f000 824b 	beq.w	800ef5e <_dtoa_r+0xb56>
 800eac8:	601e      	str	r6, [r3, #0]
 800eaca:	e248      	b.n	800ef5e <_dtoa_r+0xb56>
 800eacc:	46b8      	mov	r8, r7
 800eace:	4633      	mov	r3, r6
 800ead0:	461e      	mov	r6, r3
 800ead2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ead6:	2a39      	cmp	r2, #57	@ 0x39
 800ead8:	d106      	bne.n	800eae8 <_dtoa_r+0x6e0>
 800eada:	459a      	cmp	sl, r3
 800eadc:	d1f8      	bne.n	800ead0 <_dtoa_r+0x6c8>
 800eade:	2230      	movs	r2, #48	@ 0x30
 800eae0:	f108 0801 	add.w	r8, r8, #1
 800eae4:	f88a 2000 	strb.w	r2, [sl]
 800eae8:	781a      	ldrb	r2, [r3, #0]
 800eaea:	3201      	adds	r2, #1
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	e7a0      	b.n	800ea32 <_dtoa_r+0x62a>
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	4b6f      	ldr	r3, [pc, #444]	@ (800ecb0 <_dtoa_r+0x8a8>)
 800eaf4:	f7f1 fcf0 	bl	80004d8 <__aeabi_dmul>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	2300      	movs	r3, #0
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	f7f1 ff52 	bl	80009a8 <__aeabi_dcmpeq>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d09f      	beq.n	800ea48 <_dtoa_r+0x640>
 800eb08:	e7d1      	b.n	800eaae <_dtoa_r+0x6a6>
 800eb0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb0c:	2a00      	cmp	r2, #0
 800eb0e:	f000 80ea 	beq.w	800ece6 <_dtoa_r+0x8de>
 800eb12:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eb14:	2a01      	cmp	r2, #1
 800eb16:	f300 80cd 	bgt.w	800ecb4 <_dtoa_r+0x8ac>
 800eb1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	f000 80c1 	beq.w	800eca4 <_dtoa_r+0x89c>
 800eb22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eb26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb28:	9e04      	ldr	r6, [sp, #16]
 800eb2a:	9a04      	ldr	r2, [sp, #16]
 800eb2c:	2101      	movs	r1, #1
 800eb2e:	441a      	add	r2, r3
 800eb30:	9204      	str	r2, [sp, #16]
 800eb32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb34:	4648      	mov	r0, r9
 800eb36:	441a      	add	r2, r3
 800eb38:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb3a:	f000 fc75 	bl	800f428 <__i2b>
 800eb3e:	4605      	mov	r5, r0
 800eb40:	b166      	cbz	r6, 800eb5c <_dtoa_r+0x754>
 800eb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dd09      	ble.n	800eb5c <_dtoa_r+0x754>
 800eb48:	42b3      	cmp	r3, r6
 800eb4a:	bfa8      	it	ge
 800eb4c:	4633      	movge	r3, r6
 800eb4e:	9a04      	ldr	r2, [sp, #16]
 800eb50:	1af6      	subs	r6, r6, r3
 800eb52:	1ad2      	subs	r2, r2, r3
 800eb54:	9204      	str	r2, [sp, #16]
 800eb56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb5e:	b30b      	cbz	r3, 800eba4 <_dtoa_r+0x79c>
 800eb60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f000 80c6 	beq.w	800ecf4 <_dtoa_r+0x8ec>
 800eb68:	2c00      	cmp	r4, #0
 800eb6a:	f000 80c0 	beq.w	800ecee <_dtoa_r+0x8e6>
 800eb6e:	4629      	mov	r1, r5
 800eb70:	4622      	mov	r2, r4
 800eb72:	4648      	mov	r0, r9
 800eb74:	f000 fd10 	bl	800f598 <__pow5mult>
 800eb78:	9a03      	ldr	r2, [sp, #12]
 800eb7a:	4601      	mov	r1, r0
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	4648      	mov	r0, r9
 800eb80:	f000 fc68 	bl	800f454 <__multiply>
 800eb84:	9903      	ldr	r1, [sp, #12]
 800eb86:	4680      	mov	r8, r0
 800eb88:	4648      	mov	r0, r9
 800eb8a:	f000 fb4f 	bl	800f22c <_Bfree>
 800eb8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb90:	1b1b      	subs	r3, r3, r4
 800eb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb94:	f000 80b1 	beq.w	800ecfa <_dtoa_r+0x8f2>
 800eb98:	4641      	mov	r1, r8
 800eb9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb9c:	4648      	mov	r0, r9
 800eb9e:	f000 fcfb 	bl	800f598 <__pow5mult>
 800eba2:	9003      	str	r0, [sp, #12]
 800eba4:	2101      	movs	r1, #1
 800eba6:	4648      	mov	r0, r9
 800eba8:	f000 fc3e 	bl	800f428 <__i2b>
 800ebac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebae:	4604      	mov	r4, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f000 81d8 	beq.w	800ef66 <_dtoa_r+0xb5e>
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	4601      	mov	r1, r0
 800ebba:	4648      	mov	r0, r9
 800ebbc:	f000 fcec 	bl	800f598 <__pow5mult>
 800ebc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	f300 809f 	bgt.w	800ed08 <_dtoa_r+0x900>
 800ebca:	9b06      	ldr	r3, [sp, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f040 8097 	bne.w	800ed00 <_dtoa_r+0x8f8>
 800ebd2:	9b07      	ldr	r3, [sp, #28]
 800ebd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f040 8093 	bne.w	800ed04 <_dtoa_r+0x8fc>
 800ebde:	9b07      	ldr	r3, [sp, #28]
 800ebe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebe4:	0d1b      	lsrs	r3, r3, #20
 800ebe6:	051b      	lsls	r3, r3, #20
 800ebe8:	b133      	cbz	r3, 800ebf8 <_dtoa_r+0x7f0>
 800ebea:	9b04      	ldr	r3, [sp, #16]
 800ebec:	3301      	adds	r3, #1
 800ebee:	9304      	str	r3, [sp, #16]
 800ebf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 81b8 	beq.w	800ef72 <_dtoa_r+0xb6a>
 800ec02:	6923      	ldr	r3, [r4, #16]
 800ec04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec08:	6918      	ldr	r0, [r3, #16]
 800ec0a:	f000 fbc1 	bl	800f390 <__hi0bits>
 800ec0e:	f1c0 0020 	rsb	r0, r0, #32
 800ec12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec14:	4418      	add	r0, r3
 800ec16:	f010 001f 	ands.w	r0, r0, #31
 800ec1a:	f000 8082 	beq.w	800ed22 <_dtoa_r+0x91a>
 800ec1e:	f1c0 0320 	rsb	r3, r0, #32
 800ec22:	2b04      	cmp	r3, #4
 800ec24:	dd73      	ble.n	800ed0e <_dtoa_r+0x906>
 800ec26:	9b04      	ldr	r3, [sp, #16]
 800ec28:	f1c0 001c 	rsb	r0, r0, #28
 800ec2c:	4403      	add	r3, r0
 800ec2e:	9304      	str	r3, [sp, #16]
 800ec30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec32:	4406      	add	r6, r0
 800ec34:	4403      	add	r3, r0
 800ec36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec38:	9b04      	ldr	r3, [sp, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	dd05      	ble.n	800ec4a <_dtoa_r+0x842>
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4648      	mov	r0, r9
 800ec42:	9903      	ldr	r1, [sp, #12]
 800ec44:	f000 fd02 	bl	800f64c <__lshift>
 800ec48:	9003      	str	r0, [sp, #12]
 800ec4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dd05      	ble.n	800ec5c <_dtoa_r+0x854>
 800ec50:	4621      	mov	r1, r4
 800ec52:	461a      	mov	r2, r3
 800ec54:	4648      	mov	r0, r9
 800ec56:	f000 fcf9 	bl	800f64c <__lshift>
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d061      	beq.n	800ed26 <_dtoa_r+0x91e>
 800ec62:	4621      	mov	r1, r4
 800ec64:	9803      	ldr	r0, [sp, #12]
 800ec66:	f000 fd5d 	bl	800f724 <__mcmp>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	da5b      	bge.n	800ed26 <_dtoa_r+0x91e>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	220a      	movs	r2, #10
 800ec72:	4648      	mov	r0, r9
 800ec74:	9903      	ldr	r1, [sp, #12]
 800ec76:	f000 fafb 	bl	800f270 <__multadd>
 800ec7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec7c:	f107 38ff 	add.w	r8, r7, #4294967295
 800ec80:	9003      	str	r0, [sp, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 8177 	beq.w	800ef76 <_dtoa_r+0xb6e>
 800ec88:	4629      	mov	r1, r5
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	220a      	movs	r2, #10
 800ec8e:	4648      	mov	r0, r9
 800ec90:	f000 faee 	bl	800f270 <__multadd>
 800ec94:	f1bb 0f00 	cmp.w	fp, #0
 800ec98:	4605      	mov	r5, r0
 800ec9a:	dc6f      	bgt.n	800ed7c <_dtoa_r+0x974>
 800ec9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	dc49      	bgt.n	800ed36 <_dtoa_r+0x92e>
 800eca2:	e06b      	b.n	800ed7c <_dtoa_r+0x974>
 800eca4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ecaa:	e73c      	b.n	800eb26 <_dtoa_r+0x71e>
 800ecac:	3fe00000 	.word	0x3fe00000
 800ecb0:	40240000 	.word	0x40240000
 800ecb4:	9b08      	ldr	r3, [sp, #32]
 800ecb6:	1e5c      	subs	r4, r3, #1
 800ecb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecba:	42a3      	cmp	r3, r4
 800ecbc:	db09      	blt.n	800ecd2 <_dtoa_r+0x8ca>
 800ecbe:	1b1c      	subs	r4, r3, r4
 800ecc0:	9b08      	ldr	r3, [sp, #32]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f6bf af30 	bge.w	800eb28 <_dtoa_r+0x720>
 800ecc8:	9b04      	ldr	r3, [sp, #16]
 800ecca:	9a08      	ldr	r2, [sp, #32]
 800eccc:	1a9e      	subs	r6, r3, r2
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e72b      	b.n	800eb2a <_dtoa_r+0x722>
 800ecd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecd6:	1ae3      	subs	r3, r4, r3
 800ecd8:	441a      	add	r2, r3
 800ecda:	940a      	str	r4, [sp, #40]	@ 0x28
 800ecdc:	9e04      	ldr	r6, [sp, #16]
 800ecde:	2400      	movs	r4, #0
 800ece0:	9b08      	ldr	r3, [sp, #32]
 800ece2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ece4:	e721      	b.n	800eb2a <_dtoa_r+0x722>
 800ece6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ece8:	9e04      	ldr	r6, [sp, #16]
 800ecea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ecec:	e728      	b.n	800eb40 <_dtoa_r+0x738>
 800ecee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ecf2:	e751      	b.n	800eb98 <_dtoa_r+0x790>
 800ecf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecf6:	9903      	ldr	r1, [sp, #12]
 800ecf8:	e750      	b.n	800eb9c <_dtoa_r+0x794>
 800ecfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecfe:	e751      	b.n	800eba4 <_dtoa_r+0x79c>
 800ed00:	2300      	movs	r3, #0
 800ed02:	e779      	b.n	800ebf8 <_dtoa_r+0x7f0>
 800ed04:	9b06      	ldr	r3, [sp, #24]
 800ed06:	e777      	b.n	800ebf8 <_dtoa_r+0x7f0>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed0c:	e779      	b.n	800ec02 <_dtoa_r+0x7fa>
 800ed0e:	d093      	beq.n	800ec38 <_dtoa_r+0x830>
 800ed10:	9a04      	ldr	r2, [sp, #16]
 800ed12:	331c      	adds	r3, #28
 800ed14:	441a      	add	r2, r3
 800ed16:	9204      	str	r2, [sp, #16]
 800ed18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed1a:	441e      	add	r6, r3
 800ed1c:	441a      	add	r2, r3
 800ed1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed20:	e78a      	b.n	800ec38 <_dtoa_r+0x830>
 800ed22:	4603      	mov	r3, r0
 800ed24:	e7f4      	b.n	800ed10 <_dtoa_r+0x908>
 800ed26:	9b08      	ldr	r3, [sp, #32]
 800ed28:	46b8      	mov	r8, r7
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	dc20      	bgt.n	800ed70 <_dtoa_r+0x968>
 800ed2e:	469b      	mov	fp, r3
 800ed30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	dd1e      	ble.n	800ed74 <_dtoa_r+0x96c>
 800ed36:	f1bb 0f00 	cmp.w	fp, #0
 800ed3a:	f47f adb1 	bne.w	800e8a0 <_dtoa_r+0x498>
 800ed3e:	4621      	mov	r1, r4
 800ed40:	465b      	mov	r3, fp
 800ed42:	2205      	movs	r2, #5
 800ed44:	4648      	mov	r0, r9
 800ed46:	f000 fa93 	bl	800f270 <__multadd>
 800ed4a:	4601      	mov	r1, r0
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	9803      	ldr	r0, [sp, #12]
 800ed50:	f000 fce8 	bl	800f724 <__mcmp>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	f77f ada3 	ble.w	800e8a0 <_dtoa_r+0x498>
 800ed5a:	4656      	mov	r6, sl
 800ed5c:	2331      	movs	r3, #49	@ 0x31
 800ed5e:	f108 0801 	add.w	r8, r8, #1
 800ed62:	f806 3b01 	strb.w	r3, [r6], #1
 800ed66:	e59f      	b.n	800e8a8 <_dtoa_r+0x4a0>
 800ed68:	46b8      	mov	r8, r7
 800ed6a:	9c08      	ldr	r4, [sp, #32]
 800ed6c:	4625      	mov	r5, r4
 800ed6e:	e7f4      	b.n	800ed5a <_dtoa_r+0x952>
 800ed70:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ed74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 8101 	beq.w	800ef7e <_dtoa_r+0xb76>
 800ed7c:	2e00      	cmp	r6, #0
 800ed7e:	dd05      	ble.n	800ed8c <_dtoa_r+0x984>
 800ed80:	4629      	mov	r1, r5
 800ed82:	4632      	mov	r2, r6
 800ed84:	4648      	mov	r0, r9
 800ed86:	f000 fc61 	bl	800f64c <__lshift>
 800ed8a:	4605      	mov	r5, r0
 800ed8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d05c      	beq.n	800ee4c <_dtoa_r+0xa44>
 800ed92:	4648      	mov	r0, r9
 800ed94:	6869      	ldr	r1, [r5, #4]
 800ed96:	f000 fa09 	bl	800f1ac <_Balloc>
 800ed9a:	4606      	mov	r6, r0
 800ed9c:	b928      	cbnz	r0, 800edaa <_dtoa_r+0x9a2>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eda4:	4b80      	ldr	r3, [pc, #512]	@ (800efa8 <_dtoa_r+0xba0>)
 800eda6:	f7ff bb43 	b.w	800e430 <_dtoa_r+0x28>
 800edaa:	692a      	ldr	r2, [r5, #16]
 800edac:	f105 010c 	add.w	r1, r5, #12
 800edb0:	3202      	adds	r2, #2
 800edb2:	0092      	lsls	r2, r2, #2
 800edb4:	300c      	adds	r0, #12
 800edb6:	f002 facb 	bl	8011350 <memcpy>
 800edba:	2201      	movs	r2, #1
 800edbc:	4631      	mov	r1, r6
 800edbe:	4648      	mov	r0, r9
 800edc0:	f000 fc44 	bl	800f64c <__lshift>
 800edc4:	462f      	mov	r7, r5
 800edc6:	4605      	mov	r5, r0
 800edc8:	f10a 0301 	add.w	r3, sl, #1
 800edcc:	9304      	str	r3, [sp, #16]
 800edce:	eb0a 030b 	add.w	r3, sl, fp
 800edd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800edd4:	9b06      	ldr	r3, [sp, #24]
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	9309      	str	r3, [sp, #36]	@ 0x24
 800eddc:	9b04      	ldr	r3, [sp, #16]
 800edde:	4621      	mov	r1, r4
 800ede0:	9803      	ldr	r0, [sp, #12]
 800ede2:	f103 3bff 	add.w	fp, r3, #4294967295
 800ede6:	f7ff fa85 	bl	800e2f4 <quorem>
 800edea:	4603      	mov	r3, r0
 800edec:	4639      	mov	r1, r7
 800edee:	3330      	adds	r3, #48	@ 0x30
 800edf0:	9006      	str	r0, [sp, #24]
 800edf2:	9803      	ldr	r0, [sp, #12]
 800edf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800edf6:	f000 fc95 	bl	800f724 <__mcmp>
 800edfa:	462a      	mov	r2, r5
 800edfc:	9008      	str	r0, [sp, #32]
 800edfe:	4621      	mov	r1, r4
 800ee00:	4648      	mov	r0, r9
 800ee02:	f000 fcab 	bl	800f75c <__mdiff>
 800ee06:	68c2      	ldr	r2, [r0, #12]
 800ee08:	4606      	mov	r6, r0
 800ee0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee0c:	bb02      	cbnz	r2, 800ee50 <_dtoa_r+0xa48>
 800ee0e:	4601      	mov	r1, r0
 800ee10:	9803      	ldr	r0, [sp, #12]
 800ee12:	f000 fc87 	bl	800f724 <__mcmp>
 800ee16:	4602      	mov	r2, r0
 800ee18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	4648      	mov	r0, r9
 800ee1e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800ee22:	f000 fa03 	bl	800f22c <_Bfree>
 800ee26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ee28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee2a:	9e04      	ldr	r6, [sp, #16]
 800ee2c:	ea42 0103 	orr.w	r1, r2, r3
 800ee30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee32:	4319      	orrs	r1, r3
 800ee34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee36:	d10d      	bne.n	800ee54 <_dtoa_r+0xa4c>
 800ee38:	2b39      	cmp	r3, #57	@ 0x39
 800ee3a:	d027      	beq.n	800ee8c <_dtoa_r+0xa84>
 800ee3c:	9a08      	ldr	r2, [sp, #32]
 800ee3e:	2a00      	cmp	r2, #0
 800ee40:	dd01      	ble.n	800ee46 <_dtoa_r+0xa3e>
 800ee42:	9b06      	ldr	r3, [sp, #24]
 800ee44:	3331      	adds	r3, #49	@ 0x31
 800ee46:	f88b 3000 	strb.w	r3, [fp]
 800ee4a:	e52e      	b.n	800e8aa <_dtoa_r+0x4a2>
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	e7b9      	b.n	800edc4 <_dtoa_r+0x9bc>
 800ee50:	2201      	movs	r2, #1
 800ee52:	e7e2      	b.n	800ee1a <_dtoa_r+0xa12>
 800ee54:	9908      	ldr	r1, [sp, #32]
 800ee56:	2900      	cmp	r1, #0
 800ee58:	db04      	blt.n	800ee64 <_dtoa_r+0xa5c>
 800ee5a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800ee5c:	4301      	orrs	r1, r0
 800ee5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee60:	4301      	orrs	r1, r0
 800ee62:	d120      	bne.n	800eea6 <_dtoa_r+0xa9e>
 800ee64:	2a00      	cmp	r2, #0
 800ee66:	ddee      	ble.n	800ee46 <_dtoa_r+0xa3e>
 800ee68:	2201      	movs	r2, #1
 800ee6a:	9903      	ldr	r1, [sp, #12]
 800ee6c:	4648      	mov	r0, r9
 800ee6e:	9304      	str	r3, [sp, #16]
 800ee70:	f000 fbec 	bl	800f64c <__lshift>
 800ee74:	4621      	mov	r1, r4
 800ee76:	9003      	str	r0, [sp, #12]
 800ee78:	f000 fc54 	bl	800f724 <__mcmp>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	9b04      	ldr	r3, [sp, #16]
 800ee80:	dc02      	bgt.n	800ee88 <_dtoa_r+0xa80>
 800ee82:	d1e0      	bne.n	800ee46 <_dtoa_r+0xa3e>
 800ee84:	07da      	lsls	r2, r3, #31
 800ee86:	d5de      	bpl.n	800ee46 <_dtoa_r+0xa3e>
 800ee88:	2b39      	cmp	r3, #57	@ 0x39
 800ee8a:	d1da      	bne.n	800ee42 <_dtoa_r+0xa3a>
 800ee8c:	2339      	movs	r3, #57	@ 0x39
 800ee8e:	f88b 3000 	strb.w	r3, [fp]
 800ee92:	4633      	mov	r3, r6
 800ee94:	461e      	mov	r6, r3
 800ee96:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	2a39      	cmp	r2, #57	@ 0x39
 800ee9e:	d04e      	beq.n	800ef3e <_dtoa_r+0xb36>
 800eea0:	3201      	adds	r2, #1
 800eea2:	701a      	strb	r2, [r3, #0]
 800eea4:	e501      	b.n	800e8aa <_dtoa_r+0x4a2>
 800eea6:	2a00      	cmp	r2, #0
 800eea8:	dd03      	ble.n	800eeb2 <_dtoa_r+0xaaa>
 800eeaa:	2b39      	cmp	r3, #57	@ 0x39
 800eeac:	d0ee      	beq.n	800ee8c <_dtoa_r+0xa84>
 800eeae:	3301      	adds	r3, #1
 800eeb0:	e7c9      	b.n	800ee46 <_dtoa_r+0xa3e>
 800eeb2:	9a04      	ldr	r2, [sp, #16]
 800eeb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eeb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eeba:	428a      	cmp	r2, r1
 800eebc:	d028      	beq.n	800ef10 <_dtoa_r+0xb08>
 800eebe:	2300      	movs	r3, #0
 800eec0:	220a      	movs	r2, #10
 800eec2:	9903      	ldr	r1, [sp, #12]
 800eec4:	4648      	mov	r0, r9
 800eec6:	f000 f9d3 	bl	800f270 <__multadd>
 800eeca:	42af      	cmp	r7, r5
 800eecc:	9003      	str	r0, [sp, #12]
 800eece:	f04f 0300 	mov.w	r3, #0
 800eed2:	f04f 020a 	mov.w	r2, #10
 800eed6:	4639      	mov	r1, r7
 800eed8:	4648      	mov	r0, r9
 800eeda:	d107      	bne.n	800eeec <_dtoa_r+0xae4>
 800eedc:	f000 f9c8 	bl	800f270 <__multadd>
 800eee0:	4607      	mov	r7, r0
 800eee2:	4605      	mov	r5, r0
 800eee4:	9b04      	ldr	r3, [sp, #16]
 800eee6:	3301      	adds	r3, #1
 800eee8:	9304      	str	r3, [sp, #16]
 800eeea:	e777      	b.n	800eddc <_dtoa_r+0x9d4>
 800eeec:	f000 f9c0 	bl	800f270 <__multadd>
 800eef0:	4629      	mov	r1, r5
 800eef2:	4607      	mov	r7, r0
 800eef4:	2300      	movs	r3, #0
 800eef6:	220a      	movs	r2, #10
 800eef8:	4648      	mov	r0, r9
 800eefa:	f000 f9b9 	bl	800f270 <__multadd>
 800eefe:	4605      	mov	r5, r0
 800ef00:	e7f0      	b.n	800eee4 <_dtoa_r+0xadc>
 800ef02:	f1bb 0f00 	cmp.w	fp, #0
 800ef06:	bfcc      	ite	gt
 800ef08:	465e      	movgt	r6, fp
 800ef0a:	2601      	movle	r6, #1
 800ef0c:	2700      	movs	r7, #0
 800ef0e:	4456      	add	r6, sl
 800ef10:	2201      	movs	r2, #1
 800ef12:	9903      	ldr	r1, [sp, #12]
 800ef14:	4648      	mov	r0, r9
 800ef16:	9304      	str	r3, [sp, #16]
 800ef18:	f000 fb98 	bl	800f64c <__lshift>
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	9003      	str	r0, [sp, #12]
 800ef20:	f000 fc00 	bl	800f724 <__mcmp>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	dcb4      	bgt.n	800ee92 <_dtoa_r+0xa8a>
 800ef28:	d102      	bne.n	800ef30 <_dtoa_r+0xb28>
 800ef2a:	9b04      	ldr	r3, [sp, #16]
 800ef2c:	07db      	lsls	r3, r3, #31
 800ef2e:	d4b0      	bmi.n	800ee92 <_dtoa_r+0xa8a>
 800ef30:	4633      	mov	r3, r6
 800ef32:	461e      	mov	r6, r3
 800ef34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef38:	2a30      	cmp	r2, #48	@ 0x30
 800ef3a:	d0fa      	beq.n	800ef32 <_dtoa_r+0xb2a>
 800ef3c:	e4b5      	b.n	800e8aa <_dtoa_r+0x4a2>
 800ef3e:	459a      	cmp	sl, r3
 800ef40:	d1a8      	bne.n	800ee94 <_dtoa_r+0xa8c>
 800ef42:	2331      	movs	r3, #49	@ 0x31
 800ef44:	f108 0801 	add.w	r8, r8, #1
 800ef48:	f88a 3000 	strb.w	r3, [sl]
 800ef4c:	e4ad      	b.n	800e8aa <_dtoa_r+0x4a2>
 800ef4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ef50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800efac <_dtoa_r+0xba4>
 800ef54:	b11b      	cbz	r3, 800ef5e <_dtoa_r+0xb56>
 800ef56:	f10a 0308 	add.w	r3, sl, #8
 800ef5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	4650      	mov	r0, sl
 800ef60:	b017      	add	sp, #92	@ 0x5c
 800ef62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	f77f ae2e 	ble.w	800ebca <_dtoa_r+0x7c2>
 800ef6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef72:	2001      	movs	r0, #1
 800ef74:	e64d      	b.n	800ec12 <_dtoa_r+0x80a>
 800ef76:	f1bb 0f00 	cmp.w	fp, #0
 800ef7a:	f77f aed9 	ble.w	800ed30 <_dtoa_r+0x928>
 800ef7e:	4656      	mov	r6, sl
 800ef80:	4621      	mov	r1, r4
 800ef82:	9803      	ldr	r0, [sp, #12]
 800ef84:	f7ff f9b6 	bl	800e2f4 <quorem>
 800ef88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ef8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ef90:	eba6 020a 	sub.w	r2, r6, sl
 800ef94:	4593      	cmp	fp, r2
 800ef96:	ddb4      	ble.n	800ef02 <_dtoa_r+0xafa>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	220a      	movs	r2, #10
 800ef9c:	4648      	mov	r0, r9
 800ef9e:	9903      	ldr	r1, [sp, #12]
 800efa0:	f000 f966 	bl	800f270 <__multadd>
 800efa4:	9003      	str	r0, [sp, #12]
 800efa6:	e7eb      	b.n	800ef80 <_dtoa_r+0xb78>
 800efa8:	08012969 	.word	0x08012969
 800efac:	080128ed 	.word	0x080128ed

0800efb0 <_free_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4605      	mov	r5, r0
 800efb4:	2900      	cmp	r1, #0
 800efb6:	d040      	beq.n	800f03a <_free_r+0x8a>
 800efb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efbc:	1f0c      	subs	r4, r1, #4
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	bfb8      	it	lt
 800efc2:	18e4      	addlt	r4, r4, r3
 800efc4:	f000 f8e6 	bl	800f194 <__malloc_lock>
 800efc8:	4a1c      	ldr	r2, [pc, #112]	@ (800f03c <_free_r+0x8c>)
 800efca:	6813      	ldr	r3, [r2, #0]
 800efcc:	b933      	cbnz	r3, 800efdc <_free_r+0x2c>
 800efce:	6063      	str	r3, [r4, #4]
 800efd0:	6014      	str	r4, [r2, #0]
 800efd2:	4628      	mov	r0, r5
 800efd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efd8:	f000 b8e2 	b.w	800f1a0 <__malloc_unlock>
 800efdc:	42a3      	cmp	r3, r4
 800efde:	d908      	bls.n	800eff2 <_free_r+0x42>
 800efe0:	6820      	ldr	r0, [r4, #0]
 800efe2:	1821      	adds	r1, r4, r0
 800efe4:	428b      	cmp	r3, r1
 800efe6:	bf01      	itttt	eq
 800efe8:	6819      	ldreq	r1, [r3, #0]
 800efea:	685b      	ldreq	r3, [r3, #4]
 800efec:	1809      	addeq	r1, r1, r0
 800efee:	6021      	streq	r1, [r4, #0]
 800eff0:	e7ed      	b.n	800efce <_free_r+0x1e>
 800eff2:	461a      	mov	r2, r3
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	b10b      	cbz	r3, 800effc <_free_r+0x4c>
 800eff8:	42a3      	cmp	r3, r4
 800effa:	d9fa      	bls.n	800eff2 <_free_r+0x42>
 800effc:	6811      	ldr	r1, [r2, #0]
 800effe:	1850      	adds	r0, r2, r1
 800f000:	42a0      	cmp	r0, r4
 800f002:	d10b      	bne.n	800f01c <_free_r+0x6c>
 800f004:	6820      	ldr	r0, [r4, #0]
 800f006:	4401      	add	r1, r0
 800f008:	1850      	adds	r0, r2, r1
 800f00a:	4283      	cmp	r3, r0
 800f00c:	6011      	str	r1, [r2, #0]
 800f00e:	d1e0      	bne.n	800efd2 <_free_r+0x22>
 800f010:	6818      	ldr	r0, [r3, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	4408      	add	r0, r1
 800f016:	6010      	str	r0, [r2, #0]
 800f018:	6053      	str	r3, [r2, #4]
 800f01a:	e7da      	b.n	800efd2 <_free_r+0x22>
 800f01c:	d902      	bls.n	800f024 <_free_r+0x74>
 800f01e:	230c      	movs	r3, #12
 800f020:	602b      	str	r3, [r5, #0]
 800f022:	e7d6      	b.n	800efd2 <_free_r+0x22>
 800f024:	6820      	ldr	r0, [r4, #0]
 800f026:	1821      	adds	r1, r4, r0
 800f028:	428b      	cmp	r3, r1
 800f02a:	bf01      	itttt	eq
 800f02c:	6819      	ldreq	r1, [r3, #0]
 800f02e:	685b      	ldreq	r3, [r3, #4]
 800f030:	1809      	addeq	r1, r1, r0
 800f032:	6021      	streq	r1, [r4, #0]
 800f034:	6063      	str	r3, [r4, #4]
 800f036:	6054      	str	r4, [r2, #4]
 800f038:	e7cb      	b.n	800efd2 <_free_r+0x22>
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	20001abc 	.word	0x20001abc

0800f040 <malloc>:
 800f040:	4b02      	ldr	r3, [pc, #8]	@ (800f04c <malloc+0xc>)
 800f042:	4601      	mov	r1, r0
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	f000 b825 	b.w	800f094 <_malloc_r>
 800f04a:	bf00      	nop
 800f04c:	200001a0 	.word	0x200001a0

0800f050 <sbrk_aligned>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	4e0f      	ldr	r6, [pc, #60]	@ (800f090 <sbrk_aligned+0x40>)
 800f054:	460c      	mov	r4, r1
 800f056:	6831      	ldr	r1, [r6, #0]
 800f058:	4605      	mov	r5, r0
 800f05a:	b911      	cbnz	r1, 800f062 <sbrk_aligned+0x12>
 800f05c:	f002 f968 	bl	8011330 <_sbrk_r>
 800f060:	6030      	str	r0, [r6, #0]
 800f062:	4621      	mov	r1, r4
 800f064:	4628      	mov	r0, r5
 800f066:	f002 f963 	bl	8011330 <_sbrk_r>
 800f06a:	1c43      	adds	r3, r0, #1
 800f06c:	d103      	bne.n	800f076 <sbrk_aligned+0x26>
 800f06e:	f04f 34ff 	mov.w	r4, #4294967295
 800f072:	4620      	mov	r0, r4
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	1cc4      	adds	r4, r0, #3
 800f078:	f024 0403 	bic.w	r4, r4, #3
 800f07c:	42a0      	cmp	r0, r4
 800f07e:	d0f8      	beq.n	800f072 <sbrk_aligned+0x22>
 800f080:	1a21      	subs	r1, r4, r0
 800f082:	4628      	mov	r0, r5
 800f084:	f002 f954 	bl	8011330 <_sbrk_r>
 800f088:	3001      	adds	r0, #1
 800f08a:	d1f2      	bne.n	800f072 <sbrk_aligned+0x22>
 800f08c:	e7ef      	b.n	800f06e <sbrk_aligned+0x1e>
 800f08e:	bf00      	nop
 800f090:	20001ab8 	.word	0x20001ab8

0800f094 <_malloc_r>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	1ccd      	adds	r5, r1, #3
 800f09a:	f025 0503 	bic.w	r5, r5, #3
 800f09e:	3508      	adds	r5, #8
 800f0a0:	2d0c      	cmp	r5, #12
 800f0a2:	bf38      	it	cc
 800f0a4:	250c      	movcc	r5, #12
 800f0a6:	2d00      	cmp	r5, #0
 800f0a8:	4606      	mov	r6, r0
 800f0aa:	db01      	blt.n	800f0b0 <_malloc_r+0x1c>
 800f0ac:	42a9      	cmp	r1, r5
 800f0ae:	d904      	bls.n	800f0ba <_malloc_r+0x26>
 800f0b0:	230c      	movs	r3, #12
 800f0b2:	6033      	str	r3, [r6, #0]
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f190 <_malloc_r+0xfc>
 800f0be:	f000 f869 	bl	800f194 <__malloc_lock>
 800f0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800f0c6:	461c      	mov	r4, r3
 800f0c8:	bb44      	cbnz	r4, 800f11c <_malloc_r+0x88>
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7ff ffbf 	bl	800f050 <sbrk_aligned>
 800f0d2:	1c43      	adds	r3, r0, #1
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	d158      	bne.n	800f18a <_malloc_r+0xf6>
 800f0d8:	f8d8 4000 	ldr.w	r4, [r8]
 800f0dc:	4627      	mov	r7, r4
 800f0de:	2f00      	cmp	r7, #0
 800f0e0:	d143      	bne.n	800f16a <_malloc_r+0xd6>
 800f0e2:	2c00      	cmp	r4, #0
 800f0e4:	d04b      	beq.n	800f17e <_malloc_r+0xea>
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	4639      	mov	r1, r7
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	eb04 0903 	add.w	r9, r4, r3
 800f0f0:	f002 f91e 	bl	8011330 <_sbrk_r>
 800f0f4:	4581      	cmp	r9, r0
 800f0f6:	d142      	bne.n	800f17e <_malloc_r+0xea>
 800f0f8:	6821      	ldr	r1, [r4, #0]
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	1a6d      	subs	r5, r5, r1
 800f0fe:	4629      	mov	r1, r5
 800f100:	f7ff ffa6 	bl	800f050 <sbrk_aligned>
 800f104:	3001      	adds	r0, #1
 800f106:	d03a      	beq.n	800f17e <_malloc_r+0xea>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	442b      	add	r3, r5
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	f8d8 3000 	ldr.w	r3, [r8]
 800f112:	685a      	ldr	r2, [r3, #4]
 800f114:	bb62      	cbnz	r2, 800f170 <_malloc_r+0xdc>
 800f116:	f8c8 7000 	str.w	r7, [r8]
 800f11a:	e00f      	b.n	800f13c <_malloc_r+0xa8>
 800f11c:	6822      	ldr	r2, [r4, #0]
 800f11e:	1b52      	subs	r2, r2, r5
 800f120:	d420      	bmi.n	800f164 <_malloc_r+0xd0>
 800f122:	2a0b      	cmp	r2, #11
 800f124:	d917      	bls.n	800f156 <_malloc_r+0xc2>
 800f126:	1961      	adds	r1, r4, r5
 800f128:	42a3      	cmp	r3, r4
 800f12a:	6025      	str	r5, [r4, #0]
 800f12c:	bf18      	it	ne
 800f12e:	6059      	strne	r1, [r3, #4]
 800f130:	6863      	ldr	r3, [r4, #4]
 800f132:	bf08      	it	eq
 800f134:	f8c8 1000 	streq.w	r1, [r8]
 800f138:	5162      	str	r2, [r4, r5]
 800f13a:	604b      	str	r3, [r1, #4]
 800f13c:	4630      	mov	r0, r6
 800f13e:	f000 f82f 	bl	800f1a0 <__malloc_unlock>
 800f142:	f104 000b 	add.w	r0, r4, #11
 800f146:	1d23      	adds	r3, r4, #4
 800f148:	f020 0007 	bic.w	r0, r0, #7
 800f14c:	1ac2      	subs	r2, r0, r3
 800f14e:	bf1c      	itt	ne
 800f150:	1a1b      	subne	r3, r3, r0
 800f152:	50a3      	strne	r3, [r4, r2]
 800f154:	e7af      	b.n	800f0b6 <_malloc_r+0x22>
 800f156:	6862      	ldr	r2, [r4, #4]
 800f158:	42a3      	cmp	r3, r4
 800f15a:	bf0c      	ite	eq
 800f15c:	f8c8 2000 	streq.w	r2, [r8]
 800f160:	605a      	strne	r2, [r3, #4]
 800f162:	e7eb      	b.n	800f13c <_malloc_r+0xa8>
 800f164:	4623      	mov	r3, r4
 800f166:	6864      	ldr	r4, [r4, #4]
 800f168:	e7ae      	b.n	800f0c8 <_malloc_r+0x34>
 800f16a:	463c      	mov	r4, r7
 800f16c:	687f      	ldr	r7, [r7, #4]
 800f16e:	e7b6      	b.n	800f0de <_malloc_r+0x4a>
 800f170:	461a      	mov	r2, r3
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	42a3      	cmp	r3, r4
 800f176:	d1fb      	bne.n	800f170 <_malloc_r+0xdc>
 800f178:	2300      	movs	r3, #0
 800f17a:	6053      	str	r3, [r2, #4]
 800f17c:	e7de      	b.n	800f13c <_malloc_r+0xa8>
 800f17e:	230c      	movs	r3, #12
 800f180:	4630      	mov	r0, r6
 800f182:	6033      	str	r3, [r6, #0]
 800f184:	f000 f80c 	bl	800f1a0 <__malloc_unlock>
 800f188:	e794      	b.n	800f0b4 <_malloc_r+0x20>
 800f18a:	6005      	str	r5, [r0, #0]
 800f18c:	e7d6      	b.n	800f13c <_malloc_r+0xa8>
 800f18e:	bf00      	nop
 800f190:	20001abc 	.word	0x20001abc

0800f194 <__malloc_lock>:
 800f194:	4801      	ldr	r0, [pc, #4]	@ (800f19c <__malloc_lock+0x8>)
 800f196:	f7ff b898 	b.w	800e2ca <__retarget_lock_acquire_recursive>
 800f19a:	bf00      	nop
 800f19c:	20001ab4 	.word	0x20001ab4

0800f1a0 <__malloc_unlock>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	@ (800f1a8 <__malloc_unlock+0x8>)
 800f1a2:	f7ff b893 	b.w	800e2cc <__retarget_lock_release_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	20001ab4 	.word	0x20001ab4

0800f1ac <_Balloc>:
 800f1ac:	b570      	push	{r4, r5, r6, lr}
 800f1ae:	69c6      	ldr	r6, [r0, #28]
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	460d      	mov	r5, r1
 800f1b4:	b976      	cbnz	r6, 800f1d4 <_Balloc+0x28>
 800f1b6:	2010      	movs	r0, #16
 800f1b8:	f7ff ff42 	bl	800f040 <malloc>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	61e0      	str	r0, [r4, #28]
 800f1c0:	b920      	cbnz	r0, 800f1cc <_Balloc+0x20>
 800f1c2:	216b      	movs	r1, #107	@ 0x6b
 800f1c4:	4b17      	ldr	r3, [pc, #92]	@ (800f224 <_Balloc+0x78>)
 800f1c6:	4818      	ldr	r0, [pc, #96]	@ (800f228 <_Balloc+0x7c>)
 800f1c8:	f002 f8d6 	bl	8011378 <__assert_func>
 800f1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1d0:	6006      	str	r6, [r0, #0]
 800f1d2:	60c6      	str	r6, [r0, #12]
 800f1d4:	69e6      	ldr	r6, [r4, #28]
 800f1d6:	68f3      	ldr	r3, [r6, #12]
 800f1d8:	b183      	cbz	r3, 800f1fc <_Balloc+0x50>
 800f1da:	69e3      	ldr	r3, [r4, #28]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1e2:	b9b8      	cbnz	r0, 800f214 <_Balloc+0x68>
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	fa01 f605 	lsl.w	r6, r1, r5
 800f1ea:	1d72      	adds	r2, r6, #5
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	0092      	lsls	r2, r2, #2
 800f1f0:	f002 f8e0 	bl	80113b4 <_calloc_r>
 800f1f4:	b160      	cbz	r0, 800f210 <_Balloc+0x64>
 800f1f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1fa:	e00e      	b.n	800f21a <_Balloc+0x6e>
 800f1fc:	2221      	movs	r2, #33	@ 0x21
 800f1fe:	2104      	movs	r1, #4
 800f200:	4620      	mov	r0, r4
 800f202:	f002 f8d7 	bl	80113b4 <_calloc_r>
 800f206:	69e3      	ldr	r3, [r4, #28]
 800f208:	60f0      	str	r0, [r6, #12]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e4      	bne.n	800f1da <_Balloc+0x2e>
 800f210:	2000      	movs	r0, #0
 800f212:	bd70      	pop	{r4, r5, r6, pc}
 800f214:	6802      	ldr	r2, [r0, #0]
 800f216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f21a:	2300      	movs	r3, #0
 800f21c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f220:	e7f7      	b.n	800f212 <_Balloc+0x66>
 800f222:	bf00      	nop
 800f224:	080128fa 	.word	0x080128fa
 800f228:	0801297a 	.word	0x0801297a

0800f22c <_Bfree>:
 800f22c:	b570      	push	{r4, r5, r6, lr}
 800f22e:	69c6      	ldr	r6, [r0, #28]
 800f230:	4605      	mov	r5, r0
 800f232:	460c      	mov	r4, r1
 800f234:	b976      	cbnz	r6, 800f254 <_Bfree+0x28>
 800f236:	2010      	movs	r0, #16
 800f238:	f7ff ff02 	bl	800f040 <malloc>
 800f23c:	4602      	mov	r2, r0
 800f23e:	61e8      	str	r0, [r5, #28]
 800f240:	b920      	cbnz	r0, 800f24c <_Bfree+0x20>
 800f242:	218f      	movs	r1, #143	@ 0x8f
 800f244:	4b08      	ldr	r3, [pc, #32]	@ (800f268 <_Bfree+0x3c>)
 800f246:	4809      	ldr	r0, [pc, #36]	@ (800f26c <_Bfree+0x40>)
 800f248:	f002 f896 	bl	8011378 <__assert_func>
 800f24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f250:	6006      	str	r6, [r0, #0]
 800f252:	60c6      	str	r6, [r0, #12]
 800f254:	b13c      	cbz	r4, 800f266 <_Bfree+0x3a>
 800f256:	69eb      	ldr	r3, [r5, #28]
 800f258:	6862      	ldr	r2, [r4, #4]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f260:	6021      	str	r1, [r4, #0]
 800f262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f266:	bd70      	pop	{r4, r5, r6, pc}
 800f268:	080128fa 	.word	0x080128fa
 800f26c:	0801297a 	.word	0x0801297a

0800f270 <__multadd>:
 800f270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f274:	4607      	mov	r7, r0
 800f276:	460c      	mov	r4, r1
 800f278:	461e      	mov	r6, r3
 800f27a:	2000      	movs	r0, #0
 800f27c:	690d      	ldr	r5, [r1, #16]
 800f27e:	f101 0c14 	add.w	ip, r1, #20
 800f282:	f8dc 3000 	ldr.w	r3, [ip]
 800f286:	3001      	adds	r0, #1
 800f288:	b299      	uxth	r1, r3
 800f28a:	fb02 6101 	mla	r1, r2, r1, r6
 800f28e:	0c1e      	lsrs	r6, r3, #16
 800f290:	0c0b      	lsrs	r3, r1, #16
 800f292:	fb02 3306 	mla	r3, r2, r6, r3
 800f296:	b289      	uxth	r1, r1
 800f298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f29c:	4285      	cmp	r5, r0
 800f29e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2a2:	f84c 1b04 	str.w	r1, [ip], #4
 800f2a6:	dcec      	bgt.n	800f282 <__multadd+0x12>
 800f2a8:	b30e      	cbz	r6, 800f2ee <__multadd+0x7e>
 800f2aa:	68a3      	ldr	r3, [r4, #8]
 800f2ac:	42ab      	cmp	r3, r5
 800f2ae:	dc19      	bgt.n	800f2e4 <__multadd+0x74>
 800f2b0:	6861      	ldr	r1, [r4, #4]
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	3101      	adds	r1, #1
 800f2b6:	f7ff ff79 	bl	800f1ac <_Balloc>
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	b928      	cbnz	r0, 800f2ca <__multadd+0x5a>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	21ba      	movs	r1, #186	@ 0xba
 800f2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f2f4 <__multadd+0x84>)
 800f2c4:	480c      	ldr	r0, [pc, #48]	@ (800f2f8 <__multadd+0x88>)
 800f2c6:	f002 f857 	bl	8011378 <__assert_func>
 800f2ca:	6922      	ldr	r2, [r4, #16]
 800f2cc:	f104 010c 	add.w	r1, r4, #12
 800f2d0:	3202      	adds	r2, #2
 800f2d2:	0092      	lsls	r2, r2, #2
 800f2d4:	300c      	adds	r0, #12
 800f2d6:	f002 f83b 	bl	8011350 <memcpy>
 800f2da:	4621      	mov	r1, r4
 800f2dc:	4638      	mov	r0, r7
 800f2de:	f7ff ffa5 	bl	800f22c <_Bfree>
 800f2e2:	4644      	mov	r4, r8
 800f2e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2e8:	3501      	adds	r5, #1
 800f2ea:	615e      	str	r6, [r3, #20]
 800f2ec:	6125      	str	r5, [r4, #16]
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f4:	08012969 	.word	0x08012969
 800f2f8:	0801297a 	.word	0x0801297a

0800f2fc <__s2b>:
 800f2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f300:	4615      	mov	r5, r2
 800f302:	2209      	movs	r2, #9
 800f304:	461f      	mov	r7, r3
 800f306:	3308      	adds	r3, #8
 800f308:	460c      	mov	r4, r1
 800f30a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f30e:	4606      	mov	r6, r0
 800f310:	2201      	movs	r2, #1
 800f312:	2100      	movs	r1, #0
 800f314:	429a      	cmp	r2, r3
 800f316:	db09      	blt.n	800f32c <__s2b+0x30>
 800f318:	4630      	mov	r0, r6
 800f31a:	f7ff ff47 	bl	800f1ac <_Balloc>
 800f31e:	b940      	cbnz	r0, 800f332 <__s2b+0x36>
 800f320:	4602      	mov	r2, r0
 800f322:	21d3      	movs	r1, #211	@ 0xd3
 800f324:	4b18      	ldr	r3, [pc, #96]	@ (800f388 <__s2b+0x8c>)
 800f326:	4819      	ldr	r0, [pc, #100]	@ (800f38c <__s2b+0x90>)
 800f328:	f002 f826 	bl	8011378 <__assert_func>
 800f32c:	0052      	lsls	r2, r2, #1
 800f32e:	3101      	adds	r1, #1
 800f330:	e7f0      	b.n	800f314 <__s2b+0x18>
 800f332:	9b08      	ldr	r3, [sp, #32]
 800f334:	2d09      	cmp	r5, #9
 800f336:	6143      	str	r3, [r0, #20]
 800f338:	f04f 0301 	mov.w	r3, #1
 800f33c:	6103      	str	r3, [r0, #16]
 800f33e:	dd16      	ble.n	800f36e <__s2b+0x72>
 800f340:	f104 0909 	add.w	r9, r4, #9
 800f344:	46c8      	mov	r8, r9
 800f346:	442c      	add	r4, r5
 800f348:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f34c:	4601      	mov	r1, r0
 800f34e:	220a      	movs	r2, #10
 800f350:	4630      	mov	r0, r6
 800f352:	3b30      	subs	r3, #48	@ 0x30
 800f354:	f7ff ff8c 	bl	800f270 <__multadd>
 800f358:	45a0      	cmp	r8, r4
 800f35a:	d1f5      	bne.n	800f348 <__s2b+0x4c>
 800f35c:	f1a5 0408 	sub.w	r4, r5, #8
 800f360:	444c      	add	r4, r9
 800f362:	1b2d      	subs	r5, r5, r4
 800f364:	1963      	adds	r3, r4, r5
 800f366:	42bb      	cmp	r3, r7
 800f368:	db04      	blt.n	800f374 <__s2b+0x78>
 800f36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f36e:	2509      	movs	r5, #9
 800f370:	340a      	adds	r4, #10
 800f372:	e7f6      	b.n	800f362 <__s2b+0x66>
 800f374:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f378:	4601      	mov	r1, r0
 800f37a:	220a      	movs	r2, #10
 800f37c:	4630      	mov	r0, r6
 800f37e:	3b30      	subs	r3, #48	@ 0x30
 800f380:	f7ff ff76 	bl	800f270 <__multadd>
 800f384:	e7ee      	b.n	800f364 <__s2b+0x68>
 800f386:	bf00      	nop
 800f388:	08012969 	.word	0x08012969
 800f38c:	0801297a 	.word	0x0801297a

0800f390 <__hi0bits>:
 800f390:	4603      	mov	r3, r0
 800f392:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f396:	bf3a      	itte	cc
 800f398:	0403      	lslcc	r3, r0, #16
 800f39a:	2010      	movcc	r0, #16
 800f39c:	2000      	movcs	r0, #0
 800f39e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f3a2:	bf3c      	itt	cc
 800f3a4:	021b      	lslcc	r3, r3, #8
 800f3a6:	3008      	addcc	r0, #8
 800f3a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3ac:	bf3c      	itt	cc
 800f3ae:	011b      	lslcc	r3, r3, #4
 800f3b0:	3004      	addcc	r0, #4
 800f3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3b6:	bf3c      	itt	cc
 800f3b8:	009b      	lslcc	r3, r3, #2
 800f3ba:	3002      	addcc	r0, #2
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	db05      	blt.n	800f3cc <__hi0bits+0x3c>
 800f3c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f3c4:	f100 0001 	add.w	r0, r0, #1
 800f3c8:	bf08      	it	eq
 800f3ca:	2020      	moveq	r0, #32
 800f3cc:	4770      	bx	lr

0800f3ce <__lo0bits>:
 800f3ce:	6803      	ldr	r3, [r0, #0]
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	f013 0007 	ands.w	r0, r3, #7
 800f3d6:	d00b      	beq.n	800f3f0 <__lo0bits+0x22>
 800f3d8:	07d9      	lsls	r1, r3, #31
 800f3da:	d421      	bmi.n	800f420 <__lo0bits+0x52>
 800f3dc:	0798      	lsls	r0, r3, #30
 800f3de:	bf49      	itett	mi
 800f3e0:	085b      	lsrmi	r3, r3, #1
 800f3e2:	089b      	lsrpl	r3, r3, #2
 800f3e4:	2001      	movmi	r0, #1
 800f3e6:	6013      	strmi	r3, [r2, #0]
 800f3e8:	bf5c      	itt	pl
 800f3ea:	2002      	movpl	r0, #2
 800f3ec:	6013      	strpl	r3, [r2, #0]
 800f3ee:	4770      	bx	lr
 800f3f0:	b299      	uxth	r1, r3
 800f3f2:	b909      	cbnz	r1, 800f3f8 <__lo0bits+0x2a>
 800f3f4:	2010      	movs	r0, #16
 800f3f6:	0c1b      	lsrs	r3, r3, #16
 800f3f8:	b2d9      	uxtb	r1, r3
 800f3fa:	b909      	cbnz	r1, 800f400 <__lo0bits+0x32>
 800f3fc:	3008      	adds	r0, #8
 800f3fe:	0a1b      	lsrs	r3, r3, #8
 800f400:	0719      	lsls	r1, r3, #28
 800f402:	bf04      	itt	eq
 800f404:	091b      	lsreq	r3, r3, #4
 800f406:	3004      	addeq	r0, #4
 800f408:	0799      	lsls	r1, r3, #30
 800f40a:	bf04      	itt	eq
 800f40c:	089b      	lsreq	r3, r3, #2
 800f40e:	3002      	addeq	r0, #2
 800f410:	07d9      	lsls	r1, r3, #31
 800f412:	d403      	bmi.n	800f41c <__lo0bits+0x4e>
 800f414:	085b      	lsrs	r3, r3, #1
 800f416:	f100 0001 	add.w	r0, r0, #1
 800f41a:	d003      	beq.n	800f424 <__lo0bits+0x56>
 800f41c:	6013      	str	r3, [r2, #0]
 800f41e:	4770      	bx	lr
 800f420:	2000      	movs	r0, #0
 800f422:	4770      	bx	lr
 800f424:	2020      	movs	r0, #32
 800f426:	4770      	bx	lr

0800f428 <__i2b>:
 800f428:	b510      	push	{r4, lr}
 800f42a:	460c      	mov	r4, r1
 800f42c:	2101      	movs	r1, #1
 800f42e:	f7ff febd 	bl	800f1ac <_Balloc>
 800f432:	4602      	mov	r2, r0
 800f434:	b928      	cbnz	r0, 800f442 <__i2b+0x1a>
 800f436:	f240 1145 	movw	r1, #325	@ 0x145
 800f43a:	4b04      	ldr	r3, [pc, #16]	@ (800f44c <__i2b+0x24>)
 800f43c:	4804      	ldr	r0, [pc, #16]	@ (800f450 <__i2b+0x28>)
 800f43e:	f001 ff9b 	bl	8011378 <__assert_func>
 800f442:	2301      	movs	r3, #1
 800f444:	6144      	str	r4, [r0, #20]
 800f446:	6103      	str	r3, [r0, #16]
 800f448:	bd10      	pop	{r4, pc}
 800f44a:	bf00      	nop
 800f44c:	08012969 	.word	0x08012969
 800f450:	0801297a 	.word	0x0801297a

0800f454 <__multiply>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	4617      	mov	r7, r2
 800f45a:	690a      	ldr	r2, [r1, #16]
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	4689      	mov	r9, r1
 800f460:	429a      	cmp	r2, r3
 800f462:	bfa2      	ittt	ge
 800f464:	463b      	movge	r3, r7
 800f466:	460f      	movge	r7, r1
 800f468:	4699      	movge	r9, r3
 800f46a:	693d      	ldr	r5, [r7, #16]
 800f46c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	eb05 060a 	add.w	r6, r5, sl
 800f478:	42b3      	cmp	r3, r6
 800f47a:	b085      	sub	sp, #20
 800f47c:	bfb8      	it	lt
 800f47e:	3101      	addlt	r1, #1
 800f480:	f7ff fe94 	bl	800f1ac <_Balloc>
 800f484:	b930      	cbnz	r0, 800f494 <__multiply+0x40>
 800f486:	4602      	mov	r2, r0
 800f488:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f48c:	4b40      	ldr	r3, [pc, #256]	@ (800f590 <__multiply+0x13c>)
 800f48e:	4841      	ldr	r0, [pc, #260]	@ (800f594 <__multiply+0x140>)
 800f490:	f001 ff72 	bl	8011378 <__assert_func>
 800f494:	f100 0414 	add.w	r4, r0, #20
 800f498:	4623      	mov	r3, r4
 800f49a:	2200      	movs	r2, #0
 800f49c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f4a0:	4573      	cmp	r3, lr
 800f4a2:	d320      	bcc.n	800f4e6 <__multiply+0x92>
 800f4a4:	f107 0814 	add.w	r8, r7, #20
 800f4a8:	f109 0114 	add.w	r1, r9, #20
 800f4ac:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f4b0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f4b4:	9302      	str	r3, [sp, #8]
 800f4b6:	1beb      	subs	r3, r5, r7
 800f4b8:	3b15      	subs	r3, #21
 800f4ba:	f023 0303 	bic.w	r3, r3, #3
 800f4be:	3304      	adds	r3, #4
 800f4c0:	3715      	adds	r7, #21
 800f4c2:	42bd      	cmp	r5, r7
 800f4c4:	bf38      	it	cc
 800f4c6:	2304      	movcc	r3, #4
 800f4c8:	9301      	str	r3, [sp, #4]
 800f4ca:	9b02      	ldr	r3, [sp, #8]
 800f4cc:	9103      	str	r1, [sp, #12]
 800f4ce:	428b      	cmp	r3, r1
 800f4d0:	d80c      	bhi.n	800f4ec <__multiply+0x98>
 800f4d2:	2e00      	cmp	r6, #0
 800f4d4:	dd03      	ble.n	800f4de <__multiply+0x8a>
 800f4d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d055      	beq.n	800f58a <__multiply+0x136>
 800f4de:	6106      	str	r6, [r0, #16]
 800f4e0:	b005      	add	sp, #20
 800f4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e6:	f843 2b04 	str.w	r2, [r3], #4
 800f4ea:	e7d9      	b.n	800f4a0 <__multiply+0x4c>
 800f4ec:	f8b1 a000 	ldrh.w	sl, [r1]
 800f4f0:	f1ba 0f00 	cmp.w	sl, #0
 800f4f4:	d01f      	beq.n	800f536 <__multiply+0xe2>
 800f4f6:	46c4      	mov	ip, r8
 800f4f8:	46a1      	mov	r9, r4
 800f4fa:	2700      	movs	r7, #0
 800f4fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f500:	f8d9 3000 	ldr.w	r3, [r9]
 800f504:	fa1f fb82 	uxth.w	fp, r2
 800f508:	b29b      	uxth	r3, r3
 800f50a:	fb0a 330b 	mla	r3, sl, fp, r3
 800f50e:	443b      	add	r3, r7
 800f510:	f8d9 7000 	ldr.w	r7, [r9]
 800f514:	0c12      	lsrs	r2, r2, #16
 800f516:	0c3f      	lsrs	r7, r7, #16
 800f518:	fb0a 7202 	mla	r2, sl, r2, r7
 800f51c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f520:	b29b      	uxth	r3, r3
 800f522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f526:	4565      	cmp	r5, ip
 800f528:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f52c:	f849 3b04 	str.w	r3, [r9], #4
 800f530:	d8e4      	bhi.n	800f4fc <__multiply+0xa8>
 800f532:	9b01      	ldr	r3, [sp, #4]
 800f534:	50e7      	str	r7, [r4, r3]
 800f536:	9b03      	ldr	r3, [sp, #12]
 800f538:	3104      	adds	r1, #4
 800f53a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f53e:	f1b9 0f00 	cmp.w	r9, #0
 800f542:	d020      	beq.n	800f586 <__multiply+0x132>
 800f544:	4647      	mov	r7, r8
 800f546:	46a4      	mov	ip, r4
 800f548:	f04f 0a00 	mov.w	sl, #0
 800f54c:	6823      	ldr	r3, [r4, #0]
 800f54e:	f8b7 b000 	ldrh.w	fp, [r7]
 800f552:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f556:	b29b      	uxth	r3, r3
 800f558:	fb09 220b 	mla	r2, r9, fp, r2
 800f55c:	4452      	add	r2, sl
 800f55e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f562:	f84c 3b04 	str.w	r3, [ip], #4
 800f566:	f857 3b04 	ldr.w	r3, [r7], #4
 800f56a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f56e:	f8bc 3000 	ldrh.w	r3, [ip]
 800f572:	42bd      	cmp	r5, r7
 800f574:	fb09 330a 	mla	r3, r9, sl, r3
 800f578:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f57c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f580:	d8e5      	bhi.n	800f54e <__multiply+0xfa>
 800f582:	9a01      	ldr	r2, [sp, #4]
 800f584:	50a3      	str	r3, [r4, r2]
 800f586:	3404      	adds	r4, #4
 800f588:	e79f      	b.n	800f4ca <__multiply+0x76>
 800f58a:	3e01      	subs	r6, #1
 800f58c:	e7a1      	b.n	800f4d2 <__multiply+0x7e>
 800f58e:	bf00      	nop
 800f590:	08012969 	.word	0x08012969
 800f594:	0801297a 	.word	0x0801297a

0800f598 <__pow5mult>:
 800f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f59c:	4615      	mov	r5, r2
 800f59e:	f012 0203 	ands.w	r2, r2, #3
 800f5a2:	4607      	mov	r7, r0
 800f5a4:	460e      	mov	r6, r1
 800f5a6:	d007      	beq.n	800f5b8 <__pow5mult+0x20>
 800f5a8:	4c25      	ldr	r4, [pc, #148]	@ (800f640 <__pow5mult+0xa8>)
 800f5aa:	3a01      	subs	r2, #1
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5b2:	f7ff fe5d 	bl	800f270 <__multadd>
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	10ad      	asrs	r5, r5, #2
 800f5ba:	d03d      	beq.n	800f638 <__pow5mult+0xa0>
 800f5bc:	69fc      	ldr	r4, [r7, #28]
 800f5be:	b97c      	cbnz	r4, 800f5e0 <__pow5mult+0x48>
 800f5c0:	2010      	movs	r0, #16
 800f5c2:	f7ff fd3d 	bl	800f040 <malloc>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	61f8      	str	r0, [r7, #28]
 800f5ca:	b928      	cbnz	r0, 800f5d8 <__pow5mult+0x40>
 800f5cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f5d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f644 <__pow5mult+0xac>)
 800f5d2:	481d      	ldr	r0, [pc, #116]	@ (800f648 <__pow5mult+0xb0>)
 800f5d4:	f001 fed0 	bl	8011378 <__assert_func>
 800f5d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5dc:	6004      	str	r4, [r0, #0]
 800f5de:	60c4      	str	r4, [r0, #12]
 800f5e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f5e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5e8:	b94c      	cbnz	r4, 800f5fe <__pow5mult+0x66>
 800f5ea:	f240 2171 	movw	r1, #625	@ 0x271
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	f7ff ff1a 	bl	800f428 <__i2b>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5fc:	6003      	str	r3, [r0, #0]
 800f5fe:	f04f 0900 	mov.w	r9, #0
 800f602:	07eb      	lsls	r3, r5, #31
 800f604:	d50a      	bpl.n	800f61c <__pow5mult+0x84>
 800f606:	4631      	mov	r1, r6
 800f608:	4622      	mov	r2, r4
 800f60a:	4638      	mov	r0, r7
 800f60c:	f7ff ff22 	bl	800f454 <__multiply>
 800f610:	4680      	mov	r8, r0
 800f612:	4631      	mov	r1, r6
 800f614:	4638      	mov	r0, r7
 800f616:	f7ff fe09 	bl	800f22c <_Bfree>
 800f61a:	4646      	mov	r6, r8
 800f61c:	106d      	asrs	r5, r5, #1
 800f61e:	d00b      	beq.n	800f638 <__pow5mult+0xa0>
 800f620:	6820      	ldr	r0, [r4, #0]
 800f622:	b938      	cbnz	r0, 800f634 <__pow5mult+0x9c>
 800f624:	4622      	mov	r2, r4
 800f626:	4621      	mov	r1, r4
 800f628:	4638      	mov	r0, r7
 800f62a:	f7ff ff13 	bl	800f454 <__multiply>
 800f62e:	6020      	str	r0, [r4, #0]
 800f630:	f8c0 9000 	str.w	r9, [r0]
 800f634:	4604      	mov	r4, r0
 800f636:	e7e4      	b.n	800f602 <__pow5mult+0x6a>
 800f638:	4630      	mov	r0, r6
 800f63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f63e:	bf00      	nop
 800f640:	08012aa8 	.word	0x08012aa8
 800f644:	080128fa 	.word	0x080128fa
 800f648:	0801297a 	.word	0x0801297a

0800f64c <__lshift>:
 800f64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f650:	460c      	mov	r4, r1
 800f652:	4607      	mov	r7, r0
 800f654:	4691      	mov	r9, r2
 800f656:	6923      	ldr	r3, [r4, #16]
 800f658:	6849      	ldr	r1, [r1, #4]
 800f65a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f65e:	68a3      	ldr	r3, [r4, #8]
 800f660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f664:	f108 0601 	add.w	r6, r8, #1
 800f668:	42b3      	cmp	r3, r6
 800f66a:	db0b      	blt.n	800f684 <__lshift+0x38>
 800f66c:	4638      	mov	r0, r7
 800f66e:	f7ff fd9d 	bl	800f1ac <_Balloc>
 800f672:	4605      	mov	r5, r0
 800f674:	b948      	cbnz	r0, 800f68a <__lshift+0x3e>
 800f676:	4602      	mov	r2, r0
 800f678:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f67c:	4b27      	ldr	r3, [pc, #156]	@ (800f71c <__lshift+0xd0>)
 800f67e:	4828      	ldr	r0, [pc, #160]	@ (800f720 <__lshift+0xd4>)
 800f680:	f001 fe7a 	bl	8011378 <__assert_func>
 800f684:	3101      	adds	r1, #1
 800f686:	005b      	lsls	r3, r3, #1
 800f688:	e7ee      	b.n	800f668 <__lshift+0x1c>
 800f68a:	2300      	movs	r3, #0
 800f68c:	f100 0114 	add.w	r1, r0, #20
 800f690:	f100 0210 	add.w	r2, r0, #16
 800f694:	4618      	mov	r0, r3
 800f696:	4553      	cmp	r3, sl
 800f698:	db33      	blt.n	800f702 <__lshift+0xb6>
 800f69a:	6920      	ldr	r0, [r4, #16]
 800f69c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6a0:	f104 0314 	add.w	r3, r4, #20
 800f6a4:	f019 091f 	ands.w	r9, r9, #31
 800f6a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6b0:	d02b      	beq.n	800f70a <__lshift+0xbe>
 800f6b2:	468a      	mov	sl, r1
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f1c9 0e20 	rsb	lr, r9, #32
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	fa00 f009 	lsl.w	r0, r0, r9
 800f6c0:	4310      	orrs	r0, r2
 800f6c2:	f84a 0b04 	str.w	r0, [sl], #4
 800f6c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ca:	459c      	cmp	ip, r3
 800f6cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6d0:	d8f3      	bhi.n	800f6ba <__lshift+0x6e>
 800f6d2:	ebac 0304 	sub.w	r3, ip, r4
 800f6d6:	3b15      	subs	r3, #21
 800f6d8:	f023 0303 	bic.w	r3, r3, #3
 800f6dc:	3304      	adds	r3, #4
 800f6de:	f104 0015 	add.w	r0, r4, #21
 800f6e2:	4560      	cmp	r0, ip
 800f6e4:	bf88      	it	hi
 800f6e6:	2304      	movhi	r3, #4
 800f6e8:	50ca      	str	r2, [r1, r3]
 800f6ea:	b10a      	cbz	r2, 800f6f0 <__lshift+0xa4>
 800f6ec:	f108 0602 	add.w	r6, r8, #2
 800f6f0:	3e01      	subs	r6, #1
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	612e      	str	r6, [r5, #16]
 800f6f8:	f7ff fd98 	bl	800f22c <_Bfree>
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f702:	f842 0f04 	str.w	r0, [r2, #4]!
 800f706:	3301      	adds	r3, #1
 800f708:	e7c5      	b.n	800f696 <__lshift+0x4a>
 800f70a:	3904      	subs	r1, #4
 800f70c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f710:	459c      	cmp	ip, r3
 800f712:	f841 2f04 	str.w	r2, [r1, #4]!
 800f716:	d8f9      	bhi.n	800f70c <__lshift+0xc0>
 800f718:	e7ea      	b.n	800f6f0 <__lshift+0xa4>
 800f71a:	bf00      	nop
 800f71c:	08012969 	.word	0x08012969
 800f720:	0801297a 	.word	0x0801297a

0800f724 <__mcmp>:
 800f724:	4603      	mov	r3, r0
 800f726:	690a      	ldr	r2, [r1, #16]
 800f728:	6900      	ldr	r0, [r0, #16]
 800f72a:	b530      	push	{r4, r5, lr}
 800f72c:	1a80      	subs	r0, r0, r2
 800f72e:	d10e      	bne.n	800f74e <__mcmp+0x2a>
 800f730:	3314      	adds	r3, #20
 800f732:	3114      	adds	r1, #20
 800f734:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f738:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f73c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f740:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f744:	4295      	cmp	r5, r2
 800f746:	d003      	beq.n	800f750 <__mcmp+0x2c>
 800f748:	d205      	bcs.n	800f756 <__mcmp+0x32>
 800f74a:	f04f 30ff 	mov.w	r0, #4294967295
 800f74e:	bd30      	pop	{r4, r5, pc}
 800f750:	42a3      	cmp	r3, r4
 800f752:	d3f3      	bcc.n	800f73c <__mcmp+0x18>
 800f754:	e7fb      	b.n	800f74e <__mcmp+0x2a>
 800f756:	2001      	movs	r0, #1
 800f758:	e7f9      	b.n	800f74e <__mcmp+0x2a>
	...

0800f75c <__mdiff>:
 800f75c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f760:	4689      	mov	r9, r1
 800f762:	4606      	mov	r6, r0
 800f764:	4611      	mov	r1, r2
 800f766:	4648      	mov	r0, r9
 800f768:	4614      	mov	r4, r2
 800f76a:	f7ff ffdb 	bl	800f724 <__mcmp>
 800f76e:	1e05      	subs	r5, r0, #0
 800f770:	d112      	bne.n	800f798 <__mdiff+0x3c>
 800f772:	4629      	mov	r1, r5
 800f774:	4630      	mov	r0, r6
 800f776:	f7ff fd19 	bl	800f1ac <_Balloc>
 800f77a:	4602      	mov	r2, r0
 800f77c:	b928      	cbnz	r0, 800f78a <__mdiff+0x2e>
 800f77e:	f240 2137 	movw	r1, #567	@ 0x237
 800f782:	4b3e      	ldr	r3, [pc, #248]	@ (800f87c <__mdiff+0x120>)
 800f784:	483e      	ldr	r0, [pc, #248]	@ (800f880 <__mdiff+0x124>)
 800f786:	f001 fdf7 	bl	8011378 <__assert_func>
 800f78a:	2301      	movs	r3, #1
 800f78c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f790:	4610      	mov	r0, r2
 800f792:	b003      	add	sp, #12
 800f794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f798:	bfbc      	itt	lt
 800f79a:	464b      	movlt	r3, r9
 800f79c:	46a1      	movlt	r9, r4
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f7a4:	bfba      	itte	lt
 800f7a6:	461c      	movlt	r4, r3
 800f7a8:	2501      	movlt	r5, #1
 800f7aa:	2500      	movge	r5, #0
 800f7ac:	f7ff fcfe 	bl	800f1ac <_Balloc>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	b918      	cbnz	r0, 800f7bc <__mdiff+0x60>
 800f7b4:	f240 2145 	movw	r1, #581	@ 0x245
 800f7b8:	4b30      	ldr	r3, [pc, #192]	@ (800f87c <__mdiff+0x120>)
 800f7ba:	e7e3      	b.n	800f784 <__mdiff+0x28>
 800f7bc:	f100 0b14 	add.w	fp, r0, #20
 800f7c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f7c4:	f109 0310 	add.w	r3, r9, #16
 800f7c8:	60c5      	str	r5, [r0, #12]
 800f7ca:	f04f 0c00 	mov.w	ip, #0
 800f7ce:	f109 0514 	add.w	r5, r9, #20
 800f7d2:	46d9      	mov	r9, fp
 800f7d4:	6926      	ldr	r6, [r4, #16]
 800f7d6:	f104 0e14 	add.w	lr, r4, #20
 800f7da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f7de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	9b01      	ldr	r3, [sp, #4]
 800f7e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f7ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f7ee:	b281      	uxth	r1, r0
 800f7f0:	9301      	str	r3, [sp, #4]
 800f7f2:	fa1f f38a 	uxth.w	r3, sl
 800f7f6:	1a5b      	subs	r3, r3, r1
 800f7f8:	0c00      	lsrs	r0, r0, #16
 800f7fa:	4463      	add	r3, ip
 800f7fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f800:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f804:	b29b      	uxth	r3, r3
 800f806:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f80a:	4576      	cmp	r6, lr
 800f80c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f810:	f849 3b04 	str.w	r3, [r9], #4
 800f814:	d8e6      	bhi.n	800f7e4 <__mdiff+0x88>
 800f816:	1b33      	subs	r3, r6, r4
 800f818:	3b15      	subs	r3, #21
 800f81a:	f023 0303 	bic.w	r3, r3, #3
 800f81e:	3415      	adds	r4, #21
 800f820:	3304      	adds	r3, #4
 800f822:	42a6      	cmp	r6, r4
 800f824:	bf38      	it	cc
 800f826:	2304      	movcc	r3, #4
 800f828:	441d      	add	r5, r3
 800f82a:	445b      	add	r3, fp
 800f82c:	461e      	mov	r6, r3
 800f82e:	462c      	mov	r4, r5
 800f830:	4544      	cmp	r4, r8
 800f832:	d30e      	bcc.n	800f852 <__mdiff+0xf6>
 800f834:	f108 0103 	add.w	r1, r8, #3
 800f838:	1b49      	subs	r1, r1, r5
 800f83a:	f021 0103 	bic.w	r1, r1, #3
 800f83e:	3d03      	subs	r5, #3
 800f840:	45a8      	cmp	r8, r5
 800f842:	bf38      	it	cc
 800f844:	2100      	movcc	r1, #0
 800f846:	440b      	add	r3, r1
 800f848:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f84c:	b199      	cbz	r1, 800f876 <__mdiff+0x11a>
 800f84e:	6117      	str	r7, [r2, #16]
 800f850:	e79e      	b.n	800f790 <__mdiff+0x34>
 800f852:	46e6      	mov	lr, ip
 800f854:	f854 1b04 	ldr.w	r1, [r4], #4
 800f858:	fa1f fc81 	uxth.w	ip, r1
 800f85c:	44f4      	add	ip, lr
 800f85e:	0c08      	lsrs	r0, r1, #16
 800f860:	4471      	add	r1, lr
 800f862:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f866:	b289      	uxth	r1, r1
 800f868:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f86c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f870:	f846 1b04 	str.w	r1, [r6], #4
 800f874:	e7dc      	b.n	800f830 <__mdiff+0xd4>
 800f876:	3f01      	subs	r7, #1
 800f878:	e7e6      	b.n	800f848 <__mdiff+0xec>
 800f87a:	bf00      	nop
 800f87c:	08012969 	.word	0x08012969
 800f880:	0801297a 	.word	0x0801297a

0800f884 <__ulp>:
 800f884:	4b0e      	ldr	r3, [pc, #56]	@ (800f8c0 <__ulp+0x3c>)
 800f886:	400b      	ands	r3, r1
 800f888:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	dc08      	bgt.n	800f8a2 <__ulp+0x1e>
 800f890:	425b      	negs	r3, r3
 800f892:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f896:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f89a:	da04      	bge.n	800f8a6 <__ulp+0x22>
 800f89c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f8a0:	4113      	asrs	r3, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	e008      	b.n	800f8b8 <__ulp+0x34>
 800f8a6:	f1a2 0314 	sub.w	r3, r2, #20
 800f8aa:	2b1e      	cmp	r3, #30
 800f8ac:	bfd6      	itet	le
 800f8ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f8b2:	2201      	movgt	r2, #1
 800f8b4:	40da      	lsrle	r2, r3
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4610      	mov	r0, r2
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	7ff00000 	.word	0x7ff00000

0800f8c4 <__b2d>:
 800f8c4:	6902      	ldr	r2, [r0, #16]
 800f8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c8:	f100 0614 	add.w	r6, r0, #20
 800f8cc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800f8d0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800f8d4:	4f1e      	ldr	r7, [pc, #120]	@ (800f950 <__b2d+0x8c>)
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f7ff fd5a 	bl	800f390 <__hi0bits>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	f1c0 0020 	rsb	r0, r0, #32
 800f8e2:	2b0a      	cmp	r3, #10
 800f8e4:	f1a2 0504 	sub.w	r5, r2, #4
 800f8e8:	6008      	str	r0, [r1, #0]
 800f8ea:	dc12      	bgt.n	800f912 <__b2d+0x4e>
 800f8ec:	42ae      	cmp	r6, r5
 800f8ee:	bf2c      	ite	cs
 800f8f0:	2200      	movcs	r2, #0
 800f8f2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800f8f6:	f1c3 0c0b 	rsb	ip, r3, #11
 800f8fa:	3315      	adds	r3, #21
 800f8fc:	fa24 fe0c 	lsr.w	lr, r4, ip
 800f900:	fa04 f303 	lsl.w	r3, r4, r3
 800f904:	fa22 f20c 	lsr.w	r2, r2, ip
 800f908:	ea4e 0107 	orr.w	r1, lr, r7
 800f90c:	431a      	orrs	r2, r3
 800f90e:	4610      	mov	r0, r2
 800f910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f912:	42ae      	cmp	r6, r5
 800f914:	bf36      	itet	cc
 800f916:	f1a2 0508 	subcc.w	r5, r2, #8
 800f91a:	2200      	movcs	r2, #0
 800f91c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800f920:	3b0b      	subs	r3, #11
 800f922:	d012      	beq.n	800f94a <__b2d+0x86>
 800f924:	f1c3 0720 	rsb	r7, r3, #32
 800f928:	fa22 f107 	lsr.w	r1, r2, r7
 800f92c:	409c      	lsls	r4, r3
 800f92e:	430c      	orrs	r4, r1
 800f930:	42b5      	cmp	r5, r6
 800f932:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800f936:	bf94      	ite	ls
 800f938:	2400      	movls	r4, #0
 800f93a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800f93e:	409a      	lsls	r2, r3
 800f940:	40fc      	lsrs	r4, r7
 800f942:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f946:	4322      	orrs	r2, r4
 800f948:	e7e1      	b.n	800f90e <__b2d+0x4a>
 800f94a:	ea44 0107 	orr.w	r1, r4, r7
 800f94e:	e7de      	b.n	800f90e <__b2d+0x4a>
 800f950:	3ff00000 	.word	0x3ff00000

0800f954 <__d2b>:
 800f954:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800f958:	2101      	movs	r1, #1
 800f95a:	4690      	mov	r8, r2
 800f95c:	4699      	mov	r9, r3
 800f95e:	9e08      	ldr	r6, [sp, #32]
 800f960:	f7ff fc24 	bl	800f1ac <_Balloc>
 800f964:	4604      	mov	r4, r0
 800f966:	b930      	cbnz	r0, 800f976 <__d2b+0x22>
 800f968:	4602      	mov	r2, r0
 800f96a:	f240 310f 	movw	r1, #783	@ 0x30f
 800f96e:	4b23      	ldr	r3, [pc, #140]	@ (800f9fc <__d2b+0xa8>)
 800f970:	4823      	ldr	r0, [pc, #140]	@ (800fa00 <__d2b+0xac>)
 800f972:	f001 fd01 	bl	8011378 <__assert_func>
 800f976:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f97a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f97e:	b10d      	cbz	r5, 800f984 <__d2b+0x30>
 800f980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f984:	9301      	str	r3, [sp, #4]
 800f986:	f1b8 0300 	subs.w	r3, r8, #0
 800f98a:	d024      	beq.n	800f9d6 <__d2b+0x82>
 800f98c:	4668      	mov	r0, sp
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	f7ff fd1d 	bl	800f3ce <__lo0bits>
 800f994:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f998:	b1d8      	cbz	r0, 800f9d2 <__d2b+0x7e>
 800f99a:	f1c0 0320 	rsb	r3, r0, #32
 800f99e:	fa02 f303 	lsl.w	r3, r2, r3
 800f9a2:	430b      	orrs	r3, r1
 800f9a4:	40c2      	lsrs	r2, r0
 800f9a6:	6163      	str	r3, [r4, #20]
 800f9a8:	9201      	str	r2, [sp, #4]
 800f9aa:	9b01      	ldr	r3, [sp, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bf0c      	ite	eq
 800f9b0:	2201      	moveq	r2, #1
 800f9b2:	2202      	movne	r2, #2
 800f9b4:	61a3      	str	r3, [r4, #24]
 800f9b6:	6122      	str	r2, [r4, #16]
 800f9b8:	b1ad      	cbz	r5, 800f9e6 <__d2b+0x92>
 800f9ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f9be:	4405      	add	r5, r0
 800f9c0:	6035      	str	r5, [r6, #0]
 800f9c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9c8:	6018      	str	r0, [r3, #0]
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	b002      	add	sp, #8
 800f9ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f9d2:	6161      	str	r1, [r4, #20]
 800f9d4:	e7e9      	b.n	800f9aa <__d2b+0x56>
 800f9d6:	a801      	add	r0, sp, #4
 800f9d8:	f7ff fcf9 	bl	800f3ce <__lo0bits>
 800f9dc:	9b01      	ldr	r3, [sp, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	6163      	str	r3, [r4, #20]
 800f9e2:	3020      	adds	r0, #32
 800f9e4:	e7e7      	b.n	800f9b6 <__d2b+0x62>
 800f9e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f9ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9ee:	6030      	str	r0, [r6, #0]
 800f9f0:	6918      	ldr	r0, [r3, #16]
 800f9f2:	f7ff fccd 	bl	800f390 <__hi0bits>
 800f9f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9fa:	e7e4      	b.n	800f9c6 <__d2b+0x72>
 800f9fc:	08012969 	.word	0x08012969
 800fa00:	0801297a 	.word	0x0801297a

0800fa04 <__ratio>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	b085      	sub	sp, #20
 800fa0a:	e9cd 1000 	strd	r1, r0, [sp]
 800fa0e:	a902      	add	r1, sp, #8
 800fa10:	f7ff ff58 	bl	800f8c4 <__b2d>
 800fa14:	468b      	mov	fp, r1
 800fa16:	4606      	mov	r6, r0
 800fa18:	460f      	mov	r7, r1
 800fa1a:	9800      	ldr	r0, [sp, #0]
 800fa1c:	a903      	add	r1, sp, #12
 800fa1e:	f7ff ff51 	bl	800f8c4 <__b2d>
 800fa22:	460d      	mov	r5, r1
 800fa24:	9b01      	ldr	r3, [sp, #4]
 800fa26:	4689      	mov	r9, r1
 800fa28:	6919      	ldr	r1, [r3, #16]
 800fa2a:	9b00      	ldr	r3, [sp, #0]
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	4630      	mov	r0, r6
 800fa32:	1ac9      	subs	r1, r1, r3
 800fa34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fa38:	1a9b      	subs	r3, r3, r2
 800fa3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	bfcd      	iteet	gt
 800fa42:	463a      	movgt	r2, r7
 800fa44:	462a      	movle	r2, r5
 800fa46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa4a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800fa4e:	bfd8      	it	le
 800fa50:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fa54:	464b      	mov	r3, r9
 800fa56:	4622      	mov	r2, r4
 800fa58:	4659      	mov	r1, fp
 800fa5a:	f7f0 fe67 	bl	800072c <__aeabi_ddiv>
 800fa5e:	b005      	add	sp, #20
 800fa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa64 <__copybits>:
 800fa64:	3901      	subs	r1, #1
 800fa66:	b570      	push	{r4, r5, r6, lr}
 800fa68:	1149      	asrs	r1, r1, #5
 800fa6a:	6914      	ldr	r4, [r2, #16]
 800fa6c:	3101      	adds	r1, #1
 800fa6e:	f102 0314 	add.w	r3, r2, #20
 800fa72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa7a:	1f05      	subs	r5, r0, #4
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	d30c      	bcc.n	800fa9a <__copybits+0x36>
 800fa80:	1aa3      	subs	r3, r4, r2
 800fa82:	3b11      	subs	r3, #17
 800fa84:	f023 0303 	bic.w	r3, r3, #3
 800fa88:	3211      	adds	r2, #17
 800fa8a:	42a2      	cmp	r2, r4
 800fa8c:	bf88      	it	hi
 800fa8e:	2300      	movhi	r3, #0
 800fa90:	4418      	add	r0, r3
 800fa92:	2300      	movs	r3, #0
 800fa94:	4288      	cmp	r0, r1
 800fa96:	d305      	bcc.n	800faa4 <__copybits+0x40>
 800fa98:	bd70      	pop	{r4, r5, r6, pc}
 800fa9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800faa2:	e7eb      	b.n	800fa7c <__copybits+0x18>
 800faa4:	f840 3b04 	str.w	r3, [r0], #4
 800faa8:	e7f4      	b.n	800fa94 <__copybits+0x30>

0800faaa <__any_on>:
 800faaa:	f100 0214 	add.w	r2, r0, #20
 800faae:	6900      	ldr	r0, [r0, #16]
 800fab0:	114b      	asrs	r3, r1, #5
 800fab2:	4298      	cmp	r0, r3
 800fab4:	b510      	push	{r4, lr}
 800fab6:	db11      	blt.n	800fadc <__any_on+0x32>
 800fab8:	dd0a      	ble.n	800fad0 <__any_on+0x26>
 800faba:	f011 011f 	ands.w	r1, r1, #31
 800fabe:	d007      	beq.n	800fad0 <__any_on+0x26>
 800fac0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fac4:	fa24 f001 	lsr.w	r0, r4, r1
 800fac8:	fa00 f101 	lsl.w	r1, r0, r1
 800facc:	428c      	cmp	r4, r1
 800face:	d10b      	bne.n	800fae8 <__any_on+0x3e>
 800fad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d803      	bhi.n	800fae0 <__any_on+0x36>
 800fad8:	2000      	movs	r0, #0
 800fada:	bd10      	pop	{r4, pc}
 800fadc:	4603      	mov	r3, r0
 800fade:	e7f7      	b.n	800fad0 <__any_on+0x26>
 800fae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fae4:	2900      	cmp	r1, #0
 800fae6:	d0f5      	beq.n	800fad4 <__any_on+0x2a>
 800fae8:	2001      	movs	r0, #1
 800faea:	e7f6      	b.n	800fada <__any_on+0x30>

0800faec <sulp>:
 800faec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf0:	460f      	mov	r7, r1
 800faf2:	4690      	mov	r8, r2
 800faf4:	f7ff fec6 	bl	800f884 <__ulp>
 800faf8:	4604      	mov	r4, r0
 800fafa:	460d      	mov	r5, r1
 800fafc:	f1b8 0f00 	cmp.w	r8, #0
 800fb00:	d011      	beq.n	800fb26 <sulp+0x3a>
 800fb02:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fb06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dd0b      	ble.n	800fb26 <sulp+0x3a>
 800fb0e:	2400      	movs	r4, #0
 800fb10:	051b      	lsls	r3, r3, #20
 800fb12:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fb16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fb1a:	4622      	mov	r2, r4
 800fb1c:	462b      	mov	r3, r5
 800fb1e:	f7f0 fcdb 	bl	80004d8 <__aeabi_dmul>
 800fb22:	4604      	mov	r4, r0
 800fb24:	460d      	mov	r5, r1
 800fb26:	4620      	mov	r0, r4
 800fb28:	4629      	mov	r1, r5
 800fb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800fb30 <_strtod_l>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	b09f      	sub	sp, #124	@ 0x7c
 800fb36:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fb38:	2200      	movs	r2, #0
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800fb3e:	f04f 0a00 	mov.w	sl, #0
 800fb42:	f04f 0b00 	mov.w	fp, #0
 800fb46:	460a      	mov	r2, r1
 800fb48:	9005      	str	r0, [sp, #20]
 800fb4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb4c:	7811      	ldrb	r1, [r2, #0]
 800fb4e:	292b      	cmp	r1, #43	@ 0x2b
 800fb50:	d048      	beq.n	800fbe4 <_strtod_l+0xb4>
 800fb52:	d836      	bhi.n	800fbc2 <_strtod_l+0x92>
 800fb54:	290d      	cmp	r1, #13
 800fb56:	d830      	bhi.n	800fbba <_strtod_l+0x8a>
 800fb58:	2908      	cmp	r1, #8
 800fb5a:	d830      	bhi.n	800fbbe <_strtod_l+0x8e>
 800fb5c:	2900      	cmp	r1, #0
 800fb5e:	d039      	beq.n	800fbd4 <_strtod_l+0xa4>
 800fb60:	2200      	movs	r2, #0
 800fb62:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fb66:	782a      	ldrb	r2, [r5, #0]
 800fb68:	2a30      	cmp	r2, #48	@ 0x30
 800fb6a:	f040 80b0 	bne.w	800fcce <_strtod_l+0x19e>
 800fb6e:	786a      	ldrb	r2, [r5, #1]
 800fb70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fb74:	2a58      	cmp	r2, #88	@ 0x58
 800fb76:	d16c      	bne.n	800fc52 <_strtod_l+0x122>
 800fb78:	9302      	str	r3, [sp, #8]
 800fb7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb7c:	4a8f      	ldr	r2, [pc, #572]	@ (800fdbc <_strtod_l+0x28c>)
 800fb7e:	9301      	str	r3, [sp, #4]
 800fb80:	ab1a      	add	r3, sp, #104	@ 0x68
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	9805      	ldr	r0, [sp, #20]
 800fb86:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fb88:	a919      	add	r1, sp, #100	@ 0x64
 800fb8a:	f001 fc8f 	bl	80114ac <__gethex>
 800fb8e:	f010 060f 	ands.w	r6, r0, #15
 800fb92:	4604      	mov	r4, r0
 800fb94:	d005      	beq.n	800fba2 <_strtod_l+0x72>
 800fb96:	2e06      	cmp	r6, #6
 800fb98:	d126      	bne.n	800fbe8 <_strtod_l+0xb8>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	3501      	adds	r5, #1
 800fb9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fba0:	930e      	str	r3, [sp, #56]	@ 0x38
 800fba2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f040 8582 	bne.w	80106ae <_strtod_l+0xb7e>
 800fbaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbac:	b1bb      	cbz	r3, 800fbde <_strtod_l+0xae>
 800fbae:	4650      	mov	r0, sl
 800fbb0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800fbb4:	b01f      	add	sp, #124	@ 0x7c
 800fbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbba:	2920      	cmp	r1, #32
 800fbbc:	d1d0      	bne.n	800fb60 <_strtod_l+0x30>
 800fbbe:	3201      	adds	r2, #1
 800fbc0:	e7c3      	b.n	800fb4a <_strtod_l+0x1a>
 800fbc2:	292d      	cmp	r1, #45	@ 0x2d
 800fbc4:	d1cc      	bne.n	800fb60 <_strtod_l+0x30>
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	910e      	str	r1, [sp, #56]	@ 0x38
 800fbca:	1c51      	adds	r1, r2, #1
 800fbcc:	9119      	str	r1, [sp, #100]	@ 0x64
 800fbce:	7852      	ldrb	r2, [r2, #1]
 800fbd0:	2a00      	cmp	r2, #0
 800fbd2:	d1c7      	bne.n	800fb64 <_strtod_l+0x34>
 800fbd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fbd6:	9419      	str	r4, [sp, #100]	@ 0x64
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f040 8566 	bne.w	80106aa <_strtod_l+0xb7a>
 800fbde:	4650      	mov	r0, sl
 800fbe0:	4659      	mov	r1, fp
 800fbe2:	e7e7      	b.n	800fbb4 <_strtod_l+0x84>
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	e7ef      	b.n	800fbc8 <_strtod_l+0x98>
 800fbe8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fbea:	b13a      	cbz	r2, 800fbfc <_strtod_l+0xcc>
 800fbec:	2135      	movs	r1, #53	@ 0x35
 800fbee:	a81c      	add	r0, sp, #112	@ 0x70
 800fbf0:	f7ff ff38 	bl	800fa64 <__copybits>
 800fbf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbf6:	9805      	ldr	r0, [sp, #20]
 800fbf8:	f7ff fb18 	bl	800f22c <_Bfree>
 800fbfc:	3e01      	subs	r6, #1
 800fbfe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fc00:	2e04      	cmp	r6, #4
 800fc02:	d806      	bhi.n	800fc12 <_strtod_l+0xe2>
 800fc04:	e8df f006 	tbb	[pc, r6]
 800fc08:	201d0314 	.word	0x201d0314
 800fc0c:	14          	.byte	0x14
 800fc0d:	00          	.byte	0x00
 800fc0e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fc12:	05e1      	lsls	r1, r4, #23
 800fc14:	bf48      	it	mi
 800fc16:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fc1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fc1e:	0d1b      	lsrs	r3, r3, #20
 800fc20:	051b      	lsls	r3, r3, #20
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1bd      	bne.n	800fba2 <_strtod_l+0x72>
 800fc26:	f7fe fb25 	bl	800e274 <__errno>
 800fc2a:	2322      	movs	r3, #34	@ 0x22
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	e7b8      	b.n	800fba2 <_strtod_l+0x72>
 800fc30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fc34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fc38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fc3c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fc40:	e7e7      	b.n	800fc12 <_strtod_l+0xe2>
 800fc42:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fdc0 <_strtod_l+0x290>
 800fc46:	e7e4      	b.n	800fc12 <_strtod_l+0xe2>
 800fc48:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fc4c:	f04f 3aff 	mov.w	sl, #4294967295
 800fc50:	e7df      	b.n	800fc12 <_strtod_l+0xe2>
 800fc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc54:	1c5a      	adds	r2, r3, #1
 800fc56:	9219      	str	r2, [sp, #100]	@ 0x64
 800fc58:	785b      	ldrb	r3, [r3, #1]
 800fc5a:	2b30      	cmp	r3, #48	@ 0x30
 800fc5c:	d0f9      	beq.n	800fc52 <_strtod_l+0x122>
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d09f      	beq.n	800fba2 <_strtod_l+0x72>
 800fc62:	2301      	movs	r3, #1
 800fc64:	2700      	movs	r7, #0
 800fc66:	220a      	movs	r2, #10
 800fc68:	46b9      	mov	r9, r7
 800fc6a:	9308      	str	r3, [sp, #32]
 800fc6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc6e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800fc70:	930c      	str	r3, [sp, #48]	@ 0x30
 800fc72:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fc74:	7805      	ldrb	r5, [r0, #0]
 800fc76:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fc7a:	b2d9      	uxtb	r1, r3
 800fc7c:	2909      	cmp	r1, #9
 800fc7e:	d928      	bls.n	800fcd2 <_strtod_l+0x1a2>
 800fc80:	2201      	movs	r2, #1
 800fc82:	4950      	ldr	r1, [pc, #320]	@ (800fdc4 <_strtod_l+0x294>)
 800fc84:	f7fe fa9a 	bl	800e1bc <strncmp>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	d032      	beq.n	800fcf2 <_strtod_l+0x1c2>
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	462a      	mov	r2, r5
 800fc90:	4603      	mov	r3, r0
 800fc92:	464d      	mov	r5, r9
 800fc94:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc96:	2a65      	cmp	r2, #101	@ 0x65
 800fc98:	d001      	beq.n	800fc9e <_strtod_l+0x16e>
 800fc9a:	2a45      	cmp	r2, #69	@ 0x45
 800fc9c:	d114      	bne.n	800fcc8 <_strtod_l+0x198>
 800fc9e:	b91d      	cbnz	r5, 800fca8 <_strtod_l+0x178>
 800fca0:	9a08      	ldr	r2, [sp, #32]
 800fca2:	4302      	orrs	r2, r0
 800fca4:	d096      	beq.n	800fbd4 <_strtod_l+0xa4>
 800fca6:	2500      	movs	r5, #0
 800fca8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fcaa:	1c62      	adds	r2, r4, #1
 800fcac:	9219      	str	r2, [sp, #100]	@ 0x64
 800fcae:	7862      	ldrb	r2, [r4, #1]
 800fcb0:	2a2b      	cmp	r2, #43	@ 0x2b
 800fcb2:	d07a      	beq.n	800fdaa <_strtod_l+0x27a>
 800fcb4:	2a2d      	cmp	r2, #45	@ 0x2d
 800fcb6:	d07e      	beq.n	800fdb6 <_strtod_l+0x286>
 800fcb8:	f04f 0c00 	mov.w	ip, #0
 800fcbc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fcc0:	2909      	cmp	r1, #9
 800fcc2:	f240 8085 	bls.w	800fdd0 <_strtod_l+0x2a0>
 800fcc6:	9419      	str	r4, [sp, #100]	@ 0x64
 800fcc8:	f04f 0800 	mov.w	r8, #0
 800fccc:	e0a5      	b.n	800fe1a <_strtod_l+0x2ea>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	e7c8      	b.n	800fc64 <_strtod_l+0x134>
 800fcd2:	f1b9 0f08 	cmp.w	r9, #8
 800fcd6:	bfd8      	it	le
 800fcd8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800fcda:	f100 0001 	add.w	r0, r0, #1
 800fcde:	bfd6      	itet	le
 800fce0:	fb02 3301 	mlale	r3, r2, r1, r3
 800fce4:	fb02 3707 	mlagt	r7, r2, r7, r3
 800fce8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800fcea:	f109 0901 	add.w	r9, r9, #1
 800fcee:	9019      	str	r0, [sp, #100]	@ 0x64
 800fcf0:	e7bf      	b.n	800fc72 <_strtod_l+0x142>
 800fcf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	9219      	str	r2, [sp, #100]	@ 0x64
 800fcf8:	785a      	ldrb	r2, [r3, #1]
 800fcfa:	f1b9 0f00 	cmp.w	r9, #0
 800fcfe:	d03b      	beq.n	800fd78 <_strtod_l+0x248>
 800fd00:	464d      	mov	r5, r9
 800fd02:	900a      	str	r0, [sp, #40]	@ 0x28
 800fd04:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fd08:	2b09      	cmp	r3, #9
 800fd0a:	d912      	bls.n	800fd32 <_strtod_l+0x202>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e7c2      	b.n	800fc96 <_strtod_l+0x166>
 800fd10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd12:	3001      	adds	r0, #1
 800fd14:	1c5a      	adds	r2, r3, #1
 800fd16:	9219      	str	r2, [sp, #100]	@ 0x64
 800fd18:	785a      	ldrb	r2, [r3, #1]
 800fd1a:	2a30      	cmp	r2, #48	@ 0x30
 800fd1c:	d0f8      	beq.n	800fd10 <_strtod_l+0x1e0>
 800fd1e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fd22:	2b08      	cmp	r3, #8
 800fd24:	f200 84c8 	bhi.w	80106b8 <_strtod_l+0xb88>
 800fd28:	900a      	str	r0, [sp, #40]	@ 0x28
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd30:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd32:	3a30      	subs	r2, #48	@ 0x30
 800fd34:	f100 0301 	add.w	r3, r0, #1
 800fd38:	d018      	beq.n	800fd6c <_strtod_l+0x23c>
 800fd3a:	462e      	mov	r6, r5
 800fd3c:	f04f 0e0a 	mov.w	lr, #10
 800fd40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd42:	4419      	add	r1, r3
 800fd44:	910a      	str	r1, [sp, #40]	@ 0x28
 800fd46:	1c71      	adds	r1, r6, #1
 800fd48:	eba1 0c05 	sub.w	ip, r1, r5
 800fd4c:	4563      	cmp	r3, ip
 800fd4e:	dc15      	bgt.n	800fd7c <_strtod_l+0x24c>
 800fd50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800fd54:	182b      	adds	r3, r5, r0
 800fd56:	2b08      	cmp	r3, #8
 800fd58:	f105 0501 	add.w	r5, r5, #1
 800fd5c:	4405      	add	r5, r0
 800fd5e:	dc1a      	bgt.n	800fd96 <_strtod_l+0x266>
 800fd60:	230a      	movs	r3, #10
 800fd62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd64:	fb03 2301 	mla	r3, r3, r1, r2
 800fd68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fd6e:	4618      	mov	r0, r3
 800fd70:	1c51      	adds	r1, r2, #1
 800fd72:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd74:	7852      	ldrb	r2, [r2, #1]
 800fd76:	e7c5      	b.n	800fd04 <_strtod_l+0x1d4>
 800fd78:	4648      	mov	r0, r9
 800fd7a:	e7ce      	b.n	800fd1a <_strtod_l+0x1ea>
 800fd7c:	2e08      	cmp	r6, #8
 800fd7e:	dc05      	bgt.n	800fd8c <_strtod_l+0x25c>
 800fd80:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fd82:	fb0e f606 	mul.w	r6, lr, r6
 800fd86:	960b      	str	r6, [sp, #44]	@ 0x2c
 800fd88:	460e      	mov	r6, r1
 800fd8a:	e7dc      	b.n	800fd46 <_strtod_l+0x216>
 800fd8c:	2910      	cmp	r1, #16
 800fd8e:	bfd8      	it	le
 800fd90:	fb0e f707 	mulle.w	r7, lr, r7
 800fd94:	e7f8      	b.n	800fd88 <_strtod_l+0x258>
 800fd96:	2b0f      	cmp	r3, #15
 800fd98:	bfdc      	itt	le
 800fd9a:	230a      	movle	r3, #10
 800fd9c:	fb03 2707 	mlale	r7, r3, r7, r2
 800fda0:	e7e3      	b.n	800fd6a <_strtod_l+0x23a>
 800fda2:	2300      	movs	r3, #0
 800fda4:	930a      	str	r3, [sp, #40]	@ 0x28
 800fda6:	2301      	movs	r3, #1
 800fda8:	e77a      	b.n	800fca0 <_strtod_l+0x170>
 800fdaa:	f04f 0c00 	mov.w	ip, #0
 800fdae:	1ca2      	adds	r2, r4, #2
 800fdb0:	9219      	str	r2, [sp, #100]	@ 0x64
 800fdb2:	78a2      	ldrb	r2, [r4, #2]
 800fdb4:	e782      	b.n	800fcbc <_strtod_l+0x18c>
 800fdb6:	f04f 0c01 	mov.w	ip, #1
 800fdba:	e7f8      	b.n	800fdae <_strtod_l+0x27e>
 800fdbc:	08012bbc 	.word	0x08012bbc
 800fdc0:	7ff00000 	.word	0x7ff00000
 800fdc4:	080129d3 	.word	0x080129d3
 800fdc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fdca:	1c51      	adds	r1, r2, #1
 800fdcc:	9119      	str	r1, [sp, #100]	@ 0x64
 800fdce:	7852      	ldrb	r2, [r2, #1]
 800fdd0:	2a30      	cmp	r2, #48	@ 0x30
 800fdd2:	d0f9      	beq.n	800fdc8 <_strtod_l+0x298>
 800fdd4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fdd8:	2908      	cmp	r1, #8
 800fdda:	f63f af75 	bhi.w	800fcc8 <_strtod_l+0x198>
 800fdde:	f04f 080a 	mov.w	r8, #10
 800fde2:	3a30      	subs	r2, #48	@ 0x30
 800fde4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fde6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fde8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fdea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fdec:	1c56      	adds	r6, r2, #1
 800fdee:	9619      	str	r6, [sp, #100]	@ 0x64
 800fdf0:	7852      	ldrb	r2, [r2, #1]
 800fdf2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fdf6:	f1be 0f09 	cmp.w	lr, #9
 800fdfa:	d939      	bls.n	800fe70 <_strtod_l+0x340>
 800fdfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fdfe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fe02:	1a76      	subs	r6, r6, r1
 800fe04:	2e08      	cmp	r6, #8
 800fe06:	dc03      	bgt.n	800fe10 <_strtod_l+0x2e0>
 800fe08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe0a:	4588      	cmp	r8, r1
 800fe0c:	bfa8      	it	ge
 800fe0e:	4688      	movge	r8, r1
 800fe10:	f1bc 0f00 	cmp.w	ip, #0
 800fe14:	d001      	beq.n	800fe1a <_strtod_l+0x2ea>
 800fe16:	f1c8 0800 	rsb	r8, r8, #0
 800fe1a:	2d00      	cmp	r5, #0
 800fe1c:	d14e      	bne.n	800febc <_strtod_l+0x38c>
 800fe1e:	9908      	ldr	r1, [sp, #32]
 800fe20:	4308      	orrs	r0, r1
 800fe22:	f47f aebe 	bne.w	800fba2 <_strtod_l+0x72>
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f47f aed4 	bne.w	800fbd4 <_strtod_l+0xa4>
 800fe2c:	2a69      	cmp	r2, #105	@ 0x69
 800fe2e:	d028      	beq.n	800fe82 <_strtod_l+0x352>
 800fe30:	dc25      	bgt.n	800fe7e <_strtod_l+0x34e>
 800fe32:	2a49      	cmp	r2, #73	@ 0x49
 800fe34:	d025      	beq.n	800fe82 <_strtod_l+0x352>
 800fe36:	2a4e      	cmp	r2, #78	@ 0x4e
 800fe38:	f47f aecc 	bne.w	800fbd4 <_strtod_l+0xa4>
 800fe3c:	4999      	ldr	r1, [pc, #612]	@ (80100a4 <_strtod_l+0x574>)
 800fe3e:	a819      	add	r0, sp, #100	@ 0x64
 800fe40:	f001 fd56 	bl	80118f0 <__match>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	f43f aec5 	beq.w	800fbd4 <_strtod_l+0xa4>
 800fe4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	2b28      	cmp	r3, #40	@ 0x28
 800fe50:	d12e      	bne.n	800feb0 <_strtod_l+0x380>
 800fe52:	4995      	ldr	r1, [pc, #596]	@ (80100a8 <_strtod_l+0x578>)
 800fe54:	aa1c      	add	r2, sp, #112	@ 0x70
 800fe56:	a819      	add	r0, sp, #100	@ 0x64
 800fe58:	f001 fd5e 	bl	8011918 <__hexnan>
 800fe5c:	2805      	cmp	r0, #5
 800fe5e:	d127      	bne.n	800feb0 <_strtod_l+0x380>
 800fe60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fe62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fe66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fe6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fe6e:	e698      	b.n	800fba2 <_strtod_l+0x72>
 800fe70:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe72:	fb08 2101 	mla	r1, r8, r1, r2
 800fe76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fe7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe7c:	e7b5      	b.n	800fdea <_strtod_l+0x2ba>
 800fe7e:	2a6e      	cmp	r2, #110	@ 0x6e
 800fe80:	e7da      	b.n	800fe38 <_strtod_l+0x308>
 800fe82:	498a      	ldr	r1, [pc, #552]	@ (80100ac <_strtod_l+0x57c>)
 800fe84:	a819      	add	r0, sp, #100	@ 0x64
 800fe86:	f001 fd33 	bl	80118f0 <__match>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	f43f aea2 	beq.w	800fbd4 <_strtod_l+0xa4>
 800fe90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe92:	4987      	ldr	r1, [pc, #540]	@ (80100b0 <_strtod_l+0x580>)
 800fe94:	3b01      	subs	r3, #1
 800fe96:	a819      	add	r0, sp, #100	@ 0x64
 800fe98:	9319      	str	r3, [sp, #100]	@ 0x64
 800fe9a:	f001 fd29 	bl	80118f0 <__match>
 800fe9e:	b910      	cbnz	r0, 800fea6 <_strtod_l+0x376>
 800fea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fea2:	3301      	adds	r3, #1
 800fea4:	9319      	str	r3, [sp, #100]	@ 0x64
 800fea6:	f04f 0a00 	mov.w	sl, #0
 800feaa:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80100b4 <_strtod_l+0x584>
 800feae:	e678      	b.n	800fba2 <_strtod_l+0x72>
 800feb0:	4881      	ldr	r0, [pc, #516]	@ (80100b8 <_strtod_l+0x588>)
 800feb2:	f001 fa5b 	bl	801136c <nan>
 800feb6:	4682      	mov	sl, r0
 800feb8:	468b      	mov	fp, r1
 800feba:	e672      	b.n	800fba2 <_strtod_l+0x72>
 800febc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800febe:	f1b9 0f00 	cmp.w	r9, #0
 800fec2:	bf08      	it	eq
 800fec4:	46a9      	moveq	r9, r5
 800fec6:	eba8 0303 	sub.w	r3, r8, r3
 800feca:	2d10      	cmp	r5, #16
 800fecc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fece:	462c      	mov	r4, r5
 800fed0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fed2:	bfa8      	it	ge
 800fed4:	2410      	movge	r4, #16
 800fed6:	f7f0 fa85 	bl	80003e4 <__aeabi_ui2d>
 800feda:	2d09      	cmp	r5, #9
 800fedc:	4682      	mov	sl, r0
 800fede:	468b      	mov	fp, r1
 800fee0:	dc11      	bgt.n	800ff06 <_strtod_l+0x3d6>
 800fee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f43f ae5c 	beq.w	800fba2 <_strtod_l+0x72>
 800feea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feec:	dd76      	ble.n	800ffdc <_strtod_l+0x4ac>
 800feee:	2b16      	cmp	r3, #22
 800fef0:	dc5d      	bgt.n	800ffae <_strtod_l+0x47e>
 800fef2:	4972      	ldr	r1, [pc, #456]	@ (80100bc <_strtod_l+0x58c>)
 800fef4:	4652      	mov	r2, sl
 800fef6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fefa:	465b      	mov	r3, fp
 800fefc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff00:	f7f0 faea 	bl	80004d8 <__aeabi_dmul>
 800ff04:	e7d7      	b.n	800feb6 <_strtod_l+0x386>
 800ff06:	4b6d      	ldr	r3, [pc, #436]	@ (80100bc <_strtod_l+0x58c>)
 800ff08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ff10:	f7f0 fae2 	bl	80004d8 <__aeabi_dmul>
 800ff14:	4682      	mov	sl, r0
 800ff16:	4638      	mov	r0, r7
 800ff18:	468b      	mov	fp, r1
 800ff1a:	f7f0 fa63 	bl	80003e4 <__aeabi_ui2d>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	460b      	mov	r3, r1
 800ff22:	4650      	mov	r0, sl
 800ff24:	4659      	mov	r1, fp
 800ff26:	f7f0 f921 	bl	800016c <__adddf3>
 800ff2a:	2d0f      	cmp	r5, #15
 800ff2c:	4682      	mov	sl, r0
 800ff2e:	468b      	mov	fp, r1
 800ff30:	ddd7      	ble.n	800fee2 <_strtod_l+0x3b2>
 800ff32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff34:	1b2c      	subs	r4, r5, r4
 800ff36:	441c      	add	r4, r3
 800ff38:	2c00      	cmp	r4, #0
 800ff3a:	f340 8093 	ble.w	8010064 <_strtod_l+0x534>
 800ff3e:	f014 030f 	ands.w	r3, r4, #15
 800ff42:	d00a      	beq.n	800ff5a <_strtod_l+0x42a>
 800ff44:	495d      	ldr	r1, [pc, #372]	@ (80100bc <_strtod_l+0x58c>)
 800ff46:	4652      	mov	r2, sl
 800ff48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ff4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff50:	465b      	mov	r3, fp
 800ff52:	f7f0 fac1 	bl	80004d8 <__aeabi_dmul>
 800ff56:	4682      	mov	sl, r0
 800ff58:	468b      	mov	fp, r1
 800ff5a:	f034 040f 	bics.w	r4, r4, #15
 800ff5e:	d073      	beq.n	8010048 <_strtod_l+0x518>
 800ff60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ff64:	dd49      	ble.n	800fffa <_strtod_l+0x4ca>
 800ff66:	2400      	movs	r4, #0
 800ff68:	46a0      	mov	r8, r4
 800ff6a:	46a1      	mov	r9, r4
 800ff6c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ff6e:	2322      	movs	r3, #34	@ 0x22
 800ff70:	f04f 0a00 	mov.w	sl, #0
 800ff74:	9a05      	ldr	r2, [sp, #20]
 800ff76:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80100b4 <_strtod_l+0x584>
 800ff7a:	6013      	str	r3, [r2, #0]
 800ff7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f43f ae0f 	beq.w	800fba2 <_strtod_l+0x72>
 800ff84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff86:	9805      	ldr	r0, [sp, #20]
 800ff88:	f7ff f950 	bl	800f22c <_Bfree>
 800ff8c:	4649      	mov	r1, r9
 800ff8e:	9805      	ldr	r0, [sp, #20]
 800ff90:	f7ff f94c 	bl	800f22c <_Bfree>
 800ff94:	4641      	mov	r1, r8
 800ff96:	9805      	ldr	r0, [sp, #20]
 800ff98:	f7ff f948 	bl	800f22c <_Bfree>
 800ff9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff9e:	9805      	ldr	r0, [sp, #20]
 800ffa0:	f7ff f944 	bl	800f22c <_Bfree>
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	9805      	ldr	r0, [sp, #20]
 800ffa8:	f7ff f940 	bl	800f22c <_Bfree>
 800ffac:	e5f9      	b.n	800fba2 <_strtod_l+0x72>
 800ffae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	dbbc      	blt.n	800ff32 <_strtod_l+0x402>
 800ffb8:	4c40      	ldr	r4, [pc, #256]	@ (80100bc <_strtod_l+0x58c>)
 800ffba:	f1c5 050f 	rsb	r5, r5, #15
 800ffbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ffc2:	4652      	mov	r2, sl
 800ffc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffc8:	465b      	mov	r3, fp
 800ffca:	f7f0 fa85 	bl	80004d8 <__aeabi_dmul>
 800ffce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffd0:	1b5d      	subs	r5, r3, r5
 800ffd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ffd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ffda:	e791      	b.n	800ff00 <_strtod_l+0x3d0>
 800ffdc:	3316      	adds	r3, #22
 800ffde:	dba8      	blt.n	800ff32 <_strtod_l+0x402>
 800ffe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffe2:	4650      	mov	r0, sl
 800ffe4:	eba3 0808 	sub.w	r8, r3, r8
 800ffe8:	4b34      	ldr	r3, [pc, #208]	@ (80100bc <_strtod_l+0x58c>)
 800ffea:	4659      	mov	r1, fp
 800ffec:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fff0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fff4:	f7f0 fb9a 	bl	800072c <__aeabi_ddiv>
 800fff8:	e75d      	b.n	800feb6 <_strtod_l+0x386>
 800fffa:	2300      	movs	r3, #0
 800fffc:	4650      	mov	r0, sl
 800fffe:	4659      	mov	r1, fp
 8010000:	461e      	mov	r6, r3
 8010002:	4f2f      	ldr	r7, [pc, #188]	@ (80100c0 <_strtod_l+0x590>)
 8010004:	1124      	asrs	r4, r4, #4
 8010006:	2c01      	cmp	r4, #1
 8010008:	dc21      	bgt.n	801004e <_strtod_l+0x51e>
 801000a:	b10b      	cbz	r3, 8010010 <_strtod_l+0x4e0>
 801000c:	4682      	mov	sl, r0
 801000e:	468b      	mov	fp, r1
 8010010:	492b      	ldr	r1, [pc, #172]	@ (80100c0 <_strtod_l+0x590>)
 8010012:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010016:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801001a:	4652      	mov	r2, sl
 801001c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010020:	465b      	mov	r3, fp
 8010022:	f7f0 fa59 	bl	80004d8 <__aeabi_dmul>
 8010026:	4b23      	ldr	r3, [pc, #140]	@ (80100b4 <_strtod_l+0x584>)
 8010028:	460a      	mov	r2, r1
 801002a:	400b      	ands	r3, r1
 801002c:	4925      	ldr	r1, [pc, #148]	@ (80100c4 <_strtod_l+0x594>)
 801002e:	4682      	mov	sl, r0
 8010030:	428b      	cmp	r3, r1
 8010032:	d898      	bhi.n	800ff66 <_strtod_l+0x436>
 8010034:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010038:	428b      	cmp	r3, r1
 801003a:	bf86      	itte	hi
 801003c:	f04f 3aff 	movhi.w	sl, #4294967295
 8010040:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80100c8 <_strtod_l+0x598>
 8010044:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010048:	2300      	movs	r3, #0
 801004a:	9308      	str	r3, [sp, #32]
 801004c:	e076      	b.n	801013c <_strtod_l+0x60c>
 801004e:	07e2      	lsls	r2, r4, #31
 8010050:	d504      	bpl.n	801005c <_strtod_l+0x52c>
 8010052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010056:	f7f0 fa3f 	bl	80004d8 <__aeabi_dmul>
 801005a:	2301      	movs	r3, #1
 801005c:	3601      	adds	r6, #1
 801005e:	1064      	asrs	r4, r4, #1
 8010060:	3708      	adds	r7, #8
 8010062:	e7d0      	b.n	8010006 <_strtod_l+0x4d6>
 8010064:	d0f0      	beq.n	8010048 <_strtod_l+0x518>
 8010066:	4264      	negs	r4, r4
 8010068:	f014 020f 	ands.w	r2, r4, #15
 801006c:	d00a      	beq.n	8010084 <_strtod_l+0x554>
 801006e:	4b13      	ldr	r3, [pc, #76]	@ (80100bc <_strtod_l+0x58c>)
 8010070:	4650      	mov	r0, sl
 8010072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010076:	4659      	mov	r1, fp
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	f7f0 fb56 	bl	800072c <__aeabi_ddiv>
 8010080:	4682      	mov	sl, r0
 8010082:	468b      	mov	fp, r1
 8010084:	1124      	asrs	r4, r4, #4
 8010086:	d0df      	beq.n	8010048 <_strtod_l+0x518>
 8010088:	2c1f      	cmp	r4, #31
 801008a:	dd1f      	ble.n	80100cc <_strtod_l+0x59c>
 801008c:	2400      	movs	r4, #0
 801008e:	46a0      	mov	r8, r4
 8010090:	46a1      	mov	r9, r4
 8010092:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010094:	2322      	movs	r3, #34	@ 0x22
 8010096:	9a05      	ldr	r2, [sp, #20]
 8010098:	f04f 0a00 	mov.w	sl, #0
 801009c:	f04f 0b00 	mov.w	fp, #0
 80100a0:	6013      	str	r3, [r2, #0]
 80100a2:	e76b      	b.n	800ff7c <_strtod_l+0x44c>
 80100a4:	080128c3 	.word	0x080128c3
 80100a8:	08012ba8 	.word	0x08012ba8
 80100ac:	080128bb 	.word	0x080128bb
 80100b0:	080128f0 	.word	0x080128f0
 80100b4:	7ff00000 	.word	0x7ff00000
 80100b8:	08012a44 	.word	0x08012a44
 80100bc:	08012ae0 	.word	0x08012ae0
 80100c0:	08012ab8 	.word	0x08012ab8
 80100c4:	7ca00000 	.word	0x7ca00000
 80100c8:	7fefffff 	.word	0x7fefffff
 80100cc:	f014 0310 	ands.w	r3, r4, #16
 80100d0:	bf18      	it	ne
 80100d2:	236a      	movne	r3, #106	@ 0x6a
 80100d4:	4650      	mov	r0, sl
 80100d6:	9308      	str	r3, [sp, #32]
 80100d8:	4659      	mov	r1, fp
 80100da:	2300      	movs	r3, #0
 80100dc:	4e77      	ldr	r6, [pc, #476]	@ (80102bc <_strtod_l+0x78c>)
 80100de:	07e7      	lsls	r7, r4, #31
 80100e0:	d504      	bpl.n	80100ec <_strtod_l+0x5bc>
 80100e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100e6:	f7f0 f9f7 	bl	80004d8 <__aeabi_dmul>
 80100ea:	2301      	movs	r3, #1
 80100ec:	1064      	asrs	r4, r4, #1
 80100ee:	f106 0608 	add.w	r6, r6, #8
 80100f2:	d1f4      	bne.n	80100de <_strtod_l+0x5ae>
 80100f4:	b10b      	cbz	r3, 80100fa <_strtod_l+0x5ca>
 80100f6:	4682      	mov	sl, r0
 80100f8:	468b      	mov	fp, r1
 80100fa:	9b08      	ldr	r3, [sp, #32]
 80100fc:	b1b3      	cbz	r3, 801012c <_strtod_l+0x5fc>
 80100fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010102:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010106:	2b00      	cmp	r3, #0
 8010108:	4659      	mov	r1, fp
 801010a:	dd0f      	ble.n	801012c <_strtod_l+0x5fc>
 801010c:	2b1f      	cmp	r3, #31
 801010e:	dd58      	ble.n	80101c2 <_strtod_l+0x692>
 8010110:	2b34      	cmp	r3, #52	@ 0x34
 8010112:	bfd8      	it	le
 8010114:	f04f 33ff 	movle.w	r3, #4294967295
 8010118:	f04f 0a00 	mov.w	sl, #0
 801011c:	bfcf      	iteee	gt
 801011e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010122:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010126:	4093      	lslle	r3, r2
 8010128:	ea03 0b01 	andle.w	fp, r3, r1
 801012c:	2200      	movs	r2, #0
 801012e:	2300      	movs	r3, #0
 8010130:	4650      	mov	r0, sl
 8010132:	4659      	mov	r1, fp
 8010134:	f7f0 fc38 	bl	80009a8 <__aeabi_dcmpeq>
 8010138:	2800      	cmp	r0, #0
 801013a:	d1a7      	bne.n	801008c <_strtod_l+0x55c>
 801013c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801013e:	464a      	mov	r2, r9
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010144:	462b      	mov	r3, r5
 8010146:	9805      	ldr	r0, [sp, #20]
 8010148:	f7ff f8d8 	bl	800f2fc <__s2b>
 801014c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801014e:	2800      	cmp	r0, #0
 8010150:	f43f af09 	beq.w	800ff66 <_strtod_l+0x436>
 8010154:	2400      	movs	r4, #0
 8010156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801015a:	2a00      	cmp	r2, #0
 801015c:	eba3 0308 	sub.w	r3, r3, r8
 8010160:	bfa8      	it	ge
 8010162:	2300      	movge	r3, #0
 8010164:	46a0      	mov	r8, r4
 8010166:	9312      	str	r3, [sp, #72]	@ 0x48
 8010168:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801016c:	9316      	str	r3, [sp, #88]	@ 0x58
 801016e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010170:	9805      	ldr	r0, [sp, #20]
 8010172:	6859      	ldr	r1, [r3, #4]
 8010174:	f7ff f81a 	bl	800f1ac <_Balloc>
 8010178:	4681      	mov	r9, r0
 801017a:	2800      	cmp	r0, #0
 801017c:	f43f aef7 	beq.w	800ff6e <_strtod_l+0x43e>
 8010180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010182:	300c      	adds	r0, #12
 8010184:	691a      	ldr	r2, [r3, #16]
 8010186:	f103 010c 	add.w	r1, r3, #12
 801018a:	3202      	adds	r2, #2
 801018c:	0092      	lsls	r2, r2, #2
 801018e:	f001 f8df 	bl	8011350 <memcpy>
 8010192:	ab1c      	add	r3, sp, #112	@ 0x70
 8010194:	9301      	str	r3, [sp, #4]
 8010196:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	4652      	mov	r2, sl
 801019c:	465b      	mov	r3, fp
 801019e:	9805      	ldr	r0, [sp, #20]
 80101a0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80101a4:	f7ff fbd6 	bl	800f954 <__d2b>
 80101a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80101aa:	2800      	cmp	r0, #0
 80101ac:	f43f aedf 	beq.w	800ff6e <_strtod_l+0x43e>
 80101b0:	2101      	movs	r1, #1
 80101b2:	9805      	ldr	r0, [sp, #20]
 80101b4:	f7ff f938 	bl	800f428 <__i2b>
 80101b8:	4680      	mov	r8, r0
 80101ba:	b948      	cbnz	r0, 80101d0 <_strtod_l+0x6a0>
 80101bc:	f04f 0800 	mov.w	r8, #0
 80101c0:	e6d5      	b.n	800ff6e <_strtod_l+0x43e>
 80101c2:	f04f 32ff 	mov.w	r2, #4294967295
 80101c6:	fa02 f303 	lsl.w	r3, r2, r3
 80101ca:	ea03 0a0a 	and.w	sl, r3, sl
 80101ce:	e7ad      	b.n	801012c <_strtod_l+0x5fc>
 80101d0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80101d2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80101d4:	2d00      	cmp	r5, #0
 80101d6:	bfab      	itete	ge
 80101d8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80101da:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80101dc:	18ef      	addge	r7, r5, r3
 80101de:	1b5e      	sublt	r6, r3, r5
 80101e0:	9b08      	ldr	r3, [sp, #32]
 80101e2:	bfa8      	it	ge
 80101e4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80101e6:	eba5 0503 	sub.w	r5, r5, r3
 80101ea:	4415      	add	r5, r2
 80101ec:	4b34      	ldr	r3, [pc, #208]	@ (80102c0 <_strtod_l+0x790>)
 80101ee:	f105 35ff 	add.w	r5, r5, #4294967295
 80101f2:	bfb8      	it	lt
 80101f4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80101f6:	429d      	cmp	r5, r3
 80101f8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80101fc:	da50      	bge.n	80102a0 <_strtod_l+0x770>
 80101fe:	1b5b      	subs	r3, r3, r5
 8010200:	2b1f      	cmp	r3, #31
 8010202:	f04f 0101 	mov.w	r1, #1
 8010206:	eba2 0203 	sub.w	r2, r2, r3
 801020a:	dc3d      	bgt.n	8010288 <_strtod_l+0x758>
 801020c:	fa01 f303 	lsl.w	r3, r1, r3
 8010210:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010212:	2300      	movs	r3, #0
 8010214:	9310      	str	r3, [sp, #64]	@ 0x40
 8010216:	18bd      	adds	r5, r7, r2
 8010218:	9b08      	ldr	r3, [sp, #32]
 801021a:	42af      	cmp	r7, r5
 801021c:	4416      	add	r6, r2
 801021e:	441e      	add	r6, r3
 8010220:	463b      	mov	r3, r7
 8010222:	bfa8      	it	ge
 8010224:	462b      	movge	r3, r5
 8010226:	42b3      	cmp	r3, r6
 8010228:	bfa8      	it	ge
 801022a:	4633      	movge	r3, r6
 801022c:	2b00      	cmp	r3, #0
 801022e:	bfc2      	ittt	gt
 8010230:	1aed      	subgt	r5, r5, r3
 8010232:	1af6      	subgt	r6, r6, r3
 8010234:	1aff      	subgt	r7, r7, r3
 8010236:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010238:	2b00      	cmp	r3, #0
 801023a:	dd16      	ble.n	801026a <_strtod_l+0x73a>
 801023c:	4641      	mov	r1, r8
 801023e:	461a      	mov	r2, r3
 8010240:	9805      	ldr	r0, [sp, #20]
 8010242:	f7ff f9a9 	bl	800f598 <__pow5mult>
 8010246:	4680      	mov	r8, r0
 8010248:	2800      	cmp	r0, #0
 801024a:	d0b7      	beq.n	80101bc <_strtod_l+0x68c>
 801024c:	4601      	mov	r1, r0
 801024e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010250:	9805      	ldr	r0, [sp, #20]
 8010252:	f7ff f8ff 	bl	800f454 <__multiply>
 8010256:	900a      	str	r0, [sp, #40]	@ 0x28
 8010258:	2800      	cmp	r0, #0
 801025a:	f43f ae88 	beq.w	800ff6e <_strtod_l+0x43e>
 801025e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010260:	9805      	ldr	r0, [sp, #20]
 8010262:	f7fe ffe3 	bl	800f22c <_Bfree>
 8010266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010268:	931a      	str	r3, [sp, #104]	@ 0x68
 801026a:	2d00      	cmp	r5, #0
 801026c:	dc1d      	bgt.n	80102aa <_strtod_l+0x77a>
 801026e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010270:	2b00      	cmp	r3, #0
 8010272:	dd27      	ble.n	80102c4 <_strtod_l+0x794>
 8010274:	4649      	mov	r1, r9
 8010276:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010278:	9805      	ldr	r0, [sp, #20]
 801027a:	f7ff f98d 	bl	800f598 <__pow5mult>
 801027e:	4681      	mov	r9, r0
 8010280:	bb00      	cbnz	r0, 80102c4 <_strtod_l+0x794>
 8010282:	f04f 0900 	mov.w	r9, #0
 8010286:	e672      	b.n	800ff6e <_strtod_l+0x43e>
 8010288:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801028c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010290:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010294:	35e2      	adds	r5, #226	@ 0xe2
 8010296:	fa01 f305 	lsl.w	r3, r1, r5
 801029a:	9310      	str	r3, [sp, #64]	@ 0x40
 801029c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801029e:	e7ba      	b.n	8010216 <_strtod_l+0x6e6>
 80102a0:	2300      	movs	r3, #0
 80102a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80102a4:	2301      	movs	r3, #1
 80102a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80102a8:	e7b5      	b.n	8010216 <_strtod_l+0x6e6>
 80102aa:	462a      	mov	r2, r5
 80102ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80102ae:	9805      	ldr	r0, [sp, #20]
 80102b0:	f7ff f9cc 	bl	800f64c <__lshift>
 80102b4:	901a      	str	r0, [sp, #104]	@ 0x68
 80102b6:	2800      	cmp	r0, #0
 80102b8:	d1d9      	bne.n	801026e <_strtod_l+0x73e>
 80102ba:	e658      	b.n	800ff6e <_strtod_l+0x43e>
 80102bc:	08012bd0 	.word	0x08012bd0
 80102c0:	fffffc02 	.word	0xfffffc02
 80102c4:	2e00      	cmp	r6, #0
 80102c6:	dd07      	ble.n	80102d8 <_strtod_l+0x7a8>
 80102c8:	4649      	mov	r1, r9
 80102ca:	4632      	mov	r2, r6
 80102cc:	9805      	ldr	r0, [sp, #20]
 80102ce:	f7ff f9bd 	bl	800f64c <__lshift>
 80102d2:	4681      	mov	r9, r0
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d0d4      	beq.n	8010282 <_strtod_l+0x752>
 80102d8:	2f00      	cmp	r7, #0
 80102da:	dd08      	ble.n	80102ee <_strtod_l+0x7be>
 80102dc:	4641      	mov	r1, r8
 80102de:	463a      	mov	r2, r7
 80102e0:	9805      	ldr	r0, [sp, #20]
 80102e2:	f7ff f9b3 	bl	800f64c <__lshift>
 80102e6:	4680      	mov	r8, r0
 80102e8:	2800      	cmp	r0, #0
 80102ea:	f43f ae40 	beq.w	800ff6e <_strtod_l+0x43e>
 80102ee:	464a      	mov	r2, r9
 80102f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80102f2:	9805      	ldr	r0, [sp, #20]
 80102f4:	f7ff fa32 	bl	800f75c <__mdiff>
 80102f8:	4604      	mov	r4, r0
 80102fa:	2800      	cmp	r0, #0
 80102fc:	f43f ae37 	beq.w	800ff6e <_strtod_l+0x43e>
 8010300:	68c3      	ldr	r3, [r0, #12]
 8010302:	4641      	mov	r1, r8
 8010304:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010306:	2300      	movs	r3, #0
 8010308:	60c3      	str	r3, [r0, #12]
 801030a:	f7ff fa0b 	bl	800f724 <__mcmp>
 801030e:	2800      	cmp	r0, #0
 8010310:	da3d      	bge.n	801038e <_strtod_l+0x85e>
 8010312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010314:	ea53 030a 	orrs.w	r3, r3, sl
 8010318:	d163      	bne.n	80103e2 <_strtod_l+0x8b2>
 801031a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801031e:	2b00      	cmp	r3, #0
 8010320:	d15f      	bne.n	80103e2 <_strtod_l+0x8b2>
 8010322:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010326:	0d1b      	lsrs	r3, r3, #20
 8010328:	051b      	lsls	r3, r3, #20
 801032a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801032e:	d958      	bls.n	80103e2 <_strtod_l+0x8b2>
 8010330:	6963      	ldr	r3, [r4, #20]
 8010332:	b913      	cbnz	r3, 801033a <_strtod_l+0x80a>
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	2b01      	cmp	r3, #1
 8010338:	dd53      	ble.n	80103e2 <_strtod_l+0x8b2>
 801033a:	4621      	mov	r1, r4
 801033c:	2201      	movs	r2, #1
 801033e:	9805      	ldr	r0, [sp, #20]
 8010340:	f7ff f984 	bl	800f64c <__lshift>
 8010344:	4641      	mov	r1, r8
 8010346:	4604      	mov	r4, r0
 8010348:	f7ff f9ec 	bl	800f724 <__mcmp>
 801034c:	2800      	cmp	r0, #0
 801034e:	dd48      	ble.n	80103e2 <_strtod_l+0x8b2>
 8010350:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010354:	9a08      	ldr	r2, [sp, #32]
 8010356:	0d1b      	lsrs	r3, r3, #20
 8010358:	051b      	lsls	r3, r3, #20
 801035a:	2a00      	cmp	r2, #0
 801035c:	d062      	beq.n	8010424 <_strtod_l+0x8f4>
 801035e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010362:	d85f      	bhi.n	8010424 <_strtod_l+0x8f4>
 8010364:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010368:	f67f ae94 	bls.w	8010094 <_strtod_l+0x564>
 801036c:	4650      	mov	r0, sl
 801036e:	4659      	mov	r1, fp
 8010370:	4ba3      	ldr	r3, [pc, #652]	@ (8010600 <_strtod_l+0xad0>)
 8010372:	2200      	movs	r2, #0
 8010374:	f7f0 f8b0 	bl	80004d8 <__aeabi_dmul>
 8010378:	4ba2      	ldr	r3, [pc, #648]	@ (8010604 <_strtod_l+0xad4>)
 801037a:	4682      	mov	sl, r0
 801037c:	400b      	ands	r3, r1
 801037e:	468b      	mov	fp, r1
 8010380:	2b00      	cmp	r3, #0
 8010382:	f47f adff 	bne.w	800ff84 <_strtod_l+0x454>
 8010386:	2322      	movs	r3, #34	@ 0x22
 8010388:	9a05      	ldr	r2, [sp, #20]
 801038a:	6013      	str	r3, [r2, #0]
 801038c:	e5fa      	b.n	800ff84 <_strtod_l+0x454>
 801038e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010392:	d165      	bne.n	8010460 <_strtod_l+0x930>
 8010394:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010396:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801039a:	b35a      	cbz	r2, 80103f4 <_strtod_l+0x8c4>
 801039c:	4a9a      	ldr	r2, [pc, #616]	@ (8010608 <_strtod_l+0xad8>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d12b      	bne.n	80103fa <_strtod_l+0x8ca>
 80103a2:	9b08      	ldr	r3, [sp, #32]
 80103a4:	4651      	mov	r1, sl
 80103a6:	b303      	cbz	r3, 80103ea <_strtod_l+0x8ba>
 80103a8:	465a      	mov	r2, fp
 80103aa:	4b96      	ldr	r3, [pc, #600]	@ (8010604 <_strtod_l+0xad4>)
 80103ac:	4013      	ands	r3, r2
 80103ae:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80103b2:	f04f 32ff 	mov.w	r2, #4294967295
 80103b6:	d81b      	bhi.n	80103f0 <_strtod_l+0x8c0>
 80103b8:	0d1b      	lsrs	r3, r3, #20
 80103ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80103be:	fa02 f303 	lsl.w	r3, r2, r3
 80103c2:	4299      	cmp	r1, r3
 80103c4:	d119      	bne.n	80103fa <_strtod_l+0x8ca>
 80103c6:	4b91      	ldr	r3, [pc, #580]	@ (801060c <_strtod_l+0xadc>)
 80103c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d102      	bne.n	80103d4 <_strtod_l+0x8a4>
 80103ce:	3101      	adds	r1, #1
 80103d0:	f43f adcd 	beq.w	800ff6e <_strtod_l+0x43e>
 80103d4:	f04f 0a00 	mov.w	sl, #0
 80103d8:	4b8a      	ldr	r3, [pc, #552]	@ (8010604 <_strtod_l+0xad4>)
 80103da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103dc:	401a      	ands	r2, r3
 80103de:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80103e2:	9b08      	ldr	r3, [sp, #32]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1c1      	bne.n	801036c <_strtod_l+0x83c>
 80103e8:	e5cc      	b.n	800ff84 <_strtod_l+0x454>
 80103ea:	f04f 33ff 	mov.w	r3, #4294967295
 80103ee:	e7e8      	b.n	80103c2 <_strtod_l+0x892>
 80103f0:	4613      	mov	r3, r2
 80103f2:	e7e6      	b.n	80103c2 <_strtod_l+0x892>
 80103f4:	ea53 030a 	orrs.w	r3, r3, sl
 80103f8:	d0aa      	beq.n	8010350 <_strtod_l+0x820>
 80103fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80103fc:	b1db      	cbz	r3, 8010436 <_strtod_l+0x906>
 80103fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010400:	4213      	tst	r3, r2
 8010402:	d0ee      	beq.n	80103e2 <_strtod_l+0x8b2>
 8010404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010406:	4650      	mov	r0, sl
 8010408:	4659      	mov	r1, fp
 801040a:	9a08      	ldr	r2, [sp, #32]
 801040c:	b1bb      	cbz	r3, 801043e <_strtod_l+0x90e>
 801040e:	f7ff fb6d 	bl	800faec <sulp>
 8010412:	4602      	mov	r2, r0
 8010414:	460b      	mov	r3, r1
 8010416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801041a:	f7ef fea7 	bl	800016c <__adddf3>
 801041e:	4682      	mov	sl, r0
 8010420:	468b      	mov	fp, r1
 8010422:	e7de      	b.n	80103e2 <_strtod_l+0x8b2>
 8010424:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010428:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801042c:	f04f 3aff 	mov.w	sl, #4294967295
 8010430:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010434:	e7d5      	b.n	80103e2 <_strtod_l+0x8b2>
 8010436:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010438:	ea13 0f0a 	tst.w	r3, sl
 801043c:	e7e1      	b.n	8010402 <_strtod_l+0x8d2>
 801043e:	f7ff fb55 	bl	800faec <sulp>
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801044a:	f7ef fe8d 	bl	8000168 <__aeabi_dsub>
 801044e:	2200      	movs	r2, #0
 8010450:	2300      	movs	r3, #0
 8010452:	4682      	mov	sl, r0
 8010454:	468b      	mov	fp, r1
 8010456:	f7f0 faa7 	bl	80009a8 <__aeabi_dcmpeq>
 801045a:	2800      	cmp	r0, #0
 801045c:	d0c1      	beq.n	80103e2 <_strtod_l+0x8b2>
 801045e:	e619      	b.n	8010094 <_strtod_l+0x564>
 8010460:	4641      	mov	r1, r8
 8010462:	4620      	mov	r0, r4
 8010464:	f7ff face 	bl	800fa04 <__ratio>
 8010468:	2200      	movs	r2, #0
 801046a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801046e:	4606      	mov	r6, r0
 8010470:	460f      	mov	r7, r1
 8010472:	f7f0 faad 	bl	80009d0 <__aeabi_dcmple>
 8010476:	2800      	cmp	r0, #0
 8010478:	d06d      	beq.n	8010556 <_strtod_l+0xa26>
 801047a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801047c:	2b00      	cmp	r3, #0
 801047e:	d178      	bne.n	8010572 <_strtod_l+0xa42>
 8010480:	f1ba 0f00 	cmp.w	sl, #0
 8010484:	d156      	bne.n	8010534 <_strtod_l+0xa04>
 8010486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801048c:	2b00      	cmp	r3, #0
 801048e:	d158      	bne.n	8010542 <_strtod_l+0xa12>
 8010490:	2200      	movs	r2, #0
 8010492:	4630      	mov	r0, r6
 8010494:	4639      	mov	r1, r7
 8010496:	4b5e      	ldr	r3, [pc, #376]	@ (8010610 <_strtod_l+0xae0>)
 8010498:	f7f0 fa90 	bl	80009bc <__aeabi_dcmplt>
 801049c:	2800      	cmp	r0, #0
 801049e:	d157      	bne.n	8010550 <_strtod_l+0xa20>
 80104a0:	4630      	mov	r0, r6
 80104a2:	4639      	mov	r1, r7
 80104a4:	2200      	movs	r2, #0
 80104a6:	4b5b      	ldr	r3, [pc, #364]	@ (8010614 <_strtod_l+0xae4>)
 80104a8:	f7f0 f816 	bl	80004d8 <__aeabi_dmul>
 80104ac:	4606      	mov	r6, r0
 80104ae:	460f      	mov	r7, r1
 80104b0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80104b4:	9606      	str	r6, [sp, #24]
 80104b6:	9307      	str	r3, [sp, #28]
 80104b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104bc:	4d51      	ldr	r5, [pc, #324]	@ (8010604 <_strtod_l+0xad4>)
 80104be:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80104c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104c4:	401d      	ands	r5, r3
 80104c6:	4b54      	ldr	r3, [pc, #336]	@ (8010618 <_strtod_l+0xae8>)
 80104c8:	429d      	cmp	r5, r3
 80104ca:	f040 80ab 	bne.w	8010624 <_strtod_l+0xaf4>
 80104ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104d0:	4650      	mov	r0, sl
 80104d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80104d6:	4659      	mov	r1, fp
 80104d8:	f7ff f9d4 	bl	800f884 <__ulp>
 80104dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104e0:	f7ef fffa 	bl	80004d8 <__aeabi_dmul>
 80104e4:	4652      	mov	r2, sl
 80104e6:	465b      	mov	r3, fp
 80104e8:	f7ef fe40 	bl	800016c <__adddf3>
 80104ec:	460b      	mov	r3, r1
 80104ee:	4945      	ldr	r1, [pc, #276]	@ (8010604 <_strtod_l+0xad4>)
 80104f0:	4a4a      	ldr	r2, [pc, #296]	@ (801061c <_strtod_l+0xaec>)
 80104f2:	4019      	ands	r1, r3
 80104f4:	4291      	cmp	r1, r2
 80104f6:	4682      	mov	sl, r0
 80104f8:	d942      	bls.n	8010580 <_strtod_l+0xa50>
 80104fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80104fc:	4b43      	ldr	r3, [pc, #268]	@ (801060c <_strtod_l+0xadc>)
 80104fe:	429a      	cmp	r2, r3
 8010500:	d103      	bne.n	801050a <_strtod_l+0x9da>
 8010502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010504:	3301      	adds	r3, #1
 8010506:	f43f ad32 	beq.w	800ff6e <_strtod_l+0x43e>
 801050a:	f04f 3aff 	mov.w	sl, #4294967295
 801050e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 801060c <_strtod_l+0xadc>
 8010512:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010514:	9805      	ldr	r0, [sp, #20]
 8010516:	f7fe fe89 	bl	800f22c <_Bfree>
 801051a:	4649      	mov	r1, r9
 801051c:	9805      	ldr	r0, [sp, #20]
 801051e:	f7fe fe85 	bl	800f22c <_Bfree>
 8010522:	4641      	mov	r1, r8
 8010524:	9805      	ldr	r0, [sp, #20]
 8010526:	f7fe fe81 	bl	800f22c <_Bfree>
 801052a:	4621      	mov	r1, r4
 801052c:	9805      	ldr	r0, [sp, #20]
 801052e:	f7fe fe7d 	bl	800f22c <_Bfree>
 8010532:	e61c      	b.n	801016e <_strtod_l+0x63e>
 8010534:	f1ba 0f01 	cmp.w	sl, #1
 8010538:	d103      	bne.n	8010542 <_strtod_l+0xa12>
 801053a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801053c:	2b00      	cmp	r3, #0
 801053e:	f43f ada9 	beq.w	8010094 <_strtod_l+0x564>
 8010542:	2200      	movs	r2, #0
 8010544:	4b36      	ldr	r3, [pc, #216]	@ (8010620 <_strtod_l+0xaf0>)
 8010546:	2600      	movs	r6, #0
 8010548:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801054c:	4f30      	ldr	r7, [pc, #192]	@ (8010610 <_strtod_l+0xae0>)
 801054e:	e7b3      	b.n	80104b8 <_strtod_l+0x988>
 8010550:	2600      	movs	r6, #0
 8010552:	4f30      	ldr	r7, [pc, #192]	@ (8010614 <_strtod_l+0xae4>)
 8010554:	e7ac      	b.n	80104b0 <_strtod_l+0x980>
 8010556:	4630      	mov	r0, r6
 8010558:	4639      	mov	r1, r7
 801055a:	4b2e      	ldr	r3, [pc, #184]	@ (8010614 <_strtod_l+0xae4>)
 801055c:	2200      	movs	r2, #0
 801055e:	f7ef ffbb 	bl	80004d8 <__aeabi_dmul>
 8010562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010564:	4606      	mov	r6, r0
 8010566:	460f      	mov	r7, r1
 8010568:	2b00      	cmp	r3, #0
 801056a:	d0a1      	beq.n	80104b0 <_strtod_l+0x980>
 801056c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010570:	e7a2      	b.n	80104b8 <_strtod_l+0x988>
 8010572:	2200      	movs	r2, #0
 8010574:	4b26      	ldr	r3, [pc, #152]	@ (8010610 <_strtod_l+0xae0>)
 8010576:	4616      	mov	r6, r2
 8010578:	461f      	mov	r7, r3
 801057a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801057e:	e79b      	b.n	80104b8 <_strtod_l+0x988>
 8010580:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010584:	9b08      	ldr	r3, [sp, #32]
 8010586:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1c1      	bne.n	8010512 <_strtod_l+0x9e2>
 801058e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010592:	0d1b      	lsrs	r3, r3, #20
 8010594:	051b      	lsls	r3, r3, #20
 8010596:	429d      	cmp	r5, r3
 8010598:	d1bb      	bne.n	8010512 <_strtod_l+0x9e2>
 801059a:	4630      	mov	r0, r6
 801059c:	4639      	mov	r1, r7
 801059e:	f7f0 fdb7 	bl	8001110 <__aeabi_d2lz>
 80105a2:	f7ef ff6b 	bl	800047c <__aeabi_l2d>
 80105a6:	4602      	mov	r2, r0
 80105a8:	460b      	mov	r3, r1
 80105aa:	4630      	mov	r0, r6
 80105ac:	4639      	mov	r1, r7
 80105ae:	f7ef fddb 	bl	8000168 <__aeabi_dsub>
 80105b2:	460b      	mov	r3, r1
 80105b4:	4602      	mov	r2, r0
 80105b6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80105ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80105be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105c0:	ea46 060a 	orr.w	r6, r6, sl
 80105c4:	431e      	orrs	r6, r3
 80105c6:	d06a      	beq.n	801069e <_strtod_l+0xb6e>
 80105c8:	a309      	add	r3, pc, #36	@ (adr r3, 80105f0 <_strtod_l+0xac0>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7f0 f9f5 	bl	80009bc <__aeabi_dcmplt>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	f47f acd6 	bne.w	800ff84 <_strtod_l+0x454>
 80105d8:	a307      	add	r3, pc, #28	@ (adr r3, 80105f8 <_strtod_l+0xac8>)
 80105da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105e2:	f7f0 fa09 	bl	80009f8 <__aeabi_dcmpgt>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d093      	beq.n	8010512 <_strtod_l+0x9e2>
 80105ea:	e4cb      	b.n	800ff84 <_strtod_l+0x454>
 80105ec:	f3af 8000 	nop.w
 80105f0:	94a03595 	.word	0x94a03595
 80105f4:	3fdfffff 	.word	0x3fdfffff
 80105f8:	35afe535 	.word	0x35afe535
 80105fc:	3fe00000 	.word	0x3fe00000
 8010600:	39500000 	.word	0x39500000
 8010604:	7ff00000 	.word	0x7ff00000
 8010608:	000fffff 	.word	0x000fffff
 801060c:	7fefffff 	.word	0x7fefffff
 8010610:	3ff00000 	.word	0x3ff00000
 8010614:	3fe00000 	.word	0x3fe00000
 8010618:	7fe00000 	.word	0x7fe00000
 801061c:	7c9fffff 	.word	0x7c9fffff
 8010620:	bff00000 	.word	0xbff00000
 8010624:	9b08      	ldr	r3, [sp, #32]
 8010626:	b323      	cbz	r3, 8010672 <_strtod_l+0xb42>
 8010628:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801062c:	d821      	bhi.n	8010672 <_strtod_l+0xb42>
 801062e:	a328      	add	r3, pc, #160	@ (adr r3, 80106d0 <_strtod_l+0xba0>)
 8010630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010634:	4630      	mov	r0, r6
 8010636:	4639      	mov	r1, r7
 8010638:	f7f0 f9ca 	bl	80009d0 <__aeabi_dcmple>
 801063c:	b1a0      	cbz	r0, 8010668 <_strtod_l+0xb38>
 801063e:	4639      	mov	r1, r7
 8010640:	4630      	mov	r0, r6
 8010642:	f7f0 fa21 	bl	8000a88 <__aeabi_d2uiz>
 8010646:	2801      	cmp	r0, #1
 8010648:	bf38      	it	cc
 801064a:	2001      	movcc	r0, #1
 801064c:	f7ef feca 	bl	80003e4 <__aeabi_ui2d>
 8010650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010652:	4606      	mov	r6, r0
 8010654:	460f      	mov	r7, r1
 8010656:	b9fb      	cbnz	r3, 8010698 <_strtod_l+0xb68>
 8010658:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801065c:	9014      	str	r0, [sp, #80]	@ 0x50
 801065e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010660:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010664:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010668:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801066a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801066e:	1b5b      	subs	r3, r3, r5
 8010670:	9311      	str	r3, [sp, #68]	@ 0x44
 8010672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010676:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801067a:	f7ff f903 	bl	800f884 <__ulp>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4650      	mov	r0, sl
 8010684:	4659      	mov	r1, fp
 8010686:	f7ef ff27 	bl	80004d8 <__aeabi_dmul>
 801068a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801068e:	f7ef fd6d 	bl	800016c <__adddf3>
 8010692:	4682      	mov	sl, r0
 8010694:	468b      	mov	fp, r1
 8010696:	e775      	b.n	8010584 <_strtod_l+0xa54>
 8010698:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801069c:	e7e0      	b.n	8010660 <_strtod_l+0xb30>
 801069e:	a30e      	add	r3, pc, #56	@ (adr r3, 80106d8 <_strtod_l+0xba8>)
 80106a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a4:	f7f0 f98a 	bl	80009bc <__aeabi_dcmplt>
 80106a8:	e79d      	b.n	80105e6 <_strtod_l+0xab6>
 80106aa:	2300      	movs	r3, #0
 80106ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80106ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106b0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80106b2:	6013      	str	r3, [r2, #0]
 80106b4:	f7ff ba79 	b.w	800fbaa <_strtod_l+0x7a>
 80106b8:	2a65      	cmp	r2, #101	@ 0x65
 80106ba:	f43f ab72 	beq.w	800fda2 <_strtod_l+0x272>
 80106be:	2a45      	cmp	r2, #69	@ 0x45
 80106c0:	f43f ab6f 	beq.w	800fda2 <_strtod_l+0x272>
 80106c4:	2301      	movs	r3, #1
 80106c6:	f7ff bbaa 	b.w	800fe1e <_strtod_l+0x2ee>
 80106ca:	bf00      	nop
 80106cc:	f3af 8000 	nop.w
 80106d0:	ffc00000 	.word	0xffc00000
 80106d4:	41dfffff 	.word	0x41dfffff
 80106d8:	94a03595 	.word	0x94a03595
 80106dc:	3fcfffff 	.word	0x3fcfffff

080106e0 <_strtod_r>:
 80106e0:	4b01      	ldr	r3, [pc, #4]	@ (80106e8 <_strtod_r+0x8>)
 80106e2:	f7ff ba25 	b.w	800fb30 <_strtod_l>
 80106e6:	bf00      	nop
 80106e8:	200001f0 	.word	0x200001f0

080106ec <_strtol_l.isra.0>:
 80106ec:	2b24      	cmp	r3, #36	@ 0x24
 80106ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106f2:	4686      	mov	lr, r0
 80106f4:	4690      	mov	r8, r2
 80106f6:	d801      	bhi.n	80106fc <_strtol_l.isra.0+0x10>
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d106      	bne.n	801070a <_strtol_l.isra.0+0x1e>
 80106fc:	f7fd fdba 	bl	800e274 <__errno>
 8010700:	2316      	movs	r3, #22
 8010702:	6003      	str	r3, [r0, #0]
 8010704:	2000      	movs	r0, #0
 8010706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070a:	460d      	mov	r5, r1
 801070c:	4833      	ldr	r0, [pc, #204]	@ (80107dc <_strtol_l.isra.0+0xf0>)
 801070e:	462a      	mov	r2, r5
 8010710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010714:	5d06      	ldrb	r6, [r0, r4]
 8010716:	f016 0608 	ands.w	r6, r6, #8
 801071a:	d1f8      	bne.n	801070e <_strtol_l.isra.0+0x22>
 801071c:	2c2d      	cmp	r4, #45	@ 0x2d
 801071e:	d110      	bne.n	8010742 <_strtol_l.isra.0+0x56>
 8010720:	2601      	movs	r6, #1
 8010722:	782c      	ldrb	r4, [r5, #0]
 8010724:	1c95      	adds	r5, r2, #2
 8010726:	f033 0210 	bics.w	r2, r3, #16
 801072a:	d115      	bne.n	8010758 <_strtol_l.isra.0+0x6c>
 801072c:	2c30      	cmp	r4, #48	@ 0x30
 801072e:	d10d      	bne.n	801074c <_strtol_l.isra.0+0x60>
 8010730:	782a      	ldrb	r2, [r5, #0]
 8010732:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010736:	2a58      	cmp	r2, #88	@ 0x58
 8010738:	d108      	bne.n	801074c <_strtol_l.isra.0+0x60>
 801073a:	786c      	ldrb	r4, [r5, #1]
 801073c:	3502      	adds	r5, #2
 801073e:	2310      	movs	r3, #16
 8010740:	e00a      	b.n	8010758 <_strtol_l.isra.0+0x6c>
 8010742:	2c2b      	cmp	r4, #43	@ 0x2b
 8010744:	bf04      	itt	eq
 8010746:	782c      	ldrbeq	r4, [r5, #0]
 8010748:	1c95      	addeq	r5, r2, #2
 801074a:	e7ec      	b.n	8010726 <_strtol_l.isra.0+0x3a>
 801074c:	2b00      	cmp	r3, #0
 801074e:	d1f6      	bne.n	801073e <_strtol_l.isra.0+0x52>
 8010750:	2c30      	cmp	r4, #48	@ 0x30
 8010752:	bf14      	ite	ne
 8010754:	230a      	movne	r3, #10
 8010756:	2308      	moveq	r3, #8
 8010758:	2200      	movs	r2, #0
 801075a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801075e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010762:	fbbc f9f3 	udiv	r9, ip, r3
 8010766:	4610      	mov	r0, r2
 8010768:	fb03 ca19 	mls	sl, r3, r9, ip
 801076c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010770:	2f09      	cmp	r7, #9
 8010772:	d80f      	bhi.n	8010794 <_strtol_l.isra.0+0xa8>
 8010774:	463c      	mov	r4, r7
 8010776:	42a3      	cmp	r3, r4
 8010778:	dd1b      	ble.n	80107b2 <_strtol_l.isra.0+0xc6>
 801077a:	1c57      	adds	r7, r2, #1
 801077c:	d007      	beq.n	801078e <_strtol_l.isra.0+0xa2>
 801077e:	4581      	cmp	r9, r0
 8010780:	d314      	bcc.n	80107ac <_strtol_l.isra.0+0xc0>
 8010782:	d101      	bne.n	8010788 <_strtol_l.isra.0+0x9c>
 8010784:	45a2      	cmp	sl, r4
 8010786:	db11      	blt.n	80107ac <_strtol_l.isra.0+0xc0>
 8010788:	2201      	movs	r2, #1
 801078a:	fb00 4003 	mla	r0, r0, r3, r4
 801078e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010792:	e7eb      	b.n	801076c <_strtol_l.isra.0+0x80>
 8010794:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010798:	2f19      	cmp	r7, #25
 801079a:	d801      	bhi.n	80107a0 <_strtol_l.isra.0+0xb4>
 801079c:	3c37      	subs	r4, #55	@ 0x37
 801079e:	e7ea      	b.n	8010776 <_strtol_l.isra.0+0x8a>
 80107a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80107a4:	2f19      	cmp	r7, #25
 80107a6:	d804      	bhi.n	80107b2 <_strtol_l.isra.0+0xc6>
 80107a8:	3c57      	subs	r4, #87	@ 0x57
 80107aa:	e7e4      	b.n	8010776 <_strtol_l.isra.0+0x8a>
 80107ac:	f04f 32ff 	mov.w	r2, #4294967295
 80107b0:	e7ed      	b.n	801078e <_strtol_l.isra.0+0xa2>
 80107b2:	1c53      	adds	r3, r2, #1
 80107b4:	d108      	bne.n	80107c8 <_strtol_l.isra.0+0xdc>
 80107b6:	2322      	movs	r3, #34	@ 0x22
 80107b8:	4660      	mov	r0, ip
 80107ba:	f8ce 3000 	str.w	r3, [lr]
 80107be:	f1b8 0f00 	cmp.w	r8, #0
 80107c2:	d0a0      	beq.n	8010706 <_strtol_l.isra.0+0x1a>
 80107c4:	1e69      	subs	r1, r5, #1
 80107c6:	e006      	b.n	80107d6 <_strtol_l.isra.0+0xea>
 80107c8:	b106      	cbz	r6, 80107cc <_strtol_l.isra.0+0xe0>
 80107ca:	4240      	negs	r0, r0
 80107cc:	f1b8 0f00 	cmp.w	r8, #0
 80107d0:	d099      	beq.n	8010706 <_strtol_l.isra.0+0x1a>
 80107d2:	2a00      	cmp	r2, #0
 80107d4:	d1f6      	bne.n	80107c4 <_strtol_l.isra.0+0xd8>
 80107d6:	f8c8 1000 	str.w	r1, [r8]
 80107da:	e794      	b.n	8010706 <_strtol_l.isra.0+0x1a>
 80107dc:	08012bf9 	.word	0x08012bf9

080107e0 <_strtol_r>:
 80107e0:	f7ff bf84 	b.w	80106ec <_strtol_l.isra.0>

080107e4 <__ssputs_r>:
 80107e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e8:	461f      	mov	r7, r3
 80107ea:	688e      	ldr	r6, [r1, #8]
 80107ec:	4682      	mov	sl, r0
 80107ee:	42be      	cmp	r6, r7
 80107f0:	460c      	mov	r4, r1
 80107f2:	4690      	mov	r8, r2
 80107f4:	680b      	ldr	r3, [r1, #0]
 80107f6:	d82d      	bhi.n	8010854 <__ssputs_r+0x70>
 80107f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010800:	d026      	beq.n	8010850 <__ssputs_r+0x6c>
 8010802:	6965      	ldr	r5, [r4, #20]
 8010804:	6909      	ldr	r1, [r1, #16]
 8010806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801080a:	eba3 0901 	sub.w	r9, r3, r1
 801080e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010812:	1c7b      	adds	r3, r7, #1
 8010814:	444b      	add	r3, r9
 8010816:	106d      	asrs	r5, r5, #1
 8010818:	429d      	cmp	r5, r3
 801081a:	bf38      	it	cc
 801081c:	461d      	movcc	r5, r3
 801081e:	0553      	lsls	r3, r2, #21
 8010820:	d527      	bpl.n	8010872 <__ssputs_r+0x8e>
 8010822:	4629      	mov	r1, r5
 8010824:	f7fe fc36 	bl	800f094 <_malloc_r>
 8010828:	4606      	mov	r6, r0
 801082a:	b360      	cbz	r0, 8010886 <__ssputs_r+0xa2>
 801082c:	464a      	mov	r2, r9
 801082e:	6921      	ldr	r1, [r4, #16]
 8010830:	f000 fd8e 	bl	8011350 <memcpy>
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801083a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801083e:	81a3      	strh	r3, [r4, #12]
 8010840:	6126      	str	r6, [r4, #16]
 8010842:	444e      	add	r6, r9
 8010844:	6026      	str	r6, [r4, #0]
 8010846:	463e      	mov	r6, r7
 8010848:	6165      	str	r5, [r4, #20]
 801084a:	eba5 0509 	sub.w	r5, r5, r9
 801084e:	60a5      	str	r5, [r4, #8]
 8010850:	42be      	cmp	r6, r7
 8010852:	d900      	bls.n	8010856 <__ssputs_r+0x72>
 8010854:	463e      	mov	r6, r7
 8010856:	4632      	mov	r2, r6
 8010858:	4641      	mov	r1, r8
 801085a:	6820      	ldr	r0, [r4, #0]
 801085c:	f000 fd4d 	bl	80112fa <memmove>
 8010860:	2000      	movs	r0, #0
 8010862:	68a3      	ldr	r3, [r4, #8]
 8010864:	1b9b      	subs	r3, r3, r6
 8010866:	60a3      	str	r3, [r4, #8]
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	4433      	add	r3, r6
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010872:	462a      	mov	r2, r5
 8010874:	f001 f8fd 	bl	8011a72 <_realloc_r>
 8010878:	4606      	mov	r6, r0
 801087a:	2800      	cmp	r0, #0
 801087c:	d1e0      	bne.n	8010840 <__ssputs_r+0x5c>
 801087e:	4650      	mov	r0, sl
 8010880:	6921      	ldr	r1, [r4, #16]
 8010882:	f7fe fb95 	bl	800efb0 <_free_r>
 8010886:	230c      	movs	r3, #12
 8010888:	f8ca 3000 	str.w	r3, [sl]
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	f04f 30ff 	mov.w	r0, #4294967295
 8010892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010896:	81a3      	strh	r3, [r4, #12]
 8010898:	e7e9      	b.n	801086e <__ssputs_r+0x8a>
	...

0801089c <_svfiprintf_r>:
 801089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a0:	4698      	mov	r8, r3
 80108a2:	898b      	ldrh	r3, [r1, #12]
 80108a4:	4607      	mov	r7, r0
 80108a6:	061b      	lsls	r3, r3, #24
 80108a8:	460d      	mov	r5, r1
 80108aa:	4614      	mov	r4, r2
 80108ac:	b09d      	sub	sp, #116	@ 0x74
 80108ae:	d510      	bpl.n	80108d2 <_svfiprintf_r+0x36>
 80108b0:	690b      	ldr	r3, [r1, #16]
 80108b2:	b973      	cbnz	r3, 80108d2 <_svfiprintf_r+0x36>
 80108b4:	2140      	movs	r1, #64	@ 0x40
 80108b6:	f7fe fbed 	bl	800f094 <_malloc_r>
 80108ba:	6028      	str	r0, [r5, #0]
 80108bc:	6128      	str	r0, [r5, #16]
 80108be:	b930      	cbnz	r0, 80108ce <_svfiprintf_r+0x32>
 80108c0:	230c      	movs	r3, #12
 80108c2:	603b      	str	r3, [r7, #0]
 80108c4:	f04f 30ff 	mov.w	r0, #4294967295
 80108c8:	b01d      	add	sp, #116	@ 0x74
 80108ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ce:	2340      	movs	r3, #64	@ 0x40
 80108d0:	616b      	str	r3, [r5, #20]
 80108d2:	2300      	movs	r3, #0
 80108d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80108d6:	2320      	movs	r3, #32
 80108d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108dc:	2330      	movs	r3, #48	@ 0x30
 80108de:	f04f 0901 	mov.w	r9, #1
 80108e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80108e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8010a80 <_svfiprintf_r+0x1e4>
 80108ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108ee:	4623      	mov	r3, r4
 80108f0:	469a      	mov	sl, r3
 80108f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108f6:	b10a      	cbz	r2, 80108fc <_svfiprintf_r+0x60>
 80108f8:	2a25      	cmp	r2, #37	@ 0x25
 80108fa:	d1f9      	bne.n	80108f0 <_svfiprintf_r+0x54>
 80108fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010900:	d00b      	beq.n	801091a <_svfiprintf_r+0x7e>
 8010902:	465b      	mov	r3, fp
 8010904:	4622      	mov	r2, r4
 8010906:	4629      	mov	r1, r5
 8010908:	4638      	mov	r0, r7
 801090a:	f7ff ff6b 	bl	80107e4 <__ssputs_r>
 801090e:	3001      	adds	r0, #1
 8010910:	f000 80a7 	beq.w	8010a62 <_svfiprintf_r+0x1c6>
 8010914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010916:	445a      	add	r2, fp
 8010918:	9209      	str	r2, [sp, #36]	@ 0x24
 801091a:	f89a 3000 	ldrb.w	r3, [sl]
 801091e:	2b00      	cmp	r3, #0
 8010920:	f000 809f 	beq.w	8010a62 <_svfiprintf_r+0x1c6>
 8010924:	2300      	movs	r3, #0
 8010926:	f04f 32ff 	mov.w	r2, #4294967295
 801092a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801092e:	f10a 0a01 	add.w	sl, sl, #1
 8010932:	9304      	str	r3, [sp, #16]
 8010934:	9307      	str	r3, [sp, #28]
 8010936:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801093a:	931a      	str	r3, [sp, #104]	@ 0x68
 801093c:	4654      	mov	r4, sl
 801093e:	2205      	movs	r2, #5
 8010940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010944:	484e      	ldr	r0, [pc, #312]	@ (8010a80 <_svfiprintf_r+0x1e4>)
 8010946:	f7fd fcc2 	bl	800e2ce <memchr>
 801094a:	9a04      	ldr	r2, [sp, #16]
 801094c:	b9d8      	cbnz	r0, 8010986 <_svfiprintf_r+0xea>
 801094e:	06d0      	lsls	r0, r2, #27
 8010950:	bf44      	itt	mi
 8010952:	2320      	movmi	r3, #32
 8010954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010958:	0711      	lsls	r1, r2, #28
 801095a:	bf44      	itt	mi
 801095c:	232b      	movmi	r3, #43	@ 0x2b
 801095e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010962:	f89a 3000 	ldrb.w	r3, [sl]
 8010966:	2b2a      	cmp	r3, #42	@ 0x2a
 8010968:	d015      	beq.n	8010996 <_svfiprintf_r+0xfa>
 801096a:	4654      	mov	r4, sl
 801096c:	2000      	movs	r0, #0
 801096e:	f04f 0c0a 	mov.w	ip, #10
 8010972:	9a07      	ldr	r2, [sp, #28]
 8010974:	4621      	mov	r1, r4
 8010976:	f811 3b01 	ldrb.w	r3, [r1], #1
 801097a:	3b30      	subs	r3, #48	@ 0x30
 801097c:	2b09      	cmp	r3, #9
 801097e:	d94b      	bls.n	8010a18 <_svfiprintf_r+0x17c>
 8010980:	b1b0      	cbz	r0, 80109b0 <_svfiprintf_r+0x114>
 8010982:	9207      	str	r2, [sp, #28]
 8010984:	e014      	b.n	80109b0 <_svfiprintf_r+0x114>
 8010986:	eba0 0308 	sub.w	r3, r0, r8
 801098a:	fa09 f303 	lsl.w	r3, r9, r3
 801098e:	4313      	orrs	r3, r2
 8010990:	46a2      	mov	sl, r4
 8010992:	9304      	str	r3, [sp, #16]
 8010994:	e7d2      	b.n	801093c <_svfiprintf_r+0xa0>
 8010996:	9b03      	ldr	r3, [sp, #12]
 8010998:	1d19      	adds	r1, r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	9103      	str	r1, [sp, #12]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	bfbb      	ittet	lt
 80109a2:	425b      	neglt	r3, r3
 80109a4:	f042 0202 	orrlt.w	r2, r2, #2
 80109a8:	9307      	strge	r3, [sp, #28]
 80109aa:	9307      	strlt	r3, [sp, #28]
 80109ac:	bfb8      	it	lt
 80109ae:	9204      	strlt	r2, [sp, #16]
 80109b0:	7823      	ldrb	r3, [r4, #0]
 80109b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80109b4:	d10a      	bne.n	80109cc <_svfiprintf_r+0x130>
 80109b6:	7863      	ldrb	r3, [r4, #1]
 80109b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80109ba:	d132      	bne.n	8010a22 <_svfiprintf_r+0x186>
 80109bc:	9b03      	ldr	r3, [sp, #12]
 80109be:	3402      	adds	r4, #2
 80109c0:	1d1a      	adds	r2, r3, #4
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	9203      	str	r2, [sp, #12]
 80109c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8010a84 <_svfiprintf_r+0x1e8>
 80109d0:	2203      	movs	r2, #3
 80109d2:	4650      	mov	r0, sl
 80109d4:	7821      	ldrb	r1, [r4, #0]
 80109d6:	f7fd fc7a 	bl	800e2ce <memchr>
 80109da:	b138      	cbz	r0, 80109ec <_svfiprintf_r+0x150>
 80109dc:	2240      	movs	r2, #64	@ 0x40
 80109de:	9b04      	ldr	r3, [sp, #16]
 80109e0:	eba0 000a 	sub.w	r0, r0, sl
 80109e4:	4082      	lsls	r2, r0
 80109e6:	4313      	orrs	r3, r2
 80109e8:	3401      	adds	r4, #1
 80109ea:	9304      	str	r3, [sp, #16]
 80109ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109f0:	2206      	movs	r2, #6
 80109f2:	4825      	ldr	r0, [pc, #148]	@ (8010a88 <_svfiprintf_r+0x1ec>)
 80109f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109f8:	f7fd fc69 	bl	800e2ce <memchr>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d036      	beq.n	8010a6e <_svfiprintf_r+0x1d2>
 8010a00:	4b22      	ldr	r3, [pc, #136]	@ (8010a8c <_svfiprintf_r+0x1f0>)
 8010a02:	bb1b      	cbnz	r3, 8010a4c <_svfiprintf_r+0x1b0>
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	3307      	adds	r3, #7
 8010a08:	f023 0307 	bic.w	r3, r3, #7
 8010a0c:	3308      	adds	r3, #8
 8010a0e:	9303      	str	r3, [sp, #12]
 8010a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a12:	4433      	add	r3, r6
 8010a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a16:	e76a      	b.n	80108ee <_svfiprintf_r+0x52>
 8010a18:	460c      	mov	r4, r1
 8010a1a:	2001      	movs	r0, #1
 8010a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a20:	e7a8      	b.n	8010974 <_svfiprintf_r+0xd8>
 8010a22:	2300      	movs	r3, #0
 8010a24:	f04f 0c0a 	mov.w	ip, #10
 8010a28:	4619      	mov	r1, r3
 8010a2a:	3401      	adds	r4, #1
 8010a2c:	9305      	str	r3, [sp, #20]
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a34:	3a30      	subs	r2, #48	@ 0x30
 8010a36:	2a09      	cmp	r2, #9
 8010a38:	d903      	bls.n	8010a42 <_svfiprintf_r+0x1a6>
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d0c6      	beq.n	80109cc <_svfiprintf_r+0x130>
 8010a3e:	9105      	str	r1, [sp, #20]
 8010a40:	e7c4      	b.n	80109cc <_svfiprintf_r+0x130>
 8010a42:	4604      	mov	r4, r0
 8010a44:	2301      	movs	r3, #1
 8010a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a4a:	e7f0      	b.n	8010a2e <_svfiprintf_r+0x192>
 8010a4c:	ab03      	add	r3, sp, #12
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	462a      	mov	r2, r5
 8010a52:	4638      	mov	r0, r7
 8010a54:	4b0e      	ldr	r3, [pc, #56]	@ (8010a90 <_svfiprintf_r+0x1f4>)
 8010a56:	a904      	add	r1, sp, #16
 8010a58:	f7fc fc50 	bl	800d2fc <_printf_float>
 8010a5c:	1c42      	adds	r2, r0, #1
 8010a5e:	4606      	mov	r6, r0
 8010a60:	d1d6      	bne.n	8010a10 <_svfiprintf_r+0x174>
 8010a62:	89ab      	ldrh	r3, [r5, #12]
 8010a64:	065b      	lsls	r3, r3, #25
 8010a66:	f53f af2d 	bmi.w	80108c4 <_svfiprintf_r+0x28>
 8010a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a6c:	e72c      	b.n	80108c8 <_svfiprintf_r+0x2c>
 8010a6e:	ab03      	add	r3, sp, #12
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	462a      	mov	r2, r5
 8010a74:	4638      	mov	r0, r7
 8010a76:	4b06      	ldr	r3, [pc, #24]	@ (8010a90 <_svfiprintf_r+0x1f4>)
 8010a78:	a904      	add	r1, sp, #16
 8010a7a:	f7fc fedd 	bl	800d838 <_printf_i>
 8010a7e:	e7ed      	b.n	8010a5c <_svfiprintf_r+0x1c0>
 8010a80:	080129d5 	.word	0x080129d5
 8010a84:	080129db 	.word	0x080129db
 8010a88:	080129df 	.word	0x080129df
 8010a8c:	0800d2fd 	.word	0x0800d2fd
 8010a90:	080107e5 	.word	0x080107e5

08010a94 <_sungetc_r>:
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	1c4b      	adds	r3, r1, #1
 8010a98:	4614      	mov	r4, r2
 8010a9a:	d103      	bne.n	8010aa4 <_sungetc_r+0x10>
 8010a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	8993      	ldrh	r3, [r2, #12]
 8010aa6:	b2cd      	uxtb	r5, r1
 8010aa8:	f023 0320 	bic.w	r3, r3, #32
 8010aac:	8193      	strh	r3, [r2, #12]
 8010aae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ab0:	6852      	ldr	r2, [r2, #4]
 8010ab2:	b18b      	cbz	r3, 8010ad8 <_sungetc_r+0x44>
 8010ab4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	dd08      	ble.n	8010acc <_sungetc_r+0x38>
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	1e5a      	subs	r2, r3, #1
 8010abe:	6022      	str	r2, [r4, #0]
 8010ac0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010ac4:	6863      	ldr	r3, [r4, #4]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	6063      	str	r3, [r4, #4]
 8010aca:	e7e9      	b.n	8010aa0 <_sungetc_r+0xc>
 8010acc:	4621      	mov	r1, r4
 8010ace:	f000 fbdc 	bl	801128a <__submore>
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	d0f1      	beq.n	8010aba <_sungetc_r+0x26>
 8010ad6:	e7e1      	b.n	8010a9c <_sungetc_r+0x8>
 8010ad8:	6921      	ldr	r1, [r4, #16]
 8010ada:	6823      	ldr	r3, [r4, #0]
 8010adc:	b151      	cbz	r1, 8010af4 <_sungetc_r+0x60>
 8010ade:	4299      	cmp	r1, r3
 8010ae0:	d208      	bcs.n	8010af4 <_sungetc_r+0x60>
 8010ae2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010ae6:	42a9      	cmp	r1, r5
 8010ae8:	d104      	bne.n	8010af4 <_sungetc_r+0x60>
 8010aea:	3b01      	subs	r3, #1
 8010aec:	3201      	adds	r2, #1
 8010aee:	6023      	str	r3, [r4, #0]
 8010af0:	6062      	str	r2, [r4, #4]
 8010af2:	e7d5      	b.n	8010aa0 <_sungetc_r+0xc>
 8010af4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010afc:	6363      	str	r3, [r4, #52]	@ 0x34
 8010afe:	2303      	movs	r3, #3
 8010b00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010b02:	4623      	mov	r3, r4
 8010b04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e7dc      	b.n	8010ac8 <_sungetc_r+0x34>

08010b0e <__ssrefill_r>:
 8010b0e:	b510      	push	{r4, lr}
 8010b10:	460c      	mov	r4, r1
 8010b12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010b14:	b169      	cbz	r1, 8010b32 <__ssrefill_r+0x24>
 8010b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b1a:	4299      	cmp	r1, r3
 8010b1c:	d001      	beq.n	8010b22 <__ssrefill_r+0x14>
 8010b1e:	f7fe fa47 	bl	800efb0 <_free_r>
 8010b22:	2000      	movs	r0, #0
 8010b24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b26:	6360      	str	r0, [r4, #52]	@ 0x34
 8010b28:	6063      	str	r3, [r4, #4]
 8010b2a:	b113      	cbz	r3, 8010b32 <__ssrefill_r+0x24>
 8010b2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010b2e:	6023      	str	r3, [r4, #0]
 8010b30:	bd10      	pop	{r4, pc}
 8010b32:	6923      	ldr	r3, [r4, #16]
 8010b34:	f04f 30ff 	mov.w	r0, #4294967295
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	6063      	str	r3, [r4, #4]
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	f043 0320 	orr.w	r3, r3, #32
 8010b44:	81a3      	strh	r3, [r4, #12]
 8010b46:	e7f3      	b.n	8010b30 <__ssrefill_r+0x22>

08010b48 <__ssvfiscanf_r>:
 8010b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b4c:	460c      	mov	r4, r1
 8010b4e:	2100      	movs	r1, #0
 8010b50:	4606      	mov	r6, r0
 8010b52:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8010b56:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010b5a:	49ab      	ldr	r1, [pc, #684]	@ (8010e08 <__ssvfiscanf_r+0x2c0>)
 8010b5c:	f10d 0804 	add.w	r8, sp, #4
 8010b60:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010b62:	49aa      	ldr	r1, [pc, #680]	@ (8010e0c <__ssvfiscanf_r+0x2c4>)
 8010b64:	4faa      	ldr	r7, [pc, #680]	@ (8010e10 <__ssvfiscanf_r+0x2c8>)
 8010b66:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010b6a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010b6c:	9300      	str	r3, [sp, #0]
 8010b6e:	f892 9000 	ldrb.w	r9, [r2]
 8010b72:	f1b9 0f00 	cmp.w	r9, #0
 8010b76:	f000 8159 	beq.w	8010e2c <__ssvfiscanf_r+0x2e4>
 8010b7a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8010b7e:	1c55      	adds	r5, r2, #1
 8010b80:	f013 0308 	ands.w	r3, r3, #8
 8010b84:	d019      	beq.n	8010bba <__ssvfiscanf_r+0x72>
 8010b86:	6863      	ldr	r3, [r4, #4]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	dd0f      	ble.n	8010bac <__ssvfiscanf_r+0x64>
 8010b8c:	6823      	ldr	r3, [r4, #0]
 8010b8e:	781a      	ldrb	r2, [r3, #0]
 8010b90:	5cba      	ldrb	r2, [r7, r2]
 8010b92:	0712      	lsls	r2, r2, #28
 8010b94:	d401      	bmi.n	8010b9a <__ssvfiscanf_r+0x52>
 8010b96:	462a      	mov	r2, r5
 8010b98:	e7e9      	b.n	8010b6e <__ssvfiscanf_r+0x26>
 8010b9a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	3201      	adds	r2, #1
 8010ba0:	9245      	str	r2, [sp, #276]	@ 0x114
 8010ba2:	6862      	ldr	r2, [r4, #4]
 8010ba4:	6023      	str	r3, [r4, #0]
 8010ba6:	3a01      	subs	r2, #1
 8010ba8:	6062      	str	r2, [r4, #4]
 8010baa:	e7ec      	b.n	8010b86 <__ssvfiscanf_r+0x3e>
 8010bac:	4621      	mov	r1, r4
 8010bae:	4630      	mov	r0, r6
 8010bb0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010bb2:	4798      	blx	r3
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d0e9      	beq.n	8010b8c <__ssvfiscanf_r+0x44>
 8010bb8:	e7ed      	b.n	8010b96 <__ssvfiscanf_r+0x4e>
 8010bba:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010bbe:	f040 8086 	bne.w	8010cce <__ssvfiscanf_r+0x186>
 8010bc2:	9341      	str	r3, [sp, #260]	@ 0x104
 8010bc4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010bc6:	7853      	ldrb	r3, [r2, #1]
 8010bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bca:	bf04      	itt	eq
 8010bcc:	2310      	moveq	r3, #16
 8010bce:	1c95      	addeq	r5, r2, #2
 8010bd0:	f04f 020a 	mov.w	r2, #10
 8010bd4:	bf08      	it	eq
 8010bd6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010bd8:	46aa      	mov	sl, r5
 8010bda:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010bde:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010be2:	2b09      	cmp	r3, #9
 8010be4:	d91e      	bls.n	8010c24 <__ssvfiscanf_r+0xdc>
 8010be6:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8010e14 <__ssvfiscanf_r+0x2cc>
 8010bea:	2203      	movs	r2, #3
 8010bec:	4658      	mov	r0, fp
 8010bee:	f7fd fb6e 	bl	800e2ce <memchr>
 8010bf2:	b138      	cbz	r0, 8010c04 <__ssvfiscanf_r+0xbc>
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	4655      	mov	r5, sl
 8010bf8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010bfa:	eba0 000b 	sub.w	r0, r0, fp
 8010bfe:	4083      	lsls	r3, r0
 8010c00:	4313      	orrs	r3, r2
 8010c02:	9341      	str	r3, [sp, #260]	@ 0x104
 8010c04:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010c08:	2b78      	cmp	r3, #120	@ 0x78
 8010c0a:	d806      	bhi.n	8010c1a <__ssvfiscanf_r+0xd2>
 8010c0c:	2b57      	cmp	r3, #87	@ 0x57
 8010c0e:	d810      	bhi.n	8010c32 <__ssvfiscanf_r+0xea>
 8010c10:	2b25      	cmp	r3, #37	@ 0x25
 8010c12:	d05c      	beq.n	8010cce <__ssvfiscanf_r+0x186>
 8010c14:	d856      	bhi.n	8010cc4 <__ssvfiscanf_r+0x17c>
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d074      	beq.n	8010d04 <__ssvfiscanf_r+0x1bc>
 8010c1a:	2303      	movs	r3, #3
 8010c1c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010c1e:	230a      	movs	r3, #10
 8010c20:	9342      	str	r3, [sp, #264]	@ 0x108
 8010c22:	e087      	b.n	8010d34 <__ssvfiscanf_r+0x1ec>
 8010c24:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010c26:	4655      	mov	r5, sl
 8010c28:	fb02 1103 	mla	r1, r2, r3, r1
 8010c2c:	3930      	subs	r1, #48	@ 0x30
 8010c2e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010c30:	e7d2      	b.n	8010bd8 <__ssvfiscanf_r+0x90>
 8010c32:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010c36:	2a20      	cmp	r2, #32
 8010c38:	d8ef      	bhi.n	8010c1a <__ssvfiscanf_r+0xd2>
 8010c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8010c40 <__ssvfiscanf_r+0xf8>)
 8010c3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c40:	08010d13 	.word	0x08010d13
 8010c44:	08010c1b 	.word	0x08010c1b
 8010c48:	08010c1b 	.word	0x08010c1b
 8010c4c:	08010d6d 	.word	0x08010d6d
 8010c50:	08010c1b 	.word	0x08010c1b
 8010c54:	08010c1b 	.word	0x08010c1b
 8010c58:	08010c1b 	.word	0x08010c1b
 8010c5c:	08010c1b 	.word	0x08010c1b
 8010c60:	08010c1b 	.word	0x08010c1b
 8010c64:	08010c1b 	.word	0x08010c1b
 8010c68:	08010c1b 	.word	0x08010c1b
 8010c6c:	08010d83 	.word	0x08010d83
 8010c70:	08010d69 	.word	0x08010d69
 8010c74:	08010ccb 	.word	0x08010ccb
 8010c78:	08010ccb 	.word	0x08010ccb
 8010c7c:	08010ccb 	.word	0x08010ccb
 8010c80:	08010c1b 	.word	0x08010c1b
 8010c84:	08010d25 	.word	0x08010d25
 8010c88:	08010c1b 	.word	0x08010c1b
 8010c8c:	08010c1b 	.word	0x08010c1b
 8010c90:	08010c1b 	.word	0x08010c1b
 8010c94:	08010c1b 	.word	0x08010c1b
 8010c98:	08010d93 	.word	0x08010d93
 8010c9c:	08010d2d 	.word	0x08010d2d
 8010ca0:	08010d0b 	.word	0x08010d0b
 8010ca4:	08010c1b 	.word	0x08010c1b
 8010ca8:	08010c1b 	.word	0x08010c1b
 8010cac:	08010d8f 	.word	0x08010d8f
 8010cb0:	08010c1b 	.word	0x08010c1b
 8010cb4:	08010d69 	.word	0x08010d69
 8010cb8:	08010c1b 	.word	0x08010c1b
 8010cbc:	08010c1b 	.word	0x08010c1b
 8010cc0:	08010d13 	.word	0x08010d13
 8010cc4:	3b45      	subs	r3, #69	@ 0x45
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	d8a7      	bhi.n	8010c1a <__ssvfiscanf_r+0xd2>
 8010cca:	2305      	movs	r3, #5
 8010ccc:	e031      	b.n	8010d32 <__ssvfiscanf_r+0x1ea>
 8010cce:	6863      	ldr	r3, [r4, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	dd0d      	ble.n	8010cf0 <__ssvfiscanf_r+0x1a8>
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	781a      	ldrb	r2, [r3, #0]
 8010cd8:	454a      	cmp	r2, r9
 8010cda:	f040 80a7 	bne.w	8010e2c <__ssvfiscanf_r+0x2e4>
 8010cde:	3301      	adds	r3, #1
 8010ce0:	6862      	ldr	r2, [r4, #4]
 8010ce2:	6023      	str	r3, [r4, #0]
 8010ce4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010ce6:	3a01      	subs	r2, #1
 8010ce8:	3301      	adds	r3, #1
 8010cea:	6062      	str	r2, [r4, #4]
 8010cec:	9345      	str	r3, [sp, #276]	@ 0x114
 8010cee:	e752      	b.n	8010b96 <__ssvfiscanf_r+0x4e>
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010cf6:	4798      	blx	r3
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d0eb      	beq.n	8010cd4 <__ssvfiscanf_r+0x18c>
 8010cfc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	f040 808c 	bne.w	8010e1c <__ssvfiscanf_r+0x2d4>
 8010d04:	f04f 30ff 	mov.w	r0, #4294967295
 8010d08:	e08c      	b.n	8010e24 <__ssvfiscanf_r+0x2dc>
 8010d0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010d0c:	f042 0220 	orr.w	r2, r2, #32
 8010d10:	9241      	str	r2, [sp, #260]	@ 0x104
 8010d12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010d18:	9241      	str	r2, [sp, #260]	@ 0x104
 8010d1a:	2210      	movs	r2, #16
 8010d1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8010d1e:	9242      	str	r2, [sp, #264]	@ 0x108
 8010d20:	d902      	bls.n	8010d28 <__ssvfiscanf_r+0x1e0>
 8010d22:	e005      	b.n	8010d30 <__ssvfiscanf_r+0x1e8>
 8010d24:	2300      	movs	r3, #0
 8010d26:	9342      	str	r3, [sp, #264]	@ 0x108
 8010d28:	2303      	movs	r3, #3
 8010d2a:	e002      	b.n	8010d32 <__ssvfiscanf_r+0x1ea>
 8010d2c:	2308      	movs	r3, #8
 8010d2e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010d30:	2304      	movs	r3, #4
 8010d32:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010d34:	6863      	ldr	r3, [r4, #4]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	dd39      	ble.n	8010dae <__ssvfiscanf_r+0x266>
 8010d3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010d3c:	0659      	lsls	r1, r3, #25
 8010d3e:	d404      	bmi.n	8010d4a <__ssvfiscanf_r+0x202>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	781a      	ldrb	r2, [r3, #0]
 8010d44:	5cba      	ldrb	r2, [r7, r2]
 8010d46:	0712      	lsls	r2, r2, #28
 8010d48:	d438      	bmi.n	8010dbc <__ssvfiscanf_r+0x274>
 8010d4a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	dc47      	bgt.n	8010de0 <__ssvfiscanf_r+0x298>
 8010d50:	466b      	mov	r3, sp
 8010d52:	4622      	mov	r2, r4
 8010d54:	4630      	mov	r0, r6
 8010d56:	a941      	add	r1, sp, #260	@ 0x104
 8010d58:	f000 f86a 	bl	8010e30 <_scanf_chars>
 8010d5c:	2801      	cmp	r0, #1
 8010d5e:	d065      	beq.n	8010e2c <__ssvfiscanf_r+0x2e4>
 8010d60:	2802      	cmp	r0, #2
 8010d62:	f47f af18 	bne.w	8010b96 <__ssvfiscanf_r+0x4e>
 8010d66:	e7c9      	b.n	8010cfc <__ssvfiscanf_r+0x1b4>
 8010d68:	220a      	movs	r2, #10
 8010d6a:	e7d7      	b.n	8010d1c <__ssvfiscanf_r+0x1d4>
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	4640      	mov	r0, r8
 8010d70:	f000 fa52 	bl	8011218 <__sccl>
 8010d74:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010d76:	4605      	mov	r5, r0
 8010d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d7c:	9341      	str	r3, [sp, #260]	@ 0x104
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e7d7      	b.n	8010d32 <__ssvfiscanf_r+0x1ea>
 8010d82:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d88:	9341      	str	r3, [sp, #260]	@ 0x104
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e7d1      	b.n	8010d32 <__ssvfiscanf_r+0x1ea>
 8010d8e:	2302      	movs	r3, #2
 8010d90:	e7cf      	b.n	8010d32 <__ssvfiscanf_r+0x1ea>
 8010d92:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010d94:	06c3      	lsls	r3, r0, #27
 8010d96:	f53f aefe 	bmi.w	8010b96 <__ssvfiscanf_r+0x4e>
 8010d9a:	9b00      	ldr	r3, [sp, #0]
 8010d9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010d9e:	1d19      	adds	r1, r3, #4
 8010da0:	9100      	str	r1, [sp, #0]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	07c0      	lsls	r0, r0, #31
 8010da6:	bf4c      	ite	mi
 8010da8:	801a      	strhmi	r2, [r3, #0]
 8010daa:	601a      	strpl	r2, [r3, #0]
 8010dac:	e6f3      	b.n	8010b96 <__ssvfiscanf_r+0x4e>
 8010dae:	4621      	mov	r1, r4
 8010db0:	4630      	mov	r0, r6
 8010db2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010db4:	4798      	blx	r3
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d0bf      	beq.n	8010d3a <__ssvfiscanf_r+0x1f2>
 8010dba:	e79f      	b.n	8010cfc <__ssvfiscanf_r+0x1b4>
 8010dbc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010dbe:	3201      	adds	r2, #1
 8010dc0:	9245      	str	r2, [sp, #276]	@ 0x114
 8010dc2:	6862      	ldr	r2, [r4, #4]
 8010dc4:	3a01      	subs	r2, #1
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	6062      	str	r2, [r4, #4]
 8010dca:	dd02      	ble.n	8010dd2 <__ssvfiscanf_r+0x28a>
 8010dcc:	3301      	adds	r3, #1
 8010dce:	6023      	str	r3, [r4, #0]
 8010dd0:	e7b6      	b.n	8010d40 <__ssvfiscanf_r+0x1f8>
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010dd8:	4798      	blx	r3
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d0b0      	beq.n	8010d40 <__ssvfiscanf_r+0x1f8>
 8010dde:	e78d      	b.n	8010cfc <__ssvfiscanf_r+0x1b4>
 8010de0:	2b04      	cmp	r3, #4
 8010de2:	dc06      	bgt.n	8010df2 <__ssvfiscanf_r+0x2aa>
 8010de4:	466b      	mov	r3, sp
 8010de6:	4622      	mov	r2, r4
 8010de8:	4630      	mov	r0, r6
 8010dea:	a941      	add	r1, sp, #260	@ 0x104
 8010dec:	f000 f87a 	bl	8010ee4 <_scanf_i>
 8010df0:	e7b4      	b.n	8010d5c <__ssvfiscanf_r+0x214>
 8010df2:	4b09      	ldr	r3, [pc, #36]	@ (8010e18 <__ssvfiscanf_r+0x2d0>)
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f43f aece 	beq.w	8010b96 <__ssvfiscanf_r+0x4e>
 8010dfa:	466b      	mov	r3, sp
 8010dfc:	4622      	mov	r2, r4
 8010dfe:	4630      	mov	r0, r6
 8010e00:	a941      	add	r1, sp, #260	@ 0x104
 8010e02:	f7fc fe37 	bl	800da74 <_scanf_float>
 8010e06:	e7a9      	b.n	8010d5c <__ssvfiscanf_r+0x214>
 8010e08:	08010a95 	.word	0x08010a95
 8010e0c:	08010b0f 	.word	0x08010b0f
 8010e10:	08012bf9 	.word	0x08012bf9
 8010e14:	080129db 	.word	0x080129db
 8010e18:	0800da75 	.word	0x0800da75
 8010e1c:	89a3      	ldrh	r3, [r4, #12]
 8010e1e:	065b      	lsls	r3, r3, #25
 8010e20:	f53f af70 	bmi.w	8010d04 <__ssvfiscanf_r+0x1bc>
 8010e24:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8010e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010e2e:	e7f9      	b.n	8010e24 <__ssvfiscanf_r+0x2dc>

08010e30 <_scanf_chars>:
 8010e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e34:	4615      	mov	r5, r2
 8010e36:	688a      	ldr	r2, [r1, #8]
 8010e38:	4680      	mov	r8, r0
 8010e3a:	460c      	mov	r4, r1
 8010e3c:	b932      	cbnz	r2, 8010e4c <_scanf_chars+0x1c>
 8010e3e:	698a      	ldr	r2, [r1, #24]
 8010e40:	2a00      	cmp	r2, #0
 8010e42:	bf14      	ite	ne
 8010e44:	f04f 32ff 	movne.w	r2, #4294967295
 8010e48:	2201      	moveq	r2, #1
 8010e4a:	608a      	str	r2, [r1, #8]
 8010e4c:	2700      	movs	r7, #0
 8010e4e:	6822      	ldr	r2, [r4, #0]
 8010e50:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8010ee0 <_scanf_chars+0xb0>
 8010e54:	06d1      	lsls	r1, r2, #27
 8010e56:	bf5f      	itttt	pl
 8010e58:	681a      	ldrpl	r2, [r3, #0]
 8010e5a:	1d11      	addpl	r1, r2, #4
 8010e5c:	6019      	strpl	r1, [r3, #0]
 8010e5e:	6816      	ldrpl	r6, [r2, #0]
 8010e60:	69a0      	ldr	r0, [r4, #24]
 8010e62:	b188      	cbz	r0, 8010e88 <_scanf_chars+0x58>
 8010e64:	2801      	cmp	r0, #1
 8010e66:	d107      	bne.n	8010e78 <_scanf_chars+0x48>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	781a      	ldrb	r2, [r3, #0]
 8010e6c:	6963      	ldr	r3, [r4, #20]
 8010e6e:	5c9b      	ldrb	r3, [r3, r2]
 8010e70:	b953      	cbnz	r3, 8010e88 <_scanf_chars+0x58>
 8010e72:	2f00      	cmp	r7, #0
 8010e74:	d031      	beq.n	8010eda <_scanf_chars+0xaa>
 8010e76:	e022      	b.n	8010ebe <_scanf_chars+0x8e>
 8010e78:	2802      	cmp	r0, #2
 8010e7a:	d120      	bne.n	8010ebe <_scanf_chars+0x8e>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e84:	071b      	lsls	r3, r3, #28
 8010e86:	d41a      	bmi.n	8010ebe <_scanf_chars+0x8e>
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	3701      	adds	r7, #1
 8010e8c:	06da      	lsls	r2, r3, #27
 8010e8e:	bf5e      	ittt	pl
 8010e90:	682b      	ldrpl	r3, [r5, #0]
 8010e92:	781b      	ldrbpl	r3, [r3, #0]
 8010e94:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010e98:	682a      	ldr	r2, [r5, #0]
 8010e9a:	686b      	ldr	r3, [r5, #4]
 8010e9c:	3201      	adds	r2, #1
 8010e9e:	602a      	str	r2, [r5, #0]
 8010ea0:	68a2      	ldr	r2, [r4, #8]
 8010ea2:	3b01      	subs	r3, #1
 8010ea4:	3a01      	subs	r2, #1
 8010ea6:	606b      	str	r3, [r5, #4]
 8010ea8:	60a2      	str	r2, [r4, #8]
 8010eaa:	b142      	cbz	r2, 8010ebe <_scanf_chars+0x8e>
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	dcd7      	bgt.n	8010e60 <_scanf_chars+0x30>
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	4640      	mov	r0, r8
 8010eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010eb8:	4798      	blx	r3
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d0d0      	beq.n	8010e60 <_scanf_chars+0x30>
 8010ebe:	6823      	ldr	r3, [r4, #0]
 8010ec0:	f013 0310 	ands.w	r3, r3, #16
 8010ec4:	d105      	bne.n	8010ed2 <_scanf_chars+0xa2>
 8010ec6:	68e2      	ldr	r2, [r4, #12]
 8010ec8:	3201      	adds	r2, #1
 8010eca:	60e2      	str	r2, [r4, #12]
 8010ecc:	69a2      	ldr	r2, [r4, #24]
 8010ece:	b102      	cbz	r2, 8010ed2 <_scanf_chars+0xa2>
 8010ed0:	7033      	strb	r3, [r6, #0]
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	6923      	ldr	r3, [r4, #16]
 8010ed6:	443b      	add	r3, r7
 8010ed8:	6123      	str	r3, [r4, #16]
 8010eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ede:	bf00      	nop
 8010ee0:	08012bf9 	.word	0x08012bf9

08010ee4 <_scanf_i>:
 8010ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	460c      	mov	r4, r1
 8010eea:	4698      	mov	r8, r3
 8010eec:	4b72      	ldr	r3, [pc, #456]	@ (80110b8 <_scanf_i+0x1d4>)
 8010eee:	b087      	sub	sp, #28
 8010ef0:	4682      	mov	sl, r0
 8010ef2:	4616      	mov	r6, r2
 8010ef4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ef8:	ab03      	add	r3, sp, #12
 8010efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010efe:	4b6f      	ldr	r3, [pc, #444]	@ (80110bc <_scanf_i+0x1d8>)
 8010f00:	69a1      	ldr	r1, [r4, #24]
 8010f02:	4a6f      	ldr	r2, [pc, #444]	@ (80110c0 <_scanf_i+0x1dc>)
 8010f04:	4627      	mov	r7, r4
 8010f06:	2903      	cmp	r1, #3
 8010f08:	bf08      	it	eq
 8010f0a:	461a      	moveq	r2, r3
 8010f0c:	68a3      	ldr	r3, [r4, #8]
 8010f0e:	9201      	str	r2, [sp, #4]
 8010f10:	1e5a      	subs	r2, r3, #1
 8010f12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010f16:	bf81      	itttt	hi
 8010f18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010f1c:	eb03 0905 	addhi.w	r9, r3, r5
 8010f20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010f24:	60a3      	strhi	r3, [r4, #8]
 8010f26:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010f2a:	bf98      	it	ls
 8010f2c:	f04f 0900 	movls.w	r9, #0
 8010f30:	463d      	mov	r5, r7
 8010f32:	f04f 0b00 	mov.w	fp, #0
 8010f36:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010f3a:	6023      	str	r3, [r4, #0]
 8010f3c:	6831      	ldr	r1, [r6, #0]
 8010f3e:	ab03      	add	r3, sp, #12
 8010f40:	2202      	movs	r2, #2
 8010f42:	7809      	ldrb	r1, [r1, #0]
 8010f44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010f48:	f7fd f9c1 	bl	800e2ce <memchr>
 8010f4c:	b328      	cbz	r0, 8010f9a <_scanf_i+0xb6>
 8010f4e:	f1bb 0f01 	cmp.w	fp, #1
 8010f52:	d159      	bne.n	8011008 <_scanf_i+0x124>
 8010f54:	6862      	ldr	r2, [r4, #4]
 8010f56:	b92a      	cbnz	r2, 8010f64 <_scanf_i+0x80>
 8010f58:	2108      	movs	r1, #8
 8010f5a:	6822      	ldr	r2, [r4, #0]
 8010f5c:	6061      	str	r1, [r4, #4]
 8010f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010f62:	6022      	str	r2, [r4, #0]
 8010f64:	6822      	ldr	r2, [r4, #0]
 8010f66:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010f6a:	6022      	str	r2, [r4, #0]
 8010f6c:	68a2      	ldr	r2, [r4, #8]
 8010f6e:	1e51      	subs	r1, r2, #1
 8010f70:	60a1      	str	r1, [r4, #8]
 8010f72:	b192      	cbz	r2, 8010f9a <_scanf_i+0xb6>
 8010f74:	6832      	ldr	r2, [r6, #0]
 8010f76:	1c51      	adds	r1, r2, #1
 8010f78:	6031      	str	r1, [r6, #0]
 8010f7a:	7812      	ldrb	r2, [r2, #0]
 8010f7c:	f805 2b01 	strb.w	r2, [r5], #1
 8010f80:	6872      	ldr	r2, [r6, #4]
 8010f82:	3a01      	subs	r2, #1
 8010f84:	2a00      	cmp	r2, #0
 8010f86:	6072      	str	r2, [r6, #4]
 8010f88:	dc07      	bgt.n	8010f9a <_scanf_i+0xb6>
 8010f8a:	4631      	mov	r1, r6
 8010f8c:	4650      	mov	r0, sl
 8010f8e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010f92:	4790      	blx	r2
 8010f94:	2800      	cmp	r0, #0
 8010f96:	f040 8085 	bne.w	80110a4 <_scanf_i+0x1c0>
 8010f9a:	f10b 0b01 	add.w	fp, fp, #1
 8010f9e:	f1bb 0f03 	cmp.w	fp, #3
 8010fa2:	d1cb      	bne.n	8010f3c <_scanf_i+0x58>
 8010fa4:	6863      	ldr	r3, [r4, #4]
 8010fa6:	b90b      	cbnz	r3, 8010fac <_scanf_i+0xc8>
 8010fa8:	230a      	movs	r3, #10
 8010faa:	6063      	str	r3, [r4, #4]
 8010fac:	6863      	ldr	r3, [r4, #4]
 8010fae:	4945      	ldr	r1, [pc, #276]	@ (80110c4 <_scanf_i+0x1e0>)
 8010fb0:	6960      	ldr	r0, [r4, #20]
 8010fb2:	1ac9      	subs	r1, r1, r3
 8010fb4:	f000 f930 	bl	8011218 <__sccl>
 8010fb8:	f04f 0b00 	mov.w	fp, #0
 8010fbc:	68a3      	ldr	r3, [r4, #8]
 8010fbe:	6822      	ldr	r2, [r4, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d03d      	beq.n	8011040 <_scanf_i+0x15c>
 8010fc4:	6831      	ldr	r1, [r6, #0]
 8010fc6:	6960      	ldr	r0, [r4, #20]
 8010fc8:	f891 c000 	ldrb.w	ip, [r1]
 8010fcc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d035      	beq.n	8011040 <_scanf_i+0x15c>
 8010fd4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010fd8:	d124      	bne.n	8011024 <_scanf_i+0x140>
 8010fda:	0510      	lsls	r0, r2, #20
 8010fdc:	d522      	bpl.n	8011024 <_scanf_i+0x140>
 8010fde:	f10b 0b01 	add.w	fp, fp, #1
 8010fe2:	f1b9 0f00 	cmp.w	r9, #0
 8010fe6:	d003      	beq.n	8010ff0 <_scanf_i+0x10c>
 8010fe8:	3301      	adds	r3, #1
 8010fea:	f109 39ff 	add.w	r9, r9, #4294967295
 8010fee:	60a3      	str	r3, [r4, #8]
 8010ff0:	6873      	ldr	r3, [r6, #4]
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	6073      	str	r3, [r6, #4]
 8010ff8:	dd1b      	ble.n	8011032 <_scanf_i+0x14e>
 8010ffa:	6833      	ldr	r3, [r6, #0]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	6033      	str	r3, [r6, #0]
 8011000:	68a3      	ldr	r3, [r4, #8]
 8011002:	3b01      	subs	r3, #1
 8011004:	60a3      	str	r3, [r4, #8]
 8011006:	e7d9      	b.n	8010fbc <_scanf_i+0xd8>
 8011008:	f1bb 0f02 	cmp.w	fp, #2
 801100c:	d1ae      	bne.n	8010f6c <_scanf_i+0x88>
 801100e:	6822      	ldr	r2, [r4, #0]
 8011010:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011014:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011018:	d1c4      	bne.n	8010fa4 <_scanf_i+0xc0>
 801101a:	2110      	movs	r1, #16
 801101c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011020:	6061      	str	r1, [r4, #4]
 8011022:	e7a2      	b.n	8010f6a <_scanf_i+0x86>
 8011024:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011028:	6022      	str	r2, [r4, #0]
 801102a:	780b      	ldrb	r3, [r1, #0]
 801102c:	f805 3b01 	strb.w	r3, [r5], #1
 8011030:	e7de      	b.n	8010ff0 <_scanf_i+0x10c>
 8011032:	4631      	mov	r1, r6
 8011034:	4650      	mov	r0, sl
 8011036:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801103a:	4798      	blx	r3
 801103c:	2800      	cmp	r0, #0
 801103e:	d0df      	beq.n	8011000 <_scanf_i+0x11c>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	05d9      	lsls	r1, r3, #23
 8011044:	d50d      	bpl.n	8011062 <_scanf_i+0x17e>
 8011046:	42bd      	cmp	r5, r7
 8011048:	d909      	bls.n	801105e <_scanf_i+0x17a>
 801104a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801104e:	4632      	mov	r2, r6
 8011050:	4650      	mov	r0, sl
 8011052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011056:	f105 39ff 	add.w	r9, r5, #4294967295
 801105a:	4798      	blx	r3
 801105c:	464d      	mov	r5, r9
 801105e:	42bd      	cmp	r5, r7
 8011060:	d028      	beq.n	80110b4 <_scanf_i+0x1d0>
 8011062:	6822      	ldr	r2, [r4, #0]
 8011064:	f012 0210 	ands.w	r2, r2, #16
 8011068:	d113      	bne.n	8011092 <_scanf_i+0x1ae>
 801106a:	702a      	strb	r2, [r5, #0]
 801106c:	4639      	mov	r1, r7
 801106e:	6863      	ldr	r3, [r4, #4]
 8011070:	4650      	mov	r0, sl
 8011072:	9e01      	ldr	r6, [sp, #4]
 8011074:	47b0      	blx	r6
 8011076:	f8d8 3000 	ldr.w	r3, [r8]
 801107a:	6821      	ldr	r1, [r4, #0]
 801107c:	1d1a      	adds	r2, r3, #4
 801107e:	f8c8 2000 	str.w	r2, [r8]
 8011082:	f011 0f20 	tst.w	r1, #32
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	d00f      	beq.n	80110aa <_scanf_i+0x1c6>
 801108a:	6018      	str	r0, [r3, #0]
 801108c:	68e3      	ldr	r3, [r4, #12]
 801108e:	3301      	adds	r3, #1
 8011090:	60e3      	str	r3, [r4, #12]
 8011092:	2000      	movs	r0, #0
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	1bed      	subs	r5, r5, r7
 8011098:	445d      	add	r5, fp
 801109a:	442b      	add	r3, r5
 801109c:	6123      	str	r3, [r4, #16]
 801109e:	b007      	add	sp, #28
 80110a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a4:	f04f 0b00 	mov.w	fp, #0
 80110a8:	e7ca      	b.n	8011040 <_scanf_i+0x15c>
 80110aa:	07ca      	lsls	r2, r1, #31
 80110ac:	bf4c      	ite	mi
 80110ae:	8018      	strhmi	r0, [r3, #0]
 80110b0:	6018      	strpl	r0, [r3, #0]
 80110b2:	e7eb      	b.n	801108c <_scanf_i+0x1a8>
 80110b4:	2001      	movs	r0, #1
 80110b6:	e7f2      	b.n	801109e <_scanf_i+0x1ba>
 80110b8:	08012830 	.word	0x08012830
 80110bc:	080107e1 	.word	0x080107e1
 80110c0:	08011bad 	.word	0x08011bad
 80110c4:	080129f6 	.word	0x080129f6

080110c8 <__sflush_r>:
 80110c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ce:	0716      	lsls	r6, r2, #28
 80110d0:	4605      	mov	r5, r0
 80110d2:	460c      	mov	r4, r1
 80110d4:	d454      	bmi.n	8011180 <__sflush_r+0xb8>
 80110d6:	684b      	ldr	r3, [r1, #4]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dc02      	bgt.n	80110e2 <__sflush_r+0x1a>
 80110dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80110de:	2b00      	cmp	r3, #0
 80110e0:	dd48      	ble.n	8011174 <__sflush_r+0xac>
 80110e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110e4:	2e00      	cmp	r6, #0
 80110e6:	d045      	beq.n	8011174 <__sflush_r+0xac>
 80110e8:	2300      	movs	r3, #0
 80110ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110ee:	682f      	ldr	r7, [r5, #0]
 80110f0:	6a21      	ldr	r1, [r4, #32]
 80110f2:	602b      	str	r3, [r5, #0]
 80110f4:	d030      	beq.n	8011158 <__sflush_r+0x90>
 80110f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110f8:	89a3      	ldrh	r3, [r4, #12]
 80110fa:	0759      	lsls	r1, r3, #29
 80110fc:	d505      	bpl.n	801110a <__sflush_r+0x42>
 80110fe:	6863      	ldr	r3, [r4, #4]
 8011100:	1ad2      	subs	r2, r2, r3
 8011102:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011104:	b10b      	cbz	r3, 801110a <__sflush_r+0x42>
 8011106:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011108:	1ad2      	subs	r2, r2, r3
 801110a:	2300      	movs	r3, #0
 801110c:	4628      	mov	r0, r5
 801110e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011110:	6a21      	ldr	r1, [r4, #32]
 8011112:	47b0      	blx	r6
 8011114:	1c43      	adds	r3, r0, #1
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	d106      	bne.n	8011128 <__sflush_r+0x60>
 801111a:	6829      	ldr	r1, [r5, #0]
 801111c:	291d      	cmp	r1, #29
 801111e:	d82b      	bhi.n	8011178 <__sflush_r+0xb0>
 8011120:	4a28      	ldr	r2, [pc, #160]	@ (80111c4 <__sflush_r+0xfc>)
 8011122:	40ca      	lsrs	r2, r1
 8011124:	07d6      	lsls	r6, r2, #31
 8011126:	d527      	bpl.n	8011178 <__sflush_r+0xb0>
 8011128:	2200      	movs	r2, #0
 801112a:	6062      	str	r2, [r4, #4]
 801112c:	6922      	ldr	r2, [r4, #16]
 801112e:	04d9      	lsls	r1, r3, #19
 8011130:	6022      	str	r2, [r4, #0]
 8011132:	d504      	bpl.n	801113e <__sflush_r+0x76>
 8011134:	1c42      	adds	r2, r0, #1
 8011136:	d101      	bne.n	801113c <__sflush_r+0x74>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b903      	cbnz	r3, 801113e <__sflush_r+0x76>
 801113c:	6560      	str	r0, [r4, #84]	@ 0x54
 801113e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011140:	602f      	str	r7, [r5, #0]
 8011142:	b1b9      	cbz	r1, 8011174 <__sflush_r+0xac>
 8011144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011148:	4299      	cmp	r1, r3
 801114a:	d002      	beq.n	8011152 <__sflush_r+0x8a>
 801114c:	4628      	mov	r0, r5
 801114e:	f7fd ff2f 	bl	800efb0 <_free_r>
 8011152:	2300      	movs	r3, #0
 8011154:	6363      	str	r3, [r4, #52]	@ 0x34
 8011156:	e00d      	b.n	8011174 <__sflush_r+0xac>
 8011158:	2301      	movs	r3, #1
 801115a:	4628      	mov	r0, r5
 801115c:	47b0      	blx	r6
 801115e:	4602      	mov	r2, r0
 8011160:	1c50      	adds	r0, r2, #1
 8011162:	d1c9      	bne.n	80110f8 <__sflush_r+0x30>
 8011164:	682b      	ldr	r3, [r5, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d0c6      	beq.n	80110f8 <__sflush_r+0x30>
 801116a:	2b1d      	cmp	r3, #29
 801116c:	d001      	beq.n	8011172 <__sflush_r+0xaa>
 801116e:	2b16      	cmp	r3, #22
 8011170:	d11d      	bne.n	80111ae <__sflush_r+0xe6>
 8011172:	602f      	str	r7, [r5, #0]
 8011174:	2000      	movs	r0, #0
 8011176:	e021      	b.n	80111bc <__sflush_r+0xf4>
 8011178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801117c:	b21b      	sxth	r3, r3
 801117e:	e01a      	b.n	80111b6 <__sflush_r+0xee>
 8011180:	690f      	ldr	r7, [r1, #16]
 8011182:	2f00      	cmp	r7, #0
 8011184:	d0f6      	beq.n	8011174 <__sflush_r+0xac>
 8011186:	0793      	lsls	r3, r2, #30
 8011188:	bf18      	it	ne
 801118a:	2300      	movne	r3, #0
 801118c:	680e      	ldr	r6, [r1, #0]
 801118e:	bf08      	it	eq
 8011190:	694b      	ldreq	r3, [r1, #20]
 8011192:	1bf6      	subs	r6, r6, r7
 8011194:	600f      	str	r7, [r1, #0]
 8011196:	608b      	str	r3, [r1, #8]
 8011198:	2e00      	cmp	r6, #0
 801119a:	ddeb      	ble.n	8011174 <__sflush_r+0xac>
 801119c:	4633      	mov	r3, r6
 801119e:	463a      	mov	r2, r7
 80111a0:	4628      	mov	r0, r5
 80111a2:	6a21      	ldr	r1, [r4, #32]
 80111a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80111a8:	47e0      	blx	ip
 80111aa:	2800      	cmp	r0, #0
 80111ac:	dc07      	bgt.n	80111be <__sflush_r+0xf6>
 80111ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111b6:	f04f 30ff 	mov.w	r0, #4294967295
 80111ba:	81a3      	strh	r3, [r4, #12]
 80111bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111be:	4407      	add	r7, r0
 80111c0:	1a36      	subs	r6, r6, r0
 80111c2:	e7e9      	b.n	8011198 <__sflush_r+0xd0>
 80111c4:	20400001 	.word	0x20400001

080111c8 <_fflush_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	690b      	ldr	r3, [r1, #16]
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	b913      	cbnz	r3, 80111d8 <_fflush_r+0x10>
 80111d2:	2500      	movs	r5, #0
 80111d4:	4628      	mov	r0, r5
 80111d6:	bd38      	pop	{r3, r4, r5, pc}
 80111d8:	b118      	cbz	r0, 80111e2 <_fflush_r+0x1a>
 80111da:	6a03      	ldr	r3, [r0, #32]
 80111dc:	b90b      	cbnz	r3, 80111e2 <_fflush_r+0x1a>
 80111de:	f7fc fedf 	bl	800dfa0 <__sinit>
 80111e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0f3      	beq.n	80111d2 <_fflush_r+0xa>
 80111ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111ec:	07d0      	lsls	r0, r2, #31
 80111ee:	d404      	bmi.n	80111fa <_fflush_r+0x32>
 80111f0:	0599      	lsls	r1, r3, #22
 80111f2:	d402      	bmi.n	80111fa <_fflush_r+0x32>
 80111f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111f6:	f7fd f868 	bl	800e2ca <__retarget_lock_acquire_recursive>
 80111fa:	4628      	mov	r0, r5
 80111fc:	4621      	mov	r1, r4
 80111fe:	f7ff ff63 	bl	80110c8 <__sflush_r>
 8011202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011204:	4605      	mov	r5, r0
 8011206:	07da      	lsls	r2, r3, #31
 8011208:	d4e4      	bmi.n	80111d4 <_fflush_r+0xc>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	059b      	lsls	r3, r3, #22
 801120e:	d4e1      	bmi.n	80111d4 <_fflush_r+0xc>
 8011210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011212:	f7fd f85b 	bl	800e2cc <__retarget_lock_release_recursive>
 8011216:	e7dd      	b.n	80111d4 <_fflush_r+0xc>

08011218 <__sccl>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	780b      	ldrb	r3, [r1, #0]
 801121c:	4604      	mov	r4, r0
 801121e:	2b5e      	cmp	r3, #94	@ 0x5e
 8011220:	bf0b      	itete	eq
 8011222:	784b      	ldrbeq	r3, [r1, #1]
 8011224:	1c4a      	addne	r2, r1, #1
 8011226:	1c8a      	addeq	r2, r1, #2
 8011228:	2100      	movne	r1, #0
 801122a:	bf08      	it	eq
 801122c:	2101      	moveq	r1, #1
 801122e:	3801      	subs	r0, #1
 8011230:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011234:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011238:	42a8      	cmp	r0, r5
 801123a:	d1fb      	bne.n	8011234 <__sccl+0x1c>
 801123c:	b90b      	cbnz	r3, 8011242 <__sccl+0x2a>
 801123e:	1e50      	subs	r0, r2, #1
 8011240:	bd70      	pop	{r4, r5, r6, pc}
 8011242:	f081 0101 	eor.w	r1, r1, #1
 8011246:	4610      	mov	r0, r2
 8011248:	54e1      	strb	r1, [r4, r3]
 801124a:	4602      	mov	r2, r0
 801124c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011250:	2d2d      	cmp	r5, #45	@ 0x2d
 8011252:	d005      	beq.n	8011260 <__sccl+0x48>
 8011254:	2d5d      	cmp	r5, #93	@ 0x5d
 8011256:	d016      	beq.n	8011286 <__sccl+0x6e>
 8011258:	2d00      	cmp	r5, #0
 801125a:	d0f1      	beq.n	8011240 <__sccl+0x28>
 801125c:	462b      	mov	r3, r5
 801125e:	e7f2      	b.n	8011246 <__sccl+0x2e>
 8011260:	7846      	ldrb	r6, [r0, #1]
 8011262:	2e5d      	cmp	r6, #93	@ 0x5d
 8011264:	d0fa      	beq.n	801125c <__sccl+0x44>
 8011266:	42b3      	cmp	r3, r6
 8011268:	dcf8      	bgt.n	801125c <__sccl+0x44>
 801126a:	461a      	mov	r2, r3
 801126c:	3002      	adds	r0, #2
 801126e:	3201      	adds	r2, #1
 8011270:	4296      	cmp	r6, r2
 8011272:	54a1      	strb	r1, [r4, r2]
 8011274:	dcfb      	bgt.n	801126e <__sccl+0x56>
 8011276:	1af2      	subs	r2, r6, r3
 8011278:	3a01      	subs	r2, #1
 801127a:	42b3      	cmp	r3, r6
 801127c:	bfa8      	it	ge
 801127e:	2200      	movge	r2, #0
 8011280:	1c5d      	adds	r5, r3, #1
 8011282:	18ab      	adds	r3, r5, r2
 8011284:	e7e1      	b.n	801124a <__sccl+0x32>
 8011286:	4610      	mov	r0, r2
 8011288:	e7da      	b.n	8011240 <__sccl+0x28>

0801128a <__submore>:
 801128a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128e:	460c      	mov	r4, r1
 8011290:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011296:	4299      	cmp	r1, r3
 8011298:	d11b      	bne.n	80112d2 <__submore+0x48>
 801129a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801129e:	f7fd fef9 	bl	800f094 <_malloc_r>
 80112a2:	b918      	cbnz	r0, 80112ac <__submore+0x22>
 80112a4:	f04f 30ff 	mov.w	r0, #4294967295
 80112a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80112b2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80112b6:	6360      	str	r0, [r4, #52]	@ 0x34
 80112b8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80112bc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80112c0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80112c4:	7043      	strb	r3, [r0, #1]
 80112c6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80112ca:	7003      	strb	r3, [r0, #0]
 80112cc:	6020      	str	r0, [r4, #0]
 80112ce:	2000      	movs	r0, #0
 80112d0:	e7ea      	b.n	80112a8 <__submore+0x1e>
 80112d2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80112d4:	0077      	lsls	r7, r6, #1
 80112d6:	463a      	mov	r2, r7
 80112d8:	f000 fbcb 	bl	8011a72 <_realloc_r>
 80112dc:	4605      	mov	r5, r0
 80112de:	2800      	cmp	r0, #0
 80112e0:	d0e0      	beq.n	80112a4 <__submore+0x1a>
 80112e2:	eb00 0806 	add.w	r8, r0, r6
 80112e6:	4601      	mov	r1, r0
 80112e8:	4632      	mov	r2, r6
 80112ea:	4640      	mov	r0, r8
 80112ec:	f000 f830 	bl	8011350 <memcpy>
 80112f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80112f4:	f8c4 8000 	str.w	r8, [r4]
 80112f8:	e7e9      	b.n	80112ce <__submore+0x44>

080112fa <memmove>:
 80112fa:	4288      	cmp	r0, r1
 80112fc:	b510      	push	{r4, lr}
 80112fe:	eb01 0402 	add.w	r4, r1, r2
 8011302:	d902      	bls.n	801130a <memmove+0x10>
 8011304:	4284      	cmp	r4, r0
 8011306:	4623      	mov	r3, r4
 8011308:	d807      	bhi.n	801131a <memmove+0x20>
 801130a:	1e43      	subs	r3, r0, #1
 801130c:	42a1      	cmp	r1, r4
 801130e:	d008      	beq.n	8011322 <memmove+0x28>
 8011310:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011314:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011318:	e7f8      	b.n	801130c <memmove+0x12>
 801131a:	4601      	mov	r1, r0
 801131c:	4402      	add	r2, r0
 801131e:	428a      	cmp	r2, r1
 8011320:	d100      	bne.n	8011324 <memmove+0x2a>
 8011322:	bd10      	pop	{r4, pc}
 8011324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011328:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801132c:	e7f7      	b.n	801131e <memmove+0x24>
	...

08011330 <_sbrk_r>:
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	2300      	movs	r3, #0
 8011334:	4d05      	ldr	r5, [pc, #20]	@ (801134c <_sbrk_r+0x1c>)
 8011336:	4604      	mov	r4, r0
 8011338:	4608      	mov	r0, r1
 801133a:	602b      	str	r3, [r5, #0]
 801133c:	f7f2 fa62 	bl	8003804 <_sbrk>
 8011340:	1c43      	adds	r3, r0, #1
 8011342:	d102      	bne.n	801134a <_sbrk_r+0x1a>
 8011344:	682b      	ldr	r3, [r5, #0]
 8011346:	b103      	cbz	r3, 801134a <_sbrk_r+0x1a>
 8011348:	6023      	str	r3, [r4, #0]
 801134a:	bd38      	pop	{r3, r4, r5, pc}
 801134c:	20001ab0 	.word	0x20001ab0

08011350 <memcpy>:
 8011350:	440a      	add	r2, r1
 8011352:	4291      	cmp	r1, r2
 8011354:	f100 33ff 	add.w	r3, r0, #4294967295
 8011358:	d100      	bne.n	801135c <memcpy+0xc>
 801135a:	4770      	bx	lr
 801135c:	b510      	push	{r4, lr}
 801135e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011362:	4291      	cmp	r1, r2
 8011364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011368:	d1f9      	bne.n	801135e <memcpy+0xe>
 801136a:	bd10      	pop	{r4, pc}

0801136c <nan>:
 801136c:	2000      	movs	r0, #0
 801136e:	4901      	ldr	r1, [pc, #4]	@ (8011374 <nan+0x8>)
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	7ff80000 	.word	0x7ff80000

08011378 <__assert_func>:
 8011378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801137a:	4614      	mov	r4, r2
 801137c:	461a      	mov	r2, r3
 801137e:	4b09      	ldr	r3, [pc, #36]	@ (80113a4 <__assert_func+0x2c>)
 8011380:	4605      	mov	r5, r0
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	68d8      	ldr	r0, [r3, #12]
 8011386:	b14c      	cbz	r4, 801139c <__assert_func+0x24>
 8011388:	4b07      	ldr	r3, [pc, #28]	@ (80113a8 <__assert_func+0x30>)
 801138a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801138e:	9100      	str	r1, [sp, #0]
 8011390:	462b      	mov	r3, r5
 8011392:	4906      	ldr	r1, [pc, #24]	@ (80113ac <__assert_func+0x34>)
 8011394:	f000 fc1a 	bl	8011bcc <fiprintf>
 8011398:	f000 fc2a 	bl	8011bf0 <abort>
 801139c:	4b04      	ldr	r3, [pc, #16]	@ (80113b0 <__assert_func+0x38>)
 801139e:	461c      	mov	r4, r3
 80113a0:	e7f3      	b.n	801138a <__assert_func+0x12>
 80113a2:	bf00      	nop
 80113a4:	200001a0 	.word	0x200001a0
 80113a8:	08012a09 	.word	0x08012a09
 80113ac:	08012a16 	.word	0x08012a16
 80113b0:	08012a44 	.word	0x08012a44

080113b4 <_calloc_r>:
 80113b4:	b570      	push	{r4, r5, r6, lr}
 80113b6:	fba1 5402 	umull	r5, r4, r1, r2
 80113ba:	b934      	cbnz	r4, 80113ca <_calloc_r+0x16>
 80113bc:	4629      	mov	r1, r5
 80113be:	f7fd fe69 	bl	800f094 <_malloc_r>
 80113c2:	4606      	mov	r6, r0
 80113c4:	b928      	cbnz	r0, 80113d2 <_calloc_r+0x1e>
 80113c6:	4630      	mov	r0, r6
 80113c8:	bd70      	pop	{r4, r5, r6, pc}
 80113ca:	220c      	movs	r2, #12
 80113cc:	2600      	movs	r6, #0
 80113ce:	6002      	str	r2, [r0, #0]
 80113d0:	e7f9      	b.n	80113c6 <_calloc_r+0x12>
 80113d2:	462a      	mov	r2, r5
 80113d4:	4621      	mov	r1, r4
 80113d6:	f7fc fee9 	bl	800e1ac <memset>
 80113da:	e7f4      	b.n	80113c6 <_calloc_r+0x12>

080113dc <rshift>:
 80113dc:	6903      	ldr	r3, [r0, #16]
 80113de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80113e6:	f100 0414 	add.w	r4, r0, #20
 80113ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80113ee:	dd46      	ble.n	801147e <rshift+0xa2>
 80113f0:	f011 011f 	ands.w	r1, r1, #31
 80113f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80113f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80113fc:	d10c      	bne.n	8011418 <rshift+0x3c>
 80113fe:	4629      	mov	r1, r5
 8011400:	f100 0710 	add.w	r7, r0, #16
 8011404:	42b1      	cmp	r1, r6
 8011406:	d335      	bcc.n	8011474 <rshift+0x98>
 8011408:	1a9b      	subs	r3, r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	1eea      	subs	r2, r5, #3
 801140e:	4296      	cmp	r6, r2
 8011410:	bf38      	it	cc
 8011412:	2300      	movcc	r3, #0
 8011414:	4423      	add	r3, r4
 8011416:	e015      	b.n	8011444 <rshift+0x68>
 8011418:	46a1      	mov	r9, r4
 801141a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801141e:	f1c1 0820 	rsb	r8, r1, #32
 8011422:	40cf      	lsrs	r7, r1
 8011424:	f105 0e04 	add.w	lr, r5, #4
 8011428:	4576      	cmp	r6, lr
 801142a:	46f4      	mov	ip, lr
 801142c:	d816      	bhi.n	801145c <rshift+0x80>
 801142e:	1a9a      	subs	r2, r3, r2
 8011430:	0092      	lsls	r2, r2, #2
 8011432:	3a04      	subs	r2, #4
 8011434:	3501      	adds	r5, #1
 8011436:	42ae      	cmp	r6, r5
 8011438:	bf38      	it	cc
 801143a:	2200      	movcc	r2, #0
 801143c:	18a3      	adds	r3, r4, r2
 801143e:	50a7      	str	r7, [r4, r2]
 8011440:	b107      	cbz	r7, 8011444 <rshift+0x68>
 8011442:	3304      	adds	r3, #4
 8011444:	42a3      	cmp	r3, r4
 8011446:	eba3 0204 	sub.w	r2, r3, r4
 801144a:	bf08      	it	eq
 801144c:	2300      	moveq	r3, #0
 801144e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011452:	6102      	str	r2, [r0, #16]
 8011454:	bf08      	it	eq
 8011456:	6143      	streq	r3, [r0, #20]
 8011458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801145c:	f8dc c000 	ldr.w	ip, [ip]
 8011460:	fa0c fc08 	lsl.w	ip, ip, r8
 8011464:	ea4c 0707 	orr.w	r7, ip, r7
 8011468:	f849 7b04 	str.w	r7, [r9], #4
 801146c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011470:	40cf      	lsrs	r7, r1
 8011472:	e7d9      	b.n	8011428 <rshift+0x4c>
 8011474:	f851 cb04 	ldr.w	ip, [r1], #4
 8011478:	f847 cf04 	str.w	ip, [r7, #4]!
 801147c:	e7c2      	b.n	8011404 <rshift+0x28>
 801147e:	4623      	mov	r3, r4
 8011480:	e7e0      	b.n	8011444 <rshift+0x68>

08011482 <__hexdig_fun>:
 8011482:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011486:	2b09      	cmp	r3, #9
 8011488:	d802      	bhi.n	8011490 <__hexdig_fun+0xe>
 801148a:	3820      	subs	r0, #32
 801148c:	b2c0      	uxtb	r0, r0
 801148e:	4770      	bx	lr
 8011490:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011494:	2b05      	cmp	r3, #5
 8011496:	d801      	bhi.n	801149c <__hexdig_fun+0x1a>
 8011498:	3847      	subs	r0, #71	@ 0x47
 801149a:	e7f7      	b.n	801148c <__hexdig_fun+0xa>
 801149c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80114a0:	2b05      	cmp	r3, #5
 80114a2:	d801      	bhi.n	80114a8 <__hexdig_fun+0x26>
 80114a4:	3827      	subs	r0, #39	@ 0x27
 80114a6:	e7f1      	b.n	801148c <__hexdig_fun+0xa>
 80114a8:	2000      	movs	r0, #0
 80114aa:	4770      	bx	lr

080114ac <__gethex>:
 80114ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b0:	468a      	mov	sl, r1
 80114b2:	4690      	mov	r8, r2
 80114b4:	b085      	sub	sp, #20
 80114b6:	9302      	str	r3, [sp, #8]
 80114b8:	680b      	ldr	r3, [r1, #0]
 80114ba:	9001      	str	r0, [sp, #4]
 80114bc:	1c9c      	adds	r4, r3, #2
 80114be:	46a1      	mov	r9, r4
 80114c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80114c4:	2830      	cmp	r0, #48	@ 0x30
 80114c6:	d0fa      	beq.n	80114be <__gethex+0x12>
 80114c8:	eba9 0303 	sub.w	r3, r9, r3
 80114cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80114d0:	f7ff ffd7 	bl	8011482 <__hexdig_fun>
 80114d4:	4605      	mov	r5, r0
 80114d6:	2800      	cmp	r0, #0
 80114d8:	d168      	bne.n	80115ac <__gethex+0x100>
 80114da:	2201      	movs	r2, #1
 80114dc:	4648      	mov	r0, r9
 80114de:	499f      	ldr	r1, [pc, #636]	@ (801175c <__gethex+0x2b0>)
 80114e0:	f7fc fe6c 	bl	800e1bc <strncmp>
 80114e4:	4607      	mov	r7, r0
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d167      	bne.n	80115ba <__gethex+0x10e>
 80114ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80114ee:	4626      	mov	r6, r4
 80114f0:	f7ff ffc7 	bl	8011482 <__hexdig_fun>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d062      	beq.n	80115be <__gethex+0x112>
 80114f8:	4623      	mov	r3, r4
 80114fa:	7818      	ldrb	r0, [r3, #0]
 80114fc:	4699      	mov	r9, r3
 80114fe:	2830      	cmp	r0, #48	@ 0x30
 8011500:	f103 0301 	add.w	r3, r3, #1
 8011504:	d0f9      	beq.n	80114fa <__gethex+0x4e>
 8011506:	f7ff ffbc 	bl	8011482 <__hexdig_fun>
 801150a:	fab0 f580 	clz	r5, r0
 801150e:	f04f 0b01 	mov.w	fp, #1
 8011512:	096d      	lsrs	r5, r5, #5
 8011514:	464a      	mov	r2, r9
 8011516:	4616      	mov	r6, r2
 8011518:	7830      	ldrb	r0, [r6, #0]
 801151a:	3201      	adds	r2, #1
 801151c:	f7ff ffb1 	bl	8011482 <__hexdig_fun>
 8011520:	2800      	cmp	r0, #0
 8011522:	d1f8      	bne.n	8011516 <__gethex+0x6a>
 8011524:	2201      	movs	r2, #1
 8011526:	4630      	mov	r0, r6
 8011528:	498c      	ldr	r1, [pc, #560]	@ (801175c <__gethex+0x2b0>)
 801152a:	f7fc fe47 	bl	800e1bc <strncmp>
 801152e:	2800      	cmp	r0, #0
 8011530:	d13f      	bne.n	80115b2 <__gethex+0x106>
 8011532:	b944      	cbnz	r4, 8011546 <__gethex+0x9a>
 8011534:	1c74      	adds	r4, r6, #1
 8011536:	4622      	mov	r2, r4
 8011538:	4616      	mov	r6, r2
 801153a:	7830      	ldrb	r0, [r6, #0]
 801153c:	3201      	adds	r2, #1
 801153e:	f7ff ffa0 	bl	8011482 <__hexdig_fun>
 8011542:	2800      	cmp	r0, #0
 8011544:	d1f8      	bne.n	8011538 <__gethex+0x8c>
 8011546:	1ba4      	subs	r4, r4, r6
 8011548:	00a7      	lsls	r7, r4, #2
 801154a:	7833      	ldrb	r3, [r6, #0]
 801154c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011550:	2b50      	cmp	r3, #80	@ 0x50
 8011552:	d13e      	bne.n	80115d2 <__gethex+0x126>
 8011554:	7873      	ldrb	r3, [r6, #1]
 8011556:	2b2b      	cmp	r3, #43	@ 0x2b
 8011558:	d033      	beq.n	80115c2 <__gethex+0x116>
 801155a:	2b2d      	cmp	r3, #45	@ 0x2d
 801155c:	d034      	beq.n	80115c8 <__gethex+0x11c>
 801155e:	2400      	movs	r4, #0
 8011560:	1c71      	adds	r1, r6, #1
 8011562:	7808      	ldrb	r0, [r1, #0]
 8011564:	f7ff ff8d 	bl	8011482 <__hexdig_fun>
 8011568:	1e43      	subs	r3, r0, #1
 801156a:	b2db      	uxtb	r3, r3
 801156c:	2b18      	cmp	r3, #24
 801156e:	d830      	bhi.n	80115d2 <__gethex+0x126>
 8011570:	f1a0 0210 	sub.w	r2, r0, #16
 8011574:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011578:	f7ff ff83 	bl	8011482 <__hexdig_fun>
 801157c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011580:	fa5f fc8c 	uxtb.w	ip, ip
 8011584:	f1bc 0f18 	cmp.w	ip, #24
 8011588:	f04f 030a 	mov.w	r3, #10
 801158c:	d91e      	bls.n	80115cc <__gethex+0x120>
 801158e:	b104      	cbz	r4, 8011592 <__gethex+0xe6>
 8011590:	4252      	negs	r2, r2
 8011592:	4417      	add	r7, r2
 8011594:	f8ca 1000 	str.w	r1, [sl]
 8011598:	b1ed      	cbz	r5, 80115d6 <__gethex+0x12a>
 801159a:	f1bb 0f00 	cmp.w	fp, #0
 801159e:	bf0c      	ite	eq
 80115a0:	2506      	moveq	r5, #6
 80115a2:	2500      	movne	r5, #0
 80115a4:	4628      	mov	r0, r5
 80115a6:	b005      	add	sp, #20
 80115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ac:	2500      	movs	r5, #0
 80115ae:	462c      	mov	r4, r5
 80115b0:	e7b0      	b.n	8011514 <__gethex+0x68>
 80115b2:	2c00      	cmp	r4, #0
 80115b4:	d1c7      	bne.n	8011546 <__gethex+0x9a>
 80115b6:	4627      	mov	r7, r4
 80115b8:	e7c7      	b.n	801154a <__gethex+0x9e>
 80115ba:	464e      	mov	r6, r9
 80115bc:	462f      	mov	r7, r5
 80115be:	2501      	movs	r5, #1
 80115c0:	e7c3      	b.n	801154a <__gethex+0x9e>
 80115c2:	2400      	movs	r4, #0
 80115c4:	1cb1      	adds	r1, r6, #2
 80115c6:	e7cc      	b.n	8011562 <__gethex+0xb6>
 80115c8:	2401      	movs	r4, #1
 80115ca:	e7fb      	b.n	80115c4 <__gethex+0x118>
 80115cc:	fb03 0002 	mla	r0, r3, r2, r0
 80115d0:	e7ce      	b.n	8011570 <__gethex+0xc4>
 80115d2:	4631      	mov	r1, r6
 80115d4:	e7de      	b.n	8011594 <__gethex+0xe8>
 80115d6:	4629      	mov	r1, r5
 80115d8:	eba6 0309 	sub.w	r3, r6, r9
 80115dc:	3b01      	subs	r3, #1
 80115de:	2b07      	cmp	r3, #7
 80115e0:	dc0a      	bgt.n	80115f8 <__gethex+0x14c>
 80115e2:	9801      	ldr	r0, [sp, #4]
 80115e4:	f7fd fde2 	bl	800f1ac <_Balloc>
 80115e8:	4604      	mov	r4, r0
 80115ea:	b940      	cbnz	r0, 80115fe <__gethex+0x152>
 80115ec:	4602      	mov	r2, r0
 80115ee:	21e4      	movs	r1, #228	@ 0xe4
 80115f0:	4b5b      	ldr	r3, [pc, #364]	@ (8011760 <__gethex+0x2b4>)
 80115f2:	485c      	ldr	r0, [pc, #368]	@ (8011764 <__gethex+0x2b8>)
 80115f4:	f7ff fec0 	bl	8011378 <__assert_func>
 80115f8:	3101      	adds	r1, #1
 80115fa:	105b      	asrs	r3, r3, #1
 80115fc:	e7ef      	b.n	80115de <__gethex+0x132>
 80115fe:	2300      	movs	r3, #0
 8011600:	f100 0a14 	add.w	sl, r0, #20
 8011604:	4655      	mov	r5, sl
 8011606:	469b      	mov	fp, r3
 8011608:	45b1      	cmp	r9, r6
 801160a:	d337      	bcc.n	801167c <__gethex+0x1d0>
 801160c:	f845 bb04 	str.w	fp, [r5], #4
 8011610:	eba5 050a 	sub.w	r5, r5, sl
 8011614:	10ad      	asrs	r5, r5, #2
 8011616:	6125      	str	r5, [r4, #16]
 8011618:	4658      	mov	r0, fp
 801161a:	f7fd feb9 	bl	800f390 <__hi0bits>
 801161e:	016d      	lsls	r5, r5, #5
 8011620:	f8d8 6000 	ldr.w	r6, [r8]
 8011624:	1a2d      	subs	r5, r5, r0
 8011626:	42b5      	cmp	r5, r6
 8011628:	dd54      	ble.n	80116d4 <__gethex+0x228>
 801162a:	1bad      	subs	r5, r5, r6
 801162c:	4629      	mov	r1, r5
 801162e:	4620      	mov	r0, r4
 8011630:	f7fe fa3b 	bl	800faaa <__any_on>
 8011634:	4681      	mov	r9, r0
 8011636:	b178      	cbz	r0, 8011658 <__gethex+0x1ac>
 8011638:	f04f 0901 	mov.w	r9, #1
 801163c:	1e6b      	subs	r3, r5, #1
 801163e:	1159      	asrs	r1, r3, #5
 8011640:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011644:	f003 021f 	and.w	r2, r3, #31
 8011648:	fa09 f202 	lsl.w	r2, r9, r2
 801164c:	420a      	tst	r2, r1
 801164e:	d003      	beq.n	8011658 <__gethex+0x1ac>
 8011650:	454b      	cmp	r3, r9
 8011652:	dc36      	bgt.n	80116c2 <__gethex+0x216>
 8011654:	f04f 0902 	mov.w	r9, #2
 8011658:	4629      	mov	r1, r5
 801165a:	4620      	mov	r0, r4
 801165c:	f7ff febe 	bl	80113dc <rshift>
 8011660:	442f      	add	r7, r5
 8011662:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011666:	42bb      	cmp	r3, r7
 8011668:	da42      	bge.n	80116f0 <__gethex+0x244>
 801166a:	4621      	mov	r1, r4
 801166c:	9801      	ldr	r0, [sp, #4]
 801166e:	f7fd fddd 	bl	800f22c <_Bfree>
 8011672:	2300      	movs	r3, #0
 8011674:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011676:	25a3      	movs	r5, #163	@ 0xa3
 8011678:	6013      	str	r3, [r2, #0]
 801167a:	e793      	b.n	80115a4 <__gethex+0xf8>
 801167c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011680:	2a2e      	cmp	r2, #46	@ 0x2e
 8011682:	d012      	beq.n	80116aa <__gethex+0x1fe>
 8011684:	2b20      	cmp	r3, #32
 8011686:	d104      	bne.n	8011692 <__gethex+0x1e6>
 8011688:	f845 bb04 	str.w	fp, [r5], #4
 801168c:	f04f 0b00 	mov.w	fp, #0
 8011690:	465b      	mov	r3, fp
 8011692:	7830      	ldrb	r0, [r6, #0]
 8011694:	9303      	str	r3, [sp, #12]
 8011696:	f7ff fef4 	bl	8011482 <__hexdig_fun>
 801169a:	9b03      	ldr	r3, [sp, #12]
 801169c:	f000 000f 	and.w	r0, r0, #15
 80116a0:	4098      	lsls	r0, r3
 80116a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80116a6:	3304      	adds	r3, #4
 80116a8:	e7ae      	b.n	8011608 <__gethex+0x15c>
 80116aa:	45b1      	cmp	r9, r6
 80116ac:	d8ea      	bhi.n	8011684 <__gethex+0x1d8>
 80116ae:	2201      	movs	r2, #1
 80116b0:	4630      	mov	r0, r6
 80116b2:	492a      	ldr	r1, [pc, #168]	@ (801175c <__gethex+0x2b0>)
 80116b4:	9303      	str	r3, [sp, #12]
 80116b6:	f7fc fd81 	bl	800e1bc <strncmp>
 80116ba:	9b03      	ldr	r3, [sp, #12]
 80116bc:	2800      	cmp	r0, #0
 80116be:	d1e1      	bne.n	8011684 <__gethex+0x1d8>
 80116c0:	e7a2      	b.n	8011608 <__gethex+0x15c>
 80116c2:	4620      	mov	r0, r4
 80116c4:	1ea9      	subs	r1, r5, #2
 80116c6:	f7fe f9f0 	bl	800faaa <__any_on>
 80116ca:	2800      	cmp	r0, #0
 80116cc:	d0c2      	beq.n	8011654 <__gethex+0x1a8>
 80116ce:	f04f 0903 	mov.w	r9, #3
 80116d2:	e7c1      	b.n	8011658 <__gethex+0x1ac>
 80116d4:	da09      	bge.n	80116ea <__gethex+0x23e>
 80116d6:	1b75      	subs	r5, r6, r5
 80116d8:	4621      	mov	r1, r4
 80116da:	462a      	mov	r2, r5
 80116dc:	9801      	ldr	r0, [sp, #4]
 80116de:	f7fd ffb5 	bl	800f64c <__lshift>
 80116e2:	4604      	mov	r4, r0
 80116e4:	1b7f      	subs	r7, r7, r5
 80116e6:	f100 0a14 	add.w	sl, r0, #20
 80116ea:	f04f 0900 	mov.w	r9, #0
 80116ee:	e7b8      	b.n	8011662 <__gethex+0x1b6>
 80116f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80116f4:	42bd      	cmp	r5, r7
 80116f6:	dd6f      	ble.n	80117d8 <__gethex+0x32c>
 80116f8:	1bed      	subs	r5, r5, r7
 80116fa:	42ae      	cmp	r6, r5
 80116fc:	dc34      	bgt.n	8011768 <__gethex+0x2bc>
 80116fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011702:	2b02      	cmp	r3, #2
 8011704:	d022      	beq.n	801174c <__gethex+0x2a0>
 8011706:	2b03      	cmp	r3, #3
 8011708:	d024      	beq.n	8011754 <__gethex+0x2a8>
 801170a:	2b01      	cmp	r3, #1
 801170c:	d115      	bne.n	801173a <__gethex+0x28e>
 801170e:	42ae      	cmp	r6, r5
 8011710:	d113      	bne.n	801173a <__gethex+0x28e>
 8011712:	2e01      	cmp	r6, #1
 8011714:	d10b      	bne.n	801172e <__gethex+0x282>
 8011716:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801171a:	9a02      	ldr	r2, [sp, #8]
 801171c:	2562      	movs	r5, #98	@ 0x62
 801171e:	6013      	str	r3, [r2, #0]
 8011720:	2301      	movs	r3, #1
 8011722:	6123      	str	r3, [r4, #16]
 8011724:	f8ca 3000 	str.w	r3, [sl]
 8011728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801172a:	601c      	str	r4, [r3, #0]
 801172c:	e73a      	b.n	80115a4 <__gethex+0xf8>
 801172e:	4620      	mov	r0, r4
 8011730:	1e71      	subs	r1, r6, #1
 8011732:	f7fe f9ba 	bl	800faaa <__any_on>
 8011736:	2800      	cmp	r0, #0
 8011738:	d1ed      	bne.n	8011716 <__gethex+0x26a>
 801173a:	4621      	mov	r1, r4
 801173c:	9801      	ldr	r0, [sp, #4]
 801173e:	f7fd fd75 	bl	800f22c <_Bfree>
 8011742:	2300      	movs	r3, #0
 8011744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011746:	2550      	movs	r5, #80	@ 0x50
 8011748:	6013      	str	r3, [r2, #0]
 801174a:	e72b      	b.n	80115a4 <__gethex+0xf8>
 801174c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1f3      	bne.n	801173a <__gethex+0x28e>
 8011752:	e7e0      	b.n	8011716 <__gethex+0x26a>
 8011754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011756:	2b00      	cmp	r3, #0
 8011758:	d1dd      	bne.n	8011716 <__gethex+0x26a>
 801175a:	e7ee      	b.n	801173a <__gethex+0x28e>
 801175c:	080129d3 	.word	0x080129d3
 8011760:	08012969 	.word	0x08012969
 8011764:	08012a45 	.word	0x08012a45
 8011768:	1e6f      	subs	r7, r5, #1
 801176a:	f1b9 0f00 	cmp.w	r9, #0
 801176e:	d130      	bne.n	80117d2 <__gethex+0x326>
 8011770:	b127      	cbz	r7, 801177c <__gethex+0x2d0>
 8011772:	4639      	mov	r1, r7
 8011774:	4620      	mov	r0, r4
 8011776:	f7fe f998 	bl	800faaa <__any_on>
 801177a:	4681      	mov	r9, r0
 801177c:	2301      	movs	r3, #1
 801177e:	4629      	mov	r1, r5
 8011780:	1b76      	subs	r6, r6, r5
 8011782:	2502      	movs	r5, #2
 8011784:	117a      	asrs	r2, r7, #5
 8011786:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801178a:	f007 071f 	and.w	r7, r7, #31
 801178e:	40bb      	lsls	r3, r7
 8011790:	4213      	tst	r3, r2
 8011792:	4620      	mov	r0, r4
 8011794:	bf18      	it	ne
 8011796:	f049 0902 	orrne.w	r9, r9, #2
 801179a:	f7ff fe1f 	bl	80113dc <rshift>
 801179e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80117a2:	f1b9 0f00 	cmp.w	r9, #0
 80117a6:	d047      	beq.n	8011838 <__gethex+0x38c>
 80117a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80117ac:	2b02      	cmp	r3, #2
 80117ae:	d015      	beq.n	80117dc <__gethex+0x330>
 80117b0:	2b03      	cmp	r3, #3
 80117b2:	d017      	beq.n	80117e4 <__gethex+0x338>
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d109      	bne.n	80117cc <__gethex+0x320>
 80117b8:	f019 0f02 	tst.w	r9, #2
 80117bc:	d006      	beq.n	80117cc <__gethex+0x320>
 80117be:	f8da 3000 	ldr.w	r3, [sl]
 80117c2:	ea49 0903 	orr.w	r9, r9, r3
 80117c6:	f019 0f01 	tst.w	r9, #1
 80117ca:	d10e      	bne.n	80117ea <__gethex+0x33e>
 80117cc:	f045 0510 	orr.w	r5, r5, #16
 80117d0:	e032      	b.n	8011838 <__gethex+0x38c>
 80117d2:	f04f 0901 	mov.w	r9, #1
 80117d6:	e7d1      	b.n	801177c <__gethex+0x2d0>
 80117d8:	2501      	movs	r5, #1
 80117da:	e7e2      	b.n	80117a2 <__gethex+0x2f6>
 80117dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117de:	f1c3 0301 	rsb	r3, r3, #1
 80117e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80117e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d0f0      	beq.n	80117cc <__gethex+0x320>
 80117ea:	f04f 0c00 	mov.w	ip, #0
 80117ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80117f2:	f104 0314 	add.w	r3, r4, #20
 80117f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80117fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80117fe:	4618      	mov	r0, r3
 8011800:	f853 2b04 	ldr.w	r2, [r3], #4
 8011804:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011808:	d01b      	beq.n	8011842 <__gethex+0x396>
 801180a:	3201      	adds	r2, #1
 801180c:	6002      	str	r2, [r0, #0]
 801180e:	2d02      	cmp	r5, #2
 8011810:	f104 0314 	add.w	r3, r4, #20
 8011814:	d13c      	bne.n	8011890 <__gethex+0x3e4>
 8011816:	f8d8 2000 	ldr.w	r2, [r8]
 801181a:	3a01      	subs	r2, #1
 801181c:	42b2      	cmp	r2, r6
 801181e:	d109      	bne.n	8011834 <__gethex+0x388>
 8011820:	2201      	movs	r2, #1
 8011822:	1171      	asrs	r1, r6, #5
 8011824:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011828:	f006 061f 	and.w	r6, r6, #31
 801182c:	fa02 f606 	lsl.w	r6, r2, r6
 8011830:	421e      	tst	r6, r3
 8011832:	d13a      	bne.n	80118aa <__gethex+0x3fe>
 8011834:	f045 0520 	orr.w	r5, r5, #32
 8011838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801183a:	601c      	str	r4, [r3, #0]
 801183c:	9b02      	ldr	r3, [sp, #8]
 801183e:	601f      	str	r7, [r3, #0]
 8011840:	e6b0      	b.n	80115a4 <__gethex+0xf8>
 8011842:	4299      	cmp	r1, r3
 8011844:	f843 cc04 	str.w	ip, [r3, #-4]
 8011848:	d8d9      	bhi.n	80117fe <__gethex+0x352>
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	459b      	cmp	fp, r3
 801184e:	db17      	blt.n	8011880 <__gethex+0x3d4>
 8011850:	6861      	ldr	r1, [r4, #4]
 8011852:	9801      	ldr	r0, [sp, #4]
 8011854:	3101      	adds	r1, #1
 8011856:	f7fd fca9 	bl	800f1ac <_Balloc>
 801185a:	4681      	mov	r9, r0
 801185c:	b918      	cbnz	r0, 8011866 <__gethex+0x3ba>
 801185e:	4602      	mov	r2, r0
 8011860:	2184      	movs	r1, #132	@ 0x84
 8011862:	4b19      	ldr	r3, [pc, #100]	@ (80118c8 <__gethex+0x41c>)
 8011864:	e6c5      	b.n	80115f2 <__gethex+0x146>
 8011866:	6922      	ldr	r2, [r4, #16]
 8011868:	f104 010c 	add.w	r1, r4, #12
 801186c:	3202      	adds	r2, #2
 801186e:	0092      	lsls	r2, r2, #2
 8011870:	300c      	adds	r0, #12
 8011872:	f7ff fd6d 	bl	8011350 <memcpy>
 8011876:	4621      	mov	r1, r4
 8011878:	9801      	ldr	r0, [sp, #4]
 801187a:	f7fd fcd7 	bl	800f22c <_Bfree>
 801187e:	464c      	mov	r4, r9
 8011880:	6923      	ldr	r3, [r4, #16]
 8011882:	1c5a      	adds	r2, r3, #1
 8011884:	6122      	str	r2, [r4, #16]
 8011886:	2201      	movs	r2, #1
 8011888:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801188c:	615a      	str	r2, [r3, #20]
 801188e:	e7be      	b.n	801180e <__gethex+0x362>
 8011890:	6922      	ldr	r2, [r4, #16]
 8011892:	455a      	cmp	r2, fp
 8011894:	dd0b      	ble.n	80118ae <__gethex+0x402>
 8011896:	2101      	movs	r1, #1
 8011898:	4620      	mov	r0, r4
 801189a:	f7ff fd9f 	bl	80113dc <rshift>
 801189e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80118a2:	3701      	adds	r7, #1
 80118a4:	42bb      	cmp	r3, r7
 80118a6:	f6ff aee0 	blt.w	801166a <__gethex+0x1be>
 80118aa:	2501      	movs	r5, #1
 80118ac:	e7c2      	b.n	8011834 <__gethex+0x388>
 80118ae:	f016 061f 	ands.w	r6, r6, #31
 80118b2:	d0fa      	beq.n	80118aa <__gethex+0x3fe>
 80118b4:	4453      	add	r3, sl
 80118b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80118ba:	f7fd fd69 	bl	800f390 <__hi0bits>
 80118be:	f1c6 0620 	rsb	r6, r6, #32
 80118c2:	42b0      	cmp	r0, r6
 80118c4:	dbe7      	blt.n	8011896 <__gethex+0x3ea>
 80118c6:	e7f0      	b.n	80118aa <__gethex+0x3fe>
 80118c8:	08012969 	.word	0x08012969

080118cc <L_shift>:
 80118cc:	f1c2 0208 	rsb	r2, r2, #8
 80118d0:	0092      	lsls	r2, r2, #2
 80118d2:	b570      	push	{r4, r5, r6, lr}
 80118d4:	f1c2 0620 	rsb	r6, r2, #32
 80118d8:	6843      	ldr	r3, [r0, #4]
 80118da:	6804      	ldr	r4, [r0, #0]
 80118dc:	fa03 f506 	lsl.w	r5, r3, r6
 80118e0:	432c      	orrs	r4, r5
 80118e2:	40d3      	lsrs	r3, r2
 80118e4:	6004      	str	r4, [r0, #0]
 80118e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80118ea:	4288      	cmp	r0, r1
 80118ec:	d3f4      	bcc.n	80118d8 <L_shift+0xc>
 80118ee:	bd70      	pop	{r4, r5, r6, pc}

080118f0 <__match>:
 80118f0:	b530      	push	{r4, r5, lr}
 80118f2:	6803      	ldr	r3, [r0, #0]
 80118f4:	3301      	adds	r3, #1
 80118f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118fa:	b914      	cbnz	r4, 8011902 <__match+0x12>
 80118fc:	6003      	str	r3, [r0, #0]
 80118fe:	2001      	movs	r0, #1
 8011900:	bd30      	pop	{r4, r5, pc}
 8011902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011906:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801190a:	2d19      	cmp	r5, #25
 801190c:	bf98      	it	ls
 801190e:	3220      	addls	r2, #32
 8011910:	42a2      	cmp	r2, r4
 8011912:	d0f0      	beq.n	80118f6 <__match+0x6>
 8011914:	2000      	movs	r0, #0
 8011916:	e7f3      	b.n	8011900 <__match+0x10>

08011918 <__hexnan>:
 8011918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	2500      	movs	r5, #0
 801191e:	680b      	ldr	r3, [r1, #0]
 8011920:	4682      	mov	sl, r0
 8011922:	115e      	asrs	r6, r3, #5
 8011924:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011928:	f013 031f 	ands.w	r3, r3, #31
 801192c:	bf18      	it	ne
 801192e:	3604      	addne	r6, #4
 8011930:	1f37      	subs	r7, r6, #4
 8011932:	4690      	mov	r8, r2
 8011934:	46b9      	mov	r9, r7
 8011936:	463c      	mov	r4, r7
 8011938:	46ab      	mov	fp, r5
 801193a:	b087      	sub	sp, #28
 801193c:	6801      	ldr	r1, [r0, #0]
 801193e:	9301      	str	r3, [sp, #4]
 8011940:	f846 5c04 	str.w	r5, [r6, #-4]
 8011944:	9502      	str	r5, [sp, #8]
 8011946:	784a      	ldrb	r2, [r1, #1]
 8011948:	1c4b      	adds	r3, r1, #1
 801194a:	9303      	str	r3, [sp, #12]
 801194c:	b342      	cbz	r2, 80119a0 <__hexnan+0x88>
 801194e:	4610      	mov	r0, r2
 8011950:	9105      	str	r1, [sp, #20]
 8011952:	9204      	str	r2, [sp, #16]
 8011954:	f7ff fd95 	bl	8011482 <__hexdig_fun>
 8011958:	2800      	cmp	r0, #0
 801195a:	d151      	bne.n	8011a00 <__hexnan+0xe8>
 801195c:	9a04      	ldr	r2, [sp, #16]
 801195e:	9905      	ldr	r1, [sp, #20]
 8011960:	2a20      	cmp	r2, #32
 8011962:	d818      	bhi.n	8011996 <__hexnan+0x7e>
 8011964:	9b02      	ldr	r3, [sp, #8]
 8011966:	459b      	cmp	fp, r3
 8011968:	dd13      	ble.n	8011992 <__hexnan+0x7a>
 801196a:	454c      	cmp	r4, r9
 801196c:	d206      	bcs.n	801197c <__hexnan+0x64>
 801196e:	2d07      	cmp	r5, #7
 8011970:	dc04      	bgt.n	801197c <__hexnan+0x64>
 8011972:	462a      	mov	r2, r5
 8011974:	4649      	mov	r1, r9
 8011976:	4620      	mov	r0, r4
 8011978:	f7ff ffa8 	bl	80118cc <L_shift>
 801197c:	4544      	cmp	r4, r8
 801197e:	d952      	bls.n	8011a26 <__hexnan+0x10e>
 8011980:	2300      	movs	r3, #0
 8011982:	f1a4 0904 	sub.w	r9, r4, #4
 8011986:	f844 3c04 	str.w	r3, [r4, #-4]
 801198a:	461d      	mov	r5, r3
 801198c:	464c      	mov	r4, r9
 801198e:	f8cd b008 	str.w	fp, [sp, #8]
 8011992:	9903      	ldr	r1, [sp, #12]
 8011994:	e7d7      	b.n	8011946 <__hexnan+0x2e>
 8011996:	2a29      	cmp	r2, #41	@ 0x29
 8011998:	d157      	bne.n	8011a4a <__hexnan+0x132>
 801199a:	3102      	adds	r1, #2
 801199c:	f8ca 1000 	str.w	r1, [sl]
 80119a0:	f1bb 0f00 	cmp.w	fp, #0
 80119a4:	d051      	beq.n	8011a4a <__hexnan+0x132>
 80119a6:	454c      	cmp	r4, r9
 80119a8:	d206      	bcs.n	80119b8 <__hexnan+0xa0>
 80119aa:	2d07      	cmp	r5, #7
 80119ac:	dc04      	bgt.n	80119b8 <__hexnan+0xa0>
 80119ae:	462a      	mov	r2, r5
 80119b0:	4649      	mov	r1, r9
 80119b2:	4620      	mov	r0, r4
 80119b4:	f7ff ff8a 	bl	80118cc <L_shift>
 80119b8:	4544      	cmp	r4, r8
 80119ba:	d936      	bls.n	8011a2a <__hexnan+0x112>
 80119bc:	4623      	mov	r3, r4
 80119be:	f1a8 0204 	sub.w	r2, r8, #4
 80119c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80119c6:	429f      	cmp	r7, r3
 80119c8:	f842 1f04 	str.w	r1, [r2, #4]!
 80119cc:	d2f9      	bcs.n	80119c2 <__hexnan+0xaa>
 80119ce:	1b3b      	subs	r3, r7, r4
 80119d0:	f023 0303 	bic.w	r3, r3, #3
 80119d4:	3304      	adds	r3, #4
 80119d6:	3401      	adds	r4, #1
 80119d8:	3e03      	subs	r6, #3
 80119da:	42b4      	cmp	r4, r6
 80119dc:	bf88      	it	hi
 80119de:	2304      	movhi	r3, #4
 80119e0:	2200      	movs	r2, #0
 80119e2:	4443      	add	r3, r8
 80119e4:	f843 2b04 	str.w	r2, [r3], #4
 80119e8:	429f      	cmp	r7, r3
 80119ea:	d2fb      	bcs.n	80119e4 <__hexnan+0xcc>
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	b91b      	cbnz	r3, 80119f8 <__hexnan+0xe0>
 80119f0:	4547      	cmp	r7, r8
 80119f2:	d128      	bne.n	8011a46 <__hexnan+0x12e>
 80119f4:	2301      	movs	r3, #1
 80119f6:	603b      	str	r3, [r7, #0]
 80119f8:	2005      	movs	r0, #5
 80119fa:	b007      	add	sp, #28
 80119fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a00:	3501      	adds	r5, #1
 8011a02:	2d08      	cmp	r5, #8
 8011a04:	f10b 0b01 	add.w	fp, fp, #1
 8011a08:	dd06      	ble.n	8011a18 <__hexnan+0x100>
 8011a0a:	4544      	cmp	r4, r8
 8011a0c:	d9c1      	bls.n	8011992 <__hexnan+0x7a>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	2501      	movs	r5, #1
 8011a12:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a16:	3c04      	subs	r4, #4
 8011a18:	6822      	ldr	r2, [r4, #0]
 8011a1a:	f000 000f 	and.w	r0, r0, #15
 8011a1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011a22:	6020      	str	r0, [r4, #0]
 8011a24:	e7b5      	b.n	8011992 <__hexnan+0x7a>
 8011a26:	2508      	movs	r5, #8
 8011a28:	e7b3      	b.n	8011992 <__hexnan+0x7a>
 8011a2a:	9b01      	ldr	r3, [sp, #4]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d0dd      	beq.n	80119ec <__hexnan+0xd4>
 8011a30:	f04f 32ff 	mov.w	r2, #4294967295
 8011a34:	f1c3 0320 	rsb	r3, r3, #32
 8011a38:	40da      	lsrs	r2, r3
 8011a3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011a3e:	4013      	ands	r3, r2
 8011a40:	f846 3c04 	str.w	r3, [r6, #-4]
 8011a44:	e7d2      	b.n	80119ec <__hexnan+0xd4>
 8011a46:	3f04      	subs	r7, #4
 8011a48:	e7d0      	b.n	80119ec <__hexnan+0xd4>
 8011a4a:	2004      	movs	r0, #4
 8011a4c:	e7d5      	b.n	80119fa <__hexnan+0xe2>

08011a4e <__ascii_mbtowc>:
 8011a4e:	b082      	sub	sp, #8
 8011a50:	b901      	cbnz	r1, 8011a54 <__ascii_mbtowc+0x6>
 8011a52:	a901      	add	r1, sp, #4
 8011a54:	b142      	cbz	r2, 8011a68 <__ascii_mbtowc+0x1a>
 8011a56:	b14b      	cbz	r3, 8011a6c <__ascii_mbtowc+0x1e>
 8011a58:	7813      	ldrb	r3, [r2, #0]
 8011a5a:	600b      	str	r3, [r1, #0]
 8011a5c:	7812      	ldrb	r2, [r2, #0]
 8011a5e:	1e10      	subs	r0, r2, #0
 8011a60:	bf18      	it	ne
 8011a62:	2001      	movne	r0, #1
 8011a64:	b002      	add	sp, #8
 8011a66:	4770      	bx	lr
 8011a68:	4610      	mov	r0, r2
 8011a6a:	e7fb      	b.n	8011a64 <__ascii_mbtowc+0x16>
 8011a6c:	f06f 0001 	mvn.w	r0, #1
 8011a70:	e7f8      	b.n	8011a64 <__ascii_mbtowc+0x16>

08011a72 <_realloc_r>:
 8011a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a76:	4607      	mov	r7, r0
 8011a78:	4614      	mov	r4, r2
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	b921      	cbnz	r1, 8011a88 <_realloc_r+0x16>
 8011a7e:	4611      	mov	r1, r2
 8011a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a84:	f7fd bb06 	b.w	800f094 <_malloc_r>
 8011a88:	b92a      	cbnz	r2, 8011a96 <_realloc_r+0x24>
 8011a8a:	f7fd fa91 	bl	800efb0 <_free_r>
 8011a8e:	4625      	mov	r5, r4
 8011a90:	4628      	mov	r0, r5
 8011a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a96:	f000 f8b2 	bl	8011bfe <_malloc_usable_size_r>
 8011a9a:	4284      	cmp	r4, r0
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	d802      	bhi.n	8011aa6 <_realloc_r+0x34>
 8011aa0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011aa4:	d8f4      	bhi.n	8011a90 <_realloc_r+0x1e>
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	4638      	mov	r0, r7
 8011aaa:	f7fd faf3 	bl	800f094 <_malloc_r>
 8011aae:	4680      	mov	r8, r0
 8011ab0:	b908      	cbnz	r0, 8011ab6 <_realloc_r+0x44>
 8011ab2:	4645      	mov	r5, r8
 8011ab4:	e7ec      	b.n	8011a90 <_realloc_r+0x1e>
 8011ab6:	42b4      	cmp	r4, r6
 8011ab8:	4622      	mov	r2, r4
 8011aba:	4629      	mov	r1, r5
 8011abc:	bf28      	it	cs
 8011abe:	4632      	movcs	r2, r6
 8011ac0:	f7ff fc46 	bl	8011350 <memcpy>
 8011ac4:	4629      	mov	r1, r5
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	f7fd fa72 	bl	800efb0 <_free_r>
 8011acc:	e7f1      	b.n	8011ab2 <_realloc_r+0x40>
	...

08011ad0 <_strtoul_l.isra.0>:
 8011ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ad4:	4686      	mov	lr, r0
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	4e33      	ldr	r6, [pc, #204]	@ (8011ba8 <_strtoul_l.isra.0+0xd8>)
 8011ada:	4628      	mov	r0, r5
 8011adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ae0:	5d37      	ldrb	r7, [r6, r4]
 8011ae2:	f017 0708 	ands.w	r7, r7, #8
 8011ae6:	d1f8      	bne.n	8011ada <_strtoul_l.isra.0+0xa>
 8011ae8:	2c2d      	cmp	r4, #45	@ 0x2d
 8011aea:	d110      	bne.n	8011b0e <_strtoul_l.isra.0+0x3e>
 8011aec:	2701      	movs	r7, #1
 8011aee:	782c      	ldrb	r4, [r5, #0]
 8011af0:	1c85      	adds	r5, r0, #2
 8011af2:	f033 0010 	bics.w	r0, r3, #16
 8011af6:	d115      	bne.n	8011b24 <_strtoul_l.isra.0+0x54>
 8011af8:	2c30      	cmp	r4, #48	@ 0x30
 8011afa:	d10d      	bne.n	8011b18 <_strtoul_l.isra.0+0x48>
 8011afc:	7828      	ldrb	r0, [r5, #0]
 8011afe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011b02:	2858      	cmp	r0, #88	@ 0x58
 8011b04:	d108      	bne.n	8011b18 <_strtoul_l.isra.0+0x48>
 8011b06:	786c      	ldrb	r4, [r5, #1]
 8011b08:	3502      	adds	r5, #2
 8011b0a:	2310      	movs	r3, #16
 8011b0c:	e00a      	b.n	8011b24 <_strtoul_l.isra.0+0x54>
 8011b0e:	2c2b      	cmp	r4, #43	@ 0x2b
 8011b10:	bf04      	itt	eq
 8011b12:	782c      	ldrbeq	r4, [r5, #0]
 8011b14:	1c85      	addeq	r5, r0, #2
 8011b16:	e7ec      	b.n	8011af2 <_strtoul_l.isra.0+0x22>
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1f6      	bne.n	8011b0a <_strtoul_l.isra.0+0x3a>
 8011b1c:	2c30      	cmp	r4, #48	@ 0x30
 8011b1e:	bf14      	ite	ne
 8011b20:	230a      	movne	r3, #10
 8011b22:	2308      	moveq	r3, #8
 8011b24:	f04f 38ff 	mov.w	r8, #4294967295
 8011b28:	fbb8 f8f3 	udiv	r8, r8, r3
 8011b2c:	2600      	movs	r6, #0
 8011b2e:	fb03 f908 	mul.w	r9, r3, r8
 8011b32:	4630      	mov	r0, r6
 8011b34:	ea6f 0909 	mvn.w	r9, r9
 8011b38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011b3c:	f1bc 0f09 	cmp.w	ip, #9
 8011b40:	d810      	bhi.n	8011b64 <_strtoul_l.isra.0+0x94>
 8011b42:	4664      	mov	r4, ip
 8011b44:	42a3      	cmp	r3, r4
 8011b46:	dd1e      	ble.n	8011b86 <_strtoul_l.isra.0+0xb6>
 8011b48:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011b4c:	d007      	beq.n	8011b5e <_strtoul_l.isra.0+0x8e>
 8011b4e:	4580      	cmp	r8, r0
 8011b50:	d316      	bcc.n	8011b80 <_strtoul_l.isra.0+0xb0>
 8011b52:	d101      	bne.n	8011b58 <_strtoul_l.isra.0+0x88>
 8011b54:	45a1      	cmp	r9, r4
 8011b56:	db13      	blt.n	8011b80 <_strtoul_l.isra.0+0xb0>
 8011b58:	2601      	movs	r6, #1
 8011b5a:	fb00 4003 	mla	r0, r0, r3, r4
 8011b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b62:	e7e9      	b.n	8011b38 <_strtoul_l.isra.0+0x68>
 8011b64:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011b68:	f1bc 0f19 	cmp.w	ip, #25
 8011b6c:	d801      	bhi.n	8011b72 <_strtoul_l.isra.0+0xa2>
 8011b6e:	3c37      	subs	r4, #55	@ 0x37
 8011b70:	e7e8      	b.n	8011b44 <_strtoul_l.isra.0+0x74>
 8011b72:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011b76:	f1bc 0f19 	cmp.w	ip, #25
 8011b7a:	d804      	bhi.n	8011b86 <_strtoul_l.isra.0+0xb6>
 8011b7c:	3c57      	subs	r4, #87	@ 0x57
 8011b7e:	e7e1      	b.n	8011b44 <_strtoul_l.isra.0+0x74>
 8011b80:	f04f 36ff 	mov.w	r6, #4294967295
 8011b84:	e7eb      	b.n	8011b5e <_strtoul_l.isra.0+0x8e>
 8011b86:	1c73      	adds	r3, r6, #1
 8011b88:	d106      	bne.n	8011b98 <_strtoul_l.isra.0+0xc8>
 8011b8a:	2322      	movs	r3, #34	@ 0x22
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f8ce 3000 	str.w	r3, [lr]
 8011b92:	b932      	cbnz	r2, 8011ba2 <_strtoul_l.isra.0+0xd2>
 8011b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b98:	b107      	cbz	r7, 8011b9c <_strtoul_l.isra.0+0xcc>
 8011b9a:	4240      	negs	r0, r0
 8011b9c:	2a00      	cmp	r2, #0
 8011b9e:	d0f9      	beq.n	8011b94 <_strtoul_l.isra.0+0xc4>
 8011ba0:	b106      	cbz	r6, 8011ba4 <_strtoul_l.isra.0+0xd4>
 8011ba2:	1e69      	subs	r1, r5, #1
 8011ba4:	6011      	str	r1, [r2, #0]
 8011ba6:	e7f5      	b.n	8011b94 <_strtoul_l.isra.0+0xc4>
 8011ba8:	08012bf9 	.word	0x08012bf9

08011bac <_strtoul_r>:
 8011bac:	f7ff bf90 	b.w	8011ad0 <_strtoul_l.isra.0>

08011bb0 <__ascii_wctomb>:
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	4608      	mov	r0, r1
 8011bb4:	b141      	cbz	r1, 8011bc8 <__ascii_wctomb+0x18>
 8011bb6:	2aff      	cmp	r2, #255	@ 0xff
 8011bb8:	d904      	bls.n	8011bc4 <__ascii_wctomb+0x14>
 8011bba:	228a      	movs	r2, #138	@ 0x8a
 8011bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc0:	601a      	str	r2, [r3, #0]
 8011bc2:	4770      	bx	lr
 8011bc4:	2001      	movs	r0, #1
 8011bc6:	700a      	strb	r2, [r1, #0]
 8011bc8:	4770      	bx	lr
	...

08011bcc <fiprintf>:
 8011bcc:	b40e      	push	{r1, r2, r3}
 8011bce:	b503      	push	{r0, r1, lr}
 8011bd0:	4601      	mov	r1, r0
 8011bd2:	ab03      	add	r3, sp, #12
 8011bd4:	4805      	ldr	r0, [pc, #20]	@ (8011bec <fiprintf+0x20>)
 8011bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bda:	6800      	ldr	r0, [r0, #0]
 8011bdc:	9301      	str	r3, [sp, #4]
 8011bde:	f000 f83d 	bl	8011c5c <_vfiprintf_r>
 8011be2:	b002      	add	sp, #8
 8011be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be8:	b003      	add	sp, #12
 8011bea:	4770      	bx	lr
 8011bec:	200001a0 	.word	0x200001a0

08011bf0 <abort>:
 8011bf0:	2006      	movs	r0, #6
 8011bf2:	b508      	push	{r3, lr}
 8011bf4:	f000 fa06 	bl	8012004 <raise>
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	f7f1 fd8e 	bl	800371a <_exit>

08011bfe <_malloc_usable_size_r>:
 8011bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c02:	1f18      	subs	r0, r3, #4
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bfbc      	itt	lt
 8011c08:	580b      	ldrlt	r3, [r1, r0]
 8011c0a:	18c0      	addlt	r0, r0, r3
 8011c0c:	4770      	bx	lr

08011c0e <__sfputc_r>:
 8011c0e:	6893      	ldr	r3, [r2, #8]
 8011c10:	b410      	push	{r4}
 8011c12:	3b01      	subs	r3, #1
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	6093      	str	r3, [r2, #8]
 8011c18:	da07      	bge.n	8011c2a <__sfputc_r+0x1c>
 8011c1a:	6994      	ldr	r4, [r2, #24]
 8011c1c:	42a3      	cmp	r3, r4
 8011c1e:	db01      	blt.n	8011c24 <__sfputc_r+0x16>
 8011c20:	290a      	cmp	r1, #10
 8011c22:	d102      	bne.n	8011c2a <__sfputc_r+0x1c>
 8011c24:	bc10      	pop	{r4}
 8011c26:	f000 b931 	b.w	8011e8c <__swbuf_r>
 8011c2a:	6813      	ldr	r3, [r2, #0]
 8011c2c:	1c58      	adds	r0, r3, #1
 8011c2e:	6010      	str	r0, [r2, #0]
 8011c30:	7019      	strb	r1, [r3, #0]
 8011c32:	4608      	mov	r0, r1
 8011c34:	bc10      	pop	{r4}
 8011c36:	4770      	bx	lr

08011c38 <__sfputs_r>:
 8011c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	460f      	mov	r7, r1
 8011c3e:	4614      	mov	r4, r2
 8011c40:	18d5      	adds	r5, r2, r3
 8011c42:	42ac      	cmp	r4, r5
 8011c44:	d101      	bne.n	8011c4a <__sfputs_r+0x12>
 8011c46:	2000      	movs	r0, #0
 8011c48:	e007      	b.n	8011c5a <__sfputs_r+0x22>
 8011c4a:	463a      	mov	r2, r7
 8011c4c:	4630      	mov	r0, r6
 8011c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c52:	f7ff ffdc 	bl	8011c0e <__sfputc_r>
 8011c56:	1c43      	adds	r3, r0, #1
 8011c58:	d1f3      	bne.n	8011c42 <__sfputs_r+0xa>
 8011c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c5c <_vfiprintf_r>:
 8011c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c60:	460d      	mov	r5, r1
 8011c62:	4614      	mov	r4, r2
 8011c64:	4698      	mov	r8, r3
 8011c66:	4606      	mov	r6, r0
 8011c68:	b09d      	sub	sp, #116	@ 0x74
 8011c6a:	b118      	cbz	r0, 8011c74 <_vfiprintf_r+0x18>
 8011c6c:	6a03      	ldr	r3, [r0, #32]
 8011c6e:	b90b      	cbnz	r3, 8011c74 <_vfiprintf_r+0x18>
 8011c70:	f7fc f996 	bl	800dfa0 <__sinit>
 8011c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c76:	07d9      	lsls	r1, r3, #31
 8011c78:	d405      	bmi.n	8011c86 <_vfiprintf_r+0x2a>
 8011c7a:	89ab      	ldrh	r3, [r5, #12]
 8011c7c:	059a      	lsls	r2, r3, #22
 8011c7e:	d402      	bmi.n	8011c86 <_vfiprintf_r+0x2a>
 8011c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c82:	f7fc fb22 	bl	800e2ca <__retarget_lock_acquire_recursive>
 8011c86:	89ab      	ldrh	r3, [r5, #12]
 8011c88:	071b      	lsls	r3, r3, #28
 8011c8a:	d501      	bpl.n	8011c90 <_vfiprintf_r+0x34>
 8011c8c:	692b      	ldr	r3, [r5, #16]
 8011c8e:	b99b      	cbnz	r3, 8011cb8 <_vfiprintf_r+0x5c>
 8011c90:	4629      	mov	r1, r5
 8011c92:	4630      	mov	r0, r6
 8011c94:	f000 f938 	bl	8011f08 <__swsetup_r>
 8011c98:	b170      	cbz	r0, 8011cb8 <_vfiprintf_r+0x5c>
 8011c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c9c:	07dc      	lsls	r4, r3, #31
 8011c9e:	d504      	bpl.n	8011caa <_vfiprintf_r+0x4e>
 8011ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca4:	b01d      	add	sp, #116	@ 0x74
 8011ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011caa:	89ab      	ldrh	r3, [r5, #12]
 8011cac:	0598      	lsls	r0, r3, #22
 8011cae:	d4f7      	bmi.n	8011ca0 <_vfiprintf_r+0x44>
 8011cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cb2:	f7fc fb0b 	bl	800e2cc <__retarget_lock_release_recursive>
 8011cb6:	e7f3      	b.n	8011ca0 <_vfiprintf_r+0x44>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cbc:	2320      	movs	r3, #32
 8011cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cc2:	2330      	movs	r3, #48	@ 0x30
 8011cc4:	f04f 0901 	mov.w	r9, #1
 8011cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ccc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8011e78 <_vfiprintf_r+0x21c>
 8011cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cd4:	4623      	mov	r3, r4
 8011cd6:	469a      	mov	sl, r3
 8011cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cdc:	b10a      	cbz	r2, 8011ce2 <_vfiprintf_r+0x86>
 8011cde:	2a25      	cmp	r2, #37	@ 0x25
 8011ce0:	d1f9      	bne.n	8011cd6 <_vfiprintf_r+0x7a>
 8011ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ce6:	d00b      	beq.n	8011d00 <_vfiprintf_r+0xa4>
 8011ce8:	465b      	mov	r3, fp
 8011cea:	4622      	mov	r2, r4
 8011cec:	4629      	mov	r1, r5
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f7ff ffa2 	bl	8011c38 <__sfputs_r>
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	f000 80a7 	beq.w	8011e48 <_vfiprintf_r+0x1ec>
 8011cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cfc:	445a      	add	r2, fp
 8011cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d00:	f89a 3000 	ldrb.w	r3, [sl]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f000 809f 	beq.w	8011e48 <_vfiprintf_r+0x1ec>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d14:	f10a 0a01 	add.w	sl, sl, #1
 8011d18:	9304      	str	r3, [sp, #16]
 8011d1a:	9307      	str	r3, [sp, #28]
 8011d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d22:	4654      	mov	r4, sl
 8011d24:	2205      	movs	r2, #5
 8011d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d2a:	4853      	ldr	r0, [pc, #332]	@ (8011e78 <_vfiprintf_r+0x21c>)
 8011d2c:	f7fc facf 	bl	800e2ce <memchr>
 8011d30:	9a04      	ldr	r2, [sp, #16]
 8011d32:	b9d8      	cbnz	r0, 8011d6c <_vfiprintf_r+0x110>
 8011d34:	06d1      	lsls	r1, r2, #27
 8011d36:	bf44      	itt	mi
 8011d38:	2320      	movmi	r3, #32
 8011d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d3e:	0713      	lsls	r3, r2, #28
 8011d40:	bf44      	itt	mi
 8011d42:	232b      	movmi	r3, #43	@ 0x2b
 8011d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d48:	f89a 3000 	ldrb.w	r3, [sl]
 8011d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d4e:	d015      	beq.n	8011d7c <_vfiprintf_r+0x120>
 8011d50:	4654      	mov	r4, sl
 8011d52:	2000      	movs	r0, #0
 8011d54:	f04f 0c0a 	mov.w	ip, #10
 8011d58:	9a07      	ldr	r2, [sp, #28]
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d60:	3b30      	subs	r3, #48	@ 0x30
 8011d62:	2b09      	cmp	r3, #9
 8011d64:	d94b      	bls.n	8011dfe <_vfiprintf_r+0x1a2>
 8011d66:	b1b0      	cbz	r0, 8011d96 <_vfiprintf_r+0x13a>
 8011d68:	9207      	str	r2, [sp, #28]
 8011d6a:	e014      	b.n	8011d96 <_vfiprintf_r+0x13a>
 8011d6c:	eba0 0308 	sub.w	r3, r0, r8
 8011d70:	fa09 f303 	lsl.w	r3, r9, r3
 8011d74:	4313      	orrs	r3, r2
 8011d76:	46a2      	mov	sl, r4
 8011d78:	9304      	str	r3, [sp, #16]
 8011d7a:	e7d2      	b.n	8011d22 <_vfiprintf_r+0xc6>
 8011d7c:	9b03      	ldr	r3, [sp, #12]
 8011d7e:	1d19      	adds	r1, r3, #4
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	9103      	str	r1, [sp, #12]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	bfbb      	ittet	lt
 8011d88:	425b      	neglt	r3, r3
 8011d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8011d8e:	9307      	strge	r3, [sp, #28]
 8011d90:	9307      	strlt	r3, [sp, #28]
 8011d92:	bfb8      	it	lt
 8011d94:	9204      	strlt	r2, [sp, #16]
 8011d96:	7823      	ldrb	r3, [r4, #0]
 8011d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d9a:	d10a      	bne.n	8011db2 <_vfiprintf_r+0x156>
 8011d9c:	7863      	ldrb	r3, [r4, #1]
 8011d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011da0:	d132      	bne.n	8011e08 <_vfiprintf_r+0x1ac>
 8011da2:	9b03      	ldr	r3, [sp, #12]
 8011da4:	3402      	adds	r4, #2
 8011da6:	1d1a      	adds	r2, r3, #4
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	9203      	str	r2, [sp, #12]
 8011dac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011db0:	9305      	str	r3, [sp, #20]
 8011db2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8011e7c <_vfiprintf_r+0x220>
 8011db6:	2203      	movs	r2, #3
 8011db8:	4650      	mov	r0, sl
 8011dba:	7821      	ldrb	r1, [r4, #0]
 8011dbc:	f7fc fa87 	bl	800e2ce <memchr>
 8011dc0:	b138      	cbz	r0, 8011dd2 <_vfiprintf_r+0x176>
 8011dc2:	2240      	movs	r2, #64	@ 0x40
 8011dc4:	9b04      	ldr	r3, [sp, #16]
 8011dc6:	eba0 000a 	sub.w	r0, r0, sl
 8011dca:	4082      	lsls	r2, r0
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	3401      	adds	r4, #1
 8011dd0:	9304      	str	r3, [sp, #16]
 8011dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd6:	2206      	movs	r2, #6
 8011dd8:	4829      	ldr	r0, [pc, #164]	@ (8011e80 <_vfiprintf_r+0x224>)
 8011dda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dde:	f7fc fa76 	bl	800e2ce <memchr>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	d03f      	beq.n	8011e66 <_vfiprintf_r+0x20a>
 8011de6:	4b27      	ldr	r3, [pc, #156]	@ (8011e84 <_vfiprintf_r+0x228>)
 8011de8:	bb1b      	cbnz	r3, 8011e32 <_vfiprintf_r+0x1d6>
 8011dea:	9b03      	ldr	r3, [sp, #12]
 8011dec:	3307      	adds	r3, #7
 8011dee:	f023 0307 	bic.w	r3, r3, #7
 8011df2:	3308      	adds	r3, #8
 8011df4:	9303      	str	r3, [sp, #12]
 8011df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011df8:	443b      	add	r3, r7
 8011dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dfc:	e76a      	b.n	8011cd4 <_vfiprintf_r+0x78>
 8011dfe:	460c      	mov	r4, r1
 8011e00:	2001      	movs	r0, #1
 8011e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e06:	e7a8      	b.n	8011d5a <_vfiprintf_r+0xfe>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	f04f 0c0a 	mov.w	ip, #10
 8011e0e:	4619      	mov	r1, r3
 8011e10:	3401      	adds	r4, #1
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	4620      	mov	r0, r4
 8011e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e1a:	3a30      	subs	r2, #48	@ 0x30
 8011e1c:	2a09      	cmp	r2, #9
 8011e1e:	d903      	bls.n	8011e28 <_vfiprintf_r+0x1cc>
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d0c6      	beq.n	8011db2 <_vfiprintf_r+0x156>
 8011e24:	9105      	str	r1, [sp, #20]
 8011e26:	e7c4      	b.n	8011db2 <_vfiprintf_r+0x156>
 8011e28:	4604      	mov	r4, r0
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e30:	e7f0      	b.n	8011e14 <_vfiprintf_r+0x1b8>
 8011e32:	ab03      	add	r3, sp, #12
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	462a      	mov	r2, r5
 8011e38:	4630      	mov	r0, r6
 8011e3a:	4b13      	ldr	r3, [pc, #76]	@ (8011e88 <_vfiprintf_r+0x22c>)
 8011e3c:	a904      	add	r1, sp, #16
 8011e3e:	f7fb fa5d 	bl	800d2fc <_printf_float>
 8011e42:	4607      	mov	r7, r0
 8011e44:	1c78      	adds	r0, r7, #1
 8011e46:	d1d6      	bne.n	8011df6 <_vfiprintf_r+0x19a>
 8011e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e4a:	07d9      	lsls	r1, r3, #31
 8011e4c:	d405      	bmi.n	8011e5a <_vfiprintf_r+0x1fe>
 8011e4e:	89ab      	ldrh	r3, [r5, #12]
 8011e50:	059a      	lsls	r2, r3, #22
 8011e52:	d402      	bmi.n	8011e5a <_vfiprintf_r+0x1fe>
 8011e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e56:	f7fc fa39 	bl	800e2cc <__retarget_lock_release_recursive>
 8011e5a:	89ab      	ldrh	r3, [r5, #12]
 8011e5c:	065b      	lsls	r3, r3, #25
 8011e5e:	f53f af1f 	bmi.w	8011ca0 <_vfiprintf_r+0x44>
 8011e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e64:	e71e      	b.n	8011ca4 <_vfiprintf_r+0x48>
 8011e66:	ab03      	add	r3, sp, #12
 8011e68:	9300      	str	r3, [sp, #0]
 8011e6a:	462a      	mov	r2, r5
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	4b06      	ldr	r3, [pc, #24]	@ (8011e88 <_vfiprintf_r+0x22c>)
 8011e70:	a904      	add	r1, sp, #16
 8011e72:	f7fb fce1 	bl	800d838 <_printf_i>
 8011e76:	e7e4      	b.n	8011e42 <_vfiprintf_r+0x1e6>
 8011e78:	080129d5 	.word	0x080129d5
 8011e7c:	080129db 	.word	0x080129db
 8011e80:	080129df 	.word	0x080129df
 8011e84:	0800d2fd 	.word	0x0800d2fd
 8011e88:	08011c39 	.word	0x08011c39

08011e8c <__swbuf_r>:
 8011e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e8e:	460e      	mov	r6, r1
 8011e90:	4614      	mov	r4, r2
 8011e92:	4605      	mov	r5, r0
 8011e94:	b118      	cbz	r0, 8011e9e <__swbuf_r+0x12>
 8011e96:	6a03      	ldr	r3, [r0, #32]
 8011e98:	b90b      	cbnz	r3, 8011e9e <__swbuf_r+0x12>
 8011e9a:	f7fc f881 	bl	800dfa0 <__sinit>
 8011e9e:	69a3      	ldr	r3, [r4, #24]
 8011ea0:	60a3      	str	r3, [r4, #8]
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	071a      	lsls	r2, r3, #28
 8011ea6:	d501      	bpl.n	8011eac <__swbuf_r+0x20>
 8011ea8:	6923      	ldr	r3, [r4, #16]
 8011eaa:	b943      	cbnz	r3, 8011ebe <__swbuf_r+0x32>
 8011eac:	4621      	mov	r1, r4
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f000 f82a 	bl	8011f08 <__swsetup_r>
 8011eb4:	b118      	cbz	r0, 8011ebe <__swbuf_r+0x32>
 8011eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8011eba:	4638      	mov	r0, r7
 8011ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	6922      	ldr	r2, [r4, #16]
 8011ec2:	b2f6      	uxtb	r6, r6
 8011ec4:	1a98      	subs	r0, r3, r2
 8011ec6:	6963      	ldr	r3, [r4, #20]
 8011ec8:	4637      	mov	r7, r6
 8011eca:	4283      	cmp	r3, r0
 8011ecc:	dc05      	bgt.n	8011eda <__swbuf_r+0x4e>
 8011ece:	4621      	mov	r1, r4
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f7ff f979 	bl	80111c8 <_fflush_r>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d1ed      	bne.n	8011eb6 <__swbuf_r+0x2a>
 8011eda:	68a3      	ldr	r3, [r4, #8]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	60a3      	str	r3, [r4, #8]
 8011ee0:	6823      	ldr	r3, [r4, #0]
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	6022      	str	r2, [r4, #0]
 8011ee6:	701e      	strb	r6, [r3, #0]
 8011ee8:	6962      	ldr	r2, [r4, #20]
 8011eea:	1c43      	adds	r3, r0, #1
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d004      	beq.n	8011efa <__swbuf_r+0x6e>
 8011ef0:	89a3      	ldrh	r3, [r4, #12]
 8011ef2:	07db      	lsls	r3, r3, #31
 8011ef4:	d5e1      	bpl.n	8011eba <__swbuf_r+0x2e>
 8011ef6:	2e0a      	cmp	r6, #10
 8011ef8:	d1df      	bne.n	8011eba <__swbuf_r+0x2e>
 8011efa:	4621      	mov	r1, r4
 8011efc:	4628      	mov	r0, r5
 8011efe:	f7ff f963 	bl	80111c8 <_fflush_r>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	d0d9      	beq.n	8011eba <__swbuf_r+0x2e>
 8011f06:	e7d6      	b.n	8011eb6 <__swbuf_r+0x2a>

08011f08 <__swsetup_r>:
 8011f08:	b538      	push	{r3, r4, r5, lr}
 8011f0a:	4b29      	ldr	r3, [pc, #164]	@ (8011fb0 <__swsetup_r+0xa8>)
 8011f0c:	4605      	mov	r5, r0
 8011f0e:	6818      	ldr	r0, [r3, #0]
 8011f10:	460c      	mov	r4, r1
 8011f12:	b118      	cbz	r0, 8011f1c <__swsetup_r+0x14>
 8011f14:	6a03      	ldr	r3, [r0, #32]
 8011f16:	b90b      	cbnz	r3, 8011f1c <__swsetup_r+0x14>
 8011f18:	f7fc f842 	bl	800dfa0 <__sinit>
 8011f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f20:	0719      	lsls	r1, r3, #28
 8011f22:	d422      	bmi.n	8011f6a <__swsetup_r+0x62>
 8011f24:	06da      	lsls	r2, r3, #27
 8011f26:	d407      	bmi.n	8011f38 <__swsetup_r+0x30>
 8011f28:	2209      	movs	r2, #9
 8011f2a:	602a      	str	r2, [r5, #0]
 8011f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f30:	f04f 30ff 	mov.w	r0, #4294967295
 8011f34:	81a3      	strh	r3, [r4, #12]
 8011f36:	e033      	b.n	8011fa0 <__swsetup_r+0x98>
 8011f38:	0758      	lsls	r0, r3, #29
 8011f3a:	d512      	bpl.n	8011f62 <__swsetup_r+0x5a>
 8011f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f3e:	b141      	cbz	r1, 8011f52 <__swsetup_r+0x4a>
 8011f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f44:	4299      	cmp	r1, r3
 8011f46:	d002      	beq.n	8011f4e <__swsetup_r+0x46>
 8011f48:	4628      	mov	r0, r5
 8011f4a:	f7fd f831 	bl	800efb0 <_free_r>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f52:	89a3      	ldrh	r3, [r4, #12]
 8011f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f58:	81a3      	strh	r3, [r4, #12]
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	6063      	str	r3, [r4, #4]
 8011f5e:	6923      	ldr	r3, [r4, #16]
 8011f60:	6023      	str	r3, [r4, #0]
 8011f62:	89a3      	ldrh	r3, [r4, #12]
 8011f64:	f043 0308 	orr.w	r3, r3, #8
 8011f68:	81a3      	strh	r3, [r4, #12]
 8011f6a:	6923      	ldr	r3, [r4, #16]
 8011f6c:	b94b      	cbnz	r3, 8011f82 <__swsetup_r+0x7a>
 8011f6e:	89a3      	ldrh	r3, [r4, #12]
 8011f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f78:	d003      	beq.n	8011f82 <__swsetup_r+0x7a>
 8011f7a:	4621      	mov	r1, r4
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	f000 f882 	bl	8012086 <__smakebuf_r>
 8011f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f86:	f013 0201 	ands.w	r2, r3, #1
 8011f8a:	d00a      	beq.n	8011fa2 <__swsetup_r+0x9a>
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	60a2      	str	r2, [r4, #8]
 8011f90:	6962      	ldr	r2, [r4, #20]
 8011f92:	4252      	negs	r2, r2
 8011f94:	61a2      	str	r2, [r4, #24]
 8011f96:	6922      	ldr	r2, [r4, #16]
 8011f98:	b942      	cbnz	r2, 8011fac <__swsetup_r+0xa4>
 8011f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f9e:	d1c5      	bne.n	8011f2c <__swsetup_r+0x24>
 8011fa0:	bd38      	pop	{r3, r4, r5, pc}
 8011fa2:	0799      	lsls	r1, r3, #30
 8011fa4:	bf58      	it	pl
 8011fa6:	6962      	ldrpl	r2, [r4, #20]
 8011fa8:	60a2      	str	r2, [r4, #8]
 8011faa:	e7f4      	b.n	8011f96 <__swsetup_r+0x8e>
 8011fac:	2000      	movs	r0, #0
 8011fae:	e7f7      	b.n	8011fa0 <__swsetup_r+0x98>
 8011fb0:	200001a0 	.word	0x200001a0

08011fb4 <_raise_r>:
 8011fb4:	291f      	cmp	r1, #31
 8011fb6:	b538      	push	{r3, r4, r5, lr}
 8011fb8:	4605      	mov	r5, r0
 8011fba:	460c      	mov	r4, r1
 8011fbc:	d904      	bls.n	8011fc8 <_raise_r+0x14>
 8011fbe:	2316      	movs	r3, #22
 8011fc0:	6003      	str	r3, [r0, #0]
 8011fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc6:	bd38      	pop	{r3, r4, r5, pc}
 8011fc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011fca:	b112      	cbz	r2, 8011fd2 <_raise_r+0x1e>
 8011fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011fd0:	b94b      	cbnz	r3, 8011fe6 <_raise_r+0x32>
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f000 f830 	bl	8012038 <_getpid_r>
 8011fd8:	4622      	mov	r2, r4
 8011fda:	4601      	mov	r1, r0
 8011fdc:	4628      	mov	r0, r5
 8011fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fe2:	f000 b817 	b.w	8012014 <_kill_r>
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d00a      	beq.n	8012000 <_raise_r+0x4c>
 8011fea:	1c59      	adds	r1, r3, #1
 8011fec:	d103      	bne.n	8011ff6 <_raise_r+0x42>
 8011fee:	2316      	movs	r3, #22
 8011ff0:	6003      	str	r3, [r0, #0]
 8011ff2:	2001      	movs	r0, #1
 8011ff4:	e7e7      	b.n	8011fc6 <_raise_r+0x12>
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011ffe:	4798      	blx	r3
 8012000:	2000      	movs	r0, #0
 8012002:	e7e0      	b.n	8011fc6 <_raise_r+0x12>

08012004 <raise>:
 8012004:	4b02      	ldr	r3, [pc, #8]	@ (8012010 <raise+0xc>)
 8012006:	4601      	mov	r1, r0
 8012008:	6818      	ldr	r0, [r3, #0]
 801200a:	f7ff bfd3 	b.w	8011fb4 <_raise_r>
 801200e:	bf00      	nop
 8012010:	200001a0 	.word	0x200001a0

08012014 <_kill_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	2300      	movs	r3, #0
 8012018:	4d06      	ldr	r5, [pc, #24]	@ (8012034 <_kill_r+0x20>)
 801201a:	4604      	mov	r4, r0
 801201c:	4608      	mov	r0, r1
 801201e:	4611      	mov	r1, r2
 8012020:	602b      	str	r3, [r5, #0]
 8012022:	f7f1 fb6a 	bl	80036fa <_kill>
 8012026:	1c43      	adds	r3, r0, #1
 8012028:	d102      	bne.n	8012030 <_kill_r+0x1c>
 801202a:	682b      	ldr	r3, [r5, #0]
 801202c:	b103      	cbz	r3, 8012030 <_kill_r+0x1c>
 801202e:	6023      	str	r3, [r4, #0]
 8012030:	bd38      	pop	{r3, r4, r5, pc}
 8012032:	bf00      	nop
 8012034:	20001ab0 	.word	0x20001ab0

08012038 <_getpid_r>:
 8012038:	f7f1 bb58 	b.w	80036ec <_getpid>

0801203c <__swhatbuf_r>:
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	460c      	mov	r4, r1
 8012040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012044:	4615      	mov	r5, r2
 8012046:	2900      	cmp	r1, #0
 8012048:	461e      	mov	r6, r3
 801204a:	b096      	sub	sp, #88	@ 0x58
 801204c:	da0c      	bge.n	8012068 <__swhatbuf_r+0x2c>
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	2100      	movs	r1, #0
 8012052:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012056:	bf14      	ite	ne
 8012058:	2340      	movne	r3, #64	@ 0x40
 801205a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801205e:	2000      	movs	r0, #0
 8012060:	6031      	str	r1, [r6, #0]
 8012062:	602b      	str	r3, [r5, #0]
 8012064:	b016      	add	sp, #88	@ 0x58
 8012066:	bd70      	pop	{r4, r5, r6, pc}
 8012068:	466a      	mov	r2, sp
 801206a:	f000 f849 	bl	8012100 <_fstat_r>
 801206e:	2800      	cmp	r0, #0
 8012070:	dbed      	blt.n	801204e <__swhatbuf_r+0x12>
 8012072:	9901      	ldr	r1, [sp, #4]
 8012074:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012078:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801207c:	4259      	negs	r1, r3
 801207e:	4159      	adcs	r1, r3
 8012080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012084:	e7eb      	b.n	801205e <__swhatbuf_r+0x22>

08012086 <__smakebuf_r>:
 8012086:	898b      	ldrh	r3, [r1, #12]
 8012088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801208a:	079d      	lsls	r5, r3, #30
 801208c:	4606      	mov	r6, r0
 801208e:	460c      	mov	r4, r1
 8012090:	d507      	bpl.n	80120a2 <__smakebuf_r+0x1c>
 8012092:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012096:	6023      	str	r3, [r4, #0]
 8012098:	6123      	str	r3, [r4, #16]
 801209a:	2301      	movs	r3, #1
 801209c:	6163      	str	r3, [r4, #20]
 801209e:	b003      	add	sp, #12
 80120a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120a2:	466a      	mov	r2, sp
 80120a4:	ab01      	add	r3, sp, #4
 80120a6:	f7ff ffc9 	bl	801203c <__swhatbuf_r>
 80120aa:	9f00      	ldr	r7, [sp, #0]
 80120ac:	4605      	mov	r5, r0
 80120ae:	4639      	mov	r1, r7
 80120b0:	4630      	mov	r0, r6
 80120b2:	f7fc ffef 	bl	800f094 <_malloc_r>
 80120b6:	b948      	cbnz	r0, 80120cc <__smakebuf_r+0x46>
 80120b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120bc:	059a      	lsls	r2, r3, #22
 80120be:	d4ee      	bmi.n	801209e <__smakebuf_r+0x18>
 80120c0:	f023 0303 	bic.w	r3, r3, #3
 80120c4:	f043 0302 	orr.w	r3, r3, #2
 80120c8:	81a3      	strh	r3, [r4, #12]
 80120ca:	e7e2      	b.n	8012092 <__smakebuf_r+0xc>
 80120cc:	89a3      	ldrh	r3, [r4, #12]
 80120ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80120d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120d6:	81a3      	strh	r3, [r4, #12]
 80120d8:	9b01      	ldr	r3, [sp, #4]
 80120da:	6020      	str	r0, [r4, #0]
 80120dc:	b15b      	cbz	r3, 80120f6 <__smakebuf_r+0x70>
 80120de:	4630      	mov	r0, r6
 80120e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120e4:	f000 f81e 	bl	8012124 <_isatty_r>
 80120e8:	b128      	cbz	r0, 80120f6 <__smakebuf_r+0x70>
 80120ea:	89a3      	ldrh	r3, [r4, #12]
 80120ec:	f023 0303 	bic.w	r3, r3, #3
 80120f0:	f043 0301 	orr.w	r3, r3, #1
 80120f4:	81a3      	strh	r3, [r4, #12]
 80120f6:	89a3      	ldrh	r3, [r4, #12]
 80120f8:	431d      	orrs	r5, r3
 80120fa:	81a5      	strh	r5, [r4, #12]
 80120fc:	e7cf      	b.n	801209e <__smakebuf_r+0x18>
	...

08012100 <_fstat_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	2300      	movs	r3, #0
 8012104:	4d06      	ldr	r5, [pc, #24]	@ (8012120 <_fstat_r+0x20>)
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	4611      	mov	r1, r2
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	f7f1 fb53 	bl	80037b8 <_fstat>
 8012112:	1c43      	adds	r3, r0, #1
 8012114:	d102      	bne.n	801211c <_fstat_r+0x1c>
 8012116:	682b      	ldr	r3, [r5, #0]
 8012118:	b103      	cbz	r3, 801211c <_fstat_r+0x1c>
 801211a:	6023      	str	r3, [r4, #0]
 801211c:	bd38      	pop	{r3, r4, r5, pc}
 801211e:	bf00      	nop
 8012120:	20001ab0 	.word	0x20001ab0

08012124 <_isatty_r>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	2300      	movs	r3, #0
 8012128:	4d05      	ldr	r5, [pc, #20]	@ (8012140 <_isatty_r+0x1c>)
 801212a:	4604      	mov	r4, r0
 801212c:	4608      	mov	r0, r1
 801212e:	602b      	str	r3, [r5, #0]
 8012130:	f7f1 fb51 	bl	80037d6 <_isatty>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d102      	bne.n	801213e <_isatty_r+0x1a>
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	b103      	cbz	r3, 801213e <_isatty_r+0x1a>
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	bd38      	pop	{r3, r4, r5, pc}
 8012140:	20001ab0 	.word	0x20001ab0

08012144 <_init>:
 8012144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012146:	bf00      	nop
 8012148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801214a:	bc08      	pop	{r3}
 801214c:	469e      	mov	lr, r3
 801214e:	4770      	bx	lr

08012150 <_fini>:
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	bf00      	nop
 8012154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012156:	bc08      	pop	{r3}
 8012158:	469e      	mov	lr, r3
 801215a:	4770      	bx	lr
