
f103cbt6-pengisi-oli-casting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1dc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800f2f0  0800f2f0  000102f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f79c  0800f79c  00011358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f79c  0800f79c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7a4  0800f7a4  00011358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7a4  0800f7a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7a8  0800f7a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800f7ac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000151c  20000358  0800fb04  00011358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  0800fb04  00011874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001776b  00000000  00000000  00011381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004106  00000000  00000000  00028aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0002cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102d  00000000  00000000  0002e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006cf3  00000000  00000000  0002f15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c44d  00000000  00000000  00035e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009034a  00000000  00000000  0005229d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e25e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb8  00000000  00000000  000e262c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000e92e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f2d4 	.word	0x0800f2d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800f2d4 	.word	0x0800f2d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <Run_Control_Logic>:
/**
 * @brief  Memperbarui fungsi Run_Control_Logic dengan kontrol histeresis, prioritas, dan pengaman sumber kosong.
 * @note   Drum A memiliki prioritas tertinggi.
 */
void Run_Control_Logic(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  // 1. Hitung level air aktual dalam cm dan % dari data sensor
  float LevelA_cm = TINGGI_A - ((float)sensors[0].distance / 10.0f);
 8001182:	4b99      	ldr	r3, [pc, #612]	@ (80013e8 <Run_Control_Logic+0x26c>)
 8001184:	895b      	ldrh	r3, [r3, #10]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fda4 	bl	8000cd4 <__aeabi_ui2f>
 800118c:	4603      	mov	r3, r0
 800118e:	4997      	ldr	r1, [pc, #604]	@ (80013ec <Run_Control_Logic+0x270>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff feab 	bl	8000eec <__aeabi_fdiv>
 8001196:	4603      	mov	r3, r0
 8001198:	4619      	mov	r1, r3
 800119a:	4895      	ldr	r0, [pc, #596]	@ (80013f0 <Run_Control_Logic+0x274>)
 800119c:	f7ff fce8 	bl	8000b70 <__aeabi_fsub>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
  float LevelB_cm = TINGGI_B - ((float)sensors[1].distance / 10.0f);
 80011a4:	4b90      	ldr	r3, [pc, #576]	@ (80013e8 <Run_Control_Logic+0x26c>)
 80011a6:	8b5b      	ldrh	r3, [r3, #26]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd93 	bl	8000cd4 <__aeabi_ui2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	498e      	ldr	r1, [pc, #568]	@ (80013ec <Run_Control_Logic+0x270>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe9a 	bl	8000eec <__aeabi_fdiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	488d      	ldr	r0, [pc, #564]	@ (80013f4 <Run_Control_Logic+0x278>)
 80011be:	f7ff fcd7 	bl	8000b70 <__aeabi_fsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	60bb      	str	r3, [r7, #8]
  float LevelC_cm = TINGGI_C - ((float)sensors[2].distance / 10.0f);
 80011c6:	4b88      	ldr	r3, [pc, #544]	@ (80013e8 <Run_Control_Logic+0x26c>)
 80011c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fd82 	bl	8000cd4 <__aeabi_ui2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4986      	ldr	r1, [pc, #536]	@ (80013ec <Run_Control_Logic+0x270>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe89 	bl	8000eec <__aeabi_fdiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	4886      	ldr	r0, [pc, #536]	@ (80013f8 <Run_Control_Logic+0x27c>)
 80011e0:	f7ff fcc6 	bl	8000b70 <__aeabi_fsub>
 80011e4:	4603      	mov	r3, r0
 80011e6:	607b      	str	r3, [r7, #4]

  LevelA_persen = (LevelA_cm / TINGGI_A) * 100.0f;
 80011e8:	4981      	ldr	r1, [pc, #516]	@ (80013f0 <Run_Control_Logic+0x274>)
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fe7e 	bl	8000eec <__aeabi_fdiv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	497f      	ldr	r1, [pc, #508]	@ (80013f0 <Run_Control_Logic+0x274>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdc5 	bl	8000d84 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b7f      	ldr	r3, [pc, #508]	@ (80013fc <Run_Control_Logic+0x280>)
 8001200:	601a      	str	r2, [r3, #0]
  LevelB_persen = (LevelB_cm / TINGGI_B) * 100.0f;
 8001202:	497c      	ldr	r1, [pc, #496]	@ (80013f4 <Run_Control_Logic+0x278>)
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff fe71 	bl	8000eec <__aeabi_fdiv>
 800120a:	4603      	mov	r3, r0
 800120c:	4978      	ldr	r1, [pc, #480]	@ (80013f0 <Run_Control_Logic+0x274>)
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fdb8 	bl	8000d84 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b79      	ldr	r3, [pc, #484]	@ (8001400 <Run_Control_Logic+0x284>)
 800121a:	601a      	str	r2, [r3, #0]
  LevelC_persen = (LevelC_cm / TINGGI_C) * 100.0f;
 800121c:	4976      	ldr	r1, [pc, #472]	@ (80013f8 <Run_Control_Logic+0x27c>)
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fe64 	bl	8000eec <__aeabi_fdiv>
 8001224:	4603      	mov	r3, r0
 8001226:	4972      	ldr	r1, [pc, #456]	@ (80013f0 <Run_Control_Logic+0x274>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fdab 	bl	8000d84 <__aeabi_fmul>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <Run_Control_Logic+0x288>)
 8001234:	601a      	str	r2, [r3, #0]

  // Pastikan persentase tidak di bawah 0 atau di atas 100
  if (LevelA_persen < 0)
 8001236:	4b71      	ldr	r3, [pc, #452]	@ (80013fc <Run_Control_Logic+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f04f 0100 	mov.w	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff3e 	bl	80010c0 <__aeabi_fcmplt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <Run_Control_Logic+0xd8>
    LevelA_persen = 0;
 800124a:	4b6c      	ldr	r3, [pc, #432]	@ (80013fc <Run_Control_Logic+0x280>)
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e00b      	b.n	800126c <Run_Control_Logic+0xf0>
  else if (LevelA_persen > 100)
 8001254:	4b69      	ldr	r3, [pc, #420]	@ (80013fc <Run_Control_Logic+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4965      	ldr	r1, [pc, #404]	@ (80013f0 <Run_Control_Logic+0x274>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff4e 	bl	80010fc <__aeabi_fcmpgt>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <Run_Control_Logic+0xf0>
    LevelA_persen = 100;
 8001266:	4b65      	ldr	r3, [pc, #404]	@ (80013fc <Run_Control_Logic+0x280>)
 8001268:	4a61      	ldr	r2, [pc, #388]	@ (80013f0 <Run_Control_Logic+0x274>)
 800126a:	601a      	str	r2, [r3, #0]
  if (LevelB_persen < 0)
 800126c:	4b64      	ldr	r3, [pc, #400]	@ (8001400 <Run_Control_Logic+0x284>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 0100 	mov.w	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff23 	bl	80010c0 <__aeabi_fcmplt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <Run_Control_Logic+0x10e>
    LevelB_persen = 0;
 8001280:	4b5f      	ldr	r3, [pc, #380]	@ (8001400 <Run_Control_Logic+0x284>)
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e00b      	b.n	80012a2 <Run_Control_Logic+0x126>
  else if (LevelB_persen > 100)
 800128a:	4b5d      	ldr	r3, [pc, #372]	@ (8001400 <Run_Control_Logic+0x284>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4958      	ldr	r1, [pc, #352]	@ (80013f0 <Run_Control_Logic+0x274>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff33 	bl	80010fc <__aeabi_fcmpgt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <Run_Control_Logic+0x126>
    LevelB_persen = 100;
 800129c:	4b58      	ldr	r3, [pc, #352]	@ (8001400 <Run_Control_Logic+0x284>)
 800129e:	4a54      	ldr	r2, [pc, #336]	@ (80013f0 <Run_Control_Logic+0x274>)
 80012a0:	601a      	str	r2, [r3, #0]
  if (LevelC_persen < 0)
 80012a2:	4b58      	ldr	r3, [pc, #352]	@ (8001404 <Run_Control_Logic+0x288>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f04f 0100 	mov.w	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff08 	bl	80010c0 <__aeabi_fcmplt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <Run_Control_Logic+0x144>
    LevelC_persen = 0;
 80012b6:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <Run_Control_Logic+0x288>)
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e00b      	b.n	80012d8 <Run_Control_Logic+0x15c>
  else if (LevelC_persen > 100)
 80012c0:	4b50      	ldr	r3, [pc, #320]	@ (8001404 <Run_Control_Logic+0x288>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	494a      	ldr	r1, [pc, #296]	@ (80013f0 <Run_Control_Logic+0x274>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff18 	bl	80010fc <__aeabi_fcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <Run_Control_Logic+0x15c>
    LevelC_persen = 100;
 80012d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001404 <Run_Control_Logic+0x288>)
 80012d4:	4a46      	ldr	r2, [pc, #280]	@ (80013f0 <Run_Control_Logic+0x274>)
 80012d6:	601a      	str	r2, [r3, #0]

  // 2. Logika Kontrol dengan Prioritas untuk Drum A
  // Cek kondisi untuk memulai pengisian Drum A
  if (state_A == STATE_IDLE && LevelA_persen <= AMBANG_BAWAH)
 80012d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <Run_Control_Logic+0x28c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d11c      	bne.n	800131a <Run_Control_Logic+0x19e>
 80012e0:	4b46      	ldr	r3, [pc, #280]	@ (80013fc <Run_Control_Logic+0x280>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4949      	ldr	r1, [pc, #292]	@ (800140c <Run_Control_Logic+0x290>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fef4 	bl	80010d4 <__aeabi_fcmple>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d013      	beq.n	800131a <Run_Control_Logic+0x19e>
  {
    // Hanya mulai mengisi jika Drum B memiliki cukup air
    if (LevelB_persen > SUMBER_KOSONG)
 80012f2:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <Run_Control_Logic+0x284>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fefe 	bl	80010fc <__aeabi_fcmpgt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d029      	beq.n	800135a <Run_Control_Logic+0x1de>
    {
      state_A = STATE_FILLING;
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <Run_Control_Logic+0x28c>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_SET); // BUKA Valve B ke A
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001312:	483f      	ldr	r0, [pc, #252]	@ (8001410 <Run_Control_Logic+0x294>)
 8001314:	f001 fab8 	bl	8002888 <HAL_GPIO_WritePin>
    if (LevelB_persen > SUMBER_KOSONG)
 8001318:	e01f      	b.n	800135a <Run_Control_Logic+0x1de>
    }
  }
  // Cek kondisi untuk menghentikan pengisian Drum A
  else if (state_A == STATE_FILLING)
 800131a:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <Run_Control_Logic+0x28c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d11b      	bne.n	800135a <Run_Control_Logic+0x1de>
  {
    // Hentikan pengisian jika Drum A sudah penuh ATAU jika sumber (Drum B) kosong
    if (LevelA_persen >= TARGET_PENUH || LevelB_persen <= SUMBER_KOSONG)
 8001322:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <Run_Control_Logic+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	493b      	ldr	r1, [pc, #236]	@ (8001414 <Run_Control_Logic+0x298>)
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fedd 	bl	80010e8 <__aeabi_fcmpge>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <Run_Control_Logic+0x1cc>
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <Run_Control_Logic+0x284>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fec9 	bl	80010d4 <__aeabi_fcmple>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <Run_Control_Logic+0x1de>
    {
      state_A = STATE_IDLE;
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <Run_Control_Logic+0x28c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_RESET); // TUTUP Valve B ke A
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001354:	482e      	ldr	r0, [pc, #184]	@ (8001410 <Run_Control_Logic+0x294>)
 8001356:	f001 fa97 	bl	8002888 <HAL_GPIO_WritePin>
    }
  }

  // 3. Logika Kontrol untuk Drum B (HANYA JIKA DRUM A TIDAK SEDANG DIISI)
  if (state_A == STATE_IDLE)
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <Run_Control_Logic+0x28c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d15c      	bne.n	800141c <Run_Control_Logic+0x2a0>
  {
    // Cek kondisi untuk memulai pengisian Drum B
    if (state_B == STATE_IDLE && LevelB_persen <= AMBANG_BAWAH)
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <Run_Control_Logic+0x29c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d11c      	bne.n	80013a4 <Run_Control_Logic+0x228>
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <Run_Control_Logic+0x284>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4927      	ldr	r1, [pc, #156]	@ (800140c <Run_Control_Logic+0x290>)
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff feaf 	bl	80010d4 <__aeabi_fcmple>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <Run_Control_Logic+0x228>
    {
      // Hanya mulai mengisi jika Drum C memiliki cukup air
      if (LevelC_persen > SUMBER_KOSONG)
 800137c:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <Run_Control_Logic+0x288>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff feb9 	bl	80010fc <__aeabi_fcmpgt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d04e      	beq.n	800142e <Run_Control_Logic+0x2b2>
      {
        state_B = STATE_FILLING;
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <Run_Control_Logic+0x29c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_SET); // BUKA Valve C ke B
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800139c:	481c      	ldr	r0, [pc, #112]	@ (8001410 <Run_Control_Logic+0x294>)
 800139e:	f001 fa73 	bl	8002888 <HAL_GPIO_WritePin>
      if (LevelC_persen > SUMBER_KOSONG)
 80013a2:	e044      	b.n	800142e <Run_Control_Logic+0x2b2>
      }
    }
    // Cek kondisi untuk menghentikan pengisian Drum B
    else if (state_B == STATE_FILLING)
 80013a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <Run_Control_Logic+0x29c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d140      	bne.n	800142e <Run_Control_Logic+0x2b2>
    {
      // Hentikan pengisian jika Drum B sudah penuh ATAU jika sumber (Drum C) kosong
      if (LevelB_persen >= TARGET_PENUH || LevelC_persen <= SUMBER_KOSONG)
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <Run_Control_Logic+0x284>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4918      	ldr	r1, [pc, #96]	@ (8001414 <Run_Control_Logic+0x298>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe98 	bl	80010e8 <__aeabi_fcmpge>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <Run_Control_Logic+0x256>
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <Run_Control_Logic+0x288>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe84 	bl	80010d4 <__aeabi_fcmple>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d02d      	beq.n	800142e <Run_Control_Logic+0x2b2>
      {
        state_B = STATE_IDLE;
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <Run_Control_Logic+0x29c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET); // TUTUP Valve C ke B
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013de:	480c      	ldr	r0, [pc, #48]	@ (8001410 <Run_Control_Logic+0x294>)
 80013e0:	f001 fa52 	bl	8002888 <HAL_GPIO_WritePin>
 80013e4:	e023      	b.n	800142e <Run_Control_Logic+0x2b2>
 80013e6:	bf00      	nop
 80013e8:	2000050c 	.word	0x2000050c
 80013ec:	41200000 	.word	0x41200000
 80013f0:	42c80000 	.word	0x42c80000
 80013f4:	43160000 	.word	0x43160000
 80013f8:	42f00000 	.word	0x42f00000
 80013fc:	2000053c 	.word	0x2000053c
 8001400:	20000540 	.word	0x20000540
 8001404:	20000544 	.word	0x20000544
 8001408:	20000548 	.word	0x20000548
 800140c:	41c80000 	.word	0x41c80000
 8001410:	40010c00 	.word	0x40010c00
 8001414:	42be0000 	.word	0x42be0000
 8001418:	20000549 	.word	0x20000549
    }
  }
  else
  {
    // Jika Drum A sedang diisi, pastikan valve C->B mati untuk keamanan.
    state_B = STATE_IDLE;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <Run_Control_Logic+0x2e8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001428:	480f      	ldr	r0, [pc, #60]	@ (8001468 <Run_Control_Logic+0x2ec>)
 800142a:	f001 fa2d 	bl	8002888 <HAL_GPIO_WritePin>
  }

  // 4. Logika Peringatan untuk Operator (independen dari logika pengisian)
  if (LevelC_persen <= AMBANG_BAWAH)
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <Run_Control_Logic+0x2f0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	490f      	ldr	r1, [pc, #60]	@ (8001470 <Run_Control_Logic+0x2f4>)
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe4d 	bl	80010d4 <__aeabi_fcmple>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <Run_Control_Logic+0x2d2>
  {
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET); // NYALAKAN Alert
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001446:	4808      	ldr	r0, [pc, #32]	@ (8001468 <Run_Control_Logic+0x2ec>)
 8001448:	f001 fa1e 	bl	8002888 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET); // MATIKAN Alert
  }
}
 800144c:	e005      	b.n	800145a <Run_Control_Logic+0x2de>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET); // MATIKAN Alert
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <Run_Control_Logic+0x2ec>)
 8001456:	f001 fa17 	bl	8002888 <HAL_GPIO_WritePin>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000549 	.word	0x20000549
 8001468:	40010c00 	.word	0x40010c00
 800146c:	20000544 	.word	0x20000544
 8001470:	41c80000 	.word	0x41c80000

08001474 <Initialize_Sensors>:

/**
 * @brief Menginisialisasi struktur handle untuk setiap sensor.
 */
void Initialize_Sensors(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  // Sensor 1 menggunakan USART1
  sensors[0].huart = &huart1;
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <Initialize_Sensors+0x48>)
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <Initialize_Sensors+0x4c>)
 800147c:	601a      	str	r2, [r3, #0]
  sensors[0].state = STATE_WAIT_FOR_START;
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <Initialize_Sensors+0x48>)
 8001480:	2200      	movs	r2, #0
 8001482:	715a      	strb	r2, [r3, #5]
  sensors[0].new_data_available = 0;
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <Initialize_Sensors+0x48>)
 8001486:	2200      	movs	r2, #0
 8001488:	731a      	strb	r2, [r3, #12]

  // Sensor 2 menggunakan USART3
  sensors[1].huart = &huart2;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <Initialize_Sensors+0x48>)
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <Initialize_Sensors+0x50>)
 800148e:	611a      	str	r2, [r3, #16]
  sensors[1].state = STATE_WAIT_FOR_START;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <Initialize_Sensors+0x48>)
 8001492:	2200      	movs	r2, #0
 8001494:	755a      	strb	r2, [r3, #21]
  sensors[1].new_data_available = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <Initialize_Sensors+0x48>)
 8001498:	2200      	movs	r2, #0
 800149a:	771a      	strb	r2, [r3, #28]

  // Sensor 3 menggunakan UART4
  sensors[2].huart = &huart3;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <Initialize_Sensors+0x48>)
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <Initialize_Sensors+0x54>)
 80014a0:	621a      	str	r2, [r3, #32]
  sensors[2].state = STATE_WAIT_FOR_START;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <Initialize_Sensors+0x48>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  sensors[2].new_data_available = 0;
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <Initialize_Sensors+0x48>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000050c 	.word	0x2000050c
 80014c0:	20000434 	.word	0x20000434
 80014c4:	2000047c 	.word	0x2000047c
 80014c8:	200004c4 	.word	0x200004c4

080014cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 fe0f 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f851 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f000 f9db 	bl	8001894 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014de:	f000 f8ad 	bl	800163c <MX_I2C1_Init>
  MX_RTC_Init();
 80014e2:	f000 f8d9 	bl	8001698 <MX_RTC_Init>
  MX_SPI1_Init();
 80014e6:	f000 f921 	bl	800172c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80014ea:	f000 f955 	bl	8001798 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014ee:	f000 f97d 	bl	80017ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014f2:	f000 f9a5 	bl	8001840 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80014f6:	f007 fb27 	bl	8008b48 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80014fa:	f008 ff1d 	bl	800a338 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Inisialisasi handle sensor
  Initialize_Sensors();
 80014fe:	f7ff ffb9 	bl	8001474 <Initialize_Sensors>

  // Mulai menerima data dari semua sensor via interrupt
  for (int i = 0; i < NUM_SENSORS; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e010      	b.n	800152a <main+0x5e>
  {
    HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
 8001508:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <main+0xac>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <main+0xac>)
 8001518:	4413      	add	r3, r2
 800151a:	3304      	adds	r3, #4
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	f004 fa4e 	bl	80059c0 <HAL_UART_Receive_IT>
  for (int i = 0; i < NUM_SENSORS; i++)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b02      	cmp	r3, #2
 800152e:	ddeb      	ble.n	8001508 <main+0x3c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Run_Control_Logic();
 8001530:	f7ff fe24 	bl	800117c <Run_Control_Logic>
      // Perbarui tampilan LCD setiap iterasi
      Update_LCD_Display();
    }
#endif

    if (sensors[0].new_data_available && sensors[1].new_data_available && sensors[2].new_data_available)
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <main+0xac>)
 8001536:	7b1b      	ldrb	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d018      	beq.n	800156e <main+0xa2>
 800153c:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <main+0xac>)
 800153e:	7f1b      	ldrb	r3, [r3, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d014      	beq.n	800156e <main+0xa2>
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <main+0xac>)
 8001546:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00f      	beq.n	800156e <main+0xa2>
    {
      for (int i = 0; i < NUM_SENSORS; i++)
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	e009      	b.n	8001568 <main+0x9c>
      {
        sensors[i].new_data_available = 0;
 8001554:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <main+0xac>)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	330c      	adds	r3, #12
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < NUM_SENSORS; i++)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	ddf2      	ble.n	8001554 <main+0x88>
      }
    }

    HAL_Delay(1000); // Mengurangi delay agar sistem lebih responsif
 800156e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001572:	f000 fe21 	bl	80021b8 <HAL_Delay>
    Run_Control_Logic();
 8001576:	e7db      	b.n	8001530 <main+0x64>
 8001578:	2000050c 	.word	0x2000050c

0800157c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001586:	2228      	movs	r2, #40	@ 0x28
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f00a fad5 	bl	800bb3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80015ac:	2309      	movs	r3, #9
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ba:	2301      	movs	r3, #1
 80015bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 f81e 	bl	8004618 <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015e2:	f000 fa77 	bl	8001ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015e6:	230f      	movs	r3, #15
 80015e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fa8a 	bl	8004b1c <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800160e:	f000 fa61 	bl	8001ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 8001612:	2311      	movs	r3, #17
 8001614:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800161a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800161c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001620:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fc07 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001630:	f000 fa50 	bl	8001ad4 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	@ 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <MX_I2C1_Init+0x50>)
 8001642:	4a13      	ldr	r2, [pc, #76]	@ (8001690 <MX_I2C1_Init+0x54>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_I2C1_Init+0x50>)
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_I2C1_Init+0x58>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_I2C1_Init+0x50>)
 800165a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800165e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <MX_I2C1_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_I2C1_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_I2C1_Init+0x50>)
 800167a:	f001 f91d 	bl	80028b8 <HAL_I2C_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001684:	f000 fa26 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000374 	.word	0x20000374
 8001690:	40005400 	.word	0x40005400
 8001694:	000186a0 	.word	0x000186a0

08001698 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2100      	movs	r1, #0
 80016a2:	460a      	mov	r2, r1
 80016a4:	801a      	strh	r2, [r3, #0]
 80016a6:	460a      	mov	r2, r1
 80016a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <MX_RTC_Init+0x8c>)
 80016b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <MX_RTC_Init+0x90>)
 80016b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <MX_RTC_Init+0x8c>)
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_RTC_Init+0x8c>)
 80016be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016c2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016c4:	4817      	ldr	r0, [pc, #92]	@ (8001724 <MX_RTC_Init+0x8c>)
 80016c6:	f003 fd23 	bl	8005110 <HAL_RTC_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80016d0:	f000 fa00 	bl	8001ad4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016d8:	2300      	movs	r3, #0
 80016da:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016dc:	2300      	movs	r3, #0
 80016de:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2201      	movs	r2, #1
 80016e4:	4619      	mov	r1, r3
 80016e6:	480f      	ldr	r0, [pc, #60]	@ (8001724 <MX_RTC_Init+0x8c>)
 80016e8:	f003 fd9e 	bl	8005228 <HAL_RTC_SetTime>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80016f2:	f000 f9ef 	bl	8001ad4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016f6:	2301      	movs	r3, #1
 80016f8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80016fa:	2301      	movs	r3, #1
 80016fc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80016fe:	2301      	movs	r3, #1
 8001700:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001702:	2300      	movs	r3, #0
 8001704:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	2201      	movs	r2, #1
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_RTC_Init+0x8c>)
 800170e:	f003 fe23 	bl	8005358 <HAL_RTC_SetDate>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001718:	f000 f9dc 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200003c8 	.word	0x200003c8
 8001728:	40002800 	.word	0x40002800

0800172c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001732:	4a18      	ldr	r2, [pc, #96]	@ (8001794 <MX_SPI1_Init+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800173c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_SPI1_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001760:	2208      	movs	r2, #8
 8001762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <MX_SPI1_Init+0x64>)
 8001778:	220a      	movs	r2, #10
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	@ (8001790 <MX_SPI1_Init+0x64>)
 800177e:	f004 f84b 	bl	8005818 <HAL_SPI_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001788:	f000 f9a4 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200003dc 	.word	0x200003dc
 8001794:	40013000 	.word	0x40013000

08001798 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <MX_USART1_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017d0:	f004 f8a6 	bl	8005920 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f97b 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000434 	.word	0x20000434
 80017e8:	40013800 	.word	0x40013800

080017ec <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f004 f87c 	bl	8005920 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f951 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000047c 	.word	0x2000047c
 800183c:	40004400 	.word	0x40004400

08001840 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <MX_USART3_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 800184c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_USART3_UART_Init+0x4c>)
 8001878:	f004 f852 	bl	8005920 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 f927 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200004c4 	.word	0x200004c4
 8001890:	40004800 	.word	0x40004800

08001894 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a29      	ldr	r2, [pc, #164]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a23      	ldr	r2, [pc, #140]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a17      	ldr	r2, [pc, #92]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <MX_GPIO_Init+0xc0>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin | USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f24f 0105 	movw	r1, #61445	@ 0xf005
 800190e:	4812      	ldr	r0, [pc, #72]	@ (8001958 <MX_GPIO_Init+0xc4>)
 8001910:	f000 ffba 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_GPIO_Init+0xc8>)
 8001928:	f000 fe2a 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin USER_LED_Pin LED_GREEN_Pin LED_RED_Pin
                           POMPA_BA_Pin POMPA_CB_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin | USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin;
 800192c:	f24f 0305 	movw	r3, #61445	@ 0xf005
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_GPIO_Init+0xc4>)
 8001946:	f000 fe1b 	bl	8002580 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800194a:	bf00      	nop
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40010c00 	.word	0x40010c00
 800195c:	40010800 	.word	0x40010800

08001960 <HAL_UART_RxCpltCallback>:
 * @brief  Callback yang dipanggil setiap kali 1 byte data diterima via UART.
 * @param  huart: pointer ke handle UART.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  // Cari tahu sensor mana yang mengirim data
  for (int i = 0; i < NUM_SENSORS; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e022      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x54>
  {
    if (huart->Instance == sensors[i].huart->Instance)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4913      	ldr	r1, [pc, #76]	@ (80019c0 <HAL_UART_RxCpltCallback+0x60>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	440b      	add	r3, r1
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d115      	bne.n	80019ae <HAL_UART_RxCpltCallback+0x4e>
    {
      Process_UART_Byte(&sensors[i]);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_UART_RxCpltCallback+0x60>)
 8001988:	4413      	add	r3, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f81a 	bl	80019c4 <Process_UART_Byte>
      // Aktifkan lagi interrupt untuk menerima byte berikutnya
      HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
 8001990:	4a0b      	ldr	r2, [pc, #44]	@ (80019c0 <HAL_UART_RxCpltCallback+0x60>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_UART_RxCpltCallback+0x60>)
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	f004 f80a 	bl	80059c0 <HAL_UART_Receive_IT>
      return; // Keluar dari loop setelah menemukan sensor yang sesuai
 80019ac:	e005      	b.n	80019ba <HAL_UART_RxCpltCallback+0x5a>
  for (int i = 0; i < NUM_SENSORS; i++)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	ddd9      	ble.n	800196e <HAL_UART_RxCpltCallback+0xe>
    }
  }
}
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000050c 	.word	0x2000050c

080019c4 <Process_UART_Byte>:
 * @brief  Memproses setiap byte yang masuk menggunakan state machine.
 * @param  sensor: pointer ke handle sensor yang sedang diproses.
 * @retval None
 */
void Process_UART_Byte(Sensor_HandleTypeDef *sensor)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint8_t received_byte = sensor->rx_buffer;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	73fb      	strb	r3, [r7, #15]

  switch (sensor->state)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	795b      	ldrb	r3, [r3, #5]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d845      	bhi.n	8001a66 <Process_UART_Byte+0xa2>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <Process_UART_Byte+0x1c>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	08001a05 	.word	0x08001a05
 80019e8:	08001a13 	.word	0x08001a13
 80019ec:	08001a21 	.word	0x08001a21
  {
  case STATE_WAIT_FOR_START:
    if (received_byte == START_BYTE)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2bff      	cmp	r3, #255	@ 0xff
 80019f4:	d13b      	bne.n	8001a6e <Process_UART_Byte+0xaa>
    {
      sensor->raw_data[0] = received_byte;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	719a      	strb	r2, [r3, #6]
      sensor->state = STATE_READ_H_DATA;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	715a      	strb	r2, [r3, #5]
    }
    break;
 8001a02:	e034      	b.n	8001a6e <Process_UART_Byte+0xaa>

  case STATE_READ_H_DATA:
    sensor->raw_data[1] = received_byte;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	71da      	strb	r2, [r3, #7]
    sensor->state = STATE_READ_L_DATA;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	715a      	strb	r2, [r3, #5]
    break;
 8001a10:	e02e      	b.n	8001a70 <Process_UART_Byte+0xac>

  case STATE_READ_L_DATA:
    sensor->raw_data[2] = received_byte;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	721a      	strb	r2, [r3, #8]
    sensor->state = STATE_READ_SUM;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	715a      	strb	r2, [r3, #5]
    break;
 8001a1e:	e027      	b.n	8001a70 <Process_UART_Byte+0xac>

  case STATE_READ_SUM:
    sensor->raw_data[3] = received_byte;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	725a      	strb	r2, [r3, #9]
    uint8_t checksum = (sensor->raw_data[0] + sensor->raw_data[1] + sensor->raw_data[2]) & 0xFF;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	799a      	ldrb	r2, [r3, #6]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	79db      	ldrb	r3, [r3, #7]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7a1b      	ldrb	r3, [r3, #8]
 8001a36:	4413      	add	r3, r2
 8001a38:	73bb      	strb	r3, [r7, #14]

    if (checksum == sensor->raw_data[3])
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7a5b      	ldrb	r3, [r3, #9]
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d10c      	bne.n	8001a5e <Process_UART_Byte+0x9a>
    {
      // Checksum valid, hitung jarak
      sensor->distance = (uint16_t)(sensor->raw_data[1] << 8) | sensor->raw_data[2];
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	7a12      	ldrb	r2, [r2, #8]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	815a      	strh	r2, [r3, #10]
      sensor->new_data_available = 1; // Set flag data baru
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	731a      	strb	r2, [r3, #12]
    }
    // Reset state untuk frame berikutnya, baik checksum valid maupun tidak
    sensor->state = STATE_WAIT_FOR_START;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	715a      	strb	r2, [r3, #5]
    break;
 8001a64:	e004      	b.n	8001a70 <Process_UART_Byte+0xac>

  default:
    // Jika terjadi state yang tidak dikenal, reset
    sensor->state = STATE_WAIT_FOR_START;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	715a      	strb	r2, [r3, #5]
    break;
 8001a6c:	e000      	b.n	8001a70 <Process_UART_Byte+0xac>
    break;
 8001a6e:	bf00      	nop
  }
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <HAL_UART_ErrorCallback>:
 * @brief  Callback untuk menangani error UART.
 * @param  huart: pointer ke handle UART.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  // Jika terjadi error (misal: Overrun), coba aktifkan kembali interrupt
  for (int i = 0; i < NUM_SENSORS; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e01b      	b.n	8001ac2 <HAL_UART_ErrorCallback+0x46>
  {
    if (huart->Instance == sensors[i].huart->Instance)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4910      	ldr	r1, [pc, #64]	@ (8001ad0 <HAL_UART_ErrorCallback+0x54>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	440b      	add	r3, r1
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10e      	bne.n	8001abc <HAL_UART_ErrorCallback+0x40>
    {
      HAL_UART_Receive_IT(sensors[i].huart, &sensors[i].rx_buffer, 1);
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <HAL_UART_ErrorCallback+0x54>)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_UART_ErrorCallback+0x54>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f003 ff83 	bl	80059c0 <HAL_UART_Receive_IT>
      return;
 8001aba:	e005      	b.n	8001ac8 <HAL_UART_ErrorCallback+0x4c>
  for (int i = 0; i < NUM_SENSORS; i++)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	dde0      	ble.n	8001a8a <HAL_UART_ErrorCallback+0xe>
    }
  }
}
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000050c 	.word	0x2000050c

08001ad4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <Error_Handler+0x8>

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6193      	str	r3, [r2, #24]
 8001af2:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_MspInit+0x60>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_MspInit+0x60>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000

08001b44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd4 <HAL_I2C_MspInit+0x90>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d132      	bne.n	8001bca <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b82:	2312      	movs	r3, #18
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4812      	ldr	r0, [pc, #72]	@ (8001bdc <HAL_I2C_MspInit+0x98>)
 8001b92:	f000 fcf5 	bl	8002580 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b96:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_I2C_MspInit+0x9c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bac:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <HAL_I2C_MspInit+0x9c>)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <HAL_RTC_MspInit+0x3c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d110      	bne.n	8001c18 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001bf6:	f002 fd03 	bl	8004600 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_RTC_MspInit+0x40>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <HAL_RTC_MspInit+0x40>)
 8001c00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_RTC_MspInit+0x40>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c12:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_RTC_MspInit+0x44>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40002800 	.word	0x40002800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	4242043c 	.word	0x4242043c

08001c2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <HAL_SPI_MspInit+0x88>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d12f      	bne.n	8001cac <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_SPI_MspInit+0x8c>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a19      	ldr	r2, [pc, #100]	@ (8001cb8 <HAL_SPI_MspInit+0x8c>)
 8001c52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_SPI_MspInit+0x8c>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_SPI_MspInit+0x8c>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a13      	ldr	r2, [pc, #76]	@ (8001cb8 <HAL_SPI_MspInit+0x8c>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_SPI_MspInit+0x8c>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c7c:	23a0      	movs	r3, #160	@ 0xa0
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480b      	ldr	r0, [pc, #44]	@ (8001cbc <HAL_SPI_MspInit+0x90>)
 8001c90:	f000 fc76 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c94:	2340      	movs	r3, #64	@ 0x40
 8001c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <HAL_SPI_MspInit+0x90>)
 8001ca8:	f000 fc6a 	bl	8002580 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40013000 	.word	0x40013000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010800 	.word	0x40010800

08001cc0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5f      	ldr	r2, [pc, #380]	@ (8001e58 <HAL_UART_MspInit+0x198>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d13a      	bne.n	8001d56 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a57      	ldr	r2, [pc, #348]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b55      	ldr	r3, [pc, #340]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	4619      	mov	r1, r3
 8001d24:	484e      	ldr	r0, [pc, #312]	@ (8001e60 <HAL_UART_MspInit+0x1a0>)
 8001d26:	f000 fc2b 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4848      	ldr	r0, [pc, #288]	@ (8001e60 <HAL_UART_MspInit+0x1a0>)
 8001d40:	f000 fc1e 	bl	8002580 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2025      	movs	r0, #37	@ 0x25
 8001d4a:	f000 fb30 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4e:	2025      	movs	r0, #37	@ 0x25
 8001d50:	f000 fb49 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d54:	e07c      	b.n	8001e50 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a42      	ldr	r2, [pc, #264]	@ (8001e64 <HAL_UART_MspInit+0x1a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d138      	bne.n	8001dd2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d60:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4a3d      	ldr	r2, [pc, #244]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d6a:	61d3      	str	r3, [r2, #28]
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a37      	ldr	r2, [pc, #220]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d90:	2304      	movs	r3, #4
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4619      	mov	r1, r3
 8001da2:	482f      	ldr	r0, [pc, #188]	@ (8001e60 <HAL_UART_MspInit+0x1a0>)
 8001da4:	f000 fbec 	bl	8002580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001da8:	2308      	movs	r3, #8
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	4619      	mov	r1, r3
 8001dba:	4829      	ldr	r0, [pc, #164]	@ (8001e60 <HAL_UART_MspInit+0x1a0>)
 8001dbc:	f000 fbe0 	bl	8002580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2026      	movs	r0, #38	@ 0x26
 8001dc6:	f000 faf2 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dca:	2026      	movs	r0, #38	@ 0x26
 8001dcc:	f000 fb0b 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001dd0:	e03e      	b.n	8001e50 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_UART_MspInit+0x1a8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d139      	bne.n	8001e50 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001de2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de6:	61d3      	str	r3, [r2, #28]
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_UART_MspInit+0x19c>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <HAL_UART_MspInit+0x1ac>)
 8001e22:	f000 fbad 	bl	8002580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <HAL_UART_MspInit+0x1ac>)
 8001e3c:	f000 fba0 	bl	8002580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2027      	movs	r0, #39	@ 0x27
 8001e46:	f000 fab2 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e4a:	2027      	movs	r0, #39	@ 0x27
 8001e4c:	f000 facb 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40004400 	.word	0x40004400
 8001e68:	40004800 	.word	0x40004800
 8001e6c:	40010c00 	.word	0x40010c00

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <NMI_Handler+0x4>

08001e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <MemManage_Handler+0x4>

08001e88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f95e 	bl	8002180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ece:	f000 ff53 	bl	8002d78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20001230 	.word	0x20001230

08001edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <USART1_IRQHandler+0x10>)
 8001ee2:	f003 fd93 	bl	8005a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000434 	.word	0x20000434

08001ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <USART2_IRQHandler+0x10>)
 8001ef6:	f003 fd89 	bl	8005a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000047c 	.word	0x2000047c

08001f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <USART3_IRQHandler+0x10>)
 8001f0a:	f003 fd7f 	bl	8005a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200004c4 	.word	0x200004c4

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <_kill>:

int _kill(int pid, int sig)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f30:	f009 fe56 	bl	800bbe0 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2216      	movs	r2, #22
 8001f38:	601a      	str	r2, [r3, #0]
  return -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_exit>:

void _exit (int status)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffe7 	bl	8001f26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
  }

  return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
  }
  return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <_isatty>:

int _isatty(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
	...

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f009 fdbe 	bl	800bbe0 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20005000 	.word	0x20005000
 8002090:	00000400 	.word	0x00000400
 8002094:	2000054c 	.word	0x2000054c
 8002098:	20001878 	.word	0x20001878

0800209c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a8:	f7ff fff8 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ac:	480b      	ldr	r0, [pc, #44]	@ (80020dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020ae:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020b0:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020c4:	4c09      	ldr	r4, [pc, #36]	@ (80020ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d2:	f009 fd8b 	bl	800bbec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020d6:	f7ff f9f9 	bl	80014cc <main>
  bx lr
 80020da:	4770      	bx	lr
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80020e4:	0800f7ac 	.word	0x0800f7ac
  ldr r2, =_sbss
 80020e8:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80020ec:	20001874 	.word	0x20001874

080020f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC1_2_IRQHandler>
	...

080020f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <HAL_Init+0x28>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a07      	ldr	r2, [pc, #28]	@ (800211c <HAL_Init+0x28>)
 80020fe:	f043 0310 	orr.w	r3, r3, #16
 8002102:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 f947 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210a:	200f      	movs	r0, #15
 800210c:	f000 f808 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002110:	f7ff fce6 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f95f 	bl	8002402 <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f927 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	@ (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000000 	.word	0x20000000
 8002178:	20000008 	.word	0x20000008
 800217c:	20000004 	.word	0x20000004

08002180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_IncTick+0x1c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_IncTick+0x20>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a03      	ldr	r2, [pc, #12]	@ (80021a0 <HAL_IncTick+0x20>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000550 	.word	0x20000550

080021a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b02      	ldr	r3, [pc, #8]	@ (80021b4 <HAL_GetTick+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000550 	.word	0x20000550

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff fff0 	bl	80021a4 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffe0 	bl	80021a4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4906      	ldr	r1, [pc, #24]	@ (8002298 <__NVIC_EnableIRQ+0x34>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff90 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff2d 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff42 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff90 	bl	80022f0 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5f 	bl	800229c <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff35 	bl	8002264 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d008      	beq.n	8002444 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2204      	movs	r2, #4
 8002436:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e020      	b.n	8002486 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 020e 	bic.w	r2, r2, #14
 8002452:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f202 	lsl.w	r2, r1, r2
 8002472:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d005      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2204      	movs	r2, #4
 80024ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e051      	b.n	8002558 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 020e 	bic.w	r2, r2, #14
 80024c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a22      	ldr	r2, [pc, #136]	@ (8002564 <HAL_DMA_Abort_IT+0xd4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d029      	beq.n	8002532 <HAL_DMA_Abort_IT+0xa2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_DMA_Abort_IT+0xd8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <HAL_DMA_Abort_IT+0x9e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1f      	ldr	r2, [pc, #124]	@ (800256c <HAL_DMA_Abort_IT+0xdc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01a      	beq.n	8002528 <HAL_DMA_Abort_IT+0x98>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002570 <HAL_DMA_Abort_IT+0xe0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d012      	beq.n	8002522 <HAL_DMA_Abort_IT+0x92>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1c      	ldr	r2, [pc, #112]	@ (8002574 <HAL_DMA_Abort_IT+0xe4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00a      	beq.n	800251c <HAL_DMA_Abort_IT+0x8c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1b      	ldr	r2, [pc, #108]	@ (8002578 <HAL_DMA_Abort_IT+0xe8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d102      	bne.n	8002516 <HAL_DMA_Abort_IT+0x86>
 8002510:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002514:	e00e      	b.n	8002534 <HAL_DMA_Abort_IT+0xa4>
 8002516:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800251a:	e00b      	b.n	8002534 <HAL_DMA_Abort_IT+0xa4>
 800251c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002520:	e008      	b.n	8002534 <HAL_DMA_Abort_IT+0xa4>
 8002522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002526:	e005      	b.n	8002534 <HAL_DMA_Abort_IT+0xa4>
 8002528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800252c:	e002      	b.n	8002534 <HAL_DMA_Abort_IT+0xa4>
 800252e:	2310      	movs	r3, #16
 8002530:	e000      	b.n	8002534 <HAL_DMA_Abort_IT+0xa4>
 8002532:	2301      	movs	r3, #1
 8002534:	4a11      	ldr	r2, [pc, #68]	@ (800257c <HAL_DMA_Abort_IT+0xec>)
 8002536:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
    } 
  }
  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40020008 	.word	0x40020008
 8002568:	4002001c 	.word	0x4002001c
 800256c:	40020030 	.word	0x40020030
 8002570:	40020044 	.word	0x40020044
 8002574:	40020058 	.word	0x40020058
 8002578:	4002006c 	.word	0x4002006c
 800257c:	40020000 	.word	0x40020000

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b08b      	sub	sp, #44	@ 0x2c
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002592:	e169      	b.n	8002868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002594:	2201      	movs	r2, #1
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 8158 	bne.w	8002862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002820 <HAL_GPIO_Init+0x2a0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d05e      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025bc:	4a98      	ldr	r2, [pc, #608]	@ (8002820 <HAL_GPIO_Init+0x2a0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d875      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025c2:	4a98      	ldr	r2, [pc, #608]	@ (8002824 <HAL_GPIO_Init+0x2a4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d058      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025c8:	4a96      	ldr	r2, [pc, #600]	@ (8002824 <HAL_GPIO_Init+0x2a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d86f      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025ce:	4a96      	ldr	r2, [pc, #600]	@ (8002828 <HAL_GPIO_Init+0x2a8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d052      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025d4:	4a94      	ldr	r2, [pc, #592]	@ (8002828 <HAL_GPIO_Init+0x2a8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d869      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025da:	4a94      	ldr	r2, [pc, #592]	@ (800282c <HAL_GPIO_Init+0x2ac>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d04c      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025e0:	4a92      	ldr	r2, [pc, #584]	@ (800282c <HAL_GPIO_Init+0x2ac>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d863      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025e6:	4a92      	ldr	r2, [pc, #584]	@ (8002830 <HAL_GPIO_Init+0x2b0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d046      	beq.n	800267a <HAL_GPIO_Init+0xfa>
 80025ec:	4a90      	ldr	r2, [pc, #576]	@ (8002830 <HAL_GPIO_Init+0x2b0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d85d      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d82a      	bhi.n	800264c <HAL_GPIO_Init+0xcc>
 80025f6:	2b12      	cmp	r3, #18
 80025f8:	d859      	bhi.n	80026ae <HAL_GPIO_Init+0x12e>
 80025fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002600 <HAL_GPIO_Init+0x80>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	0800267b 	.word	0x0800267b
 8002604:	08002655 	.word	0x08002655
 8002608:	08002667 	.word	0x08002667
 800260c:	080026a9 	.word	0x080026a9
 8002610:	080026af 	.word	0x080026af
 8002614:	080026af 	.word	0x080026af
 8002618:	080026af 	.word	0x080026af
 800261c:	080026af 	.word	0x080026af
 8002620:	080026af 	.word	0x080026af
 8002624:	080026af 	.word	0x080026af
 8002628:	080026af 	.word	0x080026af
 800262c:	080026af 	.word	0x080026af
 8002630:	080026af 	.word	0x080026af
 8002634:	080026af 	.word	0x080026af
 8002638:	080026af 	.word	0x080026af
 800263c:	080026af 	.word	0x080026af
 8002640:	080026af 	.word	0x080026af
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002671 	.word	0x08002671
 800264c:	4a79      	ldr	r2, [pc, #484]	@ (8002834 <HAL_GPIO_Init+0x2b4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002652:	e02c      	b.n	80026ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	623b      	str	r3, [r7, #32]
          break;
 800265a:	e029      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	3304      	adds	r3, #4
 8002662:	623b      	str	r3, [r7, #32]
          break;
 8002664:	e024      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	3308      	adds	r3, #8
 800266c:	623b      	str	r3, [r7, #32]
          break;
 800266e:	e01f      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	330c      	adds	r3, #12
 8002676:	623b      	str	r3, [r7, #32]
          break;
 8002678:	e01a      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002682:	2304      	movs	r3, #4
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e013      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002690:	2308      	movs	r3, #8
 8002692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	611a      	str	r2, [r3, #16]
          break;
 800269a:	e009      	b.n	80026b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800269c:	2308      	movs	r3, #8
 800269e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	615a      	str	r2, [r3, #20]
          break;
 80026a6:	e003      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026a8:	2300      	movs	r3, #0
 80026aa:	623b      	str	r3, [r7, #32]
          break;
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x130>
          break;
 80026ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2bff      	cmp	r3, #255	@ 0xff
 80026b4:	d801      	bhi.n	80026ba <HAL_GPIO_Init+0x13a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	e001      	b.n	80026be <HAL_GPIO_Init+0x13e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2bff      	cmp	r3, #255	@ 0xff
 80026c4:	d802      	bhi.n	80026cc <HAL_GPIO_Init+0x14c>
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	e002      	b.n	80026d2 <HAL_GPIO_Init+0x152>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	3b08      	subs	r3, #8
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	210f      	movs	r1, #15
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	6a39      	ldr	r1, [r7, #32]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	431a      	orrs	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80b1 	beq.w	8002862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002700:	4b4d      	ldr	r3, [pc, #308]	@ (8002838 <HAL_GPIO_Init+0x2b8>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a4c      	ldr	r2, [pc, #304]	@ (8002838 <HAL_GPIO_Init+0x2b8>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <HAL_GPIO_Init+0x2b8>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002718:	4a48      	ldr	r2, [pc, #288]	@ (800283c <HAL_GPIO_Init+0x2bc>)
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a40      	ldr	r2, [pc, #256]	@ (8002840 <HAL_GPIO_Init+0x2c0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <HAL_GPIO_Init+0x1ec>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3f      	ldr	r2, [pc, #252]	@ (8002844 <HAL_GPIO_Init+0x2c4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00d      	beq.n	8002768 <HAL_GPIO_Init+0x1e8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3e      	ldr	r2, [pc, #248]	@ (8002848 <HAL_GPIO_Init+0x2c8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <HAL_GPIO_Init+0x1e4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3d      	ldr	r2, [pc, #244]	@ (800284c <HAL_GPIO_Init+0x2cc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_GPIO_Init+0x1e0>
 800275c:	2303      	movs	r3, #3
 800275e:	e006      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 8002760:	2304      	movs	r3, #4
 8002762:	e004      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 8002764:	2302      	movs	r3, #2
 8002766:	e002      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_GPIO_Init+0x1ee>
 800276c:	2300      	movs	r3, #0
 800276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002770:	f002 0203 	and.w	r2, r2, #3
 8002774:	0092      	lsls	r2, r2, #2
 8002776:	4093      	lsls	r3, r2
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800277e:	492f      	ldr	r1, [pc, #188]	@ (800283c <HAL_GPIO_Init+0x2bc>)
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	492c      	ldr	r1, [pc, #176]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4928      	ldr	r1, [pc, #160]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4922      	ldr	r1, [pc, #136]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	491e      	ldr	r1, [pc, #120]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027d8:	4013      	ands	r3, r2
 80027da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4918      	ldr	r1, [pc, #96]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4914      	ldr	r1, [pc, #80]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d021      	beq.n	8002854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002810:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	490e      	ldr	r1, [pc, #56]	@ (8002850 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e021      	b.n	8002862 <HAL_GPIO_Init+0x2e2>
 800281e:	bf00      	nop
 8002820:	10320000 	.word	0x10320000
 8002824:	10310000 	.word	0x10310000
 8002828:	10220000 	.word	0x10220000
 800282c:	10210000 	.word	0x10210000
 8002830:	10120000 	.word	0x10120000
 8002834:	10110000 	.word	0x10110000
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	40010800 	.word	0x40010800
 8002844:	40010c00 	.word	0x40010c00
 8002848:	40011000 	.word	0x40011000
 800284c:	40011400 	.word	0x40011400
 8002850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_GPIO_Init+0x304>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	43db      	mvns	r3, r3
 800285c:	4909      	ldr	r1, [pc, #36]	@ (8002884 <HAL_GPIO_Init+0x304>)
 800285e:	4013      	ands	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	3301      	adds	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	f47f ae8e 	bne.w	8002594 <HAL_GPIO_Init+0x14>
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	372c      	adds	r7, #44	@ 0x2c
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40010400 	.word	0x40010400

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e12b      	b.n	8002b22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff f930 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2224      	movs	r2, #36	@ 0x24
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800290a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800291a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800291c:	f002 fa46 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8002920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a81      	ldr	r2, [pc, #516]	@ (8002b2c <HAL_I2C_Init+0x274>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d807      	bhi.n	800293c <HAL_I2C_Init+0x84>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a80      	ldr	r2, [pc, #512]	@ (8002b30 <HAL_I2C_Init+0x278>)
 8002930:	4293      	cmp	r3, r2
 8002932:	bf94      	ite	ls
 8002934:	2301      	movls	r3, #1
 8002936:	2300      	movhi	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e006      	b.n	800294a <HAL_I2C_Init+0x92>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a7d      	ldr	r2, [pc, #500]	@ (8002b34 <HAL_I2C_Init+0x27c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	bf94      	ite	ls
 8002944:	2301      	movls	r3, #1
 8002946:	2300      	movhi	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0e7      	b.n	8002b22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4a78      	ldr	r2, [pc, #480]	@ (8002b38 <HAL_I2C_Init+0x280>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9b      	lsrs	r3, r3, #18
 800295c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a6a      	ldr	r2, [pc, #424]	@ (8002b2c <HAL_I2C_Init+0x274>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d802      	bhi.n	800298c <HAL_I2C_Init+0xd4>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	3301      	adds	r3, #1
 800298a:	e009      	b.n	80029a0 <HAL_I2C_Init+0xe8>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	4a69      	ldr	r2, [pc, #420]	@ (8002b3c <HAL_I2C_Init+0x284>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	3301      	adds	r3, #1
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	495c      	ldr	r1, [pc, #368]	@ (8002b2c <HAL_I2C_Init+0x274>)
 80029bc:	428b      	cmp	r3, r1
 80029be:	d819      	bhi.n	80029f4 <HAL_I2C_Init+0x13c>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e59      	subs	r1, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029d4:	400b      	ands	r3, r1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_I2C_Init+0x138>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1e59      	subs	r1, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ee:	e051      	b.n	8002a94 <HAL_I2C_Init+0x1dc>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e04f      	b.n	8002a94 <HAL_I2C_Init+0x1dc>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_I2C_Init+0x168>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	440b      	add	r3, r1
 8002a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e012      	b.n	8002a46 <HAL_I2C_Init+0x18e>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	0099      	lsls	r1, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Init+0x196>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e022      	b.n	8002a94 <HAL_I2C_Init+0x1dc>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_I2C_Init+0x1bc>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1e58      	subs	r0, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	440b      	add	r3, r1
 8002a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a72:	e00f      	b.n	8002a94 <HAL_I2C_Init+0x1dc>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6809      	ldr	r1, [r1, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ac2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6911      	ldr	r1, [r2, #16]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	000186a0 	.word	0x000186a0
 8002b30:	001e847f 	.word	0x001e847f
 8002b34:	003d08ff 	.word	0x003d08ff
 8002b38:	431bde83 	.word	0x431bde83
 8002b3c:	10624dd3 	.word	0x10624dd3

08002b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0e8      	b.n	8002d24 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f007 fdb2 	bl	800a6d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fc6f 	bl	8006462 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8e:	f003 fc45 	bl	800641c <USB_CoreInit>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0bf      	b.n	8002d24 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fc73 	bl	8006496 <USB_SetCurrentMode>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0b0      	b.n	8002d24 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e03e      	b.n	8002c46 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3311      	adds	r3, #17
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3310      	adds	r3, #16
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3313      	adds	r3, #19
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	3320      	adds	r3, #32
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3324      	adds	r3, #36	@ 0x24
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	3301      	adds	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	791b      	ldrb	r3, [r3, #4]
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3bb      	bcc.n	8002bc8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e044      	b.n	8002ce0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3b5      	bcc.n	8002c56 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf4:	f003 fbdb 	bl	80064ae <USB_DevInit>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00c      	b.n	8002d24 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fe5a 	bl	80089d6 <USB_DevDisconnect>

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_Start+0x16>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e016      	b.n	8002d70 <HAL_PCD_Start+0x44>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fb71 	bl	8006436 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d54:	2101      	movs	r1, #1
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f007 ff2d 	bl	800abb6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f005 fe2e 	bl	80089c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f005 fe30 	bl	80089ea <USB_ReadInterrupts>
 8002d8a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fb1a 	bl	80033d0 <PCD_EP_ISR_Handler>

    return;
 8002d9c:	e119      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f007 fd00 	bl	800a7c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f905 	bl	8002fd8 <HAL_PCD_SetAddress>

    return;
 8002dce:	e100      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dec:	b292      	uxth	r2, r2
 8002dee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002df2:	e0ee      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e16:	e0dc      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d027      	beq.n	8002e72 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0204 	bic.w	r2, r2, #4
 8002e34:	b292      	uxth	r2, r2
 8002e36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f007 fcf0 	bl	800a838 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e70:	e0af      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8083 	beq.w	8002f84 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e010      	b.n	8002ea6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	441a      	add	r2, r3
 8002e90:	7ffb      	ldrb	r3, [r7, #31]
 8002e92:	8812      	ldrh	r2, [r2, #0]
 8002e94:	b292      	uxth	r2, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3320      	adds	r3, #32
 8002e9a:	443b      	add	r3, r7
 8002e9c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	2b07      	cmp	r3, #7
 8002eaa:	d9eb      	bls.n	8002e84 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002edc:	bf00      	nop
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f6      	beq.n	8002ede <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e00f      	b.n	8002f2e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4611      	mov	r1, r2
 8002f16:	7ffa      	ldrb	r2, [r7, #31]
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	440a      	add	r2, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3320      	adds	r3, #32
 8002f20:	443b      	add	r3, r7
 8002f22:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b07      	cmp	r3, #7
 8002f32:	d9ec      	bls.n	8002f0e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0208 	orr.w	r2, r2, #8
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	b292      	uxth	r2, r2
 8002f78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f007 fc41 	bl	800a804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f82:	e026      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00f      	beq.n	8002fae <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f007 fbff 	bl	800a7aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fac:	e011      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_SetAddress+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e012      	b.n	8003018 <HAL_PCD_SetAddress+0x40>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f005 fcc7 	bl	800899c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	70fb      	strb	r3, [r7, #3]
 8003032:	460b      	mov	r3, r1
 8003034:	803b      	strh	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0e      	bge.n	8003064 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	705a      	strb	r2, [r3, #1]
 8003062:	e00e      	b.n	8003082 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800308e:	883a      	ldrh	r2, [r7, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	78ba      	ldrb	r2, [r7, #2]
 8003098:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800309a:	78bb      	ldrb	r3, [r7, #2]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d102      	bne.n	80030a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_EP_Open+0x94>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e00e      	b.n	80030d2 <HAL_PCD_EP_Open+0xb2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fa10 	bl	80064e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80030d0:	7afb      	ldrb	r3, [r7, #11]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da0e      	bge.n	800310c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	3310      	adds	r3, #16
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	705a      	strb	r2, [r3, #1]
 800310a:	e00e      	b.n	800312a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 0207 	and.w	r2, r3, #7
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_PCD_EP_Close+0x6a>
 8003140:	2302      	movs	r3, #2
 8003142:	e00e      	b.n	8003162 <HAL_PCD_EP_Close+0x88>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 fd88 	bl	8006c68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	460b      	mov	r3, r1
 8003178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0207 	and.w	r2, r3, #7
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2200      	movs	r2, #0
 80031a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031aa:	7afb      	ldrb	r3, [r7, #11]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 ff3f 	bl	8007040 <USB_EPStartXfer>

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 0207 	and.w	r2, r3, #7
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	460b      	mov	r3, r1
 8003208:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320a:	7afb      	ldrb	r3, [r7, #11]
 800320c:	f003 0207 	and.w	r2, r3, #7
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	3310      	adds	r3, #16
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	b2da      	uxtb	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 fef1 	bl	8007040 <USB_EPStartXfer>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	7912      	ldrb	r2, [r2, #4]
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e04c      	b.n	8003320 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da0e      	bge.n	80032ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 0207 	and.w	r2, r3, #7
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3310      	adds	r3, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	705a      	strb	r2, [r3, #1]
 80032aa:	e00c      	b.n	80032c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_PCD_EP_SetStall+0x7e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e01c      	b.n	8003320 <HAL_PCD_EP_SetStall+0xb8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 fa54 	bl	80087a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	2b00      	cmp	r3, #0
 8003302:	d108      	bne.n	8003316 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f005 fb79 	bl	8008a08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	7912      	ldrb	r2, [r2, #4]
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e040      	b.n	80033c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800334a:	2b00      	cmp	r3, #0
 800334c:	da0e      	bge.n	800336c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 0207 	and.w	r2, r3, #7
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	3310      	adds	r3, #16
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	705a      	strb	r2, [r3, #1]
 800336a:	e00e      	b.n	800338a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 0207 	and.w	r2, r3, #7
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_EP_ClrStall+0x82>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e00e      	b.n	80033c8 <HAL_PCD_EP_ClrStall+0xa0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68f9      	ldr	r1, [r7, #12]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f005 fa42 	bl	8008842 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b096      	sub	sp, #88	@ 0x58
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033d8:	e3bb      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80033f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f040 8175 	bne.w	80036e8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d14e      	bne.n	80034a8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	81fb      	strh	r3, [r7, #14]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3310      	adds	r3, #16
 8003432:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	3302      	adds	r3, #2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	441a      	add	r2, r3
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800346e:	2100      	movs	r1, #0
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f007 f980 	bl	800a776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7b5b      	ldrb	r3, [r3, #13]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8368 	beq.w	8003b52 <PCD_EP_ISR_Handler+0x782>
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8363 	bne.w	8003b52 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7b5b      	ldrb	r3, [r3, #13]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	735a      	strb	r2, [r3, #13]
 80034a6:	e354      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034ae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d034      	beq.n	8003530 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	3306      	adds	r3, #6
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80034fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003504:	b29b      	uxth	r3, r3
 8003506:	f005 fad0 	bl	8008aaa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29a      	uxth	r2, r3
 8003512:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003516:	4013      	ands	r3, r2
 8003518:	823b      	strh	r3, [r7, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	8a3a      	ldrh	r2, [r7, #16]
 8003520:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003524:	b292      	uxth	r2, r2
 8003526:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f007 f8f7 	bl	800a71c <HAL_PCD_SetupStageCallback>
 800352e:	e310      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003530:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003534:	2b00      	cmp	r3, #0
 8003536:	f280 830c 	bge.w	8003b52 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29a      	uxth	r2, r3
 8003542:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003546:	4013      	ands	r3, r2
 8003548:	83fb      	strh	r3, [r7, #30]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	8bfa      	ldrh	r2, [r7, #30]
 8003550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003554:	b292      	uxth	r2, r2
 8003556:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	3306      	adds	r3, #6
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003582:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d019      	beq.n	80035c0 <PCD_EP_ISR_Handler+0x1f0>
 800358c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359a:	6959      	ldr	r1, [r3, #20]
 800359c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f005 fa80 	bl	8008aaa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	441a      	add	r2, r3
 80035b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035b8:	2100      	movs	r1, #0
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f007 f8c0 	bl	800a740 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 82bd 	bne.w	8003b52 <PCD_EP_ISR_Handler+0x782>
 80035d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035dc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035e4:	f000 82b5 	beq.w	8003b52 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003612:	b29a      	uxth	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b3e      	cmp	r3, #62	@ 0x3e
 800361e:	d91d      	bls.n	800365c <PCD_EP_ISR_Handler+0x28c>
 8003620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <PCD_EP_ISR_Handler+0x26a>
 8003634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003636:	3b01      	subs	r3, #1
 8003638:	647b      	str	r3, [r7, #68]	@ 0x44
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29a      	uxth	r2, r3
 8003640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003642:	b29b      	uxth	r3, r3
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	b29b      	uxth	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003654:	b29a      	uxth	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	e026      	b.n	80036aa <PCD_EP_ISR_Handler+0x2da>
 800365c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <PCD_EP_ISR_Handler+0x2aa>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003672:	b29a      	uxth	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	801a      	strh	r2, [r3, #0]
 8003678:	e017      	b.n	80036aa <PCD_EP_ISR_Handler+0x2da>
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	647b      	str	r3, [r7, #68]	@ 0x44
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <PCD_EP_ISR_Handler+0x2c4>
 800368e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003690:	3301      	adds	r3, #1
 8003692:	647b      	str	r3, [r7, #68]	@ 0x44
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29a      	uxth	r2, r3
 800369a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369c:	b29b      	uxth	r3, r3
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ba:	827b      	strh	r3, [r7, #18]
 80036bc:	8a7b      	ldrh	r3, [r7, #18]
 80036be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036c2:	827b      	strh	r3, [r7, #18]
 80036c4:	8a7b      	ldrh	r3, [r7, #18]
 80036c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036ca:	827b      	strh	r3, [r7, #18]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	8a7b      	ldrh	r3, [r7, #18]
 80036d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8013      	strh	r3, [r2, #0]
 80036e6:	e234      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003700:	2b00      	cmp	r3, #0
 8003702:	f280 80fc 	bge.w	80038fe <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29a      	uxth	r2, r3
 8003718:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800371c:	4013      	ands	r3, r2
 800371e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003734:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003738:	b292      	uxth	r2, r2
 800373a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800373c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003754:	7b1b      	ldrb	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d125      	bne.n	80037a6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	3306      	adds	r3, #6
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003782:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003786:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8092 	beq.w	80038b4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	6959      	ldr	r1, [r3, #20]
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	88da      	ldrh	r2, [r3, #6]
 800379c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037a0:	f005 f983 	bl	8008aaa <USB_ReadPMA>
 80037a4:	e086      	b.n	80038b4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d10a      	bne.n	80037c4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037b2:	461a      	mov	r2, r3
 80037b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9d9 	bl	8003b6e <HAL_PCD_EP_DB_Receive>
 80037bc:	4603      	mov	r3, r0
 80037be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80037c2:	e077      	b.n	80038b4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	441a      	add	r2, r3
 80037f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80037f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003800:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003804:	b29b      	uxth	r3, r3
 8003806:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d024      	beq.n	800386c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	3302      	adds	r3, #2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800384a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800384e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02e      	beq.n	80038b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385c:	6959      	ldr	r1, [r3, #20]
 800385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003860:	891a      	ldrh	r2, [r3, #8]
 8003862:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003866:	f005 f920 	bl	8008aaa <USB_ReadPMA>
 800386a:	e023      	b.n	80038b4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	3306      	adds	r3, #6
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003894:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003898:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	6959      	ldr	r1, [r3, #20]
 80038a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038aa:	895a      	ldrh	r2, [r3, #10]
 80038ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038b0:	f005 f8fb 	bl	8008aaa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038bc:	441a      	add	r2, r3
 80038be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038ca:	441a      	add	r2, r3
 80038cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <PCD_EP_ISR_Handler+0x514>
 80038d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80038dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d206      	bcs.n	80038f2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f006 ff28 	bl	800a740 <HAL_PCD_DataOutStageCallback>
 80038f0:	e005      	b.n	80038fe <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fba1 	bl	8007040 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8123 	beq.w	8003b52 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800390c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	3310      	adds	r3, #16
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	78db      	ldrb	r3, [r3, #3]
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 80a2 	bne.w	8003aaa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	7b1b      	ldrb	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8093 	beq.w	8003a9c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003976:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d046      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d126      	bne.n	80039d8 <PCD_EP_ISR_Handler+0x608>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	4413      	add	r3, r2
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	e061      	b.n	8003a9c <PCD_EP_ISR_Handler+0x6cc>
 80039d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d15d      	bne.n	8003a9c <PCD_EP_ISR_Handler+0x6cc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	4413      	add	r3, r2
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	011a      	lsls	r2, r3, #4
 80039fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a00:	4413      	add	r3, r2
 8003a02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e045      	b.n	8003a9c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d126      	bne.n	8003a6c <PCD_EP_ISR_Handler+0x69c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a32:	4413      	add	r3, r2
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	011a      	lsls	r2, r3, #4
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	4413      	add	r3, r2
 8003a40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	e017      	b.n	8003a9c <PCD_EP_ISR_Handler+0x6cc>
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d113      	bne.n	8003a9c <PCD_EP_ISR_Handler+0x6cc>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a82:	4413      	add	r3, r2
 8003a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	011a      	lsls	r2, r3, #4
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8e:	4413      	add	r3, r2
 8003a90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	2200      	movs	r2, #0
 8003a9a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f006 fe67 	bl	800a776 <HAL_PCD_DataInStageCallback>
 8003aa8:	e053      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d146      	bne.n	8003b44 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3302      	adds	r3, #2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ade:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d907      	bls.n	8003afe <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afa:	619a      	str	r2, [r3, #24]
 8003afc:	e002      	b.n	8003b04 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f006 fe2f 	bl	800a776 <HAL_PCD_DataInStageCallback>
 8003b18:	e01b      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b22:	441a      	add	r2, r3
 8003b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b26:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b30:	441a      	add	r2, r3
 8003b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b34:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fa7f 	bl	8007040 <USB_EPStartXfer>
 8003b42:	e006      	b.n	8003b52 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f91b 	bl	8003d88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f6ff ac3b 	blt.w	80033da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3758      	adds	r7, #88	@ 0x58
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b088      	sub	sp, #32
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d07e      	beq.n	8003c84 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	8b7b      	ldrh	r3, [r7, #26]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d306      	bcc.n	8003bc8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	8b7b      	ldrh	r3, [r7, #26]
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	e002      	b.n	8003bce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d123      	bne.n	8003c1e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf0:	833b      	strh	r3, [r7, #24]
 8003bf2:	8b3b      	ldrh	r3, [r7, #24]
 8003bf4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bf8:	833b      	strh	r3, [r7, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8b3b      	ldrh	r3, [r7, #24]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01f      	beq.n	8003c68 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	82fb      	strh	r3, [r7, #22]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c68:	8b7b      	ldrh	r3, [r7, #26]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8087 	beq.w	8003d7e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6959      	ldr	r1, [r3, #20]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	891a      	ldrh	r2, [r3, #8]
 8003c7c:	8b7b      	ldrh	r3, [r7, #26]
 8003c7e:	f004 ff14 	bl	8008aaa <USB_ReadPMA>
 8003c82:	e07c      	b.n	8003d7e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	3306      	adds	r3, #6
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	8b7b      	ldrh	r3, [r7, #26]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d306      	bcc.n	8003cc6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	8b7b      	ldrh	r3, [r7, #26]
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	e002      	b.n	8003ccc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d123      	bne.n	8003d1c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cee:	83fb      	strh	r3, [r7, #30]
 8003cf0:	8bfb      	ldrh	r3, [r7, #30]
 8003cf2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cf6:	83fb      	strh	r3, [r7, #30]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	441a      	add	r2, r3
 8003d06:	8bfb      	ldrh	r3, [r7, #30]
 8003d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11f      	bne.n	8003d66 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d40:	83bb      	strh	r3, [r7, #28]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	8bbb      	ldrh	r3, [r7, #28]
 8003d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d66:	8b7b      	ldrh	r3, [r7, #26]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6959      	ldr	r1, [r3, #20]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	895a      	ldrh	r2, [r3, #10]
 8003d78:	8b7b      	ldrh	r3, [r7, #26]
 8003d7a:	f004 fe96 	bl	8008aaa <USB_ReadPMA>
    }
  }

  return count;
 8003d7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0a4      	sub	sp, #144	@ 0x90
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 81dd 	beq.w	800415c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	3302      	adds	r3, #2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d907      	bls.n	8003dea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003de2:	1ad2      	subs	r2, r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	619a      	str	r2, [r3, #24]
 8003de8:	e002      	b.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 80b9 	bne.w	8003f6c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d126      	bne.n	8003e50 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e16:	4413      	add	r3, r2
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	011a      	lsls	r2, r3, #4
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	4413      	add	r3, r2
 8003e24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	e01a      	b.n	8003e86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	785b      	ldrb	r3, [r3, #1]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d116      	bne.n	8003e86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6c:	4413      	add	r3, r2
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	011a      	lsls	r2, r3, #4
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	4413      	add	r3, r2
 8003e7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e82:	2200      	movs	r2, #0
 8003e84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d126      	bne.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	011a      	lsls	r2, r3, #4
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	e017      	b.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d113      	bne.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	4413      	add	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	4413      	add	r3, r2
 8003f06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f006 fc2c 	bl	800a776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 82fc 	beq.w	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f44:	82fb      	strh	r3, [r7, #22]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	8afb      	ldrh	r3, [r7, #22]
 8003f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]
 8003f6a:	e2da      	b.n	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d021      	beq.n	8003fba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f040 82ae 	bne.w	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fce:	441a      	add	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fdc:	441a      	add	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d30b      	bcc.n	8004006 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ffe:	1ad2      	subs	r2, r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	621a      	str	r2, [r3, #32]
 8004004:	e017      	b.n	8004036 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800400e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800401e:	e00a      	b.n	8004036 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d165      	bne.n	800410a <HAL_PCD_EP_DB_Transmit+0x382>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004052:	4413      	add	r3, r2
 8004054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	011a      	lsls	r2, r3, #4
 800405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405e:	4413      	add	r3, r2
 8004060:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004064:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004070:	b29a      	uxth	r2, r3
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407a:	2b3e      	cmp	r3, #62	@ 0x3e
 800407c:	d91d      	bls.n	80040ba <HAL_PCD_EP_DB_Transmit+0x332>
 800407e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <HAL_PCD_EP_DB_Transmit+0x310>
 8004092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004094:	3b01      	subs	r3, #1
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29a      	uxth	r2, r3
 800409e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	029b      	lsls	r3, r3, #10
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e044      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x350>
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e035      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80040ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ee:	3301      	adds	r3, #1
 80040f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	b29b      	uxth	r3, r3
 8004100:	4313      	orrs	r3, r2
 8004102:	b29a      	uxth	r2, r3
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	e01c      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d118      	bne.n	8004144 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	647b      	str	r3, [r7, #68]	@ 0x44
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004126:	4413      	add	r3, r2
 8004128:	647b      	str	r3, [r7, #68]	@ 0x44
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	011a      	lsls	r2, r3, #4
 8004130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004132:	4413      	add	r3, r2
 8004134:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004138:	643b      	str	r3, [r7, #64]	@ 0x40
 800413a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413e:	b29a      	uxth	r2, r3
 8004140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004142:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6959      	ldr	r1, [r3, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	891a      	ldrh	r2, [r3, #8]
 8004150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004154:	b29b      	uxth	r3, r3
 8004156:	f004 fc62 	bl	8008a1e <USB_WritePMA>
 800415a:	e1e2      	b.n	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	3306      	adds	r3, #6
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004184:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004190:	429a      	cmp	r2, r3
 8004192:	d307      	bcc.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800419c:	1ad2      	subs	r2, r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	619a      	str	r2, [r3, #24]
 80041a2:	e002      	b.n	80041aa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2200      	movs	r2, #0
 80041a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 80c0 	bne.w	8004334 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d126      	bne.n	800420a <HAL_PCD_EP_DB_Transmit+0x482>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041d0:	4413      	add	r3, r2
 80041d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	011a      	lsls	r2, r3, #4
 80041da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041dc:	4413      	add	r3, r2
 80041de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004202:	b29a      	uxth	r2, r3
 8004204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e01a      	b.n	8004240 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d116      	bne.n	8004240 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	667b      	str	r3, [r7, #100]	@ 0x64
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004226:	4413      	add	r3, r2
 8004228:	667b      	str	r3, [r7, #100]	@ 0x64
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	011a      	lsls	r2, r3, #4
 8004230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004232:	4413      	add	r3, r2
 8004234:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004238:	663b      	str	r3, [r7, #96]	@ 0x60
 800423a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800423c:	2200      	movs	r2, #0
 800423e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	677b      	str	r3, [r7, #116]	@ 0x74
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12b      	bne.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425c:	b29b      	uxth	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004262:	4413      	add	r3, r2
 8004264:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	011a      	lsls	r2, r3, #4
 800426c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426e:	4413      	add	r3, r2
 8004270:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004284:	b29a      	uxth	r2, r3
 8004286:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429c:	b29a      	uxth	r2, r3
 800429e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e017      	b.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d113      	bne.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042bc:	4413      	add	r3, r2
 80042be:	677b      	str	r3, [r7, #116]	@ 0x74
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	011a      	lsls	r2, r3, #4
 80042c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80042d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f006 fa4a 	bl	800a776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 811a 	bne.w	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004308:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004326:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800432a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]
 8004332:	e0f6      	b.n	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d121      	bne.n	8004382 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004358:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800436e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004376:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800437a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437e:	b29b      	uxth	r3, r3
 8004380:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004388:	2b01      	cmp	r3, #1
 800438a:	f040 80ca 	bne.w	8004522 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004396:	441a      	add	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043a4:	441a      	add	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6a1a      	ldr	r2, [r3, #32]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d30b      	bcc.n	80043ce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c6:	1ad2      	subs	r2, r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	e017      	b.n	80043fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d108      	bne.n	80043e8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043e6:	e00a      	b.n	80043fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2200      	movs	r2, #0
 80043f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	657b      	str	r3, [r7, #84]	@ 0x54
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d165      	bne.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x750>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004420:	4413      	add	r3, r2
 8004422:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	011a      	lsls	r2, r3, #4
 800442a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800442c:	4413      	add	r3, r2
 800442e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443e:	b29a      	uxth	r2, r3
 8004440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004448:	2b3e      	cmp	r3, #62	@ 0x3e
 800444a:	d91d      	bls.n	8004488 <HAL_PCD_EP_DB_Transmit+0x700>
 800444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004462:	3b01      	subs	r3, #1
 8004464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29a      	uxth	r2, r3
 800446c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800446e:	b29b      	uxth	r3, r3
 8004470:	029b      	lsls	r3, r3, #10
 8004472:	b29b      	uxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004480:	b29a      	uxth	r2, r3
 8004482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	e041      	b.n	800450c <HAL_PCD_EP_DB_Transmit+0x784>
 8004488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004490:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e032      	b.n	800450c <HAL_PCD_EP_DB_Transmit+0x784>
 80044a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x738>
 80044ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044bc:	3301      	adds	r3, #1
 80044be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	4313      	orrs	r3, r2
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	e019      	b.n	800450c <HAL_PCD_EP_DB_Transmit+0x784>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d115      	bne.n	800450c <HAL_PCD_EP_DB_Transmit+0x784>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ee:	4413      	add	r3, r2
 80044f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011a      	lsls	r2, r3, #4
 80044f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fa:	4413      	add	r3, r2
 80044fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
 8004502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004506:	b29a      	uxth	r2, r3
 8004508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800450a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6959      	ldr	r1, [r3, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	895a      	ldrh	r2, [r3, #10]
 8004518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451c:	b29b      	uxth	r3, r3
 800451e:	f004 fa7e 	bl	8008a1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800453c:	82bb      	strh	r3, [r7, #20]
 800453e:	8abb      	ldrh	r3, [r7, #20]
 8004540:	f083 0310 	eor.w	r3, r3, #16
 8004544:	82bb      	strh	r3, [r7, #20]
 8004546:	8abb      	ldrh	r3, [r7, #20]
 8004548:	f083 0320 	eor.w	r3, r3, #32
 800454c:	82bb      	strh	r3, [r7, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8abb      	ldrh	r3, [r7, #20]
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3790      	adds	r7, #144	@ 0x90
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	817b      	strh	r3, [r7, #10]
 800458a:	4613      	mov	r3, r2
 800458c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800458e:	897b      	ldrh	r3, [r7, #10]
 8004590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800459a:	897b      	ldrh	r3, [r7, #10]
 800459c:	f003 0207 	and.w	r2, r3, #7
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	3310      	adds	r3, #16
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e009      	b.n	80045c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045b2:	897a      	ldrh	r2, [r7, #10]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045c6:	893b      	ldrh	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	80da      	strh	r2, [r3, #6]
 80045da:	e00b      	b.n	80045f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2201      	movs	r2, #1
 80045e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004604:	4b03      	ldr	r3, [pc, #12]	@ (8004614 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	420e0020 	.word	0x420e0020

08004618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e272      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8087 	beq.w	8004746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004638:	4b92      	ldr	r3, [pc, #584]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b04      	cmp	r3, #4
 8004642:	d00c      	beq.n	800465e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004644:	4b8f      	ldr	r3, [pc, #572]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b08      	cmp	r3, #8
 800464e:	d112      	bne.n	8004676 <HAL_RCC_OscConfig+0x5e>
 8004650:	4b8c      	ldr	r3, [pc, #560]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465c:	d10b      	bne.n	8004676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465e:	4b89      	ldr	r3, [pc, #548]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d06c      	beq.n	8004744 <HAL_RCC_OscConfig+0x12c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d168      	bne.n	8004744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e24c      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x76>
 8004680:	4b80      	ldr	r3, [pc, #512]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7f      	ldr	r2, [pc, #508]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e02e      	b.n	80046ec <HAL_RCC_OscConfig+0xd4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x98>
 8004696:	4b7b      	ldr	r3, [pc, #492]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7a      	ldr	r2, [pc, #488]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 800469c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b78      	ldr	r3, [pc, #480]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a77      	ldr	r2, [pc, #476]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e01d      	b.n	80046ec <HAL_RCC_OscConfig+0xd4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0xbc>
 80046ba:	4b72      	ldr	r3, [pc, #456]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a71      	ldr	r2, [pc, #452]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e00b      	b.n	80046ec <HAL_RCC_OscConfig+0xd4>
 80046d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4b68      	ldr	r3, [pc, #416]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a67      	ldr	r2, [pc, #412]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fd fd56 	bl	80021a4 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fd fd52 	bl	80021a4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	@ 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e200      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b5d      	ldr	r3, [pc, #372]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0xe4>
 800471a:	e014      	b.n	8004746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd fd42 	bl	80021a4 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fd fd3e 	bl	80021a4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	@ 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1ec      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x10c>
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d063      	beq.n	800481a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004752:	4b4c      	ldr	r3, [pc, #304]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800475e:	4b49      	ldr	r3, [pc, #292]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b08      	cmp	r3, #8
 8004768:	d11c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x18c>
 800476a:	4b46      	ldr	r3, [pc, #280]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d116      	bne.n	80047a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	4b43      	ldr	r3, [pc, #268]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_RCC_OscConfig+0x176>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e1c0      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478e:	4b3d      	ldr	r3, [pc, #244]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4939      	ldr	r1, [pc, #228]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a2:	e03a      	b.n	800481a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ac:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <HAL_RCC_OscConfig+0x270>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fd fcf7 	bl	80021a4 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fd fcf3 	bl	80021a4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e1a1      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4927      	ldr	r1, [pc, #156]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	600b      	str	r3, [r1, #0]
 80047ec:	e015      	b.n	800481a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b26      	ldr	r3, [pc, #152]	@ (8004888 <HAL_RCC_OscConfig+0x270>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd fcd6 	bl	80021a4 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fc:	f7fd fcd2 	bl	80021a4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e180      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480e:	4b1d      	ldr	r3, [pc, #116]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d03a      	beq.n	800489c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d019      	beq.n	8004862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800482e:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_RCC_OscConfig+0x274>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004834:	f7fd fcb6 	bl	80021a4 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483c:	f7fd fcb2 	bl	80021a4 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e160      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800485a:	2001      	movs	r0, #1
 800485c:	f000 face 	bl	8004dfc <RCC_Delay>
 8004860:	e01c      	b.n	800489c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <HAL_RCC_OscConfig+0x274>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004868:	f7fd fc9c 	bl	80021a4 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486e:	e00f      	b.n	8004890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004870:	f7fd fc98 	bl	80021a4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d908      	bls.n	8004890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e146      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	42420000 	.word	0x42420000
 800488c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b92      	ldr	r3, [pc, #584]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e9      	bne.n	8004870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a6 	beq.w	80049f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b8b      	ldr	r3, [pc, #556]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10d      	bne.n	80048d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4a87      	ldr	r2, [pc, #540]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	61d3      	str	r3, [r2, #28]
 80048c6:	4b85      	ldr	r3, [pc, #532]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b82      	ldr	r3, [pc, #520]	@ (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd fc59 	bl	80021a4 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fd fc55 	bl	80021a4 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	@ 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e103      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b75      	ldr	r3, [pc, #468]	@ (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x312>
 800491c:	4b6f      	ldr	r3, [pc, #444]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4a6e      	ldr	r2, [pc, #440]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6213      	str	r3, [r2, #32]
 8004928:	e02d      	b.n	8004986 <HAL_RCC_OscConfig+0x36e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x334>
 8004932:	4b6a      	ldr	r3, [pc, #424]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4a69      	ldr	r2, [pc, #420]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	6213      	str	r3, [r2, #32]
 800493e:	4b67      	ldr	r3, [pc, #412]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	4a66      	ldr	r2, [pc, #408]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	6213      	str	r3, [r2, #32]
 800494a:	e01c      	b.n	8004986 <HAL_RCC_OscConfig+0x36e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b05      	cmp	r3, #5
 8004952:	d10c      	bne.n	800496e <HAL_RCC_OscConfig+0x356>
 8004954:	4b61      	ldr	r3, [pc, #388]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4a60      	ldr	r2, [pc, #384]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	6213      	str	r3, [r2, #32]
 8004960:	4b5e      	ldr	r3, [pc, #376]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4a5d      	ldr	r2, [pc, #372]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6213      	str	r3, [r2, #32]
 800496c:	e00b      	b.n	8004986 <HAL_RCC_OscConfig+0x36e>
 800496e:	4b5b      	ldr	r3, [pc, #364]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4a5a      	ldr	r2, [pc, #360]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6213      	str	r3, [r2, #32]
 800497a:	4b58      	ldr	r3, [pc, #352]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	4a57      	ldr	r2, [pc, #348]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d015      	beq.n	80049ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7fd fc09 	bl	80021a4 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fd fc05 	bl	80021a4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e0b1      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ac:	4b4b      	ldr	r3, [pc, #300]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ee      	beq.n	8004996 <HAL_RCC_OscConfig+0x37e>
 80049b8:	e014      	b.n	80049e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fd fbf3 	bl	80021a4 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd fbef 	bl	80021a4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e09b      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d8:	4b40      	ldr	r3, [pc, #256]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ee      	bne.n	80049c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d105      	bne.n	80049f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ea:	4b3c      	ldr	r3, [pc, #240]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4a3b      	ldr	r2, [pc, #236]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8087 	beq.w	8004b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a00:	4b36      	ldr	r3, [pc, #216]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d061      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d146      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a14:	4b33      	ldr	r3, [pc, #204]	@ (8004ae4 <HAL_RCC_OscConfig+0x4cc>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fbc3 	bl	80021a4 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fd fbbf 	bl	80021a4 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e06d      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a34:	4b29      	ldr	r3, [pc, #164]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a48:	d108      	bne.n	8004a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4921      	ldr	r1, [pc, #132]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a19      	ldr	r1, [r3, #32]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	491b      	ldr	r1, [pc, #108]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <HAL_RCC_OscConfig+0x4cc>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fb93 	bl	80021a4 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd fb8f 	bl	80021a4 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e03d      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x46a>
 8004aa0:	e035      	b.n	8004b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_RCC_OscConfig+0x4cc>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fb7c 	bl	80021a4 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fb78 	bl	80021a4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e026      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x498>
 8004ace:	e01e      	b.n	8004b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e019      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <HAL_RCC_OscConfig+0x500>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0d0      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b6a      	ldr	r3, [pc, #424]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d910      	bls.n	8004b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 0207 	bic.w	r2, r3, #7
 8004b46:	4965      	ldr	r1, [pc, #404]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b63      	ldr	r3, [pc, #396]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0b8      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b78:	4b59      	ldr	r3, [pc, #356]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a58      	ldr	r2, [pc, #352]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b90:	4b53      	ldr	r3, [pc, #332]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b9c:	4b50      	ldr	r3, [pc, #320]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	494d      	ldr	r1, [pc, #308]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d040      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d115      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07f      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	4b41      	ldr	r3, [pc, #260]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e073      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e06b      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4936      	ldr	r1, [pc, #216]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fd faca 	bl	80021a4 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fd fac6 	bl	80021a4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e053      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d210      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	4922      	ldr	r1, [pc, #136]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e032      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	4b19      	ldr	r3, [pc, #100]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4916      	ldr	r1, [pc, #88]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c96:	4b12      	ldr	r3, [pc, #72]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	490e      	ldr	r1, [pc, #56]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004caa:	f000 f821 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	490a      	ldr	r1, [pc, #40]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8004cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cc6:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <HAL_RCC_ClockConfig+0x1d0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fd fa28 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800f338 	.word	0x0800f338
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	20000004 	.word	0x20000004

08004cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x30>
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x36>
 8004d1e:	e027      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d20:	4b19      	ldr	r3, [pc, #100]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d22:	613b      	str	r3, [r7, #16]
      break;
 8004d24:	e027      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	0c9b      	lsrs	r3, r3, #18
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d30:	5cd3      	ldrb	r3, [r2, r3]
 8004d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d3e:	4b11      	ldr	r3, [pc, #68]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	0c5b      	lsrs	r3, r3, #17
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	4a11      	ldr	r2, [pc, #68]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a0d      	ldr	r2, [pc, #52]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d52:	fb03 f202 	mul.w	r2, r3, r2
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e004      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0c      	ldr	r2, [pc, #48]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	613b      	str	r3, [r7, #16]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d72:	613b      	str	r3, [r7, #16]
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	693b      	ldr	r3, [r7, #16]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	007a1200 	.word	0x007a1200
 8004d8c:	0800f350 	.word	0x0800f350
 8004d90:	0800f360 	.word	0x0800f360
 8004d94:	003d0900 	.word	0x003d0900

08004d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	20000000 	.word	0x20000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004db0:	f7ff fff2 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	0800f348 	.word	0x0800f348

08004dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd8:	f7ff ffde 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0adb      	lsrs	r3, r3, #11
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	@ (8004df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	0800f348 	.word	0x0800f348

08004dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <RCC_Delay+0x34>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a0a      	ldr	r2, [pc, #40]	@ (8004e34 <RCC_Delay+0x38>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	0a5b      	lsrs	r3, r3, #9
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e18:	bf00      	nop
  }
  while (Delay --);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1e5a      	subs	r2, r3, #1
 8004e1e:	60fa      	str	r2, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f9      	bne.n	8004e18 <RCC_Delay+0x1c>
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	20000000 	.word	0x20000000
 8004e34:	10624dd3 	.word	0x10624dd3

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d07d      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e54:	2300      	movs	r3, #0
 8004e56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e58:	4b4f      	ldr	r3, [pc, #316]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e64:	4b4c      	ldr	r3, [pc, #304]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	4a4b      	ldr	r2, [pc, #300]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	61d3      	str	r3, [r2, #28]
 8004e70:	4b49      	ldr	r3, [pc, #292]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	4b46      	ldr	r3, [pc, #280]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d118      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8c:	4b43      	ldr	r3, [pc, #268]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a42      	ldr	r2, [pc, #264]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e98:	f7fd f984 	bl	80021a4 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fd f980 	bl	80021a4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	@ 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e06d      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ebe:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d02e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d027      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004edc:	4b2e      	ldr	r3, [pc, #184]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eec:	4b2c      	ldr	r3, [pc, #176]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ef2:	4a29      	ldr	r2, [pc, #164]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d014      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fd f94f 	bl	80021a4 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0a:	f7fd f94b 	bl	80021a4 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e036      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ee      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4917      	ldr	r1, [pc, #92]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f44:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	490b      	ldr	r1, [pc, #44]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4904      	ldr	r1, [pc, #16]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42420440 	.word	0x42420440

08004fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	f200 808a 	bhi.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d045      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d075      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004fda:	e082      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004fdc:	4b46      	ldr	r3, [pc, #280]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fe2:	4b45      	ldr	r3, [pc, #276]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07b      	beq.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4a41      	ldr	r2, [pc, #260]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d015      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005006:	4b3c      	ldr	r3, [pc, #240]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	0c5b      	lsrs	r3, r3, #17
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	4a3b      	ldr	r2, [pc, #236]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005012:	5cd3      	ldrb	r3, [r2, r3]
 8005014:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005020:	4a38      	ldr	r2, [pc, #224]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	fbb2 f2f3 	udiv	r2, r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	e004      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4a34      	ldr	r2, [pc, #208]	@ (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800503c:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005048:	d102      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
      break;
 800504e:	e04a      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4a2d      	ldr	r2, [pc, #180]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
      break;
 800505e:	e042      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005060:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005070:	d108      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800507c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e01f      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508e:	d109      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005090:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800509c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e00f      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ae:	d11c      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80050b0:	4b11      	ldr	r3, [pc, #68]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d016      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80050bc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80050c0:	61bb      	str	r3, [r7, #24]
      break;
 80050c2:	e012      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80050c4:	e011      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050c6:	f7ff fe85 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	0b9b      	lsrs	r3, r3, #14
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	61bb      	str	r3, [r7, #24]
      break;
 80050e0:	e004      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050e2:	bf00      	nop
 80050e4:	e002      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050ea:	bf00      	nop
    }
  }
  return (frequency);
 80050ec:	69bb      	ldr	r3, [r7, #24]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800f364 	.word	0x0800f364
 8005100:	0800f374 	.word	0x0800f374
 8005104:	007a1200 	.word	0x007a1200
 8005108:	003d0900 	.word	0x003d0900
 800510c:	aaaaaaab 	.word	0xaaaaaaab

08005110 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e07a      	b.n	800521c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7c5b      	ldrb	r3, [r3, #17]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fd54 	bl	8001be4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9be 	bl	80054c4 <HAL_RTC_WaitForSynchro>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2204      	movs	r2, #4
 8005152:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e061      	b.n	800521c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa77 	bl	800564c <RTC_EnterInitMode>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e056      	b.n	800521c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0207 	bic.w	r2, r2, #7
 800517c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005186:	4b27      	ldr	r3, [pc, #156]	@ (8005224 <HAL_RTC_Init+0x114>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	4a26      	ldr	r2, [pc, #152]	@ (8005224 <HAL_RTC_Init+0x114>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005192:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_RTC_Init+0x114>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4921      	ldr	r1, [pc, #132]	@ (8005224 <HAL_RTC_Init+0x114>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d003      	beq.n	80051b6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e00e      	b.n	80051d4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80051b6:	2001      	movs	r0, #1
 80051b8:	f7ff fef4 	bl	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051bc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2204      	movs	r2, #4
 80051c8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e026      	b.n	800521c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	0c1a      	lsrs	r2, r3, #16
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f002 020f 	and.w	r2, r2, #15
 80051e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	b292      	uxth	r2, r2
 80051ea:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa55 	bl	800569c <RTC_ExitInitMode>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2204      	movs	r2, #4
 80051fc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00c      	b.n	800521c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800521a:	2300      	movs	r3, #0
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40006c00 	.word	0x40006c00

08005228 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_RTC_SetTime+0x20>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e080      	b.n	800534e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	7c1b      	ldrb	r3, [r3, #16]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_RTC_SetTime+0x30>
 8005254:	2302      	movs	r3, #2
 8005256:	e07a      	b.n	800534e <HAL_RTC_SetTime+0x126>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2202      	movs	r2, #2
 8005262:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d113      	bne.n	8005292 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005274:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	4619      	mov	r1, r3
 800527e:	460b      	mov	r3, r1
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005286:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800528c:	4413      	add	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e01e      	b.n	80052d0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fa28 	bl	80056ec <RTC_Bcd2ToByte>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80052a4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fa1d 	bl	80056ec <RTC_Bcd2ToByte>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	4613      	mov	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80052be:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	789b      	ldrb	r3, [r3, #2]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fa11 	bl	80056ec <RTC_Bcd2ToByte>
 80052ca:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80052cc:	4423      	add	r3, r4
 80052ce:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80052d0:	6979      	ldr	r1, [r7, #20]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f953 	bl	800557e <RTC_WriteTimeCounter>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2204      	movs	r2, #4
 80052e2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e02f      	b.n	800534e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0205 	bic.w	r2, r2, #5
 80052fc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f964 	bl	80055cc <RTC_ReadAlarmCounter>
 8005304:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d018      	beq.n	8005340 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	429a      	cmp	r2, r3
 8005314:	d214      	bcs.n	8005340 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800531c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005320:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005322:	6939      	ldr	r1, [r7, #16]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f96a 	bl	80055fe <RTC_WriteAlarmCounter>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2204      	movs	r2, #4
 8005334:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e006      	b.n	800534e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd90      	pop	{r4, r7, pc}
	...

08005358 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RTC_SetDate+0x24>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e097      	b.n	80054b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	7c1b      	ldrb	r3, [r3, #16]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_RTC_SetDate+0x34>
 8005388:	2302      	movs	r3, #2
 800538a:	e091      	b.n	80054b0 <HAL_RTC_SetDate+0x158>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2202      	movs	r2, #2
 8005396:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	78da      	ldrb	r2, [r3, #3]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	785a      	ldrb	r2, [r3, #1]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	789a      	ldrb	r2, [r3, #2]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	739a      	strb	r2, [r3, #14]
 80053b6:	e01a      	b.n	80053ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	78db      	ldrb	r3, [r3, #3]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f995 	bl	80056ec <RTC_Bcd2ToByte>
 80053c2:	4603      	mov	r3, r0
 80053c4:	461a      	mov	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f98c 	bl	80056ec <RTC_Bcd2ToByte>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	789b      	ldrb	r3, [r3, #2]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f983 	bl	80056ec <RTC_Bcd2ToByte>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461a      	mov	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	7bdb      	ldrb	r3, [r3, #15]
 80053f2:	4618      	mov	r0, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	7b59      	ldrb	r1, [r3, #13]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	7b9b      	ldrb	r3, [r3, #14]
 80053fc:	461a      	mov	r2, r3
 80053fe:	f000 f993 	bl	8005728 <RTC_WeekDayNum>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	7b1a      	ldrb	r2, [r3, #12]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f883 	bl	800551e <RTC_ReadTimeCounter>
 8005418:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4a26      	ldr	r2, [pc, #152]	@ (80054b8 <HAL_RTC_SetDate+0x160>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0adb      	lsrs	r3, r3, #11
 8005424:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b18      	cmp	r3, #24
 800542a:	d93a      	bls.n	80054a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <HAL_RTC_SetDate+0x164>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	4a22      	ldr	r2, [pc, #136]	@ (80054c0 <HAL_RTC_SetDate+0x168>)
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005442:	69f9      	ldr	r1, [r7, #28]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f89a 	bl	800557e <RTC_WriteTimeCounter>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2204      	movs	r2, #4
 8005454:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e027      	b.n	80054b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f8b3 	bl	80055cc <RTC_ReadAlarmCounter>
 8005466:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d018      	beq.n	80054a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	429a      	cmp	r2, r3
 8005476:	d214      	bcs.n	80054a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800547e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005482:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005484:	69b9      	ldr	r1, [r7, #24]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8b9 	bl	80055fe <RTC_WriteAlarmCounter>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2204      	movs	r2, #4
 8005496:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e006      	b.n	80054b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	91a2b3c5 	.word	0x91a2b3c5
 80054bc:	aaaaaaab 	.word	0xaaaaaaab
 80054c0:	00015180 	.word	0x00015180

080054c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e01d      	b.n	8005516 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0208 	bic.w	r2, r2, #8
 80054e8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80054ea:	f7fc fe5b 	bl	80021a4 <HAL_GetTick>
 80054ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80054f0:	e009      	b.n	8005506 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80054f2:	f7fc fe57 	bl	80021a4 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005500:	d901      	bls.n	8005506 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e007      	b.n	8005516 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ee      	beq.n	80054f2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	827b      	strh	r3, [r7, #18]
 800552a:	2300      	movs	r3, #0
 800552c:	823b      	strh	r3, [r7, #16]
 800552e:	2300      	movs	r3, #0
 8005530:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800554e:	8a7a      	ldrh	r2, [r7, #18]
 8005550:	8a3b      	ldrh	r3, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d008      	beq.n	8005568 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005556:	8a3b      	ldrh	r3, [r7, #16]
 8005558:	041a      	lsls	r2, r3, #16
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	b29b      	uxth	r3, r3
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e004      	b.n	8005572 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005568:	8a7b      	ldrh	r3, [r7, #18]
 800556a:	041a      	lsls	r2, r3, #16
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005572:	697b      	ldr	r3, [r7, #20]
}
 8005574:	4618      	mov	r0, r3
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f85d 	bl	800564c <RTC_EnterInitMode>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e011      	b.n	80055c2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	0c12      	lsrs	r2, r2, #16
 80055a6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	b292      	uxth	r2, r2
 80055b0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f872 	bl	800569c <RTC_ExitInitMode>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	81fb      	strh	r3, [r7, #14]
 80055d8:	2300      	movs	r3, #0
 80055da:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	041a      	lsls	r2, r3, #16
 80055f0:	89bb      	ldrh	r3, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f81d 	bl	800564c <RTC_EnterInitMode>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
 800561c:	e011      	b.n	8005642 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	0c12      	lsrs	r2, r2, #16
 8005626:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	b292      	uxth	r2, r2
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f832 	bl	800569c <RTC_ExitInitMode>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005658:	f7fc fda4 	bl	80021a4 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800565e:	e009      	b.n	8005674 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005660:	f7fc fda0 	bl	80021a4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800566e:	d901      	bls.n	8005674 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e00f      	b.n	8005694 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0ee      	beq.n	8005660 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0210 	orr.w	r2, r2, #16
 8005690:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0210 	bic.w	r2, r2, #16
 80056b6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80056b8:	f7fc fd74 	bl	80021a4 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80056be:	e009      	b.n	80056d4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80056c0:	f7fc fd70 	bl	80021a4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056ce:	d901      	bls.n	80056d4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e007      	b.n	80056e4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ee      	beq.n	80056c0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	b2da      	uxtb	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	4413      	add	r3, r2
 800571a:	b2db      	uxtb	r3, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
	...

08005728 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	70fb      	strb	r3, [r7, #3]
 8005734:	4613      	mov	r3, r2
 8005736:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005746:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d82d      	bhi.n	80057aa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	4613      	mov	r3, r2
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	4a2c      	ldr	r2, [pc, #176]	@ (800580c <RTC_WeekDayNum+0xe4>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	085a      	lsrs	r2, r3, #1
 8005762:	78bb      	ldrb	r3, [r7, #2]
 8005764:	441a      	add	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	441a      	add	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3b01      	subs	r3, #1
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	3b01      	subs	r3, #1
 8005776:	4926      	ldr	r1, [pc, #152]	@ (8005810 <RTC_WeekDayNum+0xe8>)
 8005778:	fba1 1303 	umull	r1, r3, r1, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3b01      	subs	r3, #1
 8005784:	4922      	ldr	r1, [pc, #136]	@ (8005810 <RTC_WeekDayNum+0xe8>)
 8005786:	fba1 1303 	umull	r1, r3, r1, r3
 800578a:	09db      	lsrs	r3, r3, #7
 800578c:	4413      	add	r3, r2
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	4b20      	ldr	r3, [pc, #128]	@ (8005814 <RTC_WeekDayNum+0xec>)
 8005792:	fba3 1302 	umull	r1, r3, r3, r2
 8005796:	1ad1      	subs	r1, r2, r3
 8005798:	0849      	lsrs	r1, r1, #1
 800579a:	440b      	add	r3, r1
 800579c:	0899      	lsrs	r1, r3, #2
 800579e:	460b      	mov	r3, r1
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	1a5b      	subs	r3, r3, r1
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e029      	b.n	80057fe <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	4613      	mov	r3, r2
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <RTC_WeekDayNum+0xe4>)
 80057b8:	fba2 2303 	umull	r2, r3, r2, r3
 80057bc:	085a      	lsrs	r2, r3, #1
 80057be:	78bb      	ldrb	r3, [r7, #2]
 80057c0:	441a      	add	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	441a      	add	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4910      	ldr	r1, [pc, #64]	@ (8005810 <RTC_WeekDayNum+0xe8>)
 80057d0:	fba1 1303 	umull	r1, r3, r1, r3
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	490d      	ldr	r1, [pc, #52]	@ (8005810 <RTC_WeekDayNum+0xe8>)
 80057dc:	fba1 1303 	umull	r1, r3, r1, r3
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	4413      	add	r3, r2
 80057e4:	1c9a      	adds	r2, r3, #2
 80057e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <RTC_WeekDayNum+0xec>)
 80057e8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ec:	1ad1      	subs	r1, r2, r3
 80057ee:	0849      	lsrs	r1, r1, #1
 80057f0:	440b      	add	r3, r1
 80057f2:	0899      	lsrs	r1, r3, #2
 80057f4:	460b      	mov	r3, r1
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	1a5b      	subs	r3, r3, r1
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	b2db      	uxtb	r3, r3
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr
 800580c:	38e38e39 	.word	0x38e38e39
 8005810:	51eb851f 	.word	0x51eb851f
 8005814:	24924925 	.word	0x24924925

08005818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e076      	b.n	8005918 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800583a:	d009      	beq.n	8005850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	61da      	str	r2, [r3, #28]
 8005842:	e005      	b.n	8005850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fc f9de 	bl	8001c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d4:	ea42 0103 	orr.w	r1, r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	0c1a      	lsrs	r2, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f002 0204 	and.w	r2, r2, #4
 80058f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005906:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e042      	b.n	80059b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc f9ba 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	@ 0x24
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fccb 	bl	8006300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d112      	bne.n	8005a00 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_UART_Receive_IT+0x26>
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e00b      	b.n	8005a02 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 faae 	bl	8005f58 <UART_Start_Receive_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	e000      	b.n	8005a02 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a00:	2302      	movs	r3, #2
  }
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b0ba      	sub	sp, #232	@ 0xe8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10f      	bne.n	8005a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_UART_IRQHandler+0x66>
 8005a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fb8a 	bl	8006184 <UART_Receive_IT>
      return;
 8005a70:	e25b      	b.n	8005f2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80de 	beq.w	8005c38 <HAL_UART_IRQHandler+0x22c>
 8005a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80d1 	beq.w	8005c38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_UART_IRQHandler+0xae>
 8005aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab2:	f043 0201 	orr.w	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <HAL_UART_IRQHandler+0xd2>
 8005ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	f043 0202 	orr.w	r2, r3, #2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_UART_IRQHandler+0xf6>
 8005aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f043 0204 	orr.w	r2, r3, #4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d011      	beq.n	8005b32 <HAL_UART_IRQHandler+0x126>
 8005b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d105      	bne.n	8005b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2a:	f043 0208 	orr.w	r2, r3, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 81f2 	beq.w	8005f20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_UART_IRQHandler+0x14e>
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fb15 	bl	8006184 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf14      	ite	ne
 8005b68:	2301      	movne	r3, #1
 8005b6a:	2300      	moveq	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <HAL_UART_IRQHandler+0x17a>
 8005b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d04f      	beq.n	8005c26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa1f 	bl	8005fca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d041      	beq.n	8005c1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1d9      	bne.n	8005b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d013      	beq.n	8005c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8005dec <HAL_UART_IRQHandler+0x3e0>)
 8005bf4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fc fc48 	bl	8002490 <HAL_DMA_Abort_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c10:	4610      	mov	r0, r2
 8005c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e00e      	b.n	8005c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb ff30 	bl	8001a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e00a      	b.n	8005c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb ff2c 	bl	8001a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	e006      	b.n	8005c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb ff28 	bl	8001a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c32:	e175      	b.n	8005f20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c34:	bf00      	nop
    return;
 8005c36:	e173      	b.n	8005f20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f040 814f 	bne.w	8005ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8148 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8141 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80b6 	beq.w	8005df0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8145 	beq.w	8005f24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	f080 813e 	bcs.w	8005f24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	f000 8088 	beq.w	8005dcc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ce8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1d9      	bne.n	8005cbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3314      	adds	r3, #20
 8005d0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3314      	adds	r3, #20
 8005d28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d2c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d34:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e1      	bne.n	8005d08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d68:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e3      	bne.n	8005d44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005db0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005db4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e3      	bne.n	8005d8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fc fb27 	bl	800241a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8ad 	bl	8005f42 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005de8:	e09c      	b.n	8005f24 <HAL_UART_IRQHandler+0x518>
 8005dea:	bf00      	nop
 8005dec:	0800608f 	.word	0x0800608f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 808e 	beq.w	8005f28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8089 	beq.w	8005f28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e3      	bne.n	8005e16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3314      	adds	r3, #20
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e3      	bne.n	8005e4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0310 	bic.w	r3, r3, #16
 8005eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005eb8:	61fa      	str	r2, [r7, #28]
 8005eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69b9      	ldr	r1, [r7, #24]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e3      	bne.n	8005e94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f832 	bl	8005f42 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ede:	e023      	b.n	8005f28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_UART_IRQHandler+0x4f4>
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f8dc 	bl	80060b6 <UART_Transmit_IT>
    return;
 8005efe:	e014      	b.n	8005f2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <HAL_UART_IRQHandler+0x51e>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f91b 	bl	8006154 <UART_EndTransmit_IT>
    return;
 8005f1e:	e004      	b.n	8005f2a <HAL_UART_IRQHandler+0x51e>
    return;
 8005f20:	bf00      	nop
 8005f22:	e002      	b.n	8005f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8005f28:	bf00      	nop
  }
}
 8005f2a:	37e8      	adds	r7, #232	@ 0xe8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2222      	movs	r2, #34	@ 0x22
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0220 	orr.w	r2, r2, #32
 8005fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b095      	sub	sp, #84	@ 0x54
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ff2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	61fb      	str	r3, [r7, #28]
   return(result);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3314      	adds	r3, #20
 8006024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006028:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800602c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	2b01      	cmp	r3, #1
 8006040:	d119      	bne.n	8006076 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	60bb      	str	r3, [r7, #8]
   return(result);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f023 0310 	bic.w	r3, r3, #16
 8006058:	647b      	str	r3, [r7, #68]	@ 0x44
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006062:	61ba      	str	r2, [r7, #24]
 8006064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6979      	ldr	r1, [r7, #20]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	613b      	str	r3, [r7, #16]
   return(result);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006084:	bf00      	nop
 8006086:	3754      	adds	r7, #84	@ 0x54
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7fb fce7 	bl	8001a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b21      	cmp	r3, #33	@ 0x21
 80060c8:	d13e      	bne.n	8006148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d2:	d114      	bne.n	80060fe <UART_Transmit_IT+0x48>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d110      	bne.n	80060fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	1c9a      	adds	r2, r3, #2
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	621a      	str	r2, [r3, #32]
 80060fc:	e008      	b.n	8006110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6211      	str	r1, [r2, #32]
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4619      	mov	r1, r3
 800611e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fedb 	bl	8005f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08c      	sub	sp, #48	@ 0x30
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b22      	cmp	r3, #34	@ 0x22
 8006196:	f040 80ae 	bne.w	80062f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a2:	d117      	bne.n	80061d4 <UART_Receive_IT+0x50>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d113      	bne.n	80061d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	1c9a      	adds	r2, r3, #2
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80061d2:	e026      	b.n	8006222 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e6:	d007      	beq.n	80061f8 <UART_Receive_IT+0x74>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <UART_Receive_IT+0x82>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	e008      	b.n	8006218 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006212:	b2da      	uxtb	r2, r3
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29b      	uxth	r3, r3
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4619      	mov	r1, r3
 8006230:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006232:	2b00      	cmp	r3, #0
 8006234:	d15d      	bne.n	80062f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0220 	bic.w	r2, r2, #32
 8006244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006278:	2b01      	cmp	r3, #1
 800627a:	d135      	bne.n	80062e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	613b      	str	r3, [r7, #16]
   return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f023 0310 	bic.w	r3, r3, #16
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a2:	623a      	str	r2, [r7, #32]
 80062a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	69f9      	ldr	r1, [r7, #28]
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e5      	bne.n	8006282 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d10a      	bne.n	80062da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fe2e 	bl	8005f42 <HAL_UARTEx_RxEventCallback>
 80062e6:	e002      	b.n	80062ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb fb39 	bl	8001960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e002      	b.n	80062f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
  }
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3730      	adds	r7, #48	@ 0x30
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800633a:	f023 030c 	bic.w	r3, r3, #12
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	430b      	orrs	r3, r1
 8006346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2c      	ldr	r2, [pc, #176]	@ (8006414 <UART_SetConfig+0x114>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d103      	bne.n	8006370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006368:	f7fe fd34 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	e002      	b.n	8006376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006370:	f7fe fd1c 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8006374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009a      	lsls	r2, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	4a22      	ldr	r2, [pc, #136]	@ (8006418 <UART_SetConfig+0x118>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	0119      	lsls	r1, r3, #4
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009a      	lsls	r2, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006418 <UART_SetConfig+0x118>)
 80063ae:	fba3 0302 	umull	r0, r3, r3, r2
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2064      	movs	r0, #100	@ 0x64
 80063b6:	fb00 f303 	mul.w	r3, r0, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	3332      	adds	r3, #50	@ 0x32
 80063c0:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <UART_SetConfig+0x118>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063cc:	4419      	add	r1, r3
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009a      	lsls	r2, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <UART_SetConfig+0x118>)
 80063e6:	fba3 0302 	umull	r0, r3, r3, r2
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	2064      	movs	r0, #100	@ 0x64
 80063ee:	fb00 f303 	mul.w	r3, r0, r3
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	3332      	adds	r3, #50	@ 0x32
 80063f8:	4a07      	ldr	r2, [pc, #28]	@ (8006418 <UART_SetConfig+0x118>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	f003 020f 	and.w	r2, r3, #15
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	440a      	add	r2, r1
 800640a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40013800 	.word	0x40013800
 8006418:	51eb851f 	.word	0x51eb851f

0800641c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	4638      	mov	r0, r7
 8006426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006446:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800644a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr

08006462 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800646a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800646e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	b29b      	uxth	r3, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	4013      	ands	r3, r2
 8006482:	b29a      	uxth	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	4638      	mov	r0, r7
 80064b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b09d      	sub	sp, #116	@ 0x74
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d81f      	bhi.n	800655a <USB_ActivateEndpoint+0x72>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <USB_ActivateEndpoint+0x38>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006563 	.word	0x08006563
 800652c:	0800653f 	.word	0x0800653f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006530:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006534:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006538:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800653c:	e012      	b.n	8006564 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800653e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006542:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006546:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800654a:	e00b      	b.n	8006564 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800654c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006554:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006558:	e004      	b.n	8006564 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006560:	e000      	b.n	8006564 <USB_ActivateEndpoint+0x7c>
      break;
 8006562:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659c:	b29b      	uxth	r3, r3
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	7b1b      	ldrb	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 8178 	bne.w	80068c4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8084 	beq.w	80066e6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	4413      	add	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	011a      	lsls	r2, r3, #4
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	827b      	strh	r3, [r7, #18]
 8006620:	8a7b      	ldrh	r3, [r7, #18]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01b      	beq.n	8006662 <USB_ActivateEndpoint+0x17a>
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006640:	823b      	strh	r3, [r7, #16]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	8a3b      	ldrh	r3, [r7, #16]
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	78db      	ldrb	r3, [r3, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d020      	beq.n	80066ac <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800667c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006680:	81bb      	strh	r3, [r7, #12]
 8006682:	89bb      	ldrh	r3, [r7, #12]
 8006684:	f083 0320 	eor.w	r3, r3, #32
 8006688:	81bb      	strh	r3, [r7, #12]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	89bb      	ldrh	r3, [r7, #12]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
 80066aa:	e2d5      	b.n	8006c58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c2:	81fb      	strh	r3, [r7, #14]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	89fb      	ldrh	r3, [r7, #14]
 80066d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	8013      	strh	r3, [r2, #0]
 80066e4:	e2b8      	b.n	8006c58 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	4413      	add	r3, r2
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	011a      	lsls	r2, r3, #4
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	4413      	add	r3, r2
 8006704:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	88db      	ldrh	r3, [r3, #6]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	b29b      	uxth	r3, r3
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006718:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	4413      	add	r3, r2
 800672c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	011a      	lsls	r2, r3, #4
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	4413      	add	r3, r2
 8006738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006748:	b29a      	uxth	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b3e      	cmp	r3, #62	@ 0x3e
 8006754:	d91d      	bls.n	8006792 <USB_ActivateEndpoint+0x2aa>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <USB_ActivateEndpoint+0x288>
 800676a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800676c:	3b01      	subs	r3, #1
 800676e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29a      	uxth	r2, r3
 8006776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29b      	uxth	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678a:	b29a      	uxth	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	e026      	b.n	80067e0 <USB_ActivateEndpoint+0x2f8>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <USB_ActivateEndpoint+0x2c8>
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e017      	b.n	80067e0 <USB_ActivateEndpoint+0x2f8>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <USB_ActivateEndpoint+0x2e2>
 80067c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c6:	3301      	adds	r3, #1
 80067c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	847b      	strh	r3, [r7, #34]	@ 0x22
 80067ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01b      	beq.n	8006830 <USB_ActivateEndpoint+0x348>
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680e:	843b      	strh	r3, [r7, #32]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	8c3b      	ldrh	r3, [r7, #32]
 800681c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006824:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800682c:	b29b      	uxth	r3, r3
 800682e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d124      	bne.n	8006882 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800684a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684e:	83bb      	strh	r3, [r7, #28]
 8006850:	8bbb      	ldrh	r3, [r7, #28]
 8006852:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006856:	83bb      	strh	r3, [r7, #28]
 8006858:	8bbb      	ldrh	r3, [r7, #28]
 800685a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800685e:	83bb      	strh	r3, [r7, #28]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	8bbb      	ldrh	r3, [r7, #28]
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
 8006880:	e1ea      	b.n	8006c58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006898:	83fb      	strh	r3, [r7, #30]
 800689a:	8bfb      	ldrh	r3, [r7, #30]
 800689c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068a0:	83fb      	strh	r3, [r7, #30]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	8bfb      	ldrh	r3, [r7, #30]
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
 80068c2:	e1c9      	b.n	8006c58 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	78db      	ldrb	r3, [r3, #3]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d11e      	bne.n	800690a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]
 8006908:	e01d      	b.n	8006946 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800691c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006920:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006956:	4413      	add	r3, r2
 8006958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	011a      	lsls	r2, r3, #4
 8006960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006962:	4413      	add	r3, r2
 8006964:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	891b      	ldrh	r3, [r3, #8]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	b29b      	uxth	r3, r3
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	657b      	str	r3, [r7, #84]	@ 0x54
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006984:	b29b      	uxth	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800698a:	4413      	add	r3, r2
 800698c:	657b      	str	r3, [r7, #84]	@ 0x54
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	011a      	lsls	r2, r3, #4
 8006994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006996:	4413      	add	r3, r2
 8006998:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800699c:	653b      	str	r3, [r7, #80]	@ 0x50
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	895b      	ldrh	r3, [r3, #10]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 8093 	bne.w	8006ade <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80069c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <USB_ActivateEndpoint+0x524>
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <USB_ActivateEndpoint+0x574>
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a82:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]
 8006adc:	e0bc      	b.n	8006c58 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01d      	beq.n	8006b36 <USB_ActivateEndpoint+0x64e>
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b10:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006b46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01d      	beq.n	8006b8e <USB_ActivateEndpoint+0x6a6>
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b68:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	78db      	ldrb	r3, [r3, #3]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d024      	beq.n	8006be0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006bb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006bb4:	f083 0320 	eor.w	r3, r3, #32
 8006bb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]
 8006bde:	e01d      	b.n	8006c1c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bf6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	441a      	add	r2, r3
 8006c40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006c58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3774      	adds	r7, #116	@ 0x74
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop

08006c68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b08d      	sub	sp, #52	@ 0x34
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	7b1b      	ldrb	r3, [r3, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 808e 	bne.w	8006d98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d044      	beq.n	8006d0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	81bb      	strh	r3, [r7, #12]
 8006c92:	89bb      	ldrh	r3, [r7, #12]
 8006c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01b      	beq.n	8006cd4 <USB_DeactivateEndpoint+0x6c>
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb2:	817b      	strh	r3, [r7, #10]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	441a      	add	r2, r3
 8006cbe:	897b      	ldrh	r3, [r7, #10]
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ccc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cea:	813b      	strh	r3, [r7, #8]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	893b      	ldrh	r3, [r7, #8]
 8006cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	8013      	strh	r3, [r2, #0]
 8006d0c:	e192      	b.n	8007034 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	827b      	strh	r3, [r7, #18]
 8006d1c:	8a7b      	ldrh	r3, [r7, #18]
 8006d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01b      	beq.n	8006d5e <USB_DeactivateEndpoint+0xf6>
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3c:	823b      	strh	r3, [r7, #16]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	8a3b      	ldrh	r3, [r7, #16]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d74:	81fb      	strh	r3, [r7, #14]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	89fb      	ldrh	r3, [r7, #14]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
 8006d96:	e14d      	b.n	8007034 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 80a5 	bne.w	8006eec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	843b      	strh	r3, [r7, #32]
 8006db0:	8c3b      	ldrh	r3, [r7, #32]
 8006db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01b      	beq.n	8006df2 <USB_DeactivateEndpoint+0x18a>
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd0:	83fb      	strh	r3, [r7, #30]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	8bfb      	ldrh	r3, [r7, #30]
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	83bb      	strh	r3, [r7, #28]
 8006e00:	8bbb      	ldrh	r3, [r7, #28]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01b      	beq.n	8006e42 <USB_DeactivateEndpoint+0x1da>
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e20:	837b      	strh	r3, [r7, #26]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	8b7b      	ldrh	r3, [r7, #26]
 8006e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e58:	833b      	strh	r3, [r7, #24]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	8b3b      	ldrh	r3, [r7, #24]
 8006e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e90:	82fb      	strh	r3, [r7, #22]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	8afb      	ldrh	r3, [r7, #22]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec8:	82bb      	strh	r3, [r7, #20]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	8abb      	ldrh	r3, [r7, #20]
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]
 8006eea:	e0a3      	b.n	8007034 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006efa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01b      	beq.n	8006f3c <USB_DeactivateEndpoint+0x2d4>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006f4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <USB_DeactivateEndpoint+0x324>
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	441a      	add	r2, r3
 8006f76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800700e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007012:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007030:	b29b      	uxth	r3, r3
 8007032:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3734      	adds	r7, #52	@ 0x34
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b0c2      	sub	sp, #264	@ 0x108
 8007044:	af00      	add	r7, sp, #0
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800704e:	6018      	str	r0, [r3, #0]
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007058:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800705a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b01      	cmp	r3, #1
 8007068:	f040 86b7 	bne.w	8007dda <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d908      	bls.n	800709a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007098:	e007      	b.n	80070aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800709a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	7b1b      	ldrb	r3, [r3, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d13a      	bne.n	8007130 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6959      	ldr	r1, [r3, #20]
 80070c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	88da      	ldrh	r2, [r3, #6]
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070e0:	6800      	ldr	r0, [r0, #0]
 80070e2:	f001 fc9c 	bl	8008a1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4413      	add	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	011a      	lsls	r2, r3, #4
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4413      	add	r3, r2
 800711c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	f000 be1f 	b.w	8007d6e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	78db      	ldrb	r3, [r3, #3]
 800713c:	2b02      	cmp	r3, #2
 800713e:	f040 8462 	bne.w	8007a06 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	f240 83df 	bls.w	800791e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007186:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800718a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	441a      	add	r2, r3
 80071a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071b0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80071b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071cc:	1ad2      	subs	r2, r2, r3
 80071ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 81c7 	beq.w	8007590 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	633b      	str	r3, [r7, #48]	@ 0x30
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d177      	bne.n	800730e <USB_EPStartXfer+0x2ce>
 800721e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800722a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007238:	b29b      	uxth	r3, r3
 800723a:	461a      	mov	r2, r3
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	4413      	add	r3, r2
 8007240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	011a      	lsls	r2, r3, #4
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	4413      	add	r3, r2
 8007254:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007264:	b29a      	uxth	r2, r3
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007270:	d921      	bls.n	80072b6 <USB_EPStartXfer+0x276>
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USB_EPStartXfer+0x252>
 8007288:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800728c:	3b01      	subs	r3, #1
 800728e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29a      	uxth	r2, r3
 8007298:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800729c:	b29b      	uxth	r3, r3
 800729e:	029b      	lsls	r3, r3, #10
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	4313      	orrs	r3, r2
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e050      	b.n	8007358 <USB_EPStartXfer+0x318>
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <USB_EPStartXfer+0x294>
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	e041      	b.n	8007358 <USB_EPStartXfer+0x318>
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <USB_EPStartXfer+0x2b4>
 80072ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072ee:	3301      	adds	r3, #1
 80072f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072fe:	b29b      	uxth	r3, r3
 8007300:	029b      	lsls	r3, r3, #10
 8007302:	b29b      	uxth	r3, r3
 8007304:	4313      	orrs	r3, r2
 8007306:	b29a      	uxth	r2, r3
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e024      	b.n	8007358 <USB_EPStartXfer+0x318>
 800730e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d11c      	bne.n	8007358 <USB_EPStartXfer+0x318>
 800731e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	4413      	add	r3, r2
 8007334:	633b      	str	r3, [r7, #48]	@ 0x30
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	011a      	lsls	r2, r3, #4
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	4413      	add	r3, r2
 8007348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	b29a      	uxth	r2, r3
 8007354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007356:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	895b      	ldrh	r3, [r3, #10]
 8007364:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6959      	ldr	r1, [r3, #20]
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007378:	b29b      	uxth	r3, r3
 800737a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800737e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007382:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	f001 fb49 	bl	8008a1e <USB_WritePMA>
            ep->xfer_buff += len;
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695a      	ldr	r2, [r3, #20]
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739c:	441a      	add	r2, r3
 800739e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d90f      	bls.n	80073e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a1a      	ldr	r2, [r3, #32]
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	621a      	str	r2, [r3, #32]
 80073e4:	e00e      	b.n	8007404 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80073e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2200      	movs	r2, #0
 8007402:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d177      	bne.n	8007504 <USB_EPStartXfer+0x4c4>
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800742e:	b29b      	uxth	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	4413      	add	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	011a      	lsls	r2, r3, #4
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	4413      	add	r3, r2
 800744a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800745a:	b29a      	uxth	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	2b3e      	cmp	r3, #62	@ 0x3e
 8007466:	d921      	bls.n	80074ac <USB_EPStartXfer+0x46c>
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	2b00      	cmp	r3, #0
 800747c:	d104      	bne.n	8007488 <USB_EPStartXfer+0x448>
 800747e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007482:	3b01      	subs	r3, #1
 8007484:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007492:	b29b      	uxth	r3, r3
 8007494:	029b      	lsls	r3, r3, #10
 8007496:	b29b      	uxth	r3, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	e056      	b.n	800755a <USB_EPStartXfer+0x51a>
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <USB_EPStartXfer+0x48a>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	e047      	b.n	800755a <USB_EPStartXfer+0x51a>
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <USB_EPStartXfer+0x4aa>
 80074e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e4:	3301      	adds	r3, #1
 80074e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	e02a      	b.n	800755a <USB_EPStartXfer+0x51a>
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d122      	bne.n	800755a <USB_EPStartXfer+0x51a>
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	623b      	str	r3, [r7, #32]
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800752e:	b29b      	uxth	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	4413      	add	r3, r2
 8007536:	623b      	str	r3, [r7, #32]
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	011a      	lsls	r2, r3, #4
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	4413      	add	r3, r2
 800754a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007554:	b29a      	uxth	r2, r3
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	891b      	ldrh	r3, [r3, #8]
 8007566:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6959      	ldr	r1, [r3, #20]
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	b29b      	uxth	r3, r3
 800757c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007580:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007584:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007588:	6800      	ldr	r0, [r0, #0]
 800758a:	f001 fa48 	bl	8008a1e <USB_WritePMA>
 800758e:	e3ee      	b.n	8007d6e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d177      	bne.n	8007690 <USB_EPStartXfer+0x650>
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075c0:	4413      	add	r3, r2
 80075c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	011a      	lsls	r2, r3, #4
 80075d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075d4:	4413      	add	r3, r2
 80075d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075da:	647b      	str	r3, [r7, #68]	@ 0x44
 80075dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80075f2:	d921      	bls.n	8007638 <USB_EPStartXfer+0x5f8>
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	2b00      	cmp	r3, #0
 8007608:	d104      	bne.n	8007614 <USB_EPStartXfer+0x5d4>
 800760a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800760e:	3b01      	subs	r3, #1
 8007610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800761e:	b29b      	uxth	r3, r3
 8007620:	029b      	lsls	r3, r3, #10
 8007622:	b29b      	uxth	r3, r3
 8007624:	4313      	orrs	r3, r2
 8007626:	b29b      	uxth	r3, r3
 8007628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007630:	b29a      	uxth	r2, r3
 8007632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e056      	b.n	80076e6 <USB_EPStartXfer+0x6a6>
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <USB_EPStartXfer+0x616>
 8007640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764e:	b29a      	uxth	r2, r3
 8007650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	e047      	b.n	80076e6 <USB_EPStartXfer+0x6a6>
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <USB_EPStartXfer+0x636>
 800766c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007670:	3301      	adds	r3, #1
 8007672:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29a      	uxth	r2, r3
 800767c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007680:	b29b      	uxth	r3, r3
 8007682:	029b      	lsls	r3, r3, #10
 8007684:	b29b      	uxth	r3, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	b29a      	uxth	r2, r3
 800768a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	e02a      	b.n	80076e6 <USB_EPStartXfer+0x6a6>
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d122      	bne.n	80076e6 <USB_EPStartXfer+0x6a6>
 80076a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076c0:	4413      	add	r3, r2
 80076c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	011a      	lsls	r2, r3, #4
 80076d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d4:	4413      	add	r3, r2
 80076d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	891b      	ldrh	r3, [r3, #8]
 80076f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6959      	ldr	r1, [r3, #20]
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007706:	b29b      	uxth	r3, r3
 8007708:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800770c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007710:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	f001 f982 	bl	8008a1e <USB_WritePMA>
            ep->xfer_buff += len;
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695a      	ldr	r2, [r3, #20]
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	441a      	add	r2, r3
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6a1a      	ldr	r2, [r3, #32]
 8007744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90f      	bls.n	8007774 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6a1a      	ldr	r2, [r3, #32]
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007764:	1ad2      	subs	r2, r2, r3
 8007766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	621a      	str	r2, [r3, #32]
 8007772:	e00e      	b.n	8007792 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2200      	movs	r2, #0
 8007790:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	643b      	str	r3, [r7, #64]	@ 0x40
 800779e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d177      	bne.n	800789e <USB_EPStartXfer+0x85e>
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	4413      	add	r3, r2
 80077d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	011a      	lsls	r2, r3, #4
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007800:	d921      	bls.n	8007846 <USB_EPStartXfer+0x806>
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <USB_EPStartXfer+0x7e2>
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781c:	3b01      	subs	r3, #1
 800781e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	b29b      	uxth	r3, r3
 800782e:	029b      	lsls	r3, r3, #10
 8007830:	b29b      	uxth	r3, r3
 8007832:	4313      	orrs	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783e:	b29a      	uxth	r2, r3
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e050      	b.n	80078e8 <USB_EPStartXfer+0x8a8>
 8007846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <USB_EPStartXfer+0x824>
 800784e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785c:	b29a      	uxth	r2, r3
 800785e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	e041      	b.n	80078e8 <USB_EPStartXfer+0x8a8>
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <USB_EPStartXfer+0x844>
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787e:	3301      	adds	r3, #1
 8007880:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29a      	uxth	r2, r3
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788e:	b29b      	uxth	r3, r3
 8007890:	029b      	lsls	r3, r3, #10
 8007892:	b29b      	uxth	r3, r3
 8007894:	4313      	orrs	r3, r2
 8007896:	b29a      	uxth	r2, r3
 8007898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	e024      	b.n	80078e8 <USB_EPStartXfer+0x8a8>
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d11c      	bne.n	80078e8 <USB_EPStartXfer+0x8a8>
 80078ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c2:	4413      	add	r3, r2
 80078c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	011a      	lsls	r2, r3, #4
 80078d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	895b      	ldrh	r3, [r3, #10]
 80078f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6959      	ldr	r1, [r3, #20]
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007908:	b29b      	uxth	r3, r3
 800790a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800790e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007912:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	f001 f881 	bl	8008a1e <USB_WritePMA>
 800791c:	e227      	b.n	8007d6e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007954:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800798a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079aa:	4413      	add	r3, r2
 80079ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	011a      	lsls	r2, r3, #4
 80079bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079be:	4413      	add	r3, r2
 80079c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	891b      	ldrh	r3, [r3, #8]
 80079dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6959      	ldr	r1, [r3, #20]
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	f001 f80d 	bl	8008a1e <USB_WritePMA>
 8007a04:	e1b3      	b.n	8007d6e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6a1a      	ldr	r2, [r3, #32]
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80c6 	beq.w	8007bd8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d177      	bne.n	8007b58 <USB_EPStartXfer+0xb18>
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a88:	4413      	add	r3, r2
 8007a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	011a      	lsls	r2, r3, #4
 8007a9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ab2:	801a      	strh	r2, [r3, #0]
 8007ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aba:	d921      	bls.n	8007b00 <USB_EPStartXfer+0xac0>
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	095b      	lsrs	r3, r3, #5
 8007ac2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <USB_EPStartXfer+0xa9c>
 8007ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	029b      	lsls	r3, r3, #10
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	e050      	b.n	8007ba2 <USB_EPStartXfer+0xb62>
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <USB_EPStartXfer+0xade>
 8007b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e041      	b.n	8007ba2 <USB_EPStartXfer+0xb62>
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <USB_EPStartXfer+0xafe>
 8007b34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b38:	3301      	adds	r3, #1
 8007b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	029b      	lsls	r3, r3, #10
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	e024      	b.n	8007ba2 <USB_EPStartXfer+0xb62>
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d11c      	bne.n	8007ba2 <USB_EPStartXfer+0xb62>
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b7c:	4413      	add	r3, r2
 8007b7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	011a      	lsls	r2, r3, #4
 8007b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b90:	4413      	add	r3, r2
 8007b92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ba0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	895b      	ldrh	r3, [r3, #10]
 8007bae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6959      	ldr	r1, [r3, #20]
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007bcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007bd0:	6800      	ldr	r0, [r0, #0]
 8007bd2:	f000 ff24 	bl	8008a1e <USB_WritePMA>
 8007bd6:	e0ca      	b.n	8007d6e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	785b      	ldrb	r3, [r3, #1]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d177      	bne.n	8007cd8 <USB_EPStartXfer+0xc98>
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c08:	4413      	add	r3, r2
 8007c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	011a      	lsls	r2, r3, #4
 8007c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c3a:	d921      	bls.n	8007c80 <USB_EPStartXfer+0xc40>
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <USB_EPStartXfer+0xc1c>
 8007c52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c56:	3b01      	subs	r3, #1
 8007c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	029b      	lsls	r3, r3, #10
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	e05c      	b.n	8007d3a <USB_EPStartXfer+0xcfa>
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <USB_EPStartXfer+0xc5e>
 8007c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e04d      	b.n	8007d3a <USB_EPStartXfer+0xcfa>
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <USB_EPStartXfer+0xc7e>
 8007cb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cb8:	3301      	adds	r3, #1
 8007cba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	029b      	lsls	r3, r3, #10
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	e030      	b.n	8007d3a <USB_EPStartXfer+0xcfa>
 8007cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d128      	bne.n	8007d3a <USB_EPStartXfer+0xcfa>
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	011a      	lsls	r2, r3, #4
 8007d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d24:	4413      	add	r3, r2
 8007d26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	891b      	ldrh	r3, [r3, #8]
 8007d46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6959      	ldr	r1, [r3, #20]
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d68:	6800      	ldr	r0, [r0, #0]
 8007d6a:	f000 fe58 	bl	8008a1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d94:	817b      	strh	r3, [r7, #10]
 8007d96:	897b      	ldrh	r3, [r7, #10]
 8007d98:	f083 0310 	eor.w	r3, r3, #16
 8007d9c:	817b      	strh	r3, [r7, #10]
 8007d9e:	897b      	ldrh	r3, [r7, #10]
 8007da0:	f083 0320 	eor.w	r3, r3, #32
 8007da4:	817b      	strh	r3, [r7, #10]
 8007da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	441a      	add	r2, r3
 8007dc0:	897b      	ldrh	r3, [r7, #10]
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
 8007dd6:	f000 bcde 	b.w	8008796 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	7b1b      	ldrb	r3, [r3, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f040 80bb 	bne.w	8007f62 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d917      	bls.n	8007e38 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	1ad2      	subs	r2, r2, r3
 8007e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	619a      	str	r2, [r3, #24]
 8007e36:	e00e      	b.n	8007e56 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	011a      	lsls	r2, r3, #4
 8007e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e92:	4413      	add	r3, r2
 8007e94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eb6:	d924      	bls.n	8007f02 <USB_EPStartXfer+0xec2>
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <USB_EPStartXfer+0xe98>
 8007ece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	029b      	lsls	r3, r3, #10
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	f000 bc10 	b.w	8008722 <USB_EPStartXfer+0x16e2>
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10c      	bne.n	8007f24 <USB_EPStartXfer+0xee4>
 8007f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	e3fe      	b.n	8008722 <USB_EPStartXfer+0x16e2>
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <USB_EPStartXfer+0xf04>
 8007f3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e3df      	b.n	8008722 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	78db      	ldrb	r3, [r3, #3]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	f040 8218 	bne.w	80083a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 809d 	bne.w	80080c0 <USB_EPStartXfer+0x1080>
 8007f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007faa:	4413      	add	r3, r2
 8007fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	011a      	lsls	r2, r3, #4
 8007fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fee:	d92b      	bls.n	8008048 <USB_EPStartXfer+0x1008>
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <USB_EPStartXfer+0xfe0>
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801a:	3b01      	subs	r3, #1
 800801c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	b29a      	uxth	r2, r3
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802c:	b29b      	uxth	r3, r3
 800802e:	029b      	lsls	r3, r3, #10
 8008030:	b29b      	uxth	r3, r3
 8008032:	4313      	orrs	r3, r2
 8008034:	b29b      	uxth	r3, r3
 8008036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803e:	b29a      	uxth	r2, r3
 8008040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e070      	b.n	800812a <USB_EPStartXfer+0x10ea>
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10c      	bne.n	8008072 <USB_EPStartXfer+0x1032>
 8008058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	e05b      	b.n	800812a <USB_EPStartXfer+0x10ea>
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <USB_EPStartXfer+0x1062>
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	3301      	adds	r3, #1
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e034      	b.n	800812a <USB_EPStartXfer+0x10ea>
 80080c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d12c      	bne.n	800812a <USB_EPStartXfer+0x10ea>
 80080d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080f4:	4413      	add	r3, r2
 80080f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	011a      	lsls	r2, r3, #4
 8008108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800810c:	4413      	add	r3, r2
 800810e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 809d 	bne.w	8008284 <USB_EPStartXfer+0x1244>
 800814a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008166:	b29b      	uxth	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800816e:	4413      	add	r3, r2
 8008170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	011a      	lsls	r2, r3, #4
 8008182:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008186:	4413      	add	r3, r2
 8008188:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800818c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800819c:	b29a      	uxth	r2, r3
 800819e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80081b2:	d92b      	bls.n	800820c <USB_EPStartXfer+0x11cc>
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 031f 	and.w	r3, r3, #31
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <USB_EPStartXfer+0x11a4>
 80081da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081de:	3b01      	subs	r3, #1
 80081e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	029b      	lsls	r3, r3, #10
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008202:	b29a      	uxth	r2, r3
 8008204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	e069      	b.n	80082e0 <USB_EPStartXfer+0x12a0>
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <USB_EPStartXfer+0x11f6>
 800821c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e054      	b.n	80082e0 <USB_EPStartXfer+0x12a0>
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <USB_EPStartXfer+0x1226>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008260:	3301      	adds	r3, #1
 8008262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008266:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008272:	b29b      	uxth	r3, r3
 8008274:	029b      	lsls	r3, r3, #10
 8008276:	b29b      	uxth	r3, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	b29a      	uxth	r2, r3
 800827c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e02d      	b.n	80082e0 <USB_EPStartXfer+0x12a0>
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d125      	bne.n	80082e0 <USB_EPStartXfer+0x12a0>
 8008294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082aa:	4413      	add	r3, r2
 80082ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	011a      	lsls	r2, r3, #4
 80082be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082c2:	4413      	add	r3, r2
 80082c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8218 	beq.w	8008722 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008312:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <USB_EPStartXfer+0x12ea>
 800831e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10d      	bne.n	8008346 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800832a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800832e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 81f5 	bne.w	8008722 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008338:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800833c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 81ee 	bne.w	8008722 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800838e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800839a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8013      	strh	r3, [r2, #0]
 80083a2:	e1be      	b.n	8008722 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	78db      	ldrb	r3, [r3, #3]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	f040 81b4 	bne.w	800871e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d917      	bls.n	8008402 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80083d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	619a      	str	r2, [r3, #24]
 8008400:	e00e      	b.n	8008420 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2200      	movs	r2, #0
 800841e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8085 	bne.w	800853c <USB_EPStartXfer+0x14fc>
 8008432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800844e:	b29b      	uxth	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008456:	4413      	add	r3, r2
 8008458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	011a      	lsls	r2, r3, #4
 800846a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800846e:	4413      	add	r3, r2
 8008470:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008490:	2b3e      	cmp	r3, #62	@ 0x3e
 8008492:	d923      	bls.n	80084dc <USB_EPStartXfer+0x149c>
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008498:	095b      	lsrs	r3, r3, #5
 800849a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800849e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a2:	f003 031f 	and.w	r3, r3, #31
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d104      	bne.n	80084b4 <USB_EPStartXfer+0x1474>
 80084aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ae:	3b01      	subs	r3, #1
 80084b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	029b      	lsls	r3, r3, #10
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e060      	b.n	800859e <USB_EPStartXfer+0x155e>
 80084dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10c      	bne.n	80084fe <USB_EPStartXfer+0x14be>
 80084e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e04f      	b.n	800859e <USB_EPStartXfer+0x155e>
 80084fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <USB_EPStartXfer+0x14de>
 8008514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008518:	3301      	adds	r3, #1
 800851a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800851e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800852a:	b29b      	uxth	r3, r3
 800852c:	029b      	lsls	r3, r3, #10
 800852e:	b29b      	uxth	r3, r3
 8008530:	4313      	orrs	r3, r2
 8008532:	b29a      	uxth	r2, r3
 8008534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	e030      	b.n	800859e <USB_EPStartXfer+0x155e>
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d128      	bne.n	800859e <USB_EPStartXfer+0x155e>
 800854c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800855a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008568:	b29b      	uxth	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008570:	4413      	add	r3, r2
 8008572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	011a      	lsls	r2, r3, #4
 8008584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008588:	4413      	add	r3, r2
 800858a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800858e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008596:	b29a      	uxth	r2, r3
 8008598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800859c:	801a      	strh	r2, [r3, #0]
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8085 	bne.w	80086c8 <USB_EPStartXfer+0x1688>
 80085be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085da:	b29b      	uxth	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085e2:	4413      	add	r3, r2
 80085e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	011a      	lsls	r2, r3, #4
 80085f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085fa:	4413      	add	r3, r2
 80085fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008610:	b29a      	uxth	r2, r3
 8008612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861c:	2b3e      	cmp	r3, #62	@ 0x3e
 800861e:	d923      	bls.n	8008668 <USB_EPStartXfer+0x1628>
 8008620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008624:	095b      	lsrs	r3, r3, #5
 8008626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800862a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <USB_EPStartXfer+0x1600>
 8008636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800863a:	3b01      	subs	r3, #1
 800863c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29a      	uxth	r2, r3
 8008648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800864c:	b29b      	uxth	r3, r3
 800864e:	029b      	lsls	r3, r3, #10
 8008650:	b29b      	uxth	r3, r3
 8008652:	4313      	orrs	r3, r2
 8008654:	b29b      	uxth	r3, r3
 8008656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865e:	b29a      	uxth	r2, r3
 8008660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e05c      	b.n	8008722 <USB_EPStartXfer+0x16e2>
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10c      	bne.n	800868a <USB_EPStartXfer+0x164a>
 8008670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008680:	b29a      	uxth	r2, r3
 8008682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e04b      	b.n	8008722 <USB_EPStartXfer+0x16e2>
 800868a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <USB_EPStartXfer+0x166a>
 80086a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086a4:	3301      	adds	r3, #1
 80086a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	029b      	lsls	r3, r3, #10
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086c4:	801a      	strh	r2, [r3, #0]
 80086c6:	e02c      	b.n	8008722 <USB_EPStartXfer+0x16e2>
 80086c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d124      	bne.n	8008722 <USB_EPStartXfer+0x16e2>
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	461a      	mov	r2, r3
 80086ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086ee:	4413      	add	r3, r2
 80086f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	011a      	lsls	r2, r3, #4
 8008702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008706:	4413      	add	r3, r2
 8008708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800870c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008714:	b29a      	uxth	r2, r3
 8008716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800871a:	801a      	strh	r2, [r3, #0]
 800871c:	e001      	b.n	8008722 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e03a      	b.n	8008798 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	b29b      	uxth	r3, r3
 8008740:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008748:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800874c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008750:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008754:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008758:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800875c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008760:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800878a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800878e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008792:	b29b      	uxth	r3, r3
 8008794:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d020      	beq.n	80087f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ca:	81bb      	strh	r3, [r7, #12]
 80087cc:	89bb      	ldrh	r3, [r7, #12]
 80087ce:	f083 0310 	eor.w	r3, r3, #16
 80087d2:	81bb      	strh	r3, [r7, #12]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	441a      	add	r2, r3
 80087de:	89bb      	ldrh	r3, [r7, #12]
 80087e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	8013      	strh	r3, [r2, #0]
 80087f4:	e01f      	b.n	8008836 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880c:	81fb      	strh	r3, [r7, #14]
 800880e:	89fb      	ldrh	r3, [r7, #14]
 8008810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008814:	81fb      	strh	r3, [r7, #14]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	89fb      	ldrh	r3, [r7, #14]
 8008822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800882a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800882e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008832:	b29b      	uxth	r3, r3
 8008834:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr

08008842 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	7b1b      	ldrb	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f040 809d 	bne.w	8008990 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d04c      	beq.n	80088f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	823b      	strh	r3, [r7, #16]
 800886c:	8a3b      	ldrh	r3, [r7, #16]
 800886e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01b      	beq.n	80088ae <USB_EPClearStall+0x6c>
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800888c:	81fb      	strh	r3, [r7, #14]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	441a      	add	r2, r3
 8008898:	89fb      	ldrh	r3, [r7, #14]
 800889a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800889e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	78db      	ldrb	r3, [r3, #3]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d06c      	beq.n	8008990 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088cc:	81bb      	strh	r3, [r7, #12]
 80088ce:	89bb      	ldrh	r3, [r7, #12]
 80088d0:	f083 0320 	eor.w	r3, r3, #32
 80088d4:	81bb      	strh	r3, [r7, #12]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	441a      	add	r2, r3
 80088e0:	89bb      	ldrh	r3, [r7, #12]
 80088e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	8013      	strh	r3, [r2, #0]
 80088f6:	e04b      	b.n	8008990 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	82fb      	strh	r3, [r7, #22]
 8008906:	8afb      	ldrh	r3, [r7, #22]
 8008908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01b      	beq.n	8008948 <USB_EPClearStall+0x106>
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008926:	82bb      	strh	r3, [r7, #20]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	441a      	add	r2, r3
 8008932:	8abb      	ldrh	r3, [r7, #20]
 8008934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800893c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008944:	b29b      	uxth	r3, r3
 8008946:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800895a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895e:	827b      	strh	r3, [r7, #18]
 8008960:	8a7b      	ldrh	r3, [r7, #18]
 8008962:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008966:	827b      	strh	r3, [r7, #18]
 8008968:	8a7b      	ldrh	r3, [r7, #18]
 800896a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800896e:	827b      	strh	r3, [r7, #18]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	441a      	add	r2, r3
 800897a:	8a7b      	ldrh	r3, [r7, #18]
 800897c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800898c:	b29b      	uxth	r3, r3
 800898e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr

0800899c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2280      	movs	r2, #128	@ 0x80
 80089b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr

080089c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr

080089d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bc80      	pop	{r7}
 80089e8:	4770      	bx	lr

080089ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089fc:	68fb      	ldr	r3, [r7, #12]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr

08008a1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b08b      	sub	sp, #44	@ 0x2c
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	4611      	mov	r1, r2
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	80fb      	strh	r3, [r7, #6]
 8008a30:	4613      	mov	r3, r2
 8008a32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a34:	88bb      	ldrh	r3, [r7, #4]
 8008a36:	3301      	adds	r3, #1
 8008a38:	085b      	lsrs	r3, r3, #1
 8008a3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	005a      	lsls	r2, r3, #1
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a56:	e01f      	b.n	8008a98 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	3301      	adds	r3, #1
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	b21b      	sxth	r3, r3
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	b21a      	sxth	r2, r3
 8008a6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	b21b      	sxth	r3, r3
 8008a72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	8a7a      	ldrh	r2, [r7, #18]
 8008a78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	3302      	adds	r3, #2
 8008a84:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	3b01      	subs	r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1dc      	bne.n	8008a58 <USB_WritePMA+0x3a>
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	372c      	adds	r7, #44	@ 0x2c
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b08b      	sub	sp, #44	@ 0x2c
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	460b      	mov	r3, r1
 8008aba:	80fb      	strh	r3, [r7, #6]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ac0:	88bb      	ldrh	r3, [r7, #4]
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	005a      	lsls	r2, r3, #1
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008adc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ae2:	e01b      	b.n	8008b1c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	3302      	adds	r3, #2
 8008af0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	3301      	adds	r3, #1
 8008afe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	0a1b      	lsrs	r3, r3, #8
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	3302      	adds	r3, #2
 8008b14:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e0      	bne.n	8008ae4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b22:	88bb      	ldrh	r3, [r7, #4]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	701a      	strb	r2, [r3, #0]
  }
}
 8008b3e:	bf00      	nop
 8008b40:	372c      	adds	r7, #44	@ 0x2c
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bc80      	pop	{r7}
 8008b46:	4770      	bx	lr

08008b48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008b4c:	4904      	ldr	r1, [pc, #16]	@ (8008b60 <MX_FATFS_Init+0x18>)
 8008b4e:	4805      	ldr	r0, [pc, #20]	@ (8008b64 <MX_FATFS_Init+0x1c>)
 8008b50:	f001 fbe2 	bl	800a318 <FATFS_LinkDriver>
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	4b03      	ldr	r3, [pc, #12]	@ (8008b68 <MX_FATFS_Init+0x20>)
 8008b5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b5c:	bf00      	nop
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000558 	.word	0x20000558
 8008b64:	2000000c 	.word	0x2000000c
 8008b68:	20000554 	.word	0x20000554

08008b6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008b76:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <USER_initialize+0x20>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008b7c:	4b03      	ldr	r3, [pc, #12]	@ (8008b8c <USER_initialize+0x20>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr
 8008b8c:	20000009 	.word	0x20000009

08008b90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008b9a:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <USER_status+0x20>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008ba0:	4b03      	ldr	r3, [pc, #12]	@ (8008bb0 <USER_status+0x20>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr
 8008bb0:	20000009 	.word	0x20000009

08008bb4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008bc4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr

08008bd0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008be0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bc80      	pop	{r7}
 8008bea:	4770      	bx	lr

08008bec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	603a      	str	r2, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
    return res;
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr

08008c0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7c1b      	ldrb	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d115      	bne.n	8008c50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c28:	2202      	movs	r2, #2
 8008c2a:	2181      	movs	r1, #129	@ 0x81
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fe86 	bl	800a93e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	2101      	movs	r1, #1
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 fe7c 	bl	800a93e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008c4e:	e012      	b.n	8008c76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c50:	2340      	movs	r3, #64	@ 0x40
 8008c52:	2202      	movs	r2, #2
 8008c54:	2181      	movs	r1, #129	@ 0x81
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 fe71 	bl	800a93e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c62:	2340      	movs	r3, #64	@ 0x40
 8008c64:	2202      	movs	r2, #2
 8008c66:	2101      	movs	r1, #1
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fe68 	bl	800a93e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c76:	2308      	movs	r3, #8
 8008c78:	2203      	movs	r2, #3
 8008c7a:	2182      	movs	r1, #130	@ 0x82
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 fe5e 	bl	800a93e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c8c:	f001 ff7e 	bl	800ab8c <USBD_static_malloc>
 8008c90:	4602      	mov	r2, r0
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	e026      	b.n	8008cf6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7c1b      	ldrb	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d109      	bne.n	8008ce6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cdc:	2101      	movs	r1, #1
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 ff1d 	bl	800ab1e <USBD_LL_PrepareReceive>
 8008ce4:	e007      	b.n	8008cf6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cec:	2340      	movs	r3, #64	@ 0x40
 8008cee:	2101      	movs	r1, #1
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 ff14 	bl	800ab1e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d10:	2181      	movs	r1, #129	@ 0x81
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fe39 	bl	800a98a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d1e:	2101      	movs	r1, #1
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fe32 	bl	800a98a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d2e:	2182      	movs	r1, #130	@ 0x82
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f001 fe2a 	bl	800a98a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00e      	beq.n	8008d64 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 ff24 	bl	800aba4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d7e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d039      	beq.n	8008e0c <USBD_CDC_Setup+0x9e>
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d17f      	bne.n	8008e9c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	88db      	ldrh	r3, [r3, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d029      	beq.n	8008df8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b25b      	sxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da11      	bge.n	8008dd2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008dba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	88d2      	ldrh	r2, [r2, #6]
 8008dc0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dc2:	6939      	ldr	r1, [r7, #16]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	88db      	ldrh	r3, [r3, #6]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f9d6 	bl	800a17c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008dd0:	e06b      	b.n	8008eaa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	785a      	ldrb	r2, [r3, #1]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88db      	ldrh	r3, [r3, #6]
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008de8:	6939      	ldr	r1, [r7, #16]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	88db      	ldrh	r3, [r3, #6]
 8008dee:	461a      	mov	r2, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 f9f1 	bl	800a1d8 <USBD_CtlPrepareRx>
      break;
 8008df6:	e058      	b.n	8008eaa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	7850      	ldrb	r0, [r2, #1]
 8008e04:	2200      	movs	r2, #0
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	4798      	blx	r3
      break;
 8008e0a:	e04e      	b.n	8008eaa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b0b      	cmp	r3, #11
 8008e12:	d02e      	beq.n	8008e72 <USBD_CDC_Setup+0x104>
 8008e14:	2b0b      	cmp	r3, #11
 8008e16:	dc38      	bgt.n	8008e8a <USBD_CDC_Setup+0x11c>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <USBD_CDC_Setup+0xb4>
 8008e1c:	2b0a      	cmp	r3, #10
 8008e1e:	d014      	beq.n	8008e4a <USBD_CDC_Setup+0xdc>
 8008e20:	e033      	b.n	8008e8a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d107      	bne.n	8008e3c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e2c:	f107 030c 	add.w	r3, r7, #12
 8008e30:	2202      	movs	r2, #2
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f9a1 	bl	800a17c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e3a:	e02e      	b.n	8008e9a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 f932 	bl	800a0a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e44:	2302      	movs	r3, #2
 8008e46:	75fb      	strb	r3, [r7, #23]
          break;
 8008e48:	e027      	b.n	8008e9a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d107      	bne.n	8008e64 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e54:	f107 030f 	add.w	r3, r7, #15
 8008e58:	2201      	movs	r2, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 f98d 	bl	800a17c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e62:	e01a      	b.n	8008e9a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 f91e 	bl	800a0a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008e70:	e013      	b.n	8008e9a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d00d      	beq.n	8008e98 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 f912 	bl	800a0a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e84:	2302      	movs	r3, #2
 8008e86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e88:	e006      	b.n	8008e98 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f90b 	bl	800a0a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e92:	2302      	movs	r3, #2
 8008e94:	75fb      	strb	r3, [r7, #23]
          break;
 8008e96:	e000      	b.n	8008e9a <USBD_CDC_Setup+0x12c>
          break;
 8008e98:	bf00      	nop
      }
      break;
 8008e9a:	e006      	b.n	8008eaa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f902 	bl	800a0a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea8:	bf00      	nop
  }

  return ret;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ece:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d03a      	beq.n	8008f50 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	331c      	adds	r3, #28
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d029      	beq.n	8008f44 <USBD_CDC_DataIn+0x90>
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	331c      	adds	r3, #28
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	78f9      	ldrb	r1, [r7, #3]
 8008f04:	68b8      	ldr	r0, [r7, #8]
 8008f06:	460b      	mov	r3, r1
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4403      	add	r3, r0
 8008f10:	3320      	adds	r3, #32
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d110      	bne.n	8008f44 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	331c      	adds	r3, #28
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f36:	78f9      	ldrb	r1, [r7, #3]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fdcb 	bl	800aad8 <USBD_LL_Transmit>
 8008f42:	e003      	b.n	8008f4c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e000      	b.n	8008f52 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f50:	2302      	movs	r3, #2
  }
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 fdf6 	bl	800ab64 <USBD_LL_GetRxDataSize>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00d      	beq.n	8008fa6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4798      	blx	r3

    return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e000      	b.n	8008fa8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008fa6:	2302      	movs	r3, #2
  }
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fbe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d014      	beq.n	8008ff4 <USBD_CDC_EP0_RxReady+0x44>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008fd0:	2bff      	cmp	r3, #255	@ 0xff
 8008fd2:	d00f      	beq.n	8008ff4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008fe2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	22ff      	movs	r2, #255	@ 0xff
 8008ff0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2243      	movs	r2, #67	@ 0x43
 800900c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800900e:	4b03      	ldr	r3, [pc, #12]	@ (800901c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	bc80      	pop	{r7}
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	200000a8 	.word	0x200000a8

08009020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2243      	movs	r2, #67	@ 0x43
 800902c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800902e:	4b03      	ldr	r3, [pc, #12]	@ (800903c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000064 	.word	0x20000064

08009040 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2243      	movs	r2, #67	@ 0x43
 800904c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800904e:	4b03      	ldr	r3, [pc, #12]	@ (800905c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	200000ec 	.word	0x200000ec

08009060 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	220a      	movs	r2, #10
 800906c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800906e:	4b03      	ldr	r3, [pc, #12]	@ (800907c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	20000020 	.word	0x20000020

08009080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800908a:	2302      	movs	r3, #2
 800908c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d005      	beq.n	80090a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr

080090ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80090ca:	88fa      	ldrh	r2, [r7, #6]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	371c      	adds	r7, #28
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc80      	pop	{r7}
 80090dc:	4770      	bx	lr

080090de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr

08009104 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009112:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d017      	beq.n	800914e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	7c1b      	ldrb	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800912c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009130:	2101      	movs	r1, #1
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fcf3 	bl	800ab1e <USBD_LL_PrepareReceive>
 8009138:	e007      	b.n	800914a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009140:	2340      	movs	r3, #64	@ 0x40
 8009142:	2101      	movs	r1, #1
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 fcea 	bl	800ab1e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e000      	b.n	8009150 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800914e:	2302      	movs	r3, #2
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800916c:	2302      	movs	r3, #2
 800916e:	e01a      	b.n	80091a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	79fa      	ldrb	r2, [r7, #7]
 800919c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f001 fb58 	bl	800a854 <USBD_LL_Init>

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
 80091ce:	e001      	b.n	80091d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091d0:	2302      	movs	r3, #2
 80091d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr

080091e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 fb8d 	bl	800a908 <USBD_LL_Start>

  return USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	bc80      	pop	{r7}
 800920a:	4770      	bx	lr

0800920c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009218:	2302      	movs	r3, #2
 800921a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00c      	beq.n	8009240 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	78fa      	ldrb	r2, [r7, #3]
 8009230:	4611      	mov	r1, r2
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fed7 	bl	800a036 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092a4:	f003 031f 	and.w	r3, r3, #31
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d016      	beq.n	80092da <USBD_LL_SetupStage+0x6a>
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d81c      	bhi.n	80092ea <USBD_LL_SetupStage+0x7a>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <USBD_LL_SetupStage+0x4a>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d008      	beq.n	80092ca <USBD_LL_SetupStage+0x5a>
 80092b8:	e017      	b.n	80092ea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9ca 	bl	800965c <USBD_StdDevReq>
      break;
 80092c8:	e01a      	b.n	8009300 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa2c 	bl	8009730 <USBD_StdItfReq>
      break;
 80092d8:	e012      	b.n	8009300 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa6c 	bl	80097c0 <USBD_StdEPReq>
      break;
 80092e8:	e00a      	b.n	8009300 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fb65 	bl	800a9c8 <USBD_LL_StallEP>
      break;
 80092fe:	bf00      	nop
  }

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	460b      	mov	r3, r1
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d14b      	bne.n	80093b6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009324:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800932c:	2b03      	cmp	r3, #3
 800932e:	d134      	bne.n	800939a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	429a      	cmp	r2, r3
 800933a:	d919      	bls.n	8009370 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	1ad2      	subs	r2, r2, r3
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009352:	429a      	cmp	r2, r3
 8009354:	d203      	bcs.n	800935e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800935a:	b29b      	uxth	r3, r3
 800935c:	e002      	b.n	8009364 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009362:	b29b      	uxth	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 ff53 	bl	800a214 <USBD_CtlContinueRx>
 800936e:	e038      	b.n	80093e2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00a      	beq.n	8009392 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009382:	2b03      	cmp	r3, #3
 8009384:	d105      	bne.n	8009392 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 ff50 	bl	800a238 <USBD_CtlSendStatus>
 8009398:	e023      	b.n	80093e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093a0:	2b05      	cmp	r3, #5
 80093a2:	d11e      	bne.n	80093e2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093ac:	2100      	movs	r1, #0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f001 fb0a 	bl	800a9c8 <USBD_LL_StallEP>
 80093b4:	e015      	b.n	80093e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d108      	bne.n	80093de <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	7afa      	ldrb	r2, [r7, #11]
 80093d6:	4611      	mov	r1, r2
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	4798      	blx	r3
 80093dc:	e001      	b.n	80093e2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	e000      	b.n	80093e4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	460b      	mov	r3, r1
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d17f      	bne.n	8009500 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3314      	adds	r3, #20
 8009404:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800940c:	2b02      	cmp	r3, #2
 800940e:	d15c      	bne.n	80094ca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	429a      	cmp	r2, r3
 800941a:	d915      	bls.n	8009448 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	1ad2      	subs	r2, r2, r3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	b29b      	uxth	r3, r3
 8009430:	461a      	mov	r2, r3
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 febd 	bl	800a1b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800943a:	2300      	movs	r3, #0
 800943c:	2200      	movs	r2, #0
 800943e:	2100      	movs	r1, #0
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f001 fb6c 	bl	800ab1e <USBD_LL_PrepareReceive>
 8009446:	e04e      	b.n	80094e6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	6912      	ldr	r2, [r2, #16]
 8009450:	fbb3 f1f2 	udiv	r1, r3, r2
 8009454:	fb01 f202 	mul.w	r2, r1, r2
 8009458:	1a9b      	subs	r3, r3, r2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11c      	bne.n	8009498 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009466:	429a      	cmp	r2, r3
 8009468:	d316      	bcc.n	8009498 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009474:	429a      	cmp	r2, r3
 8009476:	d20f      	bcs.n	8009498 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fe99 	bl	800a1b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948a:	2300      	movs	r3, #0
 800948c:	2200      	movs	r2, #0
 800948e:	2100      	movs	r1, #0
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f001 fb44 	bl	800ab1e <USBD_LL_PrepareReceive>
 8009496:	e026      	b.n	80094e6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d105      	bne.n	80094ba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094ba:	2180      	movs	r1, #128	@ 0x80
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f001 fa83 	bl	800a9c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fecb 	bl	800a25e <USBD_CtlReceiveStatus>
 80094c8:	e00d      	b.n	80094e6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094d0:	2b04      	cmp	r3, #4
 80094d2:	d004      	beq.n	80094de <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d103      	bne.n	80094e6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094de:	2180      	movs	r1, #128	@ 0x80
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 fa71 	bl	800a9c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d11d      	bne.n	800952c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff fe81 	bl	80091f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094fe:	e015      	b.n	800952c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00d      	beq.n	8009528 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009512:	2b03      	cmp	r3, #3
 8009514:	d108      	bne.n	8009528 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	7afa      	ldrb	r2, [r7, #11]
 8009520:	4611      	mov	r1, r2
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	4798      	blx	r3
 8009526:	e001      	b.n	800952c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009528:	2302      	movs	r3, #2
 800952a:	e000      	b.n	800952e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800953e:	2340      	movs	r3, #64	@ 0x40
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f9fa 	bl	800a93e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2240      	movs	r2, #64	@ 0x40
 8009556:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800955a:	2340      	movs	r3, #64	@ 0x40
 800955c:	2200      	movs	r2, #0
 800955e:	2180      	movs	r1, #128	@ 0x80
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 f9ec 	bl	800a93e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2240      	movs	r2, #64	@ 0x40
 8009570:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6852      	ldr	r2, [r2, #4]
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	4611      	mov	r1, r2
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bc80      	pop	{r7}
 80095d4:	4770      	bx	lr

080095d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2204      	movs	r2, #4
 80095ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800960c:	2b04      	cmp	r3, #4
 800960e:	d105      	bne.n	800961c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr

08009628 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009636:	2b03      	cmp	r3, #3
 8009638:	d10b      	bne.n	8009652 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009672:	2b40      	cmp	r3, #64	@ 0x40
 8009674:	d005      	beq.n	8009682 <USBD_StdDevReq+0x26>
 8009676:	2b40      	cmp	r3, #64	@ 0x40
 8009678:	d84f      	bhi.n	800971a <USBD_StdDevReq+0xbe>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d009      	beq.n	8009692 <USBD_StdDevReq+0x36>
 800967e:	2b20      	cmp	r3, #32
 8009680:	d14b      	bne.n	800971a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	4798      	blx	r3
      break;
 8009690:	e048      	b.n	8009724 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	2b09      	cmp	r3, #9
 8009698:	d839      	bhi.n	800970e <USBD_StdDevReq+0xb2>
 800969a:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <USBD_StdDevReq+0x44>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096f1 	.word	0x080096f1
 80096a4:	08009705 	.word	0x08009705
 80096a8:	0800970f 	.word	0x0800970f
 80096ac:	080096fb 	.word	0x080096fb
 80096b0:	0800970f 	.word	0x0800970f
 80096b4:	080096d3 	.word	0x080096d3
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	0800970f 	.word	0x0800970f
 80096c0:	080096e7 	.word	0x080096e7
 80096c4:	080096dd 	.word	0x080096dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f9dc 	bl	8009a88 <USBD_GetDescriptor>
          break;
 80096d0:	e022      	b.n	8009718 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fb3f 	bl	8009d58 <USBD_SetAddress>
          break;
 80096da:	e01d      	b.n	8009718 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fb7e 	bl	8009de0 <USBD_SetConfig>
          break;
 80096e4:	e018      	b.n	8009718 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fc07 	bl	8009efc <USBD_GetConfig>
          break;
 80096ee:	e013      	b.n	8009718 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fc37 	bl	8009f66 <USBD_GetStatus>
          break;
 80096f8:	e00e      	b.n	8009718 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fc65 	bl	8009fcc <USBD_SetFeature>
          break;
 8009702:	e009      	b.n	8009718 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fc74 	bl	8009ff4 <USBD_ClrFeature>
          break;
 800970c:	e004      	b.n	8009718 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fcc9 	bl	800a0a8 <USBD_CtlError>
          break;
 8009716:	bf00      	nop
      }
      break;
 8009718:	e004      	b.n	8009724 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fcc3 	bl	800a0a8 <USBD_CtlError>
      break;
 8009722:	bf00      	nop
  }

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop

08009730 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009746:	2b40      	cmp	r3, #64	@ 0x40
 8009748:	d005      	beq.n	8009756 <USBD_StdItfReq+0x26>
 800974a:	2b40      	cmp	r3, #64	@ 0x40
 800974c:	d82e      	bhi.n	80097ac <USBD_StdItfReq+0x7c>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <USBD_StdItfReq+0x26>
 8009752:	2b20      	cmp	r3, #32
 8009754:	d12a      	bne.n	80097ac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	3b01      	subs	r3, #1
 800975e:	2b02      	cmp	r3, #2
 8009760:	d81d      	bhi.n	800979e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	889b      	ldrh	r3, [r3, #4]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	d813      	bhi.n	8009794 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	88db      	ldrh	r3, [r3, #6]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d110      	bne.n	80097a8 <USBD_StdItfReq+0x78>
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10d      	bne.n	80097a8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fd53 	bl	800a238 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009792:	e009      	b.n	80097a8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc86 	bl	800a0a8 <USBD_CtlError>
          break;
 800979c:	e004      	b.n	80097a8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fc81 	bl	800a0a8 <USBD_CtlError>
          break;
 80097a6:	e000      	b.n	80097aa <USBD_StdItfReq+0x7a>
          break;
 80097a8:	bf00      	nop
      }
      break;
 80097aa:	e004      	b.n	80097b6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc7a 	bl	800a0a8 <USBD_CtlError>
      break;
 80097b4:	bf00      	nop
  }

  return USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	889b      	ldrh	r3, [r3, #4]
 80097d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097dc:	2b40      	cmp	r3, #64	@ 0x40
 80097de:	d007      	beq.n	80097f0 <USBD_StdEPReq+0x30>
 80097e0:	2b40      	cmp	r3, #64	@ 0x40
 80097e2:	f200 8146 	bhi.w	8009a72 <USBD_StdEPReq+0x2b2>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <USBD_StdEPReq+0x40>
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	f040 8141 	bne.w	8009a72 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
      break;
 80097fe:	e13d      	b.n	8009a7c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009808:	2b20      	cmp	r3, #32
 800980a:	d10a      	bne.n	8009822 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	e12d      	b.n	8009a7e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b03      	cmp	r3, #3
 8009828:	d007      	beq.n	800983a <USBD_StdEPReq+0x7a>
 800982a:	2b03      	cmp	r3, #3
 800982c:	f300 811b 	bgt.w	8009a66 <USBD_StdEPReq+0x2a6>
 8009830:	2b00      	cmp	r3, #0
 8009832:	d072      	beq.n	800991a <USBD_StdEPReq+0x15a>
 8009834:	2b01      	cmp	r3, #1
 8009836:	d03a      	beq.n	80098ae <USBD_StdEPReq+0xee>
 8009838:	e115      	b.n	8009a66 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009840:	2b02      	cmp	r3, #2
 8009842:	d002      	beq.n	800984a <USBD_StdEPReq+0x8a>
 8009844:	2b03      	cmp	r3, #3
 8009846:	d015      	beq.n	8009874 <USBD_StdEPReq+0xb4>
 8009848:	e02b      	b.n	80098a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <USBD_StdEPReq+0xaa>
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	2b80      	cmp	r3, #128	@ 0x80
 8009854:	d009      	beq.n	800986a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 f8b4 	bl	800a9c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009860:	2180      	movs	r1, #128	@ 0x80
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 f8b0 	bl	800a9c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009868:	e020      	b.n	80098ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fc1b 	bl	800a0a8 <USBD_CtlError>
              break;
 8009872:	e01b      	b.n	80098ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	885b      	ldrh	r3, [r3, #2]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10e      	bne.n	800989a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00b      	beq.n	800989a <USBD_StdEPReq+0xda>
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	2b80      	cmp	r3, #128	@ 0x80
 8009886:	d008      	beq.n	800989a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	88db      	ldrh	r3, [r3, #6]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f001 f897 	bl	800a9c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fccc 	bl	800a238 <USBD_CtlSendStatus>

              break;
 80098a0:	e004      	b.n	80098ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fbff 	bl	800a0a8 <USBD_CtlError>
              break;
 80098aa:	bf00      	nop
          }
          break;
 80098ac:	e0e0      	b.n	8009a70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d002      	beq.n	80098be <USBD_StdEPReq+0xfe>
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d015      	beq.n	80098e8 <USBD_StdEPReq+0x128>
 80098bc:	e026      	b.n	800990c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <USBD_StdEPReq+0x11e>
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b80      	cmp	r3, #128	@ 0x80
 80098c8:	d009      	beq.n	80098de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 f87a 	bl	800a9c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098d4:	2180      	movs	r1, #128	@ 0x80
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 f876 	bl	800a9c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098dc:	e01c      	b.n	8009918 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fbe1 	bl	800a0a8 <USBD_CtlError>
              break;
 80098e6:	e017      	b.n	8009918 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	885b      	ldrh	r3, [r3, #2]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d112      	bne.n	8009916 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 f881 	bl	800aa06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fc97 	bl	800a238 <USBD_CtlSendStatus>
              }
              break;
 800990a:	e004      	b.n	8009916 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fbca 	bl	800a0a8 <USBD_CtlError>
              break;
 8009914:	e000      	b.n	8009918 <USBD_StdEPReq+0x158>
              break;
 8009916:	bf00      	nop
          }
          break;
 8009918:	e0aa      	b.n	8009a70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	2b02      	cmp	r3, #2
 8009922:	d002      	beq.n	800992a <USBD_StdEPReq+0x16a>
 8009924:	2b03      	cmp	r3, #3
 8009926:	d032      	beq.n	800998e <USBD_StdEPReq+0x1ce>
 8009928:	e097      	b.n	8009a5a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d007      	beq.n	8009940 <USBD_StdEPReq+0x180>
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b80      	cmp	r3, #128	@ 0x80
 8009934:	d004      	beq.n	8009940 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fbb5 	bl	800a0a8 <USBD_CtlError>
                break;
 800993e:	e091      	b.n	8009a64 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009944:	2b00      	cmp	r3, #0
 8009946:	da0b      	bge.n	8009960 <USBD_StdEPReq+0x1a0>
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	3310      	adds	r3, #16
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4413      	add	r3, r2
 800995c:	3304      	adds	r3, #4
 800995e:	e00b      	b.n	8009978 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	3304      	adds	r3, #4
 8009978:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2202      	movs	r2, #2
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fbf8 	bl	800a17c <USBD_CtlSendData>
              break;
 800998c:	e06a      	b.n	8009a64 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800998e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009992:	2b00      	cmp	r3, #0
 8009994:	da11      	bge.n	80099ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	f003 020f 	and.w	r2, r3, #15
 800999c:	6879      	ldr	r1, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	440b      	add	r3, r1
 80099a8:	3318      	adds	r3, #24
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d117      	bne.n	80099e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fb78 	bl	800a0a8 <USBD_CtlError>
                  break;
 80099b8:	e054      	b.n	8009a64 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	f003 020f 	and.w	r2, r3, #15
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d104      	bne.n	80099e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fb65 	bl	800a0a8 <USBD_CtlError>
                  break;
 80099de:	e041      	b.n	8009a64 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	da0b      	bge.n	8009a00 <USBD_StdEPReq+0x240>
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	3310      	adds	r3, #16
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	4413      	add	r3, r2
 80099fc:	3304      	adds	r3, #4
 80099fe:	e00b      	b.n	8009a18 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	4413      	add	r3, r2
 8009a16:	3304      	adds	r3, #4
 8009a18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <USBD_StdEPReq+0x266>
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2b80      	cmp	r3, #128	@ 0x80
 8009a24:	d103      	bne.n	8009a2e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e00e      	b.n	8009a4c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 f806 	bl	800aa44 <USBD_LL_IsStallEP>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2201      	movs	r2, #1
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	e002      	b.n	8009a4c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fb92 	bl	800a17c <USBD_CtlSendData>
              break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb23 	bl	800a0a8 <USBD_CtlError>
              break;
 8009a62:	bf00      	nop
          }
          break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fb1d 	bl	800a0a8 <USBD_CtlError>
          break;
 8009a6e:	bf00      	nop
      }
      break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fb17 	bl	800a0a8 <USBD_CtlError>
      break;
 8009a7a:	bf00      	nop
  }

  return ret;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	0a1b      	lsrs	r3, r3, #8
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	2b06      	cmp	r3, #6
 8009aaa:	f200 8128 	bhi.w	8009cfe <USBD_GetDescriptor+0x276>
 8009aae:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <USBD_GetDescriptor+0x2c>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ae9 	.word	0x08009ae9
 8009abc:	08009b29 	.word	0x08009b29
 8009ac0:	08009cff 	.word	0x08009cff
 8009ac4:	08009cff 	.word	0x08009cff
 8009ac8:	08009c9f 	.word	0x08009c9f
 8009acc:	08009ccb 	.word	0x08009ccb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	7c12      	ldrb	r2, [r2, #16]
 8009adc:	f107 0108 	add.w	r1, r7, #8
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
 8009ae4:	60f8      	str	r0, [r7, #12]
      break;
 8009ae6:	e112      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7c1b      	ldrb	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af8:	f107 0208 	add.w	r2, r7, #8
 8009afc:	4610      	mov	r0, r2
 8009afe:	4798      	blx	r3
 8009b00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	2202      	movs	r2, #2
 8009b08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b0a:	e100      	b.n	8009d0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	f107 0208 	add.w	r2, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3301      	adds	r3, #1
 8009b22:	2202      	movs	r2, #2
 8009b24:	701a      	strb	r2, [r3, #0]
      break;
 8009b26:	e0f2      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	885b      	ldrh	r3, [r3, #2]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	f200 80ac 	bhi.w	8009c8c <USBD_GetDescriptor+0x204>
 8009b34:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <USBD_GetDescriptor+0xb4>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b89 	.word	0x08009b89
 8009b44:	08009bbd 	.word	0x08009bbd
 8009b48:	08009bf1 	.word	0x08009bf1
 8009b4c:	08009c25 	.word	0x08009c25
 8009b50:	08009c59 	.word	0x08009c59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	7c12      	ldrb	r2, [r2, #16]
 8009b6c:	f107 0108 	add.w	r1, r7, #8
 8009b70:	4610      	mov	r0, r2
 8009b72:	4798      	blx	r3
 8009b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b76:	e091      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa94 	bl	800a0a8 <USBD_CtlError>
            err++;
 8009b80:	7afb      	ldrb	r3, [r7, #11]
 8009b82:	3301      	adds	r3, #1
 8009b84:	72fb      	strb	r3, [r7, #11]
          break;
 8009b86:	e089      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	7c12      	ldrb	r2, [r2, #16]
 8009ba0:	f107 0108 	add.w	r1, r7, #8
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
 8009ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009baa:	e077      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fa7a 	bl	800a0a8 <USBD_CtlError>
            err++;
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bba:	e06f      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00b      	beq.n	8009be0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	7c12      	ldrb	r2, [r2, #16]
 8009bd4:	f107 0108 	add.w	r1, r7, #8
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4798      	blx	r3
 8009bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bde:	e05d      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa60 	bl	800a0a8 <USBD_CtlError>
            err++;
 8009be8:	7afb      	ldrb	r3, [r7, #11]
 8009bea:	3301      	adds	r3, #1
 8009bec:	72fb      	strb	r3, [r7, #11]
          break;
 8009bee:	e055      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	7c12      	ldrb	r2, [r2, #16]
 8009c08:	f107 0108 	add.w	r1, r7, #8
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c12:	e043      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa46 	bl	800a0a8 <USBD_CtlError>
            err++;
 8009c1c:	7afb      	ldrb	r3, [r7, #11]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	72fb      	strb	r3, [r7, #11]
          break;
 8009c22:	e03b      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	7c12      	ldrb	r2, [r2, #16]
 8009c3c:	f107 0108 	add.w	r1, r7, #8
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c46:	e029      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fa2c 	bl	800a0a8 <USBD_CtlError>
            err++;
 8009c50:	7afb      	ldrb	r3, [r7, #11]
 8009c52:	3301      	adds	r3, #1
 8009c54:	72fb      	strb	r3, [r7, #11]
          break;
 8009c56:	e021      	b.n	8009c9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00b      	beq.n	8009c7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	7c12      	ldrb	r2, [r2, #16]
 8009c70:	f107 0108 	add.w	r1, r7, #8
 8009c74:	4610      	mov	r0, r2
 8009c76:	4798      	blx	r3
 8009c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c7a:	e00f      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fa12 	bl	800a0a8 <USBD_CtlError>
            err++;
 8009c84:	7afb      	ldrb	r3, [r7, #11]
 8009c86:	3301      	adds	r3, #1
 8009c88:	72fb      	strb	r3, [r7, #11]
          break;
 8009c8a:	e007      	b.n	8009c9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa0a 	bl	800a0a8 <USBD_CtlError>
          err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c9a:	e038      	b.n	8009d0e <USBD_GetDescriptor+0x286>
 8009c9c:	e037      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	7c1b      	ldrb	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cae:	f107 0208 	add.w	r2, r7, #8
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	4798      	blx	r3
 8009cb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cb8:	e029      	b.n	8009d0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9f3 	bl	800a0a8 <USBD_CtlError>
        err++;
 8009cc2:	7afb      	ldrb	r3, [r7, #11]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009cc8:	e021      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7c1b      	ldrb	r3, [r3, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cda:	f107 0208 	add.w	r2, r7, #8
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4798      	blx	r3
 8009ce2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	2207      	movs	r2, #7
 8009cea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cec:	e00f      	b.n	8009d0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f9d9 	bl	800a0a8 <USBD_CtlError>
        err++;
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8009cfc:	e007      	b.n	8009d0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f9d1 	bl	800a0a8 <USBD_CtlError>
      err++;
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d0c:	bf00      	nop
  }

  if (err != 0U)
 8009d0e:	7afb      	ldrb	r3, [r7, #11]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11c      	bne.n	8009d4e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d14:	893b      	ldrh	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d011      	beq.n	8009d3e <USBD_GetDescriptor+0x2b6>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88db      	ldrh	r3, [r3, #6]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00d      	beq.n	8009d3e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	88da      	ldrh	r2, [r3, #6]
 8009d26:	893b      	ldrh	r3, [r7, #8]
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	bf28      	it	cs
 8009d2c:	4613      	movcs	r3, r2
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d32:	893b      	ldrh	r3, [r7, #8]
 8009d34:	461a      	mov	r2, r3
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fa1f 	bl	800a17c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	88db      	ldrh	r3, [r3, #6]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d104      	bne.n	8009d50 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa76 	bl	800a238 <USBD_CtlSendStatus>
 8009d4c:	e000      	b.n	8009d50 <USBD_GetDescriptor+0x2c8>
    return;
 8009d4e:	bf00      	nop
    }
  }
}
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop

08009d58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	889b      	ldrh	r3, [r3, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d130      	bne.n	8009dcc <USBD_SetAddress+0x74>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	88db      	ldrh	r3, [r3, #6]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d12c      	bne.n	8009dcc <USBD_SetAddress+0x74>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d78:	d828      	bhi.n	8009dcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	885b      	ldrh	r3, [r3, #2]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d104      	bne.n	8009d9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f988 	bl	800a0a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d98:	e01d      	b.n	8009dd6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	7bfa      	ldrb	r2, [r7, #15]
 8009d9e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fe77 	bl	800aa9a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fa43 	bl	800a238 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d004      	beq.n	8009dc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc0:	e009      	b.n	8009dd6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dca:	e004      	b.n	8009dd6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f96a 	bl	800a0a8 <USBD_CtlError>
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	885b      	ldrh	r3, [r3, #2]
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	4b41      	ldr	r3, [pc, #260]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009df2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009df4:	4b40      	ldr	r3, [pc, #256]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d904      	bls.n	8009e06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f952 	bl	800a0a8 <USBD_CtlError>
 8009e04:	e075      	b.n	8009ef2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d002      	beq.n	8009e16 <USBD_SetConfig+0x36>
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d023      	beq.n	8009e5c <USBD_SetConfig+0x7c>
 8009e14:	e062      	b.n	8009edc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e16:	4b38      	ldr	r3, [pc, #224]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01a      	beq.n	8009e54 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e1e:	4b36      	ldr	r3, [pc, #216]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e30:	4b31      	ldr	r3, [pc, #196]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff f9e8 	bl	800920c <USBD_SetClassConfig>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d104      	bne.n	8009e4c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f92f 	bl	800a0a8 <USBD_CtlError>
            return;
 8009e4a:	e052      	b.n	8009ef2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f9f3 	bl	800a238 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e52:	e04e      	b.n	8009ef2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f9ef 	bl	800a238 <USBD_CtlSendStatus>
        break;
 8009e5a:	e04a      	b.n	8009ef2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e5c:	4b26      	ldr	r3, [pc, #152]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d112      	bne.n	8009e8a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009e6c:	4b22      	ldr	r3, [pc, #136]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e76:	4b20      	ldr	r3, [pc, #128]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff f9e4 	bl	800924a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f9d8 	bl	800a238 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e88:	e033      	b.n	8009ef2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d01d      	beq.n	8009ed4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff f9d2 	bl	800924a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009ea6:	4b14      	ldr	r3, [pc, #80]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009eb0:	4b11      	ldr	r3, [pc, #68]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff f9a8 	bl	800920c <USBD_SetClassConfig>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d104      	bne.n	8009ecc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f8ef 	bl	800a0a8 <USBD_CtlError>
            return;
 8009eca:	e012      	b.n	8009ef2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f9b3 	bl	800a238 <USBD_CtlSendStatus>
        break;
 8009ed2:	e00e      	b.n	8009ef2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f9af 	bl	800a238 <USBD_CtlSendStatus>
        break;
 8009eda:	e00a      	b.n	8009ef2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8e2 	bl	800a0a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ee4:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <USBD_SetConfig+0x118>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff f9ad 	bl	800924a <USBD_ClrClassConfig>
        break;
 8009ef0:	bf00      	nop
    }
  }
}
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	2000055c 	.word	0x2000055c

08009efc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	88db      	ldrh	r3, [r3, #6]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d004      	beq.n	8009f18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8c9 	bl	800a0a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f16:	e022      	b.n	8009f5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	dc02      	bgt.n	8009f28 <USBD_GetConfig+0x2c>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dc03      	bgt.n	8009f2e <USBD_GetConfig+0x32>
 8009f26:	e015      	b.n	8009f54 <USBD_GetConfig+0x58>
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d00b      	beq.n	8009f44 <USBD_GetConfig+0x48>
 8009f2c:	e012      	b.n	8009f54 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3308      	adds	r3, #8
 8009f38:	2201      	movs	r2, #1
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f91d 	bl	800a17c <USBD_CtlSendData>
        break;
 8009f42:	e00c      	b.n	8009f5e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3304      	adds	r3, #4
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f915 	bl	800a17c <USBD_CtlSendData>
        break;
 8009f52:	e004      	b.n	8009f5e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f8a6 	bl	800a0a8 <USBD_CtlError>
        break;
 8009f5c:	bf00      	nop
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b082      	sub	sp, #8
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f76:	3b01      	subs	r3, #1
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d81e      	bhi.n	8009fba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	88db      	ldrh	r3, [r3, #6]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d004      	beq.n	8009f8e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f88e 	bl	800a0a8 <USBD_CtlError>
        break;
 8009f8c:	e01a      	b.n	8009fc4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d005      	beq.n	8009faa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f043 0202 	orr.w	r2, r3, #2
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	330c      	adds	r3, #12
 8009fae:	2202      	movs	r2, #2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f8e2 	bl	800a17c <USBD_CtlSendData>
      break;
 8009fb8:	e004      	b.n	8009fc4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f873 	bl	800a0a8 <USBD_CtlError>
      break;
 8009fc2:	bf00      	nop
  }
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d106      	bne.n	8009fec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f926 	bl	800a238 <USBD_CtlSendStatus>
  }
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a004:	3b01      	subs	r3, #1
 800a006:	2b02      	cmp	r3, #2
 800a008:	d80b      	bhi.n	800a022 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	885b      	ldrh	r3, [r3, #2]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d10c      	bne.n	800a02c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f90c 	bl	800a238 <USBD_CtlSendStatus>
      }
      break;
 800a020:	e004      	b.n	800a02c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f83f 	bl	800a0a8 <USBD_CtlError>
      break;
 800a02a:	e000      	b.n	800a02e <USBD_ClrFeature+0x3a>
      break;
 800a02c:	bf00      	nop
  }
}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	785a      	ldrb	r2, [r3, #1]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	3302      	adds	r3, #2
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	3303      	adds	r3, #3
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	021b      	lsls	r3, r3, #8
 800a060:	b29b      	uxth	r3, r3
 800a062:	4413      	add	r3, r2
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	3304      	adds	r3, #4
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	3305      	adds	r3, #5
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4413      	add	r3, r2
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	3306      	adds	r3, #6
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	3307      	adds	r3, #7
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	b29b      	uxth	r3, r3
 800a096:	4413      	add	r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	80da      	strh	r2, [r3, #6]

}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bc80      	pop	{r7}
 800a0a6:	4770      	bx	lr

0800a0a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0b2:	2180      	movs	r1, #128	@ 0x80
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fc87 	bl	800a9c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fc83 	bl	800a9c8 <USBD_LL_StallEP>
}
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b086      	sub	sp, #24
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d032      	beq.n	800a146 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f834 	bl	800a14e <USBD_GetLen>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	75fa      	strb	r2, [r7, #23]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4413      	add	r3, r2
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	75fa      	strb	r2, [r7, #23]
 800a10c:	461a      	mov	r2, r3
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4413      	add	r3, r2
 800a112:	2203      	movs	r2, #3
 800a114:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a116:	e012      	b.n	800a13e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	60fa      	str	r2, [r7, #12]
 800a11e:	7dfa      	ldrb	r2, [r7, #23]
 800a120:	1c51      	adds	r1, r2, #1
 800a122:	75f9      	strb	r1, [r7, #23]
 800a124:	4611      	mov	r1, r2
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	440a      	add	r2, r1
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	75fa      	strb	r2, [r7, #23]
 800a134:	461a      	mov	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4413      	add	r3, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e8      	bne.n	800a118 <USBD_GetString+0x4e>
    }
  }
}
 800a146:	bf00      	nop
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a14e:	b480      	push	{r7}
 800a150:	b085      	sub	sp, #20
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a15a:	e005      	b.n	800a168 <USBD_GetLen+0x1a>
  {
    len++;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	3301      	adds	r3, #1
 800a160:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3301      	adds	r3, #1
 800a166:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1f5      	bne.n	800a15c <USBD_GetLen+0xe>
  }

  return len;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr

0800a17c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2202      	movs	r2, #2
 800a18e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a192:	88fa      	ldrh	r2, [r7, #6]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a198:	88fa      	ldrh	r2, [r7, #6]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 fc97 	bl	800aad8 <USBD_LL_Transmit>

  return USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1c2:	88fb      	ldrh	r3, [r7, #6]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fc85 	bl	800aad8 <USBD_LL_Transmit>

  return USBD_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a1ee:	88fa      	ldrh	r2, [r7, #6]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a1f6:	88fa      	ldrh	r2, [r7, #6]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	2100      	movs	r1, #0
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 fc8a 	bl	800ab1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a222:	88fb      	ldrh	r3, [r7, #6]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	2100      	movs	r1, #0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 fc78 	bl	800ab1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2204      	movs	r2, #4
 800a244:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a248:	2300      	movs	r3, #0
 800a24a:	2200      	movs	r2, #0
 800a24c:	2100      	movs	r1, #0
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fc42 	bl	800aad8 <USBD_LL_Transmit>

  return USBD_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2205      	movs	r2, #5
 800a26a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a26e:	2300      	movs	r3, #0
 800a270:	2200      	movs	r2, #0
 800a272:	2100      	movs	r1, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fc52 	bl	800ab1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	4613      	mov	r3, r2
 800a290:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a29a:	4b1e      	ldr	r3, [pc, #120]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a29c:	7a5b      	ldrb	r3, [r3, #9]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d831      	bhi.n	800a308 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2a6:	7a5b      	ldrb	r3, [r3, #9]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	4b19      	ldr	r3, [pc, #100]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a2b2:	4b18      	ldr	r3, [pc, #96]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2b4:	7a5b      	ldrb	r3, [r3, #9]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	4a16      	ldr	r2, [pc, #88]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a2c2:	4b14      	ldr	r3, [pc, #80]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2c4:	7a5b      	ldrb	r3, [r3, #9]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4b12      	ldr	r3, [pc, #72]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2cc:	4413      	add	r3, r2
 800a2ce:	79fa      	ldrb	r2, [r7, #7]
 800a2d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2d2:	4b10      	ldr	r3, [pc, #64]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2d4:	7a5b      	ldrb	r3, [r3, #9]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	b2d1      	uxtb	r1, r2
 800a2dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a314 <FATFS_LinkDriverEx+0x90>)
 800a2de:	7251      	strb	r1, [r2, #9]
 800a2e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2e2:	7dbb      	ldrb	r3, [r7, #22]
 800a2e4:	3330      	adds	r3, #48	@ 0x30
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	223a      	movs	r2, #58	@ 0x3a
 800a2f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	222f      	movs	r2, #47	@ 0x2f
 800a2fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	3303      	adds	r3, #3
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	bc80      	pop	{r7}
 800a312:	4770      	bx	lr
 800a314:	20000560 	.word	0x20000560

0800a318 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a322:	2200      	movs	r2, #0
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff ffac 	bl	800a284 <FATFS_LinkDriverEx>
 800a32c:	4603      	mov	r3, r0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a33c:	2200      	movs	r2, #0
 800a33e:	4912      	ldr	r1, [pc, #72]	@ (800a388 <MX_USB_DEVICE_Init+0x50>)
 800a340:	4812      	ldr	r0, [pc, #72]	@ (800a38c <MX_USB_DEVICE_Init+0x54>)
 800a342:	f7fe ff09 	bl	8009158 <USBD_Init>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a34c:	f7f7 fbc2 	bl	8001ad4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a350:	490f      	ldr	r1, [pc, #60]	@ (800a390 <MX_USB_DEVICE_Init+0x58>)
 800a352:	480e      	ldr	r0, [pc, #56]	@ (800a38c <MX_USB_DEVICE_Init+0x54>)
 800a354:	f7fe ff2b 	bl	80091ae <USBD_RegisterClass>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a35e:	f7f7 fbb9 	bl	8001ad4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a362:	490c      	ldr	r1, [pc, #48]	@ (800a394 <MX_USB_DEVICE_Init+0x5c>)
 800a364:	4809      	ldr	r0, [pc, #36]	@ (800a38c <MX_USB_DEVICE_Init+0x54>)
 800a366:	f7fe fe8b 	bl	8009080 <USBD_CDC_RegisterInterface>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a370:	f7f7 fbb0 	bl	8001ad4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a374:	4805      	ldr	r0, [pc, #20]	@ (800a38c <MX_USB_DEVICE_Init+0x54>)
 800a376:	f7fe ff33 	bl	80091e0 <USBD_Start>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a380:	f7f7 fba8 	bl	8001ad4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a384:	bf00      	nop
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20000140 	.word	0x20000140
 800a38c:	2000056c 	.word	0x2000056c
 800a390:	2000002c 	.word	0x2000002c
 800a394:	20000130 	.word	0x20000130

0800a398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a39c:	2200      	movs	r2, #0
 800a39e:	4905      	ldr	r1, [pc, #20]	@ (800a3b4 <CDC_Init_FS+0x1c>)
 800a3a0:	4805      	ldr	r0, [pc, #20]	@ (800a3b8 <CDC_Init_FS+0x20>)
 800a3a2:	f7fe fe83 	bl	80090ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3a6:	4905      	ldr	r1, [pc, #20]	@ (800a3bc <CDC_Init_FS+0x24>)
 800a3a8:	4803      	ldr	r0, [pc, #12]	@ (800a3b8 <CDC_Init_FS+0x20>)
 800a3aa:	f7fe fe98 	bl	80090de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000c30 	.word	0x20000c30
 800a3b8:	2000056c 	.word	0x2000056c
 800a3bc:	20000830 	.word	0x20000830

0800a3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	6039      	str	r1, [r7, #0]
 800a3da:	71fb      	strb	r3, [r7, #7]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	2b23      	cmp	r3, #35	@ 0x23
 800a3e4:	d84a      	bhi.n	800a47c <CDC_Control_FS+0xac>
 800a3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ec <CDC_Control_FS+0x1c>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a47d 	.word	0x0800a47d
 800a3f0:	0800a47d 	.word	0x0800a47d
 800a3f4:	0800a47d 	.word	0x0800a47d
 800a3f8:	0800a47d 	.word	0x0800a47d
 800a3fc:	0800a47d 	.word	0x0800a47d
 800a400:	0800a47d 	.word	0x0800a47d
 800a404:	0800a47d 	.word	0x0800a47d
 800a408:	0800a47d 	.word	0x0800a47d
 800a40c:	0800a47d 	.word	0x0800a47d
 800a410:	0800a47d 	.word	0x0800a47d
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a47d 	.word	0x0800a47d
 800a41c:	0800a47d 	.word	0x0800a47d
 800a420:	0800a47d 	.word	0x0800a47d
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a47d 	.word	0x0800a47d
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a47d 	.word	0x0800a47d
 800a434:	0800a47d 	.word	0x0800a47d
 800a438:	0800a47d 	.word	0x0800a47d
 800a43c:	0800a47d 	.word	0x0800a47d
 800a440:	0800a47d 	.word	0x0800a47d
 800a444:	0800a47d 	.word	0x0800a47d
 800a448:	0800a47d 	.word	0x0800a47d
 800a44c:	0800a47d 	.word	0x0800a47d
 800a450:	0800a47d 	.word	0x0800a47d
 800a454:	0800a47d 	.word	0x0800a47d
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a47d 	.word	0x0800a47d
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	0800a47d 	.word	0x0800a47d
 800a468:	0800a47d 	.word	0x0800a47d
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a47d 	.word	0x0800a47d
 800a474:	0800a47d 	.word	0x0800a47d
 800a478:	0800a47d 	.word	0x0800a47d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a47c:	bf00      	nop
  }

  return (USBD_OK);
 800a47e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a480:	4618      	mov	r0, r3
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	bc80      	pop	{r7}
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop

0800a48c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a496:	6879      	ldr	r1, [r7, #4]
 800a498:	4805      	ldr	r0, [pc, #20]	@ (800a4b0 <CDC_Receive_FS+0x24>)
 800a49a:	f7fe fe20 	bl	80090de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a49e:	4804      	ldr	r0, [pc, #16]	@ (800a4b0 <CDC_Receive_FS+0x24>)
 800a4a0:	f7fe fe30 	bl	8009104 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a4a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	2000056c 	.word	0x2000056c

0800a4b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2212      	movs	r2, #18
 800a4c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4c6:	4b03      	ldr	r3, [pc, #12]	@ (800a4d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	2000015c 	.word	0x2000015c

0800a4d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	6039      	str	r1, [r7, #0]
 800a4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2204      	movs	r2, #4
 800a4e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4ea:	4b03      	ldr	r3, [pc, #12]	@ (800a4f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bc80      	pop	{r7}
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	20000170 	.word	0x20000170

0800a4fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	4907      	ldr	r1, [pc, #28]	@ (800a530 <USBD_FS_ProductStrDescriptor+0x34>)
 800a512:	4808      	ldr	r0, [pc, #32]	@ (800a534 <USBD_FS_ProductStrDescriptor+0x38>)
 800a514:	f7ff fdd9 	bl	800a0ca <USBD_GetString>
 800a518:	e004      	b.n	800a524 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4904      	ldr	r1, [pc, #16]	@ (800a530 <USBD_FS_ProductStrDescriptor+0x34>)
 800a51e:	4805      	ldr	r0, [pc, #20]	@ (800a534 <USBD_FS_ProductStrDescriptor+0x38>)
 800a520:	f7ff fdd3 	bl	800a0ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800a524:	4b02      	ldr	r3, [pc, #8]	@ (800a530 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20001030 	.word	0x20001030
 800a534:	0800f2f0 	.word	0x0800f2f0

0800a538 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	6039      	str	r1, [r7, #0]
 800a542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	4904      	ldr	r1, [pc, #16]	@ (800a558 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a548:	4804      	ldr	r0, [pc, #16]	@ (800a55c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a54a:	f7ff fdbe 	bl	800a0ca <USBD_GetString>
  return USBD_StrDesc;
 800a54e:	4b02      	ldr	r3, [pc, #8]	@ (800a558 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20001030 	.word	0x20001030
 800a55c:	0800f308 	.word	0x0800f308

0800a560 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	6039      	str	r1, [r7, #0]
 800a56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	221a      	movs	r2, #26
 800a570:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a572:	f000 f843 	bl	800a5fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a576:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000174 	.word	0x20000174

0800a584 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	6039      	str	r1, [r7, #0]
 800a58e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d105      	bne.n	800a5a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	4907      	ldr	r1, [pc, #28]	@ (800a5b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a59a:	4808      	ldr	r0, [pc, #32]	@ (800a5bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a59c:	f7ff fd95 	bl	800a0ca <USBD_GetString>
 800a5a0:	e004      	b.n	800a5ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4904      	ldr	r1, [pc, #16]	@ (800a5b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5a6:	4805      	ldr	r0, [pc, #20]	@ (800a5bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5a8:	f7ff fd8f 	bl	800a0ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5ac:	4b02      	ldr	r3, [pc, #8]	@ (800a5b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20001030 	.word	0x20001030
 800a5bc:	0800f31c 	.word	0x0800f31c

0800a5c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d105      	bne.n	800a5de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	4907      	ldr	r1, [pc, #28]	@ (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5d6:	4808      	ldr	r0, [pc, #32]	@ (800a5f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5d8:	f7ff fd77 	bl	800a0ca <USBD_GetString>
 800a5dc:	e004      	b.n	800a5e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4904      	ldr	r1, [pc, #16]	@ (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5e2:	4805      	ldr	r0, [pc, #20]	@ (800a5f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5e4:	f7ff fd71 	bl	800a0ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5e8:	4b02      	ldr	r3, [pc, #8]	@ (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20001030 	.word	0x20001030
 800a5f8:	0800f328 	.word	0x0800f328

0800a5fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a602:	4b0f      	ldr	r3, [pc, #60]	@ (800a640 <Get_SerialNum+0x44>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a608:	4b0e      	ldr	r3, [pc, #56]	@ (800a644 <Get_SerialNum+0x48>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a60e:	4b0e      	ldr	r3, [pc, #56]	@ (800a648 <Get_SerialNum+0x4c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4413      	add	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d009      	beq.n	800a636 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a622:	2208      	movs	r2, #8
 800a624:	4909      	ldr	r1, [pc, #36]	@ (800a64c <Get_SerialNum+0x50>)
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 f814 	bl	800a654 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a62c:	2204      	movs	r2, #4
 800a62e:	4908      	ldr	r1, [pc, #32]	@ (800a650 <Get_SerialNum+0x54>)
 800a630:	68b8      	ldr	r0, [r7, #8]
 800a632:	f000 f80f 	bl	800a654 <IntToUnicode>
  }
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	1ffff7e8 	.word	0x1ffff7e8
 800a644:	1ffff7ec 	.word	0x1ffff7ec
 800a648:	1ffff7f0 	.word	0x1ffff7f0
 800a64c:	20000176 	.word	0x20000176
 800a650:	20000186 	.word	0x20000186

0800a654 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4613      	mov	r3, r2
 800a660:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a666:	2300      	movs	r3, #0
 800a668:	75fb      	strb	r3, [r7, #23]
 800a66a:	e027      	b.n	800a6bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	0f1b      	lsrs	r3, r3, #28
 800a670:	2b09      	cmp	r3, #9
 800a672:	d80b      	bhi.n	800a68c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	0f1b      	lsrs	r3, r3, #28
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	4619      	mov	r1, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	440b      	add	r3, r1
 800a684:	3230      	adds	r2, #48	@ 0x30
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	e00a      	b.n	800a6a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	0f1b      	lsrs	r3, r3, #28
 800a690:	b2da      	uxtb	r2, r3
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	4619      	mov	r1, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	440b      	add	r3, r1
 800a69c:	3237      	adds	r2, #55	@ 0x37
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	011b      	lsls	r3, r3, #4
 800a6a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	75fb      	strb	r3, [r7, #23]
 800a6bc:	7dfa      	ldrb	r2, [r7, #23]
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d3d3      	bcc.n	800a66c <IntToUnicode+0x18>
  }
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bc80      	pop	{r7}
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a714 <HAL_PCD_MspInit+0x44>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d113      	bne.n	800a70a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <HAL_PCD_MspInit+0x48>)
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a718 <HAL_PCD_MspInit+0x48>)
 800a6e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6ec:	61d3      	str	r3, [r2, #28]
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <HAL_PCD_MspInit+0x48>)
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	2014      	movs	r0, #20
 800a700:	f7f7 fe55 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a704:	2014      	movs	r0, #20
 800a706:	f7f7 fe6e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	40005c00 	.word	0x40005c00
 800a718:	40021000 	.word	0x40021000

0800a71c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a730:	4619      	mov	r1, r3
 800a732:	4610      	mov	r0, r2
 800a734:	f7fe fd9c 	bl	8009270 <USBD_LL_SetupStage>
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a752:	78fa      	ldrb	r2, [r7, #3]
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	440b      	add	r3, r1
 800a760:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	4619      	mov	r1, r3
 800a76a:	f7fe fdce 	bl	800930a <USBD_LL_DataOutStage>
}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a788:	78fa      	ldrb	r2, [r7, #3]
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	440b      	add	r3, r1
 800a796:	3324      	adds	r3, #36	@ 0x24
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	4619      	mov	r1, r3
 800a79e:	f7fe fe25 	bl	80093ec <USBD_LL_DataInStage>
}
 800a7a2:	bf00      	nop
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fe ff35 	bl	8009628 <USBD_LL_SOF>
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	799b      	ldrb	r3, [r3, #6]
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d001      	beq.n	800a7de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7da:	f7f7 f97b 	bl	8001ad4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7e4:	7bfa      	ldrb	r2, [r7, #15]
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fe fee5 	bl	80095b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fe9e 	bl	8009536 <USBD_LL_Reset>
}
 800a7fa:	bf00      	nop
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fedf 	bl	80095d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7a9b      	ldrb	r3, [r3, #10]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a820:	4b04      	ldr	r3, [pc, #16]	@ (800a834 <HAL_PCD_SuspendCallback+0x30>)
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	4a03      	ldr	r2, [pc, #12]	@ (800a834 <HAL_PCD_SuspendCallback+0x30>)
 800a826:	f043 0306 	orr.w	r3, r3, #6
 800a82a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	e000ed00 	.word	0xe000ed00

0800a838 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fed9 	bl	80095fe <USBD_LL_Resume>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a85c:	4a28      	ldr	r2, [pc, #160]	@ (800a900 <USBD_LL_Init+0xac>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a26      	ldr	r2, [pc, #152]	@ (800a900 <USBD_LL_Init+0xac>)
 800a868:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a86c:	4b24      	ldr	r3, [pc, #144]	@ (800a900 <USBD_LL_Init+0xac>)
 800a86e:	4a25      	ldr	r2, [pc, #148]	@ (800a904 <USBD_LL_Init+0xb0>)
 800a870:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a872:	4b23      	ldr	r3, [pc, #140]	@ (800a900 <USBD_LL_Init+0xac>)
 800a874:	2208      	movs	r2, #8
 800a876:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a878:	4b21      	ldr	r3, [pc, #132]	@ (800a900 <USBD_LL_Init+0xac>)
 800a87a:	2202      	movs	r2, #2
 800a87c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a87e:	4b20      	ldr	r3, [pc, #128]	@ (800a900 <USBD_LL_Init+0xac>)
 800a880:	2200      	movs	r2, #0
 800a882:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a884:	4b1e      	ldr	r3, [pc, #120]	@ (800a900 <USBD_LL_Init+0xac>)
 800a886:	2200      	movs	r2, #0
 800a888:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a88a:	4b1d      	ldr	r3, [pc, #116]	@ (800a900 <USBD_LL_Init+0xac>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a890:	481b      	ldr	r0, [pc, #108]	@ (800a900 <USBD_LL_Init+0xac>)
 800a892:	f7f8 f955 	bl	8002b40 <HAL_PCD_Init>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a89c:	f7f7 f91a 	bl	8001ad4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8a6:	2318      	movs	r3, #24
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	f7f9 fe66 	bl	800457c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8b6:	2358      	movs	r3, #88	@ 0x58
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2180      	movs	r1, #128	@ 0x80
 800a8bc:	f7f9 fe5e 	bl	800457c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8c6:	23c0      	movs	r3, #192	@ 0xc0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2181      	movs	r1, #129	@ 0x81
 800a8cc:	f7f9 fe56 	bl	800457c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2101      	movs	r1, #1
 800a8de:	f7f9 fe4d 	bl	800457c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	2182      	movs	r1, #130	@ 0x82
 800a8f0:	f7f9 fe44 	bl	800457c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20001230 	.word	0x20001230
 800a904:	40005c00 	.word	0x40005c00

0800a908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a91e:	4618      	mov	r0, r3
 800a920:	f7f8 fa04 	bl	8002d2c <HAL_PCD_Start>
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a928:	7bfb      	ldrb	r3, [r7, #15]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 f94e 	bl	800abcc <USBD_Get_USB_Status>
 800a930:	4603      	mov	r3, r0
 800a932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a934:	7bbb      	ldrb	r3, [r7, #14]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	461a      	mov	r2, r3
 800a94c:	4603      	mov	r3, r0
 800a94e:	70fb      	strb	r3, [r7, #3]
 800a950:	460b      	mov	r3, r1
 800a952:	70bb      	strb	r3, [r7, #2]
 800a954:	4613      	mov	r3, r2
 800a956:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a966:	78bb      	ldrb	r3, [r7, #2]
 800a968:	883a      	ldrh	r2, [r7, #0]
 800a96a:	78f9      	ldrb	r1, [r7, #3]
 800a96c:	f7f8 fb58 	bl	8003020 <HAL_PCD_EP_Open>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f928 	bl	800abcc <USBD_Get_USB_Status>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a980:	7bbb      	ldrb	r3, [r7, #14]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9a4:	78fa      	ldrb	r2, [r7, #3]
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7f8 fb96 	bl	80030da <HAL_PCD_EP_Close>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 f909 	bl	800abcc <USBD_Get_USB_Status>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f8 fc3e 	bl	8003268 <HAL_PCD_EP_SetStall>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 f8ea 	bl	800abcc <USBD_Get_USB_Status>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa20:	78fa      	ldrb	r2, [r7, #3]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7f8 fc7f 	bl	8003328 <HAL_PCD_EP_ClrStall>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f8cb 	bl	800abcc <USBD_Get_USB_Status>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	da0b      	bge.n	800aa78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa60:	78fb      	ldrb	r3, [r7, #3]
 800aa62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa66:	68f9      	ldr	r1, [r7, #12]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	440b      	add	r3, r1
 800aa72:	3312      	adds	r3, #18
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	e00b      	b.n	800aa90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	4613      	mov	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	440b      	add	r3, r1
 800aa8a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800aa8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bc80      	pop	{r7}
 800aa98:	4770      	bx	lr

0800aa9a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aab4:	78fa      	ldrb	r2, [r7, #3]
 800aab6:	4611      	mov	r1, r2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f8 fa8d 	bl	8002fd8 <HAL_PCD_SetAddress>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 f881 	bl	800abcc <USBD_Get_USB_Status>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aace:	7bbb      	ldrb	r3, [r7, #14]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	461a      	mov	r2, r3
 800aae4:	460b      	mov	r3, r1
 800aae6:	72fb      	strb	r3, [r7, #11]
 800aae8:	4613      	mov	r3, r2
 800aaea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aafa:	893b      	ldrh	r3, [r7, #8]
 800aafc:	7af9      	ldrb	r1, [r7, #11]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	f7f8 fb7b 	bl	80031fa <HAL_PCD_EP_Transmit>
 800ab04:	4603      	mov	r3, r0
 800ab06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 f85e 	bl	800abcc <USBD_Get_USB_Status>
 800ab10:	4603      	mov	r3, r0
 800ab12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab14:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b086      	sub	sp, #24
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	72fb      	strb	r3, [r7, #11]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab40:	893b      	ldrh	r3, [r7, #8]
 800ab42:	7af9      	ldrb	r1, [r7, #11]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	f7f8 fb10 	bl	800316a <HAL_PCD_EP_Receive>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 f83b 	bl	800abcc <USBD_Get_USB_Status>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab5a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7f8 fb26 	bl	80031cc <HAL_PCD_EP_GetRxCount>
 800ab80:	4603      	mov	r3, r0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab94:	4b02      	ldr	r3, [pc, #8]	@ (800aba0 <USBD_static_malloc+0x14>)
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bc80      	pop	{r7}
 800ab9e:	4770      	bx	lr
 800aba0:	20001508 	.word	0x20001508

0800aba4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]

}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr

0800abb6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	460b      	mov	r3, r1
 800abc0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800abc2:	bf00      	nop
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bc80      	pop	{r7}
 800abca:	4770      	bx	lr

0800abcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d817      	bhi.n	800ac10 <USBD_Get_USB_Status+0x44>
 800abe0:	a201      	add	r2, pc, #4	@ (adr r2, 800abe8 <USBD_Get_USB_Status+0x1c>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800abf9 	.word	0x0800abf9
 800abec:	0800abff 	.word	0x0800abff
 800abf0:	0800ac05 	.word	0x0800ac05
 800abf4:	0800ac0b 	.word	0x0800ac0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
    break;
 800abfc:	e00b      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abfe:	2302      	movs	r3, #2
 800ac00:	73fb      	strb	r3, [r7, #15]
    break;
 800ac02:	e008      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac04:	2301      	movs	r3, #1
 800ac06:	73fb      	strb	r3, [r7, #15]
    break;
 800ac08:	e005      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0e:	e002      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac10:	2302      	movs	r3, #2
 800ac12:	73fb      	strb	r3, [r7, #15]
    break;
 800ac14:	bf00      	nop
  }
  return usb_status;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop

0800ac24 <__cvt>:
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	bfbb      	ittet	lt
 800ac2e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800ac32:	461d      	movlt	r5, r3
 800ac34:	2300      	movge	r3, #0
 800ac36:	232d      	movlt	r3, #45	@ 0x2d
 800ac38:	b088      	sub	sp, #32
 800ac3a:	4614      	mov	r4, r2
 800ac3c:	bfb8      	it	lt
 800ac3e:	4614      	movlt	r4, r2
 800ac40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ac44:	7013      	strb	r3, [r2, #0]
 800ac46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac48:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800ac4c:	f023 0820 	bic.w	r8, r3, #32
 800ac50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac54:	d005      	beq.n	800ac62 <__cvt+0x3e>
 800ac56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ac5a:	d100      	bne.n	800ac5e <__cvt+0x3a>
 800ac5c:	3601      	adds	r6, #1
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e000      	b.n	800ac64 <__cvt+0x40>
 800ac62:	2303      	movs	r3, #3
 800ac64:	aa07      	add	r2, sp, #28
 800ac66:	9204      	str	r2, [sp, #16]
 800ac68:	aa06      	add	r2, sp, #24
 800ac6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ac6e:	e9cd 3600 	strd	r3, r6, [sp]
 800ac72:	4622      	mov	r2, r4
 800ac74:	462b      	mov	r3, r5
 800ac76:	f001 f87b 	bl	800bd70 <_dtoa_r>
 800ac7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac7e:	4607      	mov	r7, r0
 800ac80:	d119      	bne.n	800acb6 <__cvt+0x92>
 800ac82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac84:	07db      	lsls	r3, r3, #31
 800ac86:	d50e      	bpl.n	800aca6 <__cvt+0x82>
 800ac88:	eb00 0906 	add.w	r9, r0, r6
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	f7f5 fe88 	bl	80009a8 <__aeabi_dcmpeq>
 800ac98:	b108      	cbz	r0, 800ac9e <__cvt+0x7a>
 800ac9a:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac9e:	2230      	movs	r2, #48	@ 0x30
 800aca0:	9b07      	ldr	r3, [sp, #28]
 800aca2:	454b      	cmp	r3, r9
 800aca4:	d31e      	bcc.n	800ace4 <__cvt+0xc0>
 800aca6:	4638      	mov	r0, r7
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800acac:	1bdb      	subs	r3, r3, r7
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	b008      	add	sp, #32
 800acb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acba:	eb00 0906 	add.w	r9, r0, r6
 800acbe:	d1e5      	bne.n	800ac8c <__cvt+0x68>
 800acc0:	7803      	ldrb	r3, [r0, #0]
 800acc2:	2b30      	cmp	r3, #48	@ 0x30
 800acc4:	d10a      	bne.n	800acdc <__cvt+0xb8>
 800acc6:	2200      	movs	r2, #0
 800acc8:	2300      	movs	r3, #0
 800acca:	4620      	mov	r0, r4
 800accc:	4629      	mov	r1, r5
 800acce:	f7f5 fe6b 	bl	80009a8 <__aeabi_dcmpeq>
 800acd2:	b918      	cbnz	r0, 800acdc <__cvt+0xb8>
 800acd4:	f1c6 0601 	rsb	r6, r6, #1
 800acd8:	f8ca 6000 	str.w	r6, [sl]
 800acdc:	f8da 3000 	ldr.w	r3, [sl]
 800ace0:	4499      	add	r9, r3
 800ace2:	e7d3      	b.n	800ac8c <__cvt+0x68>
 800ace4:	1c59      	adds	r1, r3, #1
 800ace6:	9107      	str	r1, [sp, #28]
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e7d9      	b.n	800aca0 <__cvt+0x7c>

0800acec <__exponent>:
 800acec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acee:	2900      	cmp	r1, #0
 800acf0:	bfb6      	itet	lt
 800acf2:	232d      	movlt	r3, #45	@ 0x2d
 800acf4:	232b      	movge	r3, #43	@ 0x2b
 800acf6:	4249      	neglt	r1, r1
 800acf8:	2909      	cmp	r1, #9
 800acfa:	7002      	strb	r2, [r0, #0]
 800acfc:	7043      	strb	r3, [r0, #1]
 800acfe:	dd29      	ble.n	800ad54 <__exponent+0x68>
 800ad00:	f10d 0307 	add.w	r3, sp, #7
 800ad04:	461d      	mov	r5, r3
 800ad06:	270a      	movs	r7, #10
 800ad08:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	fb07 1416 	mls	r4, r7, r6, r1
 800ad12:	3430      	adds	r4, #48	@ 0x30
 800ad14:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad18:	460c      	mov	r4, r1
 800ad1a:	2c63      	cmp	r4, #99	@ 0x63
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad22:	dcf1      	bgt.n	800ad08 <__exponent+0x1c>
 800ad24:	3130      	adds	r1, #48	@ 0x30
 800ad26:	1e94      	subs	r4, r2, #2
 800ad28:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad2c:	4623      	mov	r3, r4
 800ad2e:	1c41      	adds	r1, r0, #1
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	d30a      	bcc.n	800ad4a <__exponent+0x5e>
 800ad34:	f10d 0309 	add.w	r3, sp, #9
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	42ac      	cmp	r4, r5
 800ad3c:	bf88      	it	hi
 800ad3e:	2300      	movhi	r3, #0
 800ad40:	3302      	adds	r3, #2
 800ad42:	4403      	add	r3, r0
 800ad44:	1a18      	subs	r0, r3, r0
 800ad46:	b003      	add	sp, #12
 800ad48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ad4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ad52:	e7ed      	b.n	800ad30 <__exponent+0x44>
 800ad54:	2330      	movs	r3, #48	@ 0x30
 800ad56:	3130      	adds	r1, #48	@ 0x30
 800ad58:	7083      	strb	r3, [r0, #2]
 800ad5a:	70c1      	strb	r1, [r0, #3]
 800ad5c:	1d03      	adds	r3, r0, #4
 800ad5e:	e7f1      	b.n	800ad44 <__exponent+0x58>

0800ad60 <_printf_float>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	b091      	sub	sp, #68	@ 0x44
 800ad66:	460c      	mov	r4, r1
 800ad68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800ad6c:	4616      	mov	r6, r2
 800ad6e:	461f      	mov	r7, r3
 800ad70:	4605      	mov	r5, r0
 800ad72:	f000 feeb 	bl	800bb4c <_localeconv_r>
 800ad76:	6803      	ldr	r3, [r0, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	9308      	str	r3, [sp, #32]
 800ad7c:	f7f5 f9e8 	bl	8000150 <strlen>
 800ad80:	2300      	movs	r3, #0
 800ad82:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad84:	f8d8 3000 	ldr.w	r3, [r8]
 800ad88:	9009      	str	r0, [sp, #36]	@ 0x24
 800ad8a:	3307      	adds	r3, #7
 800ad8c:	f023 0307 	bic.w	r3, r3, #7
 800ad90:	f103 0208 	add.w	r2, r3, #8
 800ad94:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad98:	f8d4 b000 	ldr.w	fp, [r4]
 800ad9c:	f8c8 2000 	str.w	r2, [r8]
 800ada0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ada4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ada8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adaa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800adae:	f04f 32ff 	mov.w	r2, #4294967295
 800adb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800adba:	4b9c      	ldr	r3, [pc, #624]	@ (800b02c <_printf_float+0x2cc>)
 800adbc:	f7f5 fe26 	bl	8000a0c <__aeabi_dcmpun>
 800adc0:	bb70      	cbnz	r0, 800ae20 <_printf_float+0xc0>
 800adc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	4b98      	ldr	r3, [pc, #608]	@ (800b02c <_printf_float+0x2cc>)
 800adcc:	f7f5 fe00 	bl	80009d0 <__aeabi_dcmple>
 800add0:	bb30      	cbnz	r0, 800ae20 <_printf_float+0xc0>
 800add2:	2200      	movs	r2, #0
 800add4:	2300      	movs	r3, #0
 800add6:	4640      	mov	r0, r8
 800add8:	4649      	mov	r1, r9
 800adda:	f7f5 fdef 	bl	80009bc <__aeabi_dcmplt>
 800adde:	b110      	cbz	r0, 800ade6 <_printf_float+0x86>
 800ade0:	232d      	movs	r3, #45	@ 0x2d
 800ade2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ade6:	4a92      	ldr	r2, [pc, #584]	@ (800b030 <_printf_float+0x2d0>)
 800ade8:	4b92      	ldr	r3, [pc, #584]	@ (800b034 <_printf_float+0x2d4>)
 800adea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adee:	bf8c      	ite	hi
 800adf0:	4690      	movhi	r8, r2
 800adf2:	4698      	movls	r8, r3
 800adf4:	2303      	movs	r3, #3
 800adf6:	f04f 0900 	mov.w	r9, #0
 800adfa:	6123      	str	r3, [r4, #16]
 800adfc:	f02b 0304 	bic.w	r3, fp, #4
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	4633      	mov	r3, r6
 800ae04:	4621      	mov	r1, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	9700      	str	r7, [sp, #0]
 800ae0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ae0c:	f000 f9d4 	bl	800b1b8 <_printf_common>
 800ae10:	3001      	adds	r0, #1
 800ae12:	f040 8090 	bne.w	800af36 <_printf_float+0x1d6>
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	b011      	add	sp, #68	@ 0x44
 800ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae20:	4642      	mov	r2, r8
 800ae22:	464b      	mov	r3, r9
 800ae24:	4640      	mov	r0, r8
 800ae26:	4649      	mov	r1, r9
 800ae28:	f7f5 fdf0 	bl	8000a0c <__aeabi_dcmpun>
 800ae2c:	b148      	cbz	r0, 800ae42 <_printf_float+0xe2>
 800ae2e:	464b      	mov	r3, r9
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bfb8      	it	lt
 800ae34:	232d      	movlt	r3, #45	@ 0x2d
 800ae36:	4a80      	ldr	r2, [pc, #512]	@ (800b038 <_printf_float+0x2d8>)
 800ae38:	bfb8      	it	lt
 800ae3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ae3e:	4b7f      	ldr	r3, [pc, #508]	@ (800b03c <_printf_float+0x2dc>)
 800ae40:	e7d3      	b.n	800adea <_printf_float+0x8a>
 800ae42:	6863      	ldr	r3, [r4, #4]
 800ae44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	d13f      	bne.n	800aecc <_printf_float+0x16c>
 800ae4c:	2306      	movs	r3, #6
 800ae4e:	6063      	str	r3, [r4, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	9206      	str	r2, [sp, #24]
 800ae5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ae5c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800ae60:	aa0d      	add	r2, sp, #52	@ 0x34
 800ae62:	9203      	str	r2, [sp, #12]
 800ae64:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800ae68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	4642      	mov	r2, r8
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	4628      	mov	r0, r5
 800ae74:	464b      	mov	r3, r9
 800ae76:	910a      	str	r1, [sp, #40]	@ 0x28
 800ae78:	f7ff fed4 	bl	800ac24 <__cvt>
 800ae7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae7e:	4680      	mov	r8, r0
 800ae80:	2947      	cmp	r1, #71	@ 0x47
 800ae82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ae84:	d128      	bne.n	800aed8 <_printf_float+0x178>
 800ae86:	1cc8      	adds	r0, r1, #3
 800ae88:	db02      	blt.n	800ae90 <_printf_float+0x130>
 800ae8a:	6863      	ldr	r3, [r4, #4]
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	dd40      	ble.n	800af12 <_printf_float+0x1b2>
 800ae90:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae94:	fa5f fa8a 	uxtb.w	sl, sl
 800ae98:	4652      	mov	r2, sl
 800ae9a:	3901      	subs	r1, #1
 800ae9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aea0:	910d      	str	r1, [sp, #52]	@ 0x34
 800aea2:	f7ff ff23 	bl	800acec <__exponent>
 800aea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aea8:	4681      	mov	r9, r0
 800aeaa:	1813      	adds	r3, r2, r0
 800aeac:	2a01      	cmp	r2, #1
 800aeae:	6123      	str	r3, [r4, #16]
 800aeb0:	dc02      	bgt.n	800aeb8 <_printf_float+0x158>
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	07d2      	lsls	r2, r2, #31
 800aeb6:	d501      	bpl.n	800aebc <_printf_float+0x15c>
 800aeb8:	3301      	adds	r3, #1
 800aeba:	6123      	str	r3, [r4, #16]
 800aebc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d09e      	beq.n	800ae02 <_printf_float+0xa2>
 800aec4:	232d      	movs	r3, #45	@ 0x2d
 800aec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeca:	e79a      	b.n	800ae02 <_printf_float+0xa2>
 800aecc:	2947      	cmp	r1, #71	@ 0x47
 800aece:	d1bf      	bne.n	800ae50 <_printf_float+0xf0>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1bd      	bne.n	800ae50 <_printf_float+0xf0>
 800aed4:	2301      	movs	r3, #1
 800aed6:	e7ba      	b.n	800ae4e <_printf_float+0xee>
 800aed8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aedc:	d9dc      	bls.n	800ae98 <_printf_float+0x138>
 800aede:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aee2:	d118      	bne.n	800af16 <_printf_float+0x1b6>
 800aee4:	2900      	cmp	r1, #0
 800aee6:	6863      	ldr	r3, [r4, #4]
 800aee8:	dd0b      	ble.n	800af02 <_printf_float+0x1a2>
 800aeea:	6121      	str	r1, [r4, #16]
 800aeec:	b913      	cbnz	r3, 800aef4 <_printf_float+0x194>
 800aeee:	6822      	ldr	r2, [r4, #0]
 800aef0:	07d0      	lsls	r0, r2, #31
 800aef2:	d502      	bpl.n	800aefa <_printf_float+0x19a>
 800aef4:	3301      	adds	r3, #1
 800aef6:	440b      	add	r3, r1
 800aef8:	6123      	str	r3, [r4, #16]
 800aefa:	f04f 0900 	mov.w	r9, #0
 800aefe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af00:	e7dc      	b.n	800aebc <_printf_float+0x15c>
 800af02:	b913      	cbnz	r3, 800af0a <_printf_float+0x1aa>
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	07d2      	lsls	r2, r2, #31
 800af08:	d501      	bpl.n	800af0e <_printf_float+0x1ae>
 800af0a:	3302      	adds	r3, #2
 800af0c:	e7f4      	b.n	800aef8 <_printf_float+0x198>
 800af0e:	2301      	movs	r3, #1
 800af10:	e7f2      	b.n	800aef8 <_printf_float+0x198>
 800af12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af18:	4299      	cmp	r1, r3
 800af1a:	db05      	blt.n	800af28 <_printf_float+0x1c8>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	6121      	str	r1, [r4, #16]
 800af20:	07d8      	lsls	r0, r3, #31
 800af22:	d5ea      	bpl.n	800aefa <_printf_float+0x19a>
 800af24:	1c4b      	adds	r3, r1, #1
 800af26:	e7e7      	b.n	800aef8 <_printf_float+0x198>
 800af28:	2900      	cmp	r1, #0
 800af2a:	bfcc      	ite	gt
 800af2c:	2201      	movgt	r2, #1
 800af2e:	f1c1 0202 	rsble	r2, r1, #2
 800af32:	4413      	add	r3, r2
 800af34:	e7e0      	b.n	800aef8 <_printf_float+0x198>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	055a      	lsls	r2, r3, #21
 800af3a:	d407      	bmi.n	800af4c <_printf_float+0x1ec>
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	4642      	mov	r2, r8
 800af40:	4631      	mov	r1, r6
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	d12b      	bne.n	800afa2 <_printf_float+0x242>
 800af4a:	e764      	b.n	800ae16 <_printf_float+0xb6>
 800af4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af50:	f240 80dc 	bls.w	800b10c <_printf_float+0x3ac>
 800af54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af58:	2200      	movs	r2, #0
 800af5a:	2300      	movs	r3, #0
 800af5c:	f7f5 fd24 	bl	80009a8 <__aeabi_dcmpeq>
 800af60:	2800      	cmp	r0, #0
 800af62:	d033      	beq.n	800afcc <_printf_float+0x26c>
 800af64:	2301      	movs	r3, #1
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	4a35      	ldr	r2, [pc, #212]	@ (800b040 <_printf_float+0x2e0>)
 800af6c:	47b8      	blx	r7
 800af6e:	3001      	adds	r0, #1
 800af70:	f43f af51 	beq.w	800ae16 <_printf_float+0xb6>
 800af74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800af78:	4543      	cmp	r3, r8
 800af7a:	db02      	blt.n	800af82 <_printf_float+0x222>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	07d8      	lsls	r0, r3, #31
 800af80:	d50f      	bpl.n	800afa2 <_printf_float+0x242>
 800af82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	47b8      	blx	r7
 800af8c:	3001      	adds	r0, #1
 800af8e:	f43f af42 	beq.w	800ae16 <_printf_float+0xb6>
 800af92:	f04f 0900 	mov.w	r9, #0
 800af96:	f108 38ff 	add.w	r8, r8, #4294967295
 800af9a:	f104 0a1a 	add.w	sl, r4, #26
 800af9e:	45c8      	cmp	r8, r9
 800afa0:	dc09      	bgt.n	800afb6 <_printf_float+0x256>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	079b      	lsls	r3, r3, #30
 800afa6:	f100 8102 	bmi.w	800b1ae <_printf_float+0x44e>
 800afaa:	68e0      	ldr	r0, [r4, #12]
 800afac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afae:	4298      	cmp	r0, r3
 800afb0:	bfb8      	it	lt
 800afb2:	4618      	movlt	r0, r3
 800afb4:	e731      	b.n	800ae1a <_printf_float+0xba>
 800afb6:	2301      	movs	r3, #1
 800afb8:	4652      	mov	r2, sl
 800afba:	4631      	mov	r1, r6
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b8      	blx	r7
 800afc0:	3001      	adds	r0, #1
 800afc2:	f43f af28 	beq.w	800ae16 <_printf_float+0xb6>
 800afc6:	f109 0901 	add.w	r9, r9, #1
 800afca:	e7e8      	b.n	800af9e <_printf_float+0x23e>
 800afcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dc38      	bgt.n	800b044 <_printf_float+0x2e4>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	4a19      	ldr	r2, [pc, #100]	@ (800b040 <_printf_float+0x2e0>)
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f af1a 	beq.w	800ae16 <_printf_float+0xb6>
 800afe2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800afe6:	ea59 0303 	orrs.w	r3, r9, r3
 800afea:	d102      	bne.n	800aff2 <_printf_float+0x292>
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	07d9      	lsls	r1, r3, #31
 800aff0:	d5d7      	bpl.n	800afa2 <_printf_float+0x242>
 800aff2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	f43f af0a 	beq.w	800ae16 <_printf_float+0xb6>
 800b002:	f04f 0a00 	mov.w	sl, #0
 800b006:	f104 0b1a 	add.w	fp, r4, #26
 800b00a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b00c:	425b      	negs	r3, r3
 800b00e:	4553      	cmp	r3, sl
 800b010:	dc01      	bgt.n	800b016 <_printf_float+0x2b6>
 800b012:	464b      	mov	r3, r9
 800b014:	e793      	b.n	800af3e <_printf_float+0x1de>
 800b016:	2301      	movs	r3, #1
 800b018:	465a      	mov	r2, fp
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f aef8 	beq.w	800ae16 <_printf_float+0xb6>
 800b026:	f10a 0a01 	add.w	sl, sl, #1
 800b02a:	e7ee      	b.n	800b00a <_printf_float+0x2aa>
 800b02c:	7fefffff 	.word	0x7fefffff
 800b030:	0800f37a 	.word	0x0800f37a
 800b034:	0800f376 	.word	0x0800f376
 800b038:	0800f382 	.word	0x0800f382
 800b03c:	0800f37e 	.word	0x0800f37e
 800b040:	0800f386 	.word	0x0800f386
 800b044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b046:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b04a:	4553      	cmp	r3, sl
 800b04c:	bfa8      	it	ge
 800b04e:	4653      	movge	r3, sl
 800b050:	2b00      	cmp	r3, #0
 800b052:	4699      	mov	r9, r3
 800b054:	dc36      	bgt.n	800b0c4 <_printf_float+0x364>
 800b056:	f04f 0b00 	mov.w	fp, #0
 800b05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b05e:	f104 021a 	add.w	r2, r4, #26
 800b062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b064:	930a      	str	r3, [sp, #40]	@ 0x28
 800b066:	eba3 0309 	sub.w	r3, r3, r9
 800b06a:	455b      	cmp	r3, fp
 800b06c:	dc31      	bgt.n	800b0d2 <_printf_float+0x372>
 800b06e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b070:	459a      	cmp	sl, r3
 800b072:	dc3a      	bgt.n	800b0ea <_printf_float+0x38a>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	07da      	lsls	r2, r3, #31
 800b078:	d437      	bmi.n	800b0ea <_printf_float+0x38a>
 800b07a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b07c:	ebaa 0903 	sub.w	r9, sl, r3
 800b080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b082:	ebaa 0303 	sub.w	r3, sl, r3
 800b086:	4599      	cmp	r9, r3
 800b088:	bfa8      	it	ge
 800b08a:	4699      	movge	r9, r3
 800b08c:	f1b9 0f00 	cmp.w	r9, #0
 800b090:	dc33      	bgt.n	800b0fa <_printf_float+0x39a>
 800b092:	f04f 0800 	mov.w	r8, #0
 800b096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b09a:	f104 0b1a 	add.w	fp, r4, #26
 800b09e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0a0:	ebaa 0303 	sub.w	r3, sl, r3
 800b0a4:	eba3 0309 	sub.w	r3, r3, r9
 800b0a8:	4543      	cmp	r3, r8
 800b0aa:	f77f af7a 	ble.w	800afa2 <_printf_float+0x242>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	465a      	mov	r2, fp
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	47b8      	blx	r7
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	f43f aeac 	beq.w	800ae16 <_printf_float+0xb6>
 800b0be:	f108 0801 	add.w	r8, r8, #1
 800b0c2:	e7ec      	b.n	800b09e <_printf_float+0x33e>
 800b0c4:	4642      	mov	r2, r8
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d1c2      	bne.n	800b056 <_printf_float+0x2f6>
 800b0d0:	e6a1      	b.n	800ae16 <_printf_float+0xb6>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	f43f ae9a 	beq.w	800ae16 <_printf_float+0xb6>
 800b0e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0e4:	f10b 0b01 	add.w	fp, fp, #1
 800b0e8:	e7bb      	b.n	800b062 <_printf_float+0x302>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d1c0      	bne.n	800b07a <_printf_float+0x31a>
 800b0f8:	e68d      	b.n	800ae16 <_printf_float+0xb6>
 800b0fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	4631      	mov	r1, r6
 800b100:	4628      	mov	r0, r5
 800b102:	4442      	add	r2, r8
 800b104:	47b8      	blx	r7
 800b106:	3001      	adds	r0, #1
 800b108:	d1c3      	bne.n	800b092 <_printf_float+0x332>
 800b10a:	e684      	b.n	800ae16 <_printf_float+0xb6>
 800b10c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b110:	f1ba 0f01 	cmp.w	sl, #1
 800b114:	dc01      	bgt.n	800b11a <_printf_float+0x3ba>
 800b116:	07db      	lsls	r3, r3, #31
 800b118:	d536      	bpl.n	800b188 <_printf_float+0x428>
 800b11a:	2301      	movs	r3, #1
 800b11c:	4642      	mov	r2, r8
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	47b8      	blx	r7
 800b124:	3001      	adds	r0, #1
 800b126:	f43f ae76 	beq.w	800ae16 <_printf_float+0xb6>
 800b12a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b12e:	4631      	mov	r1, r6
 800b130:	4628      	mov	r0, r5
 800b132:	47b8      	blx	r7
 800b134:	3001      	adds	r0, #1
 800b136:	f43f ae6e 	beq.w	800ae16 <_printf_float+0xb6>
 800b13a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b13e:	2200      	movs	r2, #0
 800b140:	2300      	movs	r3, #0
 800b142:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b146:	f7f5 fc2f 	bl	80009a8 <__aeabi_dcmpeq>
 800b14a:	b9c0      	cbnz	r0, 800b17e <_printf_float+0x41e>
 800b14c:	4653      	mov	r3, sl
 800b14e:	f108 0201 	add.w	r2, r8, #1
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	d10c      	bne.n	800b176 <_printf_float+0x416>
 800b15c:	e65b      	b.n	800ae16 <_printf_float+0xb6>
 800b15e:	2301      	movs	r3, #1
 800b160:	465a      	mov	r2, fp
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	f43f ae54 	beq.w	800ae16 <_printf_float+0xb6>
 800b16e:	f108 0801 	add.w	r8, r8, #1
 800b172:	45d0      	cmp	r8, sl
 800b174:	dbf3      	blt.n	800b15e <_printf_float+0x3fe>
 800b176:	464b      	mov	r3, r9
 800b178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b17c:	e6e0      	b.n	800af40 <_printf_float+0x1e0>
 800b17e:	f04f 0800 	mov.w	r8, #0
 800b182:	f104 0b1a 	add.w	fp, r4, #26
 800b186:	e7f4      	b.n	800b172 <_printf_float+0x412>
 800b188:	2301      	movs	r3, #1
 800b18a:	4642      	mov	r2, r8
 800b18c:	e7e1      	b.n	800b152 <_printf_float+0x3f2>
 800b18e:	2301      	movs	r3, #1
 800b190:	464a      	mov	r2, r9
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	f43f ae3c 	beq.w	800ae16 <_printf_float+0xb6>
 800b19e:	f108 0801 	add.w	r8, r8, #1
 800b1a2:	68e3      	ldr	r3, [r4, #12]
 800b1a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b1a6:	1a5b      	subs	r3, r3, r1
 800b1a8:	4543      	cmp	r3, r8
 800b1aa:	dcf0      	bgt.n	800b18e <_printf_float+0x42e>
 800b1ac:	e6fd      	b.n	800afaa <_printf_float+0x24a>
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	f104 0919 	add.w	r9, r4, #25
 800b1b6:	e7f4      	b.n	800b1a2 <_printf_float+0x442>

0800b1b8 <_printf_common>:
 800b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	4616      	mov	r6, r2
 800b1be:	4698      	mov	r8, r3
 800b1c0:	688a      	ldr	r2, [r1, #8]
 800b1c2:	690b      	ldr	r3, [r1, #16]
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	bfb8      	it	lt
 800b1ca:	4613      	movlt	r3, r2
 800b1cc:	6033      	str	r3, [r6, #0]
 800b1ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1d8:	b10a      	cbz	r2, 800b1de <_printf_common+0x26>
 800b1da:	3301      	adds	r3, #1
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	0699      	lsls	r1, r3, #26
 800b1e2:	bf42      	ittt	mi
 800b1e4:	6833      	ldrmi	r3, [r6, #0]
 800b1e6:	3302      	addmi	r3, #2
 800b1e8:	6033      	strmi	r3, [r6, #0]
 800b1ea:	6825      	ldr	r5, [r4, #0]
 800b1ec:	f015 0506 	ands.w	r5, r5, #6
 800b1f0:	d106      	bne.n	800b200 <_printf_common+0x48>
 800b1f2:	f104 0a19 	add.w	sl, r4, #25
 800b1f6:	68e3      	ldr	r3, [r4, #12]
 800b1f8:	6832      	ldr	r2, [r6, #0]
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	42ab      	cmp	r3, r5
 800b1fe:	dc2b      	bgt.n	800b258 <_printf_common+0xa0>
 800b200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	3b00      	subs	r3, #0
 800b208:	bf18      	it	ne
 800b20a:	2301      	movne	r3, #1
 800b20c:	0692      	lsls	r2, r2, #26
 800b20e:	d430      	bmi.n	800b272 <_printf_common+0xba>
 800b210:	4641      	mov	r1, r8
 800b212:	4638      	mov	r0, r7
 800b214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b218:	47c8      	blx	r9
 800b21a:	3001      	adds	r0, #1
 800b21c:	d023      	beq.n	800b266 <_printf_common+0xae>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	6922      	ldr	r2, [r4, #16]
 800b222:	f003 0306 	and.w	r3, r3, #6
 800b226:	2b04      	cmp	r3, #4
 800b228:	bf14      	ite	ne
 800b22a:	2500      	movne	r5, #0
 800b22c:	6833      	ldreq	r3, [r6, #0]
 800b22e:	f04f 0600 	mov.w	r6, #0
 800b232:	bf08      	it	eq
 800b234:	68e5      	ldreq	r5, [r4, #12]
 800b236:	f104 041a 	add.w	r4, r4, #26
 800b23a:	bf08      	it	eq
 800b23c:	1aed      	subeq	r5, r5, r3
 800b23e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b242:	bf08      	it	eq
 800b244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b248:	4293      	cmp	r3, r2
 800b24a:	bfc4      	itt	gt
 800b24c:	1a9b      	subgt	r3, r3, r2
 800b24e:	18ed      	addgt	r5, r5, r3
 800b250:	42b5      	cmp	r5, r6
 800b252:	d11a      	bne.n	800b28a <_printf_common+0xd2>
 800b254:	2000      	movs	r0, #0
 800b256:	e008      	b.n	800b26a <_printf_common+0xb2>
 800b258:	2301      	movs	r3, #1
 800b25a:	4652      	mov	r2, sl
 800b25c:	4641      	mov	r1, r8
 800b25e:	4638      	mov	r0, r7
 800b260:	47c8      	blx	r9
 800b262:	3001      	adds	r0, #1
 800b264:	d103      	bne.n	800b26e <_printf_common+0xb6>
 800b266:	f04f 30ff 	mov.w	r0, #4294967295
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	3501      	adds	r5, #1
 800b270:	e7c1      	b.n	800b1f6 <_printf_common+0x3e>
 800b272:	2030      	movs	r0, #48	@ 0x30
 800b274:	18e1      	adds	r1, r4, r3
 800b276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b280:	4422      	add	r2, r4
 800b282:	3302      	adds	r3, #2
 800b284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b288:	e7c2      	b.n	800b210 <_printf_common+0x58>
 800b28a:	2301      	movs	r3, #1
 800b28c:	4622      	mov	r2, r4
 800b28e:	4641      	mov	r1, r8
 800b290:	4638      	mov	r0, r7
 800b292:	47c8      	blx	r9
 800b294:	3001      	adds	r0, #1
 800b296:	d0e6      	beq.n	800b266 <_printf_common+0xae>
 800b298:	3601      	adds	r6, #1
 800b29a:	e7d9      	b.n	800b250 <_printf_common+0x98>

0800b29c <_printf_i>:
 800b29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	7e0f      	ldrb	r7, [r1, #24]
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	2f78      	cmp	r7, #120	@ 0x78
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	469a      	mov	sl, r3
 800b2ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2b2:	d807      	bhi.n	800b2c4 <_printf_i+0x28>
 800b2b4:	2f62      	cmp	r7, #98	@ 0x62
 800b2b6:	d80a      	bhi.n	800b2ce <_printf_i+0x32>
 800b2b8:	2f00      	cmp	r7, #0
 800b2ba:	f000 80d1 	beq.w	800b460 <_printf_i+0x1c4>
 800b2be:	2f58      	cmp	r7, #88	@ 0x58
 800b2c0:	f000 80b8 	beq.w	800b434 <_printf_i+0x198>
 800b2c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2cc:	e03a      	b.n	800b344 <_printf_i+0xa8>
 800b2ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2d2:	2b15      	cmp	r3, #21
 800b2d4:	d8f6      	bhi.n	800b2c4 <_printf_i+0x28>
 800b2d6:	a101      	add	r1, pc, #4	@ (adr r1, 800b2dc <_printf_i+0x40>)
 800b2d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2dc:	0800b335 	.word	0x0800b335
 800b2e0:	0800b349 	.word	0x0800b349
 800b2e4:	0800b2c5 	.word	0x0800b2c5
 800b2e8:	0800b2c5 	.word	0x0800b2c5
 800b2ec:	0800b2c5 	.word	0x0800b2c5
 800b2f0:	0800b2c5 	.word	0x0800b2c5
 800b2f4:	0800b349 	.word	0x0800b349
 800b2f8:	0800b2c5 	.word	0x0800b2c5
 800b2fc:	0800b2c5 	.word	0x0800b2c5
 800b300:	0800b2c5 	.word	0x0800b2c5
 800b304:	0800b2c5 	.word	0x0800b2c5
 800b308:	0800b447 	.word	0x0800b447
 800b30c:	0800b373 	.word	0x0800b373
 800b310:	0800b401 	.word	0x0800b401
 800b314:	0800b2c5 	.word	0x0800b2c5
 800b318:	0800b2c5 	.word	0x0800b2c5
 800b31c:	0800b469 	.word	0x0800b469
 800b320:	0800b2c5 	.word	0x0800b2c5
 800b324:	0800b373 	.word	0x0800b373
 800b328:	0800b2c5 	.word	0x0800b2c5
 800b32c:	0800b2c5 	.word	0x0800b2c5
 800b330:	0800b409 	.word	0x0800b409
 800b334:	6833      	ldr	r3, [r6, #0]
 800b336:	1d1a      	adds	r2, r3, #4
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6032      	str	r2, [r6, #0]
 800b33c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b344:	2301      	movs	r3, #1
 800b346:	e09c      	b.n	800b482 <_printf_i+0x1e6>
 800b348:	6833      	ldr	r3, [r6, #0]
 800b34a:	6820      	ldr	r0, [r4, #0]
 800b34c:	1d19      	adds	r1, r3, #4
 800b34e:	6031      	str	r1, [r6, #0]
 800b350:	0606      	lsls	r6, r0, #24
 800b352:	d501      	bpl.n	800b358 <_printf_i+0xbc>
 800b354:	681d      	ldr	r5, [r3, #0]
 800b356:	e003      	b.n	800b360 <_printf_i+0xc4>
 800b358:	0645      	lsls	r5, r0, #25
 800b35a:	d5fb      	bpl.n	800b354 <_printf_i+0xb8>
 800b35c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b360:	2d00      	cmp	r5, #0
 800b362:	da03      	bge.n	800b36c <_printf_i+0xd0>
 800b364:	232d      	movs	r3, #45	@ 0x2d
 800b366:	426d      	negs	r5, r5
 800b368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b36c:	230a      	movs	r3, #10
 800b36e:	4858      	ldr	r0, [pc, #352]	@ (800b4d0 <_printf_i+0x234>)
 800b370:	e011      	b.n	800b396 <_printf_i+0xfa>
 800b372:	6821      	ldr	r1, [r4, #0]
 800b374:	6833      	ldr	r3, [r6, #0]
 800b376:	0608      	lsls	r0, r1, #24
 800b378:	f853 5b04 	ldr.w	r5, [r3], #4
 800b37c:	d402      	bmi.n	800b384 <_printf_i+0xe8>
 800b37e:	0649      	lsls	r1, r1, #25
 800b380:	bf48      	it	mi
 800b382:	b2ad      	uxthmi	r5, r5
 800b384:	2f6f      	cmp	r7, #111	@ 0x6f
 800b386:	6033      	str	r3, [r6, #0]
 800b388:	bf14      	ite	ne
 800b38a:	230a      	movne	r3, #10
 800b38c:	2308      	moveq	r3, #8
 800b38e:	4850      	ldr	r0, [pc, #320]	@ (800b4d0 <_printf_i+0x234>)
 800b390:	2100      	movs	r1, #0
 800b392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b396:	6866      	ldr	r6, [r4, #4]
 800b398:	2e00      	cmp	r6, #0
 800b39a:	60a6      	str	r6, [r4, #8]
 800b39c:	db05      	blt.n	800b3aa <_printf_i+0x10e>
 800b39e:	6821      	ldr	r1, [r4, #0]
 800b3a0:	432e      	orrs	r6, r5
 800b3a2:	f021 0104 	bic.w	r1, r1, #4
 800b3a6:	6021      	str	r1, [r4, #0]
 800b3a8:	d04b      	beq.n	800b442 <_printf_i+0x1a6>
 800b3aa:	4616      	mov	r6, r2
 800b3ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3b0:	fb03 5711 	mls	r7, r3, r1, r5
 800b3b4:	5dc7      	ldrb	r7, [r0, r7]
 800b3b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3ba:	462f      	mov	r7, r5
 800b3bc:	42bb      	cmp	r3, r7
 800b3be:	460d      	mov	r5, r1
 800b3c0:	d9f4      	bls.n	800b3ac <_printf_i+0x110>
 800b3c2:	2b08      	cmp	r3, #8
 800b3c4:	d10b      	bne.n	800b3de <_printf_i+0x142>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	07df      	lsls	r7, r3, #31
 800b3ca:	d508      	bpl.n	800b3de <_printf_i+0x142>
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	6861      	ldr	r1, [r4, #4]
 800b3d0:	4299      	cmp	r1, r3
 800b3d2:	bfde      	ittt	le
 800b3d4:	2330      	movle	r3, #48	@ 0x30
 800b3d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3de:	1b92      	subs	r2, r2, r6
 800b3e0:	6122      	str	r2, [r4, #16]
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f8cd a000 	str.w	sl, [sp]
 800b3ec:	aa03      	add	r2, sp, #12
 800b3ee:	f7ff fee3 	bl	800b1b8 <_printf_common>
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	d14a      	bne.n	800b48c <_printf_i+0x1f0>
 800b3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fa:	b004      	add	sp, #16
 800b3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	f043 0320 	orr.w	r3, r3, #32
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	2778      	movs	r7, #120	@ 0x78
 800b40a:	4832      	ldr	r0, [pc, #200]	@ (800b4d4 <_printf_i+0x238>)
 800b40c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	6831      	ldr	r1, [r6, #0]
 800b414:	061f      	lsls	r7, r3, #24
 800b416:	f851 5b04 	ldr.w	r5, [r1], #4
 800b41a:	d402      	bmi.n	800b422 <_printf_i+0x186>
 800b41c:	065f      	lsls	r7, r3, #25
 800b41e:	bf48      	it	mi
 800b420:	b2ad      	uxthmi	r5, r5
 800b422:	6031      	str	r1, [r6, #0]
 800b424:	07d9      	lsls	r1, r3, #31
 800b426:	bf44      	itt	mi
 800b428:	f043 0320 	orrmi.w	r3, r3, #32
 800b42c:	6023      	strmi	r3, [r4, #0]
 800b42e:	b11d      	cbz	r5, 800b438 <_printf_i+0x19c>
 800b430:	2310      	movs	r3, #16
 800b432:	e7ad      	b.n	800b390 <_printf_i+0xf4>
 800b434:	4826      	ldr	r0, [pc, #152]	@ (800b4d0 <_printf_i+0x234>)
 800b436:	e7e9      	b.n	800b40c <_printf_i+0x170>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	f023 0320 	bic.w	r3, r3, #32
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	e7f6      	b.n	800b430 <_printf_i+0x194>
 800b442:	4616      	mov	r6, r2
 800b444:	e7bd      	b.n	800b3c2 <_printf_i+0x126>
 800b446:	6833      	ldr	r3, [r6, #0]
 800b448:	6825      	ldr	r5, [r4, #0]
 800b44a:	1d18      	adds	r0, r3, #4
 800b44c:	6961      	ldr	r1, [r4, #20]
 800b44e:	6030      	str	r0, [r6, #0]
 800b450:	062e      	lsls	r6, r5, #24
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	d501      	bpl.n	800b45a <_printf_i+0x1be>
 800b456:	6019      	str	r1, [r3, #0]
 800b458:	e002      	b.n	800b460 <_printf_i+0x1c4>
 800b45a:	0668      	lsls	r0, r5, #25
 800b45c:	d5fb      	bpl.n	800b456 <_printf_i+0x1ba>
 800b45e:	8019      	strh	r1, [r3, #0]
 800b460:	2300      	movs	r3, #0
 800b462:	4616      	mov	r6, r2
 800b464:	6123      	str	r3, [r4, #16]
 800b466:	e7bc      	b.n	800b3e2 <_printf_i+0x146>
 800b468:	6833      	ldr	r3, [r6, #0]
 800b46a:	2100      	movs	r1, #0
 800b46c:	1d1a      	adds	r2, r3, #4
 800b46e:	6032      	str	r2, [r6, #0]
 800b470:	681e      	ldr	r6, [r3, #0]
 800b472:	6862      	ldr	r2, [r4, #4]
 800b474:	4630      	mov	r0, r6
 800b476:	f000 fbe0 	bl	800bc3a <memchr>
 800b47a:	b108      	cbz	r0, 800b480 <_printf_i+0x1e4>
 800b47c:	1b80      	subs	r0, r0, r6
 800b47e:	6060      	str	r0, [r4, #4]
 800b480:	6863      	ldr	r3, [r4, #4]
 800b482:	6123      	str	r3, [r4, #16]
 800b484:	2300      	movs	r3, #0
 800b486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b48a:	e7aa      	b.n	800b3e2 <_printf_i+0x146>
 800b48c:	4632      	mov	r2, r6
 800b48e:	4649      	mov	r1, r9
 800b490:	4640      	mov	r0, r8
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	47d0      	blx	sl
 800b496:	3001      	adds	r0, #1
 800b498:	d0ad      	beq.n	800b3f6 <_printf_i+0x15a>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	079b      	lsls	r3, r3, #30
 800b49e:	d413      	bmi.n	800b4c8 <_printf_i+0x22c>
 800b4a0:	68e0      	ldr	r0, [r4, #12]
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	4298      	cmp	r0, r3
 800b4a6:	bfb8      	it	lt
 800b4a8:	4618      	movlt	r0, r3
 800b4aa:	e7a6      	b.n	800b3fa <_printf_i+0x15e>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	47d0      	blx	sl
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d09d      	beq.n	800b3f6 <_printf_i+0x15a>
 800b4ba:	3501      	adds	r5, #1
 800b4bc:	68e3      	ldr	r3, [r4, #12]
 800b4be:	9903      	ldr	r1, [sp, #12]
 800b4c0:	1a5b      	subs	r3, r3, r1
 800b4c2:	42ab      	cmp	r3, r5
 800b4c4:	dcf2      	bgt.n	800b4ac <_printf_i+0x210>
 800b4c6:	e7eb      	b.n	800b4a0 <_printf_i+0x204>
 800b4c8:	2500      	movs	r5, #0
 800b4ca:	f104 0619 	add.w	r6, r4, #25
 800b4ce:	e7f5      	b.n	800b4bc <_printf_i+0x220>
 800b4d0:	0800f388 	.word	0x0800f388
 800b4d4:	0800f399 	.word	0x0800f399

0800b4d8 <_scanf_float>:
 800b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	b087      	sub	sp, #28
 800b4de:	9303      	str	r3, [sp, #12]
 800b4e0:	688b      	ldr	r3, [r1, #8]
 800b4e2:	4691      	mov	r9, r2
 800b4e4:	1e5a      	subs	r2, r3, #1
 800b4e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b4ea:	bf82      	ittt	hi
 800b4ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b4f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b4f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	f04f 0500 	mov.w	r5, #0
 800b4fe:	bf88      	it	hi
 800b500:	608b      	strhi	r3, [r1, #8]
 800b502:	680b      	ldr	r3, [r1, #0]
 800b504:	4680      	mov	r8, r0
 800b506:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b50a:	f842 3b1c 	str.w	r3, [r2], #28
 800b50e:	460c      	mov	r4, r1
 800b510:	bf98      	it	ls
 800b512:	f04f 0b00 	movls.w	fp, #0
 800b516:	4616      	mov	r6, r2
 800b518:	46aa      	mov	sl, r5
 800b51a:	462f      	mov	r7, r5
 800b51c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b520:	9201      	str	r2, [sp, #4]
 800b522:	9502      	str	r5, [sp, #8]
 800b524:	68a2      	ldr	r2, [r4, #8]
 800b526:	b15a      	cbz	r2, 800b540 <_scanf_float+0x68>
 800b528:	f8d9 3000 	ldr.w	r3, [r9]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b4e      	cmp	r3, #78	@ 0x4e
 800b530:	d862      	bhi.n	800b5f8 <_scanf_float+0x120>
 800b532:	2b40      	cmp	r3, #64	@ 0x40
 800b534:	d83a      	bhi.n	800b5ac <_scanf_float+0xd4>
 800b536:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b53a:	b2c8      	uxtb	r0, r1
 800b53c:	280e      	cmp	r0, #14
 800b53e:	d938      	bls.n	800b5b2 <_scanf_float+0xda>
 800b540:	b11f      	cbz	r7, 800b54a <_scanf_float+0x72>
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b54e:	f1ba 0f01 	cmp.w	sl, #1
 800b552:	f200 8114 	bhi.w	800b77e <_scanf_float+0x2a6>
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	429e      	cmp	r6, r3
 800b55a:	f200 8105 	bhi.w	800b768 <_scanf_float+0x290>
 800b55e:	2001      	movs	r0, #1
 800b560:	b007      	add	sp, #28
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b56a:	2a0d      	cmp	r2, #13
 800b56c:	d8e8      	bhi.n	800b540 <_scanf_float+0x68>
 800b56e:	a101      	add	r1, pc, #4	@ (adr r1, 800b574 <_scanf_float+0x9c>)
 800b570:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b574:	0800b6bd 	.word	0x0800b6bd
 800b578:	0800b541 	.word	0x0800b541
 800b57c:	0800b541 	.word	0x0800b541
 800b580:	0800b541 	.word	0x0800b541
 800b584:	0800b719 	.word	0x0800b719
 800b588:	0800b6f3 	.word	0x0800b6f3
 800b58c:	0800b541 	.word	0x0800b541
 800b590:	0800b541 	.word	0x0800b541
 800b594:	0800b6cb 	.word	0x0800b6cb
 800b598:	0800b541 	.word	0x0800b541
 800b59c:	0800b541 	.word	0x0800b541
 800b5a0:	0800b541 	.word	0x0800b541
 800b5a4:	0800b541 	.word	0x0800b541
 800b5a8:	0800b687 	.word	0x0800b687
 800b5ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b5b0:	e7db      	b.n	800b56a <_scanf_float+0x92>
 800b5b2:	290e      	cmp	r1, #14
 800b5b4:	d8c4      	bhi.n	800b540 <_scanf_float+0x68>
 800b5b6:	a001      	add	r0, pc, #4	@ (adr r0, 800b5bc <_scanf_float+0xe4>)
 800b5b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b5bc:	0800b677 	.word	0x0800b677
 800b5c0:	0800b541 	.word	0x0800b541
 800b5c4:	0800b677 	.word	0x0800b677
 800b5c8:	0800b707 	.word	0x0800b707
 800b5cc:	0800b541 	.word	0x0800b541
 800b5d0:	0800b619 	.word	0x0800b619
 800b5d4:	0800b65d 	.word	0x0800b65d
 800b5d8:	0800b65d 	.word	0x0800b65d
 800b5dc:	0800b65d 	.word	0x0800b65d
 800b5e0:	0800b65d 	.word	0x0800b65d
 800b5e4:	0800b65d 	.word	0x0800b65d
 800b5e8:	0800b65d 	.word	0x0800b65d
 800b5ec:	0800b65d 	.word	0x0800b65d
 800b5f0:	0800b65d 	.word	0x0800b65d
 800b5f4:	0800b65d 	.word	0x0800b65d
 800b5f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b5fa:	d809      	bhi.n	800b610 <_scanf_float+0x138>
 800b5fc:	2b60      	cmp	r3, #96	@ 0x60
 800b5fe:	d8b2      	bhi.n	800b566 <_scanf_float+0x8e>
 800b600:	2b54      	cmp	r3, #84	@ 0x54
 800b602:	d07b      	beq.n	800b6fc <_scanf_float+0x224>
 800b604:	2b59      	cmp	r3, #89	@ 0x59
 800b606:	d19b      	bne.n	800b540 <_scanf_float+0x68>
 800b608:	2d07      	cmp	r5, #7
 800b60a:	d199      	bne.n	800b540 <_scanf_float+0x68>
 800b60c:	2508      	movs	r5, #8
 800b60e:	e02f      	b.n	800b670 <_scanf_float+0x198>
 800b610:	2b74      	cmp	r3, #116	@ 0x74
 800b612:	d073      	beq.n	800b6fc <_scanf_float+0x224>
 800b614:	2b79      	cmp	r3, #121	@ 0x79
 800b616:	e7f6      	b.n	800b606 <_scanf_float+0x12e>
 800b618:	6821      	ldr	r1, [r4, #0]
 800b61a:	05c8      	lsls	r0, r1, #23
 800b61c:	d51e      	bpl.n	800b65c <_scanf_float+0x184>
 800b61e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b622:	6021      	str	r1, [r4, #0]
 800b624:	3701      	adds	r7, #1
 800b626:	f1bb 0f00 	cmp.w	fp, #0
 800b62a:	d003      	beq.n	800b634 <_scanf_float+0x15c>
 800b62c:	3201      	adds	r2, #1
 800b62e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b632:	60a2      	str	r2, [r4, #8]
 800b634:	68a3      	ldr	r3, [r4, #8]
 800b636:	3b01      	subs	r3, #1
 800b638:	60a3      	str	r3, [r4, #8]
 800b63a:	6923      	ldr	r3, [r4, #16]
 800b63c:	3301      	adds	r3, #1
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b644:	3b01      	subs	r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	f8c9 3004 	str.w	r3, [r9, #4]
 800b64c:	f340 8083 	ble.w	800b756 <_scanf_float+0x27e>
 800b650:	f8d9 3000 	ldr.w	r3, [r9]
 800b654:	3301      	adds	r3, #1
 800b656:	f8c9 3000 	str.w	r3, [r9]
 800b65a:	e763      	b.n	800b524 <_scanf_float+0x4c>
 800b65c:	eb1a 0105 	adds.w	r1, sl, r5
 800b660:	f47f af6e 	bne.w	800b540 <_scanf_float+0x68>
 800b664:	460d      	mov	r5, r1
 800b666:	468a      	mov	sl, r1
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b66e:	6022      	str	r2, [r4, #0]
 800b670:	f806 3b01 	strb.w	r3, [r6], #1
 800b674:	e7de      	b.n	800b634 <_scanf_float+0x15c>
 800b676:	6822      	ldr	r2, [r4, #0]
 800b678:	0610      	lsls	r0, r2, #24
 800b67a:	f57f af61 	bpl.w	800b540 <_scanf_float+0x68>
 800b67e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	e7f4      	b.n	800b670 <_scanf_float+0x198>
 800b686:	f1ba 0f00 	cmp.w	sl, #0
 800b68a:	d10c      	bne.n	800b6a6 <_scanf_float+0x1ce>
 800b68c:	b977      	cbnz	r7, 800b6ac <_scanf_float+0x1d4>
 800b68e:	6822      	ldr	r2, [r4, #0]
 800b690:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b694:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b698:	d108      	bne.n	800b6ac <_scanf_float+0x1d4>
 800b69a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b69e:	f04f 0a01 	mov.w	sl, #1
 800b6a2:	6022      	str	r2, [r4, #0]
 800b6a4:	e7e4      	b.n	800b670 <_scanf_float+0x198>
 800b6a6:	f1ba 0f02 	cmp.w	sl, #2
 800b6aa:	d051      	beq.n	800b750 <_scanf_float+0x278>
 800b6ac:	2d01      	cmp	r5, #1
 800b6ae:	d002      	beq.n	800b6b6 <_scanf_float+0x1de>
 800b6b0:	2d04      	cmp	r5, #4
 800b6b2:	f47f af45 	bne.w	800b540 <_scanf_float+0x68>
 800b6b6:	3501      	adds	r5, #1
 800b6b8:	b2ed      	uxtb	r5, r5
 800b6ba:	e7d9      	b.n	800b670 <_scanf_float+0x198>
 800b6bc:	f1ba 0f01 	cmp.w	sl, #1
 800b6c0:	f47f af3e 	bne.w	800b540 <_scanf_float+0x68>
 800b6c4:	f04f 0a02 	mov.w	sl, #2
 800b6c8:	e7d2      	b.n	800b670 <_scanf_float+0x198>
 800b6ca:	b975      	cbnz	r5, 800b6ea <_scanf_float+0x212>
 800b6cc:	2f00      	cmp	r7, #0
 800b6ce:	f47f af38 	bne.w	800b542 <_scanf_float+0x6a>
 800b6d2:	6822      	ldr	r2, [r4, #0]
 800b6d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6dc:	f040 80ff 	bne.w	800b8de <_scanf_float+0x406>
 800b6e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6e4:	2501      	movs	r5, #1
 800b6e6:	6022      	str	r2, [r4, #0]
 800b6e8:	e7c2      	b.n	800b670 <_scanf_float+0x198>
 800b6ea:	2d03      	cmp	r5, #3
 800b6ec:	d0e3      	beq.n	800b6b6 <_scanf_float+0x1de>
 800b6ee:	2d05      	cmp	r5, #5
 800b6f0:	e7df      	b.n	800b6b2 <_scanf_float+0x1da>
 800b6f2:	2d02      	cmp	r5, #2
 800b6f4:	f47f af24 	bne.w	800b540 <_scanf_float+0x68>
 800b6f8:	2503      	movs	r5, #3
 800b6fa:	e7b9      	b.n	800b670 <_scanf_float+0x198>
 800b6fc:	2d06      	cmp	r5, #6
 800b6fe:	f47f af1f 	bne.w	800b540 <_scanf_float+0x68>
 800b702:	2507      	movs	r5, #7
 800b704:	e7b4      	b.n	800b670 <_scanf_float+0x198>
 800b706:	6822      	ldr	r2, [r4, #0]
 800b708:	0591      	lsls	r1, r2, #22
 800b70a:	f57f af19 	bpl.w	800b540 <_scanf_float+0x68>
 800b70e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b712:	6022      	str	r2, [r4, #0]
 800b714:	9702      	str	r7, [sp, #8]
 800b716:	e7ab      	b.n	800b670 <_scanf_float+0x198>
 800b718:	6822      	ldr	r2, [r4, #0]
 800b71a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b71e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b722:	d005      	beq.n	800b730 <_scanf_float+0x258>
 800b724:	0550      	lsls	r0, r2, #21
 800b726:	f57f af0b 	bpl.w	800b540 <_scanf_float+0x68>
 800b72a:	2f00      	cmp	r7, #0
 800b72c:	f000 80d7 	beq.w	800b8de <_scanf_float+0x406>
 800b730:	0591      	lsls	r1, r2, #22
 800b732:	bf58      	it	pl
 800b734:	9902      	ldrpl	r1, [sp, #8]
 800b736:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b73a:	bf58      	it	pl
 800b73c:	1a79      	subpl	r1, r7, r1
 800b73e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b742:	f04f 0700 	mov.w	r7, #0
 800b746:	bf58      	it	pl
 800b748:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	e78f      	b.n	800b670 <_scanf_float+0x198>
 800b750:	f04f 0a03 	mov.w	sl, #3
 800b754:	e78c      	b.n	800b670 <_scanf_float+0x198>
 800b756:	4649      	mov	r1, r9
 800b758:	4640      	mov	r0, r8
 800b75a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b75e:	4798      	blx	r3
 800b760:	2800      	cmp	r0, #0
 800b762:	f43f aedf 	beq.w	800b524 <_scanf_float+0x4c>
 800b766:	e6eb      	b.n	800b540 <_scanf_float+0x68>
 800b768:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b76c:	464a      	mov	r2, r9
 800b76e:	4640      	mov	r0, r8
 800b770:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b774:	4798      	blx	r3
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	3b01      	subs	r3, #1
 800b77a:	6123      	str	r3, [r4, #16]
 800b77c:	e6eb      	b.n	800b556 <_scanf_float+0x7e>
 800b77e:	1e6b      	subs	r3, r5, #1
 800b780:	2b06      	cmp	r3, #6
 800b782:	d824      	bhi.n	800b7ce <_scanf_float+0x2f6>
 800b784:	2d02      	cmp	r5, #2
 800b786:	d836      	bhi.n	800b7f6 <_scanf_float+0x31e>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	429e      	cmp	r6, r3
 800b78c:	f67f aee7 	bls.w	800b55e <_scanf_float+0x86>
 800b790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b794:	464a      	mov	r2, r9
 800b796:	4640      	mov	r0, r8
 800b798:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b79c:	4798      	blx	r3
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	6123      	str	r3, [r4, #16]
 800b7a4:	e7f0      	b.n	800b788 <_scanf_float+0x2b0>
 800b7a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7aa:	464a      	mov	r2, r9
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b7b2:	4798      	blx	r3
 800b7b4:	6923      	ldr	r3, [r4, #16]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	6123      	str	r3, [r4, #16]
 800b7ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7be:	fa5f fa8a 	uxtb.w	sl, sl
 800b7c2:	f1ba 0f02 	cmp.w	sl, #2
 800b7c6:	d1ee      	bne.n	800b7a6 <_scanf_float+0x2ce>
 800b7c8:	3d03      	subs	r5, #3
 800b7ca:	b2ed      	uxtb	r5, r5
 800b7cc:	1b76      	subs	r6, r6, r5
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	05da      	lsls	r2, r3, #23
 800b7d2:	d530      	bpl.n	800b836 <_scanf_float+0x35e>
 800b7d4:	055b      	lsls	r3, r3, #21
 800b7d6:	d511      	bpl.n	800b7fc <_scanf_float+0x324>
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	429e      	cmp	r6, r3
 800b7dc:	f67f aebf 	bls.w	800b55e <_scanf_float+0x86>
 800b7e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7e4:	464a      	mov	r2, r9
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7ec:	4798      	blx	r3
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	e7f0      	b.n	800b7d8 <_scanf_float+0x300>
 800b7f6:	46aa      	mov	sl, r5
 800b7f8:	46b3      	mov	fp, r6
 800b7fa:	e7de      	b.n	800b7ba <_scanf_float+0x2e2>
 800b7fc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	2965      	cmp	r1, #101	@ 0x65
 800b804:	f103 33ff 	add.w	r3, r3, #4294967295
 800b808:	f106 35ff 	add.w	r5, r6, #4294967295
 800b80c:	6123      	str	r3, [r4, #16]
 800b80e:	d00c      	beq.n	800b82a <_scanf_float+0x352>
 800b810:	2945      	cmp	r1, #69	@ 0x45
 800b812:	d00a      	beq.n	800b82a <_scanf_float+0x352>
 800b814:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b818:	464a      	mov	r2, r9
 800b81a:	4640      	mov	r0, r8
 800b81c:	4798      	blx	r3
 800b81e:	6923      	ldr	r3, [r4, #16]
 800b820:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b824:	3b01      	subs	r3, #1
 800b826:	1eb5      	subs	r5, r6, #2
 800b828:	6123      	str	r3, [r4, #16]
 800b82a:	464a      	mov	r2, r9
 800b82c:	4640      	mov	r0, r8
 800b82e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b832:	4798      	blx	r3
 800b834:	462e      	mov	r6, r5
 800b836:	6822      	ldr	r2, [r4, #0]
 800b838:	f012 0210 	ands.w	r2, r2, #16
 800b83c:	d001      	beq.n	800b842 <_scanf_float+0x36a>
 800b83e:	2000      	movs	r0, #0
 800b840:	e68e      	b.n	800b560 <_scanf_float+0x88>
 800b842:	7032      	strb	r2, [r6, #0]
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b84a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b84e:	d125      	bne.n	800b89c <_scanf_float+0x3c4>
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	429f      	cmp	r7, r3
 800b854:	d00a      	beq.n	800b86c <_scanf_float+0x394>
 800b856:	1bda      	subs	r2, r3, r7
 800b858:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b85c:	429e      	cmp	r6, r3
 800b85e:	bf28      	it	cs
 800b860:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b864:	4630      	mov	r0, r6
 800b866:	491f      	ldr	r1, [pc, #124]	@ (800b8e4 <_scanf_float+0x40c>)
 800b868:	f000 f902 	bl	800ba70 <siprintf>
 800b86c:	2200      	movs	r2, #0
 800b86e:	4640      	mov	r0, r8
 800b870:	9901      	ldr	r1, [sp, #4]
 800b872:	f002 fbe9 	bl	800e048 <_strtod_r>
 800b876:	9b03      	ldr	r3, [sp, #12]
 800b878:	6825      	ldr	r5, [r4, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f015 0f02 	tst.w	r5, #2
 800b880:	4606      	mov	r6, r0
 800b882:	460f      	mov	r7, r1
 800b884:	f103 0204 	add.w	r2, r3, #4
 800b888:	d015      	beq.n	800b8b6 <_scanf_float+0x3de>
 800b88a:	9903      	ldr	r1, [sp, #12]
 800b88c:	600a      	str	r2, [r1, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	e9c3 6700 	strd	r6, r7, [r3]
 800b894:	68e3      	ldr	r3, [r4, #12]
 800b896:	3301      	adds	r3, #1
 800b898:	60e3      	str	r3, [r4, #12]
 800b89a:	e7d0      	b.n	800b83e <_scanf_float+0x366>
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0e4      	beq.n	800b86c <_scanf_float+0x394>
 800b8a2:	9905      	ldr	r1, [sp, #20]
 800b8a4:	230a      	movs	r3, #10
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	3101      	adds	r1, #1
 800b8aa:	f002 fc4d 	bl	800e148 <_strtol_r>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	9e05      	ldr	r6, [sp, #20]
 800b8b2:	1ac2      	subs	r2, r0, r3
 800b8b4:	e7d0      	b.n	800b858 <_scanf_float+0x380>
 800b8b6:	076d      	lsls	r5, r5, #29
 800b8b8:	d4e7      	bmi.n	800b88a <_scanf_float+0x3b2>
 800b8ba:	9d03      	ldr	r5, [sp, #12]
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	681d      	ldr	r5, [r3, #0]
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	f7f5 f8a2 	bl	8000a0c <__aeabi_dcmpun>
 800b8c8:	b120      	cbz	r0, 800b8d4 <_scanf_float+0x3fc>
 800b8ca:	4807      	ldr	r0, [pc, #28]	@ (800b8e8 <_scanf_float+0x410>)
 800b8cc:	f000 f9c4 	bl	800bc58 <nanf>
 800b8d0:	6028      	str	r0, [r5, #0]
 800b8d2:	e7df      	b.n	800b894 <_scanf_float+0x3bc>
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f7f5 f8f6 	bl	8000ac8 <__aeabi_d2f>
 800b8dc:	e7f8      	b.n	800b8d0 <_scanf_float+0x3f8>
 800b8de:	2700      	movs	r7, #0
 800b8e0:	e633      	b.n	800b54a <_scanf_float+0x72>
 800b8e2:	bf00      	nop
 800b8e4:	0800f3aa 	.word	0x0800f3aa
 800b8e8:	0800f4eb 	.word	0x0800f4eb

0800b8ec <std>:
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	b510      	push	{r4, lr}
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8fa:	6083      	str	r3, [r0, #8]
 800b8fc:	8181      	strh	r1, [r0, #12]
 800b8fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800b900:	81c2      	strh	r2, [r0, #14]
 800b902:	6183      	str	r3, [r0, #24]
 800b904:	4619      	mov	r1, r3
 800b906:	2208      	movs	r2, #8
 800b908:	305c      	adds	r0, #92	@ 0x5c
 800b90a:	f000 f916 	bl	800bb3a <memset>
 800b90e:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <std+0x58>)
 800b910:	6224      	str	r4, [r4, #32]
 800b912:	6263      	str	r3, [r4, #36]	@ 0x24
 800b914:	4b0c      	ldr	r3, [pc, #48]	@ (800b948 <std+0x5c>)
 800b916:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b918:	4b0c      	ldr	r3, [pc, #48]	@ (800b94c <std+0x60>)
 800b91a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b91c:	4b0c      	ldr	r3, [pc, #48]	@ (800b950 <std+0x64>)
 800b91e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b920:	4b0c      	ldr	r3, [pc, #48]	@ (800b954 <std+0x68>)
 800b922:	429c      	cmp	r4, r3
 800b924:	d006      	beq.n	800b934 <std+0x48>
 800b926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b92a:	4294      	cmp	r4, r2
 800b92c:	d002      	beq.n	800b934 <std+0x48>
 800b92e:	33d0      	adds	r3, #208	@ 0xd0
 800b930:	429c      	cmp	r4, r3
 800b932:	d105      	bne.n	800b940 <std+0x54>
 800b934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b93c:	f000 b97a 	b.w	800bc34 <__retarget_lock_init_recursive>
 800b940:	bd10      	pop	{r4, pc}
 800b942:	bf00      	nop
 800b944:	0800bab5 	.word	0x0800bab5
 800b948:	0800bad7 	.word	0x0800bad7
 800b94c:	0800bb0f 	.word	0x0800bb0f
 800b950:	0800bb33 	.word	0x0800bb33
 800b954:	20001728 	.word	0x20001728

0800b958 <stdio_exit_handler>:
 800b958:	4a02      	ldr	r2, [pc, #8]	@ (800b964 <stdio_exit_handler+0xc>)
 800b95a:	4903      	ldr	r1, [pc, #12]	@ (800b968 <stdio_exit_handler+0x10>)
 800b95c:	4803      	ldr	r0, [pc, #12]	@ (800b96c <stdio_exit_handler+0x14>)
 800b95e:	f000 b869 	b.w	800ba34 <_fwalk_sglue>
 800b962:	bf00      	nop
 800b964:	20000190 	.word	0x20000190
 800b968:	0800e4fd 	.word	0x0800e4fd
 800b96c:	200001a0 	.word	0x200001a0

0800b970 <cleanup_stdio>:
 800b970:	6841      	ldr	r1, [r0, #4]
 800b972:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a4 <cleanup_stdio+0x34>)
 800b974:	b510      	push	{r4, lr}
 800b976:	4299      	cmp	r1, r3
 800b978:	4604      	mov	r4, r0
 800b97a:	d001      	beq.n	800b980 <cleanup_stdio+0x10>
 800b97c:	f002 fdbe 	bl	800e4fc <_fflush_r>
 800b980:	68a1      	ldr	r1, [r4, #8]
 800b982:	4b09      	ldr	r3, [pc, #36]	@ (800b9a8 <cleanup_stdio+0x38>)
 800b984:	4299      	cmp	r1, r3
 800b986:	d002      	beq.n	800b98e <cleanup_stdio+0x1e>
 800b988:	4620      	mov	r0, r4
 800b98a:	f002 fdb7 	bl	800e4fc <_fflush_r>
 800b98e:	68e1      	ldr	r1, [r4, #12]
 800b990:	4b06      	ldr	r3, [pc, #24]	@ (800b9ac <cleanup_stdio+0x3c>)
 800b992:	4299      	cmp	r1, r3
 800b994:	d004      	beq.n	800b9a0 <cleanup_stdio+0x30>
 800b996:	4620      	mov	r0, r4
 800b998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b99c:	f002 bdae 	b.w	800e4fc <_fflush_r>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20001728 	.word	0x20001728
 800b9a8:	20001790 	.word	0x20001790
 800b9ac:	200017f8 	.word	0x200017f8

0800b9b0 <global_stdio_init.part.0>:
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e0 <global_stdio_init.part.0+0x30>)
 800b9b4:	4c0b      	ldr	r4, [pc, #44]	@ (800b9e4 <global_stdio_init.part.0+0x34>)
 800b9b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b9e8 <global_stdio_init.part.0+0x38>)
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	601a      	str	r2, [r3, #0]
 800b9bc:	2104      	movs	r1, #4
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f7ff ff94 	bl	800b8ec <std>
 800b9c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	2109      	movs	r1, #9
 800b9cc:	f7ff ff8e 	bl	800b8ec <std>
 800b9d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9d4:	2202      	movs	r2, #2
 800b9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9da:	2112      	movs	r1, #18
 800b9dc:	f7ff bf86 	b.w	800b8ec <std>
 800b9e0:	20001860 	.word	0x20001860
 800b9e4:	20001728 	.word	0x20001728
 800b9e8:	0800b959 	.word	0x0800b959

0800b9ec <__sfp_lock_acquire>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	@ (800b9f4 <__sfp_lock_acquire+0x8>)
 800b9ee:	f000 b922 	b.w	800bc36 <__retarget_lock_acquire_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	20001869 	.word	0x20001869

0800b9f8 <__sfp_lock_release>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	@ (800ba00 <__sfp_lock_release+0x8>)
 800b9fa:	f000 b91d 	b.w	800bc38 <__retarget_lock_release_recursive>
 800b9fe:	bf00      	nop
 800ba00:	20001869 	.word	0x20001869

0800ba04 <__sinit>:
 800ba04:	b510      	push	{r4, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	f7ff fff0 	bl	800b9ec <__sfp_lock_acquire>
 800ba0c:	6a23      	ldr	r3, [r4, #32]
 800ba0e:	b11b      	cbz	r3, 800ba18 <__sinit+0x14>
 800ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba14:	f7ff bff0 	b.w	800b9f8 <__sfp_lock_release>
 800ba18:	4b04      	ldr	r3, [pc, #16]	@ (800ba2c <__sinit+0x28>)
 800ba1a:	6223      	str	r3, [r4, #32]
 800ba1c:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <__sinit+0x2c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1f5      	bne.n	800ba10 <__sinit+0xc>
 800ba24:	f7ff ffc4 	bl	800b9b0 <global_stdio_init.part.0>
 800ba28:	e7f2      	b.n	800ba10 <__sinit+0xc>
 800ba2a:	bf00      	nop
 800ba2c:	0800b971 	.word	0x0800b971
 800ba30:	20001860 	.word	0x20001860

0800ba34 <_fwalk_sglue>:
 800ba34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba38:	4607      	mov	r7, r0
 800ba3a:	4688      	mov	r8, r1
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	2600      	movs	r6, #0
 800ba40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba44:	f1b9 0901 	subs.w	r9, r9, #1
 800ba48:	d505      	bpl.n	800ba56 <_fwalk_sglue+0x22>
 800ba4a:	6824      	ldr	r4, [r4, #0]
 800ba4c:	2c00      	cmp	r4, #0
 800ba4e:	d1f7      	bne.n	800ba40 <_fwalk_sglue+0xc>
 800ba50:	4630      	mov	r0, r6
 800ba52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d907      	bls.n	800ba6c <_fwalk_sglue+0x38>
 800ba5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba60:	3301      	adds	r3, #1
 800ba62:	d003      	beq.n	800ba6c <_fwalk_sglue+0x38>
 800ba64:	4629      	mov	r1, r5
 800ba66:	4638      	mov	r0, r7
 800ba68:	47c0      	blx	r8
 800ba6a:	4306      	orrs	r6, r0
 800ba6c:	3568      	adds	r5, #104	@ 0x68
 800ba6e:	e7e9      	b.n	800ba44 <_fwalk_sglue+0x10>

0800ba70 <siprintf>:
 800ba70:	b40e      	push	{r1, r2, r3}
 800ba72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba76:	b510      	push	{r4, lr}
 800ba78:	2400      	movs	r4, #0
 800ba7a:	b09d      	sub	sp, #116	@ 0x74
 800ba7c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ba7e:	9002      	str	r0, [sp, #8]
 800ba80:	9006      	str	r0, [sp, #24]
 800ba82:	9107      	str	r1, [sp, #28]
 800ba84:	9104      	str	r1, [sp, #16]
 800ba86:	4809      	ldr	r0, [pc, #36]	@ (800baac <siprintf+0x3c>)
 800ba88:	4909      	ldr	r1, [pc, #36]	@ (800bab0 <siprintf+0x40>)
 800ba8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8e:	9105      	str	r1, [sp, #20]
 800ba90:	6800      	ldr	r0, [r0, #0]
 800ba92:	a902      	add	r1, sp, #8
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ba98:	f002 fbb4 	bl	800e204 <_svfiprintf_r>
 800ba9c:	9b02      	ldr	r3, [sp, #8]
 800ba9e:	701c      	strb	r4, [r3, #0]
 800baa0:	b01d      	add	sp, #116	@ 0x74
 800baa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa6:	b003      	add	sp, #12
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	2000019c 	.word	0x2000019c
 800bab0:	ffff0208 	.word	0xffff0208

0800bab4 <__sread>:
 800bab4:	b510      	push	{r4, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800babc:	f000 f86c 	bl	800bb98 <_read_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	bfab      	itete	ge
 800bac4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bac6:	89a3      	ldrhlt	r3, [r4, #12]
 800bac8:	181b      	addge	r3, r3, r0
 800baca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bace:	bfac      	ite	ge
 800bad0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bad2:	81a3      	strhlt	r3, [r4, #12]
 800bad4:	bd10      	pop	{r4, pc}

0800bad6 <__swrite>:
 800bad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bada:	461f      	mov	r7, r3
 800badc:	898b      	ldrh	r3, [r1, #12]
 800bade:	4605      	mov	r5, r0
 800bae0:	05db      	lsls	r3, r3, #23
 800bae2:	460c      	mov	r4, r1
 800bae4:	4616      	mov	r6, r2
 800bae6:	d505      	bpl.n	800baf4 <__swrite+0x1e>
 800bae8:	2302      	movs	r3, #2
 800baea:	2200      	movs	r2, #0
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	f000 f840 	bl	800bb74 <_lseek_r>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	4632      	mov	r2, r6
 800baf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	4628      	mov	r0, r5
 800bb00:	463b      	mov	r3, r7
 800bb02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0a:	f000 b857 	b.w	800bbbc <_write_r>

0800bb0e <__sseek>:
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb16:	f000 f82d 	bl	800bb74 <_lseek_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	bf15      	itete	ne
 800bb20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb2a:	81a3      	strheq	r3, [r4, #12]
 800bb2c:	bf18      	it	ne
 800bb2e:	81a3      	strhne	r3, [r4, #12]
 800bb30:	bd10      	pop	{r4, pc}

0800bb32 <__sclose>:
 800bb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb36:	f000 b80d 	b.w	800bb54 <_close_r>

0800bb3a <memset>:
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	4402      	add	r2, r0
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d100      	bne.n	800bb44 <memset+0xa>
 800bb42:	4770      	bx	lr
 800bb44:	f803 1b01 	strb.w	r1, [r3], #1
 800bb48:	e7f9      	b.n	800bb3e <memset+0x4>
	...

0800bb4c <_localeconv_r>:
 800bb4c:	4800      	ldr	r0, [pc, #0]	@ (800bb50 <_localeconv_r+0x4>)
 800bb4e:	4770      	bx	lr
 800bb50:	200002dc 	.word	0x200002dc

0800bb54 <_close_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	2300      	movs	r3, #0
 800bb58:	4d05      	ldr	r5, [pc, #20]	@ (800bb70 <_close_r+0x1c>)
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	602b      	str	r3, [r5, #0]
 800bb60:	f7f6 fa35 	bl	8001fce <_close>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	d102      	bne.n	800bb6e <_close_r+0x1a>
 800bb68:	682b      	ldr	r3, [r5, #0]
 800bb6a:	b103      	cbz	r3, 800bb6e <_close_r+0x1a>
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	20001864 	.word	0x20001864

0800bb74 <_lseek_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4604      	mov	r4, r0
 800bb78:	4608      	mov	r0, r1
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4d05      	ldr	r5, [pc, #20]	@ (800bb94 <_lseek_r+0x20>)
 800bb80:	602a      	str	r2, [r5, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	f7f6 fa47 	bl	8002016 <_lseek>
 800bb88:	1c43      	adds	r3, r0, #1
 800bb8a:	d102      	bne.n	800bb92 <_lseek_r+0x1e>
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	b103      	cbz	r3, 800bb92 <_lseek_r+0x1e>
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	20001864 	.word	0x20001864

0800bb98 <_read_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	4611      	mov	r1, r2
 800bba0:	2200      	movs	r2, #0
 800bba2:	4d05      	ldr	r5, [pc, #20]	@ (800bbb8 <_read_r+0x20>)
 800bba4:	602a      	str	r2, [r5, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	f7f6 f9d8 	bl	8001f5c <_read>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_read_r+0x1e>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_read_r+0x1e>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	20001864 	.word	0x20001864

0800bbbc <_write_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4d05      	ldr	r5, [pc, #20]	@ (800bbdc <_write_r+0x20>)
 800bbc8:	602a      	str	r2, [r5, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f7f6 f9e3 	bl	8001f96 <_write>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_write_r+0x1e>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_write_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	20001864 	.word	0x20001864

0800bbe0 <__errno>:
 800bbe0:	4b01      	ldr	r3, [pc, #4]	@ (800bbe8 <__errno+0x8>)
 800bbe2:	6818      	ldr	r0, [r3, #0]
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	2000019c 	.word	0x2000019c

0800bbec <__libc_init_array>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	2600      	movs	r6, #0
 800bbf0:	4d0c      	ldr	r5, [pc, #48]	@ (800bc24 <__libc_init_array+0x38>)
 800bbf2:	4c0d      	ldr	r4, [pc, #52]	@ (800bc28 <__libc_init_array+0x3c>)
 800bbf4:	1b64      	subs	r4, r4, r5
 800bbf6:	10a4      	asrs	r4, r4, #2
 800bbf8:	42a6      	cmp	r6, r4
 800bbfa:	d109      	bne.n	800bc10 <__libc_init_array+0x24>
 800bbfc:	f003 fb6a 	bl	800f2d4 <_init>
 800bc00:	2600      	movs	r6, #0
 800bc02:	4d0a      	ldr	r5, [pc, #40]	@ (800bc2c <__libc_init_array+0x40>)
 800bc04:	4c0a      	ldr	r4, [pc, #40]	@ (800bc30 <__libc_init_array+0x44>)
 800bc06:	1b64      	subs	r4, r4, r5
 800bc08:	10a4      	asrs	r4, r4, #2
 800bc0a:	42a6      	cmp	r6, r4
 800bc0c:	d105      	bne.n	800bc1a <__libc_init_array+0x2e>
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc14:	4798      	blx	r3
 800bc16:	3601      	adds	r6, #1
 800bc18:	e7ee      	b.n	800bbf8 <__libc_init_array+0xc>
 800bc1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc1e:	4798      	blx	r3
 800bc20:	3601      	adds	r6, #1
 800bc22:	e7f2      	b.n	800bc0a <__libc_init_array+0x1e>
 800bc24:	0800f7a4 	.word	0x0800f7a4
 800bc28:	0800f7a4 	.word	0x0800f7a4
 800bc2c:	0800f7a4 	.word	0x0800f7a4
 800bc30:	0800f7a8 	.word	0x0800f7a8

0800bc34 <__retarget_lock_init_recursive>:
 800bc34:	4770      	bx	lr

0800bc36 <__retarget_lock_acquire_recursive>:
 800bc36:	4770      	bx	lr

0800bc38 <__retarget_lock_release_recursive>:
 800bc38:	4770      	bx	lr

0800bc3a <memchr>:
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	b2c9      	uxtb	r1, r1
 800bc40:	4402      	add	r2, r0
 800bc42:	4293      	cmp	r3, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	d101      	bne.n	800bc4c <memchr+0x12>
 800bc48:	2000      	movs	r0, #0
 800bc4a:	e003      	b.n	800bc54 <memchr+0x1a>
 800bc4c:	7804      	ldrb	r4, [r0, #0]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	428c      	cmp	r4, r1
 800bc52:	d1f6      	bne.n	800bc42 <memchr+0x8>
 800bc54:	bd10      	pop	{r4, pc}
	...

0800bc58 <nanf>:
 800bc58:	4800      	ldr	r0, [pc, #0]	@ (800bc5c <nanf+0x4>)
 800bc5a:	4770      	bx	lr
 800bc5c:	7fc00000 	.word	0x7fc00000

0800bc60 <quorem>:
 800bc60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	6903      	ldr	r3, [r0, #16]
 800bc66:	690c      	ldr	r4, [r1, #16]
 800bc68:	4607      	mov	r7, r0
 800bc6a:	42a3      	cmp	r3, r4
 800bc6c:	db7e      	blt.n	800bd6c <quorem+0x10c>
 800bc6e:	3c01      	subs	r4, #1
 800bc70:	00a3      	lsls	r3, r4, #2
 800bc72:	f100 0514 	add.w	r5, r0, #20
 800bc76:	f101 0814 	add.w	r8, r1, #20
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc96:	d32e      	bcc.n	800bcf6 <quorem+0x96>
 800bc98:	f04f 0a00 	mov.w	sl, #0
 800bc9c:	46c4      	mov	ip, r8
 800bc9e:	46ae      	mov	lr, r5
 800bca0:	46d3      	mov	fp, sl
 800bca2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bca6:	b298      	uxth	r0, r3
 800bca8:	fb06 a000 	mla	r0, r6, r0, sl
 800bcac:	0c1b      	lsrs	r3, r3, #16
 800bcae:	0c02      	lsrs	r2, r0, #16
 800bcb0:	fb06 2303 	mla	r3, r6, r3, r2
 800bcb4:	f8de 2000 	ldr.w	r2, [lr]
 800bcb8:	b280      	uxth	r0, r0
 800bcba:	b292      	uxth	r2, r2
 800bcbc:	1a12      	subs	r2, r2, r0
 800bcbe:	445a      	add	r2, fp
 800bcc0:	f8de 0000 	ldr.w	r0, [lr]
 800bcc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bcce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bcd2:	b292      	uxth	r2, r2
 800bcd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bcd8:	45e1      	cmp	r9, ip
 800bcda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bcde:	f84e 2b04 	str.w	r2, [lr], #4
 800bce2:	d2de      	bcs.n	800bca2 <quorem+0x42>
 800bce4:	9b00      	ldr	r3, [sp, #0]
 800bce6:	58eb      	ldr	r3, [r5, r3]
 800bce8:	b92b      	cbnz	r3, 800bcf6 <quorem+0x96>
 800bcea:	9b01      	ldr	r3, [sp, #4]
 800bcec:	3b04      	subs	r3, #4
 800bcee:	429d      	cmp	r5, r3
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	d32f      	bcc.n	800bd54 <quorem+0xf4>
 800bcf4:	613c      	str	r4, [r7, #16]
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	f001 f9c8 	bl	800d08c <__mcmp>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	db25      	blt.n	800bd4c <quorem+0xec>
 800bd00:	4629      	mov	r1, r5
 800bd02:	2000      	movs	r0, #0
 800bd04:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd08:	f8d1 c000 	ldr.w	ip, [r1]
 800bd0c:	fa1f fe82 	uxth.w	lr, r2
 800bd10:	fa1f f38c 	uxth.w	r3, ip
 800bd14:	eba3 030e 	sub.w	r3, r3, lr
 800bd18:	4403      	add	r3, r0
 800bd1a:	0c12      	lsrs	r2, r2, #16
 800bd1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd2a:	45c1      	cmp	r9, r8
 800bd2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd30:	f841 3b04 	str.w	r3, [r1], #4
 800bd34:	d2e6      	bcs.n	800bd04 <quorem+0xa4>
 800bd36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd3e:	b922      	cbnz	r2, 800bd4a <quorem+0xea>
 800bd40:	3b04      	subs	r3, #4
 800bd42:	429d      	cmp	r5, r3
 800bd44:	461a      	mov	r2, r3
 800bd46:	d30b      	bcc.n	800bd60 <quorem+0x100>
 800bd48:	613c      	str	r4, [r7, #16]
 800bd4a:	3601      	adds	r6, #1
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	b003      	add	sp, #12
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	6812      	ldr	r2, [r2, #0]
 800bd56:	3b04      	subs	r3, #4
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	d1cb      	bne.n	800bcf4 <quorem+0x94>
 800bd5c:	3c01      	subs	r4, #1
 800bd5e:	e7c6      	b.n	800bcee <quorem+0x8e>
 800bd60:	6812      	ldr	r2, [r2, #0]
 800bd62:	3b04      	subs	r3, #4
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	d1ef      	bne.n	800bd48 <quorem+0xe8>
 800bd68:	3c01      	subs	r4, #1
 800bd6a:	e7ea      	b.n	800bd42 <quorem+0xe2>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e7ee      	b.n	800bd4e <quorem+0xee>

0800bd70 <_dtoa_r>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	4614      	mov	r4, r2
 800bd76:	461d      	mov	r5, r3
 800bd78:	69c7      	ldr	r7, [r0, #28]
 800bd7a:	b097      	sub	sp, #92	@ 0x5c
 800bd7c:	4681      	mov	r9, r0
 800bd7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bd82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bd84:	b97f      	cbnz	r7, 800bda6 <_dtoa_r+0x36>
 800bd86:	2010      	movs	r0, #16
 800bd88:	f000 fe0e 	bl	800c9a8 <malloc>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	f8c9 001c 	str.w	r0, [r9, #28]
 800bd92:	b920      	cbnz	r0, 800bd9e <_dtoa_r+0x2e>
 800bd94:	21ef      	movs	r1, #239	@ 0xef
 800bd96:	4bac      	ldr	r3, [pc, #688]	@ (800c048 <_dtoa_r+0x2d8>)
 800bd98:	48ac      	ldr	r0, [pc, #688]	@ (800c04c <_dtoa_r+0x2dc>)
 800bd9a:	f002 fc27 	bl	800e5ec <__assert_func>
 800bd9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bda2:	6007      	str	r7, [r0, #0]
 800bda4:	60c7      	str	r7, [r0, #12]
 800bda6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bdaa:	6819      	ldr	r1, [r3, #0]
 800bdac:	b159      	cbz	r1, 800bdc6 <_dtoa_r+0x56>
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	4093      	lsls	r3, r2
 800bdb4:	604a      	str	r2, [r1, #4]
 800bdb6:	608b      	str	r3, [r1, #8]
 800bdb8:	4648      	mov	r0, r9
 800bdba:	f000 feeb 	bl	800cb94 <_Bfree>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	1e2b      	subs	r3, r5, #0
 800bdc8:	bfaf      	iteee	ge
 800bdca:	2300      	movge	r3, #0
 800bdcc:	2201      	movlt	r2, #1
 800bdce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bdd2:	9307      	strlt	r3, [sp, #28]
 800bdd4:	bfa8      	it	ge
 800bdd6:	6033      	strge	r3, [r6, #0]
 800bdd8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800bddc:	4b9c      	ldr	r3, [pc, #624]	@ (800c050 <_dtoa_r+0x2e0>)
 800bdde:	bfb8      	it	lt
 800bde0:	6032      	strlt	r2, [r6, #0]
 800bde2:	ea33 0308 	bics.w	r3, r3, r8
 800bde6:	d112      	bne.n	800be0e <_dtoa_r+0x9e>
 800bde8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bdec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bdf4:	4323      	orrs	r3, r4
 800bdf6:	f000 855e 	beq.w	800c8b6 <_dtoa_r+0xb46>
 800bdfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bdfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c054 <_dtoa_r+0x2e4>
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8560 	beq.w	800c8c6 <_dtoa_r+0xb56>
 800be06:	f10a 0303 	add.w	r3, sl, #3
 800be0a:	f000 bd5a 	b.w	800c8c2 <_dtoa_r+0xb52>
 800be0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be1a:	2200      	movs	r2, #0
 800be1c:	2300      	movs	r3, #0
 800be1e:	f7f4 fdc3 	bl	80009a8 <__aeabi_dcmpeq>
 800be22:	4607      	mov	r7, r0
 800be24:	b158      	cbz	r0, 800be3e <_dtoa_r+0xce>
 800be26:	2301      	movs	r3, #1
 800be28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800be2e:	b113      	cbz	r3, 800be36 <_dtoa_r+0xc6>
 800be30:	4b89      	ldr	r3, [pc, #548]	@ (800c058 <_dtoa_r+0x2e8>)
 800be32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c05c <_dtoa_r+0x2ec>
 800be3a:	f000 bd44 	b.w	800c8c6 <_dtoa_r+0xb56>
 800be3e:	ab14      	add	r3, sp, #80	@ 0x50
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	ab15      	add	r3, sp, #84	@ 0x54
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	4648      	mov	r0, r9
 800be48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be4c:	f001 fa36 	bl	800d2bc <__d2b>
 800be50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800be54:	9003      	str	r0, [sp, #12]
 800be56:	2e00      	cmp	r6, #0
 800be58:	d078      	beq.n	800bf4c <_dtoa_r+0x1dc>
 800be5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be70:	9712      	str	r7, [sp, #72]	@ 0x48
 800be72:	4619      	mov	r1, r3
 800be74:	2200      	movs	r2, #0
 800be76:	4b7a      	ldr	r3, [pc, #488]	@ (800c060 <_dtoa_r+0x2f0>)
 800be78:	f7f4 f976 	bl	8000168 <__aeabi_dsub>
 800be7c:	a36c      	add	r3, pc, #432	@ (adr r3, 800c030 <_dtoa_r+0x2c0>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fb29 	bl	80004d8 <__aeabi_dmul>
 800be86:	a36c      	add	r3, pc, #432	@ (adr r3, 800c038 <_dtoa_r+0x2c8>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	f7f4 f96e 	bl	800016c <__adddf3>
 800be90:	4604      	mov	r4, r0
 800be92:	4630      	mov	r0, r6
 800be94:	460d      	mov	r5, r1
 800be96:	f7f4 fab5 	bl	8000404 <__aeabi_i2d>
 800be9a:	a369      	add	r3, pc, #420	@ (adr r3, 800c040 <_dtoa_r+0x2d0>)
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	f7f4 fb1a 	bl	80004d8 <__aeabi_dmul>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4620      	mov	r0, r4
 800beaa:	4629      	mov	r1, r5
 800beac:	f7f4 f95e 	bl	800016c <__adddf3>
 800beb0:	4604      	mov	r4, r0
 800beb2:	460d      	mov	r5, r1
 800beb4:	f7f4 fdc0 	bl	8000a38 <__aeabi_d2iz>
 800beb8:	2200      	movs	r2, #0
 800beba:	4607      	mov	r7, r0
 800bebc:	2300      	movs	r3, #0
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 fd7b 	bl	80009bc <__aeabi_dcmplt>
 800bec6:	b140      	cbz	r0, 800beda <_dtoa_r+0x16a>
 800bec8:	4638      	mov	r0, r7
 800beca:	f7f4 fa9b 	bl	8000404 <__aeabi_i2d>
 800bece:	4622      	mov	r2, r4
 800bed0:	462b      	mov	r3, r5
 800bed2:	f7f4 fd69 	bl	80009a8 <__aeabi_dcmpeq>
 800bed6:	b900      	cbnz	r0, 800beda <_dtoa_r+0x16a>
 800bed8:	3f01      	subs	r7, #1
 800beda:	2f16      	cmp	r7, #22
 800bedc:	d854      	bhi.n	800bf88 <_dtoa_r+0x218>
 800bede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bee2:	4b60      	ldr	r3, [pc, #384]	@ (800c064 <_dtoa_r+0x2f4>)
 800bee4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 fd66 	bl	80009bc <__aeabi_dcmplt>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d04b      	beq.n	800bf8c <_dtoa_r+0x21c>
 800bef4:	2300      	movs	r3, #0
 800bef6:	3f01      	subs	r7, #1
 800bef8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800befa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800befc:	1b9b      	subs	r3, r3, r6
 800befe:	1e5a      	subs	r2, r3, #1
 800bf00:	bf49      	itett	mi
 800bf02:	f1c3 0301 	rsbmi	r3, r3, #1
 800bf06:	2300      	movpl	r3, #0
 800bf08:	9304      	strmi	r3, [sp, #16]
 800bf0a:	2300      	movmi	r3, #0
 800bf0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf0e:	bf54      	ite	pl
 800bf10:	9304      	strpl	r3, [sp, #16]
 800bf12:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bf14:	2f00      	cmp	r7, #0
 800bf16:	db3b      	blt.n	800bf90 <_dtoa_r+0x220>
 800bf18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf1a:	970e      	str	r7, [sp, #56]	@ 0x38
 800bf1c:	443b      	add	r3, r7
 800bf1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf20:	2300      	movs	r3, #0
 800bf22:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	d865      	bhi.n	800bff6 <_dtoa_r+0x286>
 800bf2a:	2b05      	cmp	r3, #5
 800bf2c:	bfc4      	itt	gt
 800bf2e:	3b04      	subgt	r3, #4
 800bf30:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bf32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf34:	bfc8      	it	gt
 800bf36:	2400      	movgt	r4, #0
 800bf38:	f1a3 0302 	sub.w	r3, r3, #2
 800bf3c:	bfd8      	it	le
 800bf3e:	2401      	movle	r4, #1
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d864      	bhi.n	800c00e <_dtoa_r+0x29e>
 800bf44:	e8df f003 	tbb	[pc, r3]
 800bf48:	2c385553 	.word	0x2c385553
 800bf4c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bf50:	441e      	add	r6, r3
 800bf52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf56:	2b20      	cmp	r3, #32
 800bf58:	bfc1      	itttt	gt
 800bf5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf5e:	fa08 f803 	lslgt.w	r8, r8, r3
 800bf62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf66:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf6a:	bfd6      	itet	le
 800bf6c:	f1c3 0320 	rsble	r3, r3, #32
 800bf70:	ea48 0003 	orrgt.w	r0, r8, r3
 800bf74:	fa04 f003 	lslle.w	r0, r4, r3
 800bf78:	f7f4 fa34 	bl	80003e4 <__aeabi_ui2d>
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf82:	3e01      	subs	r6, #1
 800bf84:	9212      	str	r2, [sp, #72]	@ 0x48
 800bf86:	e774      	b.n	800be72 <_dtoa_r+0x102>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e7b5      	b.n	800bef8 <_dtoa_r+0x188>
 800bf8c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bf8e:	e7b4      	b.n	800befa <_dtoa_r+0x18a>
 800bf90:	9b04      	ldr	r3, [sp, #16]
 800bf92:	1bdb      	subs	r3, r3, r7
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	427b      	negs	r3, r7
 800bf98:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf9e:	e7c1      	b.n	800bf24 <_dtoa_r+0x1b4>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfa6:	eb07 0b03 	add.w	fp, r7, r3
 800bfaa:	f10b 0301 	add.w	r3, fp, #1
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	9308      	str	r3, [sp, #32]
 800bfb2:	bfb8      	it	lt
 800bfb4:	2301      	movlt	r3, #1
 800bfb6:	e006      	b.n	800bfc6 <_dtoa_r+0x256>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd28      	ble.n	800c014 <_dtoa_r+0x2a4>
 800bfc2:	469b      	mov	fp, r3
 800bfc4:	9308      	str	r3, [sp, #32]
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	2204      	movs	r2, #4
 800bfca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bfce:	f102 0514 	add.w	r5, r2, #20
 800bfd2:	429d      	cmp	r5, r3
 800bfd4:	d926      	bls.n	800c024 <_dtoa_r+0x2b4>
 800bfd6:	6041      	str	r1, [r0, #4]
 800bfd8:	4648      	mov	r0, r9
 800bfda:	f000 fd9b 	bl	800cb14 <_Balloc>
 800bfde:	4682      	mov	sl, r0
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d143      	bne.n	800c06c <_dtoa_r+0x2fc>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bfea:	4b1f      	ldr	r3, [pc, #124]	@ (800c068 <_dtoa_r+0x2f8>)
 800bfec:	e6d4      	b.n	800bd98 <_dtoa_r+0x28>
 800bfee:	2300      	movs	r3, #0
 800bff0:	e7e3      	b.n	800bfba <_dtoa_r+0x24a>
 800bff2:	2300      	movs	r3, #0
 800bff4:	e7d5      	b.n	800bfa2 <_dtoa_r+0x232>
 800bff6:	2401      	movs	r4, #1
 800bff8:	2300      	movs	r3, #0
 800bffa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bffc:	9320      	str	r3, [sp, #128]	@ 0x80
 800bffe:	f04f 3bff 	mov.w	fp, #4294967295
 800c002:	2200      	movs	r2, #0
 800c004:	2312      	movs	r3, #18
 800c006:	f8cd b020 	str.w	fp, [sp, #32]
 800c00a:	9221      	str	r2, [sp, #132]	@ 0x84
 800c00c:	e7db      	b.n	800bfc6 <_dtoa_r+0x256>
 800c00e:	2301      	movs	r3, #1
 800c010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c012:	e7f4      	b.n	800bffe <_dtoa_r+0x28e>
 800c014:	f04f 0b01 	mov.w	fp, #1
 800c018:	465b      	mov	r3, fp
 800c01a:	f8cd b020 	str.w	fp, [sp, #32]
 800c01e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c022:	e7d0      	b.n	800bfc6 <_dtoa_r+0x256>
 800c024:	3101      	adds	r1, #1
 800c026:	0052      	lsls	r2, r2, #1
 800c028:	e7d1      	b.n	800bfce <_dtoa_r+0x25e>
 800c02a:	bf00      	nop
 800c02c:	f3af 8000 	nop.w
 800c030:	636f4361 	.word	0x636f4361
 800c034:	3fd287a7 	.word	0x3fd287a7
 800c038:	8b60c8b3 	.word	0x8b60c8b3
 800c03c:	3fc68a28 	.word	0x3fc68a28
 800c040:	509f79fb 	.word	0x509f79fb
 800c044:	3fd34413 	.word	0x3fd34413
 800c048:	0800f3bc 	.word	0x0800f3bc
 800c04c:	0800f3d3 	.word	0x0800f3d3
 800c050:	7ff00000 	.word	0x7ff00000
 800c054:	0800f3b8 	.word	0x0800f3b8
 800c058:	0800f387 	.word	0x0800f387
 800c05c:	0800f386 	.word	0x0800f386
 800c060:	3ff80000 	.word	0x3ff80000
 800c064:	0800f580 	.word	0x0800f580
 800c068:	0800f42b 	.word	0x0800f42b
 800c06c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c070:	6018      	str	r0, [r3, #0]
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	2b0e      	cmp	r3, #14
 800c076:	f200 80a1 	bhi.w	800c1bc <_dtoa_r+0x44c>
 800c07a:	2c00      	cmp	r4, #0
 800c07c:	f000 809e 	beq.w	800c1bc <_dtoa_r+0x44c>
 800c080:	2f00      	cmp	r7, #0
 800c082:	dd33      	ble.n	800c0ec <_dtoa_r+0x37c>
 800c084:	4b9c      	ldr	r3, [pc, #624]	@ (800c2f8 <_dtoa_r+0x588>)
 800c086:	f007 020f 	and.w	r2, r7, #15
 800c08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c08e:	05f8      	lsls	r0, r7, #23
 800c090:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c094:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c09c:	d516      	bpl.n	800c0cc <_dtoa_r+0x35c>
 800c09e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0a2:	4b96      	ldr	r3, [pc, #600]	@ (800c2fc <_dtoa_r+0x58c>)
 800c0a4:	2603      	movs	r6, #3
 800c0a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0aa:	f7f4 fb3f 	bl	800072c <__aeabi_ddiv>
 800c0ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0b2:	f004 040f 	and.w	r4, r4, #15
 800c0b6:	4d91      	ldr	r5, [pc, #580]	@ (800c2fc <_dtoa_r+0x58c>)
 800c0b8:	b954      	cbnz	r4, 800c0d0 <_dtoa_r+0x360>
 800c0ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0c2:	f7f4 fb33 	bl	800072c <__aeabi_ddiv>
 800c0c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0ca:	e028      	b.n	800c11e <_dtoa_r+0x3ae>
 800c0cc:	2602      	movs	r6, #2
 800c0ce:	e7f2      	b.n	800c0b6 <_dtoa_r+0x346>
 800c0d0:	07e1      	lsls	r1, r4, #31
 800c0d2:	d508      	bpl.n	800c0e6 <_dtoa_r+0x376>
 800c0d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0dc:	f7f4 f9fc 	bl	80004d8 <__aeabi_dmul>
 800c0e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0e4:	3601      	adds	r6, #1
 800c0e6:	1064      	asrs	r4, r4, #1
 800c0e8:	3508      	adds	r5, #8
 800c0ea:	e7e5      	b.n	800c0b8 <_dtoa_r+0x348>
 800c0ec:	f000 80af 	beq.w	800c24e <_dtoa_r+0x4de>
 800c0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0f4:	427c      	negs	r4, r7
 800c0f6:	4b80      	ldr	r3, [pc, #512]	@ (800c2f8 <_dtoa_r+0x588>)
 800c0f8:	f004 020f 	and.w	r2, r4, #15
 800c0fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f9e8 	bl	80004d8 <__aeabi_dmul>
 800c108:	2602      	movs	r6, #2
 800c10a:	2300      	movs	r3, #0
 800c10c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c110:	4d7a      	ldr	r5, [pc, #488]	@ (800c2fc <_dtoa_r+0x58c>)
 800c112:	1124      	asrs	r4, r4, #4
 800c114:	2c00      	cmp	r4, #0
 800c116:	f040 808f 	bne.w	800c238 <_dtoa_r+0x4c8>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1d3      	bne.n	800c0c6 <_dtoa_r+0x356>
 800c11e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 8094 	beq.w	800c252 <_dtoa_r+0x4e2>
 800c12a:	2200      	movs	r2, #0
 800c12c:	4620      	mov	r0, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	4b73      	ldr	r3, [pc, #460]	@ (800c300 <_dtoa_r+0x590>)
 800c132:	f7f4 fc43 	bl	80009bc <__aeabi_dcmplt>
 800c136:	2800      	cmp	r0, #0
 800c138:	f000 808b 	beq.w	800c252 <_dtoa_r+0x4e2>
 800c13c:	9b08      	ldr	r3, [sp, #32]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 8087 	beq.w	800c252 <_dtoa_r+0x4e2>
 800c144:	f1bb 0f00 	cmp.w	fp, #0
 800c148:	dd34      	ble.n	800c1b4 <_dtoa_r+0x444>
 800c14a:	4620      	mov	r0, r4
 800c14c:	2200      	movs	r2, #0
 800c14e:	4629      	mov	r1, r5
 800c150:	4b6c      	ldr	r3, [pc, #432]	@ (800c304 <_dtoa_r+0x594>)
 800c152:	f7f4 f9c1 	bl	80004d8 <__aeabi_dmul>
 800c156:	465c      	mov	r4, fp
 800c158:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c15c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c160:	3601      	adds	r6, #1
 800c162:	4630      	mov	r0, r6
 800c164:	f7f4 f94e 	bl	8000404 <__aeabi_i2d>
 800c168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c16c:	f7f4 f9b4 	bl	80004d8 <__aeabi_dmul>
 800c170:	2200      	movs	r2, #0
 800c172:	4b65      	ldr	r3, [pc, #404]	@ (800c308 <_dtoa_r+0x598>)
 800c174:	f7f3 fffa 	bl	800016c <__adddf3>
 800c178:	4605      	mov	r5, r0
 800c17a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c17e:	2c00      	cmp	r4, #0
 800c180:	d16a      	bne.n	800c258 <_dtoa_r+0x4e8>
 800c182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c186:	2200      	movs	r2, #0
 800c188:	4b60      	ldr	r3, [pc, #384]	@ (800c30c <_dtoa_r+0x59c>)
 800c18a:	f7f3 ffed 	bl	8000168 <__aeabi_dsub>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c196:	462a      	mov	r2, r5
 800c198:	4633      	mov	r3, r6
 800c19a:	f7f4 fc2d 	bl	80009f8 <__aeabi_dcmpgt>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f040 8298 	bne.w	800c6d4 <_dtoa_r+0x964>
 800c1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1a8:	462a      	mov	r2, r5
 800c1aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c1ae:	f7f4 fc05 	bl	80009bc <__aeabi_dcmplt>
 800c1b2:	bb38      	cbnz	r0, 800c204 <_dtoa_r+0x494>
 800c1b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c1b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c1bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f2c0 8157 	blt.w	800c472 <_dtoa_r+0x702>
 800c1c4:	2f0e      	cmp	r7, #14
 800c1c6:	f300 8154 	bgt.w	800c472 <_dtoa_r+0x702>
 800c1ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c2f8 <_dtoa_r+0x588>)
 800c1cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c1d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f280 80e5 	bge.w	800c3aa <_dtoa_r+0x63a>
 800c1e0:	9b08      	ldr	r3, [sp, #32]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f300 80e1 	bgt.w	800c3aa <_dtoa_r+0x63a>
 800c1e8:	d10c      	bne.n	800c204 <_dtoa_r+0x494>
 800c1ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4b46      	ldr	r3, [pc, #280]	@ (800c30c <_dtoa_r+0x59c>)
 800c1f2:	f7f4 f971 	bl	80004d8 <__aeabi_dmul>
 800c1f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1fa:	f7f4 fbf3 	bl	80009e4 <__aeabi_dcmpge>
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f000 8266 	beq.w	800c6d0 <_dtoa_r+0x960>
 800c204:	2400      	movs	r4, #0
 800c206:	4625      	mov	r5, r4
 800c208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c20a:	4656      	mov	r6, sl
 800c20c:	ea6f 0803 	mvn.w	r8, r3
 800c210:	2700      	movs	r7, #0
 800c212:	4621      	mov	r1, r4
 800c214:	4648      	mov	r0, r9
 800c216:	f000 fcbd 	bl	800cb94 <_Bfree>
 800c21a:	2d00      	cmp	r5, #0
 800c21c:	f000 80bd 	beq.w	800c39a <_dtoa_r+0x62a>
 800c220:	b12f      	cbz	r7, 800c22e <_dtoa_r+0x4be>
 800c222:	42af      	cmp	r7, r5
 800c224:	d003      	beq.n	800c22e <_dtoa_r+0x4be>
 800c226:	4639      	mov	r1, r7
 800c228:	4648      	mov	r0, r9
 800c22a:	f000 fcb3 	bl	800cb94 <_Bfree>
 800c22e:	4629      	mov	r1, r5
 800c230:	4648      	mov	r0, r9
 800c232:	f000 fcaf 	bl	800cb94 <_Bfree>
 800c236:	e0b0      	b.n	800c39a <_dtoa_r+0x62a>
 800c238:	07e2      	lsls	r2, r4, #31
 800c23a:	d505      	bpl.n	800c248 <_dtoa_r+0x4d8>
 800c23c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c240:	f7f4 f94a 	bl	80004d8 <__aeabi_dmul>
 800c244:	2301      	movs	r3, #1
 800c246:	3601      	adds	r6, #1
 800c248:	1064      	asrs	r4, r4, #1
 800c24a:	3508      	adds	r5, #8
 800c24c:	e762      	b.n	800c114 <_dtoa_r+0x3a4>
 800c24e:	2602      	movs	r6, #2
 800c250:	e765      	b.n	800c11e <_dtoa_r+0x3ae>
 800c252:	46b8      	mov	r8, r7
 800c254:	9c08      	ldr	r4, [sp, #32]
 800c256:	e784      	b.n	800c162 <_dtoa_r+0x3f2>
 800c258:	4b27      	ldr	r3, [pc, #156]	@ (800c2f8 <_dtoa_r+0x588>)
 800c25a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c25c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c260:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c264:	4454      	add	r4, sl
 800c266:	2900      	cmp	r1, #0
 800c268:	d054      	beq.n	800c314 <_dtoa_r+0x5a4>
 800c26a:	2000      	movs	r0, #0
 800c26c:	4928      	ldr	r1, [pc, #160]	@ (800c310 <_dtoa_r+0x5a0>)
 800c26e:	f7f4 fa5d 	bl	800072c <__aeabi_ddiv>
 800c272:	4633      	mov	r3, r6
 800c274:	462a      	mov	r2, r5
 800c276:	f7f3 ff77 	bl	8000168 <__aeabi_dsub>
 800c27a:	4656      	mov	r6, sl
 800c27c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c284:	f7f4 fbd8 	bl	8000a38 <__aeabi_d2iz>
 800c288:	4605      	mov	r5, r0
 800c28a:	f7f4 f8bb 	bl	8000404 <__aeabi_i2d>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c296:	f7f3 ff67 	bl	8000168 <__aeabi_dsub>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	3530      	adds	r5, #48	@ 0x30
 800c2a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2a8:	f806 5b01 	strb.w	r5, [r6], #1
 800c2ac:	f7f4 fb86 	bl	80009bc <__aeabi_dcmplt>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d172      	bne.n	800c39a <_dtoa_r+0x62a>
 800c2b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	4911      	ldr	r1, [pc, #68]	@ (800c300 <_dtoa_r+0x590>)
 800c2bc:	f7f3 ff54 	bl	8000168 <__aeabi_dsub>
 800c2c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2c4:	f7f4 fb7a 	bl	80009bc <__aeabi_dcmplt>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f040 80b4 	bne.w	800c436 <_dtoa_r+0x6c6>
 800c2ce:	42a6      	cmp	r6, r4
 800c2d0:	f43f af70 	beq.w	800c1b4 <_dtoa_r+0x444>
 800c2d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2d8:	2200      	movs	r2, #0
 800c2da:	4b0a      	ldr	r3, [pc, #40]	@ (800c304 <_dtoa_r+0x594>)
 800c2dc:	f7f4 f8fc 	bl	80004d8 <__aeabi_dmul>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ea:	4b06      	ldr	r3, [pc, #24]	@ (800c304 <_dtoa_r+0x594>)
 800c2ec:	f7f4 f8f4 	bl	80004d8 <__aeabi_dmul>
 800c2f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2f4:	e7c4      	b.n	800c280 <_dtoa_r+0x510>
 800c2f6:	bf00      	nop
 800c2f8:	0800f580 	.word	0x0800f580
 800c2fc:	0800f558 	.word	0x0800f558
 800c300:	3ff00000 	.word	0x3ff00000
 800c304:	40240000 	.word	0x40240000
 800c308:	401c0000 	.word	0x401c0000
 800c30c:	40140000 	.word	0x40140000
 800c310:	3fe00000 	.word	0x3fe00000
 800c314:	4631      	mov	r1, r6
 800c316:	4628      	mov	r0, r5
 800c318:	f7f4 f8de 	bl	80004d8 <__aeabi_dmul>
 800c31c:	4656      	mov	r6, sl
 800c31e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c322:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c328:	f7f4 fb86 	bl	8000a38 <__aeabi_d2iz>
 800c32c:	4605      	mov	r5, r0
 800c32e:	f7f4 f869 	bl	8000404 <__aeabi_i2d>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c33a:	f7f3 ff15 	bl	8000168 <__aeabi_dsub>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	3530      	adds	r5, #48	@ 0x30
 800c344:	f806 5b01 	strb.w	r5, [r6], #1
 800c348:	42a6      	cmp	r6, r4
 800c34a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c34e:	f04f 0200 	mov.w	r2, #0
 800c352:	d124      	bne.n	800c39e <_dtoa_r+0x62e>
 800c354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c358:	4bae      	ldr	r3, [pc, #696]	@ (800c614 <_dtoa_r+0x8a4>)
 800c35a:	f7f3 ff07 	bl	800016c <__adddf3>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c366:	f7f4 fb47 	bl	80009f8 <__aeabi_dcmpgt>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d163      	bne.n	800c436 <_dtoa_r+0x6c6>
 800c36e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c372:	2000      	movs	r0, #0
 800c374:	49a7      	ldr	r1, [pc, #668]	@ (800c614 <_dtoa_r+0x8a4>)
 800c376:	f7f3 fef7 	bl	8000168 <__aeabi_dsub>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c382:	f7f4 fb1b 	bl	80009bc <__aeabi_dcmplt>
 800c386:	2800      	cmp	r0, #0
 800c388:	f43f af14 	beq.w	800c1b4 <_dtoa_r+0x444>
 800c38c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c38e:	1e73      	subs	r3, r6, #1
 800c390:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c392:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c396:	2b30      	cmp	r3, #48	@ 0x30
 800c398:	d0f8      	beq.n	800c38c <_dtoa_r+0x61c>
 800c39a:	4647      	mov	r7, r8
 800c39c:	e03b      	b.n	800c416 <_dtoa_r+0x6a6>
 800c39e:	4b9e      	ldr	r3, [pc, #632]	@ (800c618 <_dtoa_r+0x8a8>)
 800c3a0:	f7f4 f89a 	bl	80004d8 <__aeabi_dmul>
 800c3a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3a8:	e7bc      	b.n	800c324 <_dtoa_r+0x5b4>
 800c3aa:	4656      	mov	r6, sl
 800c3ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c3b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f7f4 f9b8 	bl	800072c <__aeabi_ddiv>
 800c3bc:	f7f4 fb3c 	bl	8000a38 <__aeabi_d2iz>
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	f7f4 f81f 	bl	8000404 <__aeabi_i2d>
 800c3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ca:	f7f4 f885 	bl	80004d8 <__aeabi_dmul>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7f3 fec7 	bl	8000168 <__aeabi_dsub>
 800c3da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c3de:	9d08      	ldr	r5, [sp, #32]
 800c3e0:	f806 4b01 	strb.w	r4, [r6], #1
 800c3e4:	eba6 040a 	sub.w	r4, r6, sl
 800c3e8:	42a5      	cmp	r5, r4
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	d133      	bne.n	800c458 <_dtoa_r+0x6e8>
 800c3f0:	f7f3 febc 	bl	800016c <__adddf3>
 800c3f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	460d      	mov	r5, r1
 800c3fc:	f7f4 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 800c400:	b9c0      	cbnz	r0, 800c434 <_dtoa_r+0x6c4>
 800c402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c406:	4620      	mov	r0, r4
 800c408:	4629      	mov	r1, r5
 800c40a:	f7f4 facd 	bl	80009a8 <__aeabi_dcmpeq>
 800c40e:	b110      	cbz	r0, 800c416 <_dtoa_r+0x6a6>
 800c410:	f018 0f01 	tst.w	r8, #1
 800c414:	d10e      	bne.n	800c434 <_dtoa_r+0x6c4>
 800c416:	4648      	mov	r0, r9
 800c418:	9903      	ldr	r1, [sp, #12]
 800c41a:	f000 fbbb 	bl	800cb94 <_Bfree>
 800c41e:	2300      	movs	r3, #0
 800c420:	7033      	strb	r3, [r6, #0]
 800c422:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c424:	3701      	adds	r7, #1
 800c426:	601f      	str	r7, [r3, #0]
 800c428:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 824b 	beq.w	800c8c6 <_dtoa_r+0xb56>
 800c430:	601e      	str	r6, [r3, #0]
 800c432:	e248      	b.n	800c8c6 <_dtoa_r+0xb56>
 800c434:	46b8      	mov	r8, r7
 800c436:	4633      	mov	r3, r6
 800c438:	461e      	mov	r6, r3
 800c43a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c43e:	2a39      	cmp	r2, #57	@ 0x39
 800c440:	d106      	bne.n	800c450 <_dtoa_r+0x6e0>
 800c442:	459a      	cmp	sl, r3
 800c444:	d1f8      	bne.n	800c438 <_dtoa_r+0x6c8>
 800c446:	2230      	movs	r2, #48	@ 0x30
 800c448:	f108 0801 	add.w	r8, r8, #1
 800c44c:	f88a 2000 	strb.w	r2, [sl]
 800c450:	781a      	ldrb	r2, [r3, #0]
 800c452:	3201      	adds	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
 800c456:	e7a0      	b.n	800c39a <_dtoa_r+0x62a>
 800c458:	2200      	movs	r2, #0
 800c45a:	4b6f      	ldr	r3, [pc, #444]	@ (800c618 <_dtoa_r+0x8a8>)
 800c45c:	f7f4 f83c 	bl	80004d8 <__aeabi_dmul>
 800c460:	2200      	movs	r2, #0
 800c462:	2300      	movs	r3, #0
 800c464:	4604      	mov	r4, r0
 800c466:	460d      	mov	r5, r1
 800c468:	f7f4 fa9e 	bl	80009a8 <__aeabi_dcmpeq>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d09f      	beq.n	800c3b0 <_dtoa_r+0x640>
 800c470:	e7d1      	b.n	800c416 <_dtoa_r+0x6a6>
 800c472:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c474:	2a00      	cmp	r2, #0
 800c476:	f000 80ea 	beq.w	800c64e <_dtoa_r+0x8de>
 800c47a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c47c:	2a01      	cmp	r2, #1
 800c47e:	f300 80cd 	bgt.w	800c61c <_dtoa_r+0x8ac>
 800c482:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c484:	2a00      	cmp	r2, #0
 800c486:	f000 80c1 	beq.w	800c60c <_dtoa_r+0x89c>
 800c48a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c48e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c490:	9e04      	ldr	r6, [sp, #16]
 800c492:	9a04      	ldr	r2, [sp, #16]
 800c494:	2101      	movs	r1, #1
 800c496:	441a      	add	r2, r3
 800c498:	9204      	str	r2, [sp, #16]
 800c49a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c49c:	4648      	mov	r0, r9
 800c49e:	441a      	add	r2, r3
 800c4a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4a2:	f000 fc75 	bl	800cd90 <__i2b>
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	b166      	cbz	r6, 800c4c4 <_dtoa_r+0x754>
 800c4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dd09      	ble.n	800c4c4 <_dtoa_r+0x754>
 800c4b0:	42b3      	cmp	r3, r6
 800c4b2:	bfa8      	it	ge
 800c4b4:	4633      	movge	r3, r6
 800c4b6:	9a04      	ldr	r2, [sp, #16]
 800c4b8:	1af6      	subs	r6, r6, r3
 800c4ba:	1ad2      	subs	r2, r2, r3
 800c4bc:	9204      	str	r2, [sp, #16]
 800c4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4c6:	b30b      	cbz	r3, 800c50c <_dtoa_r+0x79c>
 800c4c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 80c6 	beq.w	800c65c <_dtoa_r+0x8ec>
 800c4d0:	2c00      	cmp	r4, #0
 800c4d2:	f000 80c0 	beq.w	800c656 <_dtoa_r+0x8e6>
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4648      	mov	r0, r9
 800c4dc:	f000 fd10 	bl	800cf00 <__pow5mult>
 800c4e0:	9a03      	ldr	r2, [sp, #12]
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	4648      	mov	r0, r9
 800c4e8:	f000 fc68 	bl	800cdbc <__multiply>
 800c4ec:	9903      	ldr	r1, [sp, #12]
 800c4ee:	4680      	mov	r8, r0
 800c4f0:	4648      	mov	r0, r9
 800c4f2:	f000 fb4f 	bl	800cb94 <_Bfree>
 800c4f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4f8:	1b1b      	subs	r3, r3, r4
 800c4fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4fc:	f000 80b1 	beq.w	800c662 <_dtoa_r+0x8f2>
 800c500:	4641      	mov	r1, r8
 800c502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c504:	4648      	mov	r0, r9
 800c506:	f000 fcfb 	bl	800cf00 <__pow5mult>
 800c50a:	9003      	str	r0, [sp, #12]
 800c50c:	2101      	movs	r1, #1
 800c50e:	4648      	mov	r0, r9
 800c510:	f000 fc3e 	bl	800cd90 <__i2b>
 800c514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c516:	4604      	mov	r4, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 81d8 	beq.w	800c8ce <_dtoa_r+0xb5e>
 800c51e:	461a      	mov	r2, r3
 800c520:	4601      	mov	r1, r0
 800c522:	4648      	mov	r0, r9
 800c524:	f000 fcec 	bl	800cf00 <__pow5mult>
 800c528:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c52a:	4604      	mov	r4, r0
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	f300 809f 	bgt.w	800c670 <_dtoa_r+0x900>
 800c532:	9b06      	ldr	r3, [sp, #24]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f040 8097 	bne.w	800c668 <_dtoa_r+0x8f8>
 800c53a:	9b07      	ldr	r3, [sp, #28]
 800c53c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c540:	2b00      	cmp	r3, #0
 800c542:	f040 8093 	bne.w	800c66c <_dtoa_r+0x8fc>
 800c546:	9b07      	ldr	r3, [sp, #28]
 800c548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c54c:	0d1b      	lsrs	r3, r3, #20
 800c54e:	051b      	lsls	r3, r3, #20
 800c550:	b133      	cbz	r3, 800c560 <_dtoa_r+0x7f0>
 800c552:	9b04      	ldr	r3, [sp, #16]
 800c554:	3301      	adds	r3, #1
 800c556:	9304      	str	r3, [sp, #16]
 800c558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c55a:	3301      	adds	r3, #1
 800c55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c55e:	2301      	movs	r3, #1
 800c560:	930a      	str	r3, [sp, #40]	@ 0x28
 800c562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 81b8 	beq.w	800c8da <_dtoa_r+0xb6a>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c570:	6918      	ldr	r0, [r3, #16]
 800c572:	f000 fbc1 	bl	800ccf8 <__hi0bits>
 800c576:	f1c0 0020 	rsb	r0, r0, #32
 800c57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57c:	4418      	add	r0, r3
 800c57e:	f010 001f 	ands.w	r0, r0, #31
 800c582:	f000 8082 	beq.w	800c68a <_dtoa_r+0x91a>
 800c586:	f1c0 0320 	rsb	r3, r0, #32
 800c58a:	2b04      	cmp	r3, #4
 800c58c:	dd73      	ble.n	800c676 <_dtoa_r+0x906>
 800c58e:	9b04      	ldr	r3, [sp, #16]
 800c590:	f1c0 001c 	rsb	r0, r0, #28
 800c594:	4403      	add	r3, r0
 800c596:	9304      	str	r3, [sp, #16]
 800c598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c59a:	4406      	add	r6, r0
 800c59c:	4403      	add	r3, r0
 800c59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5a0:	9b04      	ldr	r3, [sp, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dd05      	ble.n	800c5b2 <_dtoa_r+0x842>
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	4648      	mov	r0, r9
 800c5aa:	9903      	ldr	r1, [sp, #12]
 800c5ac:	f000 fd02 	bl	800cfb4 <__lshift>
 800c5b0:	9003      	str	r0, [sp, #12]
 800c5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	dd05      	ble.n	800c5c4 <_dtoa_r+0x854>
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4648      	mov	r0, r9
 800c5be:	f000 fcf9 	bl	800cfb4 <__lshift>
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d061      	beq.n	800c68e <_dtoa_r+0x91e>
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	9803      	ldr	r0, [sp, #12]
 800c5ce:	f000 fd5d 	bl	800d08c <__mcmp>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	da5b      	bge.n	800c68e <_dtoa_r+0x91e>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	220a      	movs	r2, #10
 800c5da:	4648      	mov	r0, r9
 800c5dc:	9903      	ldr	r1, [sp, #12]
 800c5de:	f000 fafb 	bl	800cbd8 <__multadd>
 800c5e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e4:	f107 38ff 	add.w	r8, r7, #4294967295
 800c5e8:	9003      	str	r0, [sp, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 8177 	beq.w	800c8de <_dtoa_r+0xb6e>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	4648      	mov	r0, r9
 800c5f8:	f000 faee 	bl	800cbd8 <__multadd>
 800c5fc:	f1bb 0f00 	cmp.w	fp, #0
 800c600:	4605      	mov	r5, r0
 800c602:	dc6f      	bgt.n	800c6e4 <_dtoa_r+0x974>
 800c604:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c606:	2b02      	cmp	r3, #2
 800c608:	dc49      	bgt.n	800c69e <_dtoa_r+0x92e>
 800c60a:	e06b      	b.n	800c6e4 <_dtoa_r+0x974>
 800c60c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c60e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c612:	e73c      	b.n	800c48e <_dtoa_r+0x71e>
 800c614:	3fe00000 	.word	0x3fe00000
 800c618:	40240000 	.word	0x40240000
 800c61c:	9b08      	ldr	r3, [sp, #32]
 800c61e:	1e5c      	subs	r4, r3, #1
 800c620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c622:	42a3      	cmp	r3, r4
 800c624:	db09      	blt.n	800c63a <_dtoa_r+0x8ca>
 800c626:	1b1c      	subs	r4, r3, r4
 800c628:	9b08      	ldr	r3, [sp, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f6bf af30 	bge.w	800c490 <_dtoa_r+0x720>
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	9a08      	ldr	r2, [sp, #32]
 800c634:	1a9e      	subs	r6, r3, r2
 800c636:	2300      	movs	r3, #0
 800c638:	e72b      	b.n	800c492 <_dtoa_r+0x722>
 800c63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c63c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c63e:	1ae3      	subs	r3, r4, r3
 800c640:	441a      	add	r2, r3
 800c642:	940a      	str	r4, [sp, #40]	@ 0x28
 800c644:	9e04      	ldr	r6, [sp, #16]
 800c646:	2400      	movs	r4, #0
 800c648:	9b08      	ldr	r3, [sp, #32]
 800c64a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c64c:	e721      	b.n	800c492 <_dtoa_r+0x722>
 800c64e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c650:	9e04      	ldr	r6, [sp, #16]
 800c652:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c654:	e728      	b.n	800c4a8 <_dtoa_r+0x738>
 800c656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c65a:	e751      	b.n	800c500 <_dtoa_r+0x790>
 800c65c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c65e:	9903      	ldr	r1, [sp, #12]
 800c660:	e750      	b.n	800c504 <_dtoa_r+0x794>
 800c662:	f8cd 800c 	str.w	r8, [sp, #12]
 800c666:	e751      	b.n	800c50c <_dtoa_r+0x79c>
 800c668:	2300      	movs	r3, #0
 800c66a:	e779      	b.n	800c560 <_dtoa_r+0x7f0>
 800c66c:	9b06      	ldr	r3, [sp, #24]
 800c66e:	e777      	b.n	800c560 <_dtoa_r+0x7f0>
 800c670:	2300      	movs	r3, #0
 800c672:	930a      	str	r3, [sp, #40]	@ 0x28
 800c674:	e779      	b.n	800c56a <_dtoa_r+0x7fa>
 800c676:	d093      	beq.n	800c5a0 <_dtoa_r+0x830>
 800c678:	9a04      	ldr	r2, [sp, #16]
 800c67a:	331c      	adds	r3, #28
 800c67c:	441a      	add	r2, r3
 800c67e:	9204      	str	r2, [sp, #16]
 800c680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c682:	441e      	add	r6, r3
 800c684:	441a      	add	r2, r3
 800c686:	9209      	str	r2, [sp, #36]	@ 0x24
 800c688:	e78a      	b.n	800c5a0 <_dtoa_r+0x830>
 800c68a:	4603      	mov	r3, r0
 800c68c:	e7f4      	b.n	800c678 <_dtoa_r+0x908>
 800c68e:	9b08      	ldr	r3, [sp, #32]
 800c690:	46b8      	mov	r8, r7
 800c692:	2b00      	cmp	r3, #0
 800c694:	dc20      	bgt.n	800c6d8 <_dtoa_r+0x968>
 800c696:	469b      	mov	fp, r3
 800c698:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	dd1e      	ble.n	800c6dc <_dtoa_r+0x96c>
 800c69e:	f1bb 0f00 	cmp.w	fp, #0
 800c6a2:	f47f adb1 	bne.w	800c208 <_dtoa_r+0x498>
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	465b      	mov	r3, fp
 800c6aa:	2205      	movs	r2, #5
 800c6ac:	4648      	mov	r0, r9
 800c6ae:	f000 fa93 	bl	800cbd8 <__multadd>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	9803      	ldr	r0, [sp, #12]
 800c6b8:	f000 fce8 	bl	800d08c <__mcmp>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f77f ada3 	ble.w	800c208 <_dtoa_r+0x498>
 800c6c2:	4656      	mov	r6, sl
 800c6c4:	2331      	movs	r3, #49	@ 0x31
 800c6c6:	f108 0801 	add.w	r8, r8, #1
 800c6ca:	f806 3b01 	strb.w	r3, [r6], #1
 800c6ce:	e59f      	b.n	800c210 <_dtoa_r+0x4a0>
 800c6d0:	46b8      	mov	r8, r7
 800c6d2:	9c08      	ldr	r4, [sp, #32]
 800c6d4:	4625      	mov	r5, r4
 800c6d6:	e7f4      	b.n	800c6c2 <_dtoa_r+0x952>
 800c6d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c6dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 8101 	beq.w	800c8e6 <_dtoa_r+0xb76>
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	dd05      	ble.n	800c6f4 <_dtoa_r+0x984>
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	4648      	mov	r0, r9
 800c6ee:	f000 fc61 	bl	800cfb4 <__lshift>
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d05c      	beq.n	800c7b4 <_dtoa_r+0xa44>
 800c6fa:	4648      	mov	r0, r9
 800c6fc:	6869      	ldr	r1, [r5, #4]
 800c6fe:	f000 fa09 	bl	800cb14 <_Balloc>
 800c702:	4606      	mov	r6, r0
 800c704:	b928      	cbnz	r0, 800c712 <_dtoa_r+0x9a2>
 800c706:	4602      	mov	r2, r0
 800c708:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c70c:	4b80      	ldr	r3, [pc, #512]	@ (800c910 <_dtoa_r+0xba0>)
 800c70e:	f7ff bb43 	b.w	800bd98 <_dtoa_r+0x28>
 800c712:	692a      	ldr	r2, [r5, #16]
 800c714:	f105 010c 	add.w	r1, r5, #12
 800c718:	3202      	adds	r2, #2
 800c71a:	0092      	lsls	r2, r2, #2
 800c71c:	300c      	adds	r0, #12
 800c71e:	f001 ff51 	bl	800e5c4 <memcpy>
 800c722:	2201      	movs	r2, #1
 800c724:	4631      	mov	r1, r6
 800c726:	4648      	mov	r0, r9
 800c728:	f000 fc44 	bl	800cfb4 <__lshift>
 800c72c:	462f      	mov	r7, r5
 800c72e:	4605      	mov	r5, r0
 800c730:	f10a 0301 	add.w	r3, sl, #1
 800c734:	9304      	str	r3, [sp, #16]
 800c736:	eb0a 030b 	add.w	r3, sl, fp
 800c73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c73c:	9b06      	ldr	r3, [sp, #24]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	9309      	str	r3, [sp, #36]	@ 0x24
 800c744:	9b04      	ldr	r3, [sp, #16]
 800c746:	4621      	mov	r1, r4
 800c748:	9803      	ldr	r0, [sp, #12]
 800c74a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c74e:	f7ff fa87 	bl	800bc60 <quorem>
 800c752:	4603      	mov	r3, r0
 800c754:	4639      	mov	r1, r7
 800c756:	3330      	adds	r3, #48	@ 0x30
 800c758:	9006      	str	r0, [sp, #24]
 800c75a:	9803      	ldr	r0, [sp, #12]
 800c75c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c75e:	f000 fc95 	bl	800d08c <__mcmp>
 800c762:	462a      	mov	r2, r5
 800c764:	9008      	str	r0, [sp, #32]
 800c766:	4621      	mov	r1, r4
 800c768:	4648      	mov	r0, r9
 800c76a:	f000 fcab 	bl	800d0c4 <__mdiff>
 800c76e:	68c2      	ldr	r2, [r0, #12]
 800c770:	4606      	mov	r6, r0
 800c772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c774:	bb02      	cbnz	r2, 800c7b8 <_dtoa_r+0xa48>
 800c776:	4601      	mov	r1, r0
 800c778:	9803      	ldr	r0, [sp, #12]
 800c77a:	f000 fc87 	bl	800d08c <__mcmp>
 800c77e:	4602      	mov	r2, r0
 800c780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c782:	4631      	mov	r1, r6
 800c784:	4648      	mov	r0, r9
 800c786:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c78a:	f000 fa03 	bl	800cb94 <_Bfree>
 800c78e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c790:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c792:	9e04      	ldr	r6, [sp, #16]
 800c794:	ea42 0103 	orr.w	r1, r2, r3
 800c798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c79a:	4319      	orrs	r1, r3
 800c79c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c79e:	d10d      	bne.n	800c7bc <_dtoa_r+0xa4c>
 800c7a0:	2b39      	cmp	r3, #57	@ 0x39
 800c7a2:	d027      	beq.n	800c7f4 <_dtoa_r+0xa84>
 800c7a4:	9a08      	ldr	r2, [sp, #32]
 800c7a6:	2a00      	cmp	r2, #0
 800c7a8:	dd01      	ble.n	800c7ae <_dtoa_r+0xa3e>
 800c7aa:	9b06      	ldr	r3, [sp, #24]
 800c7ac:	3331      	adds	r3, #49	@ 0x31
 800c7ae:	f88b 3000 	strb.w	r3, [fp]
 800c7b2:	e52e      	b.n	800c212 <_dtoa_r+0x4a2>
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	e7b9      	b.n	800c72c <_dtoa_r+0x9bc>
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	e7e2      	b.n	800c782 <_dtoa_r+0xa12>
 800c7bc:	9908      	ldr	r1, [sp, #32]
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	db04      	blt.n	800c7cc <_dtoa_r+0xa5c>
 800c7c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c7c4:	4301      	orrs	r1, r0
 800c7c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7c8:	4301      	orrs	r1, r0
 800c7ca:	d120      	bne.n	800c80e <_dtoa_r+0xa9e>
 800c7cc:	2a00      	cmp	r2, #0
 800c7ce:	ddee      	ble.n	800c7ae <_dtoa_r+0xa3e>
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	9903      	ldr	r1, [sp, #12]
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	f000 fbec 	bl	800cfb4 <__lshift>
 800c7dc:	4621      	mov	r1, r4
 800c7de:	9003      	str	r0, [sp, #12]
 800c7e0:	f000 fc54 	bl	800d08c <__mcmp>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	9b04      	ldr	r3, [sp, #16]
 800c7e8:	dc02      	bgt.n	800c7f0 <_dtoa_r+0xa80>
 800c7ea:	d1e0      	bne.n	800c7ae <_dtoa_r+0xa3e>
 800c7ec:	07da      	lsls	r2, r3, #31
 800c7ee:	d5de      	bpl.n	800c7ae <_dtoa_r+0xa3e>
 800c7f0:	2b39      	cmp	r3, #57	@ 0x39
 800c7f2:	d1da      	bne.n	800c7aa <_dtoa_r+0xa3a>
 800c7f4:	2339      	movs	r3, #57	@ 0x39
 800c7f6:	f88b 3000 	strb.w	r3, [fp]
 800c7fa:	4633      	mov	r3, r6
 800c7fc:	461e      	mov	r6, r3
 800c7fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c802:	3b01      	subs	r3, #1
 800c804:	2a39      	cmp	r2, #57	@ 0x39
 800c806:	d04e      	beq.n	800c8a6 <_dtoa_r+0xb36>
 800c808:	3201      	adds	r2, #1
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	e501      	b.n	800c212 <_dtoa_r+0x4a2>
 800c80e:	2a00      	cmp	r2, #0
 800c810:	dd03      	ble.n	800c81a <_dtoa_r+0xaaa>
 800c812:	2b39      	cmp	r3, #57	@ 0x39
 800c814:	d0ee      	beq.n	800c7f4 <_dtoa_r+0xa84>
 800c816:	3301      	adds	r3, #1
 800c818:	e7c9      	b.n	800c7ae <_dtoa_r+0xa3e>
 800c81a:	9a04      	ldr	r2, [sp, #16]
 800c81c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c81e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c822:	428a      	cmp	r2, r1
 800c824:	d028      	beq.n	800c878 <_dtoa_r+0xb08>
 800c826:	2300      	movs	r3, #0
 800c828:	220a      	movs	r2, #10
 800c82a:	9903      	ldr	r1, [sp, #12]
 800c82c:	4648      	mov	r0, r9
 800c82e:	f000 f9d3 	bl	800cbd8 <__multadd>
 800c832:	42af      	cmp	r7, r5
 800c834:	9003      	str	r0, [sp, #12]
 800c836:	f04f 0300 	mov.w	r3, #0
 800c83a:	f04f 020a 	mov.w	r2, #10
 800c83e:	4639      	mov	r1, r7
 800c840:	4648      	mov	r0, r9
 800c842:	d107      	bne.n	800c854 <_dtoa_r+0xae4>
 800c844:	f000 f9c8 	bl	800cbd8 <__multadd>
 800c848:	4607      	mov	r7, r0
 800c84a:	4605      	mov	r5, r0
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	3301      	adds	r3, #1
 800c850:	9304      	str	r3, [sp, #16]
 800c852:	e777      	b.n	800c744 <_dtoa_r+0x9d4>
 800c854:	f000 f9c0 	bl	800cbd8 <__multadd>
 800c858:	4629      	mov	r1, r5
 800c85a:	4607      	mov	r7, r0
 800c85c:	2300      	movs	r3, #0
 800c85e:	220a      	movs	r2, #10
 800c860:	4648      	mov	r0, r9
 800c862:	f000 f9b9 	bl	800cbd8 <__multadd>
 800c866:	4605      	mov	r5, r0
 800c868:	e7f0      	b.n	800c84c <_dtoa_r+0xadc>
 800c86a:	f1bb 0f00 	cmp.w	fp, #0
 800c86e:	bfcc      	ite	gt
 800c870:	465e      	movgt	r6, fp
 800c872:	2601      	movle	r6, #1
 800c874:	2700      	movs	r7, #0
 800c876:	4456      	add	r6, sl
 800c878:	2201      	movs	r2, #1
 800c87a:	9903      	ldr	r1, [sp, #12]
 800c87c:	4648      	mov	r0, r9
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	f000 fb98 	bl	800cfb4 <__lshift>
 800c884:	4621      	mov	r1, r4
 800c886:	9003      	str	r0, [sp, #12]
 800c888:	f000 fc00 	bl	800d08c <__mcmp>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	dcb4      	bgt.n	800c7fa <_dtoa_r+0xa8a>
 800c890:	d102      	bne.n	800c898 <_dtoa_r+0xb28>
 800c892:	9b04      	ldr	r3, [sp, #16]
 800c894:	07db      	lsls	r3, r3, #31
 800c896:	d4b0      	bmi.n	800c7fa <_dtoa_r+0xa8a>
 800c898:	4633      	mov	r3, r6
 800c89a:	461e      	mov	r6, r3
 800c89c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8a0:	2a30      	cmp	r2, #48	@ 0x30
 800c8a2:	d0fa      	beq.n	800c89a <_dtoa_r+0xb2a>
 800c8a4:	e4b5      	b.n	800c212 <_dtoa_r+0x4a2>
 800c8a6:	459a      	cmp	sl, r3
 800c8a8:	d1a8      	bne.n	800c7fc <_dtoa_r+0xa8c>
 800c8aa:	2331      	movs	r3, #49	@ 0x31
 800c8ac:	f108 0801 	add.w	r8, r8, #1
 800c8b0:	f88a 3000 	strb.w	r3, [sl]
 800c8b4:	e4ad      	b.n	800c212 <_dtoa_r+0x4a2>
 800c8b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c8b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c914 <_dtoa_r+0xba4>
 800c8bc:	b11b      	cbz	r3, 800c8c6 <_dtoa_r+0xb56>
 800c8be:	f10a 0308 	add.w	r3, sl, #8
 800c8c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	b017      	add	sp, #92	@ 0x5c
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	f77f ae2e 	ble.w	800c532 <_dtoa_r+0x7c2>
 800c8d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8da:	2001      	movs	r0, #1
 800c8dc:	e64d      	b.n	800c57a <_dtoa_r+0x80a>
 800c8de:	f1bb 0f00 	cmp.w	fp, #0
 800c8e2:	f77f aed9 	ble.w	800c698 <_dtoa_r+0x928>
 800c8e6:	4656      	mov	r6, sl
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	9803      	ldr	r0, [sp, #12]
 800c8ec:	f7ff f9b8 	bl	800bc60 <quorem>
 800c8f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800c8f8:	eba6 020a 	sub.w	r2, r6, sl
 800c8fc:	4593      	cmp	fp, r2
 800c8fe:	ddb4      	ble.n	800c86a <_dtoa_r+0xafa>
 800c900:	2300      	movs	r3, #0
 800c902:	220a      	movs	r2, #10
 800c904:	4648      	mov	r0, r9
 800c906:	9903      	ldr	r1, [sp, #12]
 800c908:	f000 f966 	bl	800cbd8 <__multadd>
 800c90c:	9003      	str	r0, [sp, #12]
 800c90e:	e7eb      	b.n	800c8e8 <_dtoa_r+0xb78>
 800c910:	0800f42b 	.word	0x0800f42b
 800c914:	0800f3af 	.word	0x0800f3af

0800c918 <_free_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4605      	mov	r5, r0
 800c91c:	2900      	cmp	r1, #0
 800c91e:	d040      	beq.n	800c9a2 <_free_r+0x8a>
 800c920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c924:	1f0c      	subs	r4, r1, #4
 800c926:	2b00      	cmp	r3, #0
 800c928:	bfb8      	it	lt
 800c92a:	18e4      	addlt	r4, r4, r3
 800c92c:	f000 f8e6 	bl	800cafc <__malloc_lock>
 800c930:	4a1c      	ldr	r2, [pc, #112]	@ (800c9a4 <_free_r+0x8c>)
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	b933      	cbnz	r3, 800c944 <_free_r+0x2c>
 800c936:	6063      	str	r3, [r4, #4]
 800c938:	6014      	str	r4, [r2, #0]
 800c93a:	4628      	mov	r0, r5
 800c93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c940:	f000 b8e2 	b.w	800cb08 <__malloc_unlock>
 800c944:	42a3      	cmp	r3, r4
 800c946:	d908      	bls.n	800c95a <_free_r+0x42>
 800c948:	6820      	ldr	r0, [r4, #0]
 800c94a:	1821      	adds	r1, r4, r0
 800c94c:	428b      	cmp	r3, r1
 800c94e:	bf01      	itttt	eq
 800c950:	6819      	ldreq	r1, [r3, #0]
 800c952:	685b      	ldreq	r3, [r3, #4]
 800c954:	1809      	addeq	r1, r1, r0
 800c956:	6021      	streq	r1, [r4, #0]
 800c958:	e7ed      	b.n	800c936 <_free_r+0x1e>
 800c95a:	461a      	mov	r2, r3
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	b10b      	cbz	r3, 800c964 <_free_r+0x4c>
 800c960:	42a3      	cmp	r3, r4
 800c962:	d9fa      	bls.n	800c95a <_free_r+0x42>
 800c964:	6811      	ldr	r1, [r2, #0]
 800c966:	1850      	adds	r0, r2, r1
 800c968:	42a0      	cmp	r0, r4
 800c96a:	d10b      	bne.n	800c984 <_free_r+0x6c>
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	4401      	add	r1, r0
 800c970:	1850      	adds	r0, r2, r1
 800c972:	4283      	cmp	r3, r0
 800c974:	6011      	str	r1, [r2, #0]
 800c976:	d1e0      	bne.n	800c93a <_free_r+0x22>
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	4408      	add	r0, r1
 800c97e:	6010      	str	r0, [r2, #0]
 800c980:	6053      	str	r3, [r2, #4]
 800c982:	e7da      	b.n	800c93a <_free_r+0x22>
 800c984:	d902      	bls.n	800c98c <_free_r+0x74>
 800c986:	230c      	movs	r3, #12
 800c988:	602b      	str	r3, [r5, #0]
 800c98a:	e7d6      	b.n	800c93a <_free_r+0x22>
 800c98c:	6820      	ldr	r0, [r4, #0]
 800c98e:	1821      	adds	r1, r4, r0
 800c990:	428b      	cmp	r3, r1
 800c992:	bf01      	itttt	eq
 800c994:	6819      	ldreq	r1, [r3, #0]
 800c996:	685b      	ldreq	r3, [r3, #4]
 800c998:	1809      	addeq	r1, r1, r0
 800c99a:	6021      	streq	r1, [r4, #0]
 800c99c:	6063      	str	r3, [r4, #4]
 800c99e:	6054      	str	r4, [r2, #4]
 800c9a0:	e7cb      	b.n	800c93a <_free_r+0x22>
 800c9a2:	bd38      	pop	{r3, r4, r5, pc}
 800c9a4:	20001870 	.word	0x20001870

0800c9a8 <malloc>:
 800c9a8:	4b02      	ldr	r3, [pc, #8]	@ (800c9b4 <malloc+0xc>)
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f000 b825 	b.w	800c9fc <_malloc_r>
 800c9b2:	bf00      	nop
 800c9b4:	2000019c 	.word	0x2000019c

0800c9b8 <sbrk_aligned>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c9f8 <sbrk_aligned+0x40>)
 800c9bc:	460c      	mov	r4, r1
 800c9be:	6831      	ldr	r1, [r6, #0]
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	b911      	cbnz	r1, 800c9ca <sbrk_aligned+0x12>
 800c9c4:	f001 fdee 	bl	800e5a4 <_sbrk_r>
 800c9c8:	6030      	str	r0, [r6, #0]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f001 fde9 	bl	800e5a4 <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d103      	bne.n	800c9de <sbrk_aligned+0x26>
 800c9d6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9da:	4620      	mov	r0, r4
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d0f8      	beq.n	800c9da <sbrk_aligned+0x22>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f001 fdda 	bl	800e5a4 <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d1f2      	bne.n	800c9da <sbrk_aligned+0x22>
 800c9f4:	e7ef      	b.n	800c9d6 <sbrk_aligned+0x1e>
 800c9f6:	bf00      	nop
 800c9f8:	2000186c 	.word	0x2000186c

0800c9fc <_malloc_r>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4606      	mov	r6, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d904      	bls.n	800ca22 <_malloc_r+0x26>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	6033      	str	r3, [r6, #0]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caf8 <_malloc_r+0xfc>
 800ca26:	f000 f869 	bl	800cafc <__malloc_lock>
 800ca2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca2e:	461c      	mov	r4, r3
 800ca30:	bb44      	cbnz	r4, 800ca84 <_malloc_r+0x88>
 800ca32:	4629      	mov	r1, r5
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ffbf 	bl	800c9b8 <sbrk_aligned>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	d158      	bne.n	800caf2 <_malloc_r+0xf6>
 800ca40:	f8d8 4000 	ldr.w	r4, [r8]
 800ca44:	4627      	mov	r7, r4
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	d143      	bne.n	800cad2 <_malloc_r+0xd6>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	d04b      	beq.n	800cae6 <_malloc_r+0xea>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	4639      	mov	r1, r7
 800ca52:	4630      	mov	r0, r6
 800ca54:	eb04 0903 	add.w	r9, r4, r3
 800ca58:	f001 fda4 	bl	800e5a4 <_sbrk_r>
 800ca5c:	4581      	cmp	r9, r0
 800ca5e:	d142      	bne.n	800cae6 <_malloc_r+0xea>
 800ca60:	6821      	ldr	r1, [r4, #0]
 800ca62:	4630      	mov	r0, r6
 800ca64:	1a6d      	subs	r5, r5, r1
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7ff ffa6 	bl	800c9b8 <sbrk_aligned>
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d03a      	beq.n	800cae6 <_malloc_r+0xea>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	442b      	add	r3, r5
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	bb62      	cbnz	r2, 800cad8 <_malloc_r+0xdc>
 800ca7e:	f8c8 7000 	str.w	r7, [r8]
 800ca82:	e00f      	b.n	800caa4 <_malloc_r+0xa8>
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	1b52      	subs	r2, r2, r5
 800ca88:	d420      	bmi.n	800cacc <_malloc_r+0xd0>
 800ca8a:	2a0b      	cmp	r2, #11
 800ca8c:	d917      	bls.n	800cabe <_malloc_r+0xc2>
 800ca8e:	1961      	adds	r1, r4, r5
 800ca90:	42a3      	cmp	r3, r4
 800ca92:	6025      	str	r5, [r4, #0]
 800ca94:	bf18      	it	ne
 800ca96:	6059      	strne	r1, [r3, #4]
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	bf08      	it	eq
 800ca9c:	f8c8 1000 	streq.w	r1, [r8]
 800caa0:	5162      	str	r2, [r4, r5]
 800caa2:	604b      	str	r3, [r1, #4]
 800caa4:	4630      	mov	r0, r6
 800caa6:	f000 f82f 	bl	800cb08 <__malloc_unlock>
 800caaa:	f104 000b 	add.w	r0, r4, #11
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	f020 0007 	bic.w	r0, r0, #7
 800cab4:	1ac2      	subs	r2, r0, r3
 800cab6:	bf1c      	itt	ne
 800cab8:	1a1b      	subne	r3, r3, r0
 800caba:	50a3      	strne	r3, [r4, r2]
 800cabc:	e7af      	b.n	800ca1e <_malloc_r+0x22>
 800cabe:	6862      	ldr	r2, [r4, #4]
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	bf0c      	ite	eq
 800cac4:	f8c8 2000 	streq.w	r2, [r8]
 800cac8:	605a      	strne	r2, [r3, #4]
 800caca:	e7eb      	b.n	800caa4 <_malloc_r+0xa8>
 800cacc:	4623      	mov	r3, r4
 800cace:	6864      	ldr	r4, [r4, #4]
 800cad0:	e7ae      	b.n	800ca30 <_malloc_r+0x34>
 800cad2:	463c      	mov	r4, r7
 800cad4:	687f      	ldr	r7, [r7, #4]
 800cad6:	e7b6      	b.n	800ca46 <_malloc_r+0x4a>
 800cad8:	461a      	mov	r2, r3
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d1fb      	bne.n	800cad8 <_malloc_r+0xdc>
 800cae0:	2300      	movs	r3, #0
 800cae2:	6053      	str	r3, [r2, #4]
 800cae4:	e7de      	b.n	800caa4 <_malloc_r+0xa8>
 800cae6:	230c      	movs	r3, #12
 800cae8:	4630      	mov	r0, r6
 800caea:	6033      	str	r3, [r6, #0]
 800caec:	f000 f80c 	bl	800cb08 <__malloc_unlock>
 800caf0:	e794      	b.n	800ca1c <_malloc_r+0x20>
 800caf2:	6005      	str	r5, [r0, #0]
 800caf4:	e7d6      	b.n	800caa4 <_malloc_r+0xa8>
 800caf6:	bf00      	nop
 800caf8:	20001870 	.word	0x20001870

0800cafc <__malloc_lock>:
 800cafc:	4801      	ldr	r0, [pc, #4]	@ (800cb04 <__malloc_lock+0x8>)
 800cafe:	f7ff b89a 	b.w	800bc36 <__retarget_lock_acquire_recursive>
 800cb02:	bf00      	nop
 800cb04:	20001868 	.word	0x20001868

0800cb08 <__malloc_unlock>:
 800cb08:	4801      	ldr	r0, [pc, #4]	@ (800cb10 <__malloc_unlock+0x8>)
 800cb0a:	f7ff b895 	b.w	800bc38 <__retarget_lock_release_recursive>
 800cb0e:	bf00      	nop
 800cb10:	20001868 	.word	0x20001868

0800cb14 <_Balloc>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	69c6      	ldr	r6, [r0, #28]
 800cb18:	4604      	mov	r4, r0
 800cb1a:	460d      	mov	r5, r1
 800cb1c:	b976      	cbnz	r6, 800cb3c <_Balloc+0x28>
 800cb1e:	2010      	movs	r0, #16
 800cb20:	f7ff ff42 	bl	800c9a8 <malloc>
 800cb24:	4602      	mov	r2, r0
 800cb26:	61e0      	str	r0, [r4, #28]
 800cb28:	b920      	cbnz	r0, 800cb34 <_Balloc+0x20>
 800cb2a:	216b      	movs	r1, #107	@ 0x6b
 800cb2c:	4b17      	ldr	r3, [pc, #92]	@ (800cb8c <_Balloc+0x78>)
 800cb2e:	4818      	ldr	r0, [pc, #96]	@ (800cb90 <_Balloc+0x7c>)
 800cb30:	f001 fd5c 	bl	800e5ec <__assert_func>
 800cb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb38:	6006      	str	r6, [r0, #0]
 800cb3a:	60c6      	str	r6, [r0, #12]
 800cb3c:	69e6      	ldr	r6, [r4, #28]
 800cb3e:	68f3      	ldr	r3, [r6, #12]
 800cb40:	b183      	cbz	r3, 800cb64 <_Balloc+0x50>
 800cb42:	69e3      	ldr	r3, [r4, #28]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb4a:	b9b8      	cbnz	r0, 800cb7c <_Balloc+0x68>
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb52:	1d72      	adds	r2, r6, #5
 800cb54:	4620      	mov	r0, r4
 800cb56:	0092      	lsls	r2, r2, #2
 800cb58:	f001 fd66 	bl	800e628 <_calloc_r>
 800cb5c:	b160      	cbz	r0, 800cb78 <_Balloc+0x64>
 800cb5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb62:	e00e      	b.n	800cb82 <_Balloc+0x6e>
 800cb64:	2221      	movs	r2, #33	@ 0x21
 800cb66:	2104      	movs	r1, #4
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f001 fd5d 	bl	800e628 <_calloc_r>
 800cb6e:	69e3      	ldr	r3, [r4, #28]
 800cb70:	60f0      	str	r0, [r6, #12]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1e4      	bne.n	800cb42 <_Balloc+0x2e>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	6802      	ldr	r2, [r0, #0]
 800cb7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb82:	2300      	movs	r3, #0
 800cb84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb88:	e7f7      	b.n	800cb7a <_Balloc+0x66>
 800cb8a:	bf00      	nop
 800cb8c:	0800f3bc 	.word	0x0800f3bc
 800cb90:	0800f43c 	.word	0x0800f43c

0800cb94 <_Bfree>:
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	69c6      	ldr	r6, [r0, #28]
 800cb98:	4605      	mov	r5, r0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	b976      	cbnz	r6, 800cbbc <_Bfree+0x28>
 800cb9e:	2010      	movs	r0, #16
 800cba0:	f7ff ff02 	bl	800c9a8 <malloc>
 800cba4:	4602      	mov	r2, r0
 800cba6:	61e8      	str	r0, [r5, #28]
 800cba8:	b920      	cbnz	r0, 800cbb4 <_Bfree+0x20>
 800cbaa:	218f      	movs	r1, #143	@ 0x8f
 800cbac:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <_Bfree+0x3c>)
 800cbae:	4809      	ldr	r0, [pc, #36]	@ (800cbd4 <_Bfree+0x40>)
 800cbb0:	f001 fd1c 	bl	800e5ec <__assert_func>
 800cbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbb8:	6006      	str	r6, [r0, #0]
 800cbba:	60c6      	str	r6, [r0, #12]
 800cbbc:	b13c      	cbz	r4, 800cbce <_Bfree+0x3a>
 800cbbe:	69eb      	ldr	r3, [r5, #28]
 800cbc0:	6862      	ldr	r2, [r4, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbc8:	6021      	str	r1, [r4, #0]
 800cbca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbce:	bd70      	pop	{r4, r5, r6, pc}
 800cbd0:	0800f3bc 	.word	0x0800f3bc
 800cbd4:	0800f43c 	.word	0x0800f43c

0800cbd8 <__multadd>:
 800cbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbdc:	4607      	mov	r7, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	461e      	mov	r6, r3
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	690d      	ldr	r5, [r1, #16]
 800cbe6:	f101 0c14 	add.w	ip, r1, #20
 800cbea:	f8dc 3000 	ldr.w	r3, [ip]
 800cbee:	3001      	adds	r0, #1
 800cbf0:	b299      	uxth	r1, r3
 800cbf2:	fb02 6101 	mla	r1, r2, r1, r6
 800cbf6:	0c1e      	lsrs	r6, r3, #16
 800cbf8:	0c0b      	lsrs	r3, r1, #16
 800cbfa:	fb02 3306 	mla	r3, r2, r6, r3
 800cbfe:	b289      	uxth	r1, r1
 800cc00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc04:	4285      	cmp	r5, r0
 800cc06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc0a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc0e:	dcec      	bgt.n	800cbea <__multadd+0x12>
 800cc10:	b30e      	cbz	r6, 800cc56 <__multadd+0x7e>
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	42ab      	cmp	r3, r5
 800cc16:	dc19      	bgt.n	800cc4c <__multadd+0x74>
 800cc18:	6861      	ldr	r1, [r4, #4]
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	3101      	adds	r1, #1
 800cc1e:	f7ff ff79 	bl	800cb14 <_Balloc>
 800cc22:	4680      	mov	r8, r0
 800cc24:	b928      	cbnz	r0, 800cc32 <__multadd+0x5a>
 800cc26:	4602      	mov	r2, r0
 800cc28:	21ba      	movs	r1, #186	@ 0xba
 800cc2a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc5c <__multadd+0x84>)
 800cc2c:	480c      	ldr	r0, [pc, #48]	@ (800cc60 <__multadd+0x88>)
 800cc2e:	f001 fcdd 	bl	800e5ec <__assert_func>
 800cc32:	6922      	ldr	r2, [r4, #16]
 800cc34:	f104 010c 	add.w	r1, r4, #12
 800cc38:	3202      	adds	r2, #2
 800cc3a:	0092      	lsls	r2, r2, #2
 800cc3c:	300c      	adds	r0, #12
 800cc3e:	f001 fcc1 	bl	800e5c4 <memcpy>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4638      	mov	r0, r7
 800cc46:	f7ff ffa5 	bl	800cb94 <_Bfree>
 800cc4a:	4644      	mov	r4, r8
 800cc4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc50:	3501      	adds	r5, #1
 800cc52:	615e      	str	r6, [r3, #20]
 800cc54:	6125      	str	r5, [r4, #16]
 800cc56:	4620      	mov	r0, r4
 800cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5c:	0800f42b 	.word	0x0800f42b
 800cc60:	0800f43c 	.word	0x0800f43c

0800cc64 <__s2b>:
 800cc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc68:	4615      	mov	r5, r2
 800cc6a:	2209      	movs	r2, #9
 800cc6c:	461f      	mov	r7, r3
 800cc6e:	3308      	adds	r3, #8
 800cc70:	460c      	mov	r4, r1
 800cc72:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc76:	4606      	mov	r6, r0
 800cc78:	2201      	movs	r2, #1
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	db09      	blt.n	800cc94 <__s2b+0x30>
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7ff ff47 	bl	800cb14 <_Balloc>
 800cc86:	b940      	cbnz	r0, 800cc9a <__s2b+0x36>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	21d3      	movs	r1, #211	@ 0xd3
 800cc8c:	4b18      	ldr	r3, [pc, #96]	@ (800ccf0 <__s2b+0x8c>)
 800cc8e:	4819      	ldr	r0, [pc, #100]	@ (800ccf4 <__s2b+0x90>)
 800cc90:	f001 fcac 	bl	800e5ec <__assert_func>
 800cc94:	0052      	lsls	r2, r2, #1
 800cc96:	3101      	adds	r1, #1
 800cc98:	e7f0      	b.n	800cc7c <__s2b+0x18>
 800cc9a:	9b08      	ldr	r3, [sp, #32]
 800cc9c:	2d09      	cmp	r5, #9
 800cc9e:	6143      	str	r3, [r0, #20]
 800cca0:	f04f 0301 	mov.w	r3, #1
 800cca4:	6103      	str	r3, [r0, #16]
 800cca6:	dd16      	ble.n	800ccd6 <__s2b+0x72>
 800cca8:	f104 0909 	add.w	r9, r4, #9
 800ccac:	46c8      	mov	r8, r9
 800ccae:	442c      	add	r4, r5
 800ccb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	220a      	movs	r2, #10
 800ccb8:	4630      	mov	r0, r6
 800ccba:	3b30      	subs	r3, #48	@ 0x30
 800ccbc:	f7ff ff8c 	bl	800cbd8 <__multadd>
 800ccc0:	45a0      	cmp	r8, r4
 800ccc2:	d1f5      	bne.n	800ccb0 <__s2b+0x4c>
 800ccc4:	f1a5 0408 	sub.w	r4, r5, #8
 800ccc8:	444c      	add	r4, r9
 800ccca:	1b2d      	subs	r5, r5, r4
 800cccc:	1963      	adds	r3, r4, r5
 800ccce:	42bb      	cmp	r3, r7
 800ccd0:	db04      	blt.n	800ccdc <__s2b+0x78>
 800ccd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd6:	2509      	movs	r5, #9
 800ccd8:	340a      	adds	r4, #10
 800ccda:	e7f6      	b.n	800ccca <__s2b+0x66>
 800ccdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cce0:	4601      	mov	r1, r0
 800cce2:	220a      	movs	r2, #10
 800cce4:	4630      	mov	r0, r6
 800cce6:	3b30      	subs	r3, #48	@ 0x30
 800cce8:	f7ff ff76 	bl	800cbd8 <__multadd>
 800ccec:	e7ee      	b.n	800cccc <__s2b+0x68>
 800ccee:	bf00      	nop
 800ccf0:	0800f42b 	.word	0x0800f42b
 800ccf4:	0800f43c 	.word	0x0800f43c

0800ccf8 <__hi0bits>:
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccfe:	bf3a      	itte	cc
 800cd00:	0403      	lslcc	r3, r0, #16
 800cd02:	2010      	movcc	r0, #16
 800cd04:	2000      	movcs	r0, #0
 800cd06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd0a:	bf3c      	itt	cc
 800cd0c:	021b      	lslcc	r3, r3, #8
 800cd0e:	3008      	addcc	r0, #8
 800cd10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd14:	bf3c      	itt	cc
 800cd16:	011b      	lslcc	r3, r3, #4
 800cd18:	3004      	addcc	r0, #4
 800cd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd1e:	bf3c      	itt	cc
 800cd20:	009b      	lslcc	r3, r3, #2
 800cd22:	3002      	addcc	r0, #2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	db05      	blt.n	800cd34 <__hi0bits+0x3c>
 800cd28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd2c:	f100 0001 	add.w	r0, r0, #1
 800cd30:	bf08      	it	eq
 800cd32:	2020      	moveq	r0, #32
 800cd34:	4770      	bx	lr

0800cd36 <__lo0bits>:
 800cd36:	6803      	ldr	r3, [r0, #0]
 800cd38:	4602      	mov	r2, r0
 800cd3a:	f013 0007 	ands.w	r0, r3, #7
 800cd3e:	d00b      	beq.n	800cd58 <__lo0bits+0x22>
 800cd40:	07d9      	lsls	r1, r3, #31
 800cd42:	d421      	bmi.n	800cd88 <__lo0bits+0x52>
 800cd44:	0798      	lsls	r0, r3, #30
 800cd46:	bf49      	itett	mi
 800cd48:	085b      	lsrmi	r3, r3, #1
 800cd4a:	089b      	lsrpl	r3, r3, #2
 800cd4c:	2001      	movmi	r0, #1
 800cd4e:	6013      	strmi	r3, [r2, #0]
 800cd50:	bf5c      	itt	pl
 800cd52:	2002      	movpl	r0, #2
 800cd54:	6013      	strpl	r3, [r2, #0]
 800cd56:	4770      	bx	lr
 800cd58:	b299      	uxth	r1, r3
 800cd5a:	b909      	cbnz	r1, 800cd60 <__lo0bits+0x2a>
 800cd5c:	2010      	movs	r0, #16
 800cd5e:	0c1b      	lsrs	r3, r3, #16
 800cd60:	b2d9      	uxtb	r1, r3
 800cd62:	b909      	cbnz	r1, 800cd68 <__lo0bits+0x32>
 800cd64:	3008      	adds	r0, #8
 800cd66:	0a1b      	lsrs	r3, r3, #8
 800cd68:	0719      	lsls	r1, r3, #28
 800cd6a:	bf04      	itt	eq
 800cd6c:	091b      	lsreq	r3, r3, #4
 800cd6e:	3004      	addeq	r0, #4
 800cd70:	0799      	lsls	r1, r3, #30
 800cd72:	bf04      	itt	eq
 800cd74:	089b      	lsreq	r3, r3, #2
 800cd76:	3002      	addeq	r0, #2
 800cd78:	07d9      	lsls	r1, r3, #31
 800cd7a:	d403      	bmi.n	800cd84 <__lo0bits+0x4e>
 800cd7c:	085b      	lsrs	r3, r3, #1
 800cd7e:	f100 0001 	add.w	r0, r0, #1
 800cd82:	d003      	beq.n	800cd8c <__lo0bits+0x56>
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	4770      	bx	lr
 800cd88:	2000      	movs	r0, #0
 800cd8a:	4770      	bx	lr
 800cd8c:	2020      	movs	r0, #32
 800cd8e:	4770      	bx	lr

0800cd90 <__i2b>:
 800cd90:	b510      	push	{r4, lr}
 800cd92:	460c      	mov	r4, r1
 800cd94:	2101      	movs	r1, #1
 800cd96:	f7ff febd 	bl	800cb14 <_Balloc>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	b928      	cbnz	r0, 800cdaa <__i2b+0x1a>
 800cd9e:	f240 1145 	movw	r1, #325	@ 0x145
 800cda2:	4b04      	ldr	r3, [pc, #16]	@ (800cdb4 <__i2b+0x24>)
 800cda4:	4804      	ldr	r0, [pc, #16]	@ (800cdb8 <__i2b+0x28>)
 800cda6:	f001 fc21 	bl	800e5ec <__assert_func>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	6144      	str	r4, [r0, #20]
 800cdae:	6103      	str	r3, [r0, #16]
 800cdb0:	bd10      	pop	{r4, pc}
 800cdb2:	bf00      	nop
 800cdb4:	0800f42b 	.word	0x0800f42b
 800cdb8:	0800f43c 	.word	0x0800f43c

0800cdbc <__multiply>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	4617      	mov	r7, r2
 800cdc2:	690a      	ldr	r2, [r1, #16]
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	4689      	mov	r9, r1
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	bfa2      	ittt	ge
 800cdcc:	463b      	movge	r3, r7
 800cdce:	460f      	movge	r7, r1
 800cdd0:	4699      	movge	r9, r3
 800cdd2:	693d      	ldr	r5, [r7, #16]
 800cdd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	eb05 060a 	add.w	r6, r5, sl
 800cde0:	42b3      	cmp	r3, r6
 800cde2:	b085      	sub	sp, #20
 800cde4:	bfb8      	it	lt
 800cde6:	3101      	addlt	r1, #1
 800cde8:	f7ff fe94 	bl	800cb14 <_Balloc>
 800cdec:	b930      	cbnz	r0, 800cdfc <__multiply+0x40>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdf4:	4b40      	ldr	r3, [pc, #256]	@ (800cef8 <__multiply+0x13c>)
 800cdf6:	4841      	ldr	r0, [pc, #260]	@ (800cefc <__multiply+0x140>)
 800cdf8:	f001 fbf8 	bl	800e5ec <__assert_func>
 800cdfc:	f100 0414 	add.w	r4, r0, #20
 800ce00:	4623      	mov	r3, r4
 800ce02:	2200      	movs	r2, #0
 800ce04:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce08:	4573      	cmp	r3, lr
 800ce0a:	d320      	bcc.n	800ce4e <__multiply+0x92>
 800ce0c:	f107 0814 	add.w	r8, r7, #20
 800ce10:	f109 0114 	add.w	r1, r9, #20
 800ce14:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce18:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce1c:	9302      	str	r3, [sp, #8]
 800ce1e:	1beb      	subs	r3, r5, r7
 800ce20:	3b15      	subs	r3, #21
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	3304      	adds	r3, #4
 800ce28:	3715      	adds	r7, #21
 800ce2a:	42bd      	cmp	r5, r7
 800ce2c:	bf38      	it	cc
 800ce2e:	2304      	movcc	r3, #4
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	9b02      	ldr	r3, [sp, #8]
 800ce34:	9103      	str	r1, [sp, #12]
 800ce36:	428b      	cmp	r3, r1
 800ce38:	d80c      	bhi.n	800ce54 <__multiply+0x98>
 800ce3a:	2e00      	cmp	r6, #0
 800ce3c:	dd03      	ble.n	800ce46 <__multiply+0x8a>
 800ce3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d055      	beq.n	800cef2 <__multiply+0x136>
 800ce46:	6106      	str	r6, [r0, #16]
 800ce48:	b005      	add	sp, #20
 800ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4e:	f843 2b04 	str.w	r2, [r3], #4
 800ce52:	e7d9      	b.n	800ce08 <__multiply+0x4c>
 800ce54:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce58:	f1ba 0f00 	cmp.w	sl, #0
 800ce5c:	d01f      	beq.n	800ce9e <__multiply+0xe2>
 800ce5e:	46c4      	mov	ip, r8
 800ce60:	46a1      	mov	r9, r4
 800ce62:	2700      	movs	r7, #0
 800ce64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce68:	f8d9 3000 	ldr.w	r3, [r9]
 800ce6c:	fa1f fb82 	uxth.w	fp, r2
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce76:	443b      	add	r3, r7
 800ce78:	f8d9 7000 	ldr.w	r7, [r9]
 800ce7c:	0c12      	lsrs	r2, r2, #16
 800ce7e:	0c3f      	lsrs	r7, r7, #16
 800ce80:	fb0a 7202 	mla	r2, sl, r2, r7
 800ce84:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce8e:	4565      	cmp	r5, ip
 800ce90:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce94:	f849 3b04 	str.w	r3, [r9], #4
 800ce98:	d8e4      	bhi.n	800ce64 <__multiply+0xa8>
 800ce9a:	9b01      	ldr	r3, [sp, #4]
 800ce9c:	50e7      	str	r7, [r4, r3]
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	3104      	adds	r1, #4
 800cea2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cea6:	f1b9 0f00 	cmp.w	r9, #0
 800ceaa:	d020      	beq.n	800ceee <__multiply+0x132>
 800ceac:	4647      	mov	r7, r8
 800ceae:	46a4      	mov	ip, r4
 800ceb0:	f04f 0a00 	mov.w	sl, #0
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	f8b7 b000 	ldrh.w	fp, [r7]
 800ceba:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	fb09 220b 	mla	r2, r9, fp, r2
 800cec4:	4452      	add	r2, sl
 800cec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceca:	f84c 3b04 	str.w	r3, [ip], #4
 800cece:	f857 3b04 	ldr.w	r3, [r7], #4
 800ced2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ced6:	f8bc 3000 	ldrh.w	r3, [ip]
 800ceda:	42bd      	cmp	r5, r7
 800cedc:	fb09 330a 	mla	r3, r9, sl, r3
 800cee0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cee8:	d8e5      	bhi.n	800ceb6 <__multiply+0xfa>
 800ceea:	9a01      	ldr	r2, [sp, #4]
 800ceec:	50a3      	str	r3, [r4, r2]
 800ceee:	3404      	adds	r4, #4
 800cef0:	e79f      	b.n	800ce32 <__multiply+0x76>
 800cef2:	3e01      	subs	r6, #1
 800cef4:	e7a1      	b.n	800ce3a <__multiply+0x7e>
 800cef6:	bf00      	nop
 800cef8:	0800f42b 	.word	0x0800f42b
 800cefc:	0800f43c 	.word	0x0800f43c

0800cf00 <__pow5mult>:
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	4615      	mov	r5, r2
 800cf06:	f012 0203 	ands.w	r2, r2, #3
 800cf0a:	4607      	mov	r7, r0
 800cf0c:	460e      	mov	r6, r1
 800cf0e:	d007      	beq.n	800cf20 <__pow5mult+0x20>
 800cf10:	4c25      	ldr	r4, [pc, #148]	@ (800cfa8 <__pow5mult+0xa8>)
 800cf12:	3a01      	subs	r2, #1
 800cf14:	2300      	movs	r3, #0
 800cf16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf1a:	f7ff fe5d 	bl	800cbd8 <__multadd>
 800cf1e:	4606      	mov	r6, r0
 800cf20:	10ad      	asrs	r5, r5, #2
 800cf22:	d03d      	beq.n	800cfa0 <__pow5mult+0xa0>
 800cf24:	69fc      	ldr	r4, [r7, #28]
 800cf26:	b97c      	cbnz	r4, 800cf48 <__pow5mult+0x48>
 800cf28:	2010      	movs	r0, #16
 800cf2a:	f7ff fd3d 	bl	800c9a8 <malloc>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	61f8      	str	r0, [r7, #28]
 800cf32:	b928      	cbnz	r0, 800cf40 <__pow5mult+0x40>
 800cf34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf38:	4b1c      	ldr	r3, [pc, #112]	@ (800cfac <__pow5mult+0xac>)
 800cf3a:	481d      	ldr	r0, [pc, #116]	@ (800cfb0 <__pow5mult+0xb0>)
 800cf3c:	f001 fb56 	bl	800e5ec <__assert_func>
 800cf40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf44:	6004      	str	r4, [r0, #0]
 800cf46:	60c4      	str	r4, [r0, #12]
 800cf48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf50:	b94c      	cbnz	r4, 800cf66 <__pow5mult+0x66>
 800cf52:	f240 2171 	movw	r1, #625	@ 0x271
 800cf56:	4638      	mov	r0, r7
 800cf58:	f7ff ff1a 	bl	800cd90 <__i2b>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf64:	6003      	str	r3, [r0, #0]
 800cf66:	f04f 0900 	mov.w	r9, #0
 800cf6a:	07eb      	lsls	r3, r5, #31
 800cf6c:	d50a      	bpl.n	800cf84 <__pow5mult+0x84>
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4622      	mov	r2, r4
 800cf72:	4638      	mov	r0, r7
 800cf74:	f7ff ff22 	bl	800cdbc <__multiply>
 800cf78:	4680      	mov	r8, r0
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f7ff fe09 	bl	800cb94 <_Bfree>
 800cf82:	4646      	mov	r6, r8
 800cf84:	106d      	asrs	r5, r5, #1
 800cf86:	d00b      	beq.n	800cfa0 <__pow5mult+0xa0>
 800cf88:	6820      	ldr	r0, [r4, #0]
 800cf8a:	b938      	cbnz	r0, 800cf9c <__pow5mult+0x9c>
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4621      	mov	r1, r4
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7ff ff13 	bl	800cdbc <__multiply>
 800cf96:	6020      	str	r0, [r4, #0]
 800cf98:	f8c0 9000 	str.w	r9, [r0]
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	e7e4      	b.n	800cf6a <__pow5mult+0x6a>
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa6:	bf00      	nop
 800cfa8:	0800f54c 	.word	0x0800f54c
 800cfac:	0800f3bc 	.word	0x0800f3bc
 800cfb0:	0800f43c 	.word	0x0800f43c

0800cfb4 <__lshift>:
 800cfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb8:	460c      	mov	r4, r1
 800cfba:	4607      	mov	r7, r0
 800cfbc:	4691      	mov	r9, r2
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	6849      	ldr	r1, [r1, #4]
 800cfc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfc6:	68a3      	ldr	r3, [r4, #8]
 800cfc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfcc:	f108 0601 	add.w	r6, r8, #1
 800cfd0:	42b3      	cmp	r3, r6
 800cfd2:	db0b      	blt.n	800cfec <__lshift+0x38>
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7ff fd9d 	bl	800cb14 <_Balloc>
 800cfda:	4605      	mov	r5, r0
 800cfdc:	b948      	cbnz	r0, 800cff2 <__lshift+0x3e>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfe4:	4b27      	ldr	r3, [pc, #156]	@ (800d084 <__lshift+0xd0>)
 800cfe6:	4828      	ldr	r0, [pc, #160]	@ (800d088 <__lshift+0xd4>)
 800cfe8:	f001 fb00 	bl	800e5ec <__assert_func>
 800cfec:	3101      	adds	r1, #1
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	e7ee      	b.n	800cfd0 <__lshift+0x1c>
 800cff2:	2300      	movs	r3, #0
 800cff4:	f100 0114 	add.w	r1, r0, #20
 800cff8:	f100 0210 	add.w	r2, r0, #16
 800cffc:	4618      	mov	r0, r3
 800cffe:	4553      	cmp	r3, sl
 800d000:	db33      	blt.n	800d06a <__lshift+0xb6>
 800d002:	6920      	ldr	r0, [r4, #16]
 800d004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d008:	f104 0314 	add.w	r3, r4, #20
 800d00c:	f019 091f 	ands.w	r9, r9, #31
 800d010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d018:	d02b      	beq.n	800d072 <__lshift+0xbe>
 800d01a:	468a      	mov	sl, r1
 800d01c:	2200      	movs	r2, #0
 800d01e:	f1c9 0e20 	rsb	lr, r9, #32
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	fa00 f009 	lsl.w	r0, r0, r9
 800d028:	4310      	orrs	r0, r2
 800d02a:	f84a 0b04 	str.w	r0, [sl], #4
 800d02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d032:	459c      	cmp	ip, r3
 800d034:	fa22 f20e 	lsr.w	r2, r2, lr
 800d038:	d8f3      	bhi.n	800d022 <__lshift+0x6e>
 800d03a:	ebac 0304 	sub.w	r3, ip, r4
 800d03e:	3b15      	subs	r3, #21
 800d040:	f023 0303 	bic.w	r3, r3, #3
 800d044:	3304      	adds	r3, #4
 800d046:	f104 0015 	add.w	r0, r4, #21
 800d04a:	4560      	cmp	r0, ip
 800d04c:	bf88      	it	hi
 800d04e:	2304      	movhi	r3, #4
 800d050:	50ca      	str	r2, [r1, r3]
 800d052:	b10a      	cbz	r2, 800d058 <__lshift+0xa4>
 800d054:	f108 0602 	add.w	r6, r8, #2
 800d058:	3e01      	subs	r6, #1
 800d05a:	4638      	mov	r0, r7
 800d05c:	4621      	mov	r1, r4
 800d05e:	612e      	str	r6, [r5, #16]
 800d060:	f7ff fd98 	bl	800cb94 <_Bfree>
 800d064:	4628      	mov	r0, r5
 800d066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d06e:	3301      	adds	r3, #1
 800d070:	e7c5      	b.n	800cffe <__lshift+0x4a>
 800d072:	3904      	subs	r1, #4
 800d074:	f853 2b04 	ldr.w	r2, [r3], #4
 800d078:	459c      	cmp	ip, r3
 800d07a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d07e:	d8f9      	bhi.n	800d074 <__lshift+0xc0>
 800d080:	e7ea      	b.n	800d058 <__lshift+0xa4>
 800d082:	bf00      	nop
 800d084:	0800f42b 	.word	0x0800f42b
 800d088:	0800f43c 	.word	0x0800f43c

0800d08c <__mcmp>:
 800d08c:	4603      	mov	r3, r0
 800d08e:	690a      	ldr	r2, [r1, #16]
 800d090:	6900      	ldr	r0, [r0, #16]
 800d092:	b530      	push	{r4, r5, lr}
 800d094:	1a80      	subs	r0, r0, r2
 800d096:	d10e      	bne.n	800d0b6 <__mcmp+0x2a>
 800d098:	3314      	adds	r3, #20
 800d09a:	3114      	adds	r1, #20
 800d09c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0ac:	4295      	cmp	r5, r2
 800d0ae:	d003      	beq.n	800d0b8 <__mcmp+0x2c>
 800d0b0:	d205      	bcs.n	800d0be <__mcmp+0x32>
 800d0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b6:	bd30      	pop	{r4, r5, pc}
 800d0b8:	42a3      	cmp	r3, r4
 800d0ba:	d3f3      	bcc.n	800d0a4 <__mcmp+0x18>
 800d0bc:	e7fb      	b.n	800d0b6 <__mcmp+0x2a>
 800d0be:	2001      	movs	r0, #1
 800d0c0:	e7f9      	b.n	800d0b6 <__mcmp+0x2a>
	...

0800d0c4 <__mdiff>:
 800d0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	4689      	mov	r9, r1
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	4648      	mov	r0, r9
 800d0d0:	4614      	mov	r4, r2
 800d0d2:	f7ff ffdb 	bl	800d08c <__mcmp>
 800d0d6:	1e05      	subs	r5, r0, #0
 800d0d8:	d112      	bne.n	800d100 <__mdiff+0x3c>
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff fd19 	bl	800cb14 <_Balloc>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	b928      	cbnz	r0, 800d0f2 <__mdiff+0x2e>
 800d0e6:	f240 2137 	movw	r1, #567	@ 0x237
 800d0ea:	4b3e      	ldr	r3, [pc, #248]	@ (800d1e4 <__mdiff+0x120>)
 800d0ec:	483e      	ldr	r0, [pc, #248]	@ (800d1e8 <__mdiff+0x124>)
 800d0ee:	f001 fa7d 	bl	800e5ec <__assert_func>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	b003      	add	sp, #12
 800d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d100:	bfbc      	itt	lt
 800d102:	464b      	movlt	r3, r9
 800d104:	46a1      	movlt	r9, r4
 800d106:	4630      	mov	r0, r6
 800d108:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d10c:	bfba      	itte	lt
 800d10e:	461c      	movlt	r4, r3
 800d110:	2501      	movlt	r5, #1
 800d112:	2500      	movge	r5, #0
 800d114:	f7ff fcfe 	bl	800cb14 <_Balloc>
 800d118:	4602      	mov	r2, r0
 800d11a:	b918      	cbnz	r0, 800d124 <__mdiff+0x60>
 800d11c:	f240 2145 	movw	r1, #581	@ 0x245
 800d120:	4b30      	ldr	r3, [pc, #192]	@ (800d1e4 <__mdiff+0x120>)
 800d122:	e7e3      	b.n	800d0ec <__mdiff+0x28>
 800d124:	f100 0b14 	add.w	fp, r0, #20
 800d128:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d12c:	f109 0310 	add.w	r3, r9, #16
 800d130:	60c5      	str	r5, [r0, #12]
 800d132:	f04f 0c00 	mov.w	ip, #0
 800d136:	f109 0514 	add.w	r5, r9, #20
 800d13a:	46d9      	mov	r9, fp
 800d13c:	6926      	ldr	r6, [r4, #16]
 800d13e:	f104 0e14 	add.w	lr, r4, #20
 800d142:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d146:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d152:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d156:	b281      	uxth	r1, r0
 800d158:	9301      	str	r3, [sp, #4]
 800d15a:	fa1f f38a 	uxth.w	r3, sl
 800d15e:	1a5b      	subs	r3, r3, r1
 800d160:	0c00      	lsrs	r0, r0, #16
 800d162:	4463      	add	r3, ip
 800d164:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d168:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d172:	4576      	cmp	r6, lr
 800d174:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d178:	f849 3b04 	str.w	r3, [r9], #4
 800d17c:	d8e6      	bhi.n	800d14c <__mdiff+0x88>
 800d17e:	1b33      	subs	r3, r6, r4
 800d180:	3b15      	subs	r3, #21
 800d182:	f023 0303 	bic.w	r3, r3, #3
 800d186:	3415      	adds	r4, #21
 800d188:	3304      	adds	r3, #4
 800d18a:	42a6      	cmp	r6, r4
 800d18c:	bf38      	it	cc
 800d18e:	2304      	movcc	r3, #4
 800d190:	441d      	add	r5, r3
 800d192:	445b      	add	r3, fp
 800d194:	461e      	mov	r6, r3
 800d196:	462c      	mov	r4, r5
 800d198:	4544      	cmp	r4, r8
 800d19a:	d30e      	bcc.n	800d1ba <__mdiff+0xf6>
 800d19c:	f108 0103 	add.w	r1, r8, #3
 800d1a0:	1b49      	subs	r1, r1, r5
 800d1a2:	f021 0103 	bic.w	r1, r1, #3
 800d1a6:	3d03      	subs	r5, #3
 800d1a8:	45a8      	cmp	r8, r5
 800d1aa:	bf38      	it	cc
 800d1ac:	2100      	movcc	r1, #0
 800d1ae:	440b      	add	r3, r1
 800d1b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1b4:	b199      	cbz	r1, 800d1de <__mdiff+0x11a>
 800d1b6:	6117      	str	r7, [r2, #16]
 800d1b8:	e79e      	b.n	800d0f8 <__mdiff+0x34>
 800d1ba:	46e6      	mov	lr, ip
 800d1bc:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1c0:	fa1f fc81 	uxth.w	ip, r1
 800d1c4:	44f4      	add	ip, lr
 800d1c6:	0c08      	lsrs	r0, r1, #16
 800d1c8:	4471      	add	r1, lr
 800d1ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1ce:	b289      	uxth	r1, r1
 800d1d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1d8:	f846 1b04 	str.w	r1, [r6], #4
 800d1dc:	e7dc      	b.n	800d198 <__mdiff+0xd4>
 800d1de:	3f01      	subs	r7, #1
 800d1e0:	e7e6      	b.n	800d1b0 <__mdiff+0xec>
 800d1e2:	bf00      	nop
 800d1e4:	0800f42b 	.word	0x0800f42b
 800d1e8:	0800f43c 	.word	0x0800f43c

0800d1ec <__ulp>:
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d228 <__ulp+0x3c>)
 800d1ee:	400b      	ands	r3, r1
 800d1f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dc08      	bgt.n	800d20a <__ulp+0x1e>
 800d1f8:	425b      	negs	r3, r3
 800d1fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d202:	da04      	bge.n	800d20e <__ulp+0x22>
 800d204:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d208:	4113      	asrs	r3, r2
 800d20a:	2200      	movs	r2, #0
 800d20c:	e008      	b.n	800d220 <__ulp+0x34>
 800d20e:	f1a2 0314 	sub.w	r3, r2, #20
 800d212:	2b1e      	cmp	r3, #30
 800d214:	bfd6      	itet	le
 800d216:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d21a:	2201      	movgt	r2, #1
 800d21c:	40da      	lsrle	r2, r3
 800d21e:	2300      	movs	r3, #0
 800d220:	4619      	mov	r1, r3
 800d222:	4610      	mov	r0, r2
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	7ff00000 	.word	0x7ff00000

0800d22c <__b2d>:
 800d22c:	6902      	ldr	r2, [r0, #16]
 800d22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d230:	f100 0614 	add.w	r6, r0, #20
 800d234:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d238:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d23c:	4f1e      	ldr	r7, [pc, #120]	@ (800d2b8 <__b2d+0x8c>)
 800d23e:	4620      	mov	r0, r4
 800d240:	f7ff fd5a 	bl	800ccf8 <__hi0bits>
 800d244:	4603      	mov	r3, r0
 800d246:	f1c0 0020 	rsb	r0, r0, #32
 800d24a:	2b0a      	cmp	r3, #10
 800d24c:	f1a2 0504 	sub.w	r5, r2, #4
 800d250:	6008      	str	r0, [r1, #0]
 800d252:	dc12      	bgt.n	800d27a <__b2d+0x4e>
 800d254:	42ae      	cmp	r6, r5
 800d256:	bf2c      	ite	cs
 800d258:	2200      	movcs	r2, #0
 800d25a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d25e:	f1c3 0c0b 	rsb	ip, r3, #11
 800d262:	3315      	adds	r3, #21
 800d264:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d268:	fa04 f303 	lsl.w	r3, r4, r3
 800d26c:	fa22 f20c 	lsr.w	r2, r2, ip
 800d270:	ea4e 0107 	orr.w	r1, lr, r7
 800d274:	431a      	orrs	r2, r3
 800d276:	4610      	mov	r0, r2
 800d278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d27a:	42ae      	cmp	r6, r5
 800d27c:	bf36      	itet	cc
 800d27e:	f1a2 0508 	subcc.w	r5, r2, #8
 800d282:	2200      	movcs	r2, #0
 800d284:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d288:	3b0b      	subs	r3, #11
 800d28a:	d012      	beq.n	800d2b2 <__b2d+0x86>
 800d28c:	f1c3 0720 	rsb	r7, r3, #32
 800d290:	fa22 f107 	lsr.w	r1, r2, r7
 800d294:	409c      	lsls	r4, r3
 800d296:	430c      	orrs	r4, r1
 800d298:	42b5      	cmp	r5, r6
 800d29a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d29e:	bf94      	ite	ls
 800d2a0:	2400      	movls	r4, #0
 800d2a2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d2a6:	409a      	lsls	r2, r3
 800d2a8:	40fc      	lsrs	r4, r7
 800d2aa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d2ae:	4322      	orrs	r2, r4
 800d2b0:	e7e1      	b.n	800d276 <__b2d+0x4a>
 800d2b2:	ea44 0107 	orr.w	r1, r4, r7
 800d2b6:	e7de      	b.n	800d276 <__b2d+0x4a>
 800d2b8:	3ff00000 	.word	0x3ff00000

0800d2bc <__d2b>:
 800d2bc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	4690      	mov	r8, r2
 800d2c4:	4699      	mov	r9, r3
 800d2c6:	9e08      	ldr	r6, [sp, #32]
 800d2c8:	f7ff fc24 	bl	800cb14 <_Balloc>
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	b930      	cbnz	r0, 800d2de <__d2b+0x22>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2d6:	4b23      	ldr	r3, [pc, #140]	@ (800d364 <__d2b+0xa8>)
 800d2d8:	4823      	ldr	r0, [pc, #140]	@ (800d368 <__d2b+0xac>)
 800d2da:	f001 f987 	bl	800e5ec <__assert_func>
 800d2de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2e6:	b10d      	cbz	r5, 800d2ec <__d2b+0x30>
 800d2e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	f1b8 0300 	subs.w	r3, r8, #0
 800d2f2:	d024      	beq.n	800d33e <__d2b+0x82>
 800d2f4:	4668      	mov	r0, sp
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	f7ff fd1d 	bl	800cd36 <__lo0bits>
 800d2fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d300:	b1d8      	cbz	r0, 800d33a <__d2b+0x7e>
 800d302:	f1c0 0320 	rsb	r3, r0, #32
 800d306:	fa02 f303 	lsl.w	r3, r2, r3
 800d30a:	430b      	orrs	r3, r1
 800d30c:	40c2      	lsrs	r2, r0
 800d30e:	6163      	str	r3, [r4, #20]
 800d310:	9201      	str	r2, [sp, #4]
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	bf0c      	ite	eq
 800d318:	2201      	moveq	r2, #1
 800d31a:	2202      	movne	r2, #2
 800d31c:	61a3      	str	r3, [r4, #24]
 800d31e:	6122      	str	r2, [r4, #16]
 800d320:	b1ad      	cbz	r5, 800d34e <__d2b+0x92>
 800d322:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d326:	4405      	add	r5, r0
 800d328:	6035      	str	r5, [r6, #0]
 800d32a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	6018      	str	r0, [r3, #0]
 800d332:	4620      	mov	r0, r4
 800d334:	b002      	add	sp, #8
 800d336:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d33a:	6161      	str	r1, [r4, #20]
 800d33c:	e7e9      	b.n	800d312 <__d2b+0x56>
 800d33e:	a801      	add	r0, sp, #4
 800d340:	f7ff fcf9 	bl	800cd36 <__lo0bits>
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	6163      	str	r3, [r4, #20]
 800d34a:	3020      	adds	r0, #32
 800d34c:	e7e7      	b.n	800d31e <__d2b+0x62>
 800d34e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d352:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d356:	6030      	str	r0, [r6, #0]
 800d358:	6918      	ldr	r0, [r3, #16]
 800d35a:	f7ff fccd 	bl	800ccf8 <__hi0bits>
 800d35e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d362:	e7e4      	b.n	800d32e <__d2b+0x72>
 800d364:	0800f42b 	.word	0x0800f42b
 800d368:	0800f43c 	.word	0x0800f43c

0800d36c <__ratio>:
 800d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d370:	b085      	sub	sp, #20
 800d372:	e9cd 1000 	strd	r1, r0, [sp]
 800d376:	a902      	add	r1, sp, #8
 800d378:	f7ff ff58 	bl	800d22c <__b2d>
 800d37c:	468b      	mov	fp, r1
 800d37e:	4606      	mov	r6, r0
 800d380:	460f      	mov	r7, r1
 800d382:	9800      	ldr	r0, [sp, #0]
 800d384:	a903      	add	r1, sp, #12
 800d386:	f7ff ff51 	bl	800d22c <__b2d>
 800d38a:	460d      	mov	r5, r1
 800d38c:	9b01      	ldr	r3, [sp, #4]
 800d38e:	4689      	mov	r9, r1
 800d390:	6919      	ldr	r1, [r3, #16]
 800d392:	9b00      	ldr	r3, [sp, #0]
 800d394:	4604      	mov	r4, r0
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	4630      	mov	r0, r6
 800d39a:	1ac9      	subs	r1, r1, r3
 800d39c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d3a0:	1a9b      	subs	r3, r3, r2
 800d3a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	bfcd      	iteet	gt
 800d3aa:	463a      	movgt	r2, r7
 800d3ac:	462a      	movle	r2, r5
 800d3ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d3b6:	bfd8      	it	le
 800d3b8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d3bc:	464b      	mov	r3, r9
 800d3be:	4622      	mov	r2, r4
 800d3c0:	4659      	mov	r1, fp
 800d3c2:	f7f3 f9b3 	bl	800072c <__aeabi_ddiv>
 800d3c6:	b005      	add	sp, #20
 800d3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3cc <__copybits>:
 800d3cc:	3901      	subs	r1, #1
 800d3ce:	b570      	push	{r4, r5, r6, lr}
 800d3d0:	1149      	asrs	r1, r1, #5
 800d3d2:	6914      	ldr	r4, [r2, #16]
 800d3d4:	3101      	adds	r1, #1
 800d3d6:	f102 0314 	add.w	r3, r2, #20
 800d3da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3e2:	1f05      	subs	r5, r0, #4
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	d30c      	bcc.n	800d402 <__copybits+0x36>
 800d3e8:	1aa3      	subs	r3, r4, r2
 800d3ea:	3b11      	subs	r3, #17
 800d3ec:	f023 0303 	bic.w	r3, r3, #3
 800d3f0:	3211      	adds	r2, #17
 800d3f2:	42a2      	cmp	r2, r4
 800d3f4:	bf88      	it	hi
 800d3f6:	2300      	movhi	r3, #0
 800d3f8:	4418      	add	r0, r3
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4288      	cmp	r0, r1
 800d3fe:	d305      	bcc.n	800d40c <__copybits+0x40>
 800d400:	bd70      	pop	{r4, r5, r6, pc}
 800d402:	f853 6b04 	ldr.w	r6, [r3], #4
 800d406:	f845 6f04 	str.w	r6, [r5, #4]!
 800d40a:	e7eb      	b.n	800d3e4 <__copybits+0x18>
 800d40c:	f840 3b04 	str.w	r3, [r0], #4
 800d410:	e7f4      	b.n	800d3fc <__copybits+0x30>

0800d412 <__any_on>:
 800d412:	f100 0214 	add.w	r2, r0, #20
 800d416:	6900      	ldr	r0, [r0, #16]
 800d418:	114b      	asrs	r3, r1, #5
 800d41a:	4298      	cmp	r0, r3
 800d41c:	b510      	push	{r4, lr}
 800d41e:	db11      	blt.n	800d444 <__any_on+0x32>
 800d420:	dd0a      	ble.n	800d438 <__any_on+0x26>
 800d422:	f011 011f 	ands.w	r1, r1, #31
 800d426:	d007      	beq.n	800d438 <__any_on+0x26>
 800d428:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d42c:	fa24 f001 	lsr.w	r0, r4, r1
 800d430:	fa00 f101 	lsl.w	r1, r0, r1
 800d434:	428c      	cmp	r4, r1
 800d436:	d10b      	bne.n	800d450 <__any_on+0x3e>
 800d438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d803      	bhi.n	800d448 <__any_on+0x36>
 800d440:	2000      	movs	r0, #0
 800d442:	bd10      	pop	{r4, pc}
 800d444:	4603      	mov	r3, r0
 800d446:	e7f7      	b.n	800d438 <__any_on+0x26>
 800d448:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d44c:	2900      	cmp	r1, #0
 800d44e:	d0f5      	beq.n	800d43c <__any_on+0x2a>
 800d450:	2001      	movs	r0, #1
 800d452:	e7f6      	b.n	800d442 <__any_on+0x30>

0800d454 <sulp>:
 800d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d458:	460f      	mov	r7, r1
 800d45a:	4690      	mov	r8, r2
 800d45c:	f7ff fec6 	bl	800d1ec <__ulp>
 800d460:	4604      	mov	r4, r0
 800d462:	460d      	mov	r5, r1
 800d464:	f1b8 0f00 	cmp.w	r8, #0
 800d468:	d011      	beq.n	800d48e <sulp+0x3a>
 800d46a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d46e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d472:	2b00      	cmp	r3, #0
 800d474:	dd0b      	ble.n	800d48e <sulp+0x3a>
 800d476:	2400      	movs	r4, #0
 800d478:	051b      	lsls	r3, r3, #20
 800d47a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d47e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d482:	4622      	mov	r2, r4
 800d484:	462b      	mov	r3, r5
 800d486:	f7f3 f827 	bl	80004d8 <__aeabi_dmul>
 800d48a:	4604      	mov	r4, r0
 800d48c:	460d      	mov	r5, r1
 800d48e:	4620      	mov	r0, r4
 800d490:	4629      	mov	r1, r5
 800d492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d498 <_strtod_l>:
 800d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	b09f      	sub	sp, #124	@ 0x7c
 800d49e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d4a6:	f04f 0a00 	mov.w	sl, #0
 800d4aa:	f04f 0b00 	mov.w	fp, #0
 800d4ae:	460a      	mov	r2, r1
 800d4b0:	9005      	str	r0, [sp, #20]
 800d4b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4b4:	7811      	ldrb	r1, [r2, #0]
 800d4b6:	292b      	cmp	r1, #43	@ 0x2b
 800d4b8:	d048      	beq.n	800d54c <_strtod_l+0xb4>
 800d4ba:	d836      	bhi.n	800d52a <_strtod_l+0x92>
 800d4bc:	290d      	cmp	r1, #13
 800d4be:	d830      	bhi.n	800d522 <_strtod_l+0x8a>
 800d4c0:	2908      	cmp	r1, #8
 800d4c2:	d830      	bhi.n	800d526 <_strtod_l+0x8e>
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	d039      	beq.n	800d53c <_strtod_l+0xa4>
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d4ce:	782a      	ldrb	r2, [r5, #0]
 800d4d0:	2a30      	cmp	r2, #48	@ 0x30
 800d4d2:	f040 80b0 	bne.w	800d636 <_strtod_l+0x19e>
 800d4d6:	786a      	ldrb	r2, [r5, #1]
 800d4d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4dc:	2a58      	cmp	r2, #88	@ 0x58
 800d4de:	d16c      	bne.n	800d5ba <_strtod_l+0x122>
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4e4:	4a8f      	ldr	r2, [pc, #572]	@ (800d724 <_strtod_l+0x28c>)
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	ab1a      	add	r3, sp, #104	@ 0x68
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	9805      	ldr	r0, [sp, #20]
 800d4ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d4f0:	a919      	add	r1, sp, #100	@ 0x64
 800d4f2:	f001 f915 	bl	800e720 <__gethex>
 800d4f6:	f010 060f 	ands.w	r6, r0, #15
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	d005      	beq.n	800d50a <_strtod_l+0x72>
 800d4fe:	2e06      	cmp	r6, #6
 800d500:	d126      	bne.n	800d550 <_strtod_l+0xb8>
 800d502:	2300      	movs	r3, #0
 800d504:	3501      	adds	r5, #1
 800d506:	9519      	str	r5, [sp, #100]	@ 0x64
 800d508:	930e      	str	r3, [sp, #56]	@ 0x38
 800d50a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 8582 	bne.w	800e016 <_strtod_l+0xb7e>
 800d512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d514:	b1bb      	cbz	r3, 800d546 <_strtod_l+0xae>
 800d516:	4650      	mov	r0, sl
 800d518:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800d51c:	b01f      	add	sp, #124	@ 0x7c
 800d51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d522:	2920      	cmp	r1, #32
 800d524:	d1d0      	bne.n	800d4c8 <_strtod_l+0x30>
 800d526:	3201      	adds	r2, #1
 800d528:	e7c3      	b.n	800d4b2 <_strtod_l+0x1a>
 800d52a:	292d      	cmp	r1, #45	@ 0x2d
 800d52c:	d1cc      	bne.n	800d4c8 <_strtod_l+0x30>
 800d52e:	2101      	movs	r1, #1
 800d530:	910e      	str	r1, [sp, #56]	@ 0x38
 800d532:	1c51      	adds	r1, r2, #1
 800d534:	9119      	str	r1, [sp, #100]	@ 0x64
 800d536:	7852      	ldrb	r2, [r2, #1]
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d1c7      	bne.n	800d4cc <_strtod_l+0x34>
 800d53c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d53e:	9419      	str	r4, [sp, #100]	@ 0x64
 800d540:	2b00      	cmp	r3, #0
 800d542:	f040 8566 	bne.w	800e012 <_strtod_l+0xb7a>
 800d546:	4650      	mov	r0, sl
 800d548:	4659      	mov	r1, fp
 800d54a:	e7e7      	b.n	800d51c <_strtod_l+0x84>
 800d54c:	2100      	movs	r1, #0
 800d54e:	e7ef      	b.n	800d530 <_strtod_l+0x98>
 800d550:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d552:	b13a      	cbz	r2, 800d564 <_strtod_l+0xcc>
 800d554:	2135      	movs	r1, #53	@ 0x35
 800d556:	a81c      	add	r0, sp, #112	@ 0x70
 800d558:	f7ff ff38 	bl	800d3cc <__copybits>
 800d55c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d55e:	9805      	ldr	r0, [sp, #20]
 800d560:	f7ff fb18 	bl	800cb94 <_Bfree>
 800d564:	3e01      	subs	r6, #1
 800d566:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d568:	2e04      	cmp	r6, #4
 800d56a:	d806      	bhi.n	800d57a <_strtod_l+0xe2>
 800d56c:	e8df f006 	tbb	[pc, r6]
 800d570:	201d0314 	.word	0x201d0314
 800d574:	14          	.byte	0x14
 800d575:	00          	.byte	0x00
 800d576:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d57a:	05e1      	lsls	r1, r4, #23
 800d57c:	bf48      	it	mi
 800d57e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d582:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d586:	0d1b      	lsrs	r3, r3, #20
 800d588:	051b      	lsls	r3, r3, #20
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1bd      	bne.n	800d50a <_strtod_l+0x72>
 800d58e:	f7fe fb27 	bl	800bbe0 <__errno>
 800d592:	2322      	movs	r3, #34	@ 0x22
 800d594:	6003      	str	r3, [r0, #0]
 800d596:	e7b8      	b.n	800d50a <_strtod_l+0x72>
 800d598:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d59c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d5a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d5a8:	e7e7      	b.n	800d57a <_strtod_l+0xe2>
 800d5aa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d728 <_strtod_l+0x290>
 800d5ae:	e7e4      	b.n	800d57a <_strtod_l+0xe2>
 800d5b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5b4:	f04f 3aff 	mov.w	sl, #4294967295
 800d5b8:	e7df      	b.n	800d57a <_strtod_l+0xe2>
 800d5ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5c0:	785b      	ldrb	r3, [r3, #1]
 800d5c2:	2b30      	cmp	r3, #48	@ 0x30
 800d5c4:	d0f9      	beq.n	800d5ba <_strtod_l+0x122>
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d09f      	beq.n	800d50a <_strtod_l+0x72>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	2700      	movs	r7, #0
 800d5ce:	220a      	movs	r2, #10
 800d5d0:	46b9      	mov	r9, r7
 800d5d2:	9308      	str	r3, [sp, #32]
 800d5d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5d6:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d5d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d5dc:	7805      	ldrb	r5, [r0, #0]
 800d5de:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d5e2:	b2d9      	uxtb	r1, r3
 800d5e4:	2909      	cmp	r1, #9
 800d5e6:	d928      	bls.n	800d63a <_strtod_l+0x1a2>
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	4950      	ldr	r1, [pc, #320]	@ (800d72c <_strtod_l+0x294>)
 800d5ec:	f000 ffc8 	bl	800e580 <strncmp>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d032      	beq.n	800d65a <_strtod_l+0x1c2>
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	462a      	mov	r2, r5
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	464d      	mov	r5, r9
 800d5fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5fe:	2a65      	cmp	r2, #101	@ 0x65
 800d600:	d001      	beq.n	800d606 <_strtod_l+0x16e>
 800d602:	2a45      	cmp	r2, #69	@ 0x45
 800d604:	d114      	bne.n	800d630 <_strtod_l+0x198>
 800d606:	b91d      	cbnz	r5, 800d610 <_strtod_l+0x178>
 800d608:	9a08      	ldr	r2, [sp, #32]
 800d60a:	4302      	orrs	r2, r0
 800d60c:	d096      	beq.n	800d53c <_strtod_l+0xa4>
 800d60e:	2500      	movs	r5, #0
 800d610:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d612:	1c62      	adds	r2, r4, #1
 800d614:	9219      	str	r2, [sp, #100]	@ 0x64
 800d616:	7862      	ldrb	r2, [r4, #1]
 800d618:	2a2b      	cmp	r2, #43	@ 0x2b
 800d61a:	d07a      	beq.n	800d712 <_strtod_l+0x27a>
 800d61c:	2a2d      	cmp	r2, #45	@ 0x2d
 800d61e:	d07e      	beq.n	800d71e <_strtod_l+0x286>
 800d620:	f04f 0c00 	mov.w	ip, #0
 800d624:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d628:	2909      	cmp	r1, #9
 800d62a:	f240 8085 	bls.w	800d738 <_strtod_l+0x2a0>
 800d62e:	9419      	str	r4, [sp, #100]	@ 0x64
 800d630:	f04f 0800 	mov.w	r8, #0
 800d634:	e0a5      	b.n	800d782 <_strtod_l+0x2ea>
 800d636:	2300      	movs	r3, #0
 800d638:	e7c8      	b.n	800d5cc <_strtod_l+0x134>
 800d63a:	f1b9 0f08 	cmp.w	r9, #8
 800d63e:	bfd8      	it	le
 800d640:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d642:	f100 0001 	add.w	r0, r0, #1
 800d646:	bfd6      	itet	le
 800d648:	fb02 3301 	mlale	r3, r2, r1, r3
 800d64c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d650:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d652:	f109 0901 	add.w	r9, r9, #1
 800d656:	9019      	str	r0, [sp, #100]	@ 0x64
 800d658:	e7bf      	b.n	800d5da <_strtod_l+0x142>
 800d65a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d660:	785a      	ldrb	r2, [r3, #1]
 800d662:	f1b9 0f00 	cmp.w	r9, #0
 800d666:	d03b      	beq.n	800d6e0 <_strtod_l+0x248>
 800d668:	464d      	mov	r5, r9
 800d66a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d66c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d670:	2b09      	cmp	r3, #9
 800d672:	d912      	bls.n	800d69a <_strtod_l+0x202>
 800d674:	2301      	movs	r3, #1
 800d676:	e7c2      	b.n	800d5fe <_strtod_l+0x166>
 800d678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d67a:	3001      	adds	r0, #1
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d680:	785a      	ldrb	r2, [r3, #1]
 800d682:	2a30      	cmp	r2, #48	@ 0x30
 800d684:	d0f8      	beq.n	800d678 <_strtod_l+0x1e0>
 800d686:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d68a:	2b08      	cmp	r3, #8
 800d68c:	f200 84c8 	bhi.w	800e020 <_strtod_l+0xb88>
 800d690:	900a      	str	r0, [sp, #40]	@ 0x28
 800d692:	2000      	movs	r0, #0
 800d694:	4605      	mov	r5, r0
 800d696:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d698:	930c      	str	r3, [sp, #48]	@ 0x30
 800d69a:	3a30      	subs	r2, #48	@ 0x30
 800d69c:	f100 0301 	add.w	r3, r0, #1
 800d6a0:	d018      	beq.n	800d6d4 <_strtod_l+0x23c>
 800d6a2:	462e      	mov	r6, r5
 800d6a4:	f04f 0e0a 	mov.w	lr, #10
 800d6a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6aa:	4419      	add	r1, r3
 800d6ac:	910a      	str	r1, [sp, #40]	@ 0x28
 800d6ae:	1c71      	adds	r1, r6, #1
 800d6b0:	eba1 0c05 	sub.w	ip, r1, r5
 800d6b4:	4563      	cmp	r3, ip
 800d6b6:	dc15      	bgt.n	800d6e4 <_strtod_l+0x24c>
 800d6b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d6bc:	182b      	adds	r3, r5, r0
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	f105 0501 	add.w	r5, r5, #1
 800d6c4:	4405      	add	r5, r0
 800d6c6:	dc1a      	bgt.n	800d6fe <_strtod_l+0x266>
 800d6c8:	230a      	movs	r3, #10
 800d6ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6cc:	fb03 2301 	mla	r3, r3, r1, r2
 800d6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	1c51      	adds	r1, r2, #1
 800d6da:	9119      	str	r1, [sp, #100]	@ 0x64
 800d6dc:	7852      	ldrb	r2, [r2, #1]
 800d6de:	e7c5      	b.n	800d66c <_strtod_l+0x1d4>
 800d6e0:	4648      	mov	r0, r9
 800d6e2:	e7ce      	b.n	800d682 <_strtod_l+0x1ea>
 800d6e4:	2e08      	cmp	r6, #8
 800d6e6:	dc05      	bgt.n	800d6f4 <_strtod_l+0x25c>
 800d6e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d6ea:	fb0e f606 	mul.w	r6, lr, r6
 800d6ee:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d6f0:	460e      	mov	r6, r1
 800d6f2:	e7dc      	b.n	800d6ae <_strtod_l+0x216>
 800d6f4:	2910      	cmp	r1, #16
 800d6f6:	bfd8      	it	le
 800d6f8:	fb0e f707 	mulle.w	r7, lr, r7
 800d6fc:	e7f8      	b.n	800d6f0 <_strtod_l+0x258>
 800d6fe:	2b0f      	cmp	r3, #15
 800d700:	bfdc      	itt	le
 800d702:	230a      	movle	r3, #10
 800d704:	fb03 2707 	mlale	r7, r3, r7, r2
 800d708:	e7e3      	b.n	800d6d2 <_strtod_l+0x23a>
 800d70a:	2300      	movs	r3, #0
 800d70c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d70e:	2301      	movs	r3, #1
 800d710:	e77a      	b.n	800d608 <_strtod_l+0x170>
 800d712:	f04f 0c00 	mov.w	ip, #0
 800d716:	1ca2      	adds	r2, r4, #2
 800d718:	9219      	str	r2, [sp, #100]	@ 0x64
 800d71a:	78a2      	ldrb	r2, [r4, #2]
 800d71c:	e782      	b.n	800d624 <_strtod_l+0x18c>
 800d71e:	f04f 0c01 	mov.w	ip, #1
 800d722:	e7f8      	b.n	800d716 <_strtod_l+0x27e>
 800d724:	0800f65c 	.word	0x0800f65c
 800d728:	7ff00000 	.word	0x7ff00000
 800d72c:	0800f495 	.word	0x0800f495
 800d730:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d732:	1c51      	adds	r1, r2, #1
 800d734:	9119      	str	r1, [sp, #100]	@ 0x64
 800d736:	7852      	ldrb	r2, [r2, #1]
 800d738:	2a30      	cmp	r2, #48	@ 0x30
 800d73a:	d0f9      	beq.n	800d730 <_strtod_l+0x298>
 800d73c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d740:	2908      	cmp	r1, #8
 800d742:	f63f af75 	bhi.w	800d630 <_strtod_l+0x198>
 800d746:	f04f 080a 	mov.w	r8, #10
 800d74a:	3a30      	subs	r2, #48	@ 0x30
 800d74c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d74e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d750:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d752:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d754:	1c56      	adds	r6, r2, #1
 800d756:	9619      	str	r6, [sp, #100]	@ 0x64
 800d758:	7852      	ldrb	r2, [r2, #1]
 800d75a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d75e:	f1be 0f09 	cmp.w	lr, #9
 800d762:	d939      	bls.n	800d7d8 <_strtod_l+0x340>
 800d764:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d766:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d76a:	1a76      	subs	r6, r6, r1
 800d76c:	2e08      	cmp	r6, #8
 800d76e:	dc03      	bgt.n	800d778 <_strtod_l+0x2e0>
 800d770:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d772:	4588      	cmp	r8, r1
 800d774:	bfa8      	it	ge
 800d776:	4688      	movge	r8, r1
 800d778:	f1bc 0f00 	cmp.w	ip, #0
 800d77c:	d001      	beq.n	800d782 <_strtod_l+0x2ea>
 800d77e:	f1c8 0800 	rsb	r8, r8, #0
 800d782:	2d00      	cmp	r5, #0
 800d784:	d14e      	bne.n	800d824 <_strtod_l+0x38c>
 800d786:	9908      	ldr	r1, [sp, #32]
 800d788:	4308      	orrs	r0, r1
 800d78a:	f47f aebe 	bne.w	800d50a <_strtod_l+0x72>
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f47f aed4 	bne.w	800d53c <_strtod_l+0xa4>
 800d794:	2a69      	cmp	r2, #105	@ 0x69
 800d796:	d028      	beq.n	800d7ea <_strtod_l+0x352>
 800d798:	dc25      	bgt.n	800d7e6 <_strtod_l+0x34e>
 800d79a:	2a49      	cmp	r2, #73	@ 0x49
 800d79c:	d025      	beq.n	800d7ea <_strtod_l+0x352>
 800d79e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d7a0:	f47f aecc 	bne.w	800d53c <_strtod_l+0xa4>
 800d7a4:	4999      	ldr	r1, [pc, #612]	@ (800da0c <_strtod_l+0x574>)
 800d7a6:	a819      	add	r0, sp, #100	@ 0x64
 800d7a8:	f001 f9dc 	bl	800eb64 <__match>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	f43f aec5 	beq.w	800d53c <_strtod_l+0xa4>
 800d7b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b28      	cmp	r3, #40	@ 0x28
 800d7b8:	d12e      	bne.n	800d818 <_strtod_l+0x380>
 800d7ba:	4995      	ldr	r1, [pc, #596]	@ (800da10 <_strtod_l+0x578>)
 800d7bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800d7be:	a819      	add	r0, sp, #100	@ 0x64
 800d7c0:	f001 f9e4 	bl	800eb8c <__hexnan>
 800d7c4:	2805      	cmp	r0, #5
 800d7c6:	d127      	bne.n	800d818 <_strtod_l+0x380>
 800d7c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d7ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7d6:	e698      	b.n	800d50a <_strtod_l+0x72>
 800d7d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7da:	fb08 2101 	mla	r1, r8, r1, r2
 800d7de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d7e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7e4:	e7b5      	b.n	800d752 <_strtod_l+0x2ba>
 800d7e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7e8:	e7da      	b.n	800d7a0 <_strtod_l+0x308>
 800d7ea:	498a      	ldr	r1, [pc, #552]	@ (800da14 <_strtod_l+0x57c>)
 800d7ec:	a819      	add	r0, sp, #100	@ 0x64
 800d7ee:	f001 f9b9 	bl	800eb64 <__match>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f43f aea2 	beq.w	800d53c <_strtod_l+0xa4>
 800d7f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7fa:	4987      	ldr	r1, [pc, #540]	@ (800da18 <_strtod_l+0x580>)
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	a819      	add	r0, sp, #100	@ 0x64
 800d800:	9319      	str	r3, [sp, #100]	@ 0x64
 800d802:	f001 f9af 	bl	800eb64 <__match>
 800d806:	b910      	cbnz	r0, 800d80e <_strtod_l+0x376>
 800d808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d80a:	3301      	adds	r3, #1
 800d80c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d80e:	f04f 0a00 	mov.w	sl, #0
 800d812:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800da1c <_strtod_l+0x584>
 800d816:	e678      	b.n	800d50a <_strtod_l+0x72>
 800d818:	4881      	ldr	r0, [pc, #516]	@ (800da20 <_strtod_l+0x588>)
 800d81a:	f000 fee1 	bl	800e5e0 <nan>
 800d81e:	4682      	mov	sl, r0
 800d820:	468b      	mov	fp, r1
 800d822:	e672      	b.n	800d50a <_strtod_l+0x72>
 800d824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d826:	f1b9 0f00 	cmp.w	r9, #0
 800d82a:	bf08      	it	eq
 800d82c:	46a9      	moveq	r9, r5
 800d82e:	eba8 0303 	sub.w	r3, r8, r3
 800d832:	2d10      	cmp	r5, #16
 800d834:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d836:	462c      	mov	r4, r5
 800d838:	9309      	str	r3, [sp, #36]	@ 0x24
 800d83a:	bfa8      	it	ge
 800d83c:	2410      	movge	r4, #16
 800d83e:	f7f2 fdd1 	bl	80003e4 <__aeabi_ui2d>
 800d842:	2d09      	cmp	r5, #9
 800d844:	4682      	mov	sl, r0
 800d846:	468b      	mov	fp, r1
 800d848:	dc11      	bgt.n	800d86e <_strtod_l+0x3d6>
 800d84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f43f ae5c 	beq.w	800d50a <_strtod_l+0x72>
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	dd76      	ble.n	800d944 <_strtod_l+0x4ac>
 800d856:	2b16      	cmp	r3, #22
 800d858:	dc5d      	bgt.n	800d916 <_strtod_l+0x47e>
 800d85a:	4972      	ldr	r1, [pc, #456]	@ (800da24 <_strtod_l+0x58c>)
 800d85c:	4652      	mov	r2, sl
 800d85e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d862:	465b      	mov	r3, fp
 800d864:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d868:	f7f2 fe36 	bl	80004d8 <__aeabi_dmul>
 800d86c:	e7d7      	b.n	800d81e <_strtod_l+0x386>
 800d86e:	4b6d      	ldr	r3, [pc, #436]	@ (800da24 <_strtod_l+0x58c>)
 800d870:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d874:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d878:	f7f2 fe2e 	bl	80004d8 <__aeabi_dmul>
 800d87c:	4682      	mov	sl, r0
 800d87e:	4638      	mov	r0, r7
 800d880:	468b      	mov	fp, r1
 800d882:	f7f2 fdaf 	bl	80003e4 <__aeabi_ui2d>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	4650      	mov	r0, sl
 800d88c:	4659      	mov	r1, fp
 800d88e:	f7f2 fc6d 	bl	800016c <__adddf3>
 800d892:	2d0f      	cmp	r5, #15
 800d894:	4682      	mov	sl, r0
 800d896:	468b      	mov	fp, r1
 800d898:	ddd7      	ble.n	800d84a <_strtod_l+0x3b2>
 800d89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d89c:	1b2c      	subs	r4, r5, r4
 800d89e:	441c      	add	r4, r3
 800d8a0:	2c00      	cmp	r4, #0
 800d8a2:	f340 8093 	ble.w	800d9cc <_strtod_l+0x534>
 800d8a6:	f014 030f 	ands.w	r3, r4, #15
 800d8aa:	d00a      	beq.n	800d8c2 <_strtod_l+0x42a>
 800d8ac:	495d      	ldr	r1, [pc, #372]	@ (800da24 <_strtod_l+0x58c>)
 800d8ae:	4652      	mov	r2, sl
 800d8b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8b8:	465b      	mov	r3, fp
 800d8ba:	f7f2 fe0d 	bl	80004d8 <__aeabi_dmul>
 800d8be:	4682      	mov	sl, r0
 800d8c0:	468b      	mov	fp, r1
 800d8c2:	f034 040f 	bics.w	r4, r4, #15
 800d8c6:	d073      	beq.n	800d9b0 <_strtod_l+0x518>
 800d8c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d8cc:	dd49      	ble.n	800d962 <_strtod_l+0x4ca>
 800d8ce:	2400      	movs	r4, #0
 800d8d0:	46a0      	mov	r8, r4
 800d8d2:	46a1      	mov	r9, r4
 800d8d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d8d6:	2322      	movs	r3, #34	@ 0x22
 800d8d8:	f04f 0a00 	mov.w	sl, #0
 800d8dc:	9a05      	ldr	r2, [sp, #20]
 800d8de:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800da1c <_strtod_l+0x584>
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f43f ae0f 	beq.w	800d50a <_strtod_l+0x72>
 800d8ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8ee:	9805      	ldr	r0, [sp, #20]
 800d8f0:	f7ff f950 	bl	800cb94 <_Bfree>
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	9805      	ldr	r0, [sp, #20]
 800d8f8:	f7ff f94c 	bl	800cb94 <_Bfree>
 800d8fc:	4641      	mov	r1, r8
 800d8fe:	9805      	ldr	r0, [sp, #20]
 800d900:	f7ff f948 	bl	800cb94 <_Bfree>
 800d904:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d906:	9805      	ldr	r0, [sp, #20]
 800d908:	f7ff f944 	bl	800cb94 <_Bfree>
 800d90c:	4621      	mov	r1, r4
 800d90e:	9805      	ldr	r0, [sp, #20]
 800d910:	f7ff f940 	bl	800cb94 <_Bfree>
 800d914:	e5f9      	b.n	800d50a <_strtod_l+0x72>
 800d916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d918:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d91c:	4293      	cmp	r3, r2
 800d91e:	dbbc      	blt.n	800d89a <_strtod_l+0x402>
 800d920:	4c40      	ldr	r4, [pc, #256]	@ (800da24 <_strtod_l+0x58c>)
 800d922:	f1c5 050f 	rsb	r5, r5, #15
 800d926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d92a:	4652      	mov	r2, sl
 800d92c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d930:	465b      	mov	r3, fp
 800d932:	f7f2 fdd1 	bl	80004d8 <__aeabi_dmul>
 800d936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d938:	1b5d      	subs	r5, r3, r5
 800d93a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d93e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d942:	e791      	b.n	800d868 <_strtod_l+0x3d0>
 800d944:	3316      	adds	r3, #22
 800d946:	dba8      	blt.n	800d89a <_strtod_l+0x402>
 800d948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d94a:	4650      	mov	r0, sl
 800d94c:	eba3 0808 	sub.w	r8, r3, r8
 800d950:	4b34      	ldr	r3, [pc, #208]	@ (800da24 <_strtod_l+0x58c>)
 800d952:	4659      	mov	r1, fp
 800d954:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d958:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d95c:	f7f2 fee6 	bl	800072c <__aeabi_ddiv>
 800d960:	e75d      	b.n	800d81e <_strtod_l+0x386>
 800d962:	2300      	movs	r3, #0
 800d964:	4650      	mov	r0, sl
 800d966:	4659      	mov	r1, fp
 800d968:	461e      	mov	r6, r3
 800d96a:	4f2f      	ldr	r7, [pc, #188]	@ (800da28 <_strtod_l+0x590>)
 800d96c:	1124      	asrs	r4, r4, #4
 800d96e:	2c01      	cmp	r4, #1
 800d970:	dc21      	bgt.n	800d9b6 <_strtod_l+0x51e>
 800d972:	b10b      	cbz	r3, 800d978 <_strtod_l+0x4e0>
 800d974:	4682      	mov	sl, r0
 800d976:	468b      	mov	fp, r1
 800d978:	492b      	ldr	r1, [pc, #172]	@ (800da28 <_strtod_l+0x590>)
 800d97a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d97e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d982:	4652      	mov	r2, sl
 800d984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d988:	465b      	mov	r3, fp
 800d98a:	f7f2 fda5 	bl	80004d8 <__aeabi_dmul>
 800d98e:	4b23      	ldr	r3, [pc, #140]	@ (800da1c <_strtod_l+0x584>)
 800d990:	460a      	mov	r2, r1
 800d992:	400b      	ands	r3, r1
 800d994:	4925      	ldr	r1, [pc, #148]	@ (800da2c <_strtod_l+0x594>)
 800d996:	4682      	mov	sl, r0
 800d998:	428b      	cmp	r3, r1
 800d99a:	d898      	bhi.n	800d8ce <_strtod_l+0x436>
 800d99c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d9a0:	428b      	cmp	r3, r1
 800d9a2:	bf86      	itte	hi
 800d9a4:	f04f 3aff 	movhi.w	sl, #4294967295
 800d9a8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800da30 <_strtod_l+0x598>
 800d9ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	9308      	str	r3, [sp, #32]
 800d9b4:	e076      	b.n	800daa4 <_strtod_l+0x60c>
 800d9b6:	07e2      	lsls	r2, r4, #31
 800d9b8:	d504      	bpl.n	800d9c4 <_strtod_l+0x52c>
 800d9ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9be:	f7f2 fd8b 	bl	80004d8 <__aeabi_dmul>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	3601      	adds	r6, #1
 800d9c6:	1064      	asrs	r4, r4, #1
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	e7d0      	b.n	800d96e <_strtod_l+0x4d6>
 800d9cc:	d0f0      	beq.n	800d9b0 <_strtod_l+0x518>
 800d9ce:	4264      	negs	r4, r4
 800d9d0:	f014 020f 	ands.w	r2, r4, #15
 800d9d4:	d00a      	beq.n	800d9ec <_strtod_l+0x554>
 800d9d6:	4b13      	ldr	r3, [pc, #76]	@ (800da24 <_strtod_l+0x58c>)
 800d9d8:	4650      	mov	r0, sl
 800d9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9de:	4659      	mov	r1, fp
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f7f2 fea2 	bl	800072c <__aeabi_ddiv>
 800d9e8:	4682      	mov	sl, r0
 800d9ea:	468b      	mov	fp, r1
 800d9ec:	1124      	asrs	r4, r4, #4
 800d9ee:	d0df      	beq.n	800d9b0 <_strtod_l+0x518>
 800d9f0:	2c1f      	cmp	r4, #31
 800d9f2:	dd1f      	ble.n	800da34 <_strtod_l+0x59c>
 800d9f4:	2400      	movs	r4, #0
 800d9f6:	46a0      	mov	r8, r4
 800d9f8:	46a1      	mov	r9, r4
 800d9fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d9fc:	2322      	movs	r3, #34	@ 0x22
 800d9fe:	9a05      	ldr	r2, [sp, #20]
 800da00:	f04f 0a00 	mov.w	sl, #0
 800da04:	f04f 0b00 	mov.w	fp, #0
 800da08:	6013      	str	r3, [r2, #0]
 800da0a:	e76b      	b.n	800d8e4 <_strtod_l+0x44c>
 800da0c:	0800f383 	.word	0x0800f383
 800da10:	0800f648 	.word	0x0800f648
 800da14:	0800f37b 	.word	0x0800f37b
 800da18:	0800f3b2 	.word	0x0800f3b2
 800da1c:	7ff00000 	.word	0x7ff00000
 800da20:	0800f4eb 	.word	0x0800f4eb
 800da24:	0800f580 	.word	0x0800f580
 800da28:	0800f558 	.word	0x0800f558
 800da2c:	7ca00000 	.word	0x7ca00000
 800da30:	7fefffff 	.word	0x7fefffff
 800da34:	f014 0310 	ands.w	r3, r4, #16
 800da38:	bf18      	it	ne
 800da3a:	236a      	movne	r3, #106	@ 0x6a
 800da3c:	4650      	mov	r0, sl
 800da3e:	9308      	str	r3, [sp, #32]
 800da40:	4659      	mov	r1, fp
 800da42:	2300      	movs	r3, #0
 800da44:	4e77      	ldr	r6, [pc, #476]	@ (800dc24 <_strtod_l+0x78c>)
 800da46:	07e7      	lsls	r7, r4, #31
 800da48:	d504      	bpl.n	800da54 <_strtod_l+0x5bc>
 800da4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da4e:	f7f2 fd43 	bl	80004d8 <__aeabi_dmul>
 800da52:	2301      	movs	r3, #1
 800da54:	1064      	asrs	r4, r4, #1
 800da56:	f106 0608 	add.w	r6, r6, #8
 800da5a:	d1f4      	bne.n	800da46 <_strtod_l+0x5ae>
 800da5c:	b10b      	cbz	r3, 800da62 <_strtod_l+0x5ca>
 800da5e:	4682      	mov	sl, r0
 800da60:	468b      	mov	fp, r1
 800da62:	9b08      	ldr	r3, [sp, #32]
 800da64:	b1b3      	cbz	r3, 800da94 <_strtod_l+0x5fc>
 800da66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800da6e:	2b00      	cmp	r3, #0
 800da70:	4659      	mov	r1, fp
 800da72:	dd0f      	ble.n	800da94 <_strtod_l+0x5fc>
 800da74:	2b1f      	cmp	r3, #31
 800da76:	dd58      	ble.n	800db2a <_strtod_l+0x692>
 800da78:	2b34      	cmp	r3, #52	@ 0x34
 800da7a:	bfd8      	it	le
 800da7c:	f04f 33ff 	movle.w	r3, #4294967295
 800da80:	f04f 0a00 	mov.w	sl, #0
 800da84:	bfcf      	iteee	gt
 800da86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800da8e:	4093      	lslle	r3, r2
 800da90:	ea03 0b01 	andle.w	fp, r3, r1
 800da94:	2200      	movs	r2, #0
 800da96:	2300      	movs	r3, #0
 800da98:	4650      	mov	r0, sl
 800da9a:	4659      	mov	r1, fp
 800da9c:	f7f2 ff84 	bl	80009a8 <__aeabi_dcmpeq>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d1a7      	bne.n	800d9f4 <_strtod_l+0x55c>
 800daa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daa6:	464a      	mov	r2, r9
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800daac:	462b      	mov	r3, r5
 800daae:	9805      	ldr	r0, [sp, #20]
 800dab0:	f7ff f8d8 	bl	800cc64 <__s2b>
 800dab4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dab6:	2800      	cmp	r0, #0
 800dab8:	f43f af09 	beq.w	800d8ce <_strtod_l+0x436>
 800dabc:	2400      	movs	r4, #0
 800dabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dac2:	2a00      	cmp	r2, #0
 800dac4:	eba3 0308 	sub.w	r3, r3, r8
 800dac8:	bfa8      	it	ge
 800daca:	2300      	movge	r3, #0
 800dacc:	46a0      	mov	r8, r4
 800dace:	9312      	str	r3, [sp, #72]	@ 0x48
 800dad0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dad4:	9316      	str	r3, [sp, #88]	@ 0x58
 800dad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dad8:	9805      	ldr	r0, [sp, #20]
 800dada:	6859      	ldr	r1, [r3, #4]
 800dadc:	f7ff f81a 	bl	800cb14 <_Balloc>
 800dae0:	4681      	mov	r9, r0
 800dae2:	2800      	cmp	r0, #0
 800dae4:	f43f aef7 	beq.w	800d8d6 <_strtod_l+0x43e>
 800dae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daea:	300c      	adds	r0, #12
 800daec:	691a      	ldr	r2, [r3, #16]
 800daee:	f103 010c 	add.w	r1, r3, #12
 800daf2:	3202      	adds	r2, #2
 800daf4:	0092      	lsls	r2, r2, #2
 800daf6:	f000 fd65 	bl	800e5c4 <memcpy>
 800dafa:	ab1c      	add	r3, sp, #112	@ 0x70
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	4652      	mov	r2, sl
 800db04:	465b      	mov	r3, fp
 800db06:	9805      	ldr	r0, [sp, #20]
 800db08:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800db0c:	f7ff fbd6 	bl	800d2bc <__d2b>
 800db10:	901a      	str	r0, [sp, #104]	@ 0x68
 800db12:	2800      	cmp	r0, #0
 800db14:	f43f aedf 	beq.w	800d8d6 <_strtod_l+0x43e>
 800db18:	2101      	movs	r1, #1
 800db1a:	9805      	ldr	r0, [sp, #20]
 800db1c:	f7ff f938 	bl	800cd90 <__i2b>
 800db20:	4680      	mov	r8, r0
 800db22:	b948      	cbnz	r0, 800db38 <_strtod_l+0x6a0>
 800db24:	f04f 0800 	mov.w	r8, #0
 800db28:	e6d5      	b.n	800d8d6 <_strtod_l+0x43e>
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295
 800db2e:	fa02 f303 	lsl.w	r3, r2, r3
 800db32:	ea03 0a0a 	and.w	sl, r3, sl
 800db36:	e7ad      	b.n	800da94 <_strtod_l+0x5fc>
 800db38:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800db3a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	bfab      	itete	ge
 800db40:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800db42:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800db44:	18ef      	addge	r7, r5, r3
 800db46:	1b5e      	sublt	r6, r3, r5
 800db48:	9b08      	ldr	r3, [sp, #32]
 800db4a:	bfa8      	it	ge
 800db4c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800db4e:	eba5 0503 	sub.w	r5, r5, r3
 800db52:	4415      	add	r5, r2
 800db54:	4b34      	ldr	r3, [pc, #208]	@ (800dc28 <_strtod_l+0x790>)
 800db56:	f105 35ff 	add.w	r5, r5, #4294967295
 800db5a:	bfb8      	it	lt
 800db5c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800db5e:	429d      	cmp	r5, r3
 800db60:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800db64:	da50      	bge.n	800dc08 <_strtod_l+0x770>
 800db66:	1b5b      	subs	r3, r3, r5
 800db68:	2b1f      	cmp	r3, #31
 800db6a:	f04f 0101 	mov.w	r1, #1
 800db6e:	eba2 0203 	sub.w	r2, r2, r3
 800db72:	dc3d      	bgt.n	800dbf0 <_strtod_l+0x758>
 800db74:	fa01 f303 	lsl.w	r3, r1, r3
 800db78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db7a:	2300      	movs	r3, #0
 800db7c:	9310      	str	r3, [sp, #64]	@ 0x40
 800db7e:	18bd      	adds	r5, r7, r2
 800db80:	9b08      	ldr	r3, [sp, #32]
 800db82:	42af      	cmp	r7, r5
 800db84:	4416      	add	r6, r2
 800db86:	441e      	add	r6, r3
 800db88:	463b      	mov	r3, r7
 800db8a:	bfa8      	it	ge
 800db8c:	462b      	movge	r3, r5
 800db8e:	42b3      	cmp	r3, r6
 800db90:	bfa8      	it	ge
 800db92:	4633      	movge	r3, r6
 800db94:	2b00      	cmp	r3, #0
 800db96:	bfc2      	ittt	gt
 800db98:	1aed      	subgt	r5, r5, r3
 800db9a:	1af6      	subgt	r6, r6, r3
 800db9c:	1aff      	subgt	r7, r7, r3
 800db9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dd16      	ble.n	800dbd2 <_strtod_l+0x73a>
 800dba4:	4641      	mov	r1, r8
 800dba6:	461a      	mov	r2, r3
 800dba8:	9805      	ldr	r0, [sp, #20]
 800dbaa:	f7ff f9a9 	bl	800cf00 <__pow5mult>
 800dbae:	4680      	mov	r8, r0
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d0b7      	beq.n	800db24 <_strtod_l+0x68c>
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dbb8:	9805      	ldr	r0, [sp, #20]
 800dbba:	f7ff f8ff 	bl	800cdbc <__multiply>
 800dbbe:	900a      	str	r0, [sp, #40]	@ 0x28
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f43f ae88 	beq.w	800d8d6 <_strtod_l+0x43e>
 800dbc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbc8:	9805      	ldr	r0, [sp, #20]
 800dbca:	f7fe ffe3 	bl	800cb94 <_Bfree>
 800dbce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	dc1d      	bgt.n	800dc12 <_strtod_l+0x77a>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dd27      	ble.n	800dc2c <_strtod_l+0x794>
 800dbdc:	4649      	mov	r1, r9
 800dbde:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dbe0:	9805      	ldr	r0, [sp, #20]
 800dbe2:	f7ff f98d 	bl	800cf00 <__pow5mult>
 800dbe6:	4681      	mov	r9, r0
 800dbe8:	bb00      	cbnz	r0, 800dc2c <_strtod_l+0x794>
 800dbea:	f04f 0900 	mov.w	r9, #0
 800dbee:	e672      	b.n	800d8d6 <_strtod_l+0x43e>
 800dbf0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dbf4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dbf8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dbfc:	35e2      	adds	r5, #226	@ 0xe2
 800dbfe:	fa01 f305 	lsl.w	r3, r1, r5
 800dc02:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc04:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dc06:	e7ba      	b.n	800db7e <_strtod_l+0x6e6>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc10:	e7b5      	b.n	800db7e <_strtod_l+0x6e6>
 800dc12:	462a      	mov	r2, r5
 800dc14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc16:	9805      	ldr	r0, [sp, #20]
 800dc18:	f7ff f9cc 	bl	800cfb4 <__lshift>
 800dc1c:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d1d9      	bne.n	800dbd6 <_strtod_l+0x73e>
 800dc22:	e658      	b.n	800d8d6 <_strtod_l+0x43e>
 800dc24:	0800f670 	.word	0x0800f670
 800dc28:	fffffc02 	.word	0xfffffc02
 800dc2c:	2e00      	cmp	r6, #0
 800dc2e:	dd07      	ble.n	800dc40 <_strtod_l+0x7a8>
 800dc30:	4649      	mov	r1, r9
 800dc32:	4632      	mov	r2, r6
 800dc34:	9805      	ldr	r0, [sp, #20]
 800dc36:	f7ff f9bd 	bl	800cfb4 <__lshift>
 800dc3a:	4681      	mov	r9, r0
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0d4      	beq.n	800dbea <_strtod_l+0x752>
 800dc40:	2f00      	cmp	r7, #0
 800dc42:	dd08      	ble.n	800dc56 <_strtod_l+0x7be>
 800dc44:	4641      	mov	r1, r8
 800dc46:	463a      	mov	r2, r7
 800dc48:	9805      	ldr	r0, [sp, #20]
 800dc4a:	f7ff f9b3 	bl	800cfb4 <__lshift>
 800dc4e:	4680      	mov	r8, r0
 800dc50:	2800      	cmp	r0, #0
 800dc52:	f43f ae40 	beq.w	800d8d6 <_strtod_l+0x43e>
 800dc56:	464a      	mov	r2, r9
 800dc58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc5a:	9805      	ldr	r0, [sp, #20]
 800dc5c:	f7ff fa32 	bl	800d0c4 <__mdiff>
 800dc60:	4604      	mov	r4, r0
 800dc62:	2800      	cmp	r0, #0
 800dc64:	f43f ae37 	beq.w	800d8d6 <_strtod_l+0x43e>
 800dc68:	68c3      	ldr	r3, [r0, #12]
 800dc6a:	4641      	mov	r1, r8
 800dc6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60c3      	str	r3, [r0, #12]
 800dc72:	f7ff fa0b 	bl	800d08c <__mcmp>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	da3d      	bge.n	800dcf6 <_strtod_l+0x85e>
 800dc7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc7c:	ea53 030a 	orrs.w	r3, r3, sl
 800dc80:	d163      	bne.n	800dd4a <_strtod_l+0x8b2>
 800dc82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d15f      	bne.n	800dd4a <_strtod_l+0x8b2>
 800dc8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc8e:	0d1b      	lsrs	r3, r3, #20
 800dc90:	051b      	lsls	r3, r3, #20
 800dc92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc96:	d958      	bls.n	800dd4a <_strtod_l+0x8b2>
 800dc98:	6963      	ldr	r3, [r4, #20]
 800dc9a:	b913      	cbnz	r3, 800dca2 <_strtod_l+0x80a>
 800dc9c:	6923      	ldr	r3, [r4, #16]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	dd53      	ble.n	800dd4a <_strtod_l+0x8b2>
 800dca2:	4621      	mov	r1, r4
 800dca4:	2201      	movs	r2, #1
 800dca6:	9805      	ldr	r0, [sp, #20]
 800dca8:	f7ff f984 	bl	800cfb4 <__lshift>
 800dcac:	4641      	mov	r1, r8
 800dcae:	4604      	mov	r4, r0
 800dcb0:	f7ff f9ec 	bl	800d08c <__mcmp>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	dd48      	ble.n	800dd4a <_strtod_l+0x8b2>
 800dcb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcbc:	9a08      	ldr	r2, [sp, #32]
 800dcbe:	0d1b      	lsrs	r3, r3, #20
 800dcc0:	051b      	lsls	r3, r3, #20
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	d062      	beq.n	800dd8c <_strtod_l+0x8f4>
 800dcc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcca:	d85f      	bhi.n	800dd8c <_strtod_l+0x8f4>
 800dccc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dcd0:	f67f ae94 	bls.w	800d9fc <_strtod_l+0x564>
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	4659      	mov	r1, fp
 800dcd8:	4ba3      	ldr	r3, [pc, #652]	@ (800df68 <_strtod_l+0xad0>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f7f2 fbfc 	bl	80004d8 <__aeabi_dmul>
 800dce0:	4ba2      	ldr	r3, [pc, #648]	@ (800df6c <_strtod_l+0xad4>)
 800dce2:	4682      	mov	sl, r0
 800dce4:	400b      	ands	r3, r1
 800dce6:	468b      	mov	fp, r1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f47f adff 	bne.w	800d8ec <_strtod_l+0x454>
 800dcee:	2322      	movs	r3, #34	@ 0x22
 800dcf0:	9a05      	ldr	r2, [sp, #20]
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	e5fa      	b.n	800d8ec <_strtod_l+0x454>
 800dcf6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dcfa:	d165      	bne.n	800ddc8 <_strtod_l+0x930>
 800dcfc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dcfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd02:	b35a      	cbz	r2, 800dd5c <_strtod_l+0x8c4>
 800dd04:	4a9a      	ldr	r2, [pc, #616]	@ (800df70 <_strtod_l+0xad8>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d12b      	bne.n	800dd62 <_strtod_l+0x8ca>
 800dd0a:	9b08      	ldr	r3, [sp, #32]
 800dd0c:	4651      	mov	r1, sl
 800dd0e:	b303      	cbz	r3, 800dd52 <_strtod_l+0x8ba>
 800dd10:	465a      	mov	r2, fp
 800dd12:	4b96      	ldr	r3, [pc, #600]	@ (800df6c <_strtod_l+0xad4>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1e:	d81b      	bhi.n	800dd58 <_strtod_l+0x8c0>
 800dd20:	0d1b      	lsrs	r3, r3, #20
 800dd22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd26:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2a:	4299      	cmp	r1, r3
 800dd2c:	d119      	bne.n	800dd62 <_strtod_l+0x8ca>
 800dd2e:	4b91      	ldr	r3, [pc, #580]	@ (800df74 <_strtod_l+0xadc>)
 800dd30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d102      	bne.n	800dd3c <_strtod_l+0x8a4>
 800dd36:	3101      	adds	r1, #1
 800dd38:	f43f adcd 	beq.w	800d8d6 <_strtod_l+0x43e>
 800dd3c:	f04f 0a00 	mov.w	sl, #0
 800dd40:	4b8a      	ldr	r3, [pc, #552]	@ (800df6c <_strtod_l+0xad4>)
 800dd42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd44:	401a      	ands	r2, r3
 800dd46:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dd4a:	9b08      	ldr	r3, [sp, #32]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1c1      	bne.n	800dcd4 <_strtod_l+0x83c>
 800dd50:	e5cc      	b.n	800d8ec <_strtod_l+0x454>
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295
 800dd56:	e7e8      	b.n	800dd2a <_strtod_l+0x892>
 800dd58:	4613      	mov	r3, r2
 800dd5a:	e7e6      	b.n	800dd2a <_strtod_l+0x892>
 800dd5c:	ea53 030a 	orrs.w	r3, r3, sl
 800dd60:	d0aa      	beq.n	800dcb8 <_strtod_l+0x820>
 800dd62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd64:	b1db      	cbz	r3, 800dd9e <_strtod_l+0x906>
 800dd66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd68:	4213      	tst	r3, r2
 800dd6a:	d0ee      	beq.n	800dd4a <_strtod_l+0x8b2>
 800dd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd6e:	4650      	mov	r0, sl
 800dd70:	4659      	mov	r1, fp
 800dd72:	9a08      	ldr	r2, [sp, #32]
 800dd74:	b1bb      	cbz	r3, 800dda6 <_strtod_l+0x90e>
 800dd76:	f7ff fb6d 	bl	800d454 <sulp>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd82:	f7f2 f9f3 	bl	800016c <__adddf3>
 800dd86:	4682      	mov	sl, r0
 800dd88:	468b      	mov	fp, r1
 800dd8a:	e7de      	b.n	800dd4a <_strtod_l+0x8b2>
 800dd8c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd90:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd94:	f04f 3aff 	mov.w	sl, #4294967295
 800dd98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd9c:	e7d5      	b.n	800dd4a <_strtod_l+0x8b2>
 800dd9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dda0:	ea13 0f0a 	tst.w	r3, sl
 800dda4:	e7e1      	b.n	800dd6a <_strtod_l+0x8d2>
 800dda6:	f7ff fb55 	bl	800d454 <sulp>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	460b      	mov	r3, r1
 800ddae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddb2:	f7f2 f9d9 	bl	8000168 <__aeabi_dsub>
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4682      	mov	sl, r0
 800ddbc:	468b      	mov	fp, r1
 800ddbe:	f7f2 fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d0c1      	beq.n	800dd4a <_strtod_l+0x8b2>
 800ddc6:	e619      	b.n	800d9fc <_strtod_l+0x564>
 800ddc8:	4641      	mov	r1, r8
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f7ff face 	bl	800d36c <__ratio>
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	460f      	mov	r7, r1
 800ddda:	f7f2 fdf9 	bl	80009d0 <__aeabi_dcmple>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d06d      	beq.n	800debe <_strtod_l+0xa26>
 800dde2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d178      	bne.n	800deda <_strtod_l+0xa42>
 800dde8:	f1ba 0f00 	cmp.w	sl, #0
 800ddec:	d156      	bne.n	800de9c <_strtod_l+0xa04>
 800ddee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d158      	bne.n	800deaa <_strtod_l+0xa12>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4b5e      	ldr	r3, [pc, #376]	@ (800df78 <_strtod_l+0xae0>)
 800de00:	f7f2 fddc 	bl	80009bc <__aeabi_dcmplt>
 800de04:	2800      	cmp	r0, #0
 800de06:	d157      	bne.n	800deb8 <_strtod_l+0xa20>
 800de08:	4630      	mov	r0, r6
 800de0a:	4639      	mov	r1, r7
 800de0c:	2200      	movs	r2, #0
 800de0e:	4b5b      	ldr	r3, [pc, #364]	@ (800df7c <_strtod_l+0xae4>)
 800de10:	f7f2 fb62 	bl	80004d8 <__aeabi_dmul>
 800de14:	4606      	mov	r6, r0
 800de16:	460f      	mov	r7, r1
 800de18:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800de1c:	9606      	str	r6, [sp, #24]
 800de1e:	9307      	str	r3, [sp, #28]
 800de20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de24:	4d51      	ldr	r5, [pc, #324]	@ (800df6c <_strtod_l+0xad4>)
 800de26:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800de2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de2c:	401d      	ands	r5, r3
 800de2e:	4b54      	ldr	r3, [pc, #336]	@ (800df80 <_strtod_l+0xae8>)
 800de30:	429d      	cmp	r5, r3
 800de32:	f040 80ab 	bne.w	800df8c <_strtod_l+0xaf4>
 800de36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de38:	4650      	mov	r0, sl
 800de3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800de3e:	4659      	mov	r1, fp
 800de40:	f7ff f9d4 	bl	800d1ec <__ulp>
 800de44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de48:	f7f2 fb46 	bl	80004d8 <__aeabi_dmul>
 800de4c:	4652      	mov	r2, sl
 800de4e:	465b      	mov	r3, fp
 800de50:	f7f2 f98c 	bl	800016c <__adddf3>
 800de54:	460b      	mov	r3, r1
 800de56:	4945      	ldr	r1, [pc, #276]	@ (800df6c <_strtod_l+0xad4>)
 800de58:	4a4a      	ldr	r2, [pc, #296]	@ (800df84 <_strtod_l+0xaec>)
 800de5a:	4019      	ands	r1, r3
 800de5c:	4291      	cmp	r1, r2
 800de5e:	4682      	mov	sl, r0
 800de60:	d942      	bls.n	800dee8 <_strtod_l+0xa50>
 800de62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de64:	4b43      	ldr	r3, [pc, #268]	@ (800df74 <_strtod_l+0xadc>)
 800de66:	429a      	cmp	r2, r3
 800de68:	d103      	bne.n	800de72 <_strtod_l+0x9da>
 800de6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de6c:	3301      	adds	r3, #1
 800de6e:	f43f ad32 	beq.w	800d8d6 <_strtod_l+0x43e>
 800de72:	f04f 3aff 	mov.w	sl, #4294967295
 800de76:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800df74 <_strtod_l+0xadc>
 800de7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de7c:	9805      	ldr	r0, [sp, #20]
 800de7e:	f7fe fe89 	bl	800cb94 <_Bfree>
 800de82:	4649      	mov	r1, r9
 800de84:	9805      	ldr	r0, [sp, #20]
 800de86:	f7fe fe85 	bl	800cb94 <_Bfree>
 800de8a:	4641      	mov	r1, r8
 800de8c:	9805      	ldr	r0, [sp, #20]
 800de8e:	f7fe fe81 	bl	800cb94 <_Bfree>
 800de92:	4621      	mov	r1, r4
 800de94:	9805      	ldr	r0, [sp, #20]
 800de96:	f7fe fe7d 	bl	800cb94 <_Bfree>
 800de9a:	e61c      	b.n	800dad6 <_strtod_l+0x63e>
 800de9c:	f1ba 0f01 	cmp.w	sl, #1
 800dea0:	d103      	bne.n	800deaa <_strtod_l+0xa12>
 800dea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f43f ada9 	beq.w	800d9fc <_strtod_l+0x564>
 800deaa:	2200      	movs	r2, #0
 800deac:	4b36      	ldr	r3, [pc, #216]	@ (800df88 <_strtod_l+0xaf0>)
 800deae:	2600      	movs	r6, #0
 800deb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800deb4:	4f30      	ldr	r7, [pc, #192]	@ (800df78 <_strtod_l+0xae0>)
 800deb6:	e7b3      	b.n	800de20 <_strtod_l+0x988>
 800deb8:	2600      	movs	r6, #0
 800deba:	4f30      	ldr	r7, [pc, #192]	@ (800df7c <_strtod_l+0xae4>)
 800debc:	e7ac      	b.n	800de18 <_strtod_l+0x980>
 800debe:	4630      	mov	r0, r6
 800dec0:	4639      	mov	r1, r7
 800dec2:	4b2e      	ldr	r3, [pc, #184]	@ (800df7c <_strtod_l+0xae4>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	f7f2 fb07 	bl	80004d8 <__aeabi_dmul>
 800deca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800decc:	4606      	mov	r6, r0
 800dece:	460f      	mov	r7, r1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d0a1      	beq.n	800de18 <_strtod_l+0x980>
 800ded4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ded8:	e7a2      	b.n	800de20 <_strtod_l+0x988>
 800deda:	2200      	movs	r2, #0
 800dedc:	4b26      	ldr	r3, [pc, #152]	@ (800df78 <_strtod_l+0xae0>)
 800dede:	4616      	mov	r6, r2
 800dee0:	461f      	mov	r7, r3
 800dee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dee6:	e79b      	b.n	800de20 <_strtod_l+0x988>
 800dee8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800deec:	9b08      	ldr	r3, [sp, #32]
 800deee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1c1      	bne.n	800de7a <_strtod_l+0x9e2>
 800def6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800defa:	0d1b      	lsrs	r3, r3, #20
 800defc:	051b      	lsls	r3, r3, #20
 800defe:	429d      	cmp	r5, r3
 800df00:	d1bb      	bne.n	800de7a <_strtod_l+0x9e2>
 800df02:	4630      	mov	r0, r6
 800df04:	4639      	mov	r1, r7
 800df06:	f7f3 f903 	bl	8001110 <__aeabi_d2lz>
 800df0a:	f7f2 fab7 	bl	800047c <__aeabi_l2d>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	4630      	mov	r0, r6
 800df14:	4639      	mov	r1, r7
 800df16:	f7f2 f927 	bl	8000168 <__aeabi_dsub>
 800df1a:	460b      	mov	r3, r1
 800df1c:	4602      	mov	r2, r0
 800df1e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800df22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800df26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df28:	ea46 060a 	orr.w	r6, r6, sl
 800df2c:	431e      	orrs	r6, r3
 800df2e:	d06a      	beq.n	800e006 <_strtod_l+0xb6e>
 800df30:	a309      	add	r3, pc, #36	@ (adr r3, 800df58 <_strtod_l+0xac0>)
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f7f2 fd41 	bl	80009bc <__aeabi_dcmplt>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	f47f acd6 	bne.w	800d8ec <_strtod_l+0x454>
 800df40:	a307      	add	r3, pc, #28	@ (adr r3, 800df60 <_strtod_l+0xac8>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df4a:	f7f2 fd55 	bl	80009f8 <__aeabi_dcmpgt>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d093      	beq.n	800de7a <_strtod_l+0x9e2>
 800df52:	e4cb      	b.n	800d8ec <_strtod_l+0x454>
 800df54:	f3af 8000 	nop.w
 800df58:	94a03595 	.word	0x94a03595
 800df5c:	3fdfffff 	.word	0x3fdfffff
 800df60:	35afe535 	.word	0x35afe535
 800df64:	3fe00000 	.word	0x3fe00000
 800df68:	39500000 	.word	0x39500000
 800df6c:	7ff00000 	.word	0x7ff00000
 800df70:	000fffff 	.word	0x000fffff
 800df74:	7fefffff 	.word	0x7fefffff
 800df78:	3ff00000 	.word	0x3ff00000
 800df7c:	3fe00000 	.word	0x3fe00000
 800df80:	7fe00000 	.word	0x7fe00000
 800df84:	7c9fffff 	.word	0x7c9fffff
 800df88:	bff00000 	.word	0xbff00000
 800df8c:	9b08      	ldr	r3, [sp, #32]
 800df8e:	b323      	cbz	r3, 800dfda <_strtod_l+0xb42>
 800df90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800df94:	d821      	bhi.n	800dfda <_strtod_l+0xb42>
 800df96:	a328      	add	r3, pc, #160	@ (adr r3, 800e038 <_strtod_l+0xba0>)
 800df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9c:	4630      	mov	r0, r6
 800df9e:	4639      	mov	r1, r7
 800dfa0:	f7f2 fd16 	bl	80009d0 <__aeabi_dcmple>
 800dfa4:	b1a0      	cbz	r0, 800dfd0 <_strtod_l+0xb38>
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f7f2 fd6d 	bl	8000a88 <__aeabi_d2uiz>
 800dfae:	2801      	cmp	r0, #1
 800dfb0:	bf38      	it	cc
 800dfb2:	2001      	movcc	r0, #1
 800dfb4:	f7f2 fa16 	bl	80003e4 <__aeabi_ui2d>
 800dfb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfba:	4606      	mov	r6, r0
 800dfbc:	460f      	mov	r7, r1
 800dfbe:	b9fb      	cbnz	r3, 800e000 <_strtod_l+0xb68>
 800dfc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dfc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dfc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dfcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dfd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dfd6:	1b5b      	subs	r3, r3, r5
 800dfd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dfe2:	f7ff f903 	bl	800d1ec <__ulp>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4650      	mov	r0, sl
 800dfec:	4659      	mov	r1, fp
 800dfee:	f7f2 fa73 	bl	80004d8 <__aeabi_dmul>
 800dff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dff6:	f7f2 f8b9 	bl	800016c <__adddf3>
 800dffa:	4682      	mov	sl, r0
 800dffc:	468b      	mov	fp, r1
 800dffe:	e775      	b.n	800deec <_strtod_l+0xa54>
 800e000:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e004:	e7e0      	b.n	800dfc8 <_strtod_l+0xb30>
 800e006:	a30e      	add	r3, pc, #56	@ (adr r3, 800e040 <_strtod_l+0xba8>)
 800e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00c:	f7f2 fcd6 	bl	80009bc <__aeabi_dcmplt>
 800e010:	e79d      	b.n	800df4e <_strtod_l+0xab6>
 800e012:	2300      	movs	r3, #0
 800e014:	930e      	str	r3, [sp, #56]	@ 0x38
 800e016:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e018:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e01a:	6013      	str	r3, [r2, #0]
 800e01c:	f7ff ba79 	b.w	800d512 <_strtod_l+0x7a>
 800e020:	2a65      	cmp	r2, #101	@ 0x65
 800e022:	f43f ab72 	beq.w	800d70a <_strtod_l+0x272>
 800e026:	2a45      	cmp	r2, #69	@ 0x45
 800e028:	f43f ab6f 	beq.w	800d70a <_strtod_l+0x272>
 800e02c:	2301      	movs	r3, #1
 800e02e:	f7ff bbaa 	b.w	800d786 <_strtod_l+0x2ee>
 800e032:	bf00      	nop
 800e034:	f3af 8000 	nop.w
 800e038:	ffc00000 	.word	0xffc00000
 800e03c:	41dfffff 	.word	0x41dfffff
 800e040:	94a03595 	.word	0x94a03595
 800e044:	3fcfffff 	.word	0x3fcfffff

0800e048 <_strtod_r>:
 800e048:	4b01      	ldr	r3, [pc, #4]	@ (800e050 <_strtod_r+0x8>)
 800e04a:	f7ff ba25 	b.w	800d498 <_strtod_l>
 800e04e:	bf00      	nop
 800e050:	200001ec 	.word	0x200001ec

0800e054 <_strtol_l.isra.0>:
 800e054:	2b24      	cmp	r3, #36	@ 0x24
 800e056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e05a:	4686      	mov	lr, r0
 800e05c:	4690      	mov	r8, r2
 800e05e:	d801      	bhi.n	800e064 <_strtol_l.isra.0+0x10>
 800e060:	2b01      	cmp	r3, #1
 800e062:	d106      	bne.n	800e072 <_strtol_l.isra.0+0x1e>
 800e064:	f7fd fdbc 	bl	800bbe0 <__errno>
 800e068:	2316      	movs	r3, #22
 800e06a:	6003      	str	r3, [r0, #0]
 800e06c:	2000      	movs	r0, #0
 800e06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e072:	460d      	mov	r5, r1
 800e074:	4833      	ldr	r0, [pc, #204]	@ (800e144 <_strtol_l.isra.0+0xf0>)
 800e076:	462a      	mov	r2, r5
 800e078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e07c:	5d06      	ldrb	r6, [r0, r4]
 800e07e:	f016 0608 	ands.w	r6, r6, #8
 800e082:	d1f8      	bne.n	800e076 <_strtol_l.isra.0+0x22>
 800e084:	2c2d      	cmp	r4, #45	@ 0x2d
 800e086:	d110      	bne.n	800e0aa <_strtol_l.isra.0+0x56>
 800e088:	2601      	movs	r6, #1
 800e08a:	782c      	ldrb	r4, [r5, #0]
 800e08c:	1c95      	adds	r5, r2, #2
 800e08e:	f033 0210 	bics.w	r2, r3, #16
 800e092:	d115      	bne.n	800e0c0 <_strtol_l.isra.0+0x6c>
 800e094:	2c30      	cmp	r4, #48	@ 0x30
 800e096:	d10d      	bne.n	800e0b4 <_strtol_l.isra.0+0x60>
 800e098:	782a      	ldrb	r2, [r5, #0]
 800e09a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e09e:	2a58      	cmp	r2, #88	@ 0x58
 800e0a0:	d108      	bne.n	800e0b4 <_strtol_l.isra.0+0x60>
 800e0a2:	786c      	ldrb	r4, [r5, #1]
 800e0a4:	3502      	adds	r5, #2
 800e0a6:	2310      	movs	r3, #16
 800e0a8:	e00a      	b.n	800e0c0 <_strtol_l.isra.0+0x6c>
 800e0aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800e0ac:	bf04      	itt	eq
 800e0ae:	782c      	ldrbeq	r4, [r5, #0]
 800e0b0:	1c95      	addeq	r5, r2, #2
 800e0b2:	e7ec      	b.n	800e08e <_strtol_l.isra.0+0x3a>
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1f6      	bne.n	800e0a6 <_strtol_l.isra.0+0x52>
 800e0b8:	2c30      	cmp	r4, #48	@ 0x30
 800e0ba:	bf14      	ite	ne
 800e0bc:	230a      	movne	r3, #10
 800e0be:	2308      	moveq	r3, #8
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e0c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e0ca:	fbbc f9f3 	udiv	r9, ip, r3
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e0d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e0d8:	2f09      	cmp	r7, #9
 800e0da:	d80f      	bhi.n	800e0fc <_strtol_l.isra.0+0xa8>
 800e0dc:	463c      	mov	r4, r7
 800e0de:	42a3      	cmp	r3, r4
 800e0e0:	dd1b      	ble.n	800e11a <_strtol_l.isra.0+0xc6>
 800e0e2:	1c57      	adds	r7, r2, #1
 800e0e4:	d007      	beq.n	800e0f6 <_strtol_l.isra.0+0xa2>
 800e0e6:	4581      	cmp	r9, r0
 800e0e8:	d314      	bcc.n	800e114 <_strtol_l.isra.0+0xc0>
 800e0ea:	d101      	bne.n	800e0f0 <_strtol_l.isra.0+0x9c>
 800e0ec:	45a2      	cmp	sl, r4
 800e0ee:	db11      	blt.n	800e114 <_strtol_l.isra.0+0xc0>
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	fb00 4003 	mla	r0, r0, r3, r4
 800e0f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0fa:	e7eb      	b.n	800e0d4 <_strtol_l.isra.0+0x80>
 800e0fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e100:	2f19      	cmp	r7, #25
 800e102:	d801      	bhi.n	800e108 <_strtol_l.isra.0+0xb4>
 800e104:	3c37      	subs	r4, #55	@ 0x37
 800e106:	e7ea      	b.n	800e0de <_strtol_l.isra.0+0x8a>
 800e108:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e10c:	2f19      	cmp	r7, #25
 800e10e:	d804      	bhi.n	800e11a <_strtol_l.isra.0+0xc6>
 800e110:	3c57      	subs	r4, #87	@ 0x57
 800e112:	e7e4      	b.n	800e0de <_strtol_l.isra.0+0x8a>
 800e114:	f04f 32ff 	mov.w	r2, #4294967295
 800e118:	e7ed      	b.n	800e0f6 <_strtol_l.isra.0+0xa2>
 800e11a:	1c53      	adds	r3, r2, #1
 800e11c:	d108      	bne.n	800e130 <_strtol_l.isra.0+0xdc>
 800e11e:	2322      	movs	r3, #34	@ 0x22
 800e120:	4660      	mov	r0, ip
 800e122:	f8ce 3000 	str.w	r3, [lr]
 800e126:	f1b8 0f00 	cmp.w	r8, #0
 800e12a:	d0a0      	beq.n	800e06e <_strtol_l.isra.0+0x1a>
 800e12c:	1e69      	subs	r1, r5, #1
 800e12e:	e006      	b.n	800e13e <_strtol_l.isra.0+0xea>
 800e130:	b106      	cbz	r6, 800e134 <_strtol_l.isra.0+0xe0>
 800e132:	4240      	negs	r0, r0
 800e134:	f1b8 0f00 	cmp.w	r8, #0
 800e138:	d099      	beq.n	800e06e <_strtol_l.isra.0+0x1a>
 800e13a:	2a00      	cmp	r2, #0
 800e13c:	d1f6      	bne.n	800e12c <_strtol_l.isra.0+0xd8>
 800e13e:	f8c8 1000 	str.w	r1, [r8]
 800e142:	e794      	b.n	800e06e <_strtol_l.isra.0+0x1a>
 800e144:	0800f699 	.word	0x0800f699

0800e148 <_strtol_r>:
 800e148:	f7ff bf84 	b.w	800e054 <_strtol_l.isra.0>

0800e14c <__ssputs_r>:
 800e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e150:	461f      	mov	r7, r3
 800e152:	688e      	ldr	r6, [r1, #8]
 800e154:	4682      	mov	sl, r0
 800e156:	42be      	cmp	r6, r7
 800e158:	460c      	mov	r4, r1
 800e15a:	4690      	mov	r8, r2
 800e15c:	680b      	ldr	r3, [r1, #0]
 800e15e:	d82d      	bhi.n	800e1bc <__ssputs_r+0x70>
 800e160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e168:	d026      	beq.n	800e1b8 <__ssputs_r+0x6c>
 800e16a:	6965      	ldr	r5, [r4, #20]
 800e16c:	6909      	ldr	r1, [r1, #16]
 800e16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e172:	eba3 0901 	sub.w	r9, r3, r1
 800e176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e17a:	1c7b      	adds	r3, r7, #1
 800e17c:	444b      	add	r3, r9
 800e17e:	106d      	asrs	r5, r5, #1
 800e180:	429d      	cmp	r5, r3
 800e182:	bf38      	it	cc
 800e184:	461d      	movcc	r5, r3
 800e186:	0553      	lsls	r3, r2, #21
 800e188:	d527      	bpl.n	800e1da <__ssputs_r+0x8e>
 800e18a:	4629      	mov	r1, r5
 800e18c:	f7fe fc36 	bl	800c9fc <_malloc_r>
 800e190:	4606      	mov	r6, r0
 800e192:	b360      	cbz	r0, 800e1ee <__ssputs_r+0xa2>
 800e194:	464a      	mov	r2, r9
 800e196:	6921      	ldr	r1, [r4, #16]
 800e198:	f000 fa14 	bl	800e5c4 <memcpy>
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	6126      	str	r6, [r4, #16]
 800e1aa:	444e      	add	r6, r9
 800e1ac:	6026      	str	r6, [r4, #0]
 800e1ae:	463e      	mov	r6, r7
 800e1b0:	6165      	str	r5, [r4, #20]
 800e1b2:	eba5 0509 	sub.w	r5, r5, r9
 800e1b6:	60a5      	str	r5, [r4, #8]
 800e1b8:	42be      	cmp	r6, r7
 800e1ba:	d900      	bls.n	800e1be <__ssputs_r+0x72>
 800e1bc:	463e      	mov	r6, r7
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4641      	mov	r1, r8
 800e1c2:	6820      	ldr	r0, [r4, #0]
 800e1c4:	f000 f9c2 	bl	800e54c <memmove>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	68a3      	ldr	r3, [r4, #8]
 800e1cc:	1b9b      	subs	r3, r3, r6
 800e1ce:	60a3      	str	r3, [r4, #8]
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	4433      	add	r3, r6
 800e1d4:	6023      	str	r3, [r4, #0]
 800e1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1da:	462a      	mov	r2, r5
 800e1dc:	f000 fd83 	bl	800ece6 <_realloc_r>
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d1e0      	bne.n	800e1a8 <__ssputs_r+0x5c>
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	6921      	ldr	r1, [r4, #16]
 800e1ea:	f7fe fb95 	bl	800c918 <_free_r>
 800e1ee:	230c      	movs	r3, #12
 800e1f0:	f8ca 3000 	str.w	r3, [sl]
 800e1f4:	89a3      	ldrh	r3, [r4, #12]
 800e1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1fe:	81a3      	strh	r3, [r4, #12]
 800e200:	e7e9      	b.n	800e1d6 <__ssputs_r+0x8a>
	...

0800e204 <_svfiprintf_r>:
 800e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	4698      	mov	r8, r3
 800e20a:	898b      	ldrh	r3, [r1, #12]
 800e20c:	4607      	mov	r7, r0
 800e20e:	061b      	lsls	r3, r3, #24
 800e210:	460d      	mov	r5, r1
 800e212:	4614      	mov	r4, r2
 800e214:	b09d      	sub	sp, #116	@ 0x74
 800e216:	d510      	bpl.n	800e23a <_svfiprintf_r+0x36>
 800e218:	690b      	ldr	r3, [r1, #16]
 800e21a:	b973      	cbnz	r3, 800e23a <_svfiprintf_r+0x36>
 800e21c:	2140      	movs	r1, #64	@ 0x40
 800e21e:	f7fe fbed 	bl	800c9fc <_malloc_r>
 800e222:	6028      	str	r0, [r5, #0]
 800e224:	6128      	str	r0, [r5, #16]
 800e226:	b930      	cbnz	r0, 800e236 <_svfiprintf_r+0x32>
 800e228:	230c      	movs	r3, #12
 800e22a:	603b      	str	r3, [r7, #0]
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	b01d      	add	sp, #116	@ 0x74
 800e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e236:	2340      	movs	r3, #64	@ 0x40
 800e238:	616b      	str	r3, [r5, #20]
 800e23a:	2300      	movs	r3, #0
 800e23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e23e:	2320      	movs	r3, #32
 800e240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e244:	2330      	movs	r3, #48	@ 0x30
 800e246:	f04f 0901 	mov.w	r9, #1
 800e24a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e24e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e3e8 <_svfiprintf_r+0x1e4>
 800e252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e256:	4623      	mov	r3, r4
 800e258:	469a      	mov	sl, r3
 800e25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e25e:	b10a      	cbz	r2, 800e264 <_svfiprintf_r+0x60>
 800e260:	2a25      	cmp	r2, #37	@ 0x25
 800e262:	d1f9      	bne.n	800e258 <_svfiprintf_r+0x54>
 800e264:	ebba 0b04 	subs.w	fp, sl, r4
 800e268:	d00b      	beq.n	800e282 <_svfiprintf_r+0x7e>
 800e26a:	465b      	mov	r3, fp
 800e26c:	4622      	mov	r2, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	4638      	mov	r0, r7
 800e272:	f7ff ff6b 	bl	800e14c <__ssputs_r>
 800e276:	3001      	adds	r0, #1
 800e278:	f000 80a7 	beq.w	800e3ca <_svfiprintf_r+0x1c6>
 800e27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e27e:	445a      	add	r2, fp
 800e280:	9209      	str	r2, [sp, #36]	@ 0x24
 800e282:	f89a 3000 	ldrb.w	r3, [sl]
 800e286:	2b00      	cmp	r3, #0
 800e288:	f000 809f 	beq.w	800e3ca <_svfiprintf_r+0x1c6>
 800e28c:	2300      	movs	r3, #0
 800e28e:	f04f 32ff 	mov.w	r2, #4294967295
 800e292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e296:	f10a 0a01 	add.w	sl, sl, #1
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	9307      	str	r3, [sp, #28]
 800e29e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2a4:	4654      	mov	r4, sl
 800e2a6:	2205      	movs	r2, #5
 800e2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ac:	484e      	ldr	r0, [pc, #312]	@ (800e3e8 <_svfiprintf_r+0x1e4>)
 800e2ae:	f7fd fcc4 	bl	800bc3a <memchr>
 800e2b2:	9a04      	ldr	r2, [sp, #16]
 800e2b4:	b9d8      	cbnz	r0, 800e2ee <_svfiprintf_r+0xea>
 800e2b6:	06d0      	lsls	r0, r2, #27
 800e2b8:	bf44      	itt	mi
 800e2ba:	2320      	movmi	r3, #32
 800e2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2c0:	0711      	lsls	r1, r2, #28
 800e2c2:	bf44      	itt	mi
 800e2c4:	232b      	movmi	r3, #43	@ 0x2b
 800e2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2d0:	d015      	beq.n	800e2fe <_svfiprintf_r+0xfa>
 800e2d2:	4654      	mov	r4, sl
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	f04f 0c0a 	mov.w	ip, #10
 800e2da:	9a07      	ldr	r2, [sp, #28]
 800e2dc:	4621      	mov	r1, r4
 800e2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2e2:	3b30      	subs	r3, #48	@ 0x30
 800e2e4:	2b09      	cmp	r3, #9
 800e2e6:	d94b      	bls.n	800e380 <_svfiprintf_r+0x17c>
 800e2e8:	b1b0      	cbz	r0, 800e318 <_svfiprintf_r+0x114>
 800e2ea:	9207      	str	r2, [sp, #28]
 800e2ec:	e014      	b.n	800e318 <_svfiprintf_r+0x114>
 800e2ee:	eba0 0308 	sub.w	r3, r0, r8
 800e2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	46a2      	mov	sl, r4
 800e2fa:	9304      	str	r3, [sp, #16]
 800e2fc:	e7d2      	b.n	800e2a4 <_svfiprintf_r+0xa0>
 800e2fe:	9b03      	ldr	r3, [sp, #12]
 800e300:	1d19      	adds	r1, r3, #4
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	9103      	str	r1, [sp, #12]
 800e306:	2b00      	cmp	r3, #0
 800e308:	bfbb      	ittet	lt
 800e30a:	425b      	neglt	r3, r3
 800e30c:	f042 0202 	orrlt.w	r2, r2, #2
 800e310:	9307      	strge	r3, [sp, #28]
 800e312:	9307      	strlt	r3, [sp, #28]
 800e314:	bfb8      	it	lt
 800e316:	9204      	strlt	r2, [sp, #16]
 800e318:	7823      	ldrb	r3, [r4, #0]
 800e31a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e31c:	d10a      	bne.n	800e334 <_svfiprintf_r+0x130>
 800e31e:	7863      	ldrb	r3, [r4, #1]
 800e320:	2b2a      	cmp	r3, #42	@ 0x2a
 800e322:	d132      	bne.n	800e38a <_svfiprintf_r+0x186>
 800e324:	9b03      	ldr	r3, [sp, #12]
 800e326:	3402      	adds	r4, #2
 800e328:	1d1a      	adds	r2, r3, #4
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	9203      	str	r2, [sp, #12]
 800e32e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e332:	9305      	str	r3, [sp, #20]
 800e334:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e3ec <_svfiprintf_r+0x1e8>
 800e338:	2203      	movs	r2, #3
 800e33a:	4650      	mov	r0, sl
 800e33c:	7821      	ldrb	r1, [r4, #0]
 800e33e:	f7fd fc7c 	bl	800bc3a <memchr>
 800e342:	b138      	cbz	r0, 800e354 <_svfiprintf_r+0x150>
 800e344:	2240      	movs	r2, #64	@ 0x40
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	eba0 000a 	sub.w	r0, r0, sl
 800e34c:	4082      	lsls	r2, r0
 800e34e:	4313      	orrs	r3, r2
 800e350:	3401      	adds	r4, #1
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e358:	2206      	movs	r2, #6
 800e35a:	4825      	ldr	r0, [pc, #148]	@ (800e3f0 <_svfiprintf_r+0x1ec>)
 800e35c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e360:	f7fd fc6b 	bl	800bc3a <memchr>
 800e364:	2800      	cmp	r0, #0
 800e366:	d036      	beq.n	800e3d6 <_svfiprintf_r+0x1d2>
 800e368:	4b22      	ldr	r3, [pc, #136]	@ (800e3f4 <_svfiprintf_r+0x1f0>)
 800e36a:	bb1b      	cbnz	r3, 800e3b4 <_svfiprintf_r+0x1b0>
 800e36c:	9b03      	ldr	r3, [sp, #12]
 800e36e:	3307      	adds	r3, #7
 800e370:	f023 0307 	bic.w	r3, r3, #7
 800e374:	3308      	adds	r3, #8
 800e376:	9303      	str	r3, [sp, #12]
 800e378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37a:	4433      	add	r3, r6
 800e37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e37e:	e76a      	b.n	800e256 <_svfiprintf_r+0x52>
 800e380:	460c      	mov	r4, r1
 800e382:	2001      	movs	r0, #1
 800e384:	fb0c 3202 	mla	r2, ip, r2, r3
 800e388:	e7a8      	b.n	800e2dc <_svfiprintf_r+0xd8>
 800e38a:	2300      	movs	r3, #0
 800e38c:	f04f 0c0a 	mov.w	ip, #10
 800e390:	4619      	mov	r1, r3
 800e392:	3401      	adds	r4, #1
 800e394:	9305      	str	r3, [sp, #20]
 800e396:	4620      	mov	r0, r4
 800e398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e39c:	3a30      	subs	r2, #48	@ 0x30
 800e39e:	2a09      	cmp	r2, #9
 800e3a0:	d903      	bls.n	800e3aa <_svfiprintf_r+0x1a6>
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0c6      	beq.n	800e334 <_svfiprintf_r+0x130>
 800e3a6:	9105      	str	r1, [sp, #20]
 800e3a8:	e7c4      	b.n	800e334 <_svfiprintf_r+0x130>
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3b2:	e7f0      	b.n	800e396 <_svfiprintf_r+0x192>
 800e3b4:	ab03      	add	r3, sp, #12
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	462a      	mov	r2, r5
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f8 <_svfiprintf_r+0x1f4>)
 800e3be:	a904      	add	r1, sp, #16
 800e3c0:	f7fc fcce 	bl	800ad60 <_printf_float>
 800e3c4:	1c42      	adds	r2, r0, #1
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	d1d6      	bne.n	800e378 <_svfiprintf_r+0x174>
 800e3ca:	89ab      	ldrh	r3, [r5, #12]
 800e3cc:	065b      	lsls	r3, r3, #25
 800e3ce:	f53f af2d 	bmi.w	800e22c <_svfiprintf_r+0x28>
 800e3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3d4:	e72c      	b.n	800e230 <_svfiprintf_r+0x2c>
 800e3d6:	ab03      	add	r3, sp, #12
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	462a      	mov	r2, r5
 800e3dc:	4638      	mov	r0, r7
 800e3de:	4b06      	ldr	r3, [pc, #24]	@ (800e3f8 <_svfiprintf_r+0x1f4>)
 800e3e0:	a904      	add	r1, sp, #16
 800e3e2:	f7fc ff5b 	bl	800b29c <_printf_i>
 800e3e6:	e7ed      	b.n	800e3c4 <_svfiprintf_r+0x1c0>
 800e3e8:	0800f497 	.word	0x0800f497
 800e3ec:	0800f49d 	.word	0x0800f49d
 800e3f0:	0800f4a1 	.word	0x0800f4a1
 800e3f4:	0800ad61 	.word	0x0800ad61
 800e3f8:	0800e14d 	.word	0x0800e14d

0800e3fc <__sflush_r>:
 800e3fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	0716      	lsls	r6, r2, #28
 800e404:	4605      	mov	r5, r0
 800e406:	460c      	mov	r4, r1
 800e408:	d454      	bmi.n	800e4b4 <__sflush_r+0xb8>
 800e40a:	684b      	ldr	r3, [r1, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dc02      	bgt.n	800e416 <__sflush_r+0x1a>
 800e410:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e412:	2b00      	cmp	r3, #0
 800e414:	dd48      	ble.n	800e4a8 <__sflush_r+0xac>
 800e416:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e418:	2e00      	cmp	r6, #0
 800e41a:	d045      	beq.n	800e4a8 <__sflush_r+0xac>
 800e41c:	2300      	movs	r3, #0
 800e41e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e422:	682f      	ldr	r7, [r5, #0]
 800e424:	6a21      	ldr	r1, [r4, #32]
 800e426:	602b      	str	r3, [r5, #0]
 800e428:	d030      	beq.n	800e48c <__sflush_r+0x90>
 800e42a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	0759      	lsls	r1, r3, #29
 800e430:	d505      	bpl.n	800e43e <__sflush_r+0x42>
 800e432:	6863      	ldr	r3, [r4, #4]
 800e434:	1ad2      	subs	r2, r2, r3
 800e436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e438:	b10b      	cbz	r3, 800e43e <__sflush_r+0x42>
 800e43a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e43c:	1ad2      	subs	r2, r2, r3
 800e43e:	2300      	movs	r3, #0
 800e440:	4628      	mov	r0, r5
 800e442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e444:	6a21      	ldr	r1, [r4, #32]
 800e446:	47b0      	blx	r6
 800e448:	1c43      	adds	r3, r0, #1
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	d106      	bne.n	800e45c <__sflush_r+0x60>
 800e44e:	6829      	ldr	r1, [r5, #0]
 800e450:	291d      	cmp	r1, #29
 800e452:	d82b      	bhi.n	800e4ac <__sflush_r+0xb0>
 800e454:	4a28      	ldr	r2, [pc, #160]	@ (800e4f8 <__sflush_r+0xfc>)
 800e456:	40ca      	lsrs	r2, r1
 800e458:	07d6      	lsls	r6, r2, #31
 800e45a:	d527      	bpl.n	800e4ac <__sflush_r+0xb0>
 800e45c:	2200      	movs	r2, #0
 800e45e:	6062      	str	r2, [r4, #4]
 800e460:	6922      	ldr	r2, [r4, #16]
 800e462:	04d9      	lsls	r1, r3, #19
 800e464:	6022      	str	r2, [r4, #0]
 800e466:	d504      	bpl.n	800e472 <__sflush_r+0x76>
 800e468:	1c42      	adds	r2, r0, #1
 800e46a:	d101      	bne.n	800e470 <__sflush_r+0x74>
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	b903      	cbnz	r3, 800e472 <__sflush_r+0x76>
 800e470:	6560      	str	r0, [r4, #84]	@ 0x54
 800e472:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e474:	602f      	str	r7, [r5, #0]
 800e476:	b1b9      	cbz	r1, 800e4a8 <__sflush_r+0xac>
 800e478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e47c:	4299      	cmp	r1, r3
 800e47e:	d002      	beq.n	800e486 <__sflush_r+0x8a>
 800e480:	4628      	mov	r0, r5
 800e482:	f7fe fa49 	bl	800c918 <_free_r>
 800e486:	2300      	movs	r3, #0
 800e488:	6363      	str	r3, [r4, #52]	@ 0x34
 800e48a:	e00d      	b.n	800e4a8 <__sflush_r+0xac>
 800e48c:	2301      	movs	r3, #1
 800e48e:	4628      	mov	r0, r5
 800e490:	47b0      	blx	r6
 800e492:	4602      	mov	r2, r0
 800e494:	1c50      	adds	r0, r2, #1
 800e496:	d1c9      	bne.n	800e42c <__sflush_r+0x30>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0c6      	beq.n	800e42c <__sflush_r+0x30>
 800e49e:	2b1d      	cmp	r3, #29
 800e4a0:	d001      	beq.n	800e4a6 <__sflush_r+0xaa>
 800e4a2:	2b16      	cmp	r3, #22
 800e4a4:	d11d      	bne.n	800e4e2 <__sflush_r+0xe6>
 800e4a6:	602f      	str	r7, [r5, #0]
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	e021      	b.n	800e4f0 <__sflush_r+0xf4>
 800e4ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4b0:	b21b      	sxth	r3, r3
 800e4b2:	e01a      	b.n	800e4ea <__sflush_r+0xee>
 800e4b4:	690f      	ldr	r7, [r1, #16]
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	d0f6      	beq.n	800e4a8 <__sflush_r+0xac>
 800e4ba:	0793      	lsls	r3, r2, #30
 800e4bc:	bf18      	it	ne
 800e4be:	2300      	movne	r3, #0
 800e4c0:	680e      	ldr	r6, [r1, #0]
 800e4c2:	bf08      	it	eq
 800e4c4:	694b      	ldreq	r3, [r1, #20]
 800e4c6:	1bf6      	subs	r6, r6, r7
 800e4c8:	600f      	str	r7, [r1, #0]
 800e4ca:	608b      	str	r3, [r1, #8]
 800e4cc:	2e00      	cmp	r6, #0
 800e4ce:	ddeb      	ble.n	800e4a8 <__sflush_r+0xac>
 800e4d0:	4633      	mov	r3, r6
 800e4d2:	463a      	mov	r2, r7
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	6a21      	ldr	r1, [r4, #32]
 800e4d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e4dc:	47e0      	blx	ip
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	dc07      	bgt.n	800e4f2 <__sflush_r+0xf6>
 800e4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ee:	81a3      	strh	r3, [r4, #12]
 800e4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4f2:	4407      	add	r7, r0
 800e4f4:	1a36      	subs	r6, r6, r0
 800e4f6:	e7e9      	b.n	800e4cc <__sflush_r+0xd0>
 800e4f8:	20400001 	.word	0x20400001

0800e4fc <_fflush_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	690b      	ldr	r3, [r1, #16]
 800e500:	4605      	mov	r5, r0
 800e502:	460c      	mov	r4, r1
 800e504:	b913      	cbnz	r3, 800e50c <_fflush_r+0x10>
 800e506:	2500      	movs	r5, #0
 800e508:	4628      	mov	r0, r5
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	b118      	cbz	r0, 800e516 <_fflush_r+0x1a>
 800e50e:	6a03      	ldr	r3, [r0, #32]
 800e510:	b90b      	cbnz	r3, 800e516 <_fflush_r+0x1a>
 800e512:	f7fd fa77 	bl	800ba04 <__sinit>
 800e516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0f3      	beq.n	800e506 <_fflush_r+0xa>
 800e51e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e520:	07d0      	lsls	r0, r2, #31
 800e522:	d404      	bmi.n	800e52e <_fflush_r+0x32>
 800e524:	0599      	lsls	r1, r3, #22
 800e526:	d402      	bmi.n	800e52e <_fflush_r+0x32>
 800e528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e52a:	f7fd fb84 	bl	800bc36 <__retarget_lock_acquire_recursive>
 800e52e:	4628      	mov	r0, r5
 800e530:	4621      	mov	r1, r4
 800e532:	f7ff ff63 	bl	800e3fc <__sflush_r>
 800e536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e538:	4605      	mov	r5, r0
 800e53a:	07da      	lsls	r2, r3, #31
 800e53c:	d4e4      	bmi.n	800e508 <_fflush_r+0xc>
 800e53e:	89a3      	ldrh	r3, [r4, #12]
 800e540:	059b      	lsls	r3, r3, #22
 800e542:	d4e1      	bmi.n	800e508 <_fflush_r+0xc>
 800e544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e546:	f7fd fb77 	bl	800bc38 <__retarget_lock_release_recursive>
 800e54a:	e7dd      	b.n	800e508 <_fflush_r+0xc>

0800e54c <memmove>:
 800e54c:	4288      	cmp	r0, r1
 800e54e:	b510      	push	{r4, lr}
 800e550:	eb01 0402 	add.w	r4, r1, r2
 800e554:	d902      	bls.n	800e55c <memmove+0x10>
 800e556:	4284      	cmp	r4, r0
 800e558:	4623      	mov	r3, r4
 800e55a:	d807      	bhi.n	800e56c <memmove+0x20>
 800e55c:	1e43      	subs	r3, r0, #1
 800e55e:	42a1      	cmp	r1, r4
 800e560:	d008      	beq.n	800e574 <memmove+0x28>
 800e562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e56a:	e7f8      	b.n	800e55e <memmove+0x12>
 800e56c:	4601      	mov	r1, r0
 800e56e:	4402      	add	r2, r0
 800e570:	428a      	cmp	r2, r1
 800e572:	d100      	bne.n	800e576 <memmove+0x2a>
 800e574:	bd10      	pop	{r4, pc}
 800e576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e57e:	e7f7      	b.n	800e570 <memmove+0x24>

0800e580 <strncmp>:
 800e580:	b510      	push	{r4, lr}
 800e582:	b16a      	cbz	r2, 800e5a0 <strncmp+0x20>
 800e584:	3901      	subs	r1, #1
 800e586:	1884      	adds	r4, r0, r2
 800e588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e58c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e590:	429a      	cmp	r2, r3
 800e592:	d103      	bne.n	800e59c <strncmp+0x1c>
 800e594:	42a0      	cmp	r0, r4
 800e596:	d001      	beq.n	800e59c <strncmp+0x1c>
 800e598:	2a00      	cmp	r2, #0
 800e59a:	d1f5      	bne.n	800e588 <strncmp+0x8>
 800e59c:	1ad0      	subs	r0, r2, r3
 800e59e:	bd10      	pop	{r4, pc}
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	e7fc      	b.n	800e59e <strncmp+0x1e>

0800e5a4 <_sbrk_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	4d05      	ldr	r5, [pc, #20]	@ (800e5c0 <_sbrk_r+0x1c>)
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	4608      	mov	r0, r1
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	f7f3 fd3e 	bl	8002030 <_sbrk>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <_sbrk_r+0x1a>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	b103      	cbz	r3, 800e5be <_sbrk_r+0x1a>
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	20001864 	.word	0x20001864

0800e5c4 <memcpy>:
 800e5c4:	440a      	add	r2, r1
 800e5c6:	4291      	cmp	r1, r2
 800e5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5cc:	d100      	bne.n	800e5d0 <memcpy+0xc>
 800e5ce:	4770      	bx	lr
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5d6:	4291      	cmp	r1, r2
 800e5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5dc:	d1f9      	bne.n	800e5d2 <memcpy+0xe>
 800e5de:	bd10      	pop	{r4, pc}

0800e5e0 <nan>:
 800e5e0:	2000      	movs	r0, #0
 800e5e2:	4901      	ldr	r1, [pc, #4]	@ (800e5e8 <nan+0x8>)
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	7ff80000 	.word	0x7ff80000

0800e5ec <__assert_func>:
 800e5ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b09      	ldr	r3, [pc, #36]	@ (800e618 <__assert_func+0x2c>)
 800e5f4:	4605      	mov	r5, r0
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68d8      	ldr	r0, [r3, #12]
 800e5fa:	b14c      	cbz	r4, 800e610 <__assert_func+0x24>
 800e5fc:	4b07      	ldr	r3, [pc, #28]	@ (800e61c <__assert_func+0x30>)
 800e5fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e602:	9100      	str	r1, [sp, #0]
 800e604:	462b      	mov	r3, r5
 800e606:	4906      	ldr	r1, [pc, #24]	@ (800e620 <__assert_func+0x34>)
 800e608:	f000 fba8 	bl	800ed5c <fiprintf>
 800e60c:	f000 fbb8 	bl	800ed80 <abort>
 800e610:	4b04      	ldr	r3, [pc, #16]	@ (800e624 <__assert_func+0x38>)
 800e612:	461c      	mov	r4, r3
 800e614:	e7f3      	b.n	800e5fe <__assert_func+0x12>
 800e616:	bf00      	nop
 800e618:	2000019c 	.word	0x2000019c
 800e61c:	0800f4b0 	.word	0x0800f4b0
 800e620:	0800f4bd 	.word	0x0800f4bd
 800e624:	0800f4eb 	.word	0x0800f4eb

0800e628 <_calloc_r>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	fba1 5402 	umull	r5, r4, r1, r2
 800e62e:	b934      	cbnz	r4, 800e63e <_calloc_r+0x16>
 800e630:	4629      	mov	r1, r5
 800e632:	f7fe f9e3 	bl	800c9fc <_malloc_r>
 800e636:	4606      	mov	r6, r0
 800e638:	b928      	cbnz	r0, 800e646 <_calloc_r+0x1e>
 800e63a:	4630      	mov	r0, r6
 800e63c:	bd70      	pop	{r4, r5, r6, pc}
 800e63e:	220c      	movs	r2, #12
 800e640:	2600      	movs	r6, #0
 800e642:	6002      	str	r2, [r0, #0]
 800e644:	e7f9      	b.n	800e63a <_calloc_r+0x12>
 800e646:	462a      	mov	r2, r5
 800e648:	4621      	mov	r1, r4
 800e64a:	f7fd fa76 	bl	800bb3a <memset>
 800e64e:	e7f4      	b.n	800e63a <_calloc_r+0x12>

0800e650 <rshift>:
 800e650:	6903      	ldr	r3, [r0, #16]
 800e652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e656:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e65a:	f100 0414 	add.w	r4, r0, #20
 800e65e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e662:	dd46      	ble.n	800e6f2 <rshift+0xa2>
 800e664:	f011 011f 	ands.w	r1, r1, #31
 800e668:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e66c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e670:	d10c      	bne.n	800e68c <rshift+0x3c>
 800e672:	4629      	mov	r1, r5
 800e674:	f100 0710 	add.w	r7, r0, #16
 800e678:	42b1      	cmp	r1, r6
 800e67a:	d335      	bcc.n	800e6e8 <rshift+0x98>
 800e67c:	1a9b      	subs	r3, r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	1eea      	subs	r2, r5, #3
 800e682:	4296      	cmp	r6, r2
 800e684:	bf38      	it	cc
 800e686:	2300      	movcc	r3, #0
 800e688:	4423      	add	r3, r4
 800e68a:	e015      	b.n	800e6b8 <rshift+0x68>
 800e68c:	46a1      	mov	r9, r4
 800e68e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e692:	f1c1 0820 	rsb	r8, r1, #32
 800e696:	40cf      	lsrs	r7, r1
 800e698:	f105 0e04 	add.w	lr, r5, #4
 800e69c:	4576      	cmp	r6, lr
 800e69e:	46f4      	mov	ip, lr
 800e6a0:	d816      	bhi.n	800e6d0 <rshift+0x80>
 800e6a2:	1a9a      	subs	r2, r3, r2
 800e6a4:	0092      	lsls	r2, r2, #2
 800e6a6:	3a04      	subs	r2, #4
 800e6a8:	3501      	adds	r5, #1
 800e6aa:	42ae      	cmp	r6, r5
 800e6ac:	bf38      	it	cc
 800e6ae:	2200      	movcc	r2, #0
 800e6b0:	18a3      	adds	r3, r4, r2
 800e6b2:	50a7      	str	r7, [r4, r2]
 800e6b4:	b107      	cbz	r7, 800e6b8 <rshift+0x68>
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	42a3      	cmp	r3, r4
 800e6ba:	eba3 0204 	sub.w	r2, r3, r4
 800e6be:	bf08      	it	eq
 800e6c0:	2300      	moveq	r3, #0
 800e6c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6c6:	6102      	str	r2, [r0, #16]
 800e6c8:	bf08      	it	eq
 800e6ca:	6143      	streq	r3, [r0, #20]
 800e6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d0:	f8dc c000 	ldr.w	ip, [ip]
 800e6d4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6d8:	ea4c 0707 	orr.w	r7, ip, r7
 800e6dc:	f849 7b04 	str.w	r7, [r9], #4
 800e6e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6e4:	40cf      	lsrs	r7, r1
 800e6e6:	e7d9      	b.n	800e69c <rshift+0x4c>
 800e6e8:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6ec:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6f0:	e7c2      	b.n	800e678 <rshift+0x28>
 800e6f2:	4623      	mov	r3, r4
 800e6f4:	e7e0      	b.n	800e6b8 <rshift+0x68>

0800e6f6 <__hexdig_fun>:
 800e6f6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6fa:	2b09      	cmp	r3, #9
 800e6fc:	d802      	bhi.n	800e704 <__hexdig_fun+0xe>
 800e6fe:	3820      	subs	r0, #32
 800e700:	b2c0      	uxtb	r0, r0
 800e702:	4770      	bx	lr
 800e704:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e708:	2b05      	cmp	r3, #5
 800e70a:	d801      	bhi.n	800e710 <__hexdig_fun+0x1a>
 800e70c:	3847      	subs	r0, #71	@ 0x47
 800e70e:	e7f7      	b.n	800e700 <__hexdig_fun+0xa>
 800e710:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e714:	2b05      	cmp	r3, #5
 800e716:	d801      	bhi.n	800e71c <__hexdig_fun+0x26>
 800e718:	3827      	subs	r0, #39	@ 0x27
 800e71a:	e7f1      	b.n	800e700 <__hexdig_fun+0xa>
 800e71c:	2000      	movs	r0, #0
 800e71e:	4770      	bx	lr

0800e720 <__gethex>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	468a      	mov	sl, r1
 800e726:	4690      	mov	r8, r2
 800e728:	b085      	sub	sp, #20
 800e72a:	9302      	str	r3, [sp, #8]
 800e72c:	680b      	ldr	r3, [r1, #0]
 800e72e:	9001      	str	r0, [sp, #4]
 800e730:	1c9c      	adds	r4, r3, #2
 800e732:	46a1      	mov	r9, r4
 800e734:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e738:	2830      	cmp	r0, #48	@ 0x30
 800e73a:	d0fa      	beq.n	800e732 <__gethex+0x12>
 800e73c:	eba9 0303 	sub.w	r3, r9, r3
 800e740:	f1a3 0b02 	sub.w	fp, r3, #2
 800e744:	f7ff ffd7 	bl	800e6f6 <__hexdig_fun>
 800e748:	4605      	mov	r5, r0
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d168      	bne.n	800e820 <__gethex+0x100>
 800e74e:	2201      	movs	r2, #1
 800e750:	4648      	mov	r0, r9
 800e752:	499f      	ldr	r1, [pc, #636]	@ (800e9d0 <__gethex+0x2b0>)
 800e754:	f7ff ff14 	bl	800e580 <strncmp>
 800e758:	4607      	mov	r7, r0
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d167      	bne.n	800e82e <__gethex+0x10e>
 800e75e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e762:	4626      	mov	r6, r4
 800e764:	f7ff ffc7 	bl	800e6f6 <__hexdig_fun>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d062      	beq.n	800e832 <__gethex+0x112>
 800e76c:	4623      	mov	r3, r4
 800e76e:	7818      	ldrb	r0, [r3, #0]
 800e770:	4699      	mov	r9, r3
 800e772:	2830      	cmp	r0, #48	@ 0x30
 800e774:	f103 0301 	add.w	r3, r3, #1
 800e778:	d0f9      	beq.n	800e76e <__gethex+0x4e>
 800e77a:	f7ff ffbc 	bl	800e6f6 <__hexdig_fun>
 800e77e:	fab0 f580 	clz	r5, r0
 800e782:	f04f 0b01 	mov.w	fp, #1
 800e786:	096d      	lsrs	r5, r5, #5
 800e788:	464a      	mov	r2, r9
 800e78a:	4616      	mov	r6, r2
 800e78c:	7830      	ldrb	r0, [r6, #0]
 800e78e:	3201      	adds	r2, #1
 800e790:	f7ff ffb1 	bl	800e6f6 <__hexdig_fun>
 800e794:	2800      	cmp	r0, #0
 800e796:	d1f8      	bne.n	800e78a <__gethex+0x6a>
 800e798:	2201      	movs	r2, #1
 800e79a:	4630      	mov	r0, r6
 800e79c:	498c      	ldr	r1, [pc, #560]	@ (800e9d0 <__gethex+0x2b0>)
 800e79e:	f7ff feef 	bl	800e580 <strncmp>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d13f      	bne.n	800e826 <__gethex+0x106>
 800e7a6:	b944      	cbnz	r4, 800e7ba <__gethex+0x9a>
 800e7a8:	1c74      	adds	r4, r6, #1
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	4616      	mov	r6, r2
 800e7ae:	7830      	ldrb	r0, [r6, #0]
 800e7b0:	3201      	adds	r2, #1
 800e7b2:	f7ff ffa0 	bl	800e6f6 <__hexdig_fun>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d1f8      	bne.n	800e7ac <__gethex+0x8c>
 800e7ba:	1ba4      	subs	r4, r4, r6
 800e7bc:	00a7      	lsls	r7, r4, #2
 800e7be:	7833      	ldrb	r3, [r6, #0]
 800e7c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e7c4:	2b50      	cmp	r3, #80	@ 0x50
 800e7c6:	d13e      	bne.n	800e846 <__gethex+0x126>
 800e7c8:	7873      	ldrb	r3, [r6, #1]
 800e7ca:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7cc:	d033      	beq.n	800e836 <__gethex+0x116>
 800e7ce:	2b2d      	cmp	r3, #45	@ 0x2d
 800e7d0:	d034      	beq.n	800e83c <__gethex+0x11c>
 800e7d2:	2400      	movs	r4, #0
 800e7d4:	1c71      	adds	r1, r6, #1
 800e7d6:	7808      	ldrb	r0, [r1, #0]
 800e7d8:	f7ff ff8d 	bl	800e6f6 <__hexdig_fun>
 800e7dc:	1e43      	subs	r3, r0, #1
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b18      	cmp	r3, #24
 800e7e2:	d830      	bhi.n	800e846 <__gethex+0x126>
 800e7e4:	f1a0 0210 	sub.w	r2, r0, #16
 800e7e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7ec:	f7ff ff83 	bl	800e6f6 <__hexdig_fun>
 800e7f0:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7f4:	fa5f fc8c 	uxtb.w	ip, ip
 800e7f8:	f1bc 0f18 	cmp.w	ip, #24
 800e7fc:	f04f 030a 	mov.w	r3, #10
 800e800:	d91e      	bls.n	800e840 <__gethex+0x120>
 800e802:	b104      	cbz	r4, 800e806 <__gethex+0xe6>
 800e804:	4252      	negs	r2, r2
 800e806:	4417      	add	r7, r2
 800e808:	f8ca 1000 	str.w	r1, [sl]
 800e80c:	b1ed      	cbz	r5, 800e84a <__gethex+0x12a>
 800e80e:	f1bb 0f00 	cmp.w	fp, #0
 800e812:	bf0c      	ite	eq
 800e814:	2506      	moveq	r5, #6
 800e816:	2500      	movne	r5, #0
 800e818:	4628      	mov	r0, r5
 800e81a:	b005      	add	sp, #20
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e820:	2500      	movs	r5, #0
 800e822:	462c      	mov	r4, r5
 800e824:	e7b0      	b.n	800e788 <__gethex+0x68>
 800e826:	2c00      	cmp	r4, #0
 800e828:	d1c7      	bne.n	800e7ba <__gethex+0x9a>
 800e82a:	4627      	mov	r7, r4
 800e82c:	e7c7      	b.n	800e7be <__gethex+0x9e>
 800e82e:	464e      	mov	r6, r9
 800e830:	462f      	mov	r7, r5
 800e832:	2501      	movs	r5, #1
 800e834:	e7c3      	b.n	800e7be <__gethex+0x9e>
 800e836:	2400      	movs	r4, #0
 800e838:	1cb1      	adds	r1, r6, #2
 800e83a:	e7cc      	b.n	800e7d6 <__gethex+0xb6>
 800e83c:	2401      	movs	r4, #1
 800e83e:	e7fb      	b.n	800e838 <__gethex+0x118>
 800e840:	fb03 0002 	mla	r0, r3, r2, r0
 800e844:	e7ce      	b.n	800e7e4 <__gethex+0xc4>
 800e846:	4631      	mov	r1, r6
 800e848:	e7de      	b.n	800e808 <__gethex+0xe8>
 800e84a:	4629      	mov	r1, r5
 800e84c:	eba6 0309 	sub.w	r3, r6, r9
 800e850:	3b01      	subs	r3, #1
 800e852:	2b07      	cmp	r3, #7
 800e854:	dc0a      	bgt.n	800e86c <__gethex+0x14c>
 800e856:	9801      	ldr	r0, [sp, #4]
 800e858:	f7fe f95c 	bl	800cb14 <_Balloc>
 800e85c:	4604      	mov	r4, r0
 800e85e:	b940      	cbnz	r0, 800e872 <__gethex+0x152>
 800e860:	4602      	mov	r2, r0
 800e862:	21e4      	movs	r1, #228	@ 0xe4
 800e864:	4b5b      	ldr	r3, [pc, #364]	@ (800e9d4 <__gethex+0x2b4>)
 800e866:	485c      	ldr	r0, [pc, #368]	@ (800e9d8 <__gethex+0x2b8>)
 800e868:	f7ff fec0 	bl	800e5ec <__assert_func>
 800e86c:	3101      	adds	r1, #1
 800e86e:	105b      	asrs	r3, r3, #1
 800e870:	e7ef      	b.n	800e852 <__gethex+0x132>
 800e872:	2300      	movs	r3, #0
 800e874:	f100 0a14 	add.w	sl, r0, #20
 800e878:	4655      	mov	r5, sl
 800e87a:	469b      	mov	fp, r3
 800e87c:	45b1      	cmp	r9, r6
 800e87e:	d337      	bcc.n	800e8f0 <__gethex+0x1d0>
 800e880:	f845 bb04 	str.w	fp, [r5], #4
 800e884:	eba5 050a 	sub.w	r5, r5, sl
 800e888:	10ad      	asrs	r5, r5, #2
 800e88a:	6125      	str	r5, [r4, #16]
 800e88c:	4658      	mov	r0, fp
 800e88e:	f7fe fa33 	bl	800ccf8 <__hi0bits>
 800e892:	016d      	lsls	r5, r5, #5
 800e894:	f8d8 6000 	ldr.w	r6, [r8]
 800e898:	1a2d      	subs	r5, r5, r0
 800e89a:	42b5      	cmp	r5, r6
 800e89c:	dd54      	ble.n	800e948 <__gethex+0x228>
 800e89e:	1bad      	subs	r5, r5, r6
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f7fe fdb5 	bl	800d412 <__any_on>
 800e8a8:	4681      	mov	r9, r0
 800e8aa:	b178      	cbz	r0, 800e8cc <__gethex+0x1ac>
 800e8ac:	f04f 0901 	mov.w	r9, #1
 800e8b0:	1e6b      	subs	r3, r5, #1
 800e8b2:	1159      	asrs	r1, r3, #5
 800e8b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e8b8:	f003 021f 	and.w	r2, r3, #31
 800e8bc:	fa09 f202 	lsl.w	r2, r9, r2
 800e8c0:	420a      	tst	r2, r1
 800e8c2:	d003      	beq.n	800e8cc <__gethex+0x1ac>
 800e8c4:	454b      	cmp	r3, r9
 800e8c6:	dc36      	bgt.n	800e936 <__gethex+0x216>
 800e8c8:	f04f 0902 	mov.w	r9, #2
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f7ff febe 	bl	800e650 <rshift>
 800e8d4:	442f      	add	r7, r5
 800e8d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8da:	42bb      	cmp	r3, r7
 800e8dc:	da42      	bge.n	800e964 <__gethex+0x244>
 800e8de:	4621      	mov	r1, r4
 800e8e0:	9801      	ldr	r0, [sp, #4]
 800e8e2:	f7fe f957 	bl	800cb94 <_Bfree>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8ea:	25a3      	movs	r5, #163	@ 0xa3
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	e793      	b.n	800e818 <__gethex+0xf8>
 800e8f0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8f4:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8f6:	d012      	beq.n	800e91e <__gethex+0x1fe>
 800e8f8:	2b20      	cmp	r3, #32
 800e8fa:	d104      	bne.n	800e906 <__gethex+0x1e6>
 800e8fc:	f845 bb04 	str.w	fp, [r5], #4
 800e900:	f04f 0b00 	mov.w	fp, #0
 800e904:	465b      	mov	r3, fp
 800e906:	7830      	ldrb	r0, [r6, #0]
 800e908:	9303      	str	r3, [sp, #12]
 800e90a:	f7ff fef4 	bl	800e6f6 <__hexdig_fun>
 800e90e:	9b03      	ldr	r3, [sp, #12]
 800e910:	f000 000f 	and.w	r0, r0, #15
 800e914:	4098      	lsls	r0, r3
 800e916:	ea4b 0b00 	orr.w	fp, fp, r0
 800e91a:	3304      	adds	r3, #4
 800e91c:	e7ae      	b.n	800e87c <__gethex+0x15c>
 800e91e:	45b1      	cmp	r9, r6
 800e920:	d8ea      	bhi.n	800e8f8 <__gethex+0x1d8>
 800e922:	2201      	movs	r2, #1
 800e924:	4630      	mov	r0, r6
 800e926:	492a      	ldr	r1, [pc, #168]	@ (800e9d0 <__gethex+0x2b0>)
 800e928:	9303      	str	r3, [sp, #12]
 800e92a:	f7ff fe29 	bl	800e580 <strncmp>
 800e92e:	9b03      	ldr	r3, [sp, #12]
 800e930:	2800      	cmp	r0, #0
 800e932:	d1e1      	bne.n	800e8f8 <__gethex+0x1d8>
 800e934:	e7a2      	b.n	800e87c <__gethex+0x15c>
 800e936:	4620      	mov	r0, r4
 800e938:	1ea9      	subs	r1, r5, #2
 800e93a:	f7fe fd6a 	bl	800d412 <__any_on>
 800e93e:	2800      	cmp	r0, #0
 800e940:	d0c2      	beq.n	800e8c8 <__gethex+0x1a8>
 800e942:	f04f 0903 	mov.w	r9, #3
 800e946:	e7c1      	b.n	800e8cc <__gethex+0x1ac>
 800e948:	da09      	bge.n	800e95e <__gethex+0x23e>
 800e94a:	1b75      	subs	r5, r6, r5
 800e94c:	4621      	mov	r1, r4
 800e94e:	462a      	mov	r2, r5
 800e950:	9801      	ldr	r0, [sp, #4]
 800e952:	f7fe fb2f 	bl	800cfb4 <__lshift>
 800e956:	4604      	mov	r4, r0
 800e958:	1b7f      	subs	r7, r7, r5
 800e95a:	f100 0a14 	add.w	sl, r0, #20
 800e95e:	f04f 0900 	mov.w	r9, #0
 800e962:	e7b8      	b.n	800e8d6 <__gethex+0x1b6>
 800e964:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e968:	42bd      	cmp	r5, r7
 800e96a:	dd6f      	ble.n	800ea4c <__gethex+0x32c>
 800e96c:	1bed      	subs	r5, r5, r7
 800e96e:	42ae      	cmp	r6, r5
 800e970:	dc34      	bgt.n	800e9dc <__gethex+0x2bc>
 800e972:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e976:	2b02      	cmp	r3, #2
 800e978:	d022      	beq.n	800e9c0 <__gethex+0x2a0>
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	d024      	beq.n	800e9c8 <__gethex+0x2a8>
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d115      	bne.n	800e9ae <__gethex+0x28e>
 800e982:	42ae      	cmp	r6, r5
 800e984:	d113      	bne.n	800e9ae <__gethex+0x28e>
 800e986:	2e01      	cmp	r6, #1
 800e988:	d10b      	bne.n	800e9a2 <__gethex+0x282>
 800e98a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e98e:	9a02      	ldr	r2, [sp, #8]
 800e990:	2562      	movs	r5, #98	@ 0x62
 800e992:	6013      	str	r3, [r2, #0]
 800e994:	2301      	movs	r3, #1
 800e996:	6123      	str	r3, [r4, #16]
 800e998:	f8ca 3000 	str.w	r3, [sl]
 800e99c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e99e:	601c      	str	r4, [r3, #0]
 800e9a0:	e73a      	b.n	800e818 <__gethex+0xf8>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	1e71      	subs	r1, r6, #1
 800e9a6:	f7fe fd34 	bl	800d412 <__any_on>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d1ed      	bne.n	800e98a <__gethex+0x26a>
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	9801      	ldr	r0, [sp, #4]
 800e9b2:	f7fe f8ef 	bl	800cb94 <_Bfree>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9ba:	2550      	movs	r5, #80	@ 0x50
 800e9bc:	6013      	str	r3, [r2, #0]
 800e9be:	e72b      	b.n	800e818 <__gethex+0xf8>
 800e9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1f3      	bne.n	800e9ae <__gethex+0x28e>
 800e9c6:	e7e0      	b.n	800e98a <__gethex+0x26a>
 800e9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1dd      	bne.n	800e98a <__gethex+0x26a>
 800e9ce:	e7ee      	b.n	800e9ae <__gethex+0x28e>
 800e9d0:	0800f495 	.word	0x0800f495
 800e9d4:	0800f42b 	.word	0x0800f42b
 800e9d8:	0800f4ec 	.word	0x0800f4ec
 800e9dc:	1e6f      	subs	r7, r5, #1
 800e9de:	f1b9 0f00 	cmp.w	r9, #0
 800e9e2:	d130      	bne.n	800ea46 <__gethex+0x326>
 800e9e4:	b127      	cbz	r7, 800e9f0 <__gethex+0x2d0>
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f7fe fd12 	bl	800d412 <__any_on>
 800e9ee:	4681      	mov	r9, r0
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	1b76      	subs	r6, r6, r5
 800e9f6:	2502      	movs	r5, #2
 800e9f8:	117a      	asrs	r2, r7, #5
 800e9fa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9fe:	f007 071f 	and.w	r7, r7, #31
 800ea02:	40bb      	lsls	r3, r7
 800ea04:	4213      	tst	r3, r2
 800ea06:	4620      	mov	r0, r4
 800ea08:	bf18      	it	ne
 800ea0a:	f049 0902 	orrne.w	r9, r9, #2
 800ea0e:	f7ff fe1f 	bl	800e650 <rshift>
 800ea12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ea16:	f1b9 0f00 	cmp.w	r9, #0
 800ea1a:	d047      	beq.n	800eaac <__gethex+0x38c>
 800ea1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d015      	beq.n	800ea50 <__gethex+0x330>
 800ea24:	2b03      	cmp	r3, #3
 800ea26:	d017      	beq.n	800ea58 <__gethex+0x338>
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d109      	bne.n	800ea40 <__gethex+0x320>
 800ea2c:	f019 0f02 	tst.w	r9, #2
 800ea30:	d006      	beq.n	800ea40 <__gethex+0x320>
 800ea32:	f8da 3000 	ldr.w	r3, [sl]
 800ea36:	ea49 0903 	orr.w	r9, r9, r3
 800ea3a:	f019 0f01 	tst.w	r9, #1
 800ea3e:	d10e      	bne.n	800ea5e <__gethex+0x33e>
 800ea40:	f045 0510 	orr.w	r5, r5, #16
 800ea44:	e032      	b.n	800eaac <__gethex+0x38c>
 800ea46:	f04f 0901 	mov.w	r9, #1
 800ea4a:	e7d1      	b.n	800e9f0 <__gethex+0x2d0>
 800ea4c:	2501      	movs	r5, #1
 800ea4e:	e7e2      	b.n	800ea16 <__gethex+0x2f6>
 800ea50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea52:	f1c3 0301 	rsb	r3, r3, #1
 800ea56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0f0      	beq.n	800ea40 <__gethex+0x320>
 800ea5e:	f04f 0c00 	mov.w	ip, #0
 800ea62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea66:	f104 0314 	add.w	r3, r4, #20
 800ea6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea72:	4618      	mov	r0, r3
 800ea74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea78:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea7c:	d01b      	beq.n	800eab6 <__gethex+0x396>
 800ea7e:	3201      	adds	r2, #1
 800ea80:	6002      	str	r2, [r0, #0]
 800ea82:	2d02      	cmp	r5, #2
 800ea84:	f104 0314 	add.w	r3, r4, #20
 800ea88:	d13c      	bne.n	800eb04 <__gethex+0x3e4>
 800ea8a:	f8d8 2000 	ldr.w	r2, [r8]
 800ea8e:	3a01      	subs	r2, #1
 800ea90:	42b2      	cmp	r2, r6
 800ea92:	d109      	bne.n	800eaa8 <__gethex+0x388>
 800ea94:	2201      	movs	r2, #1
 800ea96:	1171      	asrs	r1, r6, #5
 800ea98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea9c:	f006 061f 	and.w	r6, r6, #31
 800eaa0:	fa02 f606 	lsl.w	r6, r2, r6
 800eaa4:	421e      	tst	r6, r3
 800eaa6:	d13a      	bne.n	800eb1e <__gethex+0x3fe>
 800eaa8:	f045 0520 	orr.w	r5, r5, #32
 800eaac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaae:	601c      	str	r4, [r3, #0]
 800eab0:	9b02      	ldr	r3, [sp, #8]
 800eab2:	601f      	str	r7, [r3, #0]
 800eab4:	e6b0      	b.n	800e818 <__gethex+0xf8>
 800eab6:	4299      	cmp	r1, r3
 800eab8:	f843 cc04 	str.w	ip, [r3, #-4]
 800eabc:	d8d9      	bhi.n	800ea72 <__gethex+0x352>
 800eabe:	68a3      	ldr	r3, [r4, #8]
 800eac0:	459b      	cmp	fp, r3
 800eac2:	db17      	blt.n	800eaf4 <__gethex+0x3d4>
 800eac4:	6861      	ldr	r1, [r4, #4]
 800eac6:	9801      	ldr	r0, [sp, #4]
 800eac8:	3101      	adds	r1, #1
 800eaca:	f7fe f823 	bl	800cb14 <_Balloc>
 800eace:	4681      	mov	r9, r0
 800ead0:	b918      	cbnz	r0, 800eada <__gethex+0x3ba>
 800ead2:	4602      	mov	r2, r0
 800ead4:	2184      	movs	r1, #132	@ 0x84
 800ead6:	4b19      	ldr	r3, [pc, #100]	@ (800eb3c <__gethex+0x41c>)
 800ead8:	e6c5      	b.n	800e866 <__gethex+0x146>
 800eada:	6922      	ldr	r2, [r4, #16]
 800eadc:	f104 010c 	add.w	r1, r4, #12
 800eae0:	3202      	adds	r2, #2
 800eae2:	0092      	lsls	r2, r2, #2
 800eae4:	300c      	adds	r0, #12
 800eae6:	f7ff fd6d 	bl	800e5c4 <memcpy>
 800eaea:	4621      	mov	r1, r4
 800eaec:	9801      	ldr	r0, [sp, #4]
 800eaee:	f7fe f851 	bl	800cb94 <_Bfree>
 800eaf2:	464c      	mov	r4, r9
 800eaf4:	6923      	ldr	r3, [r4, #16]
 800eaf6:	1c5a      	adds	r2, r3, #1
 800eaf8:	6122      	str	r2, [r4, #16]
 800eafa:	2201      	movs	r2, #1
 800eafc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb00:	615a      	str	r2, [r3, #20]
 800eb02:	e7be      	b.n	800ea82 <__gethex+0x362>
 800eb04:	6922      	ldr	r2, [r4, #16]
 800eb06:	455a      	cmp	r2, fp
 800eb08:	dd0b      	ble.n	800eb22 <__gethex+0x402>
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f7ff fd9f 	bl	800e650 <rshift>
 800eb12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb16:	3701      	adds	r7, #1
 800eb18:	42bb      	cmp	r3, r7
 800eb1a:	f6ff aee0 	blt.w	800e8de <__gethex+0x1be>
 800eb1e:	2501      	movs	r5, #1
 800eb20:	e7c2      	b.n	800eaa8 <__gethex+0x388>
 800eb22:	f016 061f 	ands.w	r6, r6, #31
 800eb26:	d0fa      	beq.n	800eb1e <__gethex+0x3fe>
 800eb28:	4453      	add	r3, sl
 800eb2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb2e:	f7fe f8e3 	bl	800ccf8 <__hi0bits>
 800eb32:	f1c6 0620 	rsb	r6, r6, #32
 800eb36:	42b0      	cmp	r0, r6
 800eb38:	dbe7      	blt.n	800eb0a <__gethex+0x3ea>
 800eb3a:	e7f0      	b.n	800eb1e <__gethex+0x3fe>
 800eb3c:	0800f42b 	.word	0x0800f42b

0800eb40 <L_shift>:
 800eb40:	f1c2 0208 	rsb	r2, r2, #8
 800eb44:	0092      	lsls	r2, r2, #2
 800eb46:	b570      	push	{r4, r5, r6, lr}
 800eb48:	f1c2 0620 	rsb	r6, r2, #32
 800eb4c:	6843      	ldr	r3, [r0, #4]
 800eb4e:	6804      	ldr	r4, [r0, #0]
 800eb50:	fa03 f506 	lsl.w	r5, r3, r6
 800eb54:	432c      	orrs	r4, r5
 800eb56:	40d3      	lsrs	r3, r2
 800eb58:	6004      	str	r4, [r0, #0]
 800eb5a:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb5e:	4288      	cmp	r0, r1
 800eb60:	d3f4      	bcc.n	800eb4c <L_shift+0xc>
 800eb62:	bd70      	pop	{r4, r5, r6, pc}

0800eb64 <__match>:
 800eb64:	b530      	push	{r4, r5, lr}
 800eb66:	6803      	ldr	r3, [r0, #0]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb6e:	b914      	cbnz	r4, 800eb76 <__match+0x12>
 800eb70:	6003      	str	r3, [r0, #0]
 800eb72:	2001      	movs	r0, #1
 800eb74:	bd30      	pop	{r4, r5, pc}
 800eb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb7a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb7e:	2d19      	cmp	r5, #25
 800eb80:	bf98      	it	ls
 800eb82:	3220      	addls	r2, #32
 800eb84:	42a2      	cmp	r2, r4
 800eb86:	d0f0      	beq.n	800eb6a <__match+0x6>
 800eb88:	2000      	movs	r0, #0
 800eb8a:	e7f3      	b.n	800eb74 <__match+0x10>

0800eb8c <__hexnan>:
 800eb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	2500      	movs	r5, #0
 800eb92:	680b      	ldr	r3, [r1, #0]
 800eb94:	4682      	mov	sl, r0
 800eb96:	115e      	asrs	r6, r3, #5
 800eb98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb9c:	f013 031f 	ands.w	r3, r3, #31
 800eba0:	bf18      	it	ne
 800eba2:	3604      	addne	r6, #4
 800eba4:	1f37      	subs	r7, r6, #4
 800eba6:	4690      	mov	r8, r2
 800eba8:	46b9      	mov	r9, r7
 800ebaa:	463c      	mov	r4, r7
 800ebac:	46ab      	mov	fp, r5
 800ebae:	b087      	sub	sp, #28
 800ebb0:	6801      	ldr	r1, [r0, #0]
 800ebb2:	9301      	str	r3, [sp, #4]
 800ebb4:	f846 5c04 	str.w	r5, [r6, #-4]
 800ebb8:	9502      	str	r5, [sp, #8]
 800ebba:	784a      	ldrb	r2, [r1, #1]
 800ebbc:	1c4b      	adds	r3, r1, #1
 800ebbe:	9303      	str	r3, [sp, #12]
 800ebc0:	b342      	cbz	r2, 800ec14 <__hexnan+0x88>
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	9105      	str	r1, [sp, #20]
 800ebc6:	9204      	str	r2, [sp, #16]
 800ebc8:	f7ff fd95 	bl	800e6f6 <__hexdig_fun>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d151      	bne.n	800ec74 <__hexnan+0xe8>
 800ebd0:	9a04      	ldr	r2, [sp, #16]
 800ebd2:	9905      	ldr	r1, [sp, #20]
 800ebd4:	2a20      	cmp	r2, #32
 800ebd6:	d818      	bhi.n	800ec0a <__hexnan+0x7e>
 800ebd8:	9b02      	ldr	r3, [sp, #8]
 800ebda:	459b      	cmp	fp, r3
 800ebdc:	dd13      	ble.n	800ec06 <__hexnan+0x7a>
 800ebde:	454c      	cmp	r4, r9
 800ebe0:	d206      	bcs.n	800ebf0 <__hexnan+0x64>
 800ebe2:	2d07      	cmp	r5, #7
 800ebe4:	dc04      	bgt.n	800ebf0 <__hexnan+0x64>
 800ebe6:	462a      	mov	r2, r5
 800ebe8:	4649      	mov	r1, r9
 800ebea:	4620      	mov	r0, r4
 800ebec:	f7ff ffa8 	bl	800eb40 <L_shift>
 800ebf0:	4544      	cmp	r4, r8
 800ebf2:	d952      	bls.n	800ec9a <__hexnan+0x10e>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f1a4 0904 	sub.w	r9, r4, #4
 800ebfa:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebfe:	461d      	mov	r5, r3
 800ec00:	464c      	mov	r4, r9
 800ec02:	f8cd b008 	str.w	fp, [sp, #8]
 800ec06:	9903      	ldr	r1, [sp, #12]
 800ec08:	e7d7      	b.n	800ebba <__hexnan+0x2e>
 800ec0a:	2a29      	cmp	r2, #41	@ 0x29
 800ec0c:	d157      	bne.n	800ecbe <__hexnan+0x132>
 800ec0e:	3102      	adds	r1, #2
 800ec10:	f8ca 1000 	str.w	r1, [sl]
 800ec14:	f1bb 0f00 	cmp.w	fp, #0
 800ec18:	d051      	beq.n	800ecbe <__hexnan+0x132>
 800ec1a:	454c      	cmp	r4, r9
 800ec1c:	d206      	bcs.n	800ec2c <__hexnan+0xa0>
 800ec1e:	2d07      	cmp	r5, #7
 800ec20:	dc04      	bgt.n	800ec2c <__hexnan+0xa0>
 800ec22:	462a      	mov	r2, r5
 800ec24:	4649      	mov	r1, r9
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7ff ff8a 	bl	800eb40 <L_shift>
 800ec2c:	4544      	cmp	r4, r8
 800ec2e:	d936      	bls.n	800ec9e <__hexnan+0x112>
 800ec30:	4623      	mov	r3, r4
 800ec32:	f1a8 0204 	sub.w	r2, r8, #4
 800ec36:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec3a:	429f      	cmp	r7, r3
 800ec3c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec40:	d2f9      	bcs.n	800ec36 <__hexnan+0xaa>
 800ec42:	1b3b      	subs	r3, r7, r4
 800ec44:	f023 0303 	bic.w	r3, r3, #3
 800ec48:	3304      	adds	r3, #4
 800ec4a:	3401      	adds	r4, #1
 800ec4c:	3e03      	subs	r6, #3
 800ec4e:	42b4      	cmp	r4, r6
 800ec50:	bf88      	it	hi
 800ec52:	2304      	movhi	r3, #4
 800ec54:	2200      	movs	r2, #0
 800ec56:	4443      	add	r3, r8
 800ec58:	f843 2b04 	str.w	r2, [r3], #4
 800ec5c:	429f      	cmp	r7, r3
 800ec5e:	d2fb      	bcs.n	800ec58 <__hexnan+0xcc>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	b91b      	cbnz	r3, 800ec6c <__hexnan+0xe0>
 800ec64:	4547      	cmp	r7, r8
 800ec66:	d128      	bne.n	800ecba <__hexnan+0x12e>
 800ec68:	2301      	movs	r3, #1
 800ec6a:	603b      	str	r3, [r7, #0]
 800ec6c:	2005      	movs	r0, #5
 800ec6e:	b007      	add	sp, #28
 800ec70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec74:	3501      	adds	r5, #1
 800ec76:	2d08      	cmp	r5, #8
 800ec78:	f10b 0b01 	add.w	fp, fp, #1
 800ec7c:	dd06      	ble.n	800ec8c <__hexnan+0x100>
 800ec7e:	4544      	cmp	r4, r8
 800ec80:	d9c1      	bls.n	800ec06 <__hexnan+0x7a>
 800ec82:	2300      	movs	r3, #0
 800ec84:	2501      	movs	r5, #1
 800ec86:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec8a:	3c04      	subs	r4, #4
 800ec8c:	6822      	ldr	r2, [r4, #0]
 800ec8e:	f000 000f 	and.w	r0, r0, #15
 800ec92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec96:	6020      	str	r0, [r4, #0]
 800ec98:	e7b5      	b.n	800ec06 <__hexnan+0x7a>
 800ec9a:	2508      	movs	r5, #8
 800ec9c:	e7b3      	b.n	800ec06 <__hexnan+0x7a>
 800ec9e:	9b01      	ldr	r3, [sp, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d0dd      	beq.n	800ec60 <__hexnan+0xd4>
 800eca4:	f04f 32ff 	mov.w	r2, #4294967295
 800eca8:	f1c3 0320 	rsb	r3, r3, #32
 800ecac:	40da      	lsrs	r2, r3
 800ecae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	f846 3c04 	str.w	r3, [r6, #-4]
 800ecb8:	e7d2      	b.n	800ec60 <__hexnan+0xd4>
 800ecba:	3f04      	subs	r7, #4
 800ecbc:	e7d0      	b.n	800ec60 <__hexnan+0xd4>
 800ecbe:	2004      	movs	r0, #4
 800ecc0:	e7d5      	b.n	800ec6e <__hexnan+0xe2>

0800ecc2 <__ascii_mbtowc>:
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	b901      	cbnz	r1, 800ecc8 <__ascii_mbtowc+0x6>
 800ecc6:	a901      	add	r1, sp, #4
 800ecc8:	b142      	cbz	r2, 800ecdc <__ascii_mbtowc+0x1a>
 800ecca:	b14b      	cbz	r3, 800ece0 <__ascii_mbtowc+0x1e>
 800eccc:	7813      	ldrb	r3, [r2, #0]
 800ecce:	600b      	str	r3, [r1, #0]
 800ecd0:	7812      	ldrb	r2, [r2, #0]
 800ecd2:	1e10      	subs	r0, r2, #0
 800ecd4:	bf18      	it	ne
 800ecd6:	2001      	movne	r0, #1
 800ecd8:	b002      	add	sp, #8
 800ecda:	4770      	bx	lr
 800ecdc:	4610      	mov	r0, r2
 800ecde:	e7fb      	b.n	800ecd8 <__ascii_mbtowc+0x16>
 800ece0:	f06f 0001 	mvn.w	r0, #1
 800ece4:	e7f8      	b.n	800ecd8 <__ascii_mbtowc+0x16>

0800ece6 <_realloc_r>:
 800ece6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecea:	4607      	mov	r7, r0
 800ecec:	4614      	mov	r4, r2
 800ecee:	460d      	mov	r5, r1
 800ecf0:	b921      	cbnz	r1, 800ecfc <_realloc_r+0x16>
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	f7fd be80 	b.w	800c9fc <_malloc_r>
 800ecfc:	b92a      	cbnz	r2, 800ed0a <_realloc_r+0x24>
 800ecfe:	f7fd fe0b 	bl	800c918 <_free_r>
 800ed02:	4625      	mov	r5, r4
 800ed04:	4628      	mov	r0, r5
 800ed06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0a:	f000 f840 	bl	800ed8e <_malloc_usable_size_r>
 800ed0e:	4284      	cmp	r4, r0
 800ed10:	4606      	mov	r6, r0
 800ed12:	d802      	bhi.n	800ed1a <_realloc_r+0x34>
 800ed14:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed18:	d8f4      	bhi.n	800ed04 <_realloc_r+0x1e>
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	f7fd fe6d 	bl	800c9fc <_malloc_r>
 800ed22:	4680      	mov	r8, r0
 800ed24:	b908      	cbnz	r0, 800ed2a <_realloc_r+0x44>
 800ed26:	4645      	mov	r5, r8
 800ed28:	e7ec      	b.n	800ed04 <_realloc_r+0x1e>
 800ed2a:	42b4      	cmp	r4, r6
 800ed2c:	4622      	mov	r2, r4
 800ed2e:	4629      	mov	r1, r5
 800ed30:	bf28      	it	cs
 800ed32:	4632      	movcs	r2, r6
 800ed34:	f7ff fc46 	bl	800e5c4 <memcpy>
 800ed38:	4629      	mov	r1, r5
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	f7fd fdec 	bl	800c918 <_free_r>
 800ed40:	e7f1      	b.n	800ed26 <_realloc_r+0x40>

0800ed42 <__ascii_wctomb>:
 800ed42:	4603      	mov	r3, r0
 800ed44:	4608      	mov	r0, r1
 800ed46:	b141      	cbz	r1, 800ed5a <__ascii_wctomb+0x18>
 800ed48:	2aff      	cmp	r2, #255	@ 0xff
 800ed4a:	d904      	bls.n	800ed56 <__ascii_wctomb+0x14>
 800ed4c:	228a      	movs	r2, #138	@ 0x8a
 800ed4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed52:	601a      	str	r2, [r3, #0]
 800ed54:	4770      	bx	lr
 800ed56:	2001      	movs	r0, #1
 800ed58:	700a      	strb	r2, [r1, #0]
 800ed5a:	4770      	bx	lr

0800ed5c <fiprintf>:
 800ed5c:	b40e      	push	{r1, r2, r3}
 800ed5e:	b503      	push	{r0, r1, lr}
 800ed60:	4601      	mov	r1, r0
 800ed62:	ab03      	add	r3, sp, #12
 800ed64:	4805      	ldr	r0, [pc, #20]	@ (800ed7c <fiprintf+0x20>)
 800ed66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed6a:	6800      	ldr	r0, [r0, #0]
 800ed6c:	9301      	str	r3, [sp, #4]
 800ed6e:	f000 f83d 	bl	800edec <_vfiprintf_r>
 800ed72:	b002      	add	sp, #8
 800ed74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed78:	b003      	add	sp, #12
 800ed7a:	4770      	bx	lr
 800ed7c:	2000019c 	.word	0x2000019c

0800ed80 <abort>:
 800ed80:	2006      	movs	r0, #6
 800ed82:	b508      	push	{r3, lr}
 800ed84:	f000 fa06 	bl	800f194 <raise>
 800ed88:	2001      	movs	r0, #1
 800ed8a:	f7f3 f8dc 	bl	8001f46 <_exit>

0800ed8e <_malloc_usable_size_r>:
 800ed8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed92:	1f18      	subs	r0, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	bfbc      	itt	lt
 800ed98:	580b      	ldrlt	r3, [r1, r0]
 800ed9a:	18c0      	addlt	r0, r0, r3
 800ed9c:	4770      	bx	lr

0800ed9e <__sfputc_r>:
 800ed9e:	6893      	ldr	r3, [r2, #8]
 800eda0:	b410      	push	{r4}
 800eda2:	3b01      	subs	r3, #1
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	6093      	str	r3, [r2, #8]
 800eda8:	da07      	bge.n	800edba <__sfputc_r+0x1c>
 800edaa:	6994      	ldr	r4, [r2, #24]
 800edac:	42a3      	cmp	r3, r4
 800edae:	db01      	blt.n	800edb4 <__sfputc_r+0x16>
 800edb0:	290a      	cmp	r1, #10
 800edb2:	d102      	bne.n	800edba <__sfputc_r+0x1c>
 800edb4:	bc10      	pop	{r4}
 800edb6:	f000 b931 	b.w	800f01c <__swbuf_r>
 800edba:	6813      	ldr	r3, [r2, #0]
 800edbc:	1c58      	adds	r0, r3, #1
 800edbe:	6010      	str	r0, [r2, #0]
 800edc0:	7019      	strb	r1, [r3, #0]
 800edc2:	4608      	mov	r0, r1
 800edc4:	bc10      	pop	{r4}
 800edc6:	4770      	bx	lr

0800edc8 <__sfputs_r>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	4614      	mov	r4, r2
 800edd0:	18d5      	adds	r5, r2, r3
 800edd2:	42ac      	cmp	r4, r5
 800edd4:	d101      	bne.n	800edda <__sfputs_r+0x12>
 800edd6:	2000      	movs	r0, #0
 800edd8:	e007      	b.n	800edea <__sfputs_r+0x22>
 800edda:	463a      	mov	r2, r7
 800eddc:	4630      	mov	r0, r6
 800edde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ede2:	f7ff ffdc 	bl	800ed9e <__sfputc_r>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	d1f3      	bne.n	800edd2 <__sfputs_r+0xa>
 800edea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edec <_vfiprintf_r>:
 800edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf0:	460d      	mov	r5, r1
 800edf2:	4614      	mov	r4, r2
 800edf4:	4698      	mov	r8, r3
 800edf6:	4606      	mov	r6, r0
 800edf8:	b09d      	sub	sp, #116	@ 0x74
 800edfa:	b118      	cbz	r0, 800ee04 <_vfiprintf_r+0x18>
 800edfc:	6a03      	ldr	r3, [r0, #32]
 800edfe:	b90b      	cbnz	r3, 800ee04 <_vfiprintf_r+0x18>
 800ee00:	f7fc fe00 	bl	800ba04 <__sinit>
 800ee04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee06:	07d9      	lsls	r1, r3, #31
 800ee08:	d405      	bmi.n	800ee16 <_vfiprintf_r+0x2a>
 800ee0a:	89ab      	ldrh	r3, [r5, #12]
 800ee0c:	059a      	lsls	r2, r3, #22
 800ee0e:	d402      	bmi.n	800ee16 <_vfiprintf_r+0x2a>
 800ee10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee12:	f7fc ff10 	bl	800bc36 <__retarget_lock_acquire_recursive>
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	071b      	lsls	r3, r3, #28
 800ee1a:	d501      	bpl.n	800ee20 <_vfiprintf_r+0x34>
 800ee1c:	692b      	ldr	r3, [r5, #16]
 800ee1e:	b99b      	cbnz	r3, 800ee48 <_vfiprintf_r+0x5c>
 800ee20:	4629      	mov	r1, r5
 800ee22:	4630      	mov	r0, r6
 800ee24:	f000 f938 	bl	800f098 <__swsetup_r>
 800ee28:	b170      	cbz	r0, 800ee48 <_vfiprintf_r+0x5c>
 800ee2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee2c:	07dc      	lsls	r4, r3, #31
 800ee2e:	d504      	bpl.n	800ee3a <_vfiprintf_r+0x4e>
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	b01d      	add	sp, #116	@ 0x74
 800ee36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	0598      	lsls	r0, r3, #22
 800ee3e:	d4f7      	bmi.n	800ee30 <_vfiprintf_r+0x44>
 800ee40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee42:	f7fc fef9 	bl	800bc38 <__retarget_lock_release_recursive>
 800ee46:	e7f3      	b.n	800ee30 <_vfiprintf_r+0x44>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee4c:	2320      	movs	r3, #32
 800ee4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee52:	2330      	movs	r3, #48	@ 0x30
 800ee54:	f04f 0901 	mov.w	r9, #1
 800ee58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f008 <_vfiprintf_r+0x21c>
 800ee60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee64:	4623      	mov	r3, r4
 800ee66:	469a      	mov	sl, r3
 800ee68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee6c:	b10a      	cbz	r2, 800ee72 <_vfiprintf_r+0x86>
 800ee6e:	2a25      	cmp	r2, #37	@ 0x25
 800ee70:	d1f9      	bne.n	800ee66 <_vfiprintf_r+0x7a>
 800ee72:	ebba 0b04 	subs.w	fp, sl, r4
 800ee76:	d00b      	beq.n	800ee90 <_vfiprintf_r+0xa4>
 800ee78:	465b      	mov	r3, fp
 800ee7a:	4622      	mov	r2, r4
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f7ff ffa2 	bl	800edc8 <__sfputs_r>
 800ee84:	3001      	adds	r0, #1
 800ee86:	f000 80a7 	beq.w	800efd8 <_vfiprintf_r+0x1ec>
 800ee8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee8c:	445a      	add	r2, fp
 800ee8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee90:	f89a 3000 	ldrb.w	r3, [sl]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 809f 	beq.w	800efd8 <_vfiprintf_r+0x1ec>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea4:	f10a 0a01 	add.w	sl, sl, #1
 800eea8:	9304      	str	r3, [sp, #16]
 800eeaa:	9307      	str	r3, [sp, #28]
 800eeac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeb2:	4654      	mov	r4, sl
 800eeb4:	2205      	movs	r2, #5
 800eeb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeba:	4853      	ldr	r0, [pc, #332]	@ (800f008 <_vfiprintf_r+0x21c>)
 800eebc:	f7fc febd 	bl	800bc3a <memchr>
 800eec0:	9a04      	ldr	r2, [sp, #16]
 800eec2:	b9d8      	cbnz	r0, 800eefc <_vfiprintf_r+0x110>
 800eec4:	06d1      	lsls	r1, r2, #27
 800eec6:	bf44      	itt	mi
 800eec8:	2320      	movmi	r3, #32
 800eeca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eece:	0713      	lsls	r3, r2, #28
 800eed0:	bf44      	itt	mi
 800eed2:	232b      	movmi	r3, #43	@ 0x2b
 800eed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed8:	f89a 3000 	ldrb.w	r3, [sl]
 800eedc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eede:	d015      	beq.n	800ef0c <_vfiprintf_r+0x120>
 800eee0:	4654      	mov	r4, sl
 800eee2:	2000      	movs	r0, #0
 800eee4:	f04f 0c0a 	mov.w	ip, #10
 800eee8:	9a07      	ldr	r2, [sp, #28]
 800eeea:	4621      	mov	r1, r4
 800eeec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef0:	3b30      	subs	r3, #48	@ 0x30
 800eef2:	2b09      	cmp	r3, #9
 800eef4:	d94b      	bls.n	800ef8e <_vfiprintf_r+0x1a2>
 800eef6:	b1b0      	cbz	r0, 800ef26 <_vfiprintf_r+0x13a>
 800eef8:	9207      	str	r2, [sp, #28]
 800eefa:	e014      	b.n	800ef26 <_vfiprintf_r+0x13a>
 800eefc:	eba0 0308 	sub.w	r3, r0, r8
 800ef00:	fa09 f303 	lsl.w	r3, r9, r3
 800ef04:	4313      	orrs	r3, r2
 800ef06:	46a2      	mov	sl, r4
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	e7d2      	b.n	800eeb2 <_vfiprintf_r+0xc6>
 800ef0c:	9b03      	ldr	r3, [sp, #12]
 800ef0e:	1d19      	adds	r1, r3, #4
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	9103      	str	r1, [sp, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	bfbb      	ittet	lt
 800ef18:	425b      	neglt	r3, r3
 800ef1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef1e:	9307      	strge	r3, [sp, #28]
 800ef20:	9307      	strlt	r3, [sp, #28]
 800ef22:	bfb8      	it	lt
 800ef24:	9204      	strlt	r2, [sp, #16]
 800ef26:	7823      	ldrb	r3, [r4, #0]
 800ef28:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef2a:	d10a      	bne.n	800ef42 <_vfiprintf_r+0x156>
 800ef2c:	7863      	ldrb	r3, [r4, #1]
 800ef2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef30:	d132      	bne.n	800ef98 <_vfiprintf_r+0x1ac>
 800ef32:	9b03      	ldr	r3, [sp, #12]
 800ef34:	3402      	adds	r4, #2
 800ef36:	1d1a      	adds	r2, r3, #4
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	9203      	str	r2, [sp, #12]
 800ef3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef40:	9305      	str	r3, [sp, #20]
 800ef42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f00c <_vfiprintf_r+0x220>
 800ef46:	2203      	movs	r2, #3
 800ef48:	4650      	mov	r0, sl
 800ef4a:	7821      	ldrb	r1, [r4, #0]
 800ef4c:	f7fc fe75 	bl	800bc3a <memchr>
 800ef50:	b138      	cbz	r0, 800ef62 <_vfiprintf_r+0x176>
 800ef52:	2240      	movs	r2, #64	@ 0x40
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	eba0 000a 	sub.w	r0, r0, sl
 800ef5a:	4082      	lsls	r2, r0
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	3401      	adds	r4, #1
 800ef60:	9304      	str	r3, [sp, #16]
 800ef62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef66:	2206      	movs	r2, #6
 800ef68:	4829      	ldr	r0, [pc, #164]	@ (800f010 <_vfiprintf_r+0x224>)
 800ef6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef6e:	f7fc fe64 	bl	800bc3a <memchr>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d03f      	beq.n	800eff6 <_vfiprintf_r+0x20a>
 800ef76:	4b27      	ldr	r3, [pc, #156]	@ (800f014 <_vfiprintf_r+0x228>)
 800ef78:	bb1b      	cbnz	r3, 800efc2 <_vfiprintf_r+0x1d6>
 800ef7a:	9b03      	ldr	r3, [sp, #12]
 800ef7c:	3307      	adds	r3, #7
 800ef7e:	f023 0307 	bic.w	r3, r3, #7
 800ef82:	3308      	adds	r3, #8
 800ef84:	9303      	str	r3, [sp, #12]
 800ef86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef88:	443b      	add	r3, r7
 800ef8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef8c:	e76a      	b.n	800ee64 <_vfiprintf_r+0x78>
 800ef8e:	460c      	mov	r4, r1
 800ef90:	2001      	movs	r0, #1
 800ef92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef96:	e7a8      	b.n	800eeea <_vfiprintf_r+0xfe>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f04f 0c0a 	mov.w	ip, #10
 800ef9e:	4619      	mov	r1, r3
 800efa0:	3401      	adds	r4, #1
 800efa2:	9305      	str	r3, [sp, #20]
 800efa4:	4620      	mov	r0, r4
 800efa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efaa:	3a30      	subs	r2, #48	@ 0x30
 800efac:	2a09      	cmp	r2, #9
 800efae:	d903      	bls.n	800efb8 <_vfiprintf_r+0x1cc>
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d0c6      	beq.n	800ef42 <_vfiprintf_r+0x156>
 800efb4:	9105      	str	r1, [sp, #20]
 800efb6:	e7c4      	b.n	800ef42 <_vfiprintf_r+0x156>
 800efb8:	4604      	mov	r4, r0
 800efba:	2301      	movs	r3, #1
 800efbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800efc0:	e7f0      	b.n	800efa4 <_vfiprintf_r+0x1b8>
 800efc2:	ab03      	add	r3, sp, #12
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	462a      	mov	r2, r5
 800efc8:	4630      	mov	r0, r6
 800efca:	4b13      	ldr	r3, [pc, #76]	@ (800f018 <_vfiprintf_r+0x22c>)
 800efcc:	a904      	add	r1, sp, #16
 800efce:	f7fb fec7 	bl	800ad60 <_printf_float>
 800efd2:	4607      	mov	r7, r0
 800efd4:	1c78      	adds	r0, r7, #1
 800efd6:	d1d6      	bne.n	800ef86 <_vfiprintf_r+0x19a>
 800efd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efda:	07d9      	lsls	r1, r3, #31
 800efdc:	d405      	bmi.n	800efea <_vfiprintf_r+0x1fe>
 800efde:	89ab      	ldrh	r3, [r5, #12]
 800efe0:	059a      	lsls	r2, r3, #22
 800efe2:	d402      	bmi.n	800efea <_vfiprintf_r+0x1fe>
 800efe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efe6:	f7fc fe27 	bl	800bc38 <__retarget_lock_release_recursive>
 800efea:	89ab      	ldrh	r3, [r5, #12]
 800efec:	065b      	lsls	r3, r3, #25
 800efee:	f53f af1f 	bmi.w	800ee30 <_vfiprintf_r+0x44>
 800eff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eff4:	e71e      	b.n	800ee34 <_vfiprintf_r+0x48>
 800eff6:	ab03      	add	r3, sp, #12
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	462a      	mov	r2, r5
 800effc:	4630      	mov	r0, r6
 800effe:	4b06      	ldr	r3, [pc, #24]	@ (800f018 <_vfiprintf_r+0x22c>)
 800f000:	a904      	add	r1, sp, #16
 800f002:	f7fc f94b 	bl	800b29c <_printf_i>
 800f006:	e7e4      	b.n	800efd2 <_vfiprintf_r+0x1e6>
 800f008:	0800f497 	.word	0x0800f497
 800f00c:	0800f49d 	.word	0x0800f49d
 800f010:	0800f4a1 	.word	0x0800f4a1
 800f014:	0800ad61 	.word	0x0800ad61
 800f018:	0800edc9 	.word	0x0800edc9

0800f01c <__swbuf_r>:
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01e:	460e      	mov	r6, r1
 800f020:	4614      	mov	r4, r2
 800f022:	4605      	mov	r5, r0
 800f024:	b118      	cbz	r0, 800f02e <__swbuf_r+0x12>
 800f026:	6a03      	ldr	r3, [r0, #32]
 800f028:	b90b      	cbnz	r3, 800f02e <__swbuf_r+0x12>
 800f02a:	f7fc fceb 	bl	800ba04 <__sinit>
 800f02e:	69a3      	ldr	r3, [r4, #24]
 800f030:	60a3      	str	r3, [r4, #8]
 800f032:	89a3      	ldrh	r3, [r4, #12]
 800f034:	071a      	lsls	r2, r3, #28
 800f036:	d501      	bpl.n	800f03c <__swbuf_r+0x20>
 800f038:	6923      	ldr	r3, [r4, #16]
 800f03a:	b943      	cbnz	r3, 800f04e <__swbuf_r+0x32>
 800f03c:	4621      	mov	r1, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	f000 f82a 	bl	800f098 <__swsetup_r>
 800f044:	b118      	cbz	r0, 800f04e <__swbuf_r+0x32>
 800f046:	f04f 37ff 	mov.w	r7, #4294967295
 800f04a:	4638      	mov	r0, r7
 800f04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	6922      	ldr	r2, [r4, #16]
 800f052:	b2f6      	uxtb	r6, r6
 800f054:	1a98      	subs	r0, r3, r2
 800f056:	6963      	ldr	r3, [r4, #20]
 800f058:	4637      	mov	r7, r6
 800f05a:	4283      	cmp	r3, r0
 800f05c:	dc05      	bgt.n	800f06a <__swbuf_r+0x4e>
 800f05e:	4621      	mov	r1, r4
 800f060:	4628      	mov	r0, r5
 800f062:	f7ff fa4b 	bl	800e4fc <_fflush_r>
 800f066:	2800      	cmp	r0, #0
 800f068:	d1ed      	bne.n	800f046 <__swbuf_r+0x2a>
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	60a3      	str	r3, [r4, #8]
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	6022      	str	r2, [r4, #0]
 800f076:	701e      	strb	r6, [r3, #0]
 800f078:	6962      	ldr	r2, [r4, #20]
 800f07a:	1c43      	adds	r3, r0, #1
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d004      	beq.n	800f08a <__swbuf_r+0x6e>
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	07db      	lsls	r3, r3, #31
 800f084:	d5e1      	bpl.n	800f04a <__swbuf_r+0x2e>
 800f086:	2e0a      	cmp	r6, #10
 800f088:	d1df      	bne.n	800f04a <__swbuf_r+0x2e>
 800f08a:	4621      	mov	r1, r4
 800f08c:	4628      	mov	r0, r5
 800f08e:	f7ff fa35 	bl	800e4fc <_fflush_r>
 800f092:	2800      	cmp	r0, #0
 800f094:	d0d9      	beq.n	800f04a <__swbuf_r+0x2e>
 800f096:	e7d6      	b.n	800f046 <__swbuf_r+0x2a>

0800f098 <__swsetup_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4b29      	ldr	r3, [pc, #164]	@ (800f140 <__swsetup_r+0xa8>)
 800f09c:	4605      	mov	r5, r0
 800f09e:	6818      	ldr	r0, [r3, #0]
 800f0a0:	460c      	mov	r4, r1
 800f0a2:	b118      	cbz	r0, 800f0ac <__swsetup_r+0x14>
 800f0a4:	6a03      	ldr	r3, [r0, #32]
 800f0a6:	b90b      	cbnz	r3, 800f0ac <__swsetup_r+0x14>
 800f0a8:	f7fc fcac 	bl	800ba04 <__sinit>
 800f0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b0:	0719      	lsls	r1, r3, #28
 800f0b2:	d422      	bmi.n	800f0fa <__swsetup_r+0x62>
 800f0b4:	06da      	lsls	r2, r3, #27
 800f0b6:	d407      	bmi.n	800f0c8 <__swsetup_r+0x30>
 800f0b8:	2209      	movs	r2, #9
 800f0ba:	602a      	str	r2, [r5, #0]
 800f0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	e033      	b.n	800f130 <__swsetup_r+0x98>
 800f0c8:	0758      	lsls	r0, r3, #29
 800f0ca:	d512      	bpl.n	800f0f2 <__swsetup_r+0x5a>
 800f0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0ce:	b141      	cbz	r1, 800f0e2 <__swsetup_r+0x4a>
 800f0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0d4:	4299      	cmp	r1, r3
 800f0d6:	d002      	beq.n	800f0de <__swsetup_r+0x46>
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f7fd fc1d 	bl	800c918 <_free_r>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0e2:	89a3      	ldrh	r3, [r4, #12]
 800f0e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0e8:	81a3      	strh	r3, [r4, #12]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	6063      	str	r3, [r4, #4]
 800f0ee:	6923      	ldr	r3, [r4, #16]
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	89a3      	ldrh	r3, [r4, #12]
 800f0f4:	f043 0308 	orr.w	r3, r3, #8
 800f0f8:	81a3      	strh	r3, [r4, #12]
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	b94b      	cbnz	r3, 800f112 <__swsetup_r+0x7a>
 800f0fe:	89a3      	ldrh	r3, [r4, #12]
 800f100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f108:	d003      	beq.n	800f112 <__swsetup_r+0x7a>
 800f10a:	4621      	mov	r1, r4
 800f10c:	4628      	mov	r0, r5
 800f10e:	f000 f882 	bl	800f216 <__smakebuf_r>
 800f112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f116:	f013 0201 	ands.w	r2, r3, #1
 800f11a:	d00a      	beq.n	800f132 <__swsetup_r+0x9a>
 800f11c:	2200      	movs	r2, #0
 800f11e:	60a2      	str	r2, [r4, #8]
 800f120:	6962      	ldr	r2, [r4, #20]
 800f122:	4252      	negs	r2, r2
 800f124:	61a2      	str	r2, [r4, #24]
 800f126:	6922      	ldr	r2, [r4, #16]
 800f128:	b942      	cbnz	r2, 800f13c <__swsetup_r+0xa4>
 800f12a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f12e:	d1c5      	bne.n	800f0bc <__swsetup_r+0x24>
 800f130:	bd38      	pop	{r3, r4, r5, pc}
 800f132:	0799      	lsls	r1, r3, #30
 800f134:	bf58      	it	pl
 800f136:	6962      	ldrpl	r2, [r4, #20]
 800f138:	60a2      	str	r2, [r4, #8]
 800f13a:	e7f4      	b.n	800f126 <__swsetup_r+0x8e>
 800f13c:	2000      	movs	r0, #0
 800f13e:	e7f7      	b.n	800f130 <__swsetup_r+0x98>
 800f140:	2000019c 	.word	0x2000019c

0800f144 <_raise_r>:
 800f144:	291f      	cmp	r1, #31
 800f146:	b538      	push	{r3, r4, r5, lr}
 800f148:	4605      	mov	r5, r0
 800f14a:	460c      	mov	r4, r1
 800f14c:	d904      	bls.n	800f158 <_raise_r+0x14>
 800f14e:	2316      	movs	r3, #22
 800f150:	6003      	str	r3, [r0, #0]
 800f152:	f04f 30ff 	mov.w	r0, #4294967295
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f15a:	b112      	cbz	r2, 800f162 <_raise_r+0x1e>
 800f15c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f160:	b94b      	cbnz	r3, 800f176 <_raise_r+0x32>
 800f162:	4628      	mov	r0, r5
 800f164:	f000 f830 	bl	800f1c8 <_getpid_r>
 800f168:	4622      	mov	r2, r4
 800f16a:	4601      	mov	r1, r0
 800f16c:	4628      	mov	r0, r5
 800f16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f172:	f000 b817 	b.w	800f1a4 <_kill_r>
 800f176:	2b01      	cmp	r3, #1
 800f178:	d00a      	beq.n	800f190 <_raise_r+0x4c>
 800f17a:	1c59      	adds	r1, r3, #1
 800f17c:	d103      	bne.n	800f186 <_raise_r+0x42>
 800f17e:	2316      	movs	r3, #22
 800f180:	6003      	str	r3, [r0, #0]
 800f182:	2001      	movs	r0, #1
 800f184:	e7e7      	b.n	800f156 <_raise_r+0x12>
 800f186:	2100      	movs	r1, #0
 800f188:	4620      	mov	r0, r4
 800f18a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f18e:	4798      	blx	r3
 800f190:	2000      	movs	r0, #0
 800f192:	e7e0      	b.n	800f156 <_raise_r+0x12>

0800f194 <raise>:
 800f194:	4b02      	ldr	r3, [pc, #8]	@ (800f1a0 <raise+0xc>)
 800f196:	4601      	mov	r1, r0
 800f198:	6818      	ldr	r0, [r3, #0]
 800f19a:	f7ff bfd3 	b.w	800f144 <_raise_r>
 800f19e:	bf00      	nop
 800f1a0:	2000019c 	.word	0x2000019c

0800f1a4 <_kill_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	4d06      	ldr	r5, [pc, #24]	@ (800f1c4 <_kill_r+0x20>)
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	f7f2 feb8 	bl	8001f26 <_kill>
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	d102      	bne.n	800f1c0 <_kill_r+0x1c>
 800f1ba:	682b      	ldr	r3, [r5, #0]
 800f1bc:	b103      	cbz	r3, 800f1c0 <_kill_r+0x1c>
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	bf00      	nop
 800f1c4:	20001864 	.word	0x20001864

0800f1c8 <_getpid_r>:
 800f1c8:	f7f2 bea6 	b.w	8001f18 <_getpid>

0800f1cc <__swhatbuf_r>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d4:	4615      	mov	r5, r2
 800f1d6:	2900      	cmp	r1, #0
 800f1d8:	461e      	mov	r6, r3
 800f1da:	b096      	sub	sp, #88	@ 0x58
 800f1dc:	da0c      	bge.n	800f1f8 <__swhatbuf_r+0x2c>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1e6:	bf14      	ite	ne
 800f1e8:	2340      	movne	r3, #64	@ 0x40
 800f1ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	6031      	str	r1, [r6, #0]
 800f1f2:	602b      	str	r3, [r5, #0]
 800f1f4:	b016      	add	sp, #88	@ 0x58
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
 800f1f8:	466a      	mov	r2, sp
 800f1fa:	f000 f849 	bl	800f290 <_fstat_r>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	dbed      	blt.n	800f1de <__swhatbuf_r+0x12>
 800f202:	9901      	ldr	r1, [sp, #4]
 800f204:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f208:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f20c:	4259      	negs	r1, r3
 800f20e:	4159      	adcs	r1, r3
 800f210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f214:	e7eb      	b.n	800f1ee <__swhatbuf_r+0x22>

0800f216 <__smakebuf_r>:
 800f216:	898b      	ldrh	r3, [r1, #12]
 800f218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f21a:	079d      	lsls	r5, r3, #30
 800f21c:	4606      	mov	r6, r0
 800f21e:	460c      	mov	r4, r1
 800f220:	d507      	bpl.n	800f232 <__smakebuf_r+0x1c>
 800f222:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f226:	6023      	str	r3, [r4, #0]
 800f228:	6123      	str	r3, [r4, #16]
 800f22a:	2301      	movs	r3, #1
 800f22c:	6163      	str	r3, [r4, #20]
 800f22e:	b003      	add	sp, #12
 800f230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f232:	466a      	mov	r2, sp
 800f234:	ab01      	add	r3, sp, #4
 800f236:	f7ff ffc9 	bl	800f1cc <__swhatbuf_r>
 800f23a:	9f00      	ldr	r7, [sp, #0]
 800f23c:	4605      	mov	r5, r0
 800f23e:	4639      	mov	r1, r7
 800f240:	4630      	mov	r0, r6
 800f242:	f7fd fbdb 	bl	800c9fc <_malloc_r>
 800f246:	b948      	cbnz	r0, 800f25c <__smakebuf_r+0x46>
 800f248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f24c:	059a      	lsls	r2, r3, #22
 800f24e:	d4ee      	bmi.n	800f22e <__smakebuf_r+0x18>
 800f250:	f023 0303 	bic.w	r3, r3, #3
 800f254:	f043 0302 	orr.w	r3, r3, #2
 800f258:	81a3      	strh	r3, [r4, #12]
 800f25a:	e7e2      	b.n	800f222 <__smakebuf_r+0xc>
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f266:	81a3      	strh	r3, [r4, #12]
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	6020      	str	r0, [r4, #0]
 800f26c:	b15b      	cbz	r3, 800f286 <__smakebuf_r+0x70>
 800f26e:	4630      	mov	r0, r6
 800f270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f274:	f000 f81e 	bl	800f2b4 <_isatty_r>
 800f278:	b128      	cbz	r0, 800f286 <__smakebuf_r+0x70>
 800f27a:	89a3      	ldrh	r3, [r4, #12]
 800f27c:	f023 0303 	bic.w	r3, r3, #3
 800f280:	f043 0301 	orr.w	r3, r3, #1
 800f284:	81a3      	strh	r3, [r4, #12]
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	431d      	orrs	r5, r3
 800f28a:	81a5      	strh	r5, [r4, #12]
 800f28c:	e7cf      	b.n	800f22e <__smakebuf_r+0x18>
	...

0800f290 <_fstat_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	2300      	movs	r3, #0
 800f294:	4d06      	ldr	r5, [pc, #24]	@ (800f2b0 <_fstat_r+0x20>)
 800f296:	4604      	mov	r4, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	4611      	mov	r1, r2
 800f29c:	602b      	str	r3, [r5, #0]
 800f29e:	f7f2 fea1 	bl	8001fe4 <_fstat>
 800f2a2:	1c43      	adds	r3, r0, #1
 800f2a4:	d102      	bne.n	800f2ac <_fstat_r+0x1c>
 800f2a6:	682b      	ldr	r3, [r5, #0]
 800f2a8:	b103      	cbz	r3, 800f2ac <_fstat_r+0x1c>
 800f2aa:	6023      	str	r3, [r4, #0]
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20001864 	.word	0x20001864

0800f2b4 <_isatty_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4d05      	ldr	r5, [pc, #20]	@ (800f2d0 <_isatty_r+0x1c>)
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	602b      	str	r3, [r5, #0]
 800f2c0:	f7f2 fe9f 	bl	8002002 <_isatty>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_isatty_r+0x1a>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_isatty_r+0x1a>
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	20001864 	.word	0x20001864

0800f2d4 <_init>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	bf00      	nop
 800f2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2da:	bc08      	pop	{r3}
 800f2dc:	469e      	mov	lr, r3
 800f2de:	4770      	bx	lr

0800f2e0 <_fini>:
 800f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e2:	bf00      	nop
 800f2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2e6:	bc08      	pop	{r3}
 800f2e8:	469e      	mov	lr, r3
 800f2ea:	4770      	bx	lr
