
f103cbt6-pengisi-oli-casting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  080122e0  080122e0  000132e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e7c  08012e7c  0001435c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012e7c  08012e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e84  08012e84  0001435c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e84  08012e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e88  08012e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  08012e8c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017c8  20000360  080131e8  00014360  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b28  080131e8  00014b28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001435c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0e1  00000000  00000000  00014385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af8  00000000  00000000  0002f466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  00033f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b5  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9ff  00000000  00000000  00036cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218ca  00000000  00000000  000546f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009708c  00000000  00000000  00075fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d04a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000834c  00000000  00000000  0010d090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001153dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	080122c4 	.word	0x080122c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	080122c4 	.word	0x080122c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	@ 0x58
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8001188:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	4993      	ldr	r1, [pc, #588]	@ (800140c <HCSR04_Init+0x290>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a90      	ldr	r2, [pc, #576]	@ (8001410 <HCSR04_Init+0x294>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10c      	bne.n	80011ec <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b90      	ldr	r3, [pc, #576]	@ (8001414 <HCSR04_Init+0x298>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a8f      	ldr	r2, [pc, #572]	@ (8001414 <HCSR04_Init+0x298>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b8d      	ldr	r3, [pc, #564]	@ (8001414 <HCSR04_Init+0x298>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	e05e      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	4987      	ldr	r1, [pc, #540]	@ (800140c <HCSR04_Init+0x290>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a86      	ldr	r2, [pc, #536]	@ (8001418 <HCSR04_Init+0x29c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10c      	bne.n	800121c <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b84      	ldr	r3, [pc, #528]	@ (8001414 <HCSR04_Init+0x298>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a83      	ldr	r2, [pc, #524]	@ (8001414 <HCSR04_Init+0x298>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b81      	ldr	r3, [pc, #516]	@ (8001414 <HCSR04_Init+0x298>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	e046      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	497b      	ldr	r1, [pc, #492]	@ (800140c <HCSR04_Init+0x290>)
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a7b      	ldr	r2, [pc, #492]	@ (800141c <HCSR04_Init+0x2a0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10c      	bne.n	800124c <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b78      	ldr	r3, [pc, #480]	@ (8001414 <HCSR04_Init+0x298>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a77      	ldr	r2, [pc, #476]	@ (8001414 <HCSR04_Init+0x298>)
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <HCSR04_Init+0x298>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	e02e      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	496f      	ldr	r1, [pc, #444]	@ (800140c <HCSR04_Init+0x290>)
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a70      	ldr	r2, [pc, #448]	@ (8001420 <HCSR04_Init+0x2a4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10c      	bne.n	800127c <HCSR04_Init+0x100>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <HCSR04_Init+0x298>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a6b      	ldr	r2, [pc, #428]	@ (8001414 <HCSR04_Init+0x298>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <HCSR04_Init+0x298>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	e016      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4963      	ldr	r1, [pc, #396]	@ (800140c <HCSR04_Init+0x290>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a65      	ldr	r2, [pc, #404]	@ (8001424 <HCSR04_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10b      	bne.n	80012aa <HCSR04_Init+0x12e>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001292:	4b60      	ldr	r3, [pc, #384]	@ (8001414 <HCSR04_Init+0x298>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a5f      	ldr	r2, [pc, #380]	@ (8001414 <HCSR04_Init+0x298>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <HCSR04_Init+0x298>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4957      	ldr	r1, [pc, #348]	@ (800140c <HCSR04_Init+0x290>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3304      	adds	r3, #4
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2302      	movs	r3, #2
 80012c8:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	494f      	ldr	r1, [pc, #316]	@ (800140c <HCSR04_Init+0x290>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 ff2d 	bl	8004140 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4948      	ldr	r1, [pc, #288]	@ (800140c <HCSR04_Init+0x290>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3308      	adds	r3, #8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012fc:	484a      	ldr	r0, [pc, #296]	@ (8001428 <HCSR04_Init+0x2ac>)
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	3304      	adds	r3, #4
 800130a:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	493f      	ldr	r1, [pc, #252]	@ (800140c <HCSR04_Init+0x290>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3308      	adds	r3, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001322:	4841      	ldr	r0, [pc, #260]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4403      	add	r3, r0
 800132e:	3308      	adds	r3, #8
 8001330:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	493c      	ldr	r1, [pc, #240]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	3302      	adds	r3, #2
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4937      	ldr	r1, [pc, #220]	@ (8001428 <HCSR04_Init+0x2ac>)
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	331c      	adds	r3, #28
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	4932      	ldr	r1, [pc, #200]	@ (8001428 <HCSR04_Init+0x2ac>)
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3308      	adds	r3, #8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <HCSR04_Init+0x20a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	492d      	ldr	r1, [pc, #180]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3308      	adds	r3, #8
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4920      	ldr	r1, [pc, #128]	@ (800140c <HCSR04_Init+0x290>)
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	330c      	adds	r3, #12
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10a      	bne.n	80013b2 <HCSR04_Init+0x236>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	4922      	ldr	r1, [pc, #136]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3320      	adds	r3, #32
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e051      	b.n	8001456 <HCSR04_Init+0x2da>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	4915      	ldr	r1, [pc, #84]	@ (800140c <HCSR04_Init+0x290>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	330c      	adds	r3, #12
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d10a      	bne.n	80013de <HCSR04_Init+0x262>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4917      	ldr	r1, [pc, #92]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3320      	adds	r3, #32
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e03b      	b.n	8001456 <HCSR04_Init+0x2da>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	490a      	ldr	r1, [pc, #40]	@ (800140c <HCSR04_Init+0x290>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	330c      	adds	r3, #12
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d11b      	bne.n	800142c <HCSR04_Init+0x2b0>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	490c      	ldr	r1, [pc, #48]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3320      	adds	r3, #32
 8001404:	2204      	movs	r2, #4
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e025      	b.n	8001456 <HCSR04_Init+0x2da>
 800140a:	bf00      	nop
 800140c:	080129bc 	.word	0x080129bc
 8001410:	40010800 	.word	0x40010800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40011800 	.word	0x40011800
 8001428:	2000037c 	.word	0x2000037c
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4941      	ldr	r1, [pc, #260]	@ (8001534 <HCSR04_Init+0x3b8>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d109      	bne.n	8001456 <HCSR04_Init+0x2da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	493c      	ldr	r1, [pc, #240]	@ (8001538 <HCSR04_Init+0x3bc>)
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3320      	adds	r3, #32
 8001452:	2208      	movs	r2, #8
 8001454:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4936      	ldr	r1, [pc, #216]	@ (8001534 <HCSR04_Init+0x3b8>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4932      	ldr	r1, [pc, #200]	@ (8001538 <HCSR04_Init+0x3bc>)
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	492b      	ldr	r1, [pc, #172]	@ (8001538 <HCSR04_Init+0x3bc>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3308      	adds	r3, #8
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f006 fb88 	bl	8007bc0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80014b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ba:	4619      	mov	r1, r3
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f006 ff11 	bl	80082e4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f006 fc1e 	bl	8007d04 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80014d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014d4:	4619      	mov	r1, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f007 fa62 	bl	80089a0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigIC.ICFilter = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4911      	ldr	r1, [pc, #68]	@ (8001534 <HCSR04_Init+0x3b8>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	330c      	adds	r3, #12
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4619      	mov	r1, r3
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f006 fe51 	bl	80081ac <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f006 fba8 	bl	8007c60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <HCSR04_Init+0x3b8>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	330c      	adds	r3, #12
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f006 fc45 	bl	8007db4 <HAL_TIM_IC_Start_IT>
}
 800152a:	bf00      	nop
 800152c:	3758      	adds	r7, #88	@ 0x58
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	080129bc 	.word	0x080129bc
 8001538:	2000037c 	.word	0x2000037c

0800153c <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e023      	b.n	8001596 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <HCSR04_TMR_OVF_ISR+0x6c>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4403      	add	r3, r0
 8001560:	3308      	adds	r3, #8
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4299      	cmp	r1, r3
 8001566:	d113      	bne.n	8001590 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	4910      	ldr	r1, [pc, #64]	@ (80015ac <HCSR04_TMR_OVF_ISR+0x70>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3302      	adds	r3, #2
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b298      	uxth	r0, r3
 800157e:	490b      	ldr	r1, [pc, #44]	@ (80015ac <HCSR04_TMR_OVF_ISR+0x70>)
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3302      	adds	r3, #2
 800158c:	4602      	mov	r2, r0
 800158e:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	3301      	adds	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d9d8      	bls.n	800154e <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	080129bc 	.word	0x080129bc
 80015ac:	2000037c 	.word	0x2000037c

080015b0 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e22a      	b.n	8001a1c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	486b      	ldr	r0, [pc, #428]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3308      	adds	r3, #8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4299      	cmp	r1, r3
 80015de:	f040 821a 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f19      	ldrb	r1, [r3, #28]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	4865      	ldr	r0, [pc, #404]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	3320      	adds	r3, #32
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4299      	cmp	r1, r3
 80015fa:	f040 820c 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	495f      	ldr	r1, [pc, #380]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80b8 	bne.w	8001784 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	4959      	ldr	r1, [pc, #356]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	330c      	adds	r3, #12
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bfc      	ldrb	r4, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f006 ff22 	bl	8008474 <HAL_TIM_ReadCapturedValue>
 8001630:	4602      	mov	r2, r0
 8001632:	4953      	ldr	r1, [pc, #332]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001634:	4623      	mov	r3, r4
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4423      	add	r3, r4
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	494e      	ldr	r1, [pc, #312]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	4949      	ldr	r1, [pc, #292]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	330c      	adds	r3, #12
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d108      	bne.n	800167c <HCSR04_TMR_IC_ISR+0xcc>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020a 	bic.w	r2, r2, #10
 8001678:	621a      	str	r2, [r3, #32]
 800167a:	e02f      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	493f      	ldr	r1, [pc, #252]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	330c      	adds	r3, #12
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d108      	bne.n	80016a4 <HCSR04_TMR_IC_ISR+0xf4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e01b      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	4935      	ldr	r1, [pc, #212]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	330c      	adds	r3, #12
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d108      	bne.n	80016cc <HCSR04_TMR_IC_ISR+0x11c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e007      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	4927      	ldr	r1, [pc, #156]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	330c      	adds	r3, #12
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HCSR04_TMR_IC_ISR+0x154>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0202 	orr.w	r2, r2, #2
 8001700:	621a      	str	r2, [r3, #32]
 8001702:	e02f      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	491d      	ldr	r1, [pc, #116]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	330c      	adds	r3, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d108      	bne.n	800172c <HCSR04_TMR_IC_ISR+0x17c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	e01b      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	4913      	ldr	r1, [pc, #76]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d108      	bne.n	8001754 <HCSR04_TMR_IC_ISR+0x1a4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	e007      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001762:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	4906      	ldr	r1, [pc, #24]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3302      	adds	r3, #2
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	e14d      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 800177a:	bf00      	nop
 800177c:	080129bc 	.word	0x080129bc
 8001780:	2000037c 	.word	0x2000037c
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	49ac      	ldr	r1, [pc, #688]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	f040 813e 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	49a7      	ldr	r1, [pc, #668]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3308      	adds	r3, #8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	49a2      	ldr	r1, [pc, #648]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c6:	489c      	ldr	r0, [pc, #624]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4403      	add	r3, r0
 80017d2:	3308      	adds	r3, #8
 80017d4:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	4998      	ldr	r1, [pc, #608]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	330c      	adds	r3, #12
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	7bfc      	ldrb	r4, [r7, #15]
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f006 fe41 	bl	8008474 <HAL_TIM_ReadCapturedValue>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4990      	ldr	r1, [pc, #576]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80017f6:	4623      	mov	r3, r4
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4423      	add	r3, r4
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3310      	adds	r3, #16
 8001802:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	498c      	ldr	r1, [pc, #560]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3310      	adds	r3, #16
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	4887      	ldr	r0, [pc, #540]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4403      	add	r3, r0
 8001824:	3302      	adds	r3, #2
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	461c      	mov	r4, r3
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	4882      	ldr	r0, [pc, #520]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4403      	add	r3, r0
 8001838:	3308      	adds	r3, #8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	fb04 f303 	mul.w	r3, r4, r3
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	4419      	add	r1, r3
 8001846:	487c      	ldr	r0, [pc, #496]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4403      	add	r3, r0
 8001852:	3310      	adds	r3, #16
 8001854:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	4977      	ldr	r1, [pc, #476]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3310      	adds	r3, #16
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	4873      	ldr	r0, [pc, #460]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4403      	add	r3, r0
 8001876:	330c      	adds	r3, #12
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	1ac9      	subs	r1, r1, r3
 800187e:	486e      	ldr	r0, [pc, #440]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4403      	add	r3, r0
 800188a:	3314      	adds	r3, #20
 800188c:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	4969      	ldr	r1, [pc, #420]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3314      	adds	r3, #20
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fd9f 	bl	80003e4 <__aeabi_ui2d>
 80018a6:	a362      	add	r3, pc, #392	@ (adr r3, 8001a30 <HCSR04_TMR_IC_ISR+0x480>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe14 	bl	80004d8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	4960      	ldr	r1, [pc, #384]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3310      	adds	r3, #16
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd86 	bl	80003e4 <__aeabi_ui2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe ff24 	bl	800072c <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	7bfc      	ldrb	r4, [r7, #15]
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f8eb 	bl	8000ac8 <__aeabi_d2f>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4950      	ldr	r1, [pc, #320]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80018f6:	4623      	mov	r3, r4
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4423      	add	r3, r4
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3318      	adds	r3, #24
 8001902:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	494c      	ldr	r1, [pc, #304]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	4948      	ldr	r1, [pc, #288]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	330c      	adds	r3, #12
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <HCSR04_TMR_IC_ISR+0x38e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a1a      	ldr	r2, [r3, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	621a      	str	r2, [r3, #32]
 800193c:	e02f      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	493e      	ldr	r1, [pc, #248]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	330c      	adds	r3, #12
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d108      	bne.n	8001966 <HCSR04_TMR_IC_ISR+0x3b6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	e01b      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	4934      	ldr	r1, [pc, #208]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	330c      	adds	r3, #12
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d108      	bne.n	800198e <HCSR04_TMR_IC_ISR+0x3de>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	e007      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800199c:	6213      	str	r3, [r2, #32]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	4926      	ldr	r1, [pc, #152]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HCSR04_TMR_IC_ISR+0x412>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a12      	ldr	r2, [r2, #32]
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	e029      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	491d      	ldr	r1, [pc, #116]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	330c      	adds	r3, #12
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d106      	bne.n	80019e6 <HCSR04_TMR_IC_ISR+0x436>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e017      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	4914      	ldr	r1, [pc, #80]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	330c      	adds	r3, #12
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d106      	bne.n	8001a0a <HCSR04_TMR_IC_ISR+0x45a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e005      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	f67f add1 	bls.w	80015c6 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	b020c49c 	.word	0xb020c49c
 8001a34:	3f916872 	.word	0x3f916872
 8001a38:	2000037c 	.word	0x2000037c
 8001a3c:	080129bc 	.word	0x080129bc

08001a40 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <HCSR04_Read+0x28>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3318      	adds	r3, #24
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000037c 	.word	0x2000037c

08001a6c <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4923      	ldr	r1, [pc, #140]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	491f      	ldr	r1, [pc, #124]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3304      	adds	r3, #4
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f002 fceb 	bl	8004476 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <HCSR04_Trigger+0xa0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HCSR04_Trigger+0xa4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001b14 <HCSR04_Trigger+0xa8>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0c9b      	lsrs	r3, r3, #18
 8001ab2:	005a      	lsls	r2, r3, #1
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HCSR04_Trigger+0xa4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <HCSR04_Trigger+0xa8>)
 8001aba:	fba1 1303 	umull	r1, r3, r1, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HCSR04_Trigger+0xa0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f8      	bhi.n	8001ac6 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3304      	adds	r3, #4
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	4619      	mov	r1, r3
 8001afa:	f002 fcbc 	bl	8004476 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	080129bc 	.word	0x080129bc
 8001b0c:	e000e010 	.word	0xe000e010
 8001b10:	20000004 	.word	0x20000004
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <lcd_send_cmd>:
#define LCD_I2C_ADDR 0x4E // Alamat umum adalah 0x27 << 1 atau 0x3F << 1. Cek datasheet.

I2C_HandleTypeDef *i2c_handle;

void lcd_send_cmd(char cmd)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f023 030f 	bic.w	r3, r3, #15
 8001b28:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // en=1, rs=0
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f043 030c 	orr.w	r3, r3, #12
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // en=0, rs=0
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // en=1, rs=0
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	f043 030c 	orr.w	r3, r3, #12
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // en=0, rs=0
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <lcd_send_cmd+0x5c>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f107 0208 	add.w	r2, r7, #8
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2304      	movs	r3, #4
 8001b66:	214e      	movs	r1, #78	@ 0x4e
 8001b68:	f002 fde2 	bl	8004730 <HAL_I2C_Master_Transmit>
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200003e8 	.word	0x200003e8

08001b78 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f023 030f 	bic.w	r3, r3, #15
 8001b88:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // en=1, rs=1
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f043 030d 	orr.w	r3, r3, #13
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // en=0, rs=1
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f043 0309 	orr.w	r3, r3, #9
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // en=1, rs=1
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	f043 030d 	orr.w	r3, r3, #13
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // en=0, rs=1
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	f043 0309 	orr.w	r3, r3, #9
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <lcd_send_data+0x5c>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	2364      	movs	r3, #100	@ 0x64
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	214e      	movs	r1, #78	@ 0x4e
 8001bc8:	f002 fdb2 	bl	8004730 <HAL_I2C_Master_Transmit>
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200003e8 	.word	0x200003e8

08001bd8 <lcd_clear>:

void lcd_clear(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff9b 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(2);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f001 ff7a 	bl	8003adc <HAL_Delay>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <lcd_set_cursor>:

void lcd_set_cursor(int row, int col)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    uint8_t cursor_addr;
    switch (row)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <lcd_set_cursor+0x18>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <lcd_set_cursor+0x22>
 8001c02:	e009      	b.n	8001c18 <lcd_set_cursor+0x2c>
    {
    case 0:
        cursor_addr = 0x80 + col;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3b80      	subs	r3, #128	@ 0x80
 8001c0a:	73fb      	strb	r3, [r7, #15]
        break;
 8001c0c:	e008      	b.n	8001c20 <lcd_set_cursor+0x34>
    case 1:
        cursor_addr = 0xC0 + col;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b40      	subs	r3, #64	@ 0x40
 8001c14:	73fb      	strb	r3, [r7, #15]
        break;
 8001c16:	e003      	b.n	8001c20 <lcd_set_cursor+0x34>
    default:
        cursor_addr = 0x80 + col;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3b80      	subs	r3, #128	@ 0x80
 8001c1e:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(cursor_addr);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff78 	bl	8001b18 <lcd_send_cmd>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <lcd_init+0x84>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001c3e:	2032      	movs	r0, #50	@ 0x32
 8001c40:	f001 ff4c 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c44:	2030      	movs	r0, #48	@ 0x30
 8001c46:	f7ff ff67 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(5);
 8001c4a:	2005      	movs	r0, #5
 8001c4c:	f001 ff46 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c50:	2030      	movs	r0, #48	@ 0x30
 8001c52:	f7ff ff61 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f001 ff40 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c5c:	2030      	movs	r0, #48	@ 0x30
 8001c5e:	f7ff ff5b 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f001 ff3a 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x20);
 8001c68:	2020      	movs	r0, #32
 8001c6a:	f7ff ff55 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(10);
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f001 ff34 	bl	8003adc <HAL_Delay>

    lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001c74:	2028      	movs	r0, #40	@ 0x28
 8001c76:	f7ff ff4f 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f001 ff2e 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8001c80:	2008      	movs	r0, #8
 8001c82:	f7ff ff49 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f001 ff28 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x01); // clear display
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff ff43 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(2);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f001 ff22 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c98:	2006      	movs	r0, #6
 8001c9a:	f7ff ff3d 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f001 ff1c 	bl	8003adc <HAL_Delay>
    lcd_send_cmd(0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001ca4:	200c      	movs	r0, #12
 8001ca6:	f7ff ff37 	bl	8001b18 <lcd_send_cmd>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200003e8 	.word	0x200003e8

08001cb8 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    while (*str)
 8001cc0:	e006      	b.n	8001cd0 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff54 	bl	8001b78 <lcd_send_data>
    while (*str)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f4      	bne.n	8001cc2 <lcd_send_string+0xa>
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cea:	f001 fe95 	bl	8003a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cee:	f000 f899 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf2:	f000 faf5 	bl	80022e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cf6:	f000 f8f5 	bl	8001ee4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001cfa:	f000 f921 	bl	8001f40 <MX_RTC_Init>
  MX_SPI1_Init();
 8001cfe:	f000 f969 	bl	8001fd4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001d02:	f009 fa53 	bl	800b1ac <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001d06:	f00a fe79 	bl	800c9fc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001d0a:	f000 f999 	bl	8002040 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d0e:	f000 fa07 	bl	8002120 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d12:	f000 fa75 	bl	8002200 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#if GUNAKAN_LCD
  lcd_init(&hi2c1); // Inisialisasi LCD I2C
 8001d16:	4834      	ldr	r0, [pc, #208]	@ (8001de8 <main+0x104>)
 8001d18:	f7ff ff8a 	bl	8001c30 <lcd_init>
  lcd_clear();      // Bersihkan LCD
 8001d1c:	f7ff ff5c 	bl	8001bd8 <lcd_clear>

  // pesan awal di LCD
  lcd_set_cursor(0, 0);
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ff62 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "hai dunia");
 8001d28:	4930      	ldr	r1, [pc, #192]	@ (8001dec <main+0x108>)
 8001d2a:	4831      	ldr	r0, [pc, #196]	@ (8001df0 <main+0x10c>)
 8001d2c:	f00c fa2e 	bl	800e18c <siprintf>
  lcd_send_string(lcd_buffer);
 8001d30:	482f      	ldr	r0, [pc, #188]	@ (8001df0 <main+0x10c>)
 8001d32:	f7ff ffc1 	bl	8001cb8 <lcd_send_string>
#endif

  // inisialisasi sensor ultrasonik
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8001d36:	492f      	ldr	r1, [pc, #188]	@ (8001df4 <main+0x110>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fa1f 	bl	800117c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR2, &htim3);
 8001d3e:	492e      	ldr	r1, [pc, #184]	@ (8001df8 <main+0x114>)
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fa1b 	bl	800117c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR3, &htim4);
 8001d46:	492d      	ldr	r1, [pc, #180]	@ (8001dfc <main+0x118>)
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fa17 	bl	800117c <HCSR04_Init>

  // Muat parameter dari Flash saat startup
  Load_Parameters_From_Flash();
 8001d4e:	f000 fc7f 	bl	8002650 <Load_Parameters_From_Flash>

  // Beri sedikit waktu agar USB siap
  HAL_Delay(2000);
 8001d52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d56:	f001 fec1 	bl	8003adc <HAL_Delay>
  VCP_printf("\r\nSistem Kontrol Drum Siap. Ketik '$H' untuk bantuan.\r\n");
 8001d5a:	4829      	ldr	r0, [pc, #164]	@ (8001e00 <main+0x11c>)
 8001d5c:	f000 fbca 	bl	80024f4 <VCP_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fe6d 	bl	8001a40 <HCSR04_Read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <main+0x120>)
 8001d6a:	6013      	str	r3, [r2, #0]
    Distance2 = HCSR04_Read(HCSR04_SENSOR2);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fe67 	bl	8001a40 <HCSR04_Read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <main+0x124>)
 8001d76:	6013      	str	r3, [r2, #0]
    Distance3 = HCSR04_Read(HCSR04_SENSOR3);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fe61 	bl	8001a40 <HCSR04_Read>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <main+0x128>)
 8001d82:	6013      	str	r3, [r2, #0]

    uint32_t current_time = HAL_GetTick();
 8001d84:	f001 fea0 	bl	8003ac8 <HAL_GetTick>
 8001d88:	6078      	str	r0, [r7, #4]

    // --- Task-like functions execution ---

    // Run HCSR04_Trigger every 100ms
    if (current_time - last_trig_time >= trig_time)
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <main+0x12c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <main+0x130>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d30b      	bcc.n	8001db2 <main+0xce>
    {
      // if (counter_trig == 1)
      HCSR04_Trigger(HCSR04_SENSOR1);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fe66 	bl	8001a6c <HCSR04_Trigger>
      // else if (counter_trig == 2)
      HCSR04_Trigger(HCSR04_SENSOR2);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff fe63 	bl	8001a6c <HCSR04_Trigger>
      // else if (counter_trig == 3)
      HCSR04_Trigger(HCSR04_SENSOR3);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f7ff fe60 	bl	8001a6c <HCSR04_Trigger>
      // else
      //   counter_trig = 0;
      // counter_trig++;
      last_trig_time = current_time;
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <main+0x12c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
    }

    // Cek apakah ada perintah baru dari USB VCP untuk diproses
    if (g_command_ready)
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <main+0x134>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <main+0xf4>
    {
      Process_Command(g_usb_rx_buffer);
 8001dbc:	4817      	ldr	r0, [pc, #92]	@ (8001e1c <main+0x138>)
 8001dbe:	f000 fc71 	bl	80026a4 <Process_Command>
      // Reset buffer dan flag
      memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <main+0x138>)
 8001dc8:	f00c fab0 	bl	800e32c <memset>
      g_rx_index = 0;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <main+0x13c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
      g_command_ready = 0;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <main+0x134>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
    }

    Run_Control_Logic();
 8001dd8:	f000 ffe0 	bl	8002d9c <Run_Control_Logic>

#if GUNAKAN_LCD == 1
    Update_LCD_Display();
 8001ddc:	f001 fa5e 	bl	800329c <Update_LCD_Display>
#endif

    HAL_Delay(100);
 8001de0:	2064      	movs	r0, #100	@ 0x64
 8001de2:	f001 fe7b 	bl	8003adc <HAL_Delay>
  {
 8001de6:	e7bb      	b.n	8001d60 <main+0x7c>
 8001de8:	200003ec 	.word	0x200003ec
 8001dec:	080122e0 	.word	0x080122e0
 8001df0:	200006f4 	.word	0x200006f4
 8001df4:	200004ac 	.word	0x200004ac
 8001df8:	200004f4 	.word	0x200004f4
 8001dfc:	2000053c 	.word	0x2000053c
 8001e00:	080122ec 	.word	0x080122ec
 8001e04:	200007d0 	.word	0x200007d0
 8001e08:	200007d4 	.word	0x200007d4
 8001e0c:	200007d8 	.word	0x200007d8
 8001e10:	200007dc 	.word	0x200007dc
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200007cc 	.word	0x200007cc
 8001e1c:	20000748 	.word	0x20000748
 8001e20:	200007c8 	.word	0x200007c8

08001e24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	@ 0x50
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2e:	2228      	movs	r2, #40	@ 0x28
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00c fa7a 	bl	800e32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001e54:	2309      	movs	r3, #9
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e62:	2301      	movs	r3, #1
 8001e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e66:	2301      	movs	r3, #1
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fd1a 	bl	80068b8 <HAL_RCC_OscConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e8a:	f001 fab7 	bl	80033fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 ff86 	bl	8006dbc <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eb6:	f001 faa1 	bl	80033fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 8001eba:	2311      	movs	r3, #17
 8001ebc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ec4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ec8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 f903 	bl	80070d8 <HAL_RCCEx_PeriphCLKConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ed8:	f001 fa90 	bl	80033fc <Error_Handler>
  }
}
 8001edc:	bf00      	nop
 8001ede:	3750      	adds	r7, #80	@ 0x50
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f002 fac1 	bl	80044a8 <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f001 fa66 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200003ec 	.word	0x200003ec
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	000186a0 	.word	0x000186a0

08001f40 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2100      	movs	r1, #0
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	460a      	mov	r2, r1
 8001f50:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f58:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <MX_RTC_Init+0x90>)
 8001f5a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f62:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f6a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f6c:	4817      	ldr	r0, [pc, #92]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f6e:	f005 fa1f 	bl	80073b0 <HAL_RTC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001f78:	f001 fa40 	bl	80033fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480f      	ldr	r0, [pc, #60]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f90:	f005 fa9a 	bl	80074c8 <HAL_RTC_SetTime>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001f9a:	f001 fa2f 	bl	80033fc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001fb6:	f005 fb1f 	bl	80075f8 <HAL_RTC_SetDate>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001fc0:	f001 fa1c 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000440 	.word	0x20000440
 8001fd0:	40002800 	.word	0x40002800

08001fd4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fd8:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fda:	4a18      	ldr	r2, [pc, #96]	@ (800203c <MX_SPI1_Init+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fde:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fe0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002008:	2208      	movs	r2, #8
 800200a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <MX_SPI1_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <MX_SPI1_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002020:	220a      	movs	r2, #10
 8002022:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002026:	f005 fd47 	bl	8007ab8 <HAL_SPI_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002030:	f001 f9e4 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000454 	.word	0x20000454
 800203c:	40013000 	.word	0x40013000

08002040 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0318 	add.w	r3, r7, #24
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800206a:	4b2c      	ldr	r3, [pc, #176]	@ (800211c <MX_TIM2_Init+0xdc>)
 800206c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002072:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <MX_TIM2_Init+0xdc>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800207e:	4b27      	ldr	r3, [pc, #156]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b25      	ldr	r3, [pc, #148]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b23      	ldr	r3, [pc, #140]	@ (800211c <MX_TIM2_Init+0xdc>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002092:	4822      	ldr	r0, [pc, #136]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002094:	f005 fd94 	bl	8007bc0 <HAL_TIM_Base_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800209e:	f001 f9ad 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	4619      	mov	r1, r3
 80020ae:	481b      	ldr	r0, [pc, #108]	@ (800211c <MX_TIM2_Init+0xdc>)
 80020b0:	f006 f918 	bl	80082e4 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020ba:	f001 f99f 	bl	80033fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020be:	4817      	ldr	r0, [pc, #92]	@ (800211c <MX_TIM2_Init+0xdc>)
 80020c0:	f005 fe20 	bl	8007d04 <HAL_TIM_IC_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ca:	f001 f997 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	480f      	ldr	r0, [pc, #60]	@ (800211c <MX_TIM2_Init+0xdc>)
 80020de:	f006 fc5f 	bl	80089a0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80020e8:	f001 f988 	bl	80033fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020f0:	2301      	movs	r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002104:	f006 f852 	bl	80081ac <HAL_TIM_IC_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800210e:	f001 f975 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	@ 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200004ac 	.word	0x200004ac

08002120 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002126:	f107 0318 	add.w	r3, r7, #24
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800213e:	463b      	mov	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214a:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800214c:	4a2b      	ldr	r2, [pc, #172]	@ (80021fc <MX_TIM3_Init+0xdc>)
 800214e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002150:	4b29      	ldr	r3, [pc, #164]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800215e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002170:	4821      	ldr	r0, [pc, #132]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002172:	f005 fd25 	bl	8007bc0 <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800217c:	f001 f93e 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002184:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4619      	mov	r1, r3
 800218c:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800218e:	f006 f8a9 	bl	80082e4 <HAL_TIM_ConfigClockSource>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002198:	f001 f930 	bl	80033fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800219c:	4816      	ldr	r0, [pc, #88]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800219e:	f005 fdb1 	bl	8007d04 <HAL_TIM_IC_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f001 f928 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4619      	mov	r1, r3
 80021ba:	480f      	ldr	r0, [pc, #60]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 80021bc:	f006 fbf0 	bl	80089a0 <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80021c6:	f001 f919 	bl	80033fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ce:	2301      	movs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 80021e2:	f005 ffe3 	bl	80081ac <HAL_TIM_IC_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80021ec:	f001 f906 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	@ 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200004f4 	.word	0x200004f4
 80021fc:	40000400 	.word	0x40000400

08002200 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800221e:	463b      	mov	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800222a:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800222c:	4a2b      	ldr	r2, [pc, #172]	@ (80022dc <MX_TIM4_Init+0xdc>)
 800222e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800223c:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800223e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002242:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002244:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224a:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002250:	4821      	ldr	r0, [pc, #132]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002252:	f005 fcb5 	bl	8007bc0 <HAL_TIM_Base_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800225c:	f001 f8ce 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002264:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	4619      	mov	r1, r3
 800226c:	481a      	ldr	r0, [pc, #104]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800226e:	f006 f839 	bl	80082e4 <HAL_TIM_ConfigClockSource>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002278:	f001 f8c0 	bl	80033fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800227c:	4816      	ldr	r0, [pc, #88]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800227e:	f005 fd41 	bl	8007d04 <HAL_TIM_IC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002288:	f001 f8b8 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	480f      	ldr	r0, [pc, #60]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800229c:	f006 fb80 	bl	80089a0 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80022a6:	f001 f8a9 	bl	80033fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ae:	2301      	movs	r3, #1
 80022b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 80022c2:	f005 ff73 	bl	80081ac <HAL_TIM_IC_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80022cc:	f001 f896 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	@ 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000053c 	.word	0x2000053c
 80022dc:	40000800 	.word	0x40000800

080022e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	4b39      	ldr	r3, [pc, #228]	@ (80023dc <MX_GPIO_Init+0xfc>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <MX_GPIO_Init+0xfc>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800230c:	4b33      	ldr	r3, [pc, #204]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a32      	ldr	r2, [pc, #200]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a2c      	ldr	r2, [pc, #176]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a26      	ldr	r2, [pc, #152]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	2110      	movs	r1, #16
 8002358:	4821      	ldr	r0, [pc, #132]	@ (80023e0 <MX_GPIO_Init+0x100>)
 800235a:	f002 f88c 	bl	8004476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin | TRIG_1_Pin | TRIG_2_Pin | TRIG_3_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f24f 01ac 	movw	r1, #61612	@ 0xf0ac
 8002364:	481f      	ldr	r0, [pc, #124]	@ (80023e4 <MX_GPIO_Init+0x104>)
 8002366:	f002 f886 	bl	8004476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800236a:	2301      	movs	r3, #1
 800236c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	4818      	ldr	r0, [pc, #96]	@ (80023e0 <MX_GPIO_Init+0x100>)
 800237e:	f001 fedf 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002382:	2310      	movs	r3, #16
 8002384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2302      	movs	r3, #2
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4619      	mov	r1, r3
 8002398:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <MX_GPIO_Init+0x100>)
 800239a:	f001 fed1 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : POMPA_1_ON_Pin POMPA_2_ON_Pin */
  GPIO_InitStruct.Pin = POMPA_1_ON_Pin | POMPA_2_ON_Pin;
 800239e:	2303      	movs	r3, #3
 80023a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	@ (80023e4 <MX_GPIO_Init+0x104>)
 80023b2:	f001 fec5 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin LED_GREEN_Pin LED_RED_Pin POMPA_BA_Pin
                           POMPA_CB_Pin TRIG_1_Pin TRIG_2_Pin TRIG_3_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin | TRIG_1_Pin | TRIG_2_Pin | TRIG_3_Pin;
 80023b6:	f24f 03ac 	movw	r3, #61612	@ 0xf0ac
 80023ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <MX_GPIO_Init+0x104>)
 80023d0:	f001 feb6 	bl	8004140 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010800 	.word	0x40010800
 80023e4:	40010c00 	.word	0x40010c00

080023e8 <find_max_in_sample>:

/* USER CODE BEGIN 4 */
// Function to find the maximum value from a small sample
float find_max_in_sample(float *sample_buffer, float tinggi_drum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  float max_val = 0.0f;
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLE_SIZE; i++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	e014      	b.n	8002428 <find_max_in_sample+0x40>
  {
    if (sample_buffer[i] > max_val)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7fe fe58 	bl	80010c0 <__aeabi_fcmplt>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <find_max_in_sample+0x3a>
    {
      max_val = sample_buffer[i];
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLE_SIZE; i++)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b07      	cmp	r3, #7
 800242c:	dde7      	ble.n	80023fe <find_max_in_sample+0x16>
    }
  }

  if (max_val > tinggi_drum)
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7fe fe63 	bl	80010fc <__aeabi_fcmpgt>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <find_max_in_sample+0x58>
  {
    max_val = tinggi_drum; // jangan sampai nilainya melebihi max tinggi A
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  }

  return max_val;
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <calculate_moving_average>:

// kalkukasi moving average
float calculate_moving_average(float *buffer, uint8_t size, uint8_t is_full)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	4613      	mov	r3, r2
 800245a:	70bb      	strb	r3, [r7, #2]
  float sum = 0.0f;
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint8_t count = is_full ? size : buffer_index_1; // Gunakan jumlah data yang ada
 8002462:	78bb      	ldrb	r3, [r7, #2]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <calculate_moving_average+0x20>
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	e001      	b.n	8002470 <calculate_moving_average+0x24>
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <calculate_moving_average+0x78>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	73fb      	strb	r3, [r7, #15]

  if (count == 0)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <calculate_moving_average+0x32>
    return 0.0f;
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e01e      	b.n	80024bc <calculate_moving_average+0x70>

  for (int i = 0; i < count; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e00d      	b.n	80024a0 <calculate_moving_average+0x54>
  {
    sum += buffer[i];
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7fe fb6f 	bl	8000b74 <__addsf3>
 8002496:	4603      	mov	r3, r0
 8002498:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < count; i++)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3301      	adds	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbed      	blt.n	8002484 <calculate_moving_average+0x38>
  }
  return sum / count;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc16 	bl	8000cdc <__aeabi_i2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	6978      	ldr	r0, [r7, #20]
 80024b6:	f7fe fd19 	bl	8000eec <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200006ec 	.word	0x200006ec

080024c8 <HAL_TIM_IC_CaptureCallback>:

  return sum_weighted_values / sum_of_weights;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_IC_ISR(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff f86d 	bl	80015b0 <HCSR04_TMR_IC_ISR>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_OVF_ISR(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff f828 	bl	800153c <HCSR04_TMR_OVF_ISR>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <VCP_printf>:

/**
 * @brief Mengirim string terformat melalui USB VCP.
 */
void VCP_printf(const char *format, ...)
{
 80024f4:	b40f      	push	{r0, r1, r2, r3}
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b0a2      	sub	sp, #136	@ 0x88
 80024fa:	af00      	add	r7, sp, #0
  char buf[126];
  va_list args;
  va_start(args, format);
 80024fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002500:	607b      	str	r3, [r7, #4]
  vsnprintf(buf, sizeof(buf), format, args);
 8002502:	f107 0008 	add.w	r0, r7, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800250c:	217e      	movs	r1, #126	@ 0x7e
 800250e:	f00b feff 	bl	800e310 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe1a 	bl	8000150 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	b29a      	uxth	r2, r3
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f00a fb2c 	bl	800cb84 <CDC_Transmit_FS>
}
 800252c:	bf00      	nop
 800252e:	3788      	adds	r7, #136	@ 0x88
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002536:	b004      	add	sp, #16
 8002538:	4770      	bx	lr
	...

0800253c <Set_Default_Parameters>:

/**
 * @brief Mengatur parameter ke nilai default.
 */
void Set_Default_Parameters(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  g_params.magic_number = FLASH_MAGIC_NUMBER;
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <Set_Default_Parameters+0x5c>)
 8002544:	601a      	str	r2, [r3, #0]
  g_params.tinggi_A = 85.0f;
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <Set_Default_Parameters+0x60>)
 800254a:	605a      	str	r2, [r3, #4]
  g_params.ambang_bawah_A = 70.0f;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <Set_Default_Parameters+0x58>)
 800254e:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <Set_Default_Parameters+0x64>)
 8002550:	609a      	str	r2, [r3, #8]
  g_params.target_penuh_A = 74.0f;
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002554:	4a13      	ldr	r2, [pc, #76]	@ (80025a4 <Set_Default_Parameters+0x68>)
 8002556:	60da      	str	r2, [r3, #12]
  g_params.tinggi_B = 85.0f;
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <Set_Default_Parameters+0x58>)
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <Set_Default_Parameters+0x60>)
 800255c:	611a      	str	r2, [r3, #16]
  g_params.ambang_bawah_B = 70.0f;
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <Set_Default_Parameters+0x64>)
 8002562:	615a      	str	r2, [r3, #20]
  g_params.target_penuh_B = 74.0f;
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002566:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <Set_Default_Parameters+0x68>)
 8002568:	619a      	str	r2, [r3, #24]
  g_params.tinggi_C = 85.0f;
 800256a:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <Set_Default_Parameters+0x58>)
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <Set_Default_Parameters+0x60>)
 800256e:	61da      	str	r2, [r3, #28]
  g_params.ambang_bawah_C = 70.0f;
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002572:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <Set_Default_Parameters+0x64>)
 8002574:	621a      	str	r2, [r3, #32]
  g_params.target_penuh_C = 74.0f;
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <Set_Default_Parameters+0x68>)
 800257a:	625a      	str	r2, [r3, #36]	@ 0x24
  g_params.sumber_kosong = 1.0f;
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <Set_Default_Parameters+0x58>)
 800257e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
  g_params.moving_avg_size = 30; // Nilai default 5
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002586:	221e      	movs	r2, #30
 8002588:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	20000718 	.word	0x20000718
 8002598:	deadbeef 	.word	0xdeadbeef
 800259c:	42aa0000 	.word	0x42aa0000
 80025a0:	428c0000 	.word	0x428c0000
 80025a4:	42940000 	.word	0x42940000

080025a8 <Save_Parameters_To_Flash>:

/**
 * @brief Menyimpan parameter ke Flash.
 */
void Save_Parameters_To_Flash(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 80025ae:	f001 fc37 	bl	8003e20 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  EraseInitStruct.PageAddress = FLASH_STORAGE_ADDRESS;
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <Save_Parameters_To_Flash+0x94>)
 80025bc:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.NbPages = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80025c2:	463a      	mov	r2, r7
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fd11 	bl	8003ff0 <HAL_FLASHEx_Erase>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <Save_Parameters_To_Flash+0x38>
  {
    VCP_printf("Error: Gagal menghapus Flash!\r\n");
 80025d4:	481a      	ldr	r0, [pc, #104]	@ (8002640 <Save_Parameters_To_Flash+0x98>)
 80025d6:	f7ff ff8d 	bl	80024f4 <VCP_printf>
    HAL_FLASH_Lock();
 80025da:	f001 fc47 	bl	8003e6c <HAL_FLASH_Lock>
 80025de:	e029      	b.n	8002634 <Save_Parameters_To_Flash+0x8c>
    return;
  }

  uint32_t address = FLASH_STORAGE_ADDRESS;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <Save_Parameters_To_Flash+0x94>)
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t *data_ptr = (uint32_t *)&g_params;
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <Save_Parameters_To_Flash+0x9c>)
 80025e6:	617b      	str	r3, [r7, #20]
  for (size_t i = 0; i < sizeof(ControlParams) / 4; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e01a      	b.n	8002624 <Save_Parameters_To_Flash+0x7c>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data_ptr[i]) != HAL_OK)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4413      	add	r3, r2
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	461c      	mov	r4, r3
 80025fc:	4615      	mov	r5, r2
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	69f9      	ldr	r1, [r7, #28]
 8002604:	2002      	movs	r0, #2
 8002606:	f001 fb9b 	bl	8003d40 <HAL_FLASH_Program>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <Save_Parameters_To_Flash+0x70>
    {
      VCP_printf("Error: Gagal menulis ke Flash!\r\n");
 8002610:	480d      	ldr	r0, [pc, #52]	@ (8002648 <Save_Parameters_To_Flash+0xa0>)
 8002612:	f7ff ff6f 	bl	80024f4 <VCP_printf>
      break;
 8002616:	e008      	b.n	800262a <Save_Parameters_To_Flash+0x82>
    }
    address += 4;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	3304      	adds	r3, #4
 800261c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < sizeof(ControlParams) / 4; i++)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3301      	adds	r3, #1
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0b      	cmp	r3, #11
 8002628:	d9e1      	bls.n	80025ee <Save_Parameters_To_Flash+0x46>
  }

  HAL_FLASH_Lock();
 800262a:	f001 fc1f 	bl	8003e6c <HAL_FLASH_Lock>
  VCP_printf("OK: Parameter berhasil disimpan ke Flash.\r\n");
 800262e:	4807      	ldr	r0, [pc, #28]	@ (800264c <Save_Parameters_To_Flash+0xa4>)
 8002630:	f7ff ff60 	bl	80024f4 <VCP_printf>
}
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bdb0      	pop	{r4, r5, r7, pc}
 800263a:	bf00      	nop
 800263c:	0800fc00 	.word	0x0800fc00
 8002640:	08012324 	.word	0x08012324
 8002644:	20000718 	.word	0x20000718
 8002648:	08012344 	.word	0x08012344
 800264c:	08012368 	.word	0x08012368

08002650 <Load_Parameters_From_Flash>:

/**
 * @brief Memuat parameter dari Flash. Jika gagal, gunakan nilai default.
 */
void Load_Parameters_From_Flash(void)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b08c      	sub	sp, #48	@ 0x30
 8002654:	af00      	add	r7, sp, #0
  ControlParams params_from_flash;
  memcpy(&params_from_flash, (void *)FLASH_STORAGE_ADDRESS,
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <Load_Parameters_From_Flash+0x48>)
 8002658:	463c      	mov	r4, r7
 800265a:	461d      	mov	r5, r3
 800265c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002664:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         sizeof(ControlParams));

  if (params_from_flash.magic_number == FLASH_MAGIC_NUMBER)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <Load_Parameters_From_Flash+0x4c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10b      	bne.n	800268c <Load_Parameters_From_Flash+0x3c>
  {
    memcpy(&g_params, &params_from_flash, sizeof(ControlParams));
 8002674:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <Load_Parameters_From_Flash+0x50>)
 8002676:	461d      	mov	r5, r3
 8002678:	463c      	mov	r4, r7
 800267a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002682:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002686:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  }
  else
  {
    Set_Default_Parameters();
  }
}
 800268a:	e001      	b.n	8002690 <Load_Parameters_From_Flash+0x40>
    Set_Default_Parameters();
 800268c:	f7ff ff56 	bl	800253c <Set_Default_Parameters>
}
 8002690:	bf00      	nop
 8002692:	3730      	adds	r7, #48	@ 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	0800fc00 	.word	0x0800fc00
 800269c:	deadbeef 	.word	0xdeadbeef
 80026a0:	20000718 	.word	0x20000718

080026a4 <Process_Command>:

/**
 * @brief Memproses perintah yang diterima dari USB VCP.
 */
void Process_Command(uint8_t *cmd_buffer)
{
 80026a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026a8:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80026b2:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80026b6:	6018      	str	r0, [r3, #0]
  char *cmd = (char *)cmd_buffer;
 80026b8:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80026bc:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
  float min, max;
  uint16_t val;

  if (strncmp(cmd, "$$", 2) == 0)
 80026c6:	2202      	movs	r2, #2
 80026c8:	49a3      	ldr	r1, [pc, #652]	@ (8002958 <Process_Command+0x2b4>)
 80026ca:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 80026ce:	f00b fe35 	bl	800e33c <strncmp>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 80b0 	bne.w	800283a <Process_Command+0x196>
  {
    char large_buffer[2048]; // Gunakan buffer yang lebih besar
    int len = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    len += sprintf(large_buffer + len, "--- Parameter Saat Ini ---\r\n");
 80026e0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	4413      	add	r3, r2
 80026ea:	499c      	ldr	r1, [pc, #624]	@ (800295c <Process_Command+0x2b8>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00b fd4d 	bl	800e18c <siprintf>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80026f8:	4413      	add	r3, r2
 80026fa:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_A, g_params.ambang_bawah_A, g_params.target_penuh_A);
 80026fe:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002702:	f107 020c 	add.w	r2, r7, #12
 8002706:	18d6      	adds	r6, r2, r3
 8002708:	4b95      	ldr	r3, [pc, #596]	@ (8002960 <Process_Command+0x2bc>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fe8b 	bl	8000428 <__aeabi_f2d>
 8002712:	4680      	mov	r8, r0
 8002714:	4689      	mov	r9, r1
 8002716:	4b92      	ldr	r3, [pc, #584]	@ (8002960 <Process_Command+0x2bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fe84 	bl	8000428 <__aeabi_f2d>
 8002720:	4604      	mov	r4, r0
 8002722:	460d      	mov	r5, r1
 8002724:	4b8e      	ldr	r3, [pc, #568]	@ (8002960 <Process_Command+0x2bc>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fe7d 	bl	8000428 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002736:	e9cd 4500 	strd	r4, r5, [sp]
 800273a:	4642      	mov	r2, r8
 800273c:	464b      	mov	r3, r9
 800273e:	4989      	ldr	r1, [pc, #548]	@ (8002964 <Process_Command+0x2c0>)
 8002740:	4630      	mov	r0, r6
 8002742:	f00b fd23 	bl	800e18c <siprintf>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800274c:	4413      	add	r3, r2
 800274e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_B, g_params.ambang_bawah_B, g_params.target_penuh_B);
 8002752:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002756:	f107 020c 	add.w	r2, r7, #12
 800275a:	18d6      	adds	r6, r2, r3
 800275c:	4b80      	ldr	r3, [pc, #512]	@ (8002960 <Process_Command+0x2bc>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fe61 	bl	8000428 <__aeabi_f2d>
 8002766:	4680      	mov	r8, r0
 8002768:	4689      	mov	r9, r1
 800276a:	4b7d      	ldr	r3, [pc, #500]	@ (8002960 <Process_Command+0x2bc>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe5a 	bl	8000428 <__aeabi_f2d>
 8002774:	4604      	mov	r4, r0
 8002776:	460d      	mov	r5, r1
 8002778:	4b79      	ldr	r3, [pc, #484]	@ (8002960 <Process_Command+0x2bc>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fe53 	bl	8000428 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800278a:	e9cd 4500 	strd	r4, r5, [sp]
 800278e:	4642      	mov	r2, r8
 8002790:	464b      	mov	r3, r9
 8002792:	4975      	ldr	r1, [pc, #468]	@ (8002968 <Process_Command+0x2c4>)
 8002794:	4630      	mov	r0, r6
 8002796:	f00b fcf9 	bl	800e18c <siprintf>
 800279a:	4602      	mov	r2, r0
 800279c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027a0:	4413      	add	r3, r2
 80027a2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_C, g_params.ambang_bawah_C, g_params.target_penuh_C);
 80027a6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027aa:	f107 020c 	add.w	r2, r7, #12
 80027ae:	18d6      	adds	r6, r2, r3
 80027b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002960 <Process_Command+0x2bc>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe37 	bl	8000428 <__aeabi_f2d>
 80027ba:	4680      	mov	r8, r0
 80027bc:	4689      	mov	r9, r1
 80027be:	4b68      	ldr	r3, [pc, #416]	@ (8002960 <Process_Command+0x2bc>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe30 	bl	8000428 <__aeabi_f2d>
 80027c8:	4604      	mov	r4, r0
 80027ca:	460d      	mov	r5, r1
 80027cc:	4b64      	ldr	r3, [pc, #400]	@ (8002960 <Process_Command+0x2bc>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe29 	bl	8000428 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027de:	e9cd 4500 	strd	r4, r5, [sp]
 80027e2:	4642      	mov	r2, r8
 80027e4:	464b      	mov	r3, r9
 80027e6:	4961      	ldr	r1, [pc, #388]	@ (800296c <Process_Command+0x2c8>)
 80027e8:	4630      	mov	r0, r6
 80027ea:	f00b fccf 	bl	800e18c <siprintf>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027f4:	4413      	add	r3, r2
 80027f6:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Ambang Sumber Kosong: %.1f%%\r\n", g_params.sumber_kosong);
 80027fa:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	18d4      	adds	r4, r2, r3
 8002804:	4b56      	ldr	r3, [pc, #344]	@ (8002960 <Process_Command+0x2bc>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe0d 	bl	8000428 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4957      	ldr	r1, [pc, #348]	@ (8002970 <Process_Command+0x2cc>)
 8002814:	4620      	mov	r0, r4
 8002816:	f00b fcb9 	bl	800e18c <siprintf>
 800281a:	4602      	mov	r2, r0
 800281c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002820:	4413      	add	r3, r2
 8002822:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002826:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800282a:	b29a      	uxth	r2, r3
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f00a f9a6 	bl	800cb84 <CDC_Transmit_FS>
  else
  {
    VCP_printf(
        "Error: Perintah tidak dikenali. Ketik '$H' untuk bantuan.\r\n");
  }
}
 8002838:	e2a4      	b.n	8002d84 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$P", 2) == 0)
 800283a:	2202      	movs	r2, #2
 800283c:	494d      	ldr	r1, [pc, #308]	@ (8002974 <Process_Command+0x2d0>)
 800283e:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002842:	f00b fd7b 	bl	800e33c <strncmp>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 80a5 	bne.w	8002998 <Process_Command+0x2f4>
    int len = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "--- Daftar Pin ---\r\n");
 8002854:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002858:	f107 020c 	add.w	r2, r7, #12
 800285c:	4413      	add	r3, r2
 800285e:	4946      	ldr	r1, [pc, #280]	@ (8002978 <Process_Command+0x2d4>)
 8002860:	4618      	mov	r0, r3
 8002862:	f00b fc93 	bl	800e18c <siprintf>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800286c:	4413      	add	r3, r2
 800286e:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor A (TIM2_CH1): PB3 (TRIG), PA15 (ECHO)\r\n");
 8002872:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002876:	f107 020c 	add.w	r2, r7, #12
 800287a:	4413      	add	r3, r2
 800287c:	493f      	ldr	r1, [pc, #252]	@ (800297c <Process_Command+0x2d8>)
 800287e:	4618      	mov	r0, r3
 8002880:	f00b fc84 	bl	800e18c <siprintf>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800288a:	4413      	add	r3, r2
 800288c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor B (TIM3_CH1): PB5 (TRIG), PB4 (ECHO)\r\n");
 8002890:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002894:	f107 020c 	add.w	r2, r7, #12
 8002898:	4413      	add	r3, r2
 800289a:	4939      	ldr	r1, [pc, #228]	@ (8002980 <Process_Command+0x2dc>)
 800289c:	4618      	mov	r0, r3
 800289e:	f00b fc75 	bl	800e18c <siprintf>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028a8:	4413      	add	r3, r2
 80028aa:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor C (TIM4_CH1): PB7 (TRIG), PB6 (ECHO)\r\n");
 80028ae:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028b2:	f107 020c 	add.w	r2, r7, #12
 80028b6:	4413      	add	r3, r2
 80028b8:	4932      	ldr	r1, [pc, #200]	@ (8002984 <Process_Command+0x2e0>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00b fc66 	bl	800e18c <siprintf>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028c6:	4413      	add	r3, r2
 80028c8:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Pompa B->A: PB14\r\n");
 80028cc:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028d0:	f107 020c 	add.w	r2, r7, #12
 80028d4:	4413      	add	r3, r2
 80028d6:	492c      	ldr	r1, [pc, #176]	@ (8002988 <Process_Command+0x2e4>)
 80028d8:	4618      	mov	r0, r3
 80028da:	f00b fc57 	bl	800e18c <siprintf>
 80028de:	4602      	mov	r2, r0
 80028e0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028e4:	4413      	add	r3, r2
 80028e6:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Pompa C->B: PB15\r\n");
 80028ea:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028ee:	f107 020c 	add.w	r2, r7, #12
 80028f2:	4413      	add	r3, r2
 80028f4:	4925      	ldr	r1, [pc, #148]	@ (800298c <Process_Command+0x2e8>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f00b fc48 	bl	800e18c <siprintf>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002902:	4413      	add	r3, r2
 8002904:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "LED Merah (Alert): PB13\r\n");
 8002908:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	4413      	add	r3, r2
 8002912:	491f      	ldr	r1, [pc, #124]	@ (8002990 <Process_Command+0x2ec>)
 8002914:	4618      	mov	r0, r3
 8002916:	f00b fc39 	bl	800e18c <siprintf>
 800291a:	4602      	mov	r2, r0
 800291c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002920:	4413      	add	r3, r2
 8002922:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "LCD I2C (I2C1): PB6 (SCL), PB7 (SDA)\r\n");
 8002926:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800292a:	f107 020c 	add.w	r2, r7, #12
 800292e:	4413      	add	r3, r2
 8002930:	4918      	ldr	r1, [pc, #96]	@ (8002994 <Process_Command+0x2f0>)
 8002932:	4618      	mov	r0, r3
 8002934:	f00b fc2a 	bl	800e18c <siprintf>
 8002938:	4602      	mov	r2, r0
 800293a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800293e:	4413      	add	r3, r2
 8002940:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002944:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002948:	b29a      	uxth	r2, r3
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f00a f917 	bl	800cb84 <CDC_Transmit_FS>
}
 8002956:	e215      	b.n	8002d84 <Process_Command+0x6e0>
 8002958:	08012394 	.word	0x08012394
 800295c:	08012398 	.word	0x08012398
 8002960:	20000718 	.word	0x20000718
 8002964:	080123b8 	.word	0x080123b8
 8002968:	080123e8 	.word	0x080123e8
 800296c:	08012418 	.word	0x08012418
 8002970:	08012448 	.word	0x08012448
 8002974:	08012468 	.word	0x08012468
 8002978:	0801246c 	.word	0x0801246c
 800297c:	08012484 	.word	0x08012484
 8002980:	080124b4 	.word	0x080124b4
 8002984:	080124e4 	.word	0x080124e4
 8002988:	08012514 	.word	0x08012514
 800298c:	08012528 	.word	0x08012528
 8002990:	0801253c 	.word	0x0801253c
 8002994:	08012558 	.word	0x08012558
  else if (strncmp(cmd, "$H", 2) == 0)
 8002998:	2202      	movs	r2, #2
 800299a:	49ce      	ldr	r1, [pc, #824]	@ (8002cd4 <Process_Command+0x630>)
 800299c:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 80029a0:	f00b fccc 	bl	800e33c <strncmp>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80b2 	bne.w	8002b10 <Process_Command+0x46c>
    int len = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "--- Bantuan ---\r\n");
 80029b2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029b6:	f107 020c 	add.w	r2, r7, #12
 80029ba:	4413      	add	r3, r2
 80029bc:	49c6      	ldr	r1, [pc, #792]	@ (8002cd8 <Process_Command+0x634>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f00b fbe4 	bl	800e18c <siprintf>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029ca:	4413      	add	r3, r2
 80029cc:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$$          : Lihat semua parameter\r\n");
 80029d0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029d4:	f107 020c 	add.w	r2, r7, #12
 80029d8:	4413      	add	r3, r2
 80029da:	49c0      	ldr	r1, [pc, #768]	@ (8002cdc <Process_Command+0x638>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f00b fbd5 	bl	800e18c <siprintf>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029e8:	4413      	add	r3, r2
 80029ea:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$P          : Lihat daftar pin\r\n");
 80029ee:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029f2:	f107 020c 	add.w	r2, r7, #12
 80029f6:	4413      	add	r3, r2
 80029f8:	49b9      	ldr	r1, [pc, #740]	@ (8002ce0 <Process_Command+0x63c>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00b fbc6 	bl	800e18c <siprintf>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a06:	4413      	add	r3, r2
 8002a08:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$H          : Tampilkan pesan ini\r\n");
 8002a0c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	4413      	add	r3, r2
 8002a16:	49b3      	ldr	r1, [pc, #716]	@ (8002ce4 <Process_Command+0x640>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00b fbb7 	bl	800e18c <siprintf>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a24:	4413      	add	r3, r2
 8002a26:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$1=<min>,<max> : Set ambang batas Drum A\r\n");
 8002a2a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	4413      	add	r3, r2
 8002a34:	49ac      	ldr	r1, [pc, #688]	@ (8002ce8 <Process_Command+0x644>)
 8002a36:	4618      	mov	r0, r3
 8002a38:	f00b fba8 	bl	800e18c <siprintf>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a42:	4413      	add	r3, r2
 8002a44:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$2=<min>,<max> : Set ambang batas Drum B\r\n");
 8002a48:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	4413      	add	r3, r2
 8002a52:	49a6      	ldr	r1, [pc, #664]	@ (8002cec <Process_Command+0x648>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00b fb99 	bl	800e18c <siprintf>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a60:	4413      	add	r3, r2
 8002a62:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$3=<min>,<max> : Set ambang batas Drum C\r\n");
 8002a66:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a6a:	f107 020c 	add.w	r2, r7, #12
 8002a6e:	4413      	add	r3, r2
 8002a70:	499f      	ldr	r1, [pc, #636]	@ (8002cf0 <Process_Command+0x64c>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00b fb8a 	bl	800e18c <siprintf>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a7e:	4413      	add	r3, r2
 8002a80:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$M=<num>       : Set nilai mov avrg sensor\r\n");
 8002a84:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a88:	f107 020c 	add.w	r2, r7, #12
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4999      	ldr	r1, [pc, #612]	@ (8002cf4 <Process_Command+0x650>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00b fb7b 	bl	800e18c <siprintf>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$S          : Simpan parameter ke Flash\r\n");
 8002aa2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002aa6:	f107 020c 	add.w	r2, r7, #12
 8002aaa:	4413      	add	r3, r2
 8002aac:	4992      	ldr	r1, [pc, #584]	@ (8002cf8 <Process_Command+0x654>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00b fb6c 	bl	800e18c <siprintf>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002aba:	4413      	add	r3, r2
 8002abc:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$L          : Muat parameter dari Flash\r\n");
 8002ac0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ac4:	f107 020c 	add.w	r2, r7, #12
 8002ac8:	4413      	add	r3, r2
 8002aca:	498c      	ldr	r1, [pc, #560]	@ (8002cfc <Process_Command+0x658>)
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00b fb5d 	bl	800e18c <siprintf>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ad8:	4413      	add	r3, r2
 8002ada:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$D          : Kembalikan ke pengaturan default\r\n");
 8002ade:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4985      	ldr	r1, [pc, #532]	@ (8002d00 <Process_Command+0x65c>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00b fb4e 	bl	800e18c <siprintf>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002af6:	4413      	add	r3, r2
 8002af8:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002afc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00a f83b 	bl	800cb84 <CDC_Transmit_FS>
}
 8002b0e:	e139      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$1=%f,%f", &min, &max) == 2)
 8002b10:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002b14:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002b18:	497a      	ldr	r1, [pc, #488]	@ (8002d04 <Process_Command+0x660>)
 8002b1a:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002b1e:	f00b fb57 	bl	800e1d0 <siscanf>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d11d      	bne.n	8002b64 <Process_Command+0x4c0>
    g_params.ambang_bawah_A = min;
 8002b28:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b2c:	4a76      	ldr	r2, [pc, #472]	@ (8002d08 <Process_Command+0x664>)
 8002b2e:	6093      	str	r3, [r2, #8]
    g_params.target_penuh_A = max;
 8002b30:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b34:	4a74      	ldr	r2, [pc, #464]	@ (8002d08 <Process_Command+0x664>)
 8002b36:	60d3      	str	r3, [r2, #12]
    VCP_printf("OK: Parameter Drum A diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002b38:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fc73 	bl	8000428 <__aeabi_f2d>
 8002b42:	4604      	mov	r4, r0
 8002b44:	460d      	mov	r5, r1
 8002b46:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fc6c 	bl	8000428 <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	e9cd 2300 	strd	r2, r3, [sp]
 8002b58:	4622      	mov	r2, r4
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	486b      	ldr	r0, [pc, #428]	@ (8002d0c <Process_Command+0x668>)
 8002b5e:	f7ff fcc9 	bl	80024f4 <VCP_printf>
}
 8002b62:	e10f      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$2=%f,%f", &min, &max) == 2)
 8002b64:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002b68:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002b6c:	4968      	ldr	r1, [pc, #416]	@ (8002d10 <Process_Command+0x66c>)
 8002b6e:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002b72:	f00b fb2d 	bl	800e1d0 <siscanf>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11d      	bne.n	8002bb8 <Process_Command+0x514>
    g_params.ambang_bawah_B = min;
 8002b7c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b80:	4a61      	ldr	r2, [pc, #388]	@ (8002d08 <Process_Command+0x664>)
 8002b82:	6153      	str	r3, [r2, #20]
    g_params.target_penuh_B = max;
 8002b84:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b88:	4a5f      	ldr	r2, [pc, #380]	@ (8002d08 <Process_Command+0x664>)
 8002b8a:	6193      	str	r3, [r2, #24]
    VCP_printf("OK: Parameter Drum B diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002b8c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc49 	bl	8000428 <__aeabi_f2d>
 8002b96:	4604      	mov	r4, r0
 8002b98:	460d      	mov	r5, r1
 8002b9a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fc42 	bl	8000428 <__aeabi_f2d>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bac:	4622      	mov	r2, r4
 8002bae:	462b      	mov	r3, r5
 8002bb0:	4858      	ldr	r0, [pc, #352]	@ (8002d14 <Process_Command+0x670>)
 8002bb2:	f7ff fc9f 	bl	80024f4 <VCP_printf>
}
 8002bb6:	e0e5      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$3=%f,%f", &min, &max) == 2)
 8002bb8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002bbc:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002bc0:	4955      	ldr	r1, [pc, #340]	@ (8002d18 <Process_Command+0x674>)
 8002bc2:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002bc6:	f00b fb03 	bl	800e1d0 <siscanf>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11d      	bne.n	8002c0c <Process_Command+0x568>
    g_params.ambang_bawah_C = min;
 8002bd0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002d08 <Process_Command+0x664>)
 8002bd6:	6213      	str	r3, [r2, #32]
    g_params.target_penuh_C = max;
 8002bd8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d08 <Process_Command+0x664>)
 8002bde:	6253      	str	r3, [r2, #36]	@ 0x24
    VCP_printf("OK: Parameter Drum C diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002be0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fc1f 	bl	8000428 <__aeabi_f2d>
 8002bea:	4604      	mov	r4, r0
 8002bec:	460d      	mov	r5, r1
 8002bee:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc18 	bl	8000428 <__aeabi_f2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8002c00:	4622      	mov	r2, r4
 8002c02:	462b      	mov	r3, r5
 8002c04:	4845      	ldr	r0, [pc, #276]	@ (8002d1c <Process_Command+0x678>)
 8002c06:	f7ff fc75 	bl	80024f4 <VCP_printf>
}
 8002c0a:	e0bb      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$M=%hd", &val) == 1)
 8002c0c:	f607 030e 	addw	r3, r7, #2062	@ 0x80e
 8002c10:	461a      	mov	r2, r3
 8002c12:	4943      	ldr	r1, [pc, #268]	@ (8002d20 <Process_Command+0x67c>)
 8002c14:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002c18:	f00b fada 	bl	800e1d0 <siscanf>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d13a      	bne.n	8002c98 <Process_Command+0x5f4>
    if (val > 0 && val <= MAX_MOVING_AVG_SIZE)
 8002c22:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d031      	beq.n	8002c8e <Process_Command+0x5ea>
 8002c2a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c2e:	2b0a      	cmp	r3, #10
 8002c30:	d82d      	bhi.n	8002c8e <Process_Command+0x5ea>
      g_params.moving_avg_size = (uint8_t)val;
 8002c32:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b33      	ldr	r3, [pc, #204]	@ (8002d08 <Process_Command+0x664>)
 8002c3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
      VCP_printf("OK: Ukuran Moving Average diubah -> %d\r\n", val);
 8002c3e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c42:	4619      	mov	r1, r3
 8002c44:	4837      	ldr	r0, [pc, #220]	@ (8002d24 <Process_Command+0x680>)
 8002c46:	f7ff fc55 	bl	80024f4 <VCP_printf>
      memset(Distance1_buffer, 0, sizeof(Distance1_buffer));
 8002c4a:	2228      	movs	r2, #40	@ 0x28
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4836      	ldr	r0, [pc, #216]	@ (8002d28 <Process_Command+0x684>)
 8002c50:	f00b fb6c 	bl	800e32c <memset>
      memset(Distance2_buffer, 0, sizeof(Distance2_buffer));
 8002c54:	2228      	movs	r2, #40	@ 0x28
 8002c56:	2100      	movs	r1, #0
 8002c58:	4834      	ldr	r0, [pc, #208]	@ (8002d2c <Process_Command+0x688>)
 8002c5a:	f00b fb67 	bl	800e32c <memset>
      memset(Distance3_buffer, 0, sizeof(Distance3_buffer));
 8002c5e:	2228      	movs	r2, #40	@ 0x28
 8002c60:	2100      	movs	r1, #0
 8002c62:	4833      	ldr	r0, [pc, #204]	@ (8002d30 <Process_Command+0x68c>)
 8002c64:	f00b fb62 	bl	800e32c <memset>
      buffer_index_1 = 0;
 8002c68:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <Process_Command+0x690>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
      buffer_index_2 = 0;
 8002c6e:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <Process_Command+0x694>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
      buffer_index_3 = 0;
 8002c74:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <Process_Command+0x698>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
      is_buffer_full_1 = 0;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <Process_Command+0x69c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
      is_buffer_full_2 = 0;
 8002c80:	4b30      	ldr	r3, [pc, #192]	@ (8002d44 <Process_Command+0x6a0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
      is_buffer_full_3 = 0;
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <Process_Command+0x6a4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
}
 8002c8c:	e07a      	b.n	8002d84 <Process_Command+0x6e0>
      VCP_printf("Error: Ukuran Moving Average tidak valid (1-%d).\r\n", MAX_MOVING_AVG_SIZE);
 8002c8e:	210a      	movs	r1, #10
 8002c90:	482e      	ldr	r0, [pc, #184]	@ (8002d4c <Process_Command+0x6a8>)
 8002c92:	f7ff fc2f 	bl	80024f4 <VCP_printf>
}
 8002c96:	e075      	b.n	8002d84 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$S", 2) == 0)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	492d      	ldr	r1, [pc, #180]	@ (8002d50 <Process_Command+0x6ac>)
 8002c9c:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002ca0:	f00b fb4c 	bl	800e33c <strncmp>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <Process_Command+0x612>
    Save_Parameters_To_Flash();
 8002caa:	f7ff fc7d 	bl	80025a8 <Save_Parameters_To_Flash>
    VCP_printf("OK: Parameter disimpan ke Flash.\r\n");
 8002cae:	4829      	ldr	r0, [pc, #164]	@ (8002d54 <Process_Command+0x6b0>)
 8002cb0:	f7ff fc20 	bl	80024f4 <VCP_printf>
}
 8002cb4:	e066      	b.n	8002d84 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$L", 2) == 0)
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4927      	ldr	r1, [pc, #156]	@ (8002d58 <Process_Command+0x6b4>)
 8002cba:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002cbe:	f00b fb3d 	bl	800e33c <strncmp>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d14b      	bne.n	8002d60 <Process_Command+0x6bc>
    Load_Parameters_From_Flash();
 8002cc8:	f7ff fcc2 	bl	8002650 <Load_Parameters_From_Flash>
    VCP_printf("OK: Parameter dimuat dari Flash.\r\n");
 8002ccc:	4823      	ldr	r0, [pc, #140]	@ (8002d5c <Process_Command+0x6b8>)
 8002cce:	f7ff fc11 	bl	80024f4 <VCP_printf>
}
 8002cd2:	e057      	b.n	8002d84 <Process_Command+0x6e0>
 8002cd4:	08012580 	.word	0x08012580
 8002cd8:	08012584 	.word	0x08012584
 8002cdc:	08012598 	.word	0x08012598
 8002ce0:	080125c0 	.word	0x080125c0
 8002ce4:	080125e4 	.word	0x080125e4
 8002ce8:	08012608 	.word	0x08012608
 8002cec:	08012634 	.word	0x08012634
 8002cf0:	08012660 	.word	0x08012660
 8002cf4:	0801268c 	.word	0x0801268c
 8002cf8:	080126bc 	.word	0x080126bc
 8002cfc:	080126e8 	.word	0x080126e8
 8002d00:	08012714 	.word	0x08012714
 8002d04:	08012748 	.word	0x08012748
 8002d08:	20000718 	.word	0x20000718
 8002d0c:	08012754 	.word	0x08012754
 8002d10:	08012788 	.word	0x08012788
 8002d14:	08012794 	.word	0x08012794
 8002d18:	080127c8 	.word	0x080127c8
 8002d1c:	080127d4 	.word	0x080127d4
 8002d20:	08012808 	.word	0x08012808
 8002d24:	08012810 	.word	0x08012810
 8002d28:	20000668 	.word	0x20000668
 8002d2c:	20000690 	.word	0x20000690
 8002d30:	200006b8 	.word	0x200006b8
 8002d34:	200006ec 	.word	0x200006ec
 8002d38:	200006ed 	.word	0x200006ed
 8002d3c:	200006ee 	.word	0x200006ee
 8002d40:	200006ef 	.word	0x200006ef
 8002d44:	200006f0 	.word	0x200006f0
 8002d48:	200006f1 	.word	0x200006f1
 8002d4c:	0801283c 	.word	0x0801283c
 8002d50:	08012870 	.word	0x08012870
 8002d54:	08012874 	.word	0x08012874
 8002d58:	08012898 	.word	0x08012898
 8002d5c:	0801289c 	.word	0x0801289c
  else if (strncmp(cmd, "$D", 2) == 0)
 8002d60:	2202      	movs	r2, #2
 8002d62:	490b      	ldr	r1, [pc, #44]	@ (8002d90 <Process_Command+0x6ec>)
 8002d64:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002d68:	f00b fae8 	bl	800e33c <strncmp>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <Process_Command+0x6da>
    Set_Default_Parameters();
 8002d72:	f7ff fbe3 	bl	800253c <Set_Default_Parameters>
    VCP_printf("OK: Parameter dikembalikan ke default.\r\n");
 8002d76:	4807      	ldr	r0, [pc, #28]	@ (8002d94 <Process_Command+0x6f0>)
 8002d78:	f7ff fbbc 	bl	80024f4 <VCP_printf>
}
 8002d7c:	e002      	b.n	8002d84 <Process_Command+0x6e0>
    VCP_printf(
 8002d7e:	4806      	ldr	r0, [pc, #24]	@ (8002d98 <Process_Command+0x6f4>)
 8002d80:	f7ff fbb8 	bl	80024f4 <VCP_printf>
}
 8002d84:	bf00      	nop
 8002d86:	f607 072c 	addw	r7, r7, #2092	@ 0x82c
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d90:	080128c0 	.word	0x080128c0
 8002d94:	080128c4 	.word	0x080128c4
 8002d98:	080128f0 	.word	0x080128f0

08002d9c <Run_Control_Logic>:

void Run_Control_Logic(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
  // Collect 8 samples before processing
  sample_buffer1[sample_counter] = Distance1;
 8002da2:	4b94      	ldr	r3, [pc, #592]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	4b93      	ldr	r3, [pc, #588]	@ (8002ff8 <Run_Control_Logic+0x25c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a93      	ldr	r2, [pc, #588]	@ (8002ffc <Run_Control_Logic+0x260>)
 8002dae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  sample_buffer2[sample_counter] = Distance2;
 8002db2:	4b90      	ldr	r3, [pc, #576]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4b91      	ldr	r3, [pc, #580]	@ (8003000 <Run_Control_Logic+0x264>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a91      	ldr	r2, [pc, #580]	@ (8003004 <Run_Control_Logic+0x268>)
 8002dbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  sample_buffer3[sample_counter] = Distance3;
 8002dc2:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8003008 <Run_Control_Logic+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a8f      	ldr	r2, [pc, #572]	@ (800300c <Run_Control_Logic+0x270>)
 8002dce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  sample_counter++;
 8002dd2:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b86      	ldr	r3, [pc, #536]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002ddc:	701a      	strb	r2, [r3, #0]

  // Only process the filter when 8 samples are collected
  if (sample_counter >= SAMPLE_SIZE)
 8002dde:	4b85      	ldr	r3, [pc, #532]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	f240 8090 	bls.w	8002f08 <Run_Control_Logic+0x16c>
  {
    sample_counter = 0; // Reset the counter
 8002de8:	4b82      	ldr	r3, [pc, #520]	@ (8002ff4 <Run_Control_Logic+0x258>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]

    // --- Stage 1: Find the maximum value from the 8 samples ---
    float max_distance1 = find_max_in_sample(sample_buffer1, g_params.tinggi_A);
 8002dee:	4b88      	ldr	r3, [pc, #544]	@ (8003010 <Run_Control_Logic+0x274>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4881      	ldr	r0, [pc, #516]	@ (8002ffc <Run_Control_Logic+0x260>)
 8002df6:	f7ff faf7 	bl	80023e8 <find_max_in_sample>
 8002dfa:	6178      	str	r0, [r7, #20]
    float max_distance2 = find_max_in_sample(sample_buffer2, g_params.tinggi_B);
 8002dfc:	4b84      	ldr	r3, [pc, #528]	@ (8003010 <Run_Control_Logic+0x274>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4880      	ldr	r0, [pc, #512]	@ (8003004 <Run_Control_Logic+0x268>)
 8002e04:	f7ff faf0 	bl	80023e8 <find_max_in_sample>
 8002e08:	6138      	str	r0, [r7, #16]
    float max_distance3 = find_max_in_sample(sample_buffer3, g_params.tinggi_C);
 8002e0a:	4b81      	ldr	r3, [pc, #516]	@ (8003010 <Run_Control_Logic+0x274>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	487e      	ldr	r0, [pc, #504]	@ (800300c <Run_Control_Logic+0x270>)
 8002e12:	f7ff fae9 	bl	80023e8 <find_max_in_sample>
 8002e16:	60f8      	str	r0, [r7, #12]

    // --- Stage 2: Push the max value into the WMA buffer ---
    Stage2_buffer1[stage2_index1] = max_distance1;
 8002e18:	4b7e      	ldr	r3, [pc, #504]	@ (8003014 <Run_Control_Logic+0x278>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003018 <Run_Control_Logic+0x27c>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    stage2_index1 = (stage2_index1 + 1) % g_params.moving_avg_size;
 8002e26:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <Run_Control_Logic+0x278>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a78      	ldr	r2, [pc, #480]	@ (8003010 <Run_Control_Logic+0x274>)
 8002e2e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002e32:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e36:	fb01 f202 	mul.w	r2, r1, r2
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b75      	ldr	r3, [pc, #468]	@ (8003014 <Run_Control_Logic+0x278>)
 8002e40:	701a      	strb	r2, [r3, #0]
    if (stage2_index1 == 0)
 8002e42:	4b74      	ldr	r3, [pc, #464]	@ (8003014 <Run_Control_Logic+0x278>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <Run_Control_Logic+0xb4>
      is_stage2_full1 = 1;
 8002e4a:	4b74      	ldr	r3, [pc, #464]	@ (800301c <Run_Control_Logic+0x280>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    filtered_distance1 = calculate_moving_average(Stage2_buffer1, g_params.moving_avg_size, is_stage2_full1);
 8002e50:	4b6f      	ldr	r3, [pc, #444]	@ (8003010 <Run_Control_Logic+0x274>)
 8002e52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e56:	4a71      	ldr	r2, [pc, #452]	@ (800301c <Run_Control_Logic+0x280>)
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	486e      	ldr	r0, [pc, #440]	@ (8003018 <Run_Control_Logic+0x27c>)
 8002e5e:	f7ff faf5 	bl	800244c <calculate_moving_average>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4a6e      	ldr	r2, [pc, #440]	@ (8003020 <Run_Control_Logic+0x284>)
 8002e66:	6013      	str	r3, [r2, #0]

    Stage2_buffer2[stage2_index2] = max_distance2;
 8002e68:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <Run_Control_Logic+0x288>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003028 <Run_Control_Logic+0x28c>)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    stage2_index2 = (stage2_index2 + 1) % g_params.moving_avg_size;
 8002e76:	4b6b      	ldr	r3, [pc, #428]	@ (8003024 <Run_Control_Logic+0x288>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a64      	ldr	r2, [pc, #400]	@ (8003010 <Run_Control_Logic+0x274>)
 8002e7e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002e82:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e86:	fb01 f202 	mul.w	r2, r1, r2
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b65      	ldr	r3, [pc, #404]	@ (8003024 <Run_Control_Logic+0x288>)
 8002e90:	701a      	strb	r2, [r3, #0]
    if (stage2_index2 == 0)
 8002e92:	4b64      	ldr	r3, [pc, #400]	@ (8003024 <Run_Control_Logic+0x288>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <Run_Control_Logic+0x104>
      is_stage2_full2 = 1;
 8002e9a:	4b64      	ldr	r3, [pc, #400]	@ (800302c <Run_Control_Logic+0x290>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
    filtered_distance2 = calculate_moving_average(Stage2_buffer2, g_params.moving_avg_size, is_stage2_full2);
 8002ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <Run_Control_Logic+0x274>)
 8002ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ea6:	4a61      	ldr	r2, [pc, #388]	@ (800302c <Run_Control_Logic+0x290>)
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	485e      	ldr	r0, [pc, #376]	@ (8003028 <Run_Control_Logic+0x28c>)
 8002eae:	f7ff facd 	bl	800244c <calculate_moving_average>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8003030 <Run_Control_Logic+0x294>)
 8002eb6:	6013      	str	r3, [r2, #0]

    Stage2_buffer3[stage2_index3] = max_distance3;
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003034 <Run_Control_Logic+0x298>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8003038 <Run_Control_Logic+0x29c>)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    stage2_index3 = (stage2_index3 + 1) % g_params.moving_avg_size;
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <Run_Control_Logic+0x298>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a50      	ldr	r2, [pc, #320]	@ (8003010 <Run_Control_Logic+0x274>)
 8002ece:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002ed2:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ed6:	fb01 f202 	mul.w	r2, r1, r2
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b55      	ldr	r3, [pc, #340]	@ (8003034 <Run_Control_Logic+0x298>)
 8002ee0:	701a      	strb	r2, [r3, #0]
    if (stage2_index3 == 0)
 8002ee2:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <Run_Control_Logic+0x298>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <Run_Control_Logic+0x154>
      is_stage2_full3 = 1;
 8002eea:	4b54      	ldr	r3, [pc, #336]	@ (800303c <Run_Control_Logic+0x2a0>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
    filtered_distance3 = calculate_moving_average(Stage2_buffer3, g_params.moving_avg_size, is_stage2_full3);
 8002ef0:	4b47      	ldr	r3, [pc, #284]	@ (8003010 <Run_Control_Logic+0x274>)
 8002ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ef6:	4a51      	ldr	r2, [pc, #324]	@ (800303c <Run_Control_Logic+0x2a0>)
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	484e      	ldr	r0, [pc, #312]	@ (8003038 <Run_Control_Logic+0x29c>)
 8002efe:	f7ff faa5 	bl	800244c <calculate_moving_average>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4a4e      	ldr	r2, [pc, #312]	@ (8003040 <Run_Control_Logic+0x2a4>)
 8002f06:	6013      	str	r3, [r2, #0]
  }

  // Gunakan nilai jarak yang sudah difilter
  float LevelA_cm = g_params.tinggi_A - filtered_distance1;
 8002f08:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <Run_Control_Logic+0x274>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a44      	ldr	r2, [pc, #272]	@ (8003020 <Run_Control_Logic+0x284>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fe2c 	bl	8000b70 <__aeabi_fsub>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60bb      	str	r3, [r7, #8]
  float LevelB_cm = g_params.tinggi_B - filtered_distance2;
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <Run_Control_Logic+0x274>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fe22 	bl	8000b70 <__aeabi_fsub>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	607b      	str	r3, [r7, #4]
  float LevelC_cm = g_params.tinggi_C - filtered_distance3;
 8002f30:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <Run_Control_Logic+0x274>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a42      	ldr	r2, [pc, #264]	@ (8003040 <Run_Control_Logic+0x2a4>)
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fe18 	bl	8000b70 <__aeabi_fsub>
 8002f40:	4603      	mov	r3, r0
 8002f42:	603b      	str	r3, [r7, #0]

  LevelA_persen = (LevelA_cm / g_params.tinggi_A) * 100.0f;
 8002f44:	4b32      	ldr	r3, [pc, #200]	@ (8003010 <Run_Control_Logic+0x274>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	68b8      	ldr	r0, [r7, #8]
 8002f4c:	f7fd ffce 	bl	8000eec <__aeabi_fdiv>
 8002f50:	4603      	mov	r3, r0
 8002f52:	493c      	ldr	r1, [pc, #240]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd ff15 	bl	8000d84 <__aeabi_fmul>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002f60:	601a      	str	r2, [r3, #0]
  LevelB_persen = (LevelB_cm / g_params.tinggi_B) * 100.0f;
 8002f62:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <Run_Control_Logic+0x274>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fd ffbf 	bl	8000eec <__aeabi_fdiv>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4934      	ldr	r1, [pc, #208]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd ff06 	bl	8000d84 <__aeabi_fmul>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b33      	ldr	r3, [pc, #204]	@ (800304c <Run_Control_Logic+0x2b0>)
 8002f7e:	601a      	str	r2, [r3, #0]
  LevelC_persen = (LevelC_cm / g_params.tinggi_C) * 100.0f;
 8002f80:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <Run_Control_Logic+0x274>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	4619      	mov	r1, r3
 8002f86:	6838      	ldr	r0, [r7, #0]
 8002f88:	f7fd ffb0 	bl	8000eec <__aeabi_fdiv>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	492d      	ldr	r1, [pc, #180]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fef7 	bl	8000d84 <__aeabi_fmul>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003050 <Run_Control_Logic+0x2b4>)
 8002f9c:	601a      	str	r2, [r3, #0]
  if (LevelA_persen < 0)
 8002f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f04f 0100 	mov.w	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f88a 	bl	80010c0 <__aeabi_fcmplt>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <Run_Control_Logic+0x220>
    LevelA_persen = 0;
 8002fb2:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e00b      	b.n	8002fd4 <Run_Control_Logic+0x238>
  else if (LevelA_persen > 100)
 8002fbc:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4920      	ldr	r1, [pc, #128]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f89a 	bl	80010fc <__aeabi_fcmpgt>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <Run_Control_Logic+0x238>
    LevelA_persen = 100;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002fd2:	601a      	str	r2, [r3, #0]
  if (LevelB_persen < 0)
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <Run_Control_Logic+0x2b0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe f86f 	bl	80010c0 <__aeabi_fcmplt>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d035      	beq.n	8003054 <Run_Control_Logic+0x2b8>
    LevelB_persen = 0;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	@ (800304c <Run_Control_Logic+0x2b0>)
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e03c      	b.n	800306c <Run_Control_Logic+0x2d0>
 8002ff2:	bf00      	nop
 8002ff4:	200005e4 	.word	0x200005e4
 8002ff8:	200007d0 	.word	0x200007d0
 8002ffc:	20000584 	.word	0x20000584
 8003000:	200007d4 	.word	0x200007d4
 8003004:	200005a4 	.word	0x200005a4
 8003008:	200007d8 	.word	0x200007d8
 800300c:	200005c4 	.word	0x200005c4
 8003010:	20000718 	.word	0x20000718
 8003014:	20000660 	.word	0x20000660
 8003018:	200005e8 	.word	0x200005e8
 800301c:	20000663 	.word	0x20000663
 8003020:	200006e0 	.word	0x200006e0
 8003024:	20000661 	.word	0x20000661
 8003028:	20000610 	.word	0x20000610
 800302c:	20000664 	.word	0x20000664
 8003030:	200006e4 	.word	0x200006e4
 8003034:	20000662 	.word	0x20000662
 8003038:	20000638 	.word	0x20000638
 800303c:	20000665 	.word	0x20000665
 8003040:	200006e8 	.word	0x200006e8
 8003044:	42c80000 	.word	0x42c80000
 8003048:	20000708 	.word	0x20000708
 800304c:	2000070c 	.word	0x2000070c
 8003050:	20000710 	.word	0x20000710
  else if (LevelB_persen > 100)
 8003054:	4b89      	ldr	r3, [pc, #548]	@ (800327c <Run_Control_Logic+0x4e0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4989      	ldr	r1, [pc, #548]	@ (8003280 <Run_Control_Logic+0x4e4>)
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe f84e 	bl	80010fc <__aeabi_fcmpgt>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <Run_Control_Logic+0x2d0>
    LevelB_persen = 100;
 8003066:	4b85      	ldr	r3, [pc, #532]	@ (800327c <Run_Control_Logic+0x4e0>)
 8003068:	4a85      	ldr	r2, [pc, #532]	@ (8003280 <Run_Control_Logic+0x4e4>)
 800306a:	601a      	str	r2, [r3, #0]
  if (LevelC_persen < 0)
 800306c:	4b85      	ldr	r3, [pc, #532]	@ (8003284 <Run_Control_Logic+0x4e8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe f823 	bl	80010c0 <__aeabi_fcmplt>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <Run_Control_Logic+0x2ee>
    LevelC_persen = 0;
 8003080:	4b80      	ldr	r3, [pc, #512]	@ (8003284 <Run_Control_Logic+0x4e8>)
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e00b      	b.n	80030a2 <Run_Control_Logic+0x306>
  else if (LevelC_persen > 100)
 800308a:	4b7e      	ldr	r3, [pc, #504]	@ (8003284 <Run_Control_Logic+0x4e8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	497c      	ldr	r1, [pc, #496]	@ (8003280 <Run_Control_Logic+0x4e4>)
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe f833 	bl	80010fc <__aeabi_fcmpgt>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <Run_Control_Logic+0x306>
    LevelC_persen = 100;
 800309c:	4b79      	ldr	r3, [pc, #484]	@ (8003284 <Run_Control_Logic+0x4e8>)
 800309e:	4a78      	ldr	r2, [pc, #480]	@ (8003280 <Run_Control_Logic+0x4e4>)
 80030a0:	601a      	str	r2, [r3, #0]

  // --- LED merah jika salah satu drum di bawah ambang ---
  if (LevelA_persen <= g_params.ambang_bawah_A ||
 80030a2:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <Run_Control_Logic+0x4ec>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4a79      	ldr	r2, [pc, #484]	@ (800328c <Run_Control_Logic+0x4f0>)
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe f81b 	bl	80010e8 <__aeabi_fcmpge>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d115      	bne.n	80030e4 <Run_Control_Logic+0x348>
      LevelB_persen <= g_params.ambang_bawah_B ||
 80030b8:	4b73      	ldr	r3, [pc, #460]	@ (8003288 <Run_Control_Logic+0x4ec>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	4a6f      	ldr	r2, [pc, #444]	@ (800327c <Run_Control_Logic+0x4e0>)
 80030be:	6812      	ldr	r2, [r2, #0]
  if (LevelA_persen <= g_params.ambang_bawah_A ||
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f810 	bl	80010e8 <__aeabi_fcmpge>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <Run_Control_Logic+0x348>
      LevelC_persen <= g_params.ambang_bawah_C)
 80030ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003288 <Run_Control_Logic+0x4ec>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003284 <Run_Control_Logic+0x4e8>)
 80030d4:	6812      	ldr	r2, [r2, #0]
      LevelB_persen <= g_params.ambang_bawah_B ||
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe f805 	bl	80010e8 <__aeabi_fcmpge>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <Run_Control_Logic+0x356>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80030e4:	2201      	movs	r2, #1
 80030e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030ea:	4869      	ldr	r0, [pc, #420]	@ (8003290 <Run_Control_Logic+0x4f4>)
 80030ec:	f001 f9c3 	bl	8004476 <HAL_GPIO_WritePin>
 80030f0:	e005      	b.n	80030fe <Run_Control_Logic+0x362>
  else
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030f8:	4865      	ldr	r0, [pc, #404]	@ (8003290 <Run_Control_Logic+0x4f4>)
 80030fa:	f001 f9bc 	bl	8004476 <HAL_GPIO_WritePin>

  // --- Kontrol POMPA_BA (drum A) ---
  if (state_pompa_A == STATE_IDLE)
 80030fe:	4b65      	ldr	r3, [pc, #404]	@ (8003294 <Run_Control_Logic+0x4f8>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11b      	bne.n	800313e <Run_Control_Logic+0x3a2>
  {
    if (LevelA_persen <= g_params.ambang_bawah_A &&
 8003106:	4b60      	ldr	r3, [pc, #384]	@ (8003288 <Run_Control_Logic+0x4ec>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4a60      	ldr	r2, [pc, #384]	@ (800328c <Run_Control_Logic+0x4f0>)
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd ffe9 	bl	80010e8 <__aeabi_fcmpge>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d028      	beq.n	800316e <Run_Control_Logic+0x3d2>
        HAL_GPIO_ReadPin(POMPA_1_ON_GPIO_Port, POMPA_1_ON_Pin) == GPIO_PIN_RESET) // tombol ditekan
 800311c:	2101      	movs	r1, #1
 800311e:	485c      	ldr	r0, [pc, #368]	@ (8003290 <Run_Control_Logic+0x4f4>)
 8003120:	f001 f992 	bl	8004448 <HAL_GPIO_ReadPin>
 8003124:	4603      	mov	r3, r0
    if (LevelA_persen <= g_params.ambang_bawah_A &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	d121      	bne.n	800316e <Run_Control_Logic+0x3d2>
    {
      state_pompa_A = STATE_FILLING;
 800312a:	4b5a      	ldr	r3, [pc, #360]	@ (8003294 <Run_Control_Logic+0x4f8>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_SET);
 8003130:	2201      	movs	r2, #1
 8003132:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003136:	4856      	ldr	r0, [pc, #344]	@ (8003290 <Run_Control_Logic+0x4f4>)
 8003138:	f001 f99d 	bl	8004476 <HAL_GPIO_WritePin>
 800313c:	e017      	b.n	800316e <Run_Control_Logic+0x3d2>
    }
  }
  else if (state_pompa_A == STATE_FILLING)
 800313e:	4b55      	ldr	r3, [pc, #340]	@ (8003294 <Run_Control_Logic+0x4f8>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d113      	bne.n	800316e <Run_Control_Logic+0x3d2>
  {
    if (LevelA_persen >= g_params.target_penuh_A)
 8003146:	4b50      	ldr	r3, [pc, #320]	@ (8003288 <Run_Control_Logic+0x4ec>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4a50      	ldr	r2, [pc, #320]	@ (800328c <Run_Control_Logic+0x4f0>)
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd ffbf 	bl	80010d4 <__aeabi_fcmple>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <Run_Control_Logic+0x3d2>
    {
      state_pompa_A = STATE_IDLE;
 800315c:	4b4d      	ldr	r3, [pc, #308]	@ (8003294 <Run_Control_Logic+0x4f8>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003168:	4849      	ldr	r0, [pc, #292]	@ (8003290 <Run_Control_Logic+0x4f4>)
 800316a:	f001 f984 	bl	8004476 <HAL_GPIO_WritePin>
    }
  }

  // --- Kontrol POMPA_CB (drum B dan drum C) ---
  if (state_pompa_B == STATE_IDLE)
 800316e:	4b4a      	ldr	r3, [pc, #296]	@ (8003298 <Run_Control_Logic+0x4fc>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d137      	bne.n	80031e6 <Run_Control_Logic+0x44a>
  {
    if (LevelB_persen <= g_params.ambang_bawah_B &&
 8003176:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <Run_Control_Logic+0x4ec>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4a40      	ldr	r2, [pc, #256]	@ (800327c <Run_Control_Logic+0x4e0>)
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd ffb1 	bl	80010e8 <__aeabi_fcmpge>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <Run_Control_Logic+0x412>
        HAL_GPIO_ReadPin(POMPA_2_ON_GPIO_Port, POMPA_2_ON_Pin) == GPIO_PIN_RESET) // tombol ditekan
 800318c:	2102      	movs	r1, #2
 800318e:	4840      	ldr	r0, [pc, #256]	@ (8003290 <Run_Control_Logic+0x4f4>)
 8003190:	f001 f95a 	bl	8004448 <HAL_GPIO_ReadPin>
 8003194:	4603      	mov	r3, r0
    if (LevelB_persen <= g_params.ambang_bawah_B &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <Run_Control_Logic+0x412>
    {
      state_pompa_B = STATE_FILLING_B;
 800319a:	4b3f      	ldr	r3, [pc, #252]	@ (8003298 <Run_Control_Logic+0x4fc>)
 800319c:	2202      	movs	r2, #2
 800319e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_SET);
 80031a0:	2201      	movs	r2, #1
 80031a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031a6:	483a      	ldr	r0, [pc, #232]	@ (8003290 <Run_Control_Logic+0x4f4>)
 80031a8:	f001 f965 	bl	8004476 <HAL_GPIO_WritePin>
 80031ac:	e04c      	b.n	8003248 <Run_Control_Logic+0x4ac>
    }
    else if (LevelC_persen <= g_params.ambang_bawah_C &&
 80031ae:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <Run_Control_Logic+0x4ec>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a34      	ldr	r2, [pc, #208]	@ (8003284 <Run_Control_Logic+0x4e8>)
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd ff95 	bl	80010e8 <__aeabi_fcmpge>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d041      	beq.n	8003248 <Run_Control_Logic+0x4ac>
             HAL_GPIO_ReadPin(POMPA_2_ON_GPIO_Port, POMPA_2_ON_Pin) == GPIO_PIN_RESET) // tombol ditekan
 80031c4:	2102      	movs	r1, #2
 80031c6:	4832      	ldr	r0, [pc, #200]	@ (8003290 <Run_Control_Logic+0x4f4>)
 80031c8:	f001 f93e 	bl	8004448 <HAL_GPIO_ReadPin>
 80031cc:	4603      	mov	r3, r0
    else if (LevelC_persen <= g_params.ambang_bawah_C &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d13a      	bne.n	8003248 <Run_Control_Logic+0x4ac>
    {
      state_pompa_B = STATE_FILLING_C;
 80031d2:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <Run_Control_Logic+0x4fc>)
 80031d4:	2203      	movs	r2, #3
 80031d6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_SET);
 80031d8:	2201      	movs	r2, #1
 80031da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031de:	482c      	ldr	r0, [pc, #176]	@ (8003290 <Run_Control_Logic+0x4f4>)
 80031e0:	f001 f949 	bl	8004476 <HAL_GPIO_WritePin>
 80031e4:	e030      	b.n	8003248 <Run_Control_Logic+0x4ac>
    }
  }
  else if (state_pompa_B == STATE_FILLING_B)
 80031e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003298 <Run_Control_Logic+0x4fc>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d114      	bne.n	8003218 <Run_Control_Logic+0x47c>
  {
    if (LevelB_persen >= g_params.target_penuh_B)
 80031ee:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <Run_Control_Logic+0x4ec>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4a22      	ldr	r2, [pc, #136]	@ (800327c <Run_Control_Logic+0x4e0>)
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd ff6b 	bl	80010d4 <__aeabi_fcmple>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d021      	beq.n	8003248 <Run_Control_Logic+0x4ac>
    {
      state_pompa_B = STATE_IDLE;
 8003204:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <Run_Control_Logic+0x4fc>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003210:	481f      	ldr	r0, [pc, #124]	@ (8003290 <Run_Control_Logic+0x4f4>)
 8003212:	f001 f930 	bl	8004476 <HAL_GPIO_WritePin>
 8003216:	e017      	b.n	8003248 <Run_Control_Logic+0x4ac>
    }
  }
  else if (state_pompa_B == STATE_FILLING_C)
 8003218:	4b1f      	ldr	r3, [pc, #124]	@ (8003298 <Run_Control_Logic+0x4fc>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d113      	bne.n	8003248 <Run_Control_Logic+0x4ac>
  {
    if (LevelC_persen >= g_params.target_penuh_C)
 8003220:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <Run_Control_Logic+0x4ec>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	4a17      	ldr	r2, [pc, #92]	@ (8003284 <Run_Control_Logic+0x4e8>)
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd ff52 	bl	80010d4 <__aeabi_fcmple>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <Run_Control_Logic+0x4ac>
    {
      state_pompa_B = STATE_IDLE;
 8003236:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <Run_Control_Logic+0x4fc>)
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003242:	4813      	ldr	r0, [pc, #76]	@ (8003290 <Run_Control_Logic+0x4f4>)
 8003244:	f001 f917 	bl	8004476 <HAL_GPIO_WritePin>
    }
  }

  // --- LED hijau jika idle, mati jika menyalakan pompa ---
  if (state_pompa_A == STATE_IDLE && state_pompa_B == STATE_IDLE)
 8003248:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <Run_Control_Logic+0x4f8>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <Run_Control_Logic+0x4ca>
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <Run_Control_Logic+0x4fc>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <Run_Control_Logic+0x4ca>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8003258:	2201      	movs	r2, #1
 800325a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800325e:	480c      	ldr	r0, [pc, #48]	@ (8003290 <Run_Control_Logic+0x4f4>)
 8003260:	f001 f909 	bl	8004476 <HAL_GPIO_WritePin>
 8003264:	e006      	b.n	8003274 <Run_Control_Logic+0x4d8>
  else
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003266:	2200      	movs	r2, #0
 8003268:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800326c:	4808      	ldr	r0, [pc, #32]	@ (8003290 <Run_Control_Logic+0x4f4>)
 800326e:	f001 f902 	bl	8004476 <HAL_GPIO_WritePin>
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	2000070c 	.word	0x2000070c
 8003280:	42c80000 	.word	0x42c80000
 8003284:	20000710 	.word	0x20000710
 8003288:	20000718 	.word	0x20000718
 800328c:	20000708 	.word	0x20000708
 8003290:	40010c00 	.word	0x40010c00
 8003294:	20000714 	.word	0x20000714
 8003298:	20000715 	.word	0x20000715

0800329c <Update_LCD_Display>:

void Update_LCD_Display(void)
{
 800329c:	b5b0      	push	{r4, r5, r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af02      	add	r7, sp, #8
  lcd_set_cursor(0, 0);
 80032a2:	2100      	movs	r1, #0
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fe fca1 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "A:%3.0f%% B:%3.0f%%", LevelA_persen, LevelB_persen);
 80032aa:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <Update_LCD_Display+0x98>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f8ba 	bl	8000428 <__aeabi_f2d>
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <Update_LCD_Display+0x9c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f8b3 	bl	8000428 <__aeabi_f2d>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	e9cd 2300 	strd	r2, r3, [sp]
 80032ca:	4622      	mov	r2, r4
 80032cc:	462b      	mov	r3, r5
 80032ce:	491b      	ldr	r1, [pc, #108]	@ (800333c <Update_LCD_Display+0xa0>)
 80032d0:	481b      	ldr	r0, [pc, #108]	@ (8003340 <Update_LCD_Display+0xa4>)
 80032d2:	f00a ff5b 	bl	800e18c <siprintf>
  lcd_send_string(lcd_buffer);
 80032d6:	481a      	ldr	r0, [pc, #104]	@ (8003340 <Update_LCD_Display+0xa4>)
 80032d8:	f7fe fcee 	bl	8001cb8 <lcd_send_string>
  lcd_set_cursor(1, 0);
 80032dc:	2100      	movs	r1, #0
 80032de:	2001      	movs	r0, #1
 80032e0:	f7fe fc84 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 80032e4:	4b17      	ldr	r3, [pc, #92]	@ (8003344 <Update_LCD_Display+0xa8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f89d 	bl	8000428 <__aeabi_f2d>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
          (state_pompa_A == STATE_FILLING) ? 'A' : ' ',
 80032f2:	4915      	ldr	r1, [pc, #84]	@ (8003348 <Update_LCD_Display+0xac>)
 80032f4:	7809      	ldrb	r1, [r1, #0]
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 80032f6:	2901      	cmp	r1, #1
 80032f8:	d101      	bne.n	80032fe <Update_LCD_Display+0x62>
 80032fa:	2141      	movs	r1, #65	@ 0x41
 80032fc:	e000      	b.n	8003300 <Update_LCD_Display+0x64>
 80032fe:	2120      	movs	r1, #32
          (state_pompa_B == STATE_FILLING) ? 'B' : ' ');
 8003300:	4812      	ldr	r0, [pc, #72]	@ (800334c <Update_LCD_Display+0xb0>)
 8003302:	7800      	ldrb	r0, [r0, #0]
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8003304:	2801      	cmp	r0, #1
 8003306:	d101      	bne.n	800330c <Update_LCD_Display+0x70>
 8003308:	2042      	movs	r0, #66	@ 0x42
 800330a:	e000      	b.n	800330e <Update_LCD_Display+0x72>
 800330c:	2020      	movs	r0, #32
 800330e:	9001      	str	r0, [sp, #4]
 8003310:	9100      	str	r1, [sp, #0]
 8003312:	490f      	ldr	r1, [pc, #60]	@ (8003350 <Update_LCD_Display+0xb4>)
 8003314:	480a      	ldr	r0, [pc, #40]	@ (8003340 <Update_LCD_Display+0xa4>)
 8003316:	f00a ff39 	bl	800e18c <siprintf>
  lcd_send_string("                ");
 800331a:	480e      	ldr	r0, [pc, #56]	@ (8003354 <Update_LCD_Display+0xb8>)
 800331c:	f7fe fccc 	bl	8001cb8 <lcd_send_string>
  lcd_set_cursor(1, 0);
 8003320:	2100      	movs	r1, #0
 8003322:	2001      	movs	r0, #1
 8003324:	f7fe fc62 	bl	8001bec <lcd_set_cursor>
  lcd_send_string(lcd_buffer);
 8003328:	4805      	ldr	r0, [pc, #20]	@ (8003340 <Update_LCD_Display+0xa4>)
 800332a:	f7fe fcc5 	bl	8001cb8 <lcd_send_string>
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	20000708 	.word	0x20000708
 8003338:	2000070c 	.word	0x2000070c
 800333c:	0801292c 	.word	0x0801292c
 8003340:	200006f4 	.word	0x200006f4
 8003344:	20000710 	.word	0x20000710
 8003348:	20000714 	.word	0x20000714
 800334c:	20000715 	.word	0x20000715
 8003350:	08012940 	.word	0x08012940
 8003354:	08012954 	.word	0x08012954

08003358 <CDC_On_Receive>:

/**
 * @brief  Callback ini dipanggil dari usbd_cdc_if.c setiap kali data diterima dari USB VCP.
 */
void CDC_On_Receive(uint8_t *Buf, uint32_t Len)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < Len; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e039      	b.n	80033dc <CDC_On_Receive+0x84>
  {
    // Cek jika buffer penuh
    if (g_rx_index >= RX_BUFFER_SIZE - 1)
 8003368:	4b21      	ldr	r3, [pc, #132]	@ (80033f0 <CDC_On_Receive+0x98>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b7e      	cmp	r3, #126	@ 0x7e
 800336e:	d907      	bls.n	8003380 <CDC_On_Receive+0x28>
    {
      g_rx_index = 0; // Reset jika overflow
 8003370:	4b1f      	ldr	r3, [pc, #124]	@ (80033f0 <CDC_On_Receive+0x98>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
      memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8003376:	2280      	movs	r2, #128	@ 0x80
 8003378:	2100      	movs	r1, #0
 800337a:	481e      	ldr	r0, [pc, #120]	@ (80033f4 <CDC_On_Receive+0x9c>)
 800337c:	f00a ffd6 	bl	800e32c <memset>
    }

    // Echo karakter kembali ke terminal
    CDC_Transmit_FS(&Buf[i], 1);
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f009 fbfb 	bl	800cb84 <CDC_Transmit_FS>

    // Jika menerima Enter (CR) atau Newline (LF)
    if (Buf[i] == '\r' || Buf[i] == '\n')
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b0d      	cmp	r3, #13
 8003398:	d005      	beq.n	80033a6 <CDC_On_Receive+0x4e>
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b0a      	cmp	r3, #10
 80033a4:	d10c      	bne.n	80033c0 <CDC_On_Receive+0x68>
    {
      // Abaikan jika buffer kosong
      if (g_rx_index > 0)
 80033a6:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <CDC_On_Receive+0x98>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d013      	beq.n	80033d6 <CDC_On_Receive+0x7e>
      {
        g_usb_rx_buffer[g_rx_index] = '\0'; // Null-terminate string
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <CDC_On_Receive+0x98>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a10      	ldr	r2, [pc, #64]	@ (80033f4 <CDC_On_Receive+0x9c>)
 80033b4:	2100      	movs	r1, #0
 80033b6:	54d1      	strb	r1, [r2, r3]
        g_command_ready = 1;                // Set flag untuk diproses di main loop
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <CDC_On_Receive+0xa0>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
      if (g_rx_index > 0)
 80033be:	e00a      	b.n	80033d6 <CDC_On_Receive+0x7e>
      }
    }
    else
    {
      g_usb_rx_buffer[g_rx_index++] = Buf[i]; // Tambahkan karakter ke buffer
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	441a      	add	r2, r3
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <CDC_On_Receive+0x98>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	4808      	ldr	r0, [pc, #32]	@ (80033f0 <CDC_On_Receive+0x98>)
 80033ce:	6001      	str	r1, [r0, #0]
 80033d0:	7811      	ldrb	r1, [r2, #0]
 80033d2:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <CDC_On_Receive+0x9c>)
 80033d4:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i < Len; i++)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3c1      	bcc.n	8003368 <CDC_On_Receive+0x10>
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200007c8 	.word	0x200007c8
 80033f4:	20000748 	.word	0x20000748
 80033f8:	200007cc 	.word	0x200007cc

080033fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
}
 8003402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <Error_Handler+0x8>

08003408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <HAL_MspInit+0x5c>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <HAL_MspInit+0x5c>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6193      	str	r3, [r2, #24]
 800341a:	4b12      	ldr	r3, [pc, #72]	@ (8003464 <HAL_MspInit+0x5c>)
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_MspInit+0x5c>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a0e      	ldr	r2, [pc, #56]	@ (8003464 <HAL_MspInit+0x5c>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_MspInit+0x5c>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800343e:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_MspInit+0x60>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_MspInit+0x60>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40021000 	.word	0x40021000
 8003468:	40010000 	.word	0x40010000

0800346c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_I2C_MspInit+0x90>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d132      	bne.n	80034f2 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348c:	4b1c      	ldr	r3, [pc, #112]	@ (8003500 <HAL_I2C_MspInit+0x94>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <HAL_I2C_MspInit+0x94>)
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_I2C_MspInit+0x94>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034aa:	2312      	movs	r3, #18
 80034ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	4812      	ldr	r0, [pc, #72]	@ (8003504 <HAL_I2C_MspInit+0x98>)
 80034ba:	f000 fe41 	bl	8004140 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80034be:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_I2C_MspInit+0x9c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	f043 0302 	orr.w	r3, r3, #2
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003508 <HAL_I2C_MspInit+0x9c>)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034da:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <HAL_I2C_MspInit+0x94>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <HAL_I2C_MspInit+0x94>)
 80034e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034e4:	61d3      	str	r3, [r2, #28]
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_I2C_MspInit+0x94>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	@ 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40005400 	.word	0x40005400
 8003500:	40021000 	.word	0x40021000
 8003504:	40010c00 	.word	0x40010c00
 8003508:	40010000 	.word	0x40010000

0800350c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0b      	ldr	r2, [pc, #44]	@ (8003548 <HAL_RTC_MspInit+0x3c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d110      	bne.n	8003540 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800351e:	f003 f9bf 	bl	80068a0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <HAL_RTC_MspInit+0x40>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4a09      	ldr	r2, [pc, #36]	@ (800354c <HAL_RTC_MspInit+0x40>)
 8003528:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800352c:	61d3      	str	r3, [r2, #28]
 800352e:	4b07      	ldr	r3, [pc, #28]	@ (800354c <HAL_RTC_MspInit+0x40>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_RTC_MspInit+0x44>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40002800 	.word	0x40002800
 800354c:	40021000 	.word	0x40021000
 8003550:	4242043c 	.word	0x4242043c

08003554 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_SPI_MspInit+0x88>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d12f      	bne.n	80035d4 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003574:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <HAL_SPI_MspInit+0x8c>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <HAL_SPI_MspInit+0x8c>)
 800357a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <HAL_SPI_MspInit+0x8c>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <HAL_SPI_MspInit+0x8c>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <HAL_SPI_MspInit+0x8c>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_SPI_MspInit+0x8c>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80035a4:	23a0      	movs	r3, #160	@ 0xa0
 80035a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4619      	mov	r1, r3
 80035b6:	480b      	ldr	r0, [pc, #44]	@ (80035e4 <HAL_SPI_MspInit+0x90>)
 80035b8:	f000 fdc2 	bl	8004140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035bc:	2340      	movs	r3, #64	@ 0x40
 80035be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	4619      	mov	r1, r3
 80035ce:	4805      	ldr	r0, [pc, #20]	@ (80035e4 <HAL_SPI_MspInit+0x90>)
 80035d0:	f000 fdb6 	bl	8004140 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80035d4:	bf00      	nop
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40013000 	.word	0x40013000
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40010800 	.word	0x40010800

080035e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	@ 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0320 	add.w	r3, r7, #32
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d13f      	bne.n	8003688 <HAL_TIM_Base_MspInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003608:	4b5c      	ldr	r3, [pc, #368]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a5b      	ldr	r2, [pc, #364]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	61d3      	str	r3, [r2, #28]
 8003614:	4b59      	ldr	r3, [pc, #356]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003620:	4b56      	ldr	r3, [pc, #344]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4a55      	ldr	r2, [pc, #340]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	6193      	str	r3, [r2, #24]
 800362c:	4b53      	ldr	r3, [pc, #332]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003646:	f107 0320 	add.w	r3, r7, #32
 800364a:	4619      	mov	r1, r3
 800364c:	484c      	ldr	r0, [pc, #304]	@ (8003780 <HAL_TIM_Base_MspInit+0x198>)
 800364e:	f000 fd77 	bl	8004140 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003652:	4b4c      	ldr	r3, [pc, #304]	@ (8003784 <HAL_TIM_Base_MspInit+0x19c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003666:	633b      	str	r3, [r7, #48]	@ 0x30
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003670:	4a44      	ldr	r2, [pc, #272]	@ (8003784 <HAL_TIM_Base_MspInit+0x19c>)
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	201c      	movs	r0, #28
 800367c:	f000 fb29 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003680:	201c      	movs	r0, #28
 8003682:	f000 fb42 	bl	8003d0a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003686:	e074      	b.n	8003772 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3e      	ldr	r2, [pc, #248]	@ (8003788 <HAL_TIM_Base_MspInit+0x1a0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d13e      	bne.n	8003710 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003692:	4b3a      	ldr	r3, [pc, #232]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4a39      	ldr	r2, [pc, #228]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	61d3      	str	r3, [r2, #28]
 800369e:	4b37      	ldr	r3, [pc, #220]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036aa:	4b34      	ldr	r3, [pc, #208]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	4a33      	ldr	r2, [pc, #204]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	6193      	str	r3, [r2, #24]
 80036b6:	4b31      	ldr	r3, [pc, #196]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036c2:	2310      	movs	r3, #16
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ce:	f107 0320 	add.w	r3, r7, #32
 80036d2:	4619      	mov	r1, r3
 80036d4:	482d      	ldr	r0, [pc, #180]	@ (800378c <HAL_TIM_Base_MspInit+0x1a4>)
 80036d6:	f000 fd33 	bl	8004140 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80036da:	4b2a      	ldr	r3, [pc, #168]	@ (8003784 <HAL_TIM_Base_MspInit+0x19c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f8:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <HAL_TIM_Base_MspInit+0x19c>)
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	201d      	movs	r0, #29
 8003704:	f000 fae5 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003708:	201d      	movs	r0, #29
 800370a:	f000 fafe 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 800370e:	e030      	b.n	8003772 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1e      	ldr	r2, [pc, #120]	@ (8003790 <HAL_TIM_Base_MspInit+0x1a8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12b      	bne.n	8003772 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800371a:	4b18      	ldr	r3, [pc, #96]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a17      	ldr	r2, [pc, #92]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	4b15      	ldr	r3, [pc, #84]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	4a11      	ldr	r2, [pc, #68]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	6193      	str	r3, [r2, #24]
 800373e:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <HAL_TIM_Base_MspInit+0x194>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800374a:	2340      	movs	r3, #64	@ 0x40
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003756:	f107 0320 	add.w	r3, r7, #32
 800375a:	4619      	mov	r1, r3
 800375c:	480b      	ldr	r0, [pc, #44]	@ (800378c <HAL_TIM_Base_MspInit+0x1a4>)
 800375e:	f000 fcef 	bl	8004140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	201e      	movs	r0, #30
 8003768:	f000 fab3 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800376c:	201e      	movs	r0, #30
 800376e:	f000 facc 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3738      	adds	r7, #56	@ 0x38
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	40010800 	.word	0x40010800
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40010c00 	.word	0x40010c00
 8003790:	40000800 	.word	0x40000800

08003794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <NMI_Handler+0x4>

0800379c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <HardFault_Handler+0x4>

080037a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <MemManage_Handler+0x4>

080037ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <BusFault_Handler+0x4>

080037b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <UsageFault_Handler+0x4>

080037bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e4:	f000 f95e 	bl	8003aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}

080037ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80037f2:	f001 fc11 	bl	8005018 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200014e4 	.word	0x200014e4

08003800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003804:	4802      	ldr	r0, [pc, #8]	@ (8003810 <TIM2_IRQHandler+0x10>)
 8003806:	f004 fbe1 	bl	8007fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200004ac 	.word	0x200004ac

08003814 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003818:	4802      	ldr	r0, [pc, #8]	@ (8003824 <TIM3_IRQHandler+0x10>)
 800381a:	f004 fbd7 	bl	8007fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200004f4 	.word	0x200004f4

08003828 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800382c:	4802      	ldr	r0, [pc, #8]	@ (8003838 <TIM4_IRQHandler+0x10>)
 800382e:	f004 fbcd 	bl	8007fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000053c 	.word	0x2000053c

0800383c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return 1;
 8003840:	2301      	movs	r3, #1
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <_kill>:

int _kill(int pid, int sig)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003854:	f00a fdce 	bl	800e3f4 <__errno>
 8003858:	4603      	mov	r3, r0
 800385a:	2216      	movs	r2, #22
 800385c:	601a      	str	r2, [r3, #0]
  return -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_exit>:

void _exit (int status)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003872:	f04f 31ff 	mov.w	r1, #4294967295
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffe7 	bl	800384a <_kill>
  while (1) {}    /* Make sure we hang here */
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <_exit+0x12>

08003880 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e00a      	b.n	80038a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003892:	f3af 8000 	nop.w
 8003896:	4601      	mov	r1, r0
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	60ba      	str	r2, [r7, #8]
 800389e:	b2ca      	uxtb	r2, r1
 80038a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dbf0      	blt.n	8003892 <_read+0x12>
  }

  return len;
 80038b0:	687b      	ldr	r3, [r7, #4]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e009      	b.n	80038e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	60ba      	str	r2, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	dbf1      	blt.n	80038cc <_write+0x12>
  }
  return len;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_close>:

int _close(int file)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003918:	605a      	str	r2, [r3, #4]
  return 0;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <_isatty>:

int _isatty(int file)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
	...

08003954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800395c:	4a14      	ldr	r2, [pc, #80]	@ (80039b0 <_sbrk+0x5c>)
 800395e:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <_sbrk+0x60>)
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003968:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <_sbrk+0x64>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <_sbrk+0x64>)
 8003972:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <_sbrk+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <_sbrk+0x64>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003984:	f00a fd36 	bl	800e3f4 <__errno>
 8003988:	4603      	mov	r3, r0
 800398a:	220c      	movs	r2, #12
 800398c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e009      	b.n	80039a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003994:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <_sbrk+0x64>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800399a:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a05      	ldr	r2, [pc, #20]	@ (80039b8 <_sbrk+0x64>)
 80039a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039a6:	68fb      	ldr	r3, [r7, #12]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20005000 	.word	0x20005000
 80039b4:	00000400 	.word	0x00000400
 80039b8:	200007e0 	.word	0x200007e0
 80039bc:	20001b28 	.word	0x20001b28

080039c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039cc:	f7ff fff8 	bl	80039c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039d0:	480b      	ldr	r0, [pc, #44]	@ (8003a00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80039d2:	490c      	ldr	r1, [pc, #48]	@ (8003a04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80039d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003a08 <LoopFillZerobss+0x16>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d8:	e002      	b.n	80039e0 <LoopCopyDataInit>

080039da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039de:	3304      	adds	r3, #4

080039e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e4:	d3f9      	bcc.n	80039da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e6:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80039e8:	4c09      	ldr	r4, [pc, #36]	@ (8003a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ec:	e001      	b.n	80039f2 <LoopFillZerobss>

080039ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f0:	3204      	adds	r2, #4

080039f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f4:	d3fb      	bcc.n	80039ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039f6:	f00a fd03 	bl	800e400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039fa:	f7fe f973 	bl	8001ce4 <main>
  bx lr
 80039fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a04:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8003a08:	08012e8c 	.word	0x08012e8c
  ldr r2, =_sbss
 8003a0c:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8003a10:	20001b28 	.word	0x20001b28

08003a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <ADC1_2_IRQHandler>
	...

08003a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a1c:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <HAL_Init+0x28>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a07      	ldr	r2, [pc, #28]	@ (8003a40 <HAL_Init+0x28>)
 8003a22:	f043 0310 	orr.w	r3, r3, #16
 8003a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a28:	2003      	movs	r0, #3
 8003a2a:	f000 f947 	bl	8003cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2e:	200f      	movs	r0, #15
 8003a30:	f000 f808 	bl	8003a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a34:	f7ff fce8 	bl	8003408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40022000 	.word	0x40022000

08003a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_InitTick+0x54>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <HAL_InitTick+0x58>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f95f 	bl	8003d26 <HAL_SYSTICK_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00e      	b.n	8003a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b0f      	cmp	r3, #15
 8003a76:	d80a      	bhi.n	8003a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	f000 f927 	bl	8003cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a84:	4a06      	ldr	r2, [pc, #24]	@ (8003aa0 <HAL_InitTick+0x5c>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000004 	.word	0x20000004
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	20000008 	.word	0x20000008

08003aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_IncTick+0x1c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_IncTick+0x20>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a03      	ldr	r2, [pc, #12]	@ (8003ac4 <HAL_IncTick+0x20>)
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	2000000c 	.word	0x2000000c
 8003ac4:	200007e4 	.word	0x200007e4

08003ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return uwTick;
 8003acc:	4b02      	ldr	r3, [pc, #8]	@ (8003ad8 <HAL_GetTick+0x10>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	200007e4 	.word	0x200007e4

08003adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d005      	beq.n	8003b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003af6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <HAL_Delay+0x44>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b02:	bf00      	nop
 8003b04:	f7ff ffe0 	bl	8003ac8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d8f7      	bhi.n	8003b04 <HAL_Delay+0x28>
  {
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000000c 	.word	0x2000000c

08003b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b34:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b56:	4a04      	ldr	r2, [pc, #16]	@ (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <__NVIC_GetPriorityGrouping+0x18>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 0307 	and.w	r3, r3, #7
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	db0b      	blt.n	8003bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	4906      	ldr	r1, [pc, #24]	@ (8003bbc <__NVIC_EnableIRQ+0x34>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2001      	movs	r0, #1
 8003baa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c88:	d301      	bcc.n	8003c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00f      	b.n	8003cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb8 <SysTick_Config+0x40>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c96:	210f      	movs	r1, #15
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	f7ff ff90 	bl	8003bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <SysTick_Config+0x40>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <SysTick_Config+0x40>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff2d 	bl	8003b24 <__NVIC_SetPriorityGrouping>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce4:	f7ff ff42 	bl	8003b6c <__NVIC_GetPriorityGrouping>
 8003ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff90 	bl	8003c14 <NVIC_EncodePriority>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff5f 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff35 	bl	8003b88 <__NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffa2 	bl	8003c78 <SysTick_Config>
 8003d34:	4603      	mov	r3, r0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <HAL_FLASH_Program+0xd8>)
 8003d5c:	7e1b      	ldrb	r3, [r3, #24]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_FLASH_Program+0x26>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e054      	b.n	8003e10 <HAL_FLASH_Program+0xd0>
 8003d66:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <HAL_FLASH_Program+0xd8>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003d70:	f000 f8a8 	bl	8003ec4 <FLASH_WaitForLastOperation>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d144      	bne.n	8003e08 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d102      	bne.n	8003d8a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003d84:	2301      	movs	r3, #1
 8003d86:	757b      	strb	r3, [r7, #21]
 8003d88:	e007      	b.n	8003d9a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d102      	bne.n	8003d96 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003d90:	2302      	movs	r3, #2
 8003d92:	757b      	strb	r3, [r7, #21]
 8003d94:	e001      	b.n	8003d9a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003d96:	2304      	movs	r3, #4
 8003d98:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75bb      	strb	r3, [r7, #22]
 8003d9e:	e02d      	b.n	8003dfc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003da0:	7dbb      	ldrb	r3, [r7, #22]
 8003da2:	005a      	lsls	r2, r3, #1
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	eb02 0c03 	add.w	ip, r2, r3
 8003daa:	7dbb      	ldrb	r3, [r7, #22]
 8003dac:	0119      	lsls	r1, r3, #4
 8003dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db2:	f1c1 0620 	rsb	r6, r1, #32
 8003db6:	f1a1 0020 	sub.w	r0, r1, #32
 8003dba:	fa22 f401 	lsr.w	r4, r2, r1
 8003dbe:	fa03 f606 	lsl.w	r6, r3, r6
 8003dc2:	4334      	orrs	r4, r6
 8003dc4:	fa23 f000 	lsr.w	r0, r3, r0
 8003dc8:	4304      	orrs	r4, r0
 8003dca:	fa23 f501 	lsr.w	r5, r3, r1
 8003dce:	b2a3      	uxth	r3, r4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4660      	mov	r0, ip
 8003dd4:	f000 f85a 	bl	8003e8c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ddc:	f000 f872 	bl	8003ec4 <FLASH_WaitForLastOperation>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003de4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <HAL_FLASH_Program+0xdc>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <HAL_FLASH_Program+0xdc>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003df6:	7dbb      	ldrb	r3, [r7, #22]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	75bb      	strb	r3, [r7, #22]
 8003dfc:	7dba      	ldrb	r2, [r7, #22]
 8003dfe:	7d7b      	ldrb	r3, [r7, #21]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d3cd      	bcc.n	8003da0 <HAL_FLASH_Program+0x60>
 8003e04:	e000      	b.n	8003e08 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003e06:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <HAL_FLASH_Program+0xd8>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	761a      	strb	r2, [r3, #24]

  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e18:	200007e8 	.word	0x200007e8
 8003e1c:	40022000 	.word	0x40022000

08003e20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <HAL_FLASH_Unlock+0x40>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_FLASH_Unlock+0x40>)
 8003e38:	4a0a      	ldr	r2, [pc, #40]	@ (8003e64 <HAL_FLASH_Unlock+0x44>)
 8003e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e3c:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <HAL_FLASH_Unlock+0x40>)
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e68 <HAL_FLASH_Unlock+0x48>)
 8003e40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <HAL_FLASH_Unlock+0x40>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003e52:	79fb      	ldrb	r3, [r7, #7]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40022000 	.word	0x40022000
 8003e64:	45670123 	.word	0x45670123
 8003e68:	cdef89ab 	.word	0xcdef89ab

08003e6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <HAL_FLASH_Lock+0x1c>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4a04      	ldr	r2, [pc, #16]	@ (8003e88 <HAL_FLASH_Lock+0x1c>)
 8003e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000

08003e8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e98:	4b08      	ldr	r3, [pc, #32]	@ (8003ebc <FLASH_Program_HalfWord+0x30>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <FLASH_Program_HalfWord+0x34>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	4a07      	ldr	r2, [pc, #28]	@ (8003ec0 <FLASH_Program_HalfWord+0x34>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	801a      	strh	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200007e8 	.word	0x200007e8
 8003ec0:	40022000 	.word	0x40022000

08003ec4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff fdfc 	bl	8003ac8 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ed2:	e010      	b.n	8003ef6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d00c      	beq.n	8003ef6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <FLASH_WaitForLastOperation+0x2e>
 8003ee2:	f7ff fdf1 	bl	8003ac8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d201      	bcs.n	8003ef6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e025      	b.n	8003f42 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <FLASH_WaitForLastOperation+0x88>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e8      	bne.n	8003ed4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f02:	4b12      	ldr	r3, [pc, #72]	@ (8003f4c <FLASH_WaitForLastOperation+0x88>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f4c <FLASH_WaitForLastOperation+0x88>)
 8003f10:	2220      	movs	r2, #32
 8003f12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f14:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <FLASH_WaitForLastOperation+0x88>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <FLASH_WaitForLastOperation+0x88>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f2c:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <FLASH_WaitForLastOperation+0x88>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f38:	f000 f80a 	bl	8003f50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40022000 	.word	0x40022000

08003f50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f5a:	4b23      	ldr	r3, [pc, #140]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f66:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <FLASH_SetErrorCode+0x9c>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <FLASH_SetErrorCode+0x9c>)
 8003f70:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f043 0310 	orr.w	r3, r3, #16
 8003f78:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f86:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <FLASH_SetErrorCode+0x9c>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	4a17      	ldr	r2, [pc, #92]	@ (8003fec <FLASH_SetErrorCode+0x9c>)
 8003f90:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003fa6:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <FLASH_SetErrorCode+0x9c>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	4a0f      	ldr	r2, [pc, #60]	@ (8003fec <FLASH_SetErrorCode+0x9c>)
 8003fb0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f240 1201 	movw	r2, #257	@ 0x101
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d106      	bne.n	8003fd6 <FLASH_SetErrorCode+0x86>
 8003fc8:	4b07      	ldr	r3, [pc, #28]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	4a06      	ldr	r2, [pc, #24]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	61d3      	str	r3, [r2, #28]
}  
 8003fd4:	e002      	b.n	8003fdc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003fd6:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <FLASH_SetErrorCode+0x98>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60d3      	str	r3, [r2, #12]
}  
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	200007e8 	.word	0x200007e8

08003ff0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004002:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 8004004:	7e1b      	ldrb	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_FLASHEx_Erase+0x1e>
 800400a:	2302      	movs	r3, #2
 800400c:	e053      	b.n	80040b6 <HAL_FLASHEx_Erase+0xc6>
 800400e:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 8004010:	2201      	movs	r2, #1
 8004012:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d116      	bne.n	800404a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800401c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004020:	f7ff ff50 	bl	8003ec4 <FLASH_WaitForLastOperation>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d141      	bne.n	80040ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800402a:	2001      	movs	r0, #1
 800402c:	f000 f84c 	bl	80040c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004030:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004034:	f7ff ff46 	bl	8003ec4 <FLASH_WaitForLastOperation>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_FLASHEx_Erase+0xd4>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4a20      	ldr	r2, [pc, #128]	@ (80040c4 <HAL_FLASHEx_Erase+0xd4>)
 8004042:	f023 0304 	bic.w	r3, r3, #4
 8004046:	6113      	str	r3, [r2, #16]
 8004048:	e031      	b.n	80040ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800404a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800404e:	f7ff ff39 	bl	8003ec4 <FLASH_WaitForLastOperation>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d12a      	bne.n	80040ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	e019      	b.n	800409c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004068:	68b8      	ldr	r0, [r7, #8]
 800406a:	f000 f849 	bl	8004100 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800406e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004072:	f7ff ff27 	bl	8003ec4 <FLASH_WaitForLastOperation>
 8004076:	4603      	mov	r3, r0
 8004078:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800407a:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <HAL_FLASHEx_Erase+0xd4>)
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <HAL_FLASHEx_Erase+0xd4>)
 8004080:	f023 0302 	bic.w	r3, r3, #2
 8004084:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	601a      	str	r2, [r3, #0]
            break;
 8004092:	e00c      	b.n	80040ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800409a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	029a      	lsls	r2, r3, #10
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	4413      	add	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3dc      	bcc.n	8004068 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040ae:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	761a      	strb	r2, [r3, #24]

  return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200007e8 	.word	0x200007e8
 80040c4:	40022000 	.word	0x40022000

080040c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040d0:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <FLASH_MassErase+0x30>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80040d6:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <FLASH_MassErase+0x34>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	4a08      	ldr	r2, [pc, #32]	@ (80040fc <FLASH_MassErase+0x34>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <FLASH_MassErase+0x34>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4a05      	ldr	r2, [pc, #20]	@ (80040fc <FLASH_MassErase+0x34>)
 80040e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	200007e8 	.word	0x200007e8
 80040fc:	40022000 	.word	0x40022000

08004100 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <FLASH_PageErase+0x38>)
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <FLASH_PageErase+0x3c>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4a0a      	ldr	r2, [pc, #40]	@ (800413c <FLASH_PageErase+0x3c>)
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800411a:	4a08      	ldr	r2, [pc, #32]	@ (800413c <FLASH_PageErase+0x3c>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004120:	4b06      	ldr	r3, [pc, #24]	@ (800413c <FLASH_PageErase+0x3c>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	4a05      	ldr	r2, [pc, #20]	@ (800413c <FLASH_PageErase+0x3c>)
 8004126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800412a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	200007e8 	.word	0x200007e8
 800413c:	40022000 	.word	0x40022000

08004140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004140:	b480      	push	{r7}
 8004142:	b08b      	sub	sp, #44	@ 0x2c
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800414e:	2300      	movs	r3, #0
 8004150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004152:	e169      	b.n	8004428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004154:	2201      	movs	r2, #1
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	429a      	cmp	r2, r3
 800416e:	f040 8158 	bne.w	8004422 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a9a      	ldr	r2, [pc, #616]	@ (80043e0 <HAL_GPIO_Init+0x2a0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d05e      	beq.n	800423a <HAL_GPIO_Init+0xfa>
 800417c:	4a98      	ldr	r2, [pc, #608]	@ (80043e0 <HAL_GPIO_Init+0x2a0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d875      	bhi.n	800426e <HAL_GPIO_Init+0x12e>
 8004182:	4a98      	ldr	r2, [pc, #608]	@ (80043e4 <HAL_GPIO_Init+0x2a4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d058      	beq.n	800423a <HAL_GPIO_Init+0xfa>
 8004188:	4a96      	ldr	r2, [pc, #600]	@ (80043e4 <HAL_GPIO_Init+0x2a4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d86f      	bhi.n	800426e <HAL_GPIO_Init+0x12e>
 800418e:	4a96      	ldr	r2, [pc, #600]	@ (80043e8 <HAL_GPIO_Init+0x2a8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d052      	beq.n	800423a <HAL_GPIO_Init+0xfa>
 8004194:	4a94      	ldr	r2, [pc, #592]	@ (80043e8 <HAL_GPIO_Init+0x2a8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d869      	bhi.n	800426e <HAL_GPIO_Init+0x12e>
 800419a:	4a94      	ldr	r2, [pc, #592]	@ (80043ec <HAL_GPIO_Init+0x2ac>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d04c      	beq.n	800423a <HAL_GPIO_Init+0xfa>
 80041a0:	4a92      	ldr	r2, [pc, #584]	@ (80043ec <HAL_GPIO_Init+0x2ac>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d863      	bhi.n	800426e <HAL_GPIO_Init+0x12e>
 80041a6:	4a92      	ldr	r2, [pc, #584]	@ (80043f0 <HAL_GPIO_Init+0x2b0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d046      	beq.n	800423a <HAL_GPIO_Init+0xfa>
 80041ac:	4a90      	ldr	r2, [pc, #576]	@ (80043f0 <HAL_GPIO_Init+0x2b0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d85d      	bhi.n	800426e <HAL_GPIO_Init+0x12e>
 80041b2:	2b12      	cmp	r3, #18
 80041b4:	d82a      	bhi.n	800420c <HAL_GPIO_Init+0xcc>
 80041b6:	2b12      	cmp	r3, #18
 80041b8:	d859      	bhi.n	800426e <HAL_GPIO_Init+0x12e>
 80041ba:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <HAL_GPIO_Init+0x80>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	0800423b 	.word	0x0800423b
 80041c4:	08004215 	.word	0x08004215
 80041c8:	08004227 	.word	0x08004227
 80041cc:	08004269 	.word	0x08004269
 80041d0:	0800426f 	.word	0x0800426f
 80041d4:	0800426f 	.word	0x0800426f
 80041d8:	0800426f 	.word	0x0800426f
 80041dc:	0800426f 	.word	0x0800426f
 80041e0:	0800426f 	.word	0x0800426f
 80041e4:	0800426f 	.word	0x0800426f
 80041e8:	0800426f 	.word	0x0800426f
 80041ec:	0800426f 	.word	0x0800426f
 80041f0:	0800426f 	.word	0x0800426f
 80041f4:	0800426f 	.word	0x0800426f
 80041f8:	0800426f 	.word	0x0800426f
 80041fc:	0800426f 	.word	0x0800426f
 8004200:	0800426f 	.word	0x0800426f
 8004204:	0800421d 	.word	0x0800421d
 8004208:	08004231 	.word	0x08004231
 800420c:	4a79      	ldr	r2, [pc, #484]	@ (80043f4 <HAL_GPIO_Init+0x2b4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004212:	e02c      	b.n	800426e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	623b      	str	r3, [r7, #32]
          break;
 800421a:	e029      	b.n	8004270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	3304      	adds	r3, #4
 8004222:	623b      	str	r3, [r7, #32]
          break;
 8004224:	e024      	b.n	8004270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	3308      	adds	r3, #8
 800422c:	623b      	str	r3, [r7, #32]
          break;
 800422e:	e01f      	b.n	8004270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	330c      	adds	r3, #12
 8004236:	623b      	str	r3, [r7, #32]
          break;
 8004238:	e01a      	b.n	8004270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004242:	2304      	movs	r3, #4
 8004244:	623b      	str	r3, [r7, #32]
          break;
 8004246:	e013      	b.n	8004270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004250:	2308      	movs	r3, #8
 8004252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	611a      	str	r2, [r3, #16]
          break;
 800425a:	e009      	b.n	8004270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800425c:	2308      	movs	r3, #8
 800425e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	615a      	str	r2, [r3, #20]
          break;
 8004266:	e003      	b.n	8004270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004268:	2300      	movs	r3, #0
 800426a:	623b      	str	r3, [r7, #32]
          break;
 800426c:	e000      	b.n	8004270 <HAL_GPIO_Init+0x130>
          break;
 800426e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2bff      	cmp	r3, #255	@ 0xff
 8004274:	d801      	bhi.n	800427a <HAL_GPIO_Init+0x13a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	e001      	b.n	800427e <HAL_GPIO_Init+0x13e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2bff      	cmp	r3, #255	@ 0xff
 8004284:	d802      	bhi.n	800428c <HAL_GPIO_Init+0x14c>
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	e002      	b.n	8004292 <HAL_GPIO_Init+0x152>
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	3b08      	subs	r3, #8
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	210f      	movs	r1, #15
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	401a      	ands	r2, r3
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	431a      	orrs	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80b1 	beq.w	8004422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042c0:	4b4d      	ldr	r3, [pc, #308]	@ (80043f8 <HAL_GPIO_Init+0x2b8>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	4a4c      	ldr	r2, [pc, #304]	@ (80043f8 <HAL_GPIO_Init+0x2b8>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6193      	str	r3, [r2, #24]
 80042cc:	4b4a      	ldr	r3, [pc, #296]	@ (80043f8 <HAL_GPIO_Init+0x2b8>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042d8:	4a48      	ldr	r2, [pc, #288]	@ (80043fc <HAL_GPIO_Init+0x2bc>)
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	3302      	adds	r3, #2
 80042e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	220f      	movs	r2, #15
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4013      	ands	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a40      	ldr	r2, [pc, #256]	@ (8004400 <HAL_GPIO_Init+0x2c0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_GPIO_Init+0x1ec>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3f      	ldr	r2, [pc, #252]	@ (8004404 <HAL_GPIO_Init+0x2c4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00d      	beq.n	8004328 <HAL_GPIO_Init+0x1e8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3e      	ldr	r2, [pc, #248]	@ (8004408 <HAL_GPIO_Init+0x2c8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <HAL_GPIO_Init+0x1e4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3d      	ldr	r2, [pc, #244]	@ (800440c <HAL_GPIO_Init+0x2cc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_GPIO_Init+0x1e0>
 800431c:	2303      	movs	r3, #3
 800431e:	e006      	b.n	800432e <HAL_GPIO_Init+0x1ee>
 8004320:	2304      	movs	r3, #4
 8004322:	e004      	b.n	800432e <HAL_GPIO_Init+0x1ee>
 8004324:	2302      	movs	r3, #2
 8004326:	e002      	b.n	800432e <HAL_GPIO_Init+0x1ee>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_GPIO_Init+0x1ee>
 800432c:	2300      	movs	r3, #0
 800432e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004330:	f002 0203 	and.w	r2, r2, #3
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	4093      	lsls	r3, r2
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800433e:	492f      	ldr	r1, [pc, #188]	@ (80043fc <HAL_GPIO_Init+0x2bc>)
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	3302      	adds	r3, #2
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004358:	4b2d      	ldr	r3, [pc, #180]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	492c      	ldr	r1, [pc, #176]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]
 8004364:	e006      	b.n	8004374 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004366:	4b2a      	ldr	r3, [pc, #168]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	43db      	mvns	r3, r3
 800436e:	4928      	ldr	r1, [pc, #160]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 8004370:	4013      	ands	r3, r2
 8004372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004380:	4b23      	ldr	r3, [pc, #140]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4922      	ldr	r1, [pc, #136]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
 800438c:	e006      	b.n	800439c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	43db      	mvns	r3, r3
 8004396:	491e      	ldr	r1, [pc, #120]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 8004398:	4013      	ands	r3, r2
 800439a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043a8:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4918      	ldr	r1, [pc, #96]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
 80043b4:	e006      	b.n	80043c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043b6:	4b16      	ldr	r3, [pc, #88]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	43db      	mvns	r3, r3
 80043be:	4914      	ldr	r1, [pc, #80]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d021      	beq.n	8004414 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	490e      	ldr	r1, [pc, #56]	@ (8004410 <HAL_GPIO_Init+0x2d0>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
 80043dc:	e021      	b.n	8004422 <HAL_GPIO_Init+0x2e2>
 80043de:	bf00      	nop
 80043e0:	10320000 	.word	0x10320000
 80043e4:	10310000 	.word	0x10310000
 80043e8:	10220000 	.word	0x10220000
 80043ec:	10210000 	.word	0x10210000
 80043f0:	10120000 	.word	0x10120000
 80043f4:	10110000 	.word	0x10110000
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40010000 	.word	0x40010000
 8004400:	40010800 	.word	0x40010800
 8004404:	40010c00 	.word	0x40010c00
 8004408:	40011000 	.word	0x40011000
 800440c:	40011400 	.word	0x40011400
 8004410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004414:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <HAL_GPIO_Init+0x304>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	43db      	mvns	r3, r3
 800441c:	4909      	ldr	r1, [pc, #36]	@ (8004444 <HAL_GPIO_Init+0x304>)
 800441e:	4013      	ands	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	3301      	adds	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	fa22 f303 	lsr.w	r3, r2, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	f47f ae8e 	bne.w	8004154 <HAL_GPIO_Init+0x14>
  }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	372c      	adds	r7, #44	@ 0x2c
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40010400 	.word	0x40010400

08004448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e001      	b.n	800446a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	807b      	strh	r3, [r7, #2]
 8004482:	4613      	mov	r3, r2
 8004484:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004486:	787b      	ldrb	r3, [r7, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448c:	887a      	ldrh	r2, [r7, #2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004492:	e003      	b.n	800449c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	041a      	lsls	r2, r3, #16
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e12b      	b.n	8004712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe ffcc 	bl	800346c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	@ 0x24
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800450c:	f002 fd9e 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 8004510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a81      	ldr	r2, [pc, #516]	@ (800471c <HAL_I2C_Init+0x274>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d807      	bhi.n	800452c <HAL_I2C_Init+0x84>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a80      	ldr	r2, [pc, #512]	@ (8004720 <HAL_I2C_Init+0x278>)
 8004520:	4293      	cmp	r3, r2
 8004522:	bf94      	ite	ls
 8004524:	2301      	movls	r3, #1
 8004526:	2300      	movhi	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e006      	b.n	800453a <HAL_I2C_Init+0x92>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a7d      	ldr	r2, [pc, #500]	@ (8004724 <HAL_I2C_Init+0x27c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	bf94      	ite	ls
 8004534:	2301      	movls	r3, #1
 8004536:	2300      	movhi	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0e7      	b.n	8004712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a78      	ldr	r2, [pc, #480]	@ (8004728 <HAL_I2C_Init+0x280>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0c9b      	lsrs	r3, r3, #18
 800454c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a6a      	ldr	r2, [pc, #424]	@ (800471c <HAL_I2C_Init+0x274>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d802      	bhi.n	800457c <HAL_I2C_Init+0xd4>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3301      	adds	r3, #1
 800457a:	e009      	b.n	8004590 <HAL_I2C_Init+0xe8>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	4a69      	ldr	r2, [pc, #420]	@ (800472c <HAL_I2C_Init+0x284>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	3301      	adds	r3, #1
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	495c      	ldr	r1, [pc, #368]	@ (800471c <HAL_I2C_Init+0x274>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d819      	bhi.n	80045e4 <HAL_I2C_Init+0x13c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e59      	subs	r1, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045c4:	400b      	ands	r3, r1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_I2C_Init+0x138>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1e59      	subs	r1, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045de:	e051      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 80045e0:	2304      	movs	r3, #4
 80045e2:	e04f      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <HAL_I2C_Init+0x168>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1e58      	subs	r0, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	440b      	add	r3, r1
 80045fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e012      	b.n	8004636 <HAL_I2C_Init+0x18e>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Init+0x196>
 800463a:	2301      	movs	r3, #1
 800463c:	e022      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10e      	bne.n	8004664 <HAL_I2C_Init+0x1bc>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1e58      	subs	r0, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	440b      	add	r3, r1
 8004654:	fbb0 f3f3 	udiv	r3, r0, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004662:	e00f      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	0099      	lsls	r1, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	fbb0 f3f3 	udiv	r3, r0, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	6809      	ldr	r1, [r1, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6911      	ldr	r1, [r2, #16]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68d2      	ldr	r2, [r2, #12]
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	000186a0 	.word	0x000186a0
 8004720:	001e847f 	.word	0x001e847f
 8004724:	003d08ff 	.word	0x003d08ff
 8004728:	431bde83 	.word	0x431bde83
 800472c:	10624dd3 	.word	0x10624dd3

08004730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	461a      	mov	r2, r3
 800473c:	460b      	mov	r3, r1
 800473e:	817b      	strh	r3, [r7, #10]
 8004740:	4613      	mov	r3, r2
 8004742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7ff f9c0 	bl	8003ac8 <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	f040 80e0 	bne.w	8004918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2319      	movs	r3, #25
 800475e:	2201      	movs	r2, #1
 8004760:	4970      	ldr	r1, [pc, #448]	@ (8004924 <HAL_I2C_Master_Transmit+0x1f4>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f964 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	e0d3      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_I2C_Master_Transmit+0x50>
 800477c:	2302      	movs	r3, #2
 800477e:	e0cc      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d007      	beq.n	80047a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2221      	movs	r2, #33	@ 0x21
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2210      	movs	r2, #16
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	893a      	ldrh	r2, [r7, #8]
 80047d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a50      	ldr	r2, [pc, #320]	@ (8004928 <HAL_I2C_Master_Transmit+0x1f8>)
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047e8:	8979      	ldrh	r1, [r7, #10]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f89c 	bl	800492c <I2C_MasterRequestWrite>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e08d      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004814:	e066      	b.n	80048e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	6a39      	ldr	r1, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fa22 	bl	8004c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	2b04      	cmp	r3, #4
 800482c:	d107      	bne.n	800483e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06b      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d11b      	bne.n	80048b8 <HAL_I2C_Master_Transmit+0x188>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d017      	beq.n	80048b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	6a39      	ldr	r1, [r7, #32]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa19 	bl	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d107      	bne.n	80048e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e01a      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d194      	bne.n	8004816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	00100002 	.word	0x00100002
 8004928:	ffff0000 	.word	0xffff0000

0800492c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	460b      	mov	r3, r1
 800493a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d006      	beq.n	8004956 <I2C_MasterRequestWrite+0x2a>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d003      	beq.n	8004956 <I2C_MasterRequestWrite+0x2a>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004954:	d108      	bne.n	8004968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e00b      	b.n	8004980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	2b12      	cmp	r3, #18
 800496e:	d107      	bne.n	8004980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800497e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f84f 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d103      	bne.n	80049b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e035      	b.n	8004a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049bc:	d108      	bne.n	80049d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049cc:	611a      	str	r2, [r3, #16]
 80049ce:	e01b      	b.n	8004a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049d0:	897b      	ldrh	r3, [r7, #10]
 80049d2:	11db      	asrs	r3, r3, #7
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0306 	and.w	r3, r3, #6
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f063 030f 	orn	r3, r3, #15
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	490e      	ldr	r1, [pc, #56]	@ (8004a28 <I2C_MasterRequestWrite+0xfc>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f898 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e010      	b.n	8004a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4907      	ldr	r1, [pc, #28]	@ (8004a2c <I2C_MasterRequestWrite+0x100>)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f888 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	00010008 	.word	0x00010008
 8004a2c:	00010002 	.word	0x00010002

08004a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a40:	e048      	b.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d044      	beq.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7ff f83d 	bl	8003ac8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d139      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10d      	bne.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	e00c      	b.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d116      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e023      	b.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10d      	bne.n	8004afa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	43da      	mvns	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	e00c      	b.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d093      	beq.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b32:	e071      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b42:	d123      	bne.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e067      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d041      	beq.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fe ff98 	bl	8003ac8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d136      	bne.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10c      	bne.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e00b      	b.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	43da      	mvns	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e021      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10c      	bne.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e00b      	b.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af6d 	bne.w	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	e034      	b.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f886 	bl	8004d84 <I2C_IsAcknowledgeFailed>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e034      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d028      	beq.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fe ff1d 	bl	8003ac8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11d      	bne.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b80      	cmp	r3, #128	@ 0x80
 8004cac:	d016      	beq.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e007      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d1c3      	bne.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d00:	e034      	b.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f83e 	bl	8004d84 <I2C_IsAcknowledgeFailed>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e034      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d028      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fe fed5 	bl	8003ac8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11d      	bne.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d016      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d1c3      	bne.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9a:	d11b      	bne.n	8004dd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0e8      	b.n	8004fc4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f007 fff0 	bl	800cdec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2203      	movs	r2, #3
 8004e10:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f003 fe51 	bl	8008ac6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e2e:	f003 fe27 	bl	8008a80 <USB_CoreInit>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0bf      	b.n	8004fc4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f003 fe55 	bl	8008afa <USB_SetCurrentMode>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e0b0      	b.n	8004fc4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	e03e      	b.n	8004ee6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e68:	7bfa      	ldrb	r2, [r7, #15]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	440b      	add	r3, r1
 8004e76:	3311      	adds	r3, #17
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	440b      	add	r3, r1
 8004e8a:	3310      	adds	r3, #16
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3313      	adds	r3, #19
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3324      	adds	r3, #36	@ 0x24
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	440b      	add	r3, r1
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3bb      	bcc.n	8004e68 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e044      	b.n	8004f80 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	440b      	add	r3, r1
 8004f04:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	440b      	add	r3, r1
 8004f1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	440b      	add	r3, r1
 8004f30:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f64:	7bfa      	ldrb	r2, [r7, #15]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	791b      	ldrb	r3, [r3, #4]
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d3b5      	bcc.n	8004ef6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f94:	f003 fdbd 	bl	8008b12 <USB_DevInit>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e00c      	b.n	8004fc4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f006 f83c 	bl	800b03a <USB_DevDisconnect>

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_PCD_Start+0x16>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e016      	b.n	8005010 <HAL_PCD_Start+0x44>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 fd53 	bl	8008a9a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f008 f96b 	bl	800d2d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f006 f810 	bl	800b026 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f006 f812 	bl	800b04e <USB_ReadInterrupts>
 800502a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fb1a 	bl	8005670 <PCD_EP_ISR_Handler>

    return;
 800503c:	e119      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005050:	b29a      	uxth	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800505a:	b292      	uxth	r2, r2
 800505c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f007 ff3e 	bl	800cee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f905 	bl	8005278 <HAL_PCD_SetAddress>

    return;
 800506e:	e100      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00c      	beq.n	8005094 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800508c:	b292      	uxth	r2, r2
 800508e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005092:	e0ee      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b0:	b292      	uxth	r2, r2
 80050b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050b6:	e0dc      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d027      	beq.n	8005112 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0204 	bic.w	r2, r2, #4
 80050d4:	b292      	uxth	r2, r2
 80050d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0208 	bic.w	r2, r2, #8
 80050ec:	b292      	uxth	r2, r2
 80050ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f007 ff2e 	bl	800cf54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005100:	b29a      	uxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800510a:	b292      	uxth	r2, r2
 800510c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005110:	e0af      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8083 	beq.w	8005224 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e010      	b.n	8005146 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	7ffb      	ldrb	r3, [r7, #31]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	7ffb      	ldrb	r3, [r7, #31]
 8005132:	8812      	ldrh	r2, [r2, #0]
 8005134:	b292      	uxth	r2, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	3320      	adds	r3, #32
 800513a:	443b      	add	r3, r7
 800513c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005140:	7ffb      	ldrb	r3, [r7, #31]
 8005142:	3301      	adds	r3, #1
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	7ffb      	ldrb	r3, [r7, #31]
 8005148:	2b07      	cmp	r3, #7
 800514a:	d9eb      	bls.n	8005124 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	b292      	uxth	r2, r2
 8005160:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	b292      	uxth	r2, r2
 8005178:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800517c:	bf00      	nop
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005186:	b29b      	uxth	r3, r3
 8005188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f6      	beq.n	800517e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a2:	b292      	uxth	r2, r2
 80051a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e00f      	b.n	80051ce <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	4611      	mov	r1, r2
 80051b6:	7ffa      	ldrb	r2, [r7, #31]
 80051b8:	0092      	lsls	r2, r2, #2
 80051ba:	440a      	add	r2, r1
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	3320      	adds	r3, #32
 80051c0:	443b      	add	r3, r7
 80051c2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80051c6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
 80051ca:	3301      	adds	r3, #1
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	7ffb      	ldrb	r3, [r7, #31]
 80051d0:	2b07      	cmp	r3, #7
 80051d2:	d9ec      	bls.n	80051ae <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	b292      	uxth	r2, r2
 80051e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051fe:	b292      	uxth	r2, r2
 8005200:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0204 	orr.w	r2, r2, #4
 8005216:	b292      	uxth	r2, r2
 8005218:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f007 fe7f 	bl	800cf20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005222:	e026      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00f      	beq.n	800524e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005240:	b292      	uxth	r2, r2
 8005242:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f007 fe3d 	bl	800cec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800524c:	e011      	b.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800526a:	b292      	uxth	r2, r2
 800526c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005270:	bf00      	nop
  }
}
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_PCD_SetAddress+0x1a>
 800528e:	2302      	movs	r3, #2
 8005290:	e012      	b.n	80052b8 <HAL_PCD_SetAddress+0x40>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f005 fea9 	bl	800b000 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	70fb      	strb	r3, [r7, #3]
 80052d2:	460b      	mov	r3, r1
 80052d4:	803b      	strh	r3, [r7, #0]
 80052d6:	4613      	mov	r3, r2
 80052d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	da0e      	bge.n	8005304 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 0207 	and.w	r2, r3, #7
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	3310      	adds	r3, #16
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	705a      	strb	r2, [r3, #1]
 8005302:	e00e      	b.n	8005322 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	f003 0207 	and.w	r2, r3, #7
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800532e:	883a      	ldrh	r2, [r7, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	78ba      	ldrb	r2, [r7, #2]
 8005338:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800533a:	78bb      	ldrb	r3, [r7, #2]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d102      	bne.n	8005346 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_PCD_EP_Open+0x94>
 8005350:	2302      	movs	r3, #2
 8005352:	e00e      	b.n	8005372 <HAL_PCD_EP_Open+0xb2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	4618      	mov	r0, r3
 8005364:	f003 fbf2 	bl	8008b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005370:	7afb      	ldrb	r3, [r7, #11]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800538a:	2b00      	cmp	r3, #0
 800538c:	da0e      	bge.n	80053ac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	f003 0207 	and.w	r2, r3, #7
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	3310      	adds	r3, #16
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	705a      	strb	r2, [r3, #1]
 80053aa:	e00e      	b.n	80053ca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	f003 0207 	and.w	r2, r3, #7
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_PCD_EP_Close+0x6a>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e00e      	b.n	8005402 <HAL_PCD_EP_Close+0x88>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f003 ff6a 	bl	80092cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	460b      	mov	r3, r1
 8005418:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541a:	7afb      	ldrb	r3, [r7, #11]
 800541c:	f003 0207 	and.w	r2, r3, #7
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2200      	movs	r2, #0
 8005442:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2200      	movs	r2, #0
 8005448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800544a:	7afb      	ldrb	r3, [r7, #11]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	b2da      	uxtb	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	4618      	mov	r0, r3
 800545e:	f004 f921 	bl	80096a4 <USB_EPStartXfer>

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 0207 	and.w	r2, r3, #7
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	460b      	mov	r3, r1
 80054a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	f003 0207 	and.w	r2, r3, #7
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	3310      	adds	r3, #16
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2201      	movs	r2, #1
 80054e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e6:	7afb      	ldrb	r3, [r7, #11]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f004 f8d3 	bl	80096a4 <USB_EPStartXfer>

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	7912      	ldrb	r2, [r2, #4]
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e04c      	b.n	80055c0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800552a:	2b00      	cmp	r3, #0
 800552c:	da0e      	bge.n	800554c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	f003 0207 	and.w	r2, r3, #7
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3310      	adds	r3, #16
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	705a      	strb	r2, [r3, #1]
 800554a:	e00c      	b.n	8005566 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_PCD_EP_SetStall+0x7e>
 8005582:	2302      	movs	r3, #2
 8005584:	e01c      	b.n	80055c0 <HAL_PCD_EP_SetStall+0xb8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	4618      	mov	r0, r3
 8005596:	f005 fc36 	bl	800ae06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d108      	bne.n	80055b6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f005 fd5b 	bl	800b06c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	7912      	ldrb	r2, [r2, #4]
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e040      	b.n	8005668 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da0e      	bge.n	800560c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 0207 	and.w	r2, r3, #7
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	3310      	adds	r3, #16
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	705a      	strb	r2, [r3, #1]
 800560a:	e00e      	b.n	800562a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	f003 0207 	and.w	r2, r3, #7
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_PCD_EP_ClrStall+0x82>
 8005646:	2302      	movs	r3, #2
 8005648:	e00e      	b.n	8005668 <HAL_PCD_EP_ClrStall+0xa0>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f005 fc24 	bl	800aea6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b096      	sub	sp, #88	@ 0x58
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005678:	e3bb      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005682:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005694:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 8175 	bne.w	8005988 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800569e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d14e      	bne.n	8005748 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80056b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ba:	81fb      	strh	r3, [r7, #14]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	89fb      	ldrh	r3, [r7, #14]
 80056c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3310      	adds	r3, #16
 80056d2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	3302      	adds	r3, #2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	441a      	add	r2, r3
 800570a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800570e:	2100      	movs	r1, #0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f007 fbbe 	bl	800ce92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	7b5b      	ldrb	r3, [r3, #13]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8368 	beq.w	8005df2 <PCD_EP_ISR_Handler+0x782>
 8005722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 8363 	bne.w	8005df2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7b5b      	ldrb	r3, [r3, #13]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005736:	b2da      	uxtb	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	735a      	strb	r2, [r3, #13]
 8005746:	e354      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800574e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800575a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800575e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005762:	2b00      	cmp	r3, #0
 8005764:	d034      	beq.n	80057d0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	3306      	adds	r3, #6
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800578e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005790:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800579c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80057a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f005 fcb2 	bl	800b10e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80057b6:	4013      	ands	r3, r2
 80057b8:	823b      	strh	r3, [r7, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	8a3a      	ldrh	r2, [r7, #16]
 80057c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057c4:	b292      	uxth	r2, r2
 80057c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f007 fb35 	bl	800ce38 <HAL_PCD_SetupStageCallback>
 80057ce:	e310      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80057d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f280 830c 	bge.w	8005df2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80057e6:	4013      	ands	r3, r2
 80057e8:	83fb      	strh	r3, [r7, #30]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	8bfa      	ldrh	r2, [r7, #30]
 80057f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057f4:	b292      	uxth	r2, r2
 80057f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	3306      	adds	r3, #6
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005822:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <PCD_EP_ISR_Handler+0x1f0>
 800582c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d015      	beq.n	8005860 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583a:	6959      	ldr	r1, [r3, #20]
 800583c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005842:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005844:	b29b      	uxth	r3, r3
 8005846:	f005 fc62 	bl	800b10e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800584a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	441a      	add	r2, r3
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005858:	2100      	movs	r1, #0
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f007 fafe 	bl	800ce5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800586a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800586e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 82bd 	bne.w	8005df2 <PCD_EP_ISR_Handler+0x782>
 8005878:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800587c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005884:	f000 82b5 	beq.w	8005df2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	4413      	add	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80058be:	d91d      	bls.n	80058fc <PCD_EP_ISR_Handler+0x28c>
 80058c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <PCD_EP_ISR_Handler+0x26a>
 80058d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d6:	3b01      	subs	r3, #1
 80058d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	029b      	lsls	r3, r3, #10
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	e026      	b.n	800594a <PCD_EP_ISR_Handler+0x2da>
 80058fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <PCD_EP_ISR_Handler+0x2aa>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29a      	uxth	r2, r3
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	e017      	b.n	800594a <PCD_EP_ISR_Handler+0x2da>
 800591a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	647b      	str	r3, [r7, #68]	@ 0x44
 8005922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <PCD_EP_ISR_Handler+0x2c4>
 800592e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005930:	3301      	adds	r3, #1
 8005932:	647b      	str	r3, [r7, #68]	@ 0x44
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29a      	uxth	r2, r3
 800593a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	b29a      	uxth	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595a:	827b      	strh	r3, [r7, #18]
 800595c:	8a7b      	ldrh	r3, [r7, #18]
 800595e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005962:	827b      	strh	r3, [r7, #18]
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800596a:	827b      	strh	r3, [r7, #18]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	8a7b      	ldrh	r3, [r7, #18]
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800597e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]
 8005986:	e234      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800599c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f280 80fc 	bge.w	8005b9e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80059bc:	4013      	ands	r3, r2
 80059be:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80059d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059d8:	b292      	uxth	r2, r2
 80059da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80059dc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4413      	add	r3, r2
 80059f0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80059f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f4:	7b1b      	ldrb	r3, [r3, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d125      	bne.n	8005a46 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3306      	adds	r3, #6
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a22:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005a26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8092 	beq.w	8005b54 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a36:	6959      	ldr	r1, [r3, #20]
 8005a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a3a:	88da      	ldrh	r2, [r3, #6]
 8005a3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a40:	f005 fb65 	bl	800b10e <USB_ReadPMA>
 8005a44:	e086      	b.n	8005b54 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a48:	78db      	ldrb	r3, [r3, #3]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d10a      	bne.n	8005a64 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005a4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a52:	461a      	mov	r2, r3
 8005a54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f9d9 	bl	8005e0e <HAL_PCD_EP_DB_Receive>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005a62:	e077      	b.n	8005b54 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	441a      	add	r2, r3
 8005a90:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d024      	beq.n	8005b0c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005aee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d02e      	beq.n	8005b54 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afc:	6959      	ldr	r1, [r3, #20]
 8005afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b00:	891a      	ldrh	r2, [r3, #8]
 8005b02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b06:	f005 fb02 	bl	800b10e <USB_ReadPMA>
 8005b0a:	e023      	b.n	8005b54 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	3306      	adds	r3, #6
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b34:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005b38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b46:	6959      	ldr	r1, [r3, #20]
 8005b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4a:	895a      	ldrh	r2, [r3, #10]
 8005b4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b50:	f005 fadd 	bl	800b10e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b5c:	441a      	add	r2, r3
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b6a:	441a      	add	r2, r3
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <PCD_EP_ISR_Handler+0x514>
 8005b78:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d206      	bcs.n	8005b92 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f007 f966 	bl	800ce5c <HAL_PCD_DataOutStageCallback>
 8005b90:	e005      	b.n	8005b9e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f003 fd83 	bl	80096a4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005b9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8123 	beq.w	8005df2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8005bac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	3310      	adds	r3, #16
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f040 80a2 	bne.w	8005d4a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0e:	7b1b      	ldrb	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8093 	beq.w	8005d3c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d046      	beq.n	8005cb0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d126      	bne.n	8005c78 <PCD_EP_ISR_Handler+0x608>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	4413      	add	r3, r2
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	011a      	lsls	r2, r3, #4
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	e061      	b.n	8005d3c <PCD_EP_ISR_Handler+0x6cc>
 8005c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d15d      	bne.n	8005d3c <PCD_EP_ISR_Handler+0x6cc>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c94:	4413      	add	r3, r2
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2200      	movs	r2, #0
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e045      	b.n	8005d3c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d126      	bne.n	8005d0c <PCD_EP_ISR_Handler+0x69c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	4413      	add	r3, r2
 8005cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	011a      	lsls	r2, r3, #4
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	e017      	b.n	8005d3c <PCD_EP_ISR_Handler+0x6cc>
 8005d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d113      	bne.n	8005d3c <PCD_EP_ISR_Handler+0x6cc>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d22:	4413      	add	r3, r2
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	011a      	lsls	r2, r3, #4
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2e:	4413      	add	r3, r2
 8005d30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	2200      	movs	r2, #0
 8005d3a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f007 f8a5 	bl	800ce92 <HAL_PCD_DataInStageCallback>
 8005d48:	e053      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005d4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d146      	bne.n	8005de4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4413      	add	r3, r2
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d7e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d907      	bls.n	8005d9e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8005d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d9a:	619a      	str	r2, [r3, #24]
 8005d9c:	e002      	b.n	8005da4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da0:	2200      	movs	r2, #0
 8005da2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f007 f86d 	bl	800ce92 <HAL_PCD_DataInStageCallback>
 8005db8:	e01b      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005dc2:	441a      	add	r2, r3
 8005dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005dd0:	441a      	add	r2, r3
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f003 fc61 	bl	80096a4 <USB_EPStartXfer>
 8005de2:	e006      	b.n	8005df2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005de4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005de8:	461a      	mov	r2, r3
 8005dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f91b 	bl	8006028 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	b21b      	sxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f6ff ac3b 	blt.w	800567a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3758      	adds	r7, #88	@ 0x58
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b088      	sub	sp, #32
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d07e      	beq.n	8005f24 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4413      	add	r3, r2
 8005e3a:	3302      	adds	r3, #2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d306      	bcc.n	8005e68 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	8b7b      	ldrh	r3, [r7, #26]
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	619a      	str	r2, [r3, #24]
 8005e66:	e002      	b.n	8005e6e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d123      	bne.n	8005ebe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e90:	833b      	strh	r3, [r7, #24]
 8005e92:	8b3b      	ldrh	r3, [r7, #24]
 8005e94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e98:	833b      	strh	r3, [r7, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	8b3b      	ldrh	r3, [r7, #24]
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01f      	beq.n	8005f08 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee2:	82fb      	strh	r3, [r7, #22]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	8afb      	ldrh	r3, [r7, #22]
 8005ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f08:	8b7b      	ldrh	r3, [r7, #26]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8087 	beq.w	800601e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6959      	ldr	r1, [r3, #20]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	891a      	ldrh	r2, [r3, #8]
 8005f1c:	8b7b      	ldrh	r3, [r7, #26]
 8005f1e:	f005 f8f6 	bl	800b10e <USB_ReadPMA>
 8005f22:	e07c      	b.n	800601e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	3306      	adds	r3, #6
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d306      	bcc.n	8005f66 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	8b7b      	ldrh	r3, [r7, #26]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	619a      	str	r2, [r3, #24]
 8005f64:	e002      	b.n	8005f6c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d123      	bne.n	8005fbc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8e:	83fb      	strh	r3, [r7, #30]
 8005f90:	8bfb      	ldrh	r3, [r7, #30]
 8005f92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f96:	83fb      	strh	r3, [r7, #30]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	8bfb      	ldrh	r3, [r7, #30]
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d11f      	bne.n	8006006 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe0:	83bb      	strh	r3, [r7, #28]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	8bbb      	ldrh	r3, [r7, #28]
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006006:	8b7b      	ldrh	r3, [r7, #26]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6959      	ldr	r1, [r3, #20]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	895a      	ldrh	r2, [r3, #10]
 8006018:	8b7b      	ldrh	r3, [r7, #26]
 800601a:	f005 f878 	bl	800b10e <USB_ReadPMA>
    }
  }

  return count;
 800601e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b0a4      	sub	sp, #144	@ 0x90
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 81dd 	beq.w	80063fc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	4413      	add	r3, r2
 8006056:	3302      	adds	r3, #2
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006076:	429a      	cmp	r2, r3
 8006078:	d907      	bls.n	800608a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006082:	1ad2      	subs	r2, r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	619a      	str	r2, [r3, #24]
 8006088:	e002      	b.n	8006090 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f040 80b9 	bne.w	800620c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d126      	bne.n	80060f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	4413      	add	r3, r2
 80060b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	011a      	lsls	r2, r3, #4
 80060c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e01a      	b.n	8006126 <HAL_PCD_EP_DB_Transmit+0xfe>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d116      	bne.n	8006126 <HAL_PCD_EP_DB_Transmit+0xfe>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006106:	b29b      	uxth	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610c:	4413      	add	r3, r2
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	011a      	lsls	r2, r3, #4
 8006116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006118:	4413      	add	r3, r2
 800611a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	2200      	movs	r2, #0
 8006124:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d126      	bne.n	8006182 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	011a      	lsls	r2, r3, #4
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4413      	add	r3, r2
 8006156:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006166:	b29a      	uxth	r2, r3
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617a:	b29a      	uxth	r2, r3
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e017      	b.n	80061b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d113      	bne.n	80061b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006192:	b29b      	uxth	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	4413      	add	r3, r2
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	011a      	lsls	r2, r3, #4
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	4413      	add	r3, r2
 80061a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	2200      	movs	r2, #0
 80061b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f006 fe6a 	bl	800ce92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 82fc 	beq.w	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e4:	82fb      	strh	r3, [r7, #22]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	441a      	add	r2, r3
 80061f4:	8afb      	ldrh	r3, [r7, #22]
 80061f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006206:	b29b      	uxth	r3, r3
 8006208:	8013      	strh	r3, [r2, #0]
 800620a:	e2da      	b.n	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d021      	beq.n	800625a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006230:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800624a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800624e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006256:	b29b      	uxth	r3, r3
 8006258:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006260:	2b01      	cmp	r3, #1
 8006262:	f040 82ae 	bne.w	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	695a      	ldr	r2, [r3, #20]
 800626a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800626e:	441a      	add	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800627c:	441a      	add	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	429a      	cmp	r2, r3
 800628c:	d30b      	bcc.n	80062a6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	621a      	str	r2, [r3, #32]
 80062a4:	e017      	b.n	80062d6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80062ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80062be:	e00a      	b.n	80062d6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2200      	movs	r2, #0
 80062d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d165      	bne.n	80063aa <HAL_PCD_EP_DB_Transmit+0x382>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f2:	4413      	add	r3, r2
 80062f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	011a      	lsls	r2, r3, #4
 80062fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fe:	4413      	add	r3, r2
 8006300:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006304:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006310:	b29a      	uxth	r2, r3
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800631a:	2b3e      	cmp	r3, #62	@ 0x3e
 800631c:	d91d      	bls.n	800635a <HAL_PCD_EP_DB_Transmit+0x332>
 800631e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <HAL_PCD_EP_DB_Transmit+0x310>
 8006332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006334:	3b01      	subs	r3, #1
 8006336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29a      	uxth	r2, r3
 800633e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e044      	b.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800635a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <HAL_PCD_EP_DB_Transmit+0x350>
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006370:	b29a      	uxth	r2, r3
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e035      	b.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <HAL_PCD_EP_DB_Transmit+0x36a>
 800638c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800638e:	3301      	adds	r3, #1
 8006390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800639a:	b29b      	uxth	r3, r3
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	e01c      	b.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d118      	bne.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c6:	4413      	add	r3, r2
 80063c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	011a      	lsls	r2, r3, #4
 80063d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063de:	b29a      	uxth	r2, r3
 80063e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6959      	ldr	r1, [r3, #20]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	891a      	ldrh	r2, [r3, #8]
 80063f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f004 fe44 	bl	800b082 <USB_WritePMA>
 80063fa:	e1e2      	b.n	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006404:	b29b      	uxth	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	4413      	add	r3, r2
 8006410:	3306      	adds	r3, #6
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006424:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006430:	429a      	cmp	r2, r3
 8006432:	d307      	bcc.n	8006444 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	619a      	str	r2, [r3, #24]
 8006442:	e002      	b.n	800644a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 80c0 	bne.w	80065d4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d126      	bne.n	80064aa <HAL_PCD_EP_DB_Transmit+0x482>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006470:	4413      	add	r3, r2
 8006472:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	011a      	lsls	r2, r3, #4
 800647a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800647c:	4413      	add	r3, r2
 800647e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006482:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800648e:	b29a      	uxth	r2, r3
 8006490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e01a      	b.n	80064e0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d116      	bne.n	80064e0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064c6:	4413      	add	r3, r2
 80064c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	011a      	lsls	r2, r3, #4
 80064d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064dc:	2200      	movs	r2, #0
 80064de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d12b      	bne.n	8006546 <HAL_PCD_EP_DB_Transmit+0x51e>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006502:	4413      	add	r3, r2
 8006504:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	011a      	lsls	r2, r3, #4
 800650c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800650e:	4413      	add	r3, r2
 8006510:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653c:	b29a      	uxth	r2, r3
 800653e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e017      	b.n	8006576 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d113      	bne.n	8006576 <HAL_PCD_EP_DB_Transmit+0x54e>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800655c:	4413      	add	r3, r2
 800655e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	011a      	lsls	r2, r3, #4
 8006566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006568:	4413      	add	r3, r2
 800656a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800656e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006572:	2200      	movs	r2, #0
 8006574:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f006 fc88 	bl	800ce92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 811a 	bne.w	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
 80065d2:	e0f6      	b.n	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d121      	bne.n	8006622 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006628:	2b01      	cmp	r3, #1
 800662a:	f040 80ca 	bne.w	80067c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006636:	441a      	add	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006644:	441a      	add	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	d30b      	bcc.n	800666e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	621a      	str	r2, [r3, #32]
 800666c:	e017      	b.n	800669e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d108      	bne.n	8006688 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006676:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800667a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006686:	e00a      	b.n	800669e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2200      	movs	r2, #0
 8006694:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d165      	bne.n	8006778 <HAL_PCD_EP_DB_Transmit+0x750>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066c0:	4413      	add	r3, r2
 80066c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	011a      	lsls	r2, r3, #4
 80066ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ea:	d91d      	bls.n	8006728 <HAL_PCD_EP_DB_Transmit+0x700>
 80066ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <HAL_PCD_EP_DB_Transmit+0x6de>
 8006700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006702:	3b01      	subs	r3, #1
 8006704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29a      	uxth	r2, r3
 800670c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800670e:	b29b      	uxth	r3, r3
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	b29b      	uxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	e041      	b.n	80067ac <HAL_PCD_EP_DB_Transmit+0x784>
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673e:	b29a      	uxth	r2, r3
 8006740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e032      	b.n	80067ac <HAL_PCD_EP_DB_Transmit+0x784>
 8006746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800674e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <HAL_PCD_EP_DB_Transmit+0x738>
 800675a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800675c:	3301      	adds	r3, #1
 800675e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006768:	b29b      	uxth	r3, r3
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	b29b      	uxth	r3, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	b29a      	uxth	r2, r3
 8006772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e019      	b.n	80067ac <HAL_PCD_EP_DB_Transmit+0x784>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d115      	bne.n	80067ac <HAL_PCD_EP_DB_Transmit+0x784>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678e:	4413      	add	r3, r2
 8006790:	657b      	str	r3, [r7, #84]	@ 0x54
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	011a      	lsls	r2, r3, #4
 8006798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679a:	4413      	add	r3, r2
 800679c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6959      	ldr	r1, [r3, #20]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	895a      	ldrh	r2, [r3, #10]
 80067b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f004 fc60 	bl	800b082 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067dc:	82bb      	strh	r3, [r7, #20]
 80067de:	8abb      	ldrh	r3, [r7, #20]
 80067e0:	f083 0310 	eor.w	r3, r3, #16
 80067e4:	82bb      	strh	r3, [r7, #20]
 80067e6:	8abb      	ldrh	r3, [r7, #20]
 80067e8:	f083 0320 	eor.w	r3, r3, #32
 80067ec:	82bb      	strh	r3, [r7, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	8abb      	ldrh	r3, [r7, #20]
 80067fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3790      	adds	r7, #144	@ 0x90
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	817b      	strh	r3, [r7, #10]
 800682a:	4613      	mov	r3, r2
 800682c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800682e:	897b      	ldrh	r3, [r7, #10]
 8006830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800683a:	897b      	ldrh	r3, [r7, #10]
 800683c:	f003 0207 	and.w	r2, r3, #7
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	3310      	adds	r3, #16
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e009      	b.n	8006866 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006852:	897a      	ldrh	r2, [r7, #10]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2200      	movs	r2, #0
 8006870:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	b29a      	uxth	r2, r3
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	80da      	strh	r2, [r3, #6]
 800687a:	e00b      	b.n	8006894 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2201      	movs	r2, #1
 8006880:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	b29a      	uxth	r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	b29a      	uxth	r2, r3
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80068a4:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	420e0020 	.word	0x420e0020

080068b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e272      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8087 	beq.w	80069e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068d8:	4b92      	ldr	r3, [pc, #584]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 030c 	and.w	r3, r3, #12
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d00c      	beq.n	80068fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f003 030c 	and.w	r3, r3, #12
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d112      	bne.n	8006916 <HAL_RCC_OscConfig+0x5e>
 80068f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068fc:	d10b      	bne.n	8006916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068fe:	4b89      	ldr	r3, [pc, #548]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d06c      	beq.n	80069e4 <HAL_RCC_OscConfig+0x12c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d168      	bne.n	80069e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e24c      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800691e:	d106      	bne.n	800692e <HAL_RCC_OscConfig+0x76>
 8006920:	4b80      	ldr	r3, [pc, #512]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a7f      	ldr	r2, [pc, #508]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	e02e      	b.n	800698c <HAL_RCC_OscConfig+0xd4>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10c      	bne.n	8006950 <HAL_RCC_OscConfig+0x98>
 8006936:	4b7b      	ldr	r3, [pc, #492]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7a      	ldr	r2, [pc, #488]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 800693c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4b78      	ldr	r3, [pc, #480]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a77      	ldr	r2, [pc, #476]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006948:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <HAL_RCC_OscConfig+0xd4>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0xbc>
 800695a:	4b72      	ldr	r3, [pc, #456]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a71      	ldr	r2, [pc, #452]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b6f      	ldr	r3, [pc, #444]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a6e      	ldr	r2, [pc, #440]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xd4>
 8006974:	4b6b      	ldr	r3, [pc, #428]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a6a      	ldr	r2, [pc, #424]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b68      	ldr	r3, [pc, #416]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a67      	ldr	r2, [pc, #412]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800698a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fd f898 	bl	8003ac8 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd f894 	bl	8003ac8 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	@ 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e200      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xe4>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069bc:	f7fd f884 	bl	8003ac8 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fd f880 	bl	8003ac8 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	@ 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e1ec      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	4b53      	ldr	r3, [pc, #332]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x10c>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d063      	beq.n	8006aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069fe:	4b49      	ldr	r3, [pc, #292]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x18c>
 8006a0a:	4b46      	ldr	r3, [pc, #280]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a16:	4b43      	ldr	r3, [pc, #268]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_RCC_OscConfig+0x176>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1c0      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4939      	ldr	r1, [pc, #228]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a42:	e03a      	b.n	8006aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a4c:	4b36      	ldr	r3, [pc, #216]	@ (8006b28 <HAL_RCC_OscConfig+0x270>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a52:	f7fd f839 	bl	8003ac8 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a5a:	f7fd f835 	bl	8003ac8 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e1a1      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b2a      	ldr	r3, [pc, #168]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4927      	ldr	r1, [pc, #156]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
 8006a8c:	e015      	b.n	8006aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8e:	4b26      	ldr	r3, [pc, #152]	@ (8006b28 <HAL_RCC_OscConfig+0x270>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fd f818 	bl	8003ac8 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fd f814 	bl	8003ac8 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e180      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	4b1d      	ldr	r3, [pc, #116]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03a      	beq.n	8006b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d019      	beq.n	8006b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ace:	4b17      	ldr	r3, [pc, #92]	@ (8006b2c <HAL_RCC_OscConfig+0x274>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad4:	f7fc fff8 	bl	8003ac8 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fc fff4 	bl	8003ac8 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e160      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <HAL_RCC_OscConfig+0x26c>)
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006afa:	2001      	movs	r0, #1
 8006afc:	f000 face 	bl	800709c <RCC_Delay>
 8006b00:	e01c      	b.n	8006b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <HAL_RCC_OscConfig+0x274>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b08:	f7fc ffde 	bl	8003ac8 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b0e:	e00f      	b.n	8006b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b10:	f7fc ffda 	bl	8003ac8 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d908      	bls.n	8006b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e146      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	42420000 	.word	0x42420000
 8006b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b30:	4b92      	ldr	r3, [pc, #584]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e9      	bne.n	8006b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80a6 	beq.w	8006c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10d      	bne.n	8006b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5a:	4b88      	ldr	r3, [pc, #544]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	4a87      	ldr	r2, [pc, #540]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b64:	61d3      	str	r3, [r2, #28]
 8006b66:	4b85      	ldr	r3, [pc, #532]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6e:	60bb      	str	r3, [r7, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b76:	4b82      	ldr	r3, [pc, #520]	@ (8006d80 <HAL_RCC_OscConfig+0x4c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d118      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b82:	4b7f      	ldr	r3, [pc, #508]	@ (8006d80 <HAL_RCC_OscConfig+0x4c8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a7e      	ldr	r2, [pc, #504]	@ (8006d80 <HAL_RCC_OscConfig+0x4c8>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8e:	f7fc ff9b 	bl	8003ac8 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b96:	f7fc ff97 	bl	8003ac8 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b64      	cmp	r3, #100	@ 0x64
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e103      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b75      	ldr	r3, [pc, #468]	@ (8006d80 <HAL_RCC_OscConfig+0x4c8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <HAL_RCC_OscConfig+0x312>
 8006bbc:	4b6f      	ldr	r3, [pc, #444]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	4a6e      	ldr	r2, [pc, #440]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	6213      	str	r3, [r2, #32]
 8006bc8:	e02d      	b.n	8006c26 <HAL_RCC_OscConfig+0x36e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x334>
 8006bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	4a69      	ldr	r2, [pc, #420]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6213      	str	r3, [r2, #32]
 8006bde:	4b67      	ldr	r3, [pc, #412]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	4a66      	ldr	r2, [pc, #408]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	6213      	str	r3, [r2, #32]
 8006bea:	e01c      	b.n	8006c26 <HAL_RCC_OscConfig+0x36e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d10c      	bne.n	8006c0e <HAL_RCC_OscConfig+0x356>
 8006bf4:	4b61      	ldr	r3, [pc, #388]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	4a60      	ldr	r2, [pc, #384]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	6213      	str	r3, [r2, #32]
 8006c00:	4b5e      	ldr	r3, [pc, #376]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	4a5d      	ldr	r2, [pc, #372]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6213      	str	r3, [r2, #32]
 8006c0c:	e00b      	b.n	8006c26 <HAL_RCC_OscConfig+0x36e>
 8006c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	4a5a      	ldr	r2, [pc, #360]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	6213      	str	r3, [r2, #32]
 8006c1a:	4b58      	ldr	r3, [pc, #352]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	4a57      	ldr	r2, [pc, #348]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c20:	f023 0304 	bic.w	r3, r3, #4
 8006c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c2e:	f7fc ff4b 	bl	8003ac8 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c34:	e00a      	b.n	8006c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c36:	f7fc ff47 	bl	8003ac8 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e0b1      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0ee      	beq.n	8006c36 <HAL_RCC_OscConfig+0x37e>
 8006c58:	e014      	b.n	8006c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5a:	f7fc ff35 	bl	8003ac8 <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c60:	e00a      	b.n	8006c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c62:	f7fc ff31 	bl	8003ac8 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e09b      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c78:	4b40      	ldr	r3, [pc, #256]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1ee      	bne.n	8006c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	4a3b      	ldr	r2, [pc, #236]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8087 	beq.w	8006dae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca0:	4b36      	ldr	r3, [pc, #216]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f003 030c 	and.w	r3, r3, #12
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d061      	beq.n	8006d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d146      	bne.n	8006d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb4:	4b33      	ldr	r3, [pc, #204]	@ (8006d84 <HAL_RCC_OscConfig+0x4cc>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cba:	f7fc ff05 	bl	8003ac8 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc2:	f7fc ff01 	bl	8003ac8 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e06d      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cd4:	4b29      	ldr	r3, [pc, #164]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f0      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce8:	d108      	bne.n	8006cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006cea:	4b24      	ldr	r3, [pc, #144]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	4921      	ldr	r1, [pc, #132]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a19      	ldr	r1, [r3, #32]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	491b      	ldr	r1, [pc, #108]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d14:	4b1b      	ldr	r3, [pc, #108]	@ (8006d84 <HAL_RCC_OscConfig+0x4cc>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1a:	f7fc fed5 	bl	8003ac8 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d22:	f7fc fed1 	bl	8003ac8 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e03d      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d34:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x46a>
 8006d40:	e035      	b.n	8006dae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d42:	4b10      	ldr	r3, [pc, #64]	@ (8006d84 <HAL_RCC_OscConfig+0x4cc>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d48:	f7fc febe 	bl	8003ac8 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d50:	f7fc feba 	bl	8003ac8 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e026      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d62:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f0      	bne.n	8006d50 <HAL_RCC_OscConfig+0x498>
 8006d6e:	e01e      	b.n	8006dae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e019      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40007000 	.word	0x40007000
 8006d84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_RCC_OscConfig+0x500>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d106      	bne.n	8006daa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d001      	beq.n	8006dae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000

08006dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0d0      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d910      	bls.n	8006e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dde:	4b67      	ldr	r3, [pc, #412]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f023 0207 	bic.w	r2, r3, #7
 8006de6:	4965      	ldr	r1, [pc, #404]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b63      	ldr	r3, [pc, #396]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0b8      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d020      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e18:	4b59      	ldr	r3, [pc, #356]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a58      	ldr	r2, [pc, #352]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e30:	4b53      	ldr	r3, [pc, #332]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4a52      	ldr	r2, [pc, #328]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006e3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e3c:	4b50      	ldr	r3, [pc, #320]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	494d      	ldr	r1, [pc, #308]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d040      	beq.n	8006edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d107      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e62:	4b47      	ldr	r3, [pc, #284]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d115      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e07f      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7a:	4b41      	ldr	r3, [pc, #260]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e073      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e06b      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e9a:	4b39      	ldr	r3, [pc, #228]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f023 0203 	bic.w	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4936      	ldr	r1, [pc, #216]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006eac:	f7fc fe0c 	bl	8003ac8 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb2:	e00a      	b.n	8006eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb4:	f7fc fe08 	bl	8003ac8 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e053      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eca:	4b2d      	ldr	r3, [pc, #180]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f003 020c 	and.w	r2, r3, #12
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d1eb      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006edc:	4b27      	ldr	r3, [pc, #156]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d210      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 0207 	bic.w	r2, r3, #7
 8006ef2:	4922      	ldr	r1, [pc, #136]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	4b20      	ldr	r3, [pc, #128]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d001      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e032      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f18:	4b19      	ldr	r3, [pc, #100]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4916      	ldr	r1, [pc, #88]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f36:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	490e      	ldr	r1, [pc, #56]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f4a:	f000 f821 	bl	8006f90 <HAL_RCC_GetSysClockFreq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	490a      	ldr	r1, [pc, #40]	@ (8006f84 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5c:	5ccb      	ldrb	r3, [r1, r3]
 8006f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f62:	4a09      	ldr	r2, [pc, #36]	@ (8006f88 <HAL_RCC_ClockConfig+0x1cc>)
 8006f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f66:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <HAL_RCC_ClockConfig+0x1d0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc fd6a 	bl	8003a44 <HAL_InitTick>

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40022000 	.word	0x40022000
 8006f80:	40021000 	.word	0x40021000
 8006f84:	080129f8 	.word	0x080129f8
 8006f88:	20000004 	.word	0x20000004
 8006f8c:	20000008 	.word	0x20000008

08006f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006faa:	4b1e      	ldr	r3, [pc, #120]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f003 030c 	and.w	r3, r3, #12
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d002      	beq.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x30>
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x36>
 8006fbe:	e027      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006fc0:	4b19      	ldr	r3, [pc, #100]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x98>)
 8006fc2:	613b      	str	r3, [r7, #16]
      break;
 8006fc4:	e027      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	0c9b      	lsrs	r3, r3, #18
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	4a17      	ldr	r2, [pc, #92]	@ (800702c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006fd0:	5cd3      	ldrb	r3, [r2, r3]
 8006fd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fde:	4b11      	ldr	r3, [pc, #68]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	0c5b      	lsrs	r3, r3, #17
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	4a11      	ldr	r2, [pc, #68]	@ (8007030 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006fea:	5cd3      	ldrb	r3, [r2, r3]
 8006fec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ff2:	fb03 f202 	mul.w	r2, r3, r2
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e004      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a0c      	ldr	r2, [pc, #48]	@ (8007034 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007004:	fb02 f303 	mul.w	r3, r2, r3
 8007008:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	613b      	str	r3, [r7, #16]
      break;
 800700e:	e002      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007010:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x98>)
 8007012:	613b      	str	r3, [r7, #16]
      break;
 8007014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007016:	693b      	ldr	r3, [r7, #16]
}
 8007018:	4618      	mov	r0, r3
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40021000 	.word	0x40021000
 8007028:	007a1200 	.word	0x007a1200
 800702c:	08012a10 	.word	0x08012a10
 8007030:	08012a20 	.word	0x08012a20
 8007034:	003d0900 	.word	0x003d0900

08007038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800703c:	4b02      	ldr	r3, [pc, #8]	@ (8007048 <HAL_RCC_GetHCLKFreq+0x10>)
 800703e:	681b      	ldr	r3, [r3, #0]
}
 8007040:	4618      	mov	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr
 8007048:	20000004 	.word	0x20000004

0800704c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007050:	f7ff fff2 	bl	8007038 <HAL_RCC_GetHCLKFreq>
 8007054:	4602      	mov	r2, r0
 8007056:	4b05      	ldr	r3, [pc, #20]	@ (800706c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	4903      	ldr	r1, [pc, #12]	@ (8007070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007062:	5ccb      	ldrb	r3, [r1, r3]
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40021000 	.word	0x40021000
 8007070:	08012a08 	.word	0x08012a08

08007074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007078:	f7ff ffde 	bl	8007038 <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	0adb      	lsrs	r3, r3, #11
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4903      	ldr	r1, [pc, #12]	@ (8007098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40021000 	.word	0x40021000
 8007098:	08012a08 	.word	0x08012a08

0800709c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80070a4:	4b0a      	ldr	r3, [pc, #40]	@ (80070d0 <RCC_Delay+0x34>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a0a      	ldr	r2, [pc, #40]	@ (80070d4 <RCC_Delay+0x38>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	0a5b      	lsrs	r3, r3, #9
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
 80070b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80070b8:	bf00      	nop
  }
  while (Delay --);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	60fa      	str	r2, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1f9      	bne.n	80070b8 <RCC_Delay+0x1c>
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr
 80070d0:	20000004 	.word	0x20000004
 80070d4:	10624dd3 	.word	0x10624dd3

080070d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d07d      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80070f4:	2300      	movs	r3, #0
 80070f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070f8:	4b4f      	ldr	r3, [pc, #316]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10d      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007104:	4b4c      	ldr	r3, [pc, #304]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	4a4b      	ldr	r2, [pc, #300]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800710a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800710e:	61d3      	str	r3, [r2, #28]
 8007110:	4b49      	ldr	r3, [pc, #292]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711c:	2301      	movs	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007120:	4b46      	ldr	r3, [pc, #280]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d118      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800712c:	4b43      	ldr	r3, [pc, #268]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a42      	ldr	r2, [pc, #264]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007138:	f7fc fcc6 	bl	8003ac8 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713e:	e008      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007140:	f7fc fcc2 	bl	8003ac8 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b64      	cmp	r3, #100	@ 0x64
 800714c:	d901      	bls.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e06d      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007152:	4b3a      	ldr	r3, [pc, #232]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800715e:	4b36      	ldr	r3, [pc, #216]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007166:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d02e      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	429a      	cmp	r2, r3
 800717a:	d027      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800717c:	4b2e      	ldr	r3, [pc, #184]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007184:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007186:	4b2e      	ldr	r3, [pc, #184]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800718c:	4b2c      	ldr	r3, [pc, #176]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007192:	4a29      	ldr	r2, [pc, #164]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d014      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a2:	f7fc fc91 	bl	8003ac8 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a8:	e00a      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f7fc fc8d 	bl	8003ac8 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e036      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0ee      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	4917      	ldr	r1, [pc, #92]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071e4:	4b14      	ldr	r3, [pc, #80]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	490b      	ldr	r1, [pc, #44]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800720a:	4313      	orrs	r3, r2
 800720c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800721a:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	4904      	ldr	r1, [pc, #16]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007228:	4313      	orrs	r3, r2
 800722a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000
 800723c:	40007000 	.word	0x40007000
 8007240:	42420440 	.word	0x42420440

08007244 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b10      	cmp	r3, #16
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b10      	cmp	r3, #16
 800726a:	f200 808a 	bhi.w	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d045      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d075      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800727a:	e082      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800727c:	4b46      	ldr	r3, [pc, #280]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007282:	4b45      	ldr	r3, [pc, #276]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d07b      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	0c9b      	lsrs	r3, r3, #18
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	4a41      	ldr	r2, [pc, #260]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007298:	5cd3      	ldrb	r3, [r2, r3]
 800729a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d015      	beq.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	0c5b      	lsrs	r3, r3, #17
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	4a3b      	ldr	r2, [pc, #236]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80072b2:	5cd3      	ldrb	r3, [r2, r3]
 80072b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80072c0:	4a38      	ldr	r2, [pc, #224]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e004      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4a34      	ldr	r2, [pc, #208]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80072dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e8:	d102      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	61bb      	str	r3, [r7, #24]
      break;
 80072ee:	e04a      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4a2d      	ldr	r2, [pc, #180]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
      break;
 80072fe:	e042      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007300:	4b25      	ldr	r3, [pc, #148]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007310:	d108      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800731c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	e01f      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800732a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800732e:	d109      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007330:	4b19      	ldr	r3, [pc, #100]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800733c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	e00f      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800734e:	d11c      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007350:	4b11      	ldr	r3, [pc, #68]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d016      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800735c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007360:	61bb      	str	r3, [r7, #24]
      break;
 8007362:	e012      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007364:	e011      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007366:	f7ff fe85 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	0b9b      	lsrs	r3, r3, #14
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	3301      	adds	r3, #1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	fbb2 f3f3 	udiv	r3, r2, r3
 800737e:	61bb      	str	r3, [r7, #24]
      break;
 8007380:	e004      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007382:	bf00      	nop
 8007384:	e002      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800738a:	bf00      	nop
    }
  }
  return (frequency);
 800738c:	69bb      	ldr	r3, [r7, #24]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40021000 	.word	0x40021000
 800739c:	08012a24 	.word	0x08012a24
 80073a0:	08012a34 	.word	0x08012a34
 80073a4:	007a1200 	.word	0x007a1200
 80073a8:	003d0900 	.word	0x003d0900
 80073ac:	aaaaaaab 	.word	0xaaaaaaab

080073b0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e07a      	b.n	80074bc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7c5b      	ldrb	r3, [r3, #17]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fc f898 	bl	800350c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f9be 	bl	8007764 <HAL_RTC_WaitForSynchro>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2204      	movs	r2, #4
 80073f2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e061      	b.n	80074bc <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa77 	bl	80078ec <RTC_EnterInitMode>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2204      	movs	r2, #4
 8007408:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e056      	b.n	80074bc <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0207 	bic.w	r2, r2, #7
 800741c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007426:	4b27      	ldr	r3, [pc, #156]	@ (80074c4 <HAL_RTC_Init+0x114>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	4a26      	ldr	r2, [pc, #152]	@ (80074c4 <HAL_RTC_Init+0x114>)
 800742c:	f023 0301 	bic.w	r3, r3, #1
 8007430:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007432:	4b24      	ldr	r3, [pc, #144]	@ (80074c4 <HAL_RTC_Init+0x114>)
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	4921      	ldr	r1, [pc, #132]	@ (80074c4 <HAL_RTC_Init+0x114>)
 8007440:	4313      	orrs	r3, r2
 8007442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d003      	beq.n	8007456 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e00e      	b.n	8007474 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007456:	2001      	movs	r0, #1
 8007458:	f7ff fef4 	bl	8007244 <HAL_RCCEx_GetPeriphCLKFreq>
 800745c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2204      	movs	r2, #4
 8007468:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e026      	b.n	80074bc <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3b01      	subs	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	0c1a      	lsrs	r2, r3, #16
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f002 020f 	and.w	r2, r2, #15
 8007480:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	b292      	uxth	r2, r2
 800748a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fa55 	bl	800793c <RTC_ExitInitMode>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2204      	movs	r2, #4
 800749c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e00c      	b.n	80074bc <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80074ba:	2300      	movs	r3, #0
  }
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40006c00 	.word	0x40006c00

080074c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_RTC_SetTime+0x20>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e080      	b.n	80075ee <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	7c1b      	ldrb	r3, [r3, #16]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_RTC_SetTime+0x30>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e07a      	b.n	80075ee <HAL_RTC_SetTime+0x126>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2202      	movs	r2, #2
 8007502:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d113      	bne.n	8007532 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007514:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	4619      	mov	r1, r3
 800751e:	460b      	mov	r3, r1
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	1a5b      	subs	r3, r3, r1
 8007524:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007526:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800752c:	4413      	add	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e01e      	b.n	8007570 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fa28 	bl	800798c <RTC_Bcd2ToByte>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007544:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fa1d 	bl	800798c <RTC_Bcd2ToByte>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	4613      	mov	r3, r2
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800755e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	789b      	ldrb	r3, [r3, #2]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fa11 	bl	800798c <RTC_Bcd2ToByte>
 800756a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800756c:	4423      	add	r3, r4
 800756e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007570:	6979      	ldr	r1, [r7, #20]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f953 	bl	800781e <RTC_WriteTimeCounter>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2204      	movs	r2, #4
 8007582:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e02f      	b.n	80075ee <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0205 	bic.w	r2, r2, #5
 800759c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f964 	bl	800786c <RTC_ReadAlarmCounter>
 80075a4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d018      	beq.n	80075e0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d214      	bcs.n	80075e0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80075bc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80075c0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80075c2:	6939      	ldr	r1, [r7, #16]
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f96a 	bl	800789e <RTC_WriteAlarmCounter>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2204      	movs	r2, #4
 80075d4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e006      	b.n	80075ee <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80075ec:	2300      	movs	r3, #0
  }
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd90      	pop	{r4, r7, pc}
	...

080075f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	2300      	movs	r3, #0
 800760e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_RTC_SetDate+0x24>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e097      	b.n	8007750 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	7c1b      	ldrb	r3, [r3, #16]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_RTC_SetDate+0x34>
 8007628:	2302      	movs	r3, #2
 800762a:	e091      	b.n	8007750 <HAL_RTC_SetDate+0x158>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2202      	movs	r2, #2
 8007636:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10c      	bne.n	8007658 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	78da      	ldrb	r2, [r3, #3]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	785a      	ldrb	r2, [r3, #1]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	789a      	ldrb	r2, [r3, #2]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	739a      	strb	r2, [r3, #14]
 8007656:	e01a      	b.n	800768e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78db      	ldrb	r3, [r3, #3]
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f995 	bl	800798c <RTC_Bcd2ToByte>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f98c 	bl	800798c <RTC_Bcd2ToByte>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	789b      	ldrb	r3, [r3, #2]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f983 	bl	800798c <RTC_Bcd2ToByte>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	7bdb      	ldrb	r3, [r3, #15]
 8007692:	4618      	mov	r0, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	7b59      	ldrb	r1, [r3, #13]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	7b9b      	ldrb	r3, [r3, #14]
 800769c:	461a      	mov	r2, r3
 800769e:	f000 f993 	bl	80079c8 <RTC_WeekDayNum>
 80076a2:	4603      	mov	r3, r0
 80076a4:	461a      	mov	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7b1a      	ldrb	r2, [r3, #12]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f883 	bl	80077be <RTC_ReadTimeCounter>
 80076b8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4a26      	ldr	r2, [pc, #152]	@ (8007758 <HAL_RTC_SetDate+0x160>)
 80076be:	fba2 2303 	umull	r2, r3, r2, r3
 80076c2:	0adb      	lsrs	r3, r3, #11
 80076c4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b18      	cmp	r3, #24
 80076ca:	d93a      	bls.n	8007742 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	4a23      	ldr	r2, [pc, #140]	@ (800775c <HAL_RTC_SetDate+0x164>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	4a22      	ldr	r2, [pc, #136]	@ (8007760 <HAL_RTC_SetDate+0x168>)
 80076d8:	fb02 f303 	mul.w	r3, r2, r3
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80076e2:	69f9      	ldr	r1, [r7, #28]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f89a 	bl	800781e <RTC_WriteTimeCounter>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2204      	movs	r2, #4
 80076f4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e027      	b.n	8007750 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f8b3 	bl	800786c <RTC_ReadAlarmCounter>
 8007706:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d018      	beq.n	8007742 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	429a      	cmp	r2, r3
 8007716:	d214      	bcs.n	8007742 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800771e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007722:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007724:	69b9      	ldr	r1, [r7, #24]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f8b9 	bl	800789e <RTC_WriteAlarmCounter>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2204      	movs	r2, #4
 8007736:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e006      	b.n	8007750 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	91a2b3c5 	.word	0x91a2b3c5
 800775c:	aaaaaaab 	.word	0xaaaaaaab
 8007760:	00015180 	.word	0x00015180

08007764 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e01d      	b.n	80077b6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0208 	bic.w	r2, r2, #8
 8007788:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800778a:	f7fc f99d 	bl	8003ac8 <HAL_GetTick>
 800778e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007790:	e009      	b.n	80077a6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007792:	f7fc f999 	bl	8003ac8 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077a0:	d901      	bls.n	80077a6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e007      	b.n	80077b6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ee      	beq.n	8007792 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80077be:	b480      	push	{r7}
 80077c0:	b087      	sub	sp, #28
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	827b      	strh	r3, [r7, #18]
 80077ca:	2300      	movs	r3, #0
 80077cc:	823b      	strh	r3, [r7, #16]
 80077ce:	2300      	movs	r3, #0
 80077d0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80077ee:	8a7a      	ldrh	r2, [r7, #18]
 80077f0:	8a3b      	ldrh	r3, [r7, #16]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d008      	beq.n	8007808 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80077f6:	8a3b      	ldrh	r3, [r7, #16]
 80077f8:	041a      	lsls	r2, r3, #16
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	b29b      	uxth	r3, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	e004      	b.n	8007812 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007808:	8a7b      	ldrh	r3, [r7, #18]
 800780a:	041a      	lsls	r2, r3, #16
 800780c:	89fb      	ldrh	r3, [r7, #14]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007812:	697b      	ldr	r3, [r7, #20]
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	bc80      	pop	{r7}
 800781c:	4770      	bx	lr

0800781e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f85d 	bl	80078ec <RTC_EnterInitMode>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e011      	b.n	8007862 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	0c12      	lsrs	r2, r2, #16
 8007846:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	b292      	uxth	r2, r2
 8007850:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f872 	bl	800793c <RTC_ExitInitMode>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	81fb      	strh	r3, [r7, #14]
 8007878:	2300      	movs	r3, #0
 800787a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800788c:	89fb      	ldrh	r3, [r7, #14]
 800788e:	041a      	lsls	r2, r3, #16
 8007890:	89bb      	ldrh	r3, [r7, #12]
 8007892:	4313      	orrs	r3, r2
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f81d 	bl	80078ec <RTC_EnterInitMode>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e011      	b.n	80078e2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	0c12      	lsrs	r2, r2, #16
 80078c6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	b292      	uxth	r2, r2
 80078d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f832 	bl	800793c <RTC_ExitInitMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80078f8:	f7fc f8e6 	bl	8003ac8 <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80078fe:	e009      	b.n	8007914 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007900:	f7fc f8e2 	bl	8003ac8 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790e:	d901      	bls.n	8007914 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e00f      	b.n	8007934 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ee      	beq.n	8007900 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0210 	orr.w	r2, r2, #16
 8007930:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0210 	bic.w	r2, r2, #16
 8007956:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007958:	f7fc f8b6 	bl	8003ac8 <HAL_GetTick>
 800795c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800795e:	e009      	b.n	8007974 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007960:	f7fc f8b2 	bl	8003ac8 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800796e:	d901      	bls.n	8007974 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e007      	b.n	8007984 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0ee      	beq.n	8007960 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	4413      	add	r3, r2
 80079ba:	b2db      	uxtb	r3, r3
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
	...

080079c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
 80079d4:	4613      	mov	r3, r2
 80079d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	60bb      	str	r3, [r7, #8]
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80079e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d82d      	bhi.n	8007a4a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4613      	mov	r3, r2
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	4413      	add	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	4a2c      	ldr	r2, [pc, #176]	@ (8007aac <RTC_WeekDayNum+0xe4>)
 80079fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007a00:	085a      	lsrs	r2, r3, #1
 8007a02:	78bb      	ldrb	r3, [r7, #2]
 8007a04:	441a      	add	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	441a      	add	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	4926      	ldr	r1, [pc, #152]	@ (8007ab0 <RTC_WeekDayNum+0xe8>)
 8007a18:	fba1 1303 	umull	r1, r3, r1, r3
 8007a1c:	095b      	lsrs	r3, r3, #5
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	4922      	ldr	r1, [pc, #136]	@ (8007ab0 <RTC_WeekDayNum+0xe8>)
 8007a26:	fba1 1303 	umull	r1, r3, r1, r3
 8007a2a:	09db      	lsrs	r3, r3, #7
 8007a2c:	4413      	add	r3, r2
 8007a2e:	1d1a      	adds	r2, r3, #4
 8007a30:	4b20      	ldr	r3, [pc, #128]	@ (8007ab4 <RTC_WeekDayNum+0xec>)
 8007a32:	fba3 1302 	umull	r1, r3, r3, r2
 8007a36:	1ad1      	subs	r1, r2, r3
 8007a38:	0849      	lsrs	r1, r1, #1
 8007a3a:	440b      	add	r3, r1
 8007a3c:	0899      	lsrs	r1, r3, #2
 8007a3e:	460b      	mov	r3, r1
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	1a5b      	subs	r3, r3, r1
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	e029      	b.n	8007a9e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4413      	add	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	4a15      	ldr	r2, [pc, #84]	@ (8007aac <RTC_WeekDayNum+0xe4>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	085a      	lsrs	r2, r3, #1
 8007a5e:	78bb      	ldrb	r3, [r7, #2]
 8007a60:	441a      	add	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	441a      	add	r2, r3
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4910      	ldr	r1, [pc, #64]	@ (8007ab0 <RTC_WeekDayNum+0xe8>)
 8007a70:	fba1 1303 	umull	r1, r3, r1, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	1ad2      	subs	r2, r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	490d      	ldr	r1, [pc, #52]	@ (8007ab0 <RTC_WeekDayNum+0xe8>)
 8007a7c:	fba1 1303 	umull	r1, r3, r1, r3
 8007a80:	09db      	lsrs	r3, r3, #7
 8007a82:	4413      	add	r3, r2
 8007a84:	1c9a      	adds	r2, r3, #2
 8007a86:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <RTC_WeekDayNum+0xec>)
 8007a88:	fba3 1302 	umull	r1, r3, r3, r2
 8007a8c:	1ad1      	subs	r1, r2, r3
 8007a8e:	0849      	lsrs	r1, r1, #1
 8007a90:	440b      	add	r3, r1
 8007a92:	0899      	lsrs	r1, r3, #2
 8007a94:	460b      	mov	r3, r1
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	1a5b      	subs	r3, r3, r1
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	b2db      	uxtb	r3, r3
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr
 8007aac:	38e38e39 	.word	0x38e38e39
 8007ab0:	51eb851f 	.word	0x51eb851f
 8007ab4:	24924925 	.word	0x24924925

08007ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e076      	b.n	8007bb8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d108      	bne.n	8007ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ada:	d009      	beq.n	8007af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	61da      	str	r2, [r3, #28]
 8007ae2:	e005      	b.n	8007af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fb fd22 	bl	8003554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b60:	431a      	orrs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b74:	ea42 0103 	orr.w	r1, r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	0c1a      	lsrs	r2, r3, #16
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f002 0204 	and.w	r2, r2, #4
 8007b96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69da      	ldr	r2, [r3, #28]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ba6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e041      	b.n	8007c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fb fcfe 	bl	80035e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f000 fc98 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d001      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e03a      	b.n	8007cee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a18      	ldr	r2, [pc, #96]	@ (8007cf8 <HAL_TIM_Base_Start_IT+0x98>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_TIM_Base_Start_IT+0x58>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca2:	d009      	beq.n	8007cb8 <HAL_TIM_Base_Start_IT+0x58>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a14      	ldr	r2, [pc, #80]	@ (8007cfc <HAL_TIM_Base_Start_IT+0x9c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIM_Base_Start_IT+0x58>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a13      	ldr	r2, [pc, #76]	@ (8007d00 <HAL_TIM_Base_Start_IT+0xa0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d111      	bne.n	8007cdc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b06      	cmp	r3, #6
 8007cc8:	d010      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	e007      	b.n	8007cec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800

08007d04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e041      	b.n	8007d9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f839 	bl	8007da2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f000 fbf6 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_IC_Start_IT+0x1e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	e013      	b.n	8007dfa <HAL_TIM_IC_Start_IT+0x46>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_IC_Start_IT+0x2e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	e00b      	b.n	8007dfa <HAL_TIM_IC_Start_IT+0x46>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_IC_Start_IT+0x3e>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	e003      	b.n	8007dfa <HAL_TIM_IC_Start_IT+0x46>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <HAL_TIM_IC_Start_IT+0x58>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	e013      	b.n	8007e34 <HAL_TIM_IC_Start_IT+0x80>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d104      	bne.n	8007e1c <HAL_TIM_IC_Start_IT+0x68>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	e00b      	b.n	8007e34 <HAL_TIM_IC_Start_IT+0x80>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b08      	cmp	r3, #8
 8007e20:	d104      	bne.n	8007e2c <HAL_TIM_IC_Start_IT+0x78>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e003      	b.n	8007e34 <HAL_TIM_IC_Start_IT+0x80>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d102      	bne.n	8007e42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e3c:	7b7b      	ldrb	r3, [r7, #13]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d001      	beq.n	8007e46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e0b8      	b.n	8007fb8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_IC_Start_IT+0xa2>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0xca>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_IC_Start_IT+0xb2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0xca>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_IC_Start_IT+0xc2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_IC_Start_IT+0xca>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_IC_Start_IT+0xda>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e8c:	e013      	b.n	8007eb6 <HAL_TIM_IC_Start_IT+0x102>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_IC_Start_IT+0xea>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e9c:	e00b      	b.n	8007eb6 <HAL_TIM_IC_Start_IT+0x102>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_IC_Start_IT+0xfa>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eac:	e003      	b.n	8007eb6 <HAL_TIM_IC_Start_IT+0x102>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b0c      	cmp	r3, #12
 8007eba:	d841      	bhi.n	8007f40 <HAL_TIM_IC_Start_IT+0x18c>
 8007ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <HAL_TIM_IC_Start_IT+0x110>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007ef9 	.word	0x08007ef9
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f41 	.word	0x08007f41
 8007ed0:	08007f41 	.word	0x08007f41
 8007ed4:	08007f0b 	.word	0x08007f0b
 8007ed8:	08007f41 	.word	0x08007f41
 8007edc:	08007f41 	.word	0x08007f41
 8007ee0:	08007f41 	.word	0x08007f41
 8007ee4:	08007f1d 	.word	0x08007f1d
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f41 	.word	0x08007f41
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f2f 	.word	0x08007f2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0202 	orr.w	r2, r2, #2
 8007f06:	60da      	str	r2, [r3, #12]
      break;
 8007f08:	e01d      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0204 	orr.w	r2, r2, #4
 8007f18:	60da      	str	r2, [r3, #12]
      break;
 8007f1a:	e014      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0208 	orr.w	r2, r2, #8
 8007f2a:	60da      	str	r2, [r3, #12]
      break;
 8007f2c:	e00b      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0210 	orr.w	r2, r2, #16
 8007f3c:	60da      	str	r2, [r3, #12]
      break;
 8007f3e:	e002      	b.n	8007f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d134      	bne.n	8007fb6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2201      	movs	r2, #1
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fcfe 	bl	8008956 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a18      	ldr	r2, [pc, #96]	@ (8007fc0 <HAL_TIM_IC_Start_IT+0x20c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a14      	ldr	r2, [pc, #80]	@ (8007fc4 <HAL_TIM_IC_Start_IT+0x210>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a12      	ldr	r2, [pc, #72]	@ (8007fc8 <HAL_TIM_IC_Start_IT+0x214>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d111      	bne.n	8007fa6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b06      	cmp	r3, #6
 8007f92:	d010      	beq.n	8007fb6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa4:	e007      	b.n	8007fb6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0201 	orr.w	r2, r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40000400 	.word	0x40000400
 8007fc8:	40000800 	.word	0x40000800

08007fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d020      	beq.n	8008030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0202 	mvn.w	r2, #2
 8008000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fa fa56 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 800801c:	e005      	b.n	800802a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa6c 	bl	80084fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa72 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f003 0304 	and.w	r3, r3, #4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d020      	beq.n	800807c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01b      	beq.n	800807c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0204 	mvn.w	r2, #4
 800804c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fa fa30 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8008068:	e005      	b.n	8008076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa46 	bl	80084fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa4c 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0308 	and.w	r3, r3, #8
 8008082:	2b00      	cmp	r3, #0
 8008084:	d020      	beq.n	80080c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01b      	beq.n	80080c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0208 	mvn.w	r2, #8
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2204      	movs	r2, #4
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fa fa0a 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa20 	bl	80084fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa26 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d020      	beq.n	8008114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01b      	beq.n	8008114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0210 	mvn.w	r2, #16
 80080e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2208      	movs	r2, #8
 80080ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fa f9e4 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f9fa 	bl	80084fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa00 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00c      	beq.n	8008138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d007      	beq.n	8008138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0201 	mvn.w	r2, #1
 8008130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fa f9d3 	bl	80024de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00c      	beq.n	800815c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc89 	bl	8008a6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9d0 	bl	8008520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00c      	beq.n	80081a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0220 	mvn.w	r2, #32
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fc5c 	bl	8008a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e088      	b.n	80082dc <HAL_TIM_IC_ConfigChannel+0x130>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d11b      	bne.n	8008210 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80081e8:	f000 fa12 	bl	8008610 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 020c 	bic.w	r2, r2, #12
 80081fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6999      	ldr	r1, [r3, #24]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	619a      	str	r2, [r3, #24]
 800820e:	e060      	b.n	80082d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b04      	cmp	r3, #4
 8008214:	d11c      	bne.n	8008250 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008226:	f000 fa7b 	bl	8008720 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008238:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6999      	ldr	r1, [r3, #24]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	021a      	lsls	r2, r3, #8
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	619a      	str	r2, [r3, #24]
 800824e:	e040      	b.n	80082d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b08      	cmp	r3, #8
 8008254:	d11b      	bne.n	800828e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008266:	f000 fac6 	bl	80087f6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 020c 	bic.w	r2, r2, #12
 8008278:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	61da      	str	r2, [r3, #28]
 800828c:	e021      	b.n	80082d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b0c      	cmp	r3, #12
 8008292:	d11c      	bne.n	80082ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80082a4:	f000 fae2 	bl	800886c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69da      	ldr	r2, [r3, #28]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69d9      	ldr	r1, [r3, #28]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	021a      	lsls	r2, r3, #8
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	61da      	str	r2, [r3, #28]
 80082cc:	e001      	b.n	80082d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_TIM_ConfigClockSource+0x1c>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e0b4      	b.n	800846a <HAL_TIM_ConfigClockSource+0x186>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800831e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008338:	d03e      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0xd4>
 800833a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800833e:	f200 8087 	bhi.w	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008346:	f000 8086 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x172>
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834e:	d87f      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008350:	2b70      	cmp	r3, #112	@ 0x70
 8008352:	d01a      	beq.n	800838a <HAL_TIM_ConfigClockSource+0xa6>
 8008354:	2b70      	cmp	r3, #112	@ 0x70
 8008356:	d87b      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008358:	2b60      	cmp	r3, #96	@ 0x60
 800835a:	d050      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x11a>
 800835c:	2b60      	cmp	r3, #96	@ 0x60
 800835e:	d877      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008360:	2b50      	cmp	r3, #80	@ 0x50
 8008362:	d03c      	beq.n	80083de <HAL_TIM_ConfigClockSource+0xfa>
 8008364:	2b50      	cmp	r3, #80	@ 0x50
 8008366:	d873      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008368:	2b40      	cmp	r3, #64	@ 0x40
 800836a:	d058      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x13a>
 800836c:	2b40      	cmp	r3, #64	@ 0x40
 800836e:	d86f      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008370:	2b30      	cmp	r3, #48	@ 0x30
 8008372:	d064      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15a>
 8008374:	2b30      	cmp	r3, #48	@ 0x30
 8008376:	d86b      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008378:	2b20      	cmp	r3, #32
 800837a:	d060      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15a>
 800837c:	2b20      	cmp	r3, #32
 800837e:	d867      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d05c      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15a>
 8008384:	2b10      	cmp	r3, #16
 8008386:	d05a      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15a>
 8008388:	e062      	b.n	8008450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800839a:	f000 fabd 	bl	8008918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	609a      	str	r2, [r3, #8]
      break;
 80083b6:	e04f      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083c8:	f000 faa6 	bl	8008918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083da:	609a      	str	r2, [r3, #8]
      break;
 80083dc:	e03c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ea:	461a      	mov	r2, r3
 80083ec:	f000 f96a 	bl	80086c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2150      	movs	r1, #80	@ 0x50
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fa74 	bl	80088e4 <TIM_ITRx_SetConfig>
      break;
 80083fc:	e02c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800840a:	461a      	mov	r2, r3
 800840c:	f000 f9c4 	bl	8008798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2160      	movs	r1, #96	@ 0x60
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fa64 	bl	80088e4 <TIM_ITRx_SetConfig>
      break;
 800841c:	e01c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800842a:	461a      	mov	r2, r3
 800842c:	f000 f94a 	bl	80086c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2140      	movs	r1, #64	@ 0x40
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fa54 	bl	80088e4 <TIM_ITRx_SetConfig>
      break;
 800843c:	e00c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f000 fa4b 	bl	80088e4 <TIM_ITRx_SetConfig>
      break;
 800844e:	e003      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
      break;
 8008454:	e000      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b0c      	cmp	r3, #12
 8008486:	d831      	bhi.n	80084ec <HAL_TIM_ReadCapturedValue+0x78>
 8008488:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <HAL_TIM_ReadCapturedValue+0x1c>)
 800848a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848e:	bf00      	nop
 8008490:	080084c5 	.word	0x080084c5
 8008494:	080084ed 	.word	0x080084ed
 8008498:	080084ed 	.word	0x080084ed
 800849c:	080084ed 	.word	0x080084ed
 80084a0:	080084cf 	.word	0x080084cf
 80084a4:	080084ed 	.word	0x080084ed
 80084a8:	080084ed 	.word	0x080084ed
 80084ac:	080084ed 	.word	0x080084ed
 80084b0:	080084d9 	.word	0x080084d9
 80084b4:	080084ed 	.word	0x080084ed
 80084b8:	080084ed 	.word	0x080084ed
 80084bc:	080084ed 	.word	0x080084ed
 80084c0:	080084e3 	.word	0x080084e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ca:	60fb      	str	r3, [r7, #12]

      break;
 80084cc:	e00f      	b.n	80084ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d4:	60fb      	str	r3, [r7, #12]

      break;
 80084d6:	e00a      	b.n	80084ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084de:	60fb      	str	r3, [r7, #12]

      break;
 80084e0:	e005      	b.n	80084ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	60fb      	str	r3, [r7, #12]

      break;
 80084ea:	e000      	b.n	80084ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80084ec:	bf00      	nop
  }

  return tmpreg;
 80084ee:	68fb      	ldr	r3, [r7, #12]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop

080084fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr

0800850e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
	...

08008534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a2f      	ldr	r2, [pc, #188]	@ (8008604 <TIM_Base_SetConfig+0xd0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00b      	beq.n	8008564 <TIM_Base_SetConfig+0x30>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008552:	d007      	beq.n	8008564 <TIM_Base_SetConfig+0x30>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a2c      	ldr	r2, [pc, #176]	@ (8008608 <TIM_Base_SetConfig+0xd4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d003      	beq.n	8008564 <TIM_Base_SetConfig+0x30>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a2b      	ldr	r2, [pc, #172]	@ (800860c <TIM_Base_SetConfig+0xd8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d108      	bne.n	8008576 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a22      	ldr	r2, [pc, #136]	@ (8008604 <TIM_Base_SetConfig+0xd0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0x62>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0x62>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1f      	ldr	r2, [pc, #124]	@ (8008608 <TIM_Base_SetConfig+0xd4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0x62>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1e      	ldr	r2, [pc, #120]	@ (800860c <TIM_Base_SetConfig+0xd8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008604 <TIM_Base_SetConfig+0xd0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d103      	bne.n	80085dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d005      	beq.n	80085fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f023 0201 	bic.w	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	611a      	str	r2, [r3, #16]
  }
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr
 8008604:	40012c00 	.word	0x40012c00
 8008608:	40000400 	.word	0x40000400
 800860c:	40000800 	.word	0x40000800

08008610 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	f023 0201 	bic.w	r2, r3, #1
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4a1f      	ldr	r2, [pc, #124]	@ (80086b8 <TIM_TI1_SetConfig+0xa8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <TIM_TI1_SetConfig+0x46>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008644:	d007      	beq.n	8008656 <TIM_TI1_SetConfig+0x46>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <TIM_TI1_SetConfig+0xac>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_TI1_SetConfig+0x46>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4a1b      	ldr	r2, [pc, #108]	@ (80086c0 <TIM_TI1_SetConfig+0xb0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d101      	bne.n	800865a <TIM_TI1_SetConfig+0x4a>
 8008656:	2301      	movs	r3, #1
 8008658:	e000      	b.n	800865c <TIM_TI1_SetConfig+0x4c>
 800865a:	2300      	movs	r3, #0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	e003      	b.n	800867a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f043 0301 	orr.w	r3, r3, #1
 8008678:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	b2db      	uxtb	r3, r3
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f023 030a 	bic.w	r3, r3, #10
 8008694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f003 030a 	and.w	r3, r3, #10
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr
 80086b8:	40012c00 	.word	0x40012c00
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800

080086c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f023 0201 	bic.w	r2, r3, #1
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f023 030a 	bic.w	r3, r3, #10
 8008700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	f023 0210 	bic.w	r2, r3, #16
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800874c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	021b      	lsls	r3, r3, #8
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800875e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	031b      	lsls	r3, r3, #12
 8008764:	b29b      	uxth	r3, r3
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008772:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	621a      	str	r2, [r3, #32]
}
 800878e:	bf00      	nop
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr

08008798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f023 0210 	bic.w	r2, r3, #16
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	031b      	lsls	r3, r3, #12
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	011b      	lsls	r3, r3, #4
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr

080087f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b087      	sub	sp, #28
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4313      	orrs	r3, r2
 800882a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008832:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	b2db      	uxtb	r3, r3
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008846:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	621a      	str	r2, [r3, #32]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008898:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	031b      	lsls	r3, r3, #12
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	031b      	lsls	r3, r3, #12
 80088c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr

080088e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4313      	orrs	r3, r2
 8008902:	f043 0307 	orr.w	r3, r3, #7
 8008906:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	609a      	str	r2, [r3, #8]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr

08008918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	431a      	orrs	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4313      	orrs	r3, r2
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr

08008956 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008956:	b480      	push	{r7}
 8008958:	b087      	sub	sp, #28
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	2201      	movs	r2, #1
 800896a:	fa02 f303 	lsl.w	r3, r2, r3
 800896e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a1a      	ldr	r2, [r3, #32]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	43db      	mvns	r3, r3
 8008978:	401a      	ands	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f003 031f 	and.w	r3, r3, #31
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	fa01 f303 	lsl.w	r3, r1, r3
 800898e:	431a      	orrs	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	621a      	str	r2, [r3, #32]
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr
	...

080089a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e046      	b.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a16      	ldr	r2, [pc, #88]	@ (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00e      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a04:	d009      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a12      	ldr	r2, [pc, #72]	@ (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d004      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a10      	ldr	r2, [pc, #64]	@ (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d10c      	bne.n	8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40000800 	.word	0x40000800

08008a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr

08008a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	4638      	mov	r0, r7
 8008a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr

08008a9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008aaa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008aae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ace:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008ad2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b09d      	sub	sp, #116	@ 0x74
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	78db      	ldrb	r3, [r3, #3]
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d81f      	bhi.n	8008bbe <USB_ActivateEndpoint+0x72>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <USB_ActivateEndpoint+0x38>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bc7 	.word	0x08008bc7
 8008b90:	08008ba3 	.word	0x08008ba3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008b94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008b98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008ba0:	e012      	b.n	8008bc8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008ba2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008ba6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008baa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bae:	e00b      	b.n	8008bc8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008bb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008bb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bbc:	e004      	b.n	8008bc8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008bc4:	e000      	b.n	8008bc8 <USB_ActivateEndpoint+0x7c>
      break;
 8008bc6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	441a      	add	r2, r3
 8008bd2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	441a      	add	r2, r3
 8008c16:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	7b1b      	ldrb	r3, [r3, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f040 8178 	bne.w	8008f28 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8084 	beq.w	8008d4a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	4413      	add	r3, r2
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	011a      	lsls	r2, r3, #4
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	827b      	strh	r3, [r7, #18]
 8008c84:	8a7b      	ldrh	r3, [r7, #18]
 8008c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01b      	beq.n	8008cc6 <USB_ActivateEndpoint+0x17a>
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ca4:	823b      	strh	r3, [r7, #16]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	441a      	add	r2, r3
 8008cb0:	8a3b      	ldrh	r3, [r7, #16]
 8008cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	78db      	ldrb	r3, [r3, #3]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d020      	beq.n	8008d10 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce4:	81bb      	strh	r3, [r7, #12]
 8008ce6:	89bb      	ldrh	r3, [r7, #12]
 8008ce8:	f083 0320 	eor.w	r3, r3, #32
 8008cec:	81bb      	strh	r3, [r7, #12]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	441a      	add	r2, r3
 8008cf8:	89bb      	ldrh	r3, [r7, #12]
 8008cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
 8008d0e:	e2d5      	b.n	80092bc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d26:	81fb      	strh	r3, [r7, #14]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	89fb      	ldrh	r3, [r7, #14]
 8008d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8013      	strh	r3, [r2, #0]
 8008d48:	e2b8      	b.n	80092bc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	461a      	mov	r2, r3
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	4413      	add	r3, r2
 8008d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	011a      	lsls	r2, r3, #4
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	88db      	ldrh	r3, [r3, #6]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	4413      	add	r3, r2
 8008d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	011a      	lsls	r2, r3, #4
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	801a      	strh	r2, [r3, #0]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008db8:	d91d      	bls.n	8008df6 <USB_ActivateEndpoint+0x2aa>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	095b      	lsrs	r3, r3, #5
 8008dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	f003 031f 	and.w	r3, r3, #31
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <USB_ActivateEndpoint+0x288>
 8008dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	029b      	lsls	r3, r3, #10
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4313      	orrs	r3, r2
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	e026      	b.n	8008e44 <USB_ActivateEndpoint+0x2f8>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <USB_ActivateEndpoint+0x2c8>
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e10:	801a      	strh	r2, [r3, #0]
 8008e12:	e017      	b.n	8008e44 <USB_ActivateEndpoint+0x2f8>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <USB_ActivateEndpoint+0x2e2>
 8008e28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008e52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01b      	beq.n	8008e94 <USB_ActivateEndpoint+0x348>
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e72:	843b      	strh	r3, [r7, #32]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	441a      	add	r2, r3
 8008e7e:	8c3b      	ldrh	r3, [r7, #32]
 8008e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d124      	bne.n	8008ee6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb2:	83bb      	strh	r3, [r7, #28]
 8008eb4:	8bbb      	ldrh	r3, [r7, #28]
 8008eb6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008eba:	83bb      	strh	r3, [r7, #28]
 8008ebc:	8bbb      	ldrh	r3, [r7, #28]
 8008ebe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ec2:	83bb      	strh	r3, [r7, #28]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	8bbb      	ldrh	r3, [r7, #28]
 8008ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	8013      	strh	r3, [r2, #0]
 8008ee4:	e1ea      	b.n	80092bc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008efc:	83fb      	strh	r3, [r7, #30]
 8008efe:	8bfb      	ldrh	r3, [r7, #30]
 8008f00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f04:	83fb      	strh	r3, [r7, #30]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	8bfb      	ldrh	r3, [r7, #30]
 8008f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	8013      	strh	r3, [r2, #0]
 8008f26:	e1c9      	b.n	80092bc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	78db      	ldrb	r3, [r3, #3]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d11e      	bne.n	8008f6e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f46:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	441a      	add	r2, r3
 8008f54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f60:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	8013      	strh	r3, [r2, #0]
 8008f6c:	e01d      	b.n	8008faa <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f84:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fba:	4413      	add	r3, r2
 8008fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	011a      	lsls	r2, r3, #4
 8008fc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	891b      	ldrh	r3, [r3, #8]
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fdc:	801a      	strh	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fee:	4413      	add	r3, r2
 8008ff0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	011a      	lsls	r2, r3, #4
 8008ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009000:	653b      	str	r3, [r7, #80]	@ 0x50
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	895b      	ldrh	r3, [r3, #10]
 8009006:	085b      	lsrs	r3, r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009010:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 8093 	bne.w	8009142 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800902c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01b      	beq.n	8009070 <USB_ActivateEndpoint+0x524>
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800904a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	441a      	add	r2, r3
 800905a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800905c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009064:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906c:	b29b      	uxth	r3, r3
 800906e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800907e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01b      	beq.n	80090c0 <USB_ActivateEndpoint+0x574>
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800909e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	441a      	add	r2, r3
 80090aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80090ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090bc:	b29b      	uxth	r3, r3
 80090be:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80090d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80090da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090de:	873b      	strh	r3, [r7, #56]	@ 0x38
 80090e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80090e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80090e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	441a      	add	r2, r3
 80090f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80090f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009104:	b29b      	uxth	r3, r3
 8009106:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800911a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800911e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	441a      	add	r2, r3
 800912a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800912c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800913c:	b29b      	uxth	r3, r3
 800913e:	8013      	strh	r3, [r2, #0]
 8009140:	e0bc      	b.n	80092bc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01d      	beq.n	800919a <USB_ActivateEndpoint+0x64e>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009174:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	441a      	add	r2, r3
 8009182:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800918a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800918e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009196:	b29b      	uxth	r3, r3
 8009198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80091aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80091ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d01d      	beq.n	80091f2 <USB_ActivateEndpoint+0x6a6>
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	441a      	add	r2, r3
 80091da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80091de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	78db      	ldrb	r3, [r3, #3]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d024      	beq.n	8009244 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800920c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009210:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009218:	f083 0320 	eor.w	r3, r3, #32
 800921c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	441a      	add	r2, r3
 800922a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800922e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800923e:	b29b      	uxth	r3, r3
 8009240:	8013      	strh	r3, [r2, #0]
 8009242:	e01d      	b.n	8009280 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800925a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	441a      	add	r2, r3
 8009268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800926c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009270:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800927c:	b29b      	uxth	r3, r3
 800927e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009296:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	441a      	add	r2, r3
 80092a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80092a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80092bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3774      	adds	r7, #116	@ 0x74
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bc80      	pop	{r7}
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop

080092cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b08d      	sub	sp, #52	@ 0x34
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	7b1b      	ldrb	r3, [r3, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 808e 	bne.w	80093fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d044      	beq.n	8009372 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	81bb      	strh	r3, [r7, #12]
 80092f6:	89bb      	ldrh	r3, [r7, #12]
 80092f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01b      	beq.n	8009338 <USB_DeactivateEndpoint+0x6c>
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009316:	817b      	strh	r3, [r7, #10]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	441a      	add	r2, r3
 8009322:	897b      	ldrh	r3, [r7, #10]
 8009324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800932c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009330:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009334:	b29b      	uxth	r3, r3
 8009336:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b29b      	uxth	r3, r3
 8009346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800934a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800934e:	813b      	strh	r3, [r7, #8]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	441a      	add	r2, r3
 800935a:	893b      	ldrh	r3, [r7, #8]
 800935c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936c:	b29b      	uxth	r3, r3
 800936e:	8013      	strh	r3, [r2, #0]
 8009370:	e192      	b.n	8009698 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	827b      	strh	r3, [r7, #18]
 8009380:	8a7b      	ldrh	r3, [r7, #18]
 8009382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d01b      	beq.n	80093c2 <USB_DeactivateEndpoint+0xf6>
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	b29b      	uxth	r3, r3
 8009398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800939c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a0:	823b      	strh	r3, [r7, #16]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	441a      	add	r2, r3
 80093ac:	8a3b      	ldrh	r3, [r7, #16]
 80093ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093be:	b29b      	uxth	r3, r3
 80093c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d8:	81fb      	strh	r3, [r7, #14]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	441a      	add	r2, r3
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	8013      	strh	r3, [r2, #0]
 80093fa:	e14d      	b.n	8009698 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f040 80a5 	bne.w	8009550 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	843b      	strh	r3, [r7, #32]
 8009414:	8c3b      	ldrh	r3, [r7, #32]
 8009416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01b      	beq.n	8009456 <USB_DeactivateEndpoint+0x18a>
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009434:	83fb      	strh	r3, [r7, #30]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	441a      	add	r2, r3
 8009440:	8bfb      	ldrh	r3, [r7, #30]
 8009442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800944a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800944e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009452:	b29b      	uxth	r3, r3
 8009454:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	83bb      	strh	r3, [r7, #28]
 8009464:	8bbb      	ldrh	r3, [r7, #28]
 8009466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d01b      	beq.n	80094a6 <USB_DeactivateEndpoint+0x1da>
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009484:	837b      	strh	r3, [r7, #26]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	441a      	add	r2, r3
 8009490:	8b7b      	ldrh	r3, [r7, #26]
 8009492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800949a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800949e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094bc:	833b      	strh	r3, [r7, #24]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	441a      	add	r2, r3
 80094c8:	8b3b      	ldrh	r3, [r7, #24]
 80094ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094da:	b29b      	uxth	r3, r3
 80094dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f4:	82fb      	strh	r3, [r7, #22]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	441a      	add	r2, r3
 8009500:	8afb      	ldrh	r3, [r7, #22]
 8009502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800950e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009512:	b29b      	uxth	r3, r3
 8009514:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800952c:	82bb      	strh	r3, [r7, #20]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	441a      	add	r2, r3
 8009538:	8abb      	ldrh	r3, [r7, #20]
 800953a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800953e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800954a:	b29b      	uxth	r3, r3
 800954c:	8013      	strh	r3, [r2, #0]
 800954e:	e0a3      	b.n	8009698 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800955e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01b      	beq.n	80095a0 <USB_DeactivateEndpoint+0x2d4>
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800957a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	441a      	add	r2, r3
 800958a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800958c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800959c:	b29b      	uxth	r3, r3
 800959e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80095ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80095b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01b      	beq.n	80095f0 <USB_DeactivateEndpoint+0x324>
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	441a      	add	r2, r3
 80095da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009606:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	441a      	add	r2, r3
 8009612:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800961c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009624:	b29b      	uxth	r3, r3
 8009626:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800963a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800963e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	441a      	add	r2, r3
 800964a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800964c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800965c:	b29b      	uxth	r3, r3
 800965e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009676:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	441a      	add	r2, r3
 8009682:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800968c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009694:	b29b      	uxth	r3, r3
 8009696:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3734      	adds	r7, #52	@ 0x34
 800969e:	46bd      	mov	sp, r7
 80096a0:	bc80      	pop	{r7}
 80096a2:	4770      	bx	lr

080096a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b0c2      	sub	sp, #264	@ 0x108
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096b2:	6018      	str	r0, [r3, #0]
 80096b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096bc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	785b      	ldrb	r3, [r3, #1]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	f040 86b7 	bne.w	800a43e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d908      	bls.n	80096fe <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80096ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80096fc:	e007      	b.n	800970e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80096fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800970e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	7b1b      	ldrb	r3, [r3, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d13a      	bne.n	8009794 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800971e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6959      	ldr	r1, [r3, #20]
 800972a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	88da      	ldrh	r2, [r3, #6]
 8009736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973a:	b29b      	uxth	r3, r3
 800973c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009740:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009744:	6800      	ldr	r0, [r0, #0]
 8009746:	f001 fc9c 	bl	800b082 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800974a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	613b      	str	r3, [r7, #16]
 8009756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009764:	b29b      	uxth	r3, r3
 8009766:	461a      	mov	r2, r3
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4413      	add	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	011a      	lsls	r2, r3, #4
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	4413      	add	r3, r2
 8009780:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978a:	b29a      	uxth	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	f000 be1f 	b.w	800a3d2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	78db      	ldrb	r3, [r3, #3]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	f040 8462 	bne.w	800a06a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80097a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6a1a      	ldr	r2, [r3, #32]
 80097b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	429a      	cmp	r2, r3
 80097c0:	f240 83df 	bls.w	8009f82 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80097ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	441a      	add	r2, r3
 8009808:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800980c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009814:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800981c:	b29b      	uxth	r3, r3
 800981e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6a1a      	ldr	r2, [r3, #32]
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	1ad2      	subs	r2, r2, r3
 8009832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800983e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 81c7 	beq.w	8009bf4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	633b      	str	r3, [r7, #48]	@ 0x30
 8009872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	785b      	ldrb	r3, [r3, #1]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d177      	bne.n	8009972 <USB_EPStartXfer+0x2ce>
 8009882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800988e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800989c:	b29b      	uxth	r3, r3
 800989e:	461a      	mov	r2, r3
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	4413      	add	r3, r2
 80098a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	011a      	lsls	r2, r3, #4
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	4413      	add	r3, r2
 80098b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80098bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80098d4:	d921      	bls.n	800991a <USB_EPStartXfer+0x276>
 80098d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <USB_EPStartXfer+0x252>
 80098ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80098f0:	3b01      	subs	r3, #1
 80098f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009900:	b29b      	uxth	r3, r3
 8009902:	029b      	lsls	r3, r3, #10
 8009904:	b29b      	uxth	r3, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	b29b      	uxth	r3, r3
 800990a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800990e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009912:	b29a      	uxth	r2, r3
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	801a      	strh	r2, [r3, #0]
 8009918:	e050      	b.n	80099bc <USB_EPStartXfer+0x318>
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <USB_EPStartXfer+0x294>
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009930:	b29a      	uxth	r2, r3
 8009932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	e041      	b.n	80099bc <USB_EPStartXfer+0x318>
 8009938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <USB_EPStartXfer+0x2b4>
 800994e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009952:	3301      	adds	r3, #1
 8009954:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29a      	uxth	r2, r3
 800995e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009962:	b29b      	uxth	r3, r3
 8009964:	029b      	lsls	r3, r3, #10
 8009966:	b29b      	uxth	r3, r3
 8009968:	4313      	orrs	r3, r2
 800996a:	b29a      	uxth	r2, r3
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	801a      	strh	r2, [r3, #0]
 8009970:	e024      	b.n	80099bc <USB_EPStartXfer+0x318>
 8009972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d11c      	bne.n	80099bc <USB_EPStartXfer+0x318>
 8009982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009990:	b29b      	uxth	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	4413      	add	r3, r2
 8009998:	633b      	str	r3, [r7, #48]	@ 0x30
 800999a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	011a      	lsls	r2, r3, #4
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	4413      	add	r3, r2
 80099ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80099b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	895b      	ldrh	r3, [r3, #10]
 80099c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6959      	ldr	r1, [r3, #20]
 80099d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099dc:	b29b      	uxth	r3, r3
 80099de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80099e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	f001 fb49 	bl	800b082 <USB_WritePMA>
            ep->xfer_buff += len;
 80099f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695a      	ldr	r2, [r3, #20]
 80099fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a00:	441a      	add	r2, r3
 8009a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6a1a      	ldr	r2, [r3, #32]
 8009a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d90f      	bls.n	8009a4a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6a1a      	ldr	r2, [r3, #32]
 8009a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	621a      	str	r2, [r3, #32]
 8009a48:	e00e      	b.n	8009a68 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2200      	movs	r2, #0
 8009a66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d177      	bne.n	8009b68 <USB_EPStartXfer+0x4c4>
 8009a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	61bb      	str	r3, [r7, #24]
 8009a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	4413      	add	r3, r2
 8009a9a:	61bb      	str	r3, [r7, #24]
 8009a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	011a      	lsls	r2, r3, #4
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	4413      	add	r3, r2
 8009aae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009aca:	d921      	bls.n	8009b10 <USB_EPStartXfer+0x46c>
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d104      	bne.n	8009aec <USB_EPStartXfer+0x448>
 8009ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	029b      	lsls	r3, r3, #10
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4313      	orrs	r3, r2
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	801a      	strh	r2, [r3, #0]
 8009b0e:	e056      	b.n	8009bbe <USB_EPStartXfer+0x51a>
 8009b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <USB_EPStartXfer+0x48a>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	801a      	strh	r2, [r3, #0]
 8009b2c:	e047      	b.n	8009bbe <USB_EPStartXfer+0x51a>
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d004      	beq.n	8009b4e <USB_EPStartXfer+0x4aa>
 8009b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b48:	3301      	adds	r3, #1
 8009b4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	801a      	strh	r2, [r3, #0]
 8009b66:	e02a      	b.n	8009bbe <USB_EPStartXfer+0x51a>
 8009b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d122      	bne.n	8009bbe <USB_EPStartXfer+0x51a>
 8009b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	623b      	str	r3, [r7, #32]
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	4413      	add	r3, r2
 8009b9a:	623b      	str	r3, [r7, #32]
 8009b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	011a      	lsls	r2, r3, #4
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	4413      	add	r3, r2
 8009bae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009bb2:	61fb      	str	r3, [r7, #28]
 8009bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	891b      	ldrh	r3, [r3, #8]
 8009bca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6959      	ldr	r1, [r3, #20]
 8009bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009be4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009be8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009bec:	6800      	ldr	r0, [r0, #0]
 8009bee:	f001 fa48 	bl	800b082 <USB_WritePMA>
 8009bf2:	e3ee      	b.n	800a3d2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d177      	bne.n	8009cf4 <USB_EPStartXfer+0x650>
 8009c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	461a      	mov	r2, r3
 8009c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c24:	4413      	add	r3, r2
 8009c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	011a      	lsls	r2, r3, #4
 8009c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c38:	4413      	add	r3, r2
 8009c3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c4e:	801a      	strh	r2, [r3, #0]
 8009c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c54:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c56:	d921      	bls.n	8009c9c <USB_EPStartXfer+0x5f8>
 8009c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c5c:	095b      	lsrs	r3, r3, #5
 8009c5e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c66:	f003 031f 	and.w	r3, r3, #31
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d104      	bne.n	8009c78 <USB_EPStartXfer+0x5d4>
 8009c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c72:	3b01      	subs	r3, #1
 8009c74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	029b      	lsls	r3, r3, #10
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e056      	b.n	8009d4a <USB_EPStartXfer+0x6a6>
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <USB_EPStartXfer+0x616>
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e047      	b.n	8009d4a <USB_EPStartXfer+0x6a6>
 8009cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cbe:	085b      	lsrs	r3, r3, #1
 8009cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <USB_EPStartXfer+0x636>
 8009cd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	029b      	lsls	r3, r3, #10
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4313      	orrs	r3, r2
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cf0:	801a      	strh	r2, [r3, #0]
 8009cf2:	e02a      	b.n	8009d4a <USB_EPStartXfer+0x6a6>
 8009cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d122      	bne.n	8009d4a <USB_EPStartXfer+0x6a6>
 8009d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	461a      	mov	r2, r3
 8009d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d24:	4413      	add	r3, r2
 8009d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	011a      	lsls	r2, r3, #4
 8009d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	891b      	ldrh	r3, [r3, #8]
 8009d56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6959      	ldr	r1, [r3, #20]
 8009d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d78:	6800      	ldr	r0, [r0, #0]
 8009d7a:	f001 f982 	bl	800b082 <USB_WritePMA>
            ep->xfer_buff += len;
 8009d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695a      	ldr	r2, [r3, #20]
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8e:	441a      	add	r2, r3
 8009d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a1a      	ldr	r2, [r3, #32]
 8009da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d90f      	bls.n	8009dd8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	621a      	str	r2, [r3, #32]
 8009dd6:	e00e      	b.n	8009df6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2200      	movs	r2, #0
 8009df4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d177      	bne.n	8009f02 <USB_EPStartXfer+0x85e>
 8009e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	4413      	add	r3, r2
 8009e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	011a      	lsls	r2, r3, #4
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	4413      	add	r3, r2
 8009e48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e62:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e64:	d921      	bls.n	8009eaa <USB_EPStartXfer+0x806>
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e74:	f003 031f 	and.w	r3, r3, #31
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d104      	bne.n	8009e86 <USB_EPStartXfer+0x7e2>
 8009e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e80:	3b01      	subs	r3, #1
 8009e82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	029b      	lsls	r3, r3, #10
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	4313      	orrs	r3, r2
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	e050      	b.n	8009f4c <USB_EPStartXfer+0x8a8>
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <USB_EPStartXfer+0x824>
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	e041      	b.n	8009f4c <USB_EPStartXfer+0x8a8>
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <USB_EPStartXfer+0x844>
 8009ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	029b      	lsls	r3, r3, #10
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e024      	b.n	8009f4c <USB_EPStartXfer+0x8a8>
 8009f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d11c      	bne.n	8009f4c <USB_EPStartXfer+0x8a8>
 8009f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	461a      	mov	r2, r3
 8009f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f26:	4413      	add	r3, r2
 8009f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	011a      	lsls	r2, r3, #4
 8009f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	895b      	ldrh	r3, [r3, #10]
 8009f58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6959      	ldr	r1, [r3, #20]
 8009f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009f76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009f7a:	6800      	ldr	r0, [r0, #0]
 8009f7c:	f001 f881 	bl	800b082 <USB_WritePMA>
 8009f80:	e227      	b.n	800a3d2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fb8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	441a      	add	r2, r3
 8009fd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a008:	b29b      	uxth	r3, r3
 800a00a:	461a      	mov	r2, r3
 800a00c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a00e:	4413      	add	r3, r2
 800a010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	011a      	lsls	r2, r3, #4
 800a020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a022:	4413      	add	r3, r2
 800a024:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a02e:	b29a      	uxth	r2, r3
 800a030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a032:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	891b      	ldrh	r3, [r3, #8]
 800a040:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6959      	ldr	r1, [r3, #20]
 800a050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a054:	b29b      	uxth	r3, r3
 800a056:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a05a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a05e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a062:	6800      	ldr	r0, [r0, #0]
 800a064:	f001 f80d 	bl	800b082 <USB_WritePMA>
 800a068:	e1b3      	b.n	800a3d2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a06a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a06e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6a1a      	ldr	r2, [r3, #32]
 800a076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 80c6 	beq.w	800a23c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d177      	bne.n	800a1bc <USB_EPStartXfer+0xb18>
 800a0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0ec:	4413      	add	r3, r2
 800a0ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	011a      	lsls	r2, r3, #4
 800a0fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a100:	4413      	add	r3, r2
 800a102:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a106:	667b      	str	r3, [r7, #100]	@ 0x64
 800a108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a112:	b29a      	uxth	r2, r3
 800a114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a11e:	d921      	bls.n	800a164 <USB_EPStartXfer+0xac0>
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a12e:	f003 031f 	and.w	r3, r3, #31
 800a132:	2b00      	cmp	r3, #0
 800a134:	d104      	bne.n	800a140 <USB_EPStartXfer+0xa9c>
 800a136:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a13a:	3b01      	subs	r3, #1
 800a13c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29a      	uxth	r2, r3
 800a146:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	029b      	lsls	r3, r3, #10
 800a14e:	b29b      	uxth	r3, r3
 800a150:	4313      	orrs	r3, r2
 800a152:	b29b      	uxth	r3, r3
 800a154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a160:	801a      	strh	r2, [r3, #0]
 800a162:	e050      	b.n	800a206 <USB_EPStartXfer+0xb62>
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <USB_EPStartXfer+0xade>
 800a16c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	e041      	b.n	800a206 <USB_EPStartXfer+0xb62>
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a186:	085b      	lsrs	r3, r3, #1
 800a188:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <USB_EPStartXfer+0xafe>
 800a198:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a19c:	3301      	adds	r3, #1
 800a19e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	029b      	lsls	r3, r3, #10
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	e024      	b.n	800a206 <USB_EPStartXfer+0xb62>
 800a1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d11c      	bne.n	800a206 <USB_EPStartXfer+0xb62>
 800a1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1e0:	4413      	add	r3, r2
 800a1e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	011a      	lsls	r2, r3, #4
 800a1f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a200:	b29a      	uxth	r2, r3
 800a202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a204:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	895b      	ldrh	r3, [r3, #10]
 800a212:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6959      	ldr	r1, [r3, #20]
 800a222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a226:	b29b      	uxth	r3, r3
 800a228:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a22c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a230:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a234:	6800      	ldr	r0, [r0, #0]
 800a236:	f000 ff24 	bl	800b082 <USB_WritePMA>
 800a23a:	e0ca      	b.n	800a3d2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d177      	bne.n	800a33c <USB_EPStartXfer+0xc98>
 800a24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a25c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a266:	b29b      	uxth	r3, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a26c:	4413      	add	r3, r2
 800a26e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	011a      	lsls	r2, r3, #4
 800a27e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a280:	4413      	add	r3, r2
 800a282:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a286:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a292:	b29a      	uxth	r2, r3
 800a294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a29e:	d921      	bls.n	800a2e4 <USB_EPStartXfer+0xc40>
 800a2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a4:	095b      	lsrs	r3, r3, #5
 800a2a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ae:	f003 031f 	and.w	r3, r3, #31
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <USB_EPStartXfer+0xc1c>
 800a2b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	029b      	lsls	r3, r3, #10
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2e0:	801a      	strh	r2, [r3, #0]
 800a2e2:	e05c      	b.n	800a39e <USB_EPStartXfer+0xcfa>
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <USB_EPStartXfer+0xc5e>
 800a2ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2fe:	801a      	strh	r2, [r3, #0]
 800a300:	e04d      	b.n	800a39e <USB_EPStartXfer+0xcfa>
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d004      	beq.n	800a322 <USB_EPStartXfer+0xc7e>
 800a318:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a31c:	3301      	adds	r3, #1
 800a31e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	b29a      	uxth	r2, r3
 800a328:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	029b      	lsls	r3, r3, #10
 800a330:	b29b      	uxth	r3, r3
 800a332:	4313      	orrs	r3, r2
 800a334:	b29a      	uxth	r2, r3
 800a336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e030      	b.n	800a39e <USB_EPStartXfer+0xcfa>
 800a33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d128      	bne.n	800a39e <USB_EPStartXfer+0xcfa>
 800a34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a35e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a368:	b29b      	uxth	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a370:	4413      	add	r3, r2
 800a372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	011a      	lsls	r2, r3, #4
 800a384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a388:	4413      	add	r3, r2
 800a38a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a38e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a396:	b29a      	uxth	r2, r3
 800a398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a39c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	891b      	ldrh	r3, [r3, #8]
 800a3aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6959      	ldr	r1, [r3, #20]
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a3c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a3c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a3cc:	6800      	ldr	r0, [r0, #0]
 800a3ce:	f000 fe58 	bl	800b082 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3f8:	817b      	strh	r3, [r7, #10]
 800a3fa:	897b      	ldrh	r3, [r7, #10]
 800a3fc:	f083 0310 	eor.w	r3, r3, #16
 800a400:	817b      	strh	r3, [r7, #10]
 800a402:	897b      	ldrh	r3, [r7, #10]
 800a404:	f083 0320 	eor.w	r3, r3, #32
 800a408:	817b      	strh	r3, [r7, #10]
 800a40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a40e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	441a      	add	r2, r3
 800a424:	897b      	ldrh	r3, [r7, #10]
 800a426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a42a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a42e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a436:	b29b      	uxth	r3, r3
 800a438:	8013      	strh	r3, [r2, #0]
 800a43a:	f000 bcde 	b.w	800adfa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	7b1b      	ldrb	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 80bb 	bne.w	800a5c6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699a      	ldr	r2, [r3, #24]
 800a45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d917      	bls.n	800a49c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	699a      	ldr	r2, [r3, #24]
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48c:	1ad2      	subs	r2, r2, r3
 800a48e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	619a      	str	r2, [r3, #24]
 800a49a:	e00e      	b.n	800a4ba <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a4ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4de:	4413      	add	r3, r2
 800a4e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	011a      	lsls	r2, r3, #4
 800a4f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a4fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a512:	801a      	strh	r2, [r3, #0]
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a518:	2b3e      	cmp	r3, #62	@ 0x3e
 800a51a:	d924      	bls.n	800a566 <USB_EPStartXfer+0xec2>
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a52a:	f003 031f 	and.w	r3, r3, #31
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d104      	bne.n	800a53c <USB_EPStartXfer+0xe98>
 800a532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a536:	3b01      	subs	r3, #1
 800a538:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a53c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	b29a      	uxth	r2, r3
 800a544:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a548:	b29b      	uxth	r3, r3
 800a54a:	029b      	lsls	r3, r3, #10
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	b29b      	uxth	r3, r3
 800a552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a560:	801a      	strh	r2, [r3, #0]
 800a562:	f000 bc10 	b.w	800ad86 <USB_EPStartXfer+0x16e2>
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10c      	bne.n	800a588 <USB_EPStartXfer+0xee4>
 800a56e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a57a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a57e:	b29a      	uxth	r2, r3
 800a580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a584:	801a      	strh	r2, [r3, #0]
 800a586:	e3fe      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58c:	085b      	lsrs	r3, r3, #1
 800a58e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d004      	beq.n	800a5a8 <USB_EPStartXfer+0xf04>
 800a59e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	029b      	lsls	r3, r3, #10
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5c2:	801a      	strh	r2, [r3, #0]
 800a5c4:	e3df      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	78db      	ldrb	r3, [r3, #3]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	f040 8218 	bne.w	800aa08 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a5d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f040 809d 	bne.w	800a724 <USB_EPStartXfer+0x1080>
 800a5ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a606:	b29b      	uxth	r3, r3
 800a608:	461a      	mov	r2, r3
 800a60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a60e:	4413      	add	r3, r2
 800a610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	011a      	lsls	r2, r3, #4
 800a622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a626:	4413      	add	r3, r2
 800a628:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a62c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
 800a638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a642:	801a      	strh	r2, [r3, #0]
 800a644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	2b3e      	cmp	r3, #62	@ 0x3e
 800a652:	d92b      	bls.n	800a6ac <USB_EPStartXfer+0x1008>
 800a654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	095b      	lsrs	r3, r3, #5
 800a662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 031f 	and.w	r3, r3, #31
 800a676:	2b00      	cmp	r3, #0
 800a678:	d104      	bne.n	800a684 <USB_EPStartXfer+0xfe0>
 800a67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a67e:	3b01      	subs	r3, #1
 800a680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a690:	b29b      	uxth	r3, r3
 800a692:	029b      	lsls	r3, r3, #10
 800a694:	b29b      	uxth	r3, r3
 800a696:	4313      	orrs	r3, r2
 800a698:	b29b      	uxth	r3, r3
 800a69a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a69e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6a8:	801a      	strh	r2, [r3, #0]
 800a6aa:	e070      	b.n	800a78e <USB_EPStartXfer+0x10ea>
 800a6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10c      	bne.n	800a6d6 <USB_EPStartXfer+0x1032>
 800a6bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6d2:	801a      	strh	r2, [r3, #0]
 800a6d4:	e05b      	b.n	800a78e <USB_EPStartXfer+0x10ea>
 800a6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	085b      	lsrs	r3, r3, #1
 800a6e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <USB_EPStartXfer+0x1062>
 800a6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a700:	3301      	adds	r3, #1
 800a702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a712:	b29b      	uxth	r3, r3
 800a714:	029b      	lsls	r3, r3, #10
 800a716:	b29b      	uxth	r3, r3
 800a718:	4313      	orrs	r3, r2
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a720:	801a      	strh	r2, [r3, #0]
 800a722:	e034      	b.n	800a78e <USB_EPStartXfer+0x10ea>
 800a724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d12c      	bne.n	800a78e <USB_EPStartXfer+0x10ea>
 800a734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a750:	b29b      	uxth	r3, r3
 800a752:	461a      	mov	r2, r3
 800a754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a758:	4413      	add	r3, r2
 800a75a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	011a      	lsls	r2, r3, #4
 800a76c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a770:	4413      	add	r3, r2
 800a772:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a77a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	b29a      	uxth	r2, r3
 800a788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	785b      	ldrb	r3, [r3, #1]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f040 809d 	bne.w	800a8e8 <USB_EPStartXfer+0x1244>
 800a7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	011a      	lsls	r2, r3, #4
 800a7e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a7f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a7f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a800:	b29a      	uxth	r2, r3
 800a802:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a806:	801a      	strh	r2, [r3, #0]
 800a808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	2b3e      	cmp	r3, #62	@ 0x3e
 800a816:	d92b      	bls.n	800a870 <USB_EPStartXfer+0x11cc>
 800a818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	095b      	lsrs	r3, r3, #5
 800a826:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a82a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 031f 	and.w	r3, r3, #31
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d104      	bne.n	800a848 <USB_EPStartXfer+0x11a4>
 800a83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a842:	3b01      	subs	r3, #1
 800a844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29a      	uxth	r2, r3
 800a850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a854:	b29b      	uxth	r3, r3
 800a856:	029b      	lsls	r3, r3, #10
 800a858:	b29b      	uxth	r3, r3
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a866:	b29a      	uxth	r2, r3
 800a868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	e069      	b.n	800a944 <USB_EPStartXfer+0x12a0>
 800a870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10c      	bne.n	800a89a <USB_EPStartXfer+0x11f6>
 800a880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	b29b      	uxth	r3, r3
 800a888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a88c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a890:	b29a      	uxth	r2, r3
 800a892:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a896:	801a      	strh	r2, [r3, #0]
 800a898:	e054      	b.n	800a944 <USB_EPStartXfer+0x12a0>
 800a89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	085b      	lsrs	r3, r3, #1
 800a8a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <USB_EPStartXfer+0x1226>
 800a8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	029b      	lsls	r3, r3, #10
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8e4:	801a      	strh	r2, [r3, #0]
 800a8e6:	e02d      	b.n	800a944 <USB_EPStartXfer+0x12a0>
 800a8e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	785b      	ldrb	r3, [r3, #1]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d125      	bne.n	800a944 <USB_EPStartXfer+0x12a0>
 800a8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a906:	b29b      	uxth	r3, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a90e:	4413      	add	r3, r2
 800a910:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	011a      	lsls	r2, r3, #4
 800a922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a926:	4413      	add	r3, r2
 800a928:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a92c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a942:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 8218 	beq.w	800ad86 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a95a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a976:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a97a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <USB_EPStartXfer+0x12ea>
 800a982:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10d      	bne.n	800a9aa <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a98e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a996:	2b00      	cmp	r3, #0
 800a998:	f040 81f5 	bne.w	800ad86 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a99c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 81ee 	bne.w	800ad86 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a9d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	441a      	add	r2, r3
 800a9ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a9f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	8013      	strh	r3, [r2, #0]
 800aa06:	e1be      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	78db      	ldrb	r3, [r3, #3]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	f040 81b4 	bne.w	800ad82 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d917      	bls.n	800aa66 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800aa36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800aa46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	699a      	ldr	r2, [r3, #24]
 800aa52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa56:	1ad2      	subs	r2, r2, r3
 800aa58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	619a      	str	r2, [r3, #24]
 800aa64:	e00e      	b.n	800aa84 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800aa66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800aa76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2200      	movs	r2, #0
 800aa82:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aa84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f040 8085 	bne.w	800aba0 <USB_EPStartXfer+0x14fc>
 800aa96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aaa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aaba:	4413      	add	r3, r2
 800aabc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	011a      	lsls	r2, r3, #4
 800aace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aad2:	4413      	add	r3, r2
 800aad4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aadc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aaee:	801a      	strh	r2, [r3, #0]
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf4:	2b3e      	cmp	r3, #62	@ 0x3e
 800aaf6:	d923      	bls.n	800ab40 <USB_EPStartXfer+0x149c>
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aafc:	095b      	lsrs	r3, r3, #5
 800aafe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab06:	f003 031f 	and.w	r3, r3, #31
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d104      	bne.n	800ab18 <USB_EPStartXfer+0x1474>
 800ab0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab12:	3b01      	subs	r3, #1
 800ab14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	029b      	lsls	r3, r3, #10
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab3c:	801a      	strh	r2, [r3, #0]
 800ab3e:	e060      	b.n	800ac02 <USB_EPStartXfer+0x155e>
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10c      	bne.n	800ab62 <USB_EPStartXfer+0x14be>
 800ab48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab5e:	801a      	strh	r2, [r3, #0]
 800ab60:	e04f      	b.n	800ac02 <USB_EPStartXfer+0x155e>
 800ab62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab66:	085b      	lsrs	r3, r3, #1
 800ab68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d004      	beq.n	800ab82 <USB_EPStartXfer+0x14de>
 800ab78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	029b      	lsls	r3, r3, #10
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	4313      	orrs	r3, r2
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e030      	b.n	800ac02 <USB_EPStartXfer+0x155e>
 800aba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	785b      	ldrb	r3, [r3, #1]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d128      	bne.n	800ac02 <USB_EPStartXfer+0x155e>
 800abb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800abbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abcc:	b29b      	uxth	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abd4:	4413      	add	r3, r2
 800abd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800abda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	011a      	lsls	r2, r3, #4
 800abe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abec:	4413      	add	r3, r2
 800abee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800abf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac00:	801a      	strh	r2, [r3, #0]
 800ac02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f040 8085 	bne.w	800ad2c <USB_EPStartXfer+0x1688>
 800ac22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac46:	4413      	add	r3, r2
 800ac48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	011a      	lsls	r2, r3, #4
 800ac5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac5e:	4413      	add	r3, r2
 800ac60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ac64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac7a:	801a      	strh	r2, [r3, #0]
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac80:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac82:	d923      	bls.n	800accc <USB_EPStartXfer+0x1628>
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac92:	f003 031f 	and.w	r3, r3, #31
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d104      	bne.n	800aca4 <USB_EPStartXfer+0x1600>
 800ac9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	b29a      	uxth	r2, r3
 800acac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	029b      	lsls	r3, r3, #10
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4313      	orrs	r3, r2
 800acb8:	b29b      	uxth	r3, r3
 800acba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acc8:	801a      	strh	r2, [r3, #0]
 800acca:	e05c      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10c      	bne.n	800acee <USB_EPStartXfer+0x164a>
 800acd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acea:	801a      	strh	r2, [r3, #0]
 800acec:	e04b      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	085b      	lsrs	r3, r3, #1
 800acf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <USB_EPStartXfer+0x166a>
 800ad04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad08:	3301      	adds	r3, #1
 800ad0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	029b      	lsls	r3, r3, #10
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	4313      	orrs	r3, r2
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad28:	801a      	strh	r2, [r3, #0]
 800ad2a:	e02c      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
 800ad2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d124      	bne.n	800ad86 <USB_EPStartXfer+0x16e2>
 800ad3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad52:	4413      	add	r3, r2
 800ad54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	011a      	lsls	r2, r3, #4
 800ad66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ad70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad7e:	801a      	strh	r2, [r3, #0]
 800ad80:	e001      	b.n	800ad86 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e03a      	b.n	800adfc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ada8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800adb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800adb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800adb8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800adbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800adc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800adc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800adc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800add6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	441a      	add	r2, r3
 800ade2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ade6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b085      	sub	sp, #20
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	785b      	ldrb	r3, [r3, #1]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d020      	beq.n	800ae5a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae2e:	81bb      	strh	r3, [r7, #12]
 800ae30:	89bb      	ldrh	r3, [r7, #12]
 800ae32:	f083 0310 	eor.w	r3, r3, #16
 800ae36:	81bb      	strh	r3, [r7, #12]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	441a      	add	r2, r3
 800ae42:	89bb      	ldrh	r3, [r7, #12]
 800ae44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	8013      	strh	r3, [r2, #0]
 800ae58:	e01f      	b.n	800ae9a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae70:	81fb      	strh	r3, [r7, #14]
 800ae72:	89fb      	ldrh	r3, [r7, #14]
 800ae74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae78:	81fb      	strh	r3, [r7, #14]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	441a      	add	r2, r3
 800ae84:	89fb      	ldrh	r3, [r7, #14]
 800ae86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bc80      	pop	{r7}
 800aea4:	4770      	bx	lr

0800aea6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b087      	sub	sp, #28
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	7b1b      	ldrb	r3, [r3, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f040 809d 	bne.w	800aff4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d04c      	beq.n	800af5c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	823b      	strh	r3, [r7, #16]
 800aed0:	8a3b      	ldrh	r3, [r7, #16]
 800aed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d01b      	beq.n	800af12 <USB_EPClearStall+0x6c>
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef0:	81fb      	strh	r3, [r7, #14]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	441a      	add	r2, r3
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af0e:	b29b      	uxth	r3, r3
 800af10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	78db      	ldrb	r3, [r3, #3]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d06c      	beq.n	800aff4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	b29b      	uxth	r3, r3
 800af28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af30:	81bb      	strh	r3, [r7, #12]
 800af32:	89bb      	ldrh	r3, [r7, #12]
 800af34:	f083 0320 	eor.w	r3, r3, #32
 800af38:	81bb      	strh	r3, [r7, #12]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	441a      	add	r2, r3
 800af44:	89bb      	ldrh	r3, [r7, #12]
 800af46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af56:	b29b      	uxth	r3, r3
 800af58:	8013      	strh	r3, [r2, #0]
 800af5a:	e04b      	b.n	800aff4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	82fb      	strh	r3, [r7, #22]
 800af6a:	8afb      	ldrh	r3, [r7, #22]
 800af6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01b      	beq.n	800afac <USB_EPClearStall+0x106>
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af8a:	82bb      	strh	r3, [r7, #20]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	441a      	add	r2, r3
 800af96:	8abb      	ldrh	r3, [r7, #20]
 800af98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	b29b      	uxth	r3, r3
 800afba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afc2:	827b      	strh	r3, [r7, #18]
 800afc4:	8a7b      	ldrh	r3, [r7, #18]
 800afc6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800afca:	827b      	strh	r3, [r7, #18]
 800afcc:	8a7b      	ldrh	r3, [r7, #18]
 800afce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800afd2:	827b      	strh	r3, [r7, #18]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	441a      	add	r2, r3
 800afde:	8a7b      	ldrh	r3, [r7, #18]
 800afe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	bc80      	pop	{r7}
 800affe:	4770      	bx	lr

0800b000 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	460b      	mov	r3, r1
 800b00a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d103      	bne.n	800b01a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2280      	movs	r2, #128	@ 0x80
 800b016:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr

0800b03a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b083      	sub	sp, #12
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	bc80      	pop	{r7}
 800b04c:	4770      	bx	lr

0800b04e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b04e:	b480      	push	{r7}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b060:	68fb      	ldr	r3, [r7, #12]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	bc80      	pop	{r7}
 800b06a:	4770      	bx	lr

0800b06c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr

0800b082 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b082:	b480      	push	{r7}
 800b084:	b08b      	sub	sp, #44	@ 0x2c
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	4611      	mov	r1, r2
 800b08e:	461a      	mov	r2, r3
 800b090:	460b      	mov	r3, r1
 800b092:	80fb      	strh	r3, [r7, #6]
 800b094:	4613      	mov	r3, r2
 800b096:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b098:	88bb      	ldrh	r3, [r7, #4]
 800b09a:	3301      	adds	r3, #1
 800b09c:	085b      	lsrs	r3, r3, #1
 800b09e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0a8:	88fb      	ldrh	r3, [r7, #6]
 800b0aa:	005a      	lsls	r2, r3, #1
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0ba:	e01f      	b.n	800b0fc <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	b21b      	sxth	r3, r3
 800b0ca:	021b      	lsls	r3, r3, #8
 800b0cc:	b21a      	sxth	r2, r3
 800b0ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	b21b      	sxth	r3, r3
 800b0d6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	8a7a      	ldrh	r2, [r7, #18]
 800b0dc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1dc      	bne.n	800b0bc <USB_WritePMA+0x3a>
  }
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	372c      	adds	r7, #44	@ 0x2c
 800b108:	46bd      	mov	sp, r7
 800b10a:	bc80      	pop	{r7}
 800b10c:	4770      	bx	lr

0800b10e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b10e:	b480      	push	{r7}
 800b110:	b08b      	sub	sp, #44	@ 0x2c
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	4611      	mov	r1, r2
 800b11a:	461a      	mov	r2, r3
 800b11c:	460b      	mov	r3, r1
 800b11e:	80fb      	strh	r3, [r7, #6]
 800b120:	4613      	mov	r3, r2
 800b122:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b124:	88bb      	ldrh	r3, [r7, #4]
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	b29b      	uxth	r3, r3
 800b12a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b134:	88fb      	ldrh	r3, [r7, #6]
 800b136:	005a      	lsls	r2, r3, #1
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b140:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	627b      	str	r3, [r7, #36]	@ 0x24
 800b146:	e01b      	b.n	800b180 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	3302      	adds	r3, #2
 800b154:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	3301      	adds	r3, #1
 800b162:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	0a1b      	lsrs	r3, r3, #8
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3301      	adds	r3, #1
 800b172:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	3302      	adds	r3, #2
 800b178:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	3b01      	subs	r3, #1
 800b17e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e0      	bne.n	800b148 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b186:	88bb      	ldrh	r3, [r7, #4]
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d007      	beq.n	800b1a2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	b29b      	uxth	r3, r3
 800b198:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	701a      	strb	r2, [r3, #0]
  }
}
 800b1a2:	bf00      	nop
 800b1a4:	372c      	adds	r7, #44	@ 0x2c
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr

0800b1ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b1b0:	4904      	ldr	r1, [pc, #16]	@ (800b1c4 <MX_FATFS_Init+0x18>)
 800b1b2:	4805      	ldr	r0, [pc, #20]	@ (800b1c8 <MX_FATFS_Init+0x1c>)
 800b1b4:	f001 fc12 	bl	800c9dc <FATFS_LinkDriver>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	4b03      	ldr	r3, [pc, #12]	@ (800b1cc <MX_FATFS_Init+0x20>)
 800b1be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b1c0:	bf00      	nop
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	2000080c 	.word	0x2000080c
 800b1c8:	20000010 	.word	0x20000010
 800b1cc:	20000808 	.word	0x20000808

0800b1d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b1da:	4b05      	ldr	r3, [pc, #20]	@ (800b1f0 <USER_initialize+0x20>)
 800b1dc:	2201      	movs	r2, #1
 800b1de:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b1e0:	4b03      	ldr	r3, [pc, #12]	@ (800b1f0 <USER_initialize+0x20>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr
 800b1f0:	2000000d 	.word	0x2000000d

0800b1f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b1fe:	4b05      	ldr	r3, [pc, #20]	@ (800b214 <USER_status+0x20>)
 800b200:	2201      	movs	r2, #1
 800b202:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b204:	4b03      	ldr	r3, [pc, #12]	@ (800b214 <USER_status+0x20>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	bc80      	pop	{r7}
 800b212:	4770      	bx	lr
 800b214:	2000000d 	.word	0x2000000d

0800b218 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	4603      	mov	r3, r0
 800b226:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b228:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	bc80      	pop	{r7}
 800b232:	4770      	bx	lr

0800b234 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	607a      	str	r2, [r7, #4]
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b244:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b246:	4618      	mov	r0, r3
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bc80      	pop	{r7}
 800b24e:	4770      	bx	lr

0800b250 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	603a      	str	r2, [r7, #0]
 800b25a:	71fb      	strb	r3, [r7, #7]
 800b25c:	460b      	mov	r3, r1
 800b25e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	73fb      	strb	r3, [r7, #15]
    return res;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr

0800b270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	7c1b      	ldrb	r3, [r3, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d115      	bne.n	800b2b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b28c:	2202      	movs	r2, #2
 800b28e:	2181      	movs	r1, #129	@ 0x81
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f001 fee2 	bl	800d05a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b29c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 fed8 	bl	800d05a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b2b2:	e012      	b.n	800b2da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b2b4:	2340      	movs	r3, #64	@ 0x40
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	2181      	movs	r1, #129	@ 0x81
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 fecd 	bl	800d05a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b2c6:	2340      	movs	r3, #64	@ 0x40
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 fec4 	bl	800d05a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2da:	2308      	movs	r3, #8
 800b2dc:	2203      	movs	r2, #3
 800b2de:	2182      	movs	r1, #130	@ 0x82
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f001 feba 	bl	800d05a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b2f0:	f001 ffda 	bl	800d2a8 <USBD_static_malloc>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d102      	bne.n	800b30c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b306:	2301      	movs	r3, #1
 800b308:	73fb      	strb	r3, [r7, #15]
 800b30a:	e026      	b.n	800b35a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b312:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2200      	movs	r2, #0
 800b322:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	7c1b      	ldrb	r3, [r3, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d109      	bne.n	800b34a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b33c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b340:	2101      	movs	r1, #1
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 ff79 	bl	800d23a <USBD_LL_PrepareReceive>
 800b348:	e007      	b.n	800b35a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b350:	2340      	movs	r3, #64	@ 0x40
 800b352:	2101      	movs	r1, #1
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 ff70 	bl	800d23a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b374:	2181      	movs	r1, #129	@ 0x81
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 fe95 	bl	800d0a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b382:	2101      	movs	r1, #1
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fe8e 	bl	800d0a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b392:	2182      	movs	r1, #130	@ 0x82
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fe86 	bl	800d0a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00e      	beq.n	800b3c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 ff80 	bl	800d2c0 <USBD_static_free>
    pdev->pClassData = NULL;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b086      	sub	sp, #24
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d039      	beq.n	800b470 <USBD_CDC_Setup+0x9e>
 800b3fc:	2b20      	cmp	r3, #32
 800b3fe:	d17f      	bne.n	800b500 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	88db      	ldrh	r3, [r3, #6]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d029      	beq.n	800b45c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	b25b      	sxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da11      	bge.n	800b436 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b41e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	88d2      	ldrh	r2, [r2, #6]
 800b424:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b426:	6939      	ldr	r1, [r7, #16]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	88db      	ldrh	r3, [r3, #6]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f001 fa06 	bl	800c840 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b434:	e06b      	b.n	800b50e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	785a      	ldrb	r2, [r3, #1]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	88db      	ldrh	r3, [r3, #6]
 800b444:	b2da      	uxtb	r2, r3
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b44c:	6939      	ldr	r1, [r7, #16]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	88db      	ldrh	r3, [r3, #6]
 800b452:	461a      	mov	r2, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fa21 	bl	800c89c <USBD_CtlPrepareRx>
      break;
 800b45a:	e058      	b.n	800b50e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	7850      	ldrb	r0, [r2, #1]
 800b468:	2200      	movs	r2, #0
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	4798      	blx	r3
      break;
 800b46e:	e04e      	b.n	800b50e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	785b      	ldrb	r3, [r3, #1]
 800b474:	2b0b      	cmp	r3, #11
 800b476:	d02e      	beq.n	800b4d6 <USBD_CDC_Setup+0x104>
 800b478:	2b0b      	cmp	r3, #11
 800b47a:	dc38      	bgt.n	800b4ee <USBD_CDC_Setup+0x11c>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <USBD_CDC_Setup+0xb4>
 800b480:	2b0a      	cmp	r3, #10
 800b482:	d014      	beq.n	800b4ae <USBD_CDC_Setup+0xdc>
 800b484:	e033      	b.n	800b4ee <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d107      	bne.n	800b4a0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b490:	f107 030c 	add.w	r3, r7, #12
 800b494:	2202      	movs	r2, #2
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 f9d1 	bl	800c840 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b49e:	e02e      	b.n	800b4fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f001 f962 	bl	800c76c <USBD_CtlError>
            ret = USBD_FAIL;
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ac:	e027      	b.n	800b4fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d107      	bne.n	800b4c8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4b8:	f107 030f 	add.w	r3, r7, #15
 800b4bc:	2201      	movs	r2, #1
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f9bd 	bl	800c840 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4c6:	e01a      	b.n	800b4fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 f94e 	bl	800c76c <USBD_CtlError>
            ret = USBD_FAIL;
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	75fb      	strb	r3, [r7, #23]
          break;
 800b4d4:	e013      	b.n	800b4fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d00d      	beq.n	800b4fc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 f942 	bl	800c76c <USBD_CtlError>
            ret = USBD_FAIL;
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b4ec:	e006      	b.n	800b4fc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 f93b 	bl	800c76c <USBD_CtlError>
          ret = USBD_FAIL;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b4fa:	e000      	b.n	800b4fe <USBD_CDC_Setup+0x12c>
          break;
 800b4fc:	bf00      	nop
      }
      break;
 800b4fe:	e006      	b.n	800b50e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 f932 	bl	800c76c <USBD_CtlError>
      ret = USBD_FAIL;
 800b508:	2302      	movs	r3, #2
 800b50a:	75fb      	strb	r3, [r7, #23]
      break;
 800b50c:	bf00      	nop
  }

  return ret;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b52a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b532:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d03a      	beq.n	800b5b4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b53e:	78fa      	ldrb	r2, [r7, #3]
 800b540:	6879      	ldr	r1, [r7, #4]
 800b542:	4613      	mov	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	440b      	add	r3, r1
 800b54c:	331c      	adds	r3, #28
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d029      	beq.n	800b5a8 <USBD_CDC_DataIn+0x90>
 800b554:	78fa      	ldrb	r2, [r7, #3]
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	4613      	mov	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	440b      	add	r3, r1
 800b562:	331c      	adds	r3, #28
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	78f9      	ldrb	r1, [r7, #3]
 800b568:	68b8      	ldr	r0, [r7, #8]
 800b56a:	460b      	mov	r3, r1
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	440b      	add	r3, r1
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	4403      	add	r3, r0
 800b574:	3320      	adds	r3, #32
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	fbb2 f1f3 	udiv	r1, r2, r3
 800b57c:	fb01 f303 	mul.w	r3, r1, r3
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d110      	bne.n	800b5a8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b586:	78fa      	ldrb	r2, [r7, #3]
 800b588:	6879      	ldr	r1, [r7, #4]
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	440b      	add	r3, r1
 800b594:	331c      	adds	r3, #28
 800b596:	2200      	movs	r2, #0
 800b598:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b59a:	78f9      	ldrb	r1, [r7, #3]
 800b59c:	2300      	movs	r3, #0
 800b59e:	2200      	movs	r2, #0
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 fe27 	bl	800d1f4 <USBD_LL_Transmit>
 800b5a6:	e003      	b.n	800b5b0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e000      	b.n	800b5b6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b5b4:	2302      	movs	r3, #2
  }
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fe52 	bl	800d280 <USBD_LL_GetRxDataSize>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00d      	beq.n	800b60a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b602:	4611      	mov	r1, r2
 800b604:	4798      	blx	r3

    return USBD_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	e000      	b.n	800b60c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b60a:	2302      	movs	r3, #2
  }
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b622:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d014      	beq.n	800b658 <USBD_CDC_EP0_RxReady+0x44>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b634:	2bff      	cmp	r3, #255	@ 0xff
 800b636:	d00f      	beq.n	800b658 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b646:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b64e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	22ff      	movs	r2, #255	@ 0xff
 800b654:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2243      	movs	r2, #67	@ 0x43
 800b670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b672:	4b03      	ldr	r3, [pc, #12]	@ (800b680 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b674:	4618      	mov	r0, r3
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	200000ac 	.word	0x200000ac

0800b684 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2243      	movs	r2, #67	@ 0x43
 800b690:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b692:	4b03      	ldr	r3, [pc, #12]	@ (800b6a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	bc80      	pop	{r7}
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20000068 	.word	0x20000068

0800b6a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2243      	movs	r2, #67	@ 0x43
 800b6b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b6b2:	4b03      	ldr	r3, [pc, #12]	@ (800b6c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	200000f0 	.word	0x200000f0

0800b6c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	220a      	movs	r2, #10
 800b6d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b6d2:	4b03      	ldr	r3, [pc, #12]	@ (800b6e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bc80      	pop	{r7}
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000024 	.word	0x20000024

0800b6e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d005      	beq.n	800b704 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bc80      	pop	{r7}
 800b70e:	4770      	bx	lr

0800b710 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	4613      	mov	r3, r2
 800b71c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b724:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b72e:	88fa      	ldrh	r2, [r7, #6]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bc80      	pop	{r7}
 800b740:	4770      	bx	lr

0800b742 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b742:	b480      	push	{r7}
 800b744:	b085      	sub	sp, #20
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b752:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr

0800b768 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b776:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d01c      	beq.n	800b7bc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d115      	bne.n	800b7b8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2201      	movs	r2, #1
 800b790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	2181      	movs	r1, #129	@ 0x81
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f001 fd20 	bl	800d1f4 <USBD_LL_Transmit>

      return USBD_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e002      	b.n	800b7be <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e000      	b.n	800b7be <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b7bc:	2302      	movs	r3, #2
  }
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d017      	beq.n	800b810 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7c1b      	ldrb	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d109      	bne.n	800b7fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 fd20 	bl	800d23a <USBD_LL_PrepareReceive>
 800b7fa:	e007      	b.n	800b80c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b802:	2340      	movs	r3, #64	@ 0x40
 800b804:	2101      	movs	r1, #1
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f001 fd17 	bl	800d23a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b80c:	2300      	movs	r3, #0
 800b80e:	e000      	b.n	800b812 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b810:	2302      	movs	r3, #2
  }
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	4613      	mov	r3, r2
 800b826:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b82e:	2302      	movs	r3, #2
 800b830:	e01a      	b.n	800b868 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	79fa      	ldrb	r2, [r7, #7]
 800b85e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f001 fb85 	bl	800cf70 <USBD_LL_Init>

  return USBD_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d006      	beq.n	800b892 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]
 800b890:	e001      	b.n	800b896 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b892:	2302      	movs	r3, #2
 800b894:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b896:	7bfb      	ldrb	r3, [r7, #15]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bc80      	pop	{r7}
 800b8a0:	4770      	bx	lr

0800b8a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fbba 	bl	800d024 <USBD_LL_Start>

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bc80      	pop	{r7}
 800b8cc:	4770      	bx	lr

0800b8ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00c      	beq.n	800b902 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	78fa      	ldrb	r2, [r7, #3]
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	78fa      	ldrb	r2, [r7, #3]
 800b922:	4611      	mov	r1, r2
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	4798      	blx	r3

  return USBD_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fed8 	bl	800c6fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b958:	461a      	mov	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b966:	f003 031f 	and.w	r3, r3, #31
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d016      	beq.n	800b99c <USBD_LL_SetupStage+0x6a>
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d81c      	bhi.n	800b9ac <USBD_LL_SetupStage+0x7a>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <USBD_LL_SetupStage+0x4a>
 800b976:	2b01      	cmp	r3, #1
 800b978:	d008      	beq.n	800b98c <USBD_LL_SetupStage+0x5a>
 800b97a:	e017      	b.n	800b9ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f9cb 	bl	800bd20 <USBD_StdDevReq>
      break;
 800b98a:	e01a      	b.n	800b9c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fa2d 	bl	800bdf4 <USBD_StdItfReq>
      break;
 800b99a:	e012      	b.n	800b9c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fa6d 	bl	800be84 <USBD_StdEPReq>
      break;
 800b9aa:	e00a      	b.n	800b9c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b9b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 fb92 	bl	800d0e4 <USBD_LL_StallEP>
      break;
 800b9c0:	bf00      	nop
  }

  return USBD_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b9da:	7afb      	ldrb	r3, [r7, #11]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d14b      	bne.n	800ba78 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b9e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d134      	bne.n	800ba5c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d919      	bls.n	800ba32 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d203      	bcs.n	800ba20 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	e002      	b.n	800ba26 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	6879      	ldr	r1, [r7, #4]
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 ff54 	bl	800c8d8 <USBD_CtlContinueRx>
 800ba30:	e038      	b.n	800baa4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00a      	beq.n	800ba54 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d105      	bne.n	800ba54 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 ff51 	bl	800c8fc <USBD_CtlSendStatus>
 800ba5a:	e023      	b.n	800baa4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d11e      	bne.n	800baa4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ba6e:	2100      	movs	r1, #0
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f001 fb37 	bl	800d0e4 <USBD_LL_StallEP>
 800ba76:	e015      	b.n	800baa4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00d      	beq.n	800baa0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d108      	bne.n	800baa0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	7afa      	ldrb	r2, [r7, #11]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	4798      	blx	r3
 800ba9e:	e001      	b.n	800baa4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800baa0:	2302      	movs	r3, #2
 800baa2:	e000      	b.n	800baa6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b086      	sub	sp, #24
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	460b      	mov	r3, r1
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800babc:	7afb      	ldrb	r3, [r7, #11]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d17f      	bne.n	800bbc2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3314      	adds	r3, #20
 800bac6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d15c      	bne.n	800bb8c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	68da      	ldr	r2, [r3, #12]
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	429a      	cmp	r2, r3
 800badc:	d915      	bls.n	800bb0a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	1ad2      	subs	r2, r2, r3
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 febe 	bl	800c878 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bafc:	2300      	movs	r3, #0
 800bafe:	2200      	movs	r2, #0
 800bb00:	2100      	movs	r1, #0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f001 fb99 	bl	800d23a <USBD_LL_PrepareReceive>
 800bb08:	e04e      	b.n	800bba8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	697a      	ldr	r2, [r7, #20]
 800bb10:	6912      	ldr	r2, [r2, #16]
 800bb12:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb16:	fb01 f202 	mul.w	r2, r1, r2
 800bb1a:	1a9b      	subs	r3, r3, r2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d11c      	bne.n	800bb5a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d316      	bcc.n	800bb5a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	689a      	ldr	r2, [r3, #8]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d20f      	bcs.n	800bb5a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fe9a 	bl	800c878 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2100      	movs	r1, #0
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f001 fb71 	bl	800d23a <USBD_LL_PrepareReceive>
 800bb58:	e026      	b.n	800bba8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d105      	bne.n	800bb7c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bb7c:	2180      	movs	r1, #128	@ 0x80
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f001 fab0 	bl	800d0e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 fecc 	bl	800c922 <USBD_CtlReceiveStatus>
 800bb8a:	e00d      	b.n	800bba8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb92:	2b04      	cmp	r3, #4
 800bb94:	d004      	beq.n	800bba0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d103      	bne.n	800bba8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bba0:	2180      	movs	r1, #128	@ 0x80
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f001 fa9e 	bl	800d0e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d11d      	bne.n	800bbee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff fe81 	bl	800b8ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bbc0:	e015      	b.n	800bbee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00d      	beq.n	800bbea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d108      	bne.n	800bbea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	7afa      	ldrb	r2, [r7, #11]
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	4798      	blx	r3
 800bbe8:	e001      	b.n	800bbee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbea:	2302      	movs	r3, #2
 800bbec:	e000      	b.n	800bbf0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc00:	2340      	movs	r3, #64	@ 0x40
 800bc02:	2200      	movs	r2, #0
 800bc04:	2100      	movs	r1, #0
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fa27 	bl	800d05a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2240      	movs	r2, #64	@ 0x40
 800bc18:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc1c:	2340      	movs	r3, #64	@ 0x40
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2180      	movs	r1, #128	@ 0x80
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fa19 	bl	800d05a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2240      	movs	r2, #64	@ 0x40
 800bc32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d009      	beq.n	800bc70 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	6852      	ldr	r2, [r2, #4]
 800bc68:	b2d2      	uxtb	r2, r2
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	4798      	blx	r3
  }

  return USBD_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	78fa      	ldrb	r2, [r7, #3]
 800bc8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc80      	pop	{r7}
 800bc96:	4770      	bx	lr

0800bc98 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2204      	movs	r2, #4
 800bcb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bc80      	pop	{r7}
 800bcbe:	4770      	bx	lr

0800bcc0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d105      	bne.n	800bcde <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bc80      	pop	{r7}
 800bce8:	4770      	bx	lr

0800bcea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b082      	sub	sp, #8
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d10b      	bne.n	800bd14 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d005      	beq.n	800bd14 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd36:	2b40      	cmp	r3, #64	@ 0x40
 800bd38:	d005      	beq.n	800bd46 <USBD_StdDevReq+0x26>
 800bd3a:	2b40      	cmp	r3, #64	@ 0x40
 800bd3c:	d84f      	bhi.n	800bdde <USBD_StdDevReq+0xbe>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <USBD_StdDevReq+0x36>
 800bd42:	2b20      	cmp	r3, #32
 800bd44:	d14b      	bne.n	800bdde <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	4798      	blx	r3
      break;
 800bd54:	e048      	b.n	800bde8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	785b      	ldrb	r3, [r3, #1]
 800bd5a:	2b09      	cmp	r3, #9
 800bd5c:	d839      	bhi.n	800bdd2 <USBD_StdDevReq+0xb2>
 800bd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <USBD_StdDevReq+0x44>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bdb5 	.word	0x0800bdb5
 800bd68:	0800bdc9 	.word	0x0800bdc9
 800bd6c:	0800bdd3 	.word	0x0800bdd3
 800bd70:	0800bdbf 	.word	0x0800bdbf
 800bd74:	0800bdd3 	.word	0x0800bdd3
 800bd78:	0800bd97 	.word	0x0800bd97
 800bd7c:	0800bd8d 	.word	0x0800bd8d
 800bd80:	0800bdd3 	.word	0x0800bdd3
 800bd84:	0800bdab 	.word	0x0800bdab
 800bd88:	0800bda1 	.word	0x0800bda1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9dc 	bl	800c14c <USBD_GetDescriptor>
          break;
 800bd94:	e022      	b.n	800bddc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fb3f 	bl	800c41c <USBD_SetAddress>
          break;
 800bd9e:	e01d      	b.n	800bddc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fb7e 	bl	800c4a4 <USBD_SetConfig>
          break;
 800bda8:	e018      	b.n	800bddc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fc07 	bl	800c5c0 <USBD_GetConfig>
          break;
 800bdb2:	e013      	b.n	800bddc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fc37 	bl	800c62a <USBD_GetStatus>
          break;
 800bdbc:	e00e      	b.n	800bddc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fc65 	bl	800c690 <USBD_SetFeature>
          break;
 800bdc6:	e009      	b.n	800bddc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fc74 	bl	800c6b8 <USBD_ClrFeature>
          break;
 800bdd0:	e004      	b.n	800bddc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fcc9 	bl	800c76c <USBD_CtlError>
          break;
 800bdda:	bf00      	nop
      }
      break;
 800bddc:	e004      	b.n	800bde8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fcc3 	bl	800c76c <USBD_CtlError>
      break;
 800bde6:	bf00      	nop
  }

  return ret;
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop

0800bdf4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be0a:	2b40      	cmp	r3, #64	@ 0x40
 800be0c:	d005      	beq.n	800be1a <USBD_StdItfReq+0x26>
 800be0e:	2b40      	cmp	r3, #64	@ 0x40
 800be10:	d82e      	bhi.n	800be70 <USBD_StdItfReq+0x7c>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <USBD_StdItfReq+0x26>
 800be16:	2b20      	cmp	r3, #32
 800be18:	d12a      	bne.n	800be70 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be20:	3b01      	subs	r3, #1
 800be22:	2b02      	cmp	r3, #2
 800be24:	d81d      	bhi.n	800be62 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	889b      	ldrh	r3, [r3, #4]
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d813      	bhi.n	800be58 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	4798      	blx	r3
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	88db      	ldrh	r3, [r3, #6]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d110      	bne.n	800be6c <USBD_StdItfReq+0x78>
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10d      	bne.n	800be6c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fd53 	bl	800c8fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be56:	e009      	b.n	800be6c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fc86 	bl	800c76c <USBD_CtlError>
          break;
 800be60:	e004      	b.n	800be6c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fc81 	bl	800c76c <USBD_CtlError>
          break;
 800be6a:	e000      	b.n	800be6e <USBD_StdItfReq+0x7a>
          break;
 800be6c:	bf00      	nop
      }
      break;
 800be6e:	e004      	b.n	800be7a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fc7a 	bl	800c76c <USBD_CtlError>
      break;
 800be78:	bf00      	nop
  }

  return USBD_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	889b      	ldrh	r3, [r3, #4]
 800be96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bea0:	2b40      	cmp	r3, #64	@ 0x40
 800bea2:	d007      	beq.n	800beb4 <USBD_StdEPReq+0x30>
 800bea4:	2b40      	cmp	r3, #64	@ 0x40
 800bea6:	f200 8146 	bhi.w	800c136 <USBD_StdEPReq+0x2b2>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <USBD_StdEPReq+0x40>
 800beae:	2b20      	cmp	r3, #32
 800beb0:	f040 8141 	bne.w	800c136 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	4798      	blx	r3
      break;
 800bec2:	e13d      	b.n	800c140 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800becc:	2b20      	cmp	r3, #32
 800bece:	d10a      	bne.n	800bee6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	4798      	blx	r3
 800bede:	4603      	mov	r3, r0
 800bee0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
 800bee4:	e12d      	b.n	800c142 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	785b      	ldrb	r3, [r3, #1]
 800beea:	2b03      	cmp	r3, #3
 800beec:	d007      	beq.n	800befe <USBD_StdEPReq+0x7a>
 800beee:	2b03      	cmp	r3, #3
 800bef0:	f300 811b 	bgt.w	800c12a <USBD_StdEPReq+0x2a6>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d072      	beq.n	800bfde <USBD_StdEPReq+0x15a>
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d03a      	beq.n	800bf72 <USBD_StdEPReq+0xee>
 800befc:	e115      	b.n	800c12a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d002      	beq.n	800bf0e <USBD_StdEPReq+0x8a>
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d015      	beq.n	800bf38 <USBD_StdEPReq+0xb4>
 800bf0c:	e02b      	b.n	800bf66 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf0e:	7bbb      	ldrb	r3, [r7, #14]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00c      	beq.n	800bf2e <USBD_StdEPReq+0xaa>
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
 800bf16:	2b80      	cmp	r3, #128	@ 0x80
 800bf18:	d009      	beq.n	800bf2e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf1a:	7bbb      	ldrb	r3, [r7, #14]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f001 f8e0 	bl	800d0e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf24:	2180      	movs	r1, #128	@ 0x80
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f001 f8dc 	bl	800d0e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf2c:	e020      	b.n	800bf70 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fc1b 	bl	800c76c <USBD_CtlError>
              break;
 800bf36:	e01b      	b.n	800bf70 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	885b      	ldrh	r3, [r3, #2]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10e      	bne.n	800bf5e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <USBD_StdEPReq+0xda>
 800bf46:	7bbb      	ldrb	r3, [r7, #14]
 800bf48:	2b80      	cmp	r3, #128	@ 0x80
 800bf4a:	d008      	beq.n	800bf5e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	88db      	ldrh	r3, [r3, #6]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d104      	bne.n	800bf5e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f001 f8c3 	bl	800d0e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fccc 	bl	800c8fc <USBD_CtlSendStatus>

              break;
 800bf64:	e004      	b.n	800bf70 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fbff 	bl	800c76c <USBD_CtlError>
              break;
 800bf6e:	bf00      	nop
          }
          break;
 800bf70:	e0e0      	b.n	800c134 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d002      	beq.n	800bf82 <USBD_StdEPReq+0xfe>
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d015      	beq.n	800bfac <USBD_StdEPReq+0x128>
 800bf80:	e026      	b.n	800bfd0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00c      	beq.n	800bfa2 <USBD_StdEPReq+0x11e>
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2b80      	cmp	r3, #128	@ 0x80
 800bf8c:	d009      	beq.n	800bfa2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
 800bf90:	4619      	mov	r1, r3
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f001 f8a6 	bl	800d0e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf98:	2180      	movs	r1, #128	@ 0x80
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 f8a2 	bl	800d0e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfa0:	e01c      	b.n	800bfdc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fbe1 	bl	800c76c <USBD_CtlError>
              break;
 800bfaa:	e017      	b.n	800bfdc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	885b      	ldrh	r3, [r3, #2]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d112      	bne.n	800bfda <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfb4:	7bbb      	ldrb	r3, [r7, #14]
 800bfb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d004      	beq.n	800bfc8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 f8ad 	bl	800d122 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fc97 	bl	800c8fc <USBD_CtlSendStatus>
              }
              break;
 800bfce:	e004      	b.n	800bfda <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fbca 	bl	800c76c <USBD_CtlError>
              break;
 800bfd8:	e000      	b.n	800bfdc <USBD_StdEPReq+0x158>
              break;
 800bfda:	bf00      	nop
          }
          break;
 800bfdc:	e0aa      	b.n	800c134 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d002      	beq.n	800bfee <USBD_StdEPReq+0x16a>
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d032      	beq.n	800c052 <USBD_StdEPReq+0x1ce>
 800bfec:	e097      	b.n	800c11e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfee:	7bbb      	ldrb	r3, [r7, #14]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d007      	beq.n	800c004 <USBD_StdEPReq+0x180>
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2b80      	cmp	r3, #128	@ 0x80
 800bff8:	d004      	beq.n	800c004 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fbb5 	bl	800c76c <USBD_CtlError>
                break;
 800c002:	e091      	b.n	800c128 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	da0b      	bge.n	800c024 <USBD_StdEPReq+0x1a0>
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	3310      	adds	r3, #16
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	4413      	add	r3, r2
 800c020:	3304      	adds	r3, #4
 800c022:	e00b      	b.n	800c03c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	4413      	add	r3, r2
 800c03a:	3304      	adds	r3, #4
 800c03c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2202      	movs	r2, #2
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fbf8 	bl	800c840 <USBD_CtlSendData>
              break;
 800c050:	e06a      	b.n	800c128 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c056:	2b00      	cmp	r3, #0
 800c058:	da11      	bge.n	800c07e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	f003 020f 	and.w	r2, r3, #15
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	3318      	adds	r3, #24
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d117      	bne.n	800c0a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fb78 	bl	800c76c <USBD_CtlError>
                  break;
 800c07c:	e054      	b.n	800c128 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	f003 020f 	and.w	r2, r3, #15
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d104      	bne.n	800c0a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fb65 	bl	800c76c <USBD_CtlError>
                  break;
 800c0a2:	e041      	b.n	800c128 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	da0b      	bge.n	800c0c4 <USBD_StdEPReq+0x240>
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	3310      	adds	r3, #16
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	4413      	add	r3, r2
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	e00b      	b.n	800c0dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	4413      	add	r3, r2
 800c0da:	3304      	adds	r3, #4
 800c0dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <USBD_StdEPReq+0x266>
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b80      	cmp	r3, #128	@ 0x80
 800c0e8:	d103      	bne.n	800c0f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	e00e      	b.n	800c110 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f001 f832 	bl	800d160 <USBD_LL_IsStallEP>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2201      	movs	r2, #1
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	e002      	b.n	800c110 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2202      	movs	r2, #2
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fb92 	bl	800c840 <USBD_CtlSendData>
              break;
 800c11c:	e004      	b.n	800c128 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fb23 	bl	800c76c <USBD_CtlError>
              break;
 800c126:	bf00      	nop
          }
          break;
 800c128:	e004      	b.n	800c134 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fb1d 	bl	800c76c <USBD_CtlError>
          break;
 800c132:	bf00      	nop
      }
      break;
 800c134:	e004      	b.n	800c140 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fb17 	bl	800c76c <USBD_CtlError>
      break;
 800c13e:	bf00      	nop
  }

  return ret;
 800c140:	7bfb      	ldrb	r3, [r7, #15]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
	...

0800c14c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c156:	2300      	movs	r3, #0
 800c158:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	885b      	ldrh	r3, [r3, #2]
 800c166:	0a1b      	lsrs	r3, r3, #8
 800c168:	b29b      	uxth	r3, r3
 800c16a:	3b01      	subs	r3, #1
 800c16c:	2b06      	cmp	r3, #6
 800c16e:	f200 8128 	bhi.w	800c3c2 <USBD_GetDescriptor+0x276>
 800c172:	a201      	add	r2, pc, #4	@ (adr r2, 800c178 <USBD_GetDescriptor+0x2c>)
 800c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c178:	0800c195 	.word	0x0800c195
 800c17c:	0800c1ad 	.word	0x0800c1ad
 800c180:	0800c1ed 	.word	0x0800c1ed
 800c184:	0800c3c3 	.word	0x0800c3c3
 800c188:	0800c3c3 	.word	0x0800c3c3
 800c18c:	0800c363 	.word	0x0800c363
 800c190:	0800c38f 	.word	0x0800c38f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	7c12      	ldrb	r2, [r2, #16]
 800c1a0:	f107 0108 	add.w	r1, r7, #8
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4798      	blx	r3
 800c1a8:	60f8      	str	r0, [r7, #12]
      break;
 800c1aa:	e112      	b.n	800c3d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	7c1b      	ldrb	r3, [r3, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10d      	bne.n	800c1d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1bc:	f107 0208 	add.w	r2, r7, #8
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	4798      	blx	r3
 800c1c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1ce:	e100      	b.n	800c3d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d8:	f107 0208 	add.w	r2, r7, #8
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4798      	blx	r3
 800c1e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	701a      	strb	r2, [r3, #0]
      break;
 800c1ea:	e0f2      	b.n	800c3d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	885b      	ldrh	r3, [r3, #2]
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b05      	cmp	r3, #5
 800c1f4:	f200 80ac 	bhi.w	800c350 <USBD_GetDescriptor+0x204>
 800c1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c200 <USBD_GetDescriptor+0xb4>)
 800c1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fe:	bf00      	nop
 800c200:	0800c219 	.word	0x0800c219
 800c204:	0800c24d 	.word	0x0800c24d
 800c208:	0800c281 	.word	0x0800c281
 800c20c:	0800c2b5 	.word	0x0800c2b5
 800c210:	0800c2e9 	.word	0x0800c2e9
 800c214:	0800c31d 	.word	0x0800c31d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	7c12      	ldrb	r2, [r2, #16]
 800c230:	f107 0108 	add.w	r1, r7, #8
 800c234:	4610      	mov	r0, r2
 800c236:	4798      	blx	r3
 800c238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c23a:	e091      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fa94 	bl	800c76c <USBD_CtlError>
            err++;
 800c244:	7afb      	ldrb	r3, [r7, #11]
 800c246:	3301      	adds	r3, #1
 800c248:	72fb      	strb	r3, [r7, #11]
          break;
 800c24a:	e089      	b.n	800c360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00b      	beq.n	800c270 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	7c12      	ldrb	r2, [r2, #16]
 800c264:	f107 0108 	add.w	r1, r7, #8
 800c268:	4610      	mov	r0, r2
 800c26a:	4798      	blx	r3
 800c26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c26e:	e077      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fa7a 	bl	800c76c <USBD_CtlError>
            err++;
 800c278:	7afb      	ldrb	r3, [r7, #11]
 800c27a:	3301      	adds	r3, #1
 800c27c:	72fb      	strb	r3, [r7, #11]
          break;
 800c27e:	e06f      	b.n	800c360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00b      	beq.n	800c2a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	7c12      	ldrb	r2, [r2, #16]
 800c298:	f107 0108 	add.w	r1, r7, #8
 800c29c:	4610      	mov	r0, r2
 800c29e:	4798      	blx	r3
 800c2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2a2:	e05d      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa60 	bl	800c76c <USBD_CtlError>
            err++;
 800c2ac:	7afb      	ldrb	r3, [r7, #11]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2b2:	e055      	b.n	800c360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00b      	beq.n	800c2d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	7c12      	ldrb	r2, [r2, #16]
 800c2cc:	f107 0108 	add.w	r1, r7, #8
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
 800c2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2d6:	e043      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fa46 	bl	800c76c <USBD_CtlError>
            err++;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2e6:	e03b      	b.n	800c360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	7c12      	ldrb	r2, [r2, #16]
 800c300:	f107 0108 	add.w	r1, r7, #8
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c30a:	e029      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa2c 	bl	800c76c <USBD_CtlError>
            err++;
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	3301      	adds	r3, #1
 800c318:	72fb      	strb	r3, [r7, #11]
          break;
 800c31a:	e021      	b.n	800c360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c33e:	e00f      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa12 	bl	800c76c <USBD_CtlError>
            err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
          break;
 800c34e:	e007      	b.n	800c360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fa0a 	bl	800c76c <USBD_CtlError>
          err++;
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	3301      	adds	r3, #1
 800c35c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c35e:	e038      	b.n	800c3d2 <USBD_GetDescriptor+0x286>
 800c360:	e037      	b.n	800c3d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	7c1b      	ldrb	r3, [r3, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d109      	bne.n	800c37e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c372:	f107 0208 	add.w	r2, r7, #8
 800c376:	4610      	mov	r0, r2
 800c378:	4798      	blx	r3
 800c37a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c37c:	e029      	b.n	800c3d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f9f3 	bl	800c76c <USBD_CtlError>
        err++;
 800c386:	7afb      	ldrb	r3, [r7, #11]
 800c388:	3301      	adds	r3, #1
 800c38a:	72fb      	strb	r3, [r7, #11]
      break;
 800c38c:	e021      	b.n	800c3d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7c1b      	ldrb	r3, [r3, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10d      	bne.n	800c3b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39e:	f107 0208 	add.w	r2, r7, #8
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	4798      	blx	r3
 800c3a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	2207      	movs	r2, #7
 800c3ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3b0:	e00f      	b.n	800c3d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f9d9 	bl	800c76c <USBD_CtlError>
        err++;
 800c3ba:	7afb      	ldrb	r3, [r7, #11]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	72fb      	strb	r3, [r7, #11]
      break;
 800c3c0:	e007      	b.n	800c3d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f9d1 	bl	800c76c <USBD_CtlError>
      err++;
 800c3ca:	7afb      	ldrb	r3, [r7, #11]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c3d0:	bf00      	nop
  }

  if (err != 0U)
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d11c      	bne.n	800c412 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c3d8:	893b      	ldrh	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d011      	beq.n	800c402 <USBD_GetDescriptor+0x2b6>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	88db      	ldrh	r3, [r3, #6]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00d      	beq.n	800c402 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	88da      	ldrh	r2, [r3, #6]
 800c3ea:	893b      	ldrh	r3, [r7, #8]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	bf28      	it	cs
 800c3f0:	4613      	movcs	r3, r2
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c3f6:	893b      	ldrh	r3, [r7, #8]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68f9      	ldr	r1, [r7, #12]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fa1f 	bl	800c840 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	88db      	ldrh	r3, [r3, #6]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d104      	bne.n	800c414 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa76 	bl	800c8fc <USBD_CtlSendStatus>
 800c410:	e000      	b.n	800c414 <USBD_GetDescriptor+0x2c8>
    return;
 800c412:	bf00      	nop
    }
  }
}
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop

0800c41c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	889b      	ldrh	r3, [r3, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d130      	bne.n	800c490 <USBD_SetAddress+0x74>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	88db      	ldrh	r3, [r3, #6]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d12c      	bne.n	800c490 <USBD_SetAddress+0x74>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	885b      	ldrh	r3, [r3, #2]
 800c43a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c43c:	d828      	bhi.n	800c490 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	885b      	ldrh	r3, [r3, #2]
 800c442:	b2db      	uxtb	r3, r3
 800c444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c448:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c450:	2b03      	cmp	r3, #3
 800c452:	d104      	bne.n	800c45e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f988 	bl	800c76c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c45c:	e01d      	b.n	800c49a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	7bfa      	ldrb	r2, [r7, #15]
 800c462:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	4619      	mov	r1, r3
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fea3 	bl	800d1b6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fa43 	bl	800c8fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2202      	movs	r2, #2
 800c480:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c484:	e009      	b.n	800c49a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c48e:	e004      	b.n	800c49a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f96a 	bl	800c76c <USBD_CtlError>
  }
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	885b      	ldrh	r3, [r3, #2]
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	4b41      	ldr	r3, [pc, #260]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c4b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4b8:	4b40      	ldr	r3, [pc, #256]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d904      	bls.n	800c4ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f952 	bl	800c76c <USBD_CtlError>
 800c4c8:	e075      	b.n	800c5b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d002      	beq.n	800c4da <USBD_SetConfig+0x36>
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d023      	beq.n	800c520 <USBD_SetConfig+0x7c>
 800c4d8:	e062      	b.n	800c5a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c4da:	4b38      	ldr	r3, [pc, #224]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d01a      	beq.n	800c518 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c4e2:	4b36      	ldr	r3, [pc, #216]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2203      	movs	r2, #3
 800c4f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c4f4:	4b31      	ldr	r3, [pc, #196]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff f9e7 	bl	800b8ce <USBD_SetClassConfig>
 800c500:	4603      	mov	r3, r0
 800c502:	2b02      	cmp	r3, #2
 800c504:	d104      	bne.n	800c510 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f92f 	bl	800c76c <USBD_CtlError>
            return;
 800c50e:	e052      	b.n	800c5b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f9f3 	bl	800c8fc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c516:	e04e      	b.n	800c5b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f9ef 	bl	800c8fc <USBD_CtlSendStatus>
        break;
 800c51e:	e04a      	b.n	800c5b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c520:	4b26      	ldr	r3, [pc, #152]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d112      	bne.n	800c54e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c530:	4b22      	ldr	r3, [pc, #136]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c53a:	4b20      	ldr	r3, [pc, #128]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7ff f9e3 	bl	800b90c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f9d8 	bl	800c8fc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c54c:	e033      	b.n	800c5b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c54e:	4b1b      	ldr	r3, [pc, #108]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d01d      	beq.n	800c598 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff f9d1 	bl	800b90c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c56a:	4b14      	ldr	r3, [pc, #80]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c574:	4b11      	ldr	r3, [pc, #68]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff f9a7 	bl	800b8ce <USBD_SetClassConfig>
 800c580:	4603      	mov	r3, r0
 800c582:	2b02      	cmp	r3, #2
 800c584:	d104      	bne.n	800c590 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f8ef 	bl	800c76c <USBD_CtlError>
            return;
 800c58e:	e012      	b.n	800c5b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f9b3 	bl	800c8fc <USBD_CtlSendStatus>
        break;
 800c596:	e00e      	b.n	800c5b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f9af 	bl	800c8fc <USBD_CtlSendStatus>
        break;
 800c59e:	e00a      	b.n	800c5b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f8e2 	bl	800c76c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c5a8:	4b04      	ldr	r3, [pc, #16]	@ (800c5bc <USBD_SetConfig+0x118>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff f9ac 	bl	800b90c <USBD_ClrClassConfig>
        break;
 800c5b4:	bf00      	nop
    }
  }
}
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20000810 	.word	0x20000810

0800c5c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	88db      	ldrh	r3, [r3, #6]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d004      	beq.n	800c5dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f8c9 	bl	800c76c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5da:	e022      	b.n	800c622 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	dc02      	bgt.n	800c5ec <USBD_GetConfig+0x2c>
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dc03      	bgt.n	800c5f2 <USBD_GetConfig+0x32>
 800c5ea:	e015      	b.n	800c618 <USBD_GetConfig+0x58>
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d00b      	beq.n	800c608 <USBD_GetConfig+0x48>
 800c5f0:	e012      	b.n	800c618 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3308      	adds	r3, #8
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f91d 	bl	800c840 <USBD_CtlSendData>
        break;
 800c606:	e00c      	b.n	800c622 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3304      	adds	r3, #4
 800c60c:	2201      	movs	r2, #1
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f915 	bl	800c840 <USBD_CtlSendData>
        break;
 800c616:	e004      	b.n	800c622 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f8a6 	bl	800c76c <USBD_CtlError>
        break;
 800c620:	bf00      	nop
}
 800c622:	bf00      	nop
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c63a:	3b01      	subs	r3, #1
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d81e      	bhi.n	800c67e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	88db      	ldrh	r3, [r3, #6]
 800c644:	2b02      	cmp	r3, #2
 800c646:	d004      	beq.n	800c652 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f88e 	bl	800c76c <USBD_CtlError>
        break;
 800c650:	e01a      	b.n	800c688 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d005      	beq.n	800c66e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	f043 0202 	orr.w	r2, r3, #2
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	330c      	adds	r3, #12
 800c672:	2202      	movs	r2, #2
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f8e2 	bl	800c840 <USBD_CtlSendData>
      break;
 800c67c:	e004      	b.n	800c688 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f873 	bl	800c76c <USBD_CtlError>
      break;
 800c686:	bf00      	nop
  }
}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	885b      	ldrh	r3, [r3, #2]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d106      	bne.n	800c6b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f926 	bl	800c8fc <USBD_CtlSendStatus>
  }
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d80b      	bhi.n	800c6e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d10c      	bne.n	800c6f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f90c 	bl	800c8fc <USBD_CtlSendStatus>
      }
      break;
 800c6e4:	e004      	b.n	800c6f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f83f 	bl	800c76c <USBD_CtlError>
      break;
 800c6ee:	e000      	b.n	800c6f2 <USBD_ClrFeature+0x3a>
      break;
 800c6f0:	bf00      	nop
  }
}
 800c6f2:	bf00      	nop
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6fa:	b480      	push	{r7}
 800c6fc:	b083      	sub	sp, #12
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	785a      	ldrb	r2, [r3, #1]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	3302      	adds	r3, #2
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	3303      	adds	r3, #3
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	021b      	lsls	r3, r3, #8
 800c724:	b29b      	uxth	r3, r3
 800c726:	4413      	add	r3, r2
 800c728:	b29a      	uxth	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	3304      	adds	r3, #4
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	461a      	mov	r2, r3
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	3305      	adds	r3, #5
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	021b      	lsls	r3, r3, #8
 800c73e:	b29b      	uxth	r3, r3
 800c740:	4413      	add	r3, r2
 800c742:	b29a      	uxth	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	3306      	adds	r3, #6
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	3307      	adds	r3, #7
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	021b      	lsls	r3, r3, #8
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4413      	add	r3, r2
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	80da      	strh	r2, [r3, #6]

}
 800c762:	bf00      	nop
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	bc80      	pop	{r7}
 800c76a:	4770      	bx	lr

0800c76c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c776:	2180      	movs	r1, #128	@ 0x80
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fcb3 	bl	800d0e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c77e:	2100      	movs	r1, #0
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fcaf 	bl	800d0e4 <USBD_LL_StallEP>
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b086      	sub	sp, #24
 800c792:	af00      	add	r7, sp, #0
 800c794:	60f8      	str	r0, [r7, #12]
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c79a:	2300      	movs	r3, #0
 800c79c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d032      	beq.n	800c80a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 f834 	bl	800c812 <USBD_GetLen>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	75fa      	strb	r2, [r7, #23]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	7812      	ldrb	r2, [r2, #0]
 800c7c8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c7ca:	7dfb      	ldrb	r3, [r7, #23]
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	75fa      	strb	r2, [r7, #23]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c7da:	e012      	b.n	800c802 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	60fa      	str	r2, [r7, #12]
 800c7e2:	7dfa      	ldrb	r2, [r7, #23]
 800c7e4:	1c51      	adds	r1, r2, #1
 800c7e6:	75f9      	strb	r1, [r7, #23]
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	440a      	add	r2, r1
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	75fa      	strb	r2, [r7, #23]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e8      	bne.n	800c7dc <USBD_GetString+0x4e>
    }
  }
}
 800c80a:	bf00      	nop
 800c80c:	3718      	adds	r7, #24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c81e:	e005      	b.n	800c82c <USBD_GetLen+0x1a>
  {
    len++;
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	3301      	adds	r3, #1
 800c824:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3301      	adds	r3, #1
 800c82a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f5      	bne.n	800c820 <USBD_GetLen+0xe>
  }

  return len;
 800c834:	7bfb      	ldrb	r3, [r7, #15]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bc80      	pop	{r7}
 800c83e:	4770      	bx	lr

0800c840 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4613      	mov	r3, r2
 800c84c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2202      	movs	r2, #2
 800c852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c856:	88fa      	ldrh	r2, [r7, #6]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c85c:	88fa      	ldrh	r2, [r7, #6]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c862:	88fb      	ldrh	r3, [r7, #6]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	2100      	movs	r1, #0
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f000 fcc3 	bl	800d1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	4613      	mov	r3, r2
 800c884:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	2100      	movs	r1, #0
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 fcb1 	bl	800d1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2203      	movs	r2, #3
 800c8ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c8b2:	88fa      	ldrh	r2, [r7, #6]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c8ba:	88fa      	ldrh	r2, [r7, #6]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8c2:	88fb      	ldrh	r3, [r7, #6]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 fcb6 	bl	800d23a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8e6:	88fb      	ldrh	r3, [r7, #6]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 fca4 	bl	800d23a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2204      	movs	r2, #4
 800c908:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c90c:	2300      	movs	r3, #0
 800c90e:	2200      	movs	r2, #0
 800c910:	2100      	movs	r1, #0
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fc6e 	bl	800d1f4 <USBD_LL_Transmit>

  return USBD_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2205      	movs	r2, #5
 800c92e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c932:	2300      	movs	r3, #0
 800c934:	2200      	movs	r2, #0
 800c936:	2100      	movs	r1, #0
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fc7e 	bl	800d23a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	4613      	mov	r3, r2
 800c954:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c95e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c960:	7a5b      	ldrb	r3, [r3, #9]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b01      	cmp	r3, #1
 800c966:	d831      	bhi.n	800c9cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c968:	4b1b      	ldr	r3, [pc, #108]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c96a:	7a5b      	ldrb	r3, [r3, #9]
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	461a      	mov	r2, r3
 800c970:	4b19      	ldr	r3, [pc, #100]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c972:	2100      	movs	r1, #0
 800c974:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c976:	4b18      	ldr	r3, [pc, #96]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c978:	7a5b      	ldrb	r3, [r3, #9]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	4a16      	ldr	r2, [pc, #88]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c986:	4b14      	ldr	r3, [pc, #80]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c988:	7a5b      	ldrb	r3, [r3, #9]
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	4b12      	ldr	r3, [pc, #72]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c990:	4413      	add	r3, r2
 800c992:	79fa      	ldrb	r2, [r7, #7]
 800c994:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c996:	4b10      	ldr	r3, [pc, #64]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c998:	7a5b      	ldrb	r3, [r3, #9]
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	b2d1      	uxtb	r1, r2
 800c9a0:	4a0d      	ldr	r2, [pc, #52]	@ (800c9d8 <FATFS_LinkDriverEx+0x90>)
 800c9a2:	7251      	strb	r1, [r2, #9]
 800c9a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c9a6:	7dbb      	ldrb	r3, [r7, #22]
 800c9a8:	3330      	adds	r3, #48	@ 0x30
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	223a      	movs	r2, #58	@ 0x3a
 800c9b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	3302      	adds	r3, #2
 800c9bc:	222f      	movs	r2, #47	@ 0x2f
 800c9be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	3303      	adds	r3, #3
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	371c      	adds	r7, #28
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bc80      	pop	{r7}
 800c9d6:	4770      	bx	lr
 800c9d8:	20000814 	.word	0x20000814

0800c9dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff ffac 	bl	800c948 <FATFS_LinkDriverEx>
 800c9f0:	4603      	mov	r3, r0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca00:	2200      	movs	r2, #0
 800ca02:	4912      	ldr	r1, [pc, #72]	@ (800ca4c <MX_USB_DEVICE_Init+0x50>)
 800ca04:	4812      	ldr	r0, [pc, #72]	@ (800ca50 <MX_USB_DEVICE_Init+0x54>)
 800ca06:	f7fe ff08 	bl	800b81a <USBD_Init>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca10:	f7f6 fcf4 	bl	80033fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca14:	490f      	ldr	r1, [pc, #60]	@ (800ca54 <MX_USB_DEVICE_Init+0x58>)
 800ca16:	480e      	ldr	r0, [pc, #56]	@ (800ca50 <MX_USB_DEVICE_Init+0x54>)
 800ca18:	f7fe ff2a 	bl	800b870 <USBD_RegisterClass>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca22:	f7f6 fceb 	bl	80033fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca26:	490c      	ldr	r1, [pc, #48]	@ (800ca58 <MX_USB_DEVICE_Init+0x5c>)
 800ca28:	4809      	ldr	r0, [pc, #36]	@ (800ca50 <MX_USB_DEVICE_Init+0x54>)
 800ca2a:	f7fe fe5b 	bl	800b6e4 <USBD_CDC_RegisterInterface>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca34:	f7f6 fce2 	bl	80033fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca38:	4805      	ldr	r0, [pc, #20]	@ (800ca50 <MX_USB_DEVICE_Init+0x54>)
 800ca3a:	f7fe ff32 	bl	800b8a2 <USBD_Start>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca44:	f7f6 fcda 	bl	80033fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca48:	bf00      	nop
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20000144 	.word	0x20000144
 800ca50:	20000820 	.word	0x20000820
 800ca54:	20000030 	.word	0x20000030
 800ca58:	20000134 	.word	0x20000134

0800ca5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca60:	2200      	movs	r2, #0
 800ca62:	4905      	ldr	r1, [pc, #20]	@ (800ca78 <CDC_Init_FS+0x1c>)
 800ca64:	4805      	ldr	r0, [pc, #20]	@ (800ca7c <CDC_Init_FS+0x20>)
 800ca66:	f7fe fe53 	bl	800b710 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca6a:	4905      	ldr	r1, [pc, #20]	@ (800ca80 <CDC_Init_FS+0x24>)
 800ca6c:	4803      	ldr	r0, [pc, #12]	@ (800ca7c <CDC_Init_FS+0x20>)
 800ca6e:	f7fe fe68 	bl	800b742 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000ee4 	.word	0x20000ee4
 800ca7c:	20000820 	.word	0x20000820
 800ca80:	20000ae4 	.word	0x20000ae4

0800ca84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca84:	b480      	push	{r7}
 800ca86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bc80      	pop	{r7}
 800ca90:	4770      	bx	lr
	...

0800ca94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	6039      	str	r1, [r7, #0]
 800ca9e:	71fb      	strb	r3, [r7, #7]
 800caa0:	4613      	mov	r3, r2
 800caa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	2b23      	cmp	r3, #35	@ 0x23
 800caa8:	d84a      	bhi.n	800cb40 <CDC_Control_FS+0xac>
 800caaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cab0 <CDC_Control_FS+0x1c>)
 800caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab0:	0800cb41 	.word	0x0800cb41
 800cab4:	0800cb41 	.word	0x0800cb41
 800cab8:	0800cb41 	.word	0x0800cb41
 800cabc:	0800cb41 	.word	0x0800cb41
 800cac0:	0800cb41 	.word	0x0800cb41
 800cac4:	0800cb41 	.word	0x0800cb41
 800cac8:	0800cb41 	.word	0x0800cb41
 800cacc:	0800cb41 	.word	0x0800cb41
 800cad0:	0800cb41 	.word	0x0800cb41
 800cad4:	0800cb41 	.word	0x0800cb41
 800cad8:	0800cb41 	.word	0x0800cb41
 800cadc:	0800cb41 	.word	0x0800cb41
 800cae0:	0800cb41 	.word	0x0800cb41
 800cae4:	0800cb41 	.word	0x0800cb41
 800cae8:	0800cb41 	.word	0x0800cb41
 800caec:	0800cb41 	.word	0x0800cb41
 800caf0:	0800cb41 	.word	0x0800cb41
 800caf4:	0800cb41 	.word	0x0800cb41
 800caf8:	0800cb41 	.word	0x0800cb41
 800cafc:	0800cb41 	.word	0x0800cb41
 800cb00:	0800cb41 	.word	0x0800cb41
 800cb04:	0800cb41 	.word	0x0800cb41
 800cb08:	0800cb41 	.word	0x0800cb41
 800cb0c:	0800cb41 	.word	0x0800cb41
 800cb10:	0800cb41 	.word	0x0800cb41
 800cb14:	0800cb41 	.word	0x0800cb41
 800cb18:	0800cb41 	.word	0x0800cb41
 800cb1c:	0800cb41 	.word	0x0800cb41
 800cb20:	0800cb41 	.word	0x0800cb41
 800cb24:	0800cb41 	.word	0x0800cb41
 800cb28:	0800cb41 	.word	0x0800cb41
 800cb2c:	0800cb41 	.word	0x0800cb41
 800cb30:	0800cb41 	.word	0x0800cb41
 800cb34:	0800cb41 	.word	0x0800cb41
 800cb38:	0800cb41 	.word	0x0800cb41
 800cb3c:	0800cb41 	.word	0x0800cb41
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb40:	bf00      	nop
  }

  return (USBD_OK);
 800cb42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bc80      	pop	{r7}
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop

0800cb50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb5a:	6879      	ldr	r1, [r7, #4]
 800cb5c:	4808      	ldr	r0, [pc, #32]	@ (800cb80 <CDC_Receive_FS+0x30>)
 800cb5e:	f7fe fdf0 	bl	800b742 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb62:	4807      	ldr	r0, [pc, #28]	@ (800cb80 <CDC_Receive_FS+0x30>)
 800cb64:	f7fe fe2f 	bl	800b7c6 <USBD_CDC_ReceivePacket>
  // Panggil fungsi callback di main.c
  CDC_On_Receive(Buf, *Len);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7f6 fbf2 	bl	8003358 <CDC_On_Receive>
  return (USBD_OK);
 800cb74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20000820 	.word	0x20000820

0800cb84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800cb94:	4b0d      	ldr	r3, [pc, #52]	@ (800cbcc <CDC_Transmit_FS+0x48>)
 800cb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <CDC_Transmit_FS+0x26>
  {
    return USBD_BUSY;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e00b      	b.n	800cbc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cbaa:	887b      	ldrh	r3, [r7, #2]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	4806      	ldr	r0, [pc, #24]	@ (800cbcc <CDC_Transmit_FS+0x48>)
 800cbb2:	f7fe fdad 	bl	800b710 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbb6:	4805      	ldr	r0, [pc, #20]	@ (800cbcc <CDC_Transmit_FS+0x48>)
 800cbb8:	f7fe fdd6 	bl	800b768 <USBD_CDC_TransmitPacket>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000820 	.word	0x20000820

0800cbd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	6039      	str	r1, [r7, #0]
 800cbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2212      	movs	r2, #18
 800cbe0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbe2:	4b03      	ldr	r3, [pc, #12]	@ (800cbf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bc80      	pop	{r7}
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	20000160 	.word	0x20000160

0800cbf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	2204      	movs	r2, #4
 800cc04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc06:	4b03      	ldr	r3, [pc, #12]	@ (800cc14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bc80      	pop	{r7}
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	20000174 	.word	0x20000174

0800cc18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d105      	bne.n	800cc36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	4907      	ldr	r1, [pc, #28]	@ (800cc4c <USBD_FS_ProductStrDescriptor+0x34>)
 800cc2e:	4808      	ldr	r0, [pc, #32]	@ (800cc50 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc30:	f7ff fdad 	bl	800c78e <USBD_GetString>
 800cc34:	e004      	b.n	800cc40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	4904      	ldr	r1, [pc, #16]	@ (800cc4c <USBD_FS_ProductStrDescriptor+0x34>)
 800cc3a:	4805      	ldr	r0, [pc, #20]	@ (800cc50 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc3c:	f7ff fda7 	bl	800c78e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc40:	4b02      	ldr	r3, [pc, #8]	@ (800cc4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	200012e4 	.word	0x200012e4
 800cc50:	08012968 	.word	0x08012968

0800cc54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	4904      	ldr	r1, [pc, #16]	@ (800cc74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc64:	4804      	ldr	r0, [pc, #16]	@ (800cc78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc66:	f7ff fd92 	bl	800c78e <USBD_GetString>
  return USBD_StrDesc;
 800cc6a:	4b02      	ldr	r3, [pc, #8]	@ (800cc74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	200012e4 	.word	0x200012e4
 800cc78:	08012980 	.word	0x08012980

0800cc7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	6039      	str	r1, [r7, #0]
 800cc86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	221a      	movs	r2, #26
 800cc8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc8e:	f000 f843 	bl	800cd18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc92:	4b02      	ldr	r3, [pc, #8]	@ (800cc9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20000178 	.word	0x20000178

0800cca0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	6039      	str	r1, [r7, #0]
 800ccaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d105      	bne.n	800ccbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	4907      	ldr	r1, [pc, #28]	@ (800ccd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccb6:	4808      	ldr	r0, [pc, #32]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccb8:	f7ff fd69 	bl	800c78e <USBD_GetString>
 800ccbc:	e004      	b.n	800ccc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	4904      	ldr	r1, [pc, #16]	@ (800ccd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccc2:	4805      	ldr	r0, [pc, #20]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccc4:	f7ff fd63 	bl	800c78e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccc8:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	200012e4 	.word	0x200012e4
 800ccd8:	08012994 	.word	0x08012994

0800ccdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	6039      	str	r1, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d105      	bne.n	800ccfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	4907      	ldr	r1, [pc, #28]	@ (800cd10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccf2:	4808      	ldr	r0, [pc, #32]	@ (800cd14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccf4:	f7ff fd4b 	bl	800c78e <USBD_GetString>
 800ccf8:	e004      	b.n	800cd04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	4904      	ldr	r1, [pc, #16]	@ (800cd10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccfe:	4805      	ldr	r0, [pc, #20]	@ (800cd14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd00:	f7ff fd45 	bl	800c78e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd04:	4b02      	ldr	r3, [pc, #8]	@ (800cd10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	200012e4 	.word	0x200012e4
 800cd14:	080129a0 	.word	0x080129a0

0800cd18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd5c <Get_SerialNum+0x44>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd24:	4b0e      	ldr	r3, [pc, #56]	@ (800cd60 <Get_SerialNum+0x48>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd2a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd64 <Get_SerialNum+0x4c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4413      	add	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d009      	beq.n	800cd52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd3e:	2208      	movs	r2, #8
 800cd40:	4909      	ldr	r1, [pc, #36]	@ (800cd68 <Get_SerialNum+0x50>)
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f000 f814 	bl	800cd70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd48:	2204      	movs	r2, #4
 800cd4a:	4908      	ldr	r1, [pc, #32]	@ (800cd6c <Get_SerialNum+0x54>)
 800cd4c:	68b8      	ldr	r0, [r7, #8]
 800cd4e:	f000 f80f 	bl	800cd70 <IntToUnicode>
  }
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	1ffff7e8 	.word	0x1ffff7e8
 800cd60:	1ffff7ec 	.word	0x1ffff7ec
 800cd64:	1ffff7f0 	.word	0x1ffff7f0
 800cd68:	2000017a 	.word	0x2000017a
 800cd6c:	2000018a 	.word	0x2000018a

0800cd70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd82:	2300      	movs	r3, #0
 800cd84:	75fb      	strb	r3, [r7, #23]
 800cd86:	e027      	b.n	800cdd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	0f1b      	lsrs	r3, r3, #28
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	d80b      	bhi.n	800cda8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	0f1b      	lsrs	r3, r3, #28
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	7dfb      	ldrb	r3, [r7, #23]
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	440b      	add	r3, r1
 800cda0:	3230      	adds	r2, #48	@ 0x30
 800cda2:	b2d2      	uxtb	r2, r2
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	e00a      	b.n	800cdbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	0f1b      	lsrs	r3, r3, #28
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	440b      	add	r3, r1
 800cdb8:	3237      	adds	r2, #55	@ 0x37
 800cdba:	b2d2      	uxtb	r2, r2
 800cdbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	011b      	lsls	r3, r3, #4
 800cdc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdc4:	7dfb      	ldrb	r3, [r7, #23]
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	3301      	adds	r3, #1
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	4413      	add	r3, r2
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	75fb      	strb	r3, [r7, #23]
 800cdd8:	7dfa      	ldrb	r2, [r7, #23]
 800cdda:	79fb      	ldrb	r3, [r7, #7]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d3d3      	bcc.n	800cd88 <IntToUnicode+0x18>
  }
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	371c      	adds	r7, #28
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bc80      	pop	{r7}
 800cdea:	4770      	bx	lr

0800cdec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a0d      	ldr	r2, [pc, #52]	@ (800ce30 <HAL_PCD_MspInit+0x44>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d113      	bne.n	800ce26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ce34 <HAL_PCD_MspInit+0x48>)
 800ce00:	69db      	ldr	r3, [r3, #28]
 800ce02:	4a0c      	ldr	r2, [pc, #48]	@ (800ce34 <HAL_PCD_MspInit+0x48>)
 800ce04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce08:	61d3      	str	r3, [r2, #28]
 800ce0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce34 <HAL_PCD_MspInit+0x48>)
 800ce0c:	69db      	ldr	r3, [r3, #28]
 800ce0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ce16:	2200      	movs	r2, #0
 800ce18:	2100      	movs	r1, #0
 800ce1a:	2014      	movs	r0, #20
 800ce1c:	f7f6 ff59 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ce20:	2014      	movs	r0, #20
 800ce22:	f7f6 ff72 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce26:	bf00      	nop
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	40005c00 	.word	0x40005c00
 800ce34:	40021000 	.word	0x40021000

0800ce38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	f7fe fd6f 	bl	800b932 <USBD_LL_SetupStage>
}
 800ce54:	bf00      	nop
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	460b      	mov	r3, r1
 800ce66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ce6e:	78fa      	ldrb	r2, [r7, #3]
 800ce70:	6879      	ldr	r1, [r7, #4]
 800ce72:	4613      	mov	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	4413      	add	r3, r2
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	440b      	add	r3, r1
 800ce7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	4619      	mov	r1, r3
 800ce86:	f7fe fda1 	bl	800b9cc <USBD_LL_DataOutStage>
}
 800ce8a:	bf00      	nop
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cea4:	78fa      	ldrb	r2, [r7, #3]
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	440b      	add	r3, r1
 800ceb2:	3324      	adds	r3, #36	@ 0x24
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	78fb      	ldrb	r3, [r7, #3]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	f7fe fdf8 	bl	800baae <USBD_LL_DataInStage>
}
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fe ff08 	bl	800bcea <USBD_LL_SOF>
}
 800ceda:	bf00      	nop
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ceea:	2301      	movs	r3, #1
 800ceec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	799b      	ldrb	r3, [r3, #6]
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d001      	beq.n	800cefa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cef6:	f7f6 fa81 	bl	80033fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf00:	7bfa      	ldrb	r2, [r7, #15]
 800cf02:	4611      	mov	r1, r2
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe feb8 	bl	800bc7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fe71 	bl	800bbf8 <USBD_LL_Reset>
}
 800cf16:	bf00      	nop
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
	...

0800cf20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe feb2 	bl	800bc98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	7a9b      	ldrb	r3, [r3, #10]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d005      	beq.n	800cf48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf3c:	4b04      	ldr	r3, [pc, #16]	@ (800cf50 <HAL_PCD_SuspendCallback+0x30>)
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	4a03      	ldr	r2, [pc, #12]	@ (800cf50 <HAL_PCD_SuspendCallback+0x30>)
 800cf42:	f043 0306 	orr.w	r3, r3, #6
 800cf46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	e000ed00 	.word	0xe000ed00

0800cf54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe feac 	bl	800bcc0 <USBD_LL_Resume>
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf78:	4a28      	ldr	r2, [pc, #160]	@ (800d01c <USBD_LL_Init+0xac>)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a26      	ldr	r2, [pc, #152]	@ (800d01c <USBD_LL_Init+0xac>)
 800cf84:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cf88:	4b24      	ldr	r3, [pc, #144]	@ (800d01c <USBD_LL_Init+0xac>)
 800cf8a:	4a25      	ldr	r2, [pc, #148]	@ (800d020 <USBD_LL_Init+0xb0>)
 800cf8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf8e:	4b23      	ldr	r3, [pc, #140]	@ (800d01c <USBD_LL_Init+0xac>)
 800cf90:	2208      	movs	r2, #8
 800cf92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf94:	4b21      	ldr	r3, [pc, #132]	@ (800d01c <USBD_LL_Init+0xac>)
 800cf96:	2202      	movs	r2, #2
 800cf98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf9a:	4b20      	ldr	r3, [pc, #128]	@ (800d01c <USBD_LL_Init+0xac>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cfa0:	4b1e      	ldr	r3, [pc, #120]	@ (800d01c <USBD_LL_Init+0xac>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cfa6:	4b1d      	ldr	r3, [pc, #116]	@ (800d01c <USBD_LL_Init+0xac>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cfac:	481b      	ldr	r0, [pc, #108]	@ (800d01c <USBD_LL_Init+0xac>)
 800cfae:	f7f7 ff17 	bl	8004de0 <HAL_PCD_Init>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cfb8:	f7f6 fa20 	bl	80033fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfc2:	2318      	movs	r3, #24
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	f7f9 fc28 	bl	800681c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfd2:	2358      	movs	r3, #88	@ 0x58
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2180      	movs	r1, #128	@ 0x80
 800cfd8:	f7f9 fc20 	bl	800681c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfe2:	23c0      	movs	r3, #192	@ 0xc0
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2181      	movs	r1, #129	@ 0x81
 800cfe8:	f7f9 fc18 	bl	800681c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cff2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cff6:	2200      	movs	r2, #0
 800cff8:	2101      	movs	r1, #1
 800cffa:	f7f9 fc0f 	bl	800681c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d004:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d008:	2200      	movs	r2, #0
 800d00a:	2182      	movs	r1, #130	@ 0x82
 800d00c:	f7f9 fc06 	bl	800681c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	200014e4 	.word	0x200014e4
 800d020:	40005c00 	.word	0x40005c00

0800d024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d030:	2300      	movs	r3, #0
 800d032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7f7 ffc6 	bl	8004fcc <HAL_PCD_Start>
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	4618      	mov	r0, r3
 800d048:	f000 f94e 	bl	800d2e8 <USBD_Get_USB_Status>
 800d04c:	4603      	mov	r3, r0
 800d04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d050:	7bbb      	ldrb	r3, [r7, #14]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	4608      	mov	r0, r1
 800d064:	4611      	mov	r1, r2
 800d066:	461a      	mov	r2, r3
 800d068:	4603      	mov	r3, r0
 800d06a:	70fb      	strb	r3, [r7, #3]
 800d06c:	460b      	mov	r3, r1
 800d06e:	70bb      	strb	r3, [r7, #2]
 800d070:	4613      	mov	r3, r2
 800d072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d082:	78bb      	ldrb	r3, [r7, #2]
 800d084:	883a      	ldrh	r2, [r7, #0]
 800d086:	78f9      	ldrb	r1, [r7, #3]
 800d088:	f7f8 f91a 	bl	80052c0 <HAL_PCD_EP_Open>
 800d08c:	4603      	mov	r3, r0
 800d08e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	4618      	mov	r0, r3
 800d094:	f000 f928 	bl	800d2e8 <USBD_Get_USB_Status>
 800d098:	4603      	mov	r3, r0
 800d09a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d09c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0c0:	78fa      	ldrb	r2, [r7, #3]
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7f8 f958 	bl	800537a <HAL_PCD_EP_Close>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 f909 	bl	800d2e8 <USBD_Get_USB_Status>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0fe:	78fa      	ldrb	r2, [r7, #3]
 800d100:	4611      	mov	r1, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f7f8 fa00 	bl	8005508 <HAL_PCD_EP_SetStall>
 800d108:	4603      	mov	r3, r0
 800d10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 f8ea 	bl	800d2e8 <USBD_Get_USB_Status>
 800d114:	4603      	mov	r3, r0
 800d116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d118:	7bbb      	ldrb	r3, [r7, #14]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	460b      	mov	r3, r1
 800d12c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d13c:	78fa      	ldrb	r2, [r7, #3]
 800d13e:	4611      	mov	r1, r2
 800d140:	4618      	mov	r0, r3
 800d142:	f7f8 fa41 	bl	80055c8 <HAL_PCD_EP_ClrStall>
 800d146:	4603      	mov	r3, r0
 800d148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 f8cb 	bl	800d2e8 <USBD_Get_USB_Status>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d156:	7bbb      	ldrb	r3, [r7, #14]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	da0b      	bge.n	800d194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	00db      	lsls	r3, r3, #3
 800d18c:	440b      	add	r3, r1
 800d18e:	3312      	adds	r3, #18
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	e00b      	b.n	800d1ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d194:	78fb      	ldrb	r3, [r7, #3]
 800d196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d19a:	68f9      	ldr	r1, [r7, #12]
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	440b      	add	r3, r1
 800d1a6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d1aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bc80      	pop	{r7}
 800d1b4:	4770      	bx	lr

0800d1b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	460b      	mov	r3, r1
 800d1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1d0:	78fa      	ldrb	r2, [r7, #3]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f8 f84f 	bl	8005278 <HAL_PCD_SetAddress>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 f881 	bl	800d2e8 <USBD_Get_USB_Status>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	607a      	str	r2, [r7, #4]
 800d1fe:	461a      	mov	r2, r3
 800d200:	460b      	mov	r3, r1
 800d202:	72fb      	strb	r3, [r7, #11]
 800d204:	4613      	mov	r3, r2
 800d206:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d216:	893b      	ldrh	r3, [r7, #8]
 800d218:	7af9      	ldrb	r1, [r7, #11]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	f7f8 f93d 	bl	800549a <HAL_PCD_EP_Transmit>
 800d220:	4603      	mov	r3, r0
 800d222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	4618      	mov	r0, r3
 800d228:	f000 f85e 	bl	800d2e8 <USBD_Get_USB_Status>
 800d22c:	4603      	mov	r3, r0
 800d22e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d230:	7dbb      	ldrb	r3, [r7, #22]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3718      	adds	r7, #24
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b086      	sub	sp, #24
 800d23e:	af00      	add	r7, sp, #0
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	461a      	mov	r2, r3
 800d246:	460b      	mov	r3, r1
 800d248:	72fb      	strb	r3, [r7, #11]
 800d24a:	4613      	mov	r3, r2
 800d24c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d25c:	893b      	ldrh	r3, [r7, #8]
 800d25e:	7af9      	ldrb	r1, [r7, #11]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	f7f8 f8d2 	bl	800540a <HAL_PCD_EP_Receive>
 800d266:	4603      	mov	r3, r0
 800d268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 f83b 	bl	800d2e8 <USBD_Get_USB_Status>
 800d272:	4603      	mov	r3, r0
 800d274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d276:	7dbb      	ldrb	r3, [r7, #22]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d292:	78fa      	ldrb	r2, [r7, #3]
 800d294:	4611      	mov	r1, r2
 800d296:	4618      	mov	r0, r3
 800d298:	f7f8 f8e8 	bl	800546c <HAL_PCD_EP_GetRxCount>
 800d29c:	4603      	mov	r3, r0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2b0:	4b02      	ldr	r3, [pc, #8]	@ (800d2bc <USBD_static_malloc+0x14>)
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bc80      	pop	{r7}
 800d2ba:	4770      	bx	lr
 800d2bc:	200017bc 	.word	0x200017bc

0800d2c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]

}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bc80      	pop	{r7}
 800d2d0:	4770      	bx	lr

0800d2d2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	460b      	mov	r3, r1
 800d2dc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d2de:	bf00      	nop
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bc80      	pop	{r7}
 800d2e6:	4770      	bx	lr

0800d2e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	d817      	bhi.n	800d32c <USBD_Get_USB_Status+0x44>
 800d2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <USBD_Get_USB_Status+0x1c>)
 800d2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d302:	bf00      	nop
 800d304:	0800d315 	.word	0x0800d315
 800d308:	0800d31b 	.word	0x0800d31b
 800d30c:	0800d321 	.word	0x0800d321
 800d310:	0800d327 	.word	0x0800d327
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
    break;
 800d318:	e00b      	b.n	800d332 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d31a:	2302      	movs	r3, #2
 800d31c:	73fb      	strb	r3, [r7, #15]
    break;
 800d31e:	e008      	b.n	800d332 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d320:	2301      	movs	r3, #1
 800d322:	73fb      	strb	r3, [r7, #15]
    break;
 800d324:	e005      	b.n	800d332 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d326:	2302      	movs	r3, #2
 800d328:	73fb      	strb	r3, [r7, #15]
    break;
 800d32a:	e002      	b.n	800d332 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d32c:	2302      	movs	r3, #2
 800d32e:	73fb      	strb	r3, [r7, #15]
    break;
 800d330:	bf00      	nop
  }
  return usb_status;
 800d332:	7bfb      	ldrb	r3, [r7, #15]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	bc80      	pop	{r7}
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop

0800d340 <__cvt>:
 800d340:	2b00      	cmp	r3, #0
 800d342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d346:	461d      	mov	r5, r3
 800d348:	bfbb      	ittet	lt
 800d34a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d34e:	461d      	movlt	r5, r3
 800d350:	2300      	movge	r3, #0
 800d352:	232d      	movlt	r3, #45	@ 0x2d
 800d354:	b088      	sub	sp, #32
 800d356:	4614      	mov	r4, r2
 800d358:	bfb8      	it	lt
 800d35a:	4614      	movlt	r4, r2
 800d35c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d35e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d360:	7013      	strb	r3, [r2, #0]
 800d362:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d364:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d368:	f023 0820 	bic.w	r8, r3, #32
 800d36c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d370:	d005      	beq.n	800d37e <__cvt+0x3e>
 800d372:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d376:	d100      	bne.n	800d37a <__cvt+0x3a>
 800d378:	3601      	adds	r6, #1
 800d37a:	2302      	movs	r3, #2
 800d37c:	e000      	b.n	800d380 <__cvt+0x40>
 800d37e:	2303      	movs	r3, #3
 800d380:	aa07      	add	r2, sp, #28
 800d382:	9204      	str	r2, [sp, #16]
 800d384:	aa06      	add	r2, sp, #24
 800d386:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d38a:	e9cd 3600 	strd	r3, r6, [sp]
 800d38e:	4622      	mov	r2, r4
 800d390:	462b      	mov	r3, r5
 800d392:	f001 f8f9 	bl	800e588 <_dtoa_r>
 800d396:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d39a:	4607      	mov	r7, r0
 800d39c:	d119      	bne.n	800d3d2 <__cvt+0x92>
 800d39e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3a0:	07db      	lsls	r3, r3, #31
 800d3a2:	d50e      	bpl.n	800d3c2 <__cvt+0x82>
 800d3a4:	eb00 0906 	add.w	r9, r0, r6
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7f3 fafa 	bl	80009a8 <__aeabi_dcmpeq>
 800d3b4:	b108      	cbz	r0, 800d3ba <__cvt+0x7a>
 800d3b6:	f8cd 901c 	str.w	r9, [sp, #28]
 800d3ba:	2230      	movs	r2, #48	@ 0x30
 800d3bc:	9b07      	ldr	r3, [sp, #28]
 800d3be:	454b      	cmp	r3, r9
 800d3c0:	d31e      	bcc.n	800d400 <__cvt+0xc0>
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	9b07      	ldr	r3, [sp, #28]
 800d3c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d3c8:	1bdb      	subs	r3, r3, r7
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	b008      	add	sp, #32
 800d3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d3d6:	eb00 0906 	add.w	r9, r0, r6
 800d3da:	d1e5      	bne.n	800d3a8 <__cvt+0x68>
 800d3dc:	7803      	ldrb	r3, [r0, #0]
 800d3de:	2b30      	cmp	r3, #48	@ 0x30
 800d3e0:	d10a      	bne.n	800d3f8 <__cvt+0xb8>
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	f7f3 fadd 	bl	80009a8 <__aeabi_dcmpeq>
 800d3ee:	b918      	cbnz	r0, 800d3f8 <__cvt+0xb8>
 800d3f0:	f1c6 0601 	rsb	r6, r6, #1
 800d3f4:	f8ca 6000 	str.w	r6, [sl]
 800d3f8:	f8da 3000 	ldr.w	r3, [sl]
 800d3fc:	4499      	add	r9, r3
 800d3fe:	e7d3      	b.n	800d3a8 <__cvt+0x68>
 800d400:	1c59      	adds	r1, r3, #1
 800d402:	9107      	str	r1, [sp, #28]
 800d404:	701a      	strb	r2, [r3, #0]
 800d406:	e7d9      	b.n	800d3bc <__cvt+0x7c>

0800d408 <__exponent>:
 800d408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d40a:	2900      	cmp	r1, #0
 800d40c:	bfb6      	itet	lt
 800d40e:	232d      	movlt	r3, #45	@ 0x2d
 800d410:	232b      	movge	r3, #43	@ 0x2b
 800d412:	4249      	neglt	r1, r1
 800d414:	2909      	cmp	r1, #9
 800d416:	7002      	strb	r2, [r0, #0]
 800d418:	7043      	strb	r3, [r0, #1]
 800d41a:	dd29      	ble.n	800d470 <__exponent+0x68>
 800d41c:	f10d 0307 	add.w	r3, sp, #7
 800d420:	461d      	mov	r5, r3
 800d422:	270a      	movs	r7, #10
 800d424:	fbb1 f6f7 	udiv	r6, r1, r7
 800d428:	461a      	mov	r2, r3
 800d42a:	fb07 1416 	mls	r4, r7, r6, r1
 800d42e:	3430      	adds	r4, #48	@ 0x30
 800d430:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d434:	460c      	mov	r4, r1
 800d436:	2c63      	cmp	r4, #99	@ 0x63
 800d438:	4631      	mov	r1, r6
 800d43a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d43e:	dcf1      	bgt.n	800d424 <__exponent+0x1c>
 800d440:	3130      	adds	r1, #48	@ 0x30
 800d442:	1e94      	subs	r4, r2, #2
 800d444:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d448:	4623      	mov	r3, r4
 800d44a:	1c41      	adds	r1, r0, #1
 800d44c:	42ab      	cmp	r3, r5
 800d44e:	d30a      	bcc.n	800d466 <__exponent+0x5e>
 800d450:	f10d 0309 	add.w	r3, sp, #9
 800d454:	1a9b      	subs	r3, r3, r2
 800d456:	42ac      	cmp	r4, r5
 800d458:	bf88      	it	hi
 800d45a:	2300      	movhi	r3, #0
 800d45c:	3302      	adds	r3, #2
 800d45e:	4403      	add	r3, r0
 800d460:	1a18      	subs	r0, r3, r0
 800d462:	b003      	add	sp, #12
 800d464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d466:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d46a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d46e:	e7ed      	b.n	800d44c <__exponent+0x44>
 800d470:	2330      	movs	r3, #48	@ 0x30
 800d472:	3130      	adds	r1, #48	@ 0x30
 800d474:	7083      	strb	r3, [r0, #2]
 800d476:	70c1      	strb	r1, [r0, #3]
 800d478:	1d03      	adds	r3, r0, #4
 800d47a:	e7f1      	b.n	800d460 <__exponent+0x58>

0800d47c <_printf_float>:
 800d47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d480:	b091      	sub	sp, #68	@ 0x44
 800d482:	460c      	mov	r4, r1
 800d484:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d488:	4616      	mov	r6, r2
 800d48a:	461f      	mov	r7, r3
 800d48c:	4605      	mov	r5, r0
 800d48e:	f000 ff67 	bl	800e360 <_localeconv_r>
 800d492:	6803      	ldr	r3, [r0, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	9308      	str	r3, [sp, #32]
 800d498:	f7f2 fe5a 	bl	8000150 <strlen>
 800d49c:	2300      	movs	r3, #0
 800d49e:	930e      	str	r3, [sp, #56]	@ 0x38
 800d4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a4:	9009      	str	r0, [sp, #36]	@ 0x24
 800d4a6:	3307      	adds	r3, #7
 800d4a8:	f023 0307 	bic.w	r3, r3, #7
 800d4ac:	f103 0208 	add.w	r2, r3, #8
 800d4b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d4b4:	f8d4 b000 	ldr.w	fp, [r4]
 800d4b8:	f8c8 2000 	str.w	r2, [r8]
 800d4bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d4c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4c6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d4d6:	4b9c      	ldr	r3, [pc, #624]	@ (800d748 <_printf_float+0x2cc>)
 800d4d8:	f7f3 fa98 	bl	8000a0c <__aeabi_dcmpun>
 800d4dc:	bb70      	cbnz	r0, 800d53c <_printf_float+0xc0>
 800d4de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e6:	4b98      	ldr	r3, [pc, #608]	@ (800d748 <_printf_float+0x2cc>)
 800d4e8:	f7f3 fa72 	bl	80009d0 <__aeabi_dcmple>
 800d4ec:	bb30      	cbnz	r0, 800d53c <_printf_float+0xc0>
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	f7f3 fa61 	bl	80009bc <__aeabi_dcmplt>
 800d4fa:	b110      	cbz	r0, 800d502 <_printf_float+0x86>
 800d4fc:	232d      	movs	r3, #45	@ 0x2d
 800d4fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d502:	4a92      	ldr	r2, [pc, #584]	@ (800d74c <_printf_float+0x2d0>)
 800d504:	4b92      	ldr	r3, [pc, #584]	@ (800d750 <_printf_float+0x2d4>)
 800d506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d50a:	bf8c      	ite	hi
 800d50c:	4690      	movhi	r8, r2
 800d50e:	4698      	movls	r8, r3
 800d510:	2303      	movs	r3, #3
 800d512:	f04f 0900 	mov.w	r9, #0
 800d516:	6123      	str	r3, [r4, #16]
 800d518:	f02b 0304 	bic.w	r3, fp, #4
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	4633      	mov	r3, r6
 800d520:	4621      	mov	r1, r4
 800d522:	4628      	mov	r0, r5
 800d524:	9700      	str	r7, [sp, #0]
 800d526:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d528:	f000 f9d4 	bl	800d8d4 <_printf_common>
 800d52c:	3001      	adds	r0, #1
 800d52e:	f040 8090 	bne.w	800d652 <_printf_float+0x1d6>
 800d532:	f04f 30ff 	mov.w	r0, #4294967295
 800d536:	b011      	add	sp, #68	@ 0x44
 800d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53c:	4642      	mov	r2, r8
 800d53e:	464b      	mov	r3, r9
 800d540:	4640      	mov	r0, r8
 800d542:	4649      	mov	r1, r9
 800d544:	f7f3 fa62 	bl	8000a0c <__aeabi_dcmpun>
 800d548:	b148      	cbz	r0, 800d55e <_printf_float+0xe2>
 800d54a:	464b      	mov	r3, r9
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfb8      	it	lt
 800d550:	232d      	movlt	r3, #45	@ 0x2d
 800d552:	4a80      	ldr	r2, [pc, #512]	@ (800d754 <_printf_float+0x2d8>)
 800d554:	bfb8      	it	lt
 800d556:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d55a:	4b7f      	ldr	r3, [pc, #508]	@ (800d758 <_printf_float+0x2dc>)
 800d55c:	e7d3      	b.n	800d506 <_printf_float+0x8a>
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d564:	1c5a      	adds	r2, r3, #1
 800d566:	d13f      	bne.n	800d5e8 <_printf_float+0x16c>
 800d568:	2306      	movs	r3, #6
 800d56a:	6063      	str	r3, [r4, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	9206      	str	r2, [sp, #24]
 800d576:	aa0e      	add	r2, sp, #56	@ 0x38
 800d578:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d57c:	aa0d      	add	r2, sp, #52	@ 0x34
 800d57e:	9203      	str	r2, [sp, #12]
 800d580:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d584:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d588:	6863      	ldr	r3, [r4, #4]
 800d58a:	4642      	mov	r2, r8
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	4628      	mov	r0, r5
 800d590:	464b      	mov	r3, r9
 800d592:	910a      	str	r1, [sp, #40]	@ 0x28
 800d594:	f7ff fed4 	bl	800d340 <__cvt>
 800d598:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d59a:	4680      	mov	r8, r0
 800d59c:	2947      	cmp	r1, #71	@ 0x47
 800d59e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d5a0:	d128      	bne.n	800d5f4 <_printf_float+0x178>
 800d5a2:	1cc8      	adds	r0, r1, #3
 800d5a4:	db02      	blt.n	800d5ac <_printf_float+0x130>
 800d5a6:	6863      	ldr	r3, [r4, #4]
 800d5a8:	4299      	cmp	r1, r3
 800d5aa:	dd40      	ble.n	800d62e <_printf_float+0x1b2>
 800d5ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800d5b0:	fa5f fa8a 	uxtb.w	sl, sl
 800d5b4:	4652      	mov	r2, sl
 800d5b6:	3901      	subs	r1, #1
 800d5b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d5bc:	910d      	str	r1, [sp, #52]	@ 0x34
 800d5be:	f7ff ff23 	bl	800d408 <__exponent>
 800d5c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5c4:	4681      	mov	r9, r0
 800d5c6:	1813      	adds	r3, r2, r0
 800d5c8:	2a01      	cmp	r2, #1
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	dc02      	bgt.n	800d5d4 <_printf_float+0x158>
 800d5ce:	6822      	ldr	r2, [r4, #0]
 800d5d0:	07d2      	lsls	r2, r2, #31
 800d5d2:	d501      	bpl.n	800d5d8 <_printf_float+0x15c>
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	6123      	str	r3, [r4, #16]
 800d5d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d09e      	beq.n	800d51e <_printf_float+0xa2>
 800d5e0:	232d      	movs	r3, #45	@ 0x2d
 800d5e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5e6:	e79a      	b.n	800d51e <_printf_float+0xa2>
 800d5e8:	2947      	cmp	r1, #71	@ 0x47
 800d5ea:	d1bf      	bne.n	800d56c <_printf_float+0xf0>
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1bd      	bne.n	800d56c <_printf_float+0xf0>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e7ba      	b.n	800d56a <_printf_float+0xee>
 800d5f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d5f8:	d9dc      	bls.n	800d5b4 <_printf_float+0x138>
 800d5fa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d5fe:	d118      	bne.n	800d632 <_printf_float+0x1b6>
 800d600:	2900      	cmp	r1, #0
 800d602:	6863      	ldr	r3, [r4, #4]
 800d604:	dd0b      	ble.n	800d61e <_printf_float+0x1a2>
 800d606:	6121      	str	r1, [r4, #16]
 800d608:	b913      	cbnz	r3, 800d610 <_printf_float+0x194>
 800d60a:	6822      	ldr	r2, [r4, #0]
 800d60c:	07d0      	lsls	r0, r2, #31
 800d60e:	d502      	bpl.n	800d616 <_printf_float+0x19a>
 800d610:	3301      	adds	r3, #1
 800d612:	440b      	add	r3, r1
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	f04f 0900 	mov.w	r9, #0
 800d61a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d61c:	e7dc      	b.n	800d5d8 <_printf_float+0x15c>
 800d61e:	b913      	cbnz	r3, 800d626 <_printf_float+0x1aa>
 800d620:	6822      	ldr	r2, [r4, #0]
 800d622:	07d2      	lsls	r2, r2, #31
 800d624:	d501      	bpl.n	800d62a <_printf_float+0x1ae>
 800d626:	3302      	adds	r3, #2
 800d628:	e7f4      	b.n	800d614 <_printf_float+0x198>
 800d62a:	2301      	movs	r3, #1
 800d62c:	e7f2      	b.n	800d614 <_printf_float+0x198>
 800d62e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d634:	4299      	cmp	r1, r3
 800d636:	db05      	blt.n	800d644 <_printf_float+0x1c8>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	6121      	str	r1, [r4, #16]
 800d63c:	07d8      	lsls	r0, r3, #31
 800d63e:	d5ea      	bpl.n	800d616 <_printf_float+0x19a>
 800d640:	1c4b      	adds	r3, r1, #1
 800d642:	e7e7      	b.n	800d614 <_printf_float+0x198>
 800d644:	2900      	cmp	r1, #0
 800d646:	bfcc      	ite	gt
 800d648:	2201      	movgt	r2, #1
 800d64a:	f1c1 0202 	rsble	r2, r1, #2
 800d64e:	4413      	add	r3, r2
 800d650:	e7e0      	b.n	800d614 <_printf_float+0x198>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	055a      	lsls	r2, r3, #21
 800d656:	d407      	bmi.n	800d668 <_printf_float+0x1ec>
 800d658:	6923      	ldr	r3, [r4, #16]
 800d65a:	4642      	mov	r2, r8
 800d65c:	4631      	mov	r1, r6
 800d65e:	4628      	mov	r0, r5
 800d660:	47b8      	blx	r7
 800d662:	3001      	adds	r0, #1
 800d664:	d12b      	bne.n	800d6be <_printf_float+0x242>
 800d666:	e764      	b.n	800d532 <_printf_float+0xb6>
 800d668:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d66c:	f240 80dc 	bls.w	800d828 <_printf_float+0x3ac>
 800d670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d674:	2200      	movs	r2, #0
 800d676:	2300      	movs	r3, #0
 800d678:	f7f3 f996 	bl	80009a8 <__aeabi_dcmpeq>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d033      	beq.n	800d6e8 <_printf_float+0x26c>
 800d680:	2301      	movs	r3, #1
 800d682:	4631      	mov	r1, r6
 800d684:	4628      	mov	r0, r5
 800d686:	4a35      	ldr	r2, [pc, #212]	@ (800d75c <_printf_float+0x2e0>)
 800d688:	47b8      	blx	r7
 800d68a:	3001      	adds	r0, #1
 800d68c:	f43f af51 	beq.w	800d532 <_printf_float+0xb6>
 800d690:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d694:	4543      	cmp	r3, r8
 800d696:	db02      	blt.n	800d69e <_printf_float+0x222>
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	07d8      	lsls	r0, r3, #31
 800d69c:	d50f      	bpl.n	800d6be <_printf_float+0x242>
 800d69e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	47b8      	blx	r7
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	f43f af42 	beq.w	800d532 <_printf_float+0xb6>
 800d6ae:	f04f 0900 	mov.w	r9, #0
 800d6b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6b6:	f104 0a1a 	add.w	sl, r4, #26
 800d6ba:	45c8      	cmp	r8, r9
 800d6bc:	dc09      	bgt.n	800d6d2 <_printf_float+0x256>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	079b      	lsls	r3, r3, #30
 800d6c2:	f100 8102 	bmi.w	800d8ca <_printf_float+0x44e>
 800d6c6:	68e0      	ldr	r0, [r4, #12]
 800d6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6ca:	4298      	cmp	r0, r3
 800d6cc:	bfb8      	it	lt
 800d6ce:	4618      	movlt	r0, r3
 800d6d0:	e731      	b.n	800d536 <_printf_float+0xba>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4652      	mov	r2, sl
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4628      	mov	r0, r5
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f af28 	beq.w	800d532 <_printf_float+0xb6>
 800d6e2:	f109 0901 	add.w	r9, r9, #1
 800d6e6:	e7e8      	b.n	800d6ba <_printf_float+0x23e>
 800d6e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dc38      	bgt.n	800d760 <_printf_float+0x2e4>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	4631      	mov	r1, r6
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	4a19      	ldr	r2, [pc, #100]	@ (800d75c <_printf_float+0x2e0>)
 800d6f6:	47b8      	blx	r7
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	f43f af1a 	beq.w	800d532 <_printf_float+0xb6>
 800d6fe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d702:	ea59 0303 	orrs.w	r3, r9, r3
 800d706:	d102      	bne.n	800d70e <_printf_float+0x292>
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	07d9      	lsls	r1, r3, #31
 800d70c:	d5d7      	bpl.n	800d6be <_printf_float+0x242>
 800d70e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d712:	4631      	mov	r1, r6
 800d714:	4628      	mov	r0, r5
 800d716:	47b8      	blx	r7
 800d718:	3001      	adds	r0, #1
 800d71a:	f43f af0a 	beq.w	800d532 <_printf_float+0xb6>
 800d71e:	f04f 0a00 	mov.w	sl, #0
 800d722:	f104 0b1a 	add.w	fp, r4, #26
 800d726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d728:	425b      	negs	r3, r3
 800d72a:	4553      	cmp	r3, sl
 800d72c:	dc01      	bgt.n	800d732 <_printf_float+0x2b6>
 800d72e:	464b      	mov	r3, r9
 800d730:	e793      	b.n	800d65a <_printf_float+0x1de>
 800d732:	2301      	movs	r3, #1
 800d734:	465a      	mov	r2, fp
 800d736:	4631      	mov	r1, r6
 800d738:	4628      	mov	r0, r5
 800d73a:	47b8      	blx	r7
 800d73c:	3001      	adds	r0, #1
 800d73e:	f43f aef8 	beq.w	800d532 <_printf_float+0xb6>
 800d742:	f10a 0a01 	add.w	sl, sl, #1
 800d746:	e7ee      	b.n	800d726 <_printf_float+0x2aa>
 800d748:	7fefffff 	.word	0x7fefffff
 800d74c:	08012a3a 	.word	0x08012a3a
 800d750:	08012a36 	.word	0x08012a36
 800d754:	08012a42 	.word	0x08012a42
 800d758:	08012a3e 	.word	0x08012a3e
 800d75c:	08012b7c 	.word	0x08012b7c
 800d760:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d762:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d766:	4553      	cmp	r3, sl
 800d768:	bfa8      	it	ge
 800d76a:	4653      	movge	r3, sl
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	4699      	mov	r9, r3
 800d770:	dc36      	bgt.n	800d7e0 <_printf_float+0x364>
 800d772:	f04f 0b00 	mov.w	fp, #0
 800d776:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d77a:	f104 021a 	add.w	r2, r4, #26
 800d77e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d780:	930a      	str	r3, [sp, #40]	@ 0x28
 800d782:	eba3 0309 	sub.w	r3, r3, r9
 800d786:	455b      	cmp	r3, fp
 800d788:	dc31      	bgt.n	800d7ee <_printf_float+0x372>
 800d78a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d78c:	459a      	cmp	sl, r3
 800d78e:	dc3a      	bgt.n	800d806 <_printf_float+0x38a>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	07da      	lsls	r2, r3, #31
 800d794:	d437      	bmi.n	800d806 <_printf_float+0x38a>
 800d796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d798:	ebaa 0903 	sub.w	r9, sl, r3
 800d79c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d79e:	ebaa 0303 	sub.w	r3, sl, r3
 800d7a2:	4599      	cmp	r9, r3
 800d7a4:	bfa8      	it	ge
 800d7a6:	4699      	movge	r9, r3
 800d7a8:	f1b9 0f00 	cmp.w	r9, #0
 800d7ac:	dc33      	bgt.n	800d816 <_printf_float+0x39a>
 800d7ae:	f04f 0800 	mov.w	r8, #0
 800d7b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7b6:	f104 0b1a 	add.w	fp, r4, #26
 800d7ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7bc:	ebaa 0303 	sub.w	r3, sl, r3
 800d7c0:	eba3 0309 	sub.w	r3, r3, r9
 800d7c4:	4543      	cmp	r3, r8
 800d7c6:	f77f af7a 	ble.w	800d6be <_printf_float+0x242>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	465a      	mov	r2, fp
 800d7ce:	4631      	mov	r1, r6
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	47b8      	blx	r7
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	f43f aeac 	beq.w	800d532 <_printf_float+0xb6>
 800d7da:	f108 0801 	add.w	r8, r8, #1
 800d7de:	e7ec      	b.n	800d7ba <_printf_float+0x33e>
 800d7e0:	4642      	mov	r2, r8
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	47b8      	blx	r7
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	d1c2      	bne.n	800d772 <_printf_float+0x2f6>
 800d7ec:	e6a1      	b.n	800d532 <_printf_float+0xb6>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	920a      	str	r2, [sp, #40]	@ 0x28
 800d7f6:	47b8      	blx	r7
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	f43f ae9a 	beq.w	800d532 <_printf_float+0xb6>
 800d7fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d800:	f10b 0b01 	add.w	fp, fp, #1
 800d804:	e7bb      	b.n	800d77e <_printf_float+0x302>
 800d806:	4631      	mov	r1, r6
 800d808:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d80c:	4628      	mov	r0, r5
 800d80e:	47b8      	blx	r7
 800d810:	3001      	adds	r0, #1
 800d812:	d1c0      	bne.n	800d796 <_printf_float+0x31a>
 800d814:	e68d      	b.n	800d532 <_printf_float+0xb6>
 800d816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d818:	464b      	mov	r3, r9
 800d81a:	4631      	mov	r1, r6
 800d81c:	4628      	mov	r0, r5
 800d81e:	4442      	add	r2, r8
 800d820:	47b8      	blx	r7
 800d822:	3001      	adds	r0, #1
 800d824:	d1c3      	bne.n	800d7ae <_printf_float+0x332>
 800d826:	e684      	b.n	800d532 <_printf_float+0xb6>
 800d828:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d82c:	f1ba 0f01 	cmp.w	sl, #1
 800d830:	dc01      	bgt.n	800d836 <_printf_float+0x3ba>
 800d832:	07db      	lsls	r3, r3, #31
 800d834:	d536      	bpl.n	800d8a4 <_printf_float+0x428>
 800d836:	2301      	movs	r3, #1
 800d838:	4642      	mov	r2, r8
 800d83a:	4631      	mov	r1, r6
 800d83c:	4628      	mov	r0, r5
 800d83e:	47b8      	blx	r7
 800d840:	3001      	adds	r0, #1
 800d842:	f43f ae76 	beq.w	800d532 <_printf_float+0xb6>
 800d846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d84a:	4631      	mov	r1, r6
 800d84c:	4628      	mov	r0, r5
 800d84e:	47b8      	blx	r7
 800d850:	3001      	adds	r0, #1
 800d852:	f43f ae6e 	beq.w	800d532 <_printf_float+0xb6>
 800d856:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d85a:	2200      	movs	r2, #0
 800d85c:	2300      	movs	r3, #0
 800d85e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d862:	f7f3 f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 800d866:	b9c0      	cbnz	r0, 800d89a <_printf_float+0x41e>
 800d868:	4653      	mov	r3, sl
 800d86a:	f108 0201 	add.w	r2, r8, #1
 800d86e:	4631      	mov	r1, r6
 800d870:	4628      	mov	r0, r5
 800d872:	47b8      	blx	r7
 800d874:	3001      	adds	r0, #1
 800d876:	d10c      	bne.n	800d892 <_printf_float+0x416>
 800d878:	e65b      	b.n	800d532 <_printf_float+0xb6>
 800d87a:	2301      	movs	r3, #1
 800d87c:	465a      	mov	r2, fp
 800d87e:	4631      	mov	r1, r6
 800d880:	4628      	mov	r0, r5
 800d882:	47b8      	blx	r7
 800d884:	3001      	adds	r0, #1
 800d886:	f43f ae54 	beq.w	800d532 <_printf_float+0xb6>
 800d88a:	f108 0801 	add.w	r8, r8, #1
 800d88e:	45d0      	cmp	r8, sl
 800d890:	dbf3      	blt.n	800d87a <_printf_float+0x3fe>
 800d892:	464b      	mov	r3, r9
 800d894:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d898:	e6e0      	b.n	800d65c <_printf_float+0x1e0>
 800d89a:	f04f 0800 	mov.w	r8, #0
 800d89e:	f104 0b1a 	add.w	fp, r4, #26
 800d8a2:	e7f4      	b.n	800d88e <_printf_float+0x412>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	4642      	mov	r2, r8
 800d8a8:	e7e1      	b.n	800d86e <_printf_float+0x3f2>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	464a      	mov	r2, r9
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f43f ae3c 	beq.w	800d532 <_printf_float+0xb6>
 800d8ba:	f108 0801 	add.w	r8, r8, #1
 800d8be:	68e3      	ldr	r3, [r4, #12]
 800d8c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d8c2:	1a5b      	subs	r3, r3, r1
 800d8c4:	4543      	cmp	r3, r8
 800d8c6:	dcf0      	bgt.n	800d8aa <_printf_float+0x42e>
 800d8c8:	e6fd      	b.n	800d6c6 <_printf_float+0x24a>
 800d8ca:	f04f 0800 	mov.w	r8, #0
 800d8ce:	f104 0919 	add.w	r9, r4, #25
 800d8d2:	e7f4      	b.n	800d8be <_printf_float+0x442>

0800d8d4 <_printf_common>:
 800d8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d8:	4616      	mov	r6, r2
 800d8da:	4698      	mov	r8, r3
 800d8dc:	688a      	ldr	r2, [r1, #8]
 800d8de:	690b      	ldr	r3, [r1, #16]
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	bfb8      	it	lt
 800d8e6:	4613      	movlt	r3, r2
 800d8e8:	6033      	str	r3, [r6, #0]
 800d8ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8ee:	460c      	mov	r4, r1
 800d8f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8f4:	b10a      	cbz	r2, 800d8fa <_printf_common+0x26>
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	6033      	str	r3, [r6, #0]
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	0699      	lsls	r1, r3, #26
 800d8fe:	bf42      	ittt	mi
 800d900:	6833      	ldrmi	r3, [r6, #0]
 800d902:	3302      	addmi	r3, #2
 800d904:	6033      	strmi	r3, [r6, #0]
 800d906:	6825      	ldr	r5, [r4, #0]
 800d908:	f015 0506 	ands.w	r5, r5, #6
 800d90c:	d106      	bne.n	800d91c <_printf_common+0x48>
 800d90e:	f104 0a19 	add.w	sl, r4, #25
 800d912:	68e3      	ldr	r3, [r4, #12]
 800d914:	6832      	ldr	r2, [r6, #0]
 800d916:	1a9b      	subs	r3, r3, r2
 800d918:	42ab      	cmp	r3, r5
 800d91a:	dc2b      	bgt.n	800d974 <_printf_common+0xa0>
 800d91c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d920:	6822      	ldr	r2, [r4, #0]
 800d922:	3b00      	subs	r3, #0
 800d924:	bf18      	it	ne
 800d926:	2301      	movne	r3, #1
 800d928:	0692      	lsls	r2, r2, #26
 800d92a:	d430      	bmi.n	800d98e <_printf_common+0xba>
 800d92c:	4641      	mov	r1, r8
 800d92e:	4638      	mov	r0, r7
 800d930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d934:	47c8      	blx	r9
 800d936:	3001      	adds	r0, #1
 800d938:	d023      	beq.n	800d982 <_printf_common+0xae>
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	6922      	ldr	r2, [r4, #16]
 800d93e:	f003 0306 	and.w	r3, r3, #6
 800d942:	2b04      	cmp	r3, #4
 800d944:	bf14      	ite	ne
 800d946:	2500      	movne	r5, #0
 800d948:	6833      	ldreq	r3, [r6, #0]
 800d94a:	f04f 0600 	mov.w	r6, #0
 800d94e:	bf08      	it	eq
 800d950:	68e5      	ldreq	r5, [r4, #12]
 800d952:	f104 041a 	add.w	r4, r4, #26
 800d956:	bf08      	it	eq
 800d958:	1aed      	subeq	r5, r5, r3
 800d95a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d95e:	bf08      	it	eq
 800d960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d964:	4293      	cmp	r3, r2
 800d966:	bfc4      	itt	gt
 800d968:	1a9b      	subgt	r3, r3, r2
 800d96a:	18ed      	addgt	r5, r5, r3
 800d96c:	42b5      	cmp	r5, r6
 800d96e:	d11a      	bne.n	800d9a6 <_printf_common+0xd2>
 800d970:	2000      	movs	r0, #0
 800d972:	e008      	b.n	800d986 <_printf_common+0xb2>
 800d974:	2301      	movs	r3, #1
 800d976:	4652      	mov	r2, sl
 800d978:	4641      	mov	r1, r8
 800d97a:	4638      	mov	r0, r7
 800d97c:	47c8      	blx	r9
 800d97e:	3001      	adds	r0, #1
 800d980:	d103      	bne.n	800d98a <_printf_common+0xb6>
 800d982:	f04f 30ff 	mov.w	r0, #4294967295
 800d986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98a:	3501      	adds	r5, #1
 800d98c:	e7c1      	b.n	800d912 <_printf_common+0x3e>
 800d98e:	2030      	movs	r0, #48	@ 0x30
 800d990:	18e1      	adds	r1, r4, r3
 800d992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d99c:	4422      	add	r2, r4
 800d99e:	3302      	adds	r3, #2
 800d9a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9a4:	e7c2      	b.n	800d92c <_printf_common+0x58>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	4622      	mov	r2, r4
 800d9aa:	4641      	mov	r1, r8
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	47c8      	blx	r9
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	d0e6      	beq.n	800d982 <_printf_common+0xae>
 800d9b4:	3601      	adds	r6, #1
 800d9b6:	e7d9      	b.n	800d96c <_printf_common+0x98>

0800d9b8 <_printf_i>:
 800d9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9bc:	7e0f      	ldrb	r7, [r1, #24]
 800d9be:	4691      	mov	r9, r2
 800d9c0:	2f78      	cmp	r7, #120	@ 0x78
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	460c      	mov	r4, r1
 800d9c6:	469a      	mov	sl, r3
 800d9c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9ce:	d807      	bhi.n	800d9e0 <_printf_i+0x28>
 800d9d0:	2f62      	cmp	r7, #98	@ 0x62
 800d9d2:	d80a      	bhi.n	800d9ea <_printf_i+0x32>
 800d9d4:	2f00      	cmp	r7, #0
 800d9d6:	f000 80d1 	beq.w	800db7c <_printf_i+0x1c4>
 800d9da:	2f58      	cmp	r7, #88	@ 0x58
 800d9dc:	f000 80b8 	beq.w	800db50 <_printf_i+0x198>
 800d9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9e8:	e03a      	b.n	800da60 <_printf_i+0xa8>
 800d9ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9ee:	2b15      	cmp	r3, #21
 800d9f0:	d8f6      	bhi.n	800d9e0 <_printf_i+0x28>
 800d9f2:	a101      	add	r1, pc, #4	@ (adr r1, 800d9f8 <_printf_i+0x40>)
 800d9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9f8:	0800da51 	.word	0x0800da51
 800d9fc:	0800da65 	.word	0x0800da65
 800da00:	0800d9e1 	.word	0x0800d9e1
 800da04:	0800d9e1 	.word	0x0800d9e1
 800da08:	0800d9e1 	.word	0x0800d9e1
 800da0c:	0800d9e1 	.word	0x0800d9e1
 800da10:	0800da65 	.word	0x0800da65
 800da14:	0800d9e1 	.word	0x0800d9e1
 800da18:	0800d9e1 	.word	0x0800d9e1
 800da1c:	0800d9e1 	.word	0x0800d9e1
 800da20:	0800d9e1 	.word	0x0800d9e1
 800da24:	0800db63 	.word	0x0800db63
 800da28:	0800da8f 	.word	0x0800da8f
 800da2c:	0800db1d 	.word	0x0800db1d
 800da30:	0800d9e1 	.word	0x0800d9e1
 800da34:	0800d9e1 	.word	0x0800d9e1
 800da38:	0800db85 	.word	0x0800db85
 800da3c:	0800d9e1 	.word	0x0800d9e1
 800da40:	0800da8f 	.word	0x0800da8f
 800da44:	0800d9e1 	.word	0x0800d9e1
 800da48:	0800d9e1 	.word	0x0800d9e1
 800da4c:	0800db25 	.word	0x0800db25
 800da50:	6833      	ldr	r3, [r6, #0]
 800da52:	1d1a      	adds	r2, r3, #4
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6032      	str	r2, [r6, #0]
 800da58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da60:	2301      	movs	r3, #1
 800da62:	e09c      	b.n	800db9e <_printf_i+0x1e6>
 800da64:	6833      	ldr	r3, [r6, #0]
 800da66:	6820      	ldr	r0, [r4, #0]
 800da68:	1d19      	adds	r1, r3, #4
 800da6a:	6031      	str	r1, [r6, #0]
 800da6c:	0606      	lsls	r6, r0, #24
 800da6e:	d501      	bpl.n	800da74 <_printf_i+0xbc>
 800da70:	681d      	ldr	r5, [r3, #0]
 800da72:	e003      	b.n	800da7c <_printf_i+0xc4>
 800da74:	0645      	lsls	r5, r0, #25
 800da76:	d5fb      	bpl.n	800da70 <_printf_i+0xb8>
 800da78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da7c:	2d00      	cmp	r5, #0
 800da7e:	da03      	bge.n	800da88 <_printf_i+0xd0>
 800da80:	232d      	movs	r3, #45	@ 0x2d
 800da82:	426d      	negs	r5, r5
 800da84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da88:	230a      	movs	r3, #10
 800da8a:	4858      	ldr	r0, [pc, #352]	@ (800dbec <_printf_i+0x234>)
 800da8c:	e011      	b.n	800dab2 <_printf_i+0xfa>
 800da8e:	6821      	ldr	r1, [r4, #0]
 800da90:	6833      	ldr	r3, [r6, #0]
 800da92:	0608      	lsls	r0, r1, #24
 800da94:	f853 5b04 	ldr.w	r5, [r3], #4
 800da98:	d402      	bmi.n	800daa0 <_printf_i+0xe8>
 800da9a:	0649      	lsls	r1, r1, #25
 800da9c:	bf48      	it	mi
 800da9e:	b2ad      	uxthmi	r5, r5
 800daa0:	2f6f      	cmp	r7, #111	@ 0x6f
 800daa2:	6033      	str	r3, [r6, #0]
 800daa4:	bf14      	ite	ne
 800daa6:	230a      	movne	r3, #10
 800daa8:	2308      	moveq	r3, #8
 800daaa:	4850      	ldr	r0, [pc, #320]	@ (800dbec <_printf_i+0x234>)
 800daac:	2100      	movs	r1, #0
 800daae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dab2:	6866      	ldr	r6, [r4, #4]
 800dab4:	2e00      	cmp	r6, #0
 800dab6:	60a6      	str	r6, [r4, #8]
 800dab8:	db05      	blt.n	800dac6 <_printf_i+0x10e>
 800daba:	6821      	ldr	r1, [r4, #0]
 800dabc:	432e      	orrs	r6, r5
 800dabe:	f021 0104 	bic.w	r1, r1, #4
 800dac2:	6021      	str	r1, [r4, #0]
 800dac4:	d04b      	beq.n	800db5e <_printf_i+0x1a6>
 800dac6:	4616      	mov	r6, r2
 800dac8:	fbb5 f1f3 	udiv	r1, r5, r3
 800dacc:	fb03 5711 	mls	r7, r3, r1, r5
 800dad0:	5dc7      	ldrb	r7, [r0, r7]
 800dad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dad6:	462f      	mov	r7, r5
 800dad8:	42bb      	cmp	r3, r7
 800dada:	460d      	mov	r5, r1
 800dadc:	d9f4      	bls.n	800dac8 <_printf_i+0x110>
 800dade:	2b08      	cmp	r3, #8
 800dae0:	d10b      	bne.n	800dafa <_printf_i+0x142>
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	07df      	lsls	r7, r3, #31
 800dae6:	d508      	bpl.n	800dafa <_printf_i+0x142>
 800dae8:	6923      	ldr	r3, [r4, #16]
 800daea:	6861      	ldr	r1, [r4, #4]
 800daec:	4299      	cmp	r1, r3
 800daee:	bfde      	ittt	le
 800daf0:	2330      	movle	r3, #48	@ 0x30
 800daf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800daf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dafa:	1b92      	subs	r2, r2, r6
 800dafc:	6122      	str	r2, [r4, #16]
 800dafe:	464b      	mov	r3, r9
 800db00:	4621      	mov	r1, r4
 800db02:	4640      	mov	r0, r8
 800db04:	f8cd a000 	str.w	sl, [sp]
 800db08:	aa03      	add	r2, sp, #12
 800db0a:	f7ff fee3 	bl	800d8d4 <_printf_common>
 800db0e:	3001      	adds	r0, #1
 800db10:	d14a      	bne.n	800dba8 <_printf_i+0x1f0>
 800db12:	f04f 30ff 	mov.w	r0, #4294967295
 800db16:	b004      	add	sp, #16
 800db18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	f043 0320 	orr.w	r3, r3, #32
 800db22:	6023      	str	r3, [r4, #0]
 800db24:	2778      	movs	r7, #120	@ 0x78
 800db26:	4832      	ldr	r0, [pc, #200]	@ (800dbf0 <_printf_i+0x238>)
 800db28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	6831      	ldr	r1, [r6, #0]
 800db30:	061f      	lsls	r7, r3, #24
 800db32:	f851 5b04 	ldr.w	r5, [r1], #4
 800db36:	d402      	bmi.n	800db3e <_printf_i+0x186>
 800db38:	065f      	lsls	r7, r3, #25
 800db3a:	bf48      	it	mi
 800db3c:	b2ad      	uxthmi	r5, r5
 800db3e:	6031      	str	r1, [r6, #0]
 800db40:	07d9      	lsls	r1, r3, #31
 800db42:	bf44      	itt	mi
 800db44:	f043 0320 	orrmi.w	r3, r3, #32
 800db48:	6023      	strmi	r3, [r4, #0]
 800db4a:	b11d      	cbz	r5, 800db54 <_printf_i+0x19c>
 800db4c:	2310      	movs	r3, #16
 800db4e:	e7ad      	b.n	800daac <_printf_i+0xf4>
 800db50:	4826      	ldr	r0, [pc, #152]	@ (800dbec <_printf_i+0x234>)
 800db52:	e7e9      	b.n	800db28 <_printf_i+0x170>
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	f023 0320 	bic.w	r3, r3, #32
 800db5a:	6023      	str	r3, [r4, #0]
 800db5c:	e7f6      	b.n	800db4c <_printf_i+0x194>
 800db5e:	4616      	mov	r6, r2
 800db60:	e7bd      	b.n	800dade <_printf_i+0x126>
 800db62:	6833      	ldr	r3, [r6, #0]
 800db64:	6825      	ldr	r5, [r4, #0]
 800db66:	1d18      	adds	r0, r3, #4
 800db68:	6961      	ldr	r1, [r4, #20]
 800db6a:	6030      	str	r0, [r6, #0]
 800db6c:	062e      	lsls	r6, r5, #24
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	d501      	bpl.n	800db76 <_printf_i+0x1be>
 800db72:	6019      	str	r1, [r3, #0]
 800db74:	e002      	b.n	800db7c <_printf_i+0x1c4>
 800db76:	0668      	lsls	r0, r5, #25
 800db78:	d5fb      	bpl.n	800db72 <_printf_i+0x1ba>
 800db7a:	8019      	strh	r1, [r3, #0]
 800db7c:	2300      	movs	r3, #0
 800db7e:	4616      	mov	r6, r2
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	e7bc      	b.n	800dafe <_printf_i+0x146>
 800db84:	6833      	ldr	r3, [r6, #0]
 800db86:	2100      	movs	r1, #0
 800db88:	1d1a      	adds	r2, r3, #4
 800db8a:	6032      	str	r2, [r6, #0]
 800db8c:	681e      	ldr	r6, [r3, #0]
 800db8e:	6862      	ldr	r2, [r4, #4]
 800db90:	4630      	mov	r0, r6
 800db92:	f000 fc5c 	bl	800e44e <memchr>
 800db96:	b108      	cbz	r0, 800db9c <_printf_i+0x1e4>
 800db98:	1b80      	subs	r0, r0, r6
 800db9a:	6060      	str	r0, [r4, #4]
 800db9c:	6863      	ldr	r3, [r4, #4]
 800db9e:	6123      	str	r3, [r4, #16]
 800dba0:	2300      	movs	r3, #0
 800dba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dba6:	e7aa      	b.n	800dafe <_printf_i+0x146>
 800dba8:	4632      	mov	r2, r6
 800dbaa:	4649      	mov	r1, r9
 800dbac:	4640      	mov	r0, r8
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	47d0      	blx	sl
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d0ad      	beq.n	800db12 <_printf_i+0x15a>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	079b      	lsls	r3, r3, #30
 800dbba:	d413      	bmi.n	800dbe4 <_printf_i+0x22c>
 800dbbc:	68e0      	ldr	r0, [r4, #12]
 800dbbe:	9b03      	ldr	r3, [sp, #12]
 800dbc0:	4298      	cmp	r0, r3
 800dbc2:	bfb8      	it	lt
 800dbc4:	4618      	movlt	r0, r3
 800dbc6:	e7a6      	b.n	800db16 <_printf_i+0x15e>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	4632      	mov	r2, r6
 800dbcc:	4649      	mov	r1, r9
 800dbce:	4640      	mov	r0, r8
 800dbd0:	47d0      	blx	sl
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	d09d      	beq.n	800db12 <_printf_i+0x15a>
 800dbd6:	3501      	adds	r5, #1
 800dbd8:	68e3      	ldr	r3, [r4, #12]
 800dbda:	9903      	ldr	r1, [sp, #12]
 800dbdc:	1a5b      	subs	r3, r3, r1
 800dbde:	42ab      	cmp	r3, r5
 800dbe0:	dcf2      	bgt.n	800dbc8 <_printf_i+0x210>
 800dbe2:	e7eb      	b.n	800dbbc <_printf_i+0x204>
 800dbe4:	2500      	movs	r5, #0
 800dbe6:	f104 0619 	add.w	r6, r4, #25
 800dbea:	e7f5      	b.n	800dbd8 <_printf_i+0x220>
 800dbec:	08012a46 	.word	0x08012a46
 800dbf0:	08012a57 	.word	0x08012a57

0800dbf4 <_scanf_float>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	b087      	sub	sp, #28
 800dbfa:	9303      	str	r3, [sp, #12]
 800dbfc:	688b      	ldr	r3, [r1, #8]
 800dbfe:	4691      	mov	r9, r2
 800dc00:	1e5a      	subs	r2, r3, #1
 800dc02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dc06:	bf82      	ittt	hi
 800dc08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dc0c:	eb03 0b05 	addhi.w	fp, r3, r5
 800dc10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dc14:	460a      	mov	r2, r1
 800dc16:	f04f 0500 	mov.w	r5, #0
 800dc1a:	bf88      	it	hi
 800dc1c:	608b      	strhi	r3, [r1, #8]
 800dc1e:	680b      	ldr	r3, [r1, #0]
 800dc20:	4680      	mov	r8, r0
 800dc22:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dc26:	f842 3b1c 	str.w	r3, [r2], #28
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	bf98      	it	ls
 800dc2e:	f04f 0b00 	movls.w	fp, #0
 800dc32:	4616      	mov	r6, r2
 800dc34:	46aa      	mov	sl, r5
 800dc36:	462f      	mov	r7, r5
 800dc38:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dc3c:	9201      	str	r2, [sp, #4]
 800dc3e:	9502      	str	r5, [sp, #8]
 800dc40:	68a2      	ldr	r2, [r4, #8]
 800dc42:	b15a      	cbz	r2, 800dc5c <_scanf_float+0x68>
 800dc44:	f8d9 3000 	ldr.w	r3, [r9]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b4e      	cmp	r3, #78	@ 0x4e
 800dc4c:	d862      	bhi.n	800dd14 <_scanf_float+0x120>
 800dc4e:	2b40      	cmp	r3, #64	@ 0x40
 800dc50:	d83a      	bhi.n	800dcc8 <_scanf_float+0xd4>
 800dc52:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dc56:	b2c8      	uxtb	r0, r1
 800dc58:	280e      	cmp	r0, #14
 800dc5a:	d938      	bls.n	800dcce <_scanf_float+0xda>
 800dc5c:	b11f      	cbz	r7, 800dc66 <_scanf_float+0x72>
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc6a:	f1ba 0f01 	cmp.w	sl, #1
 800dc6e:	f200 8114 	bhi.w	800de9a <_scanf_float+0x2a6>
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	429e      	cmp	r6, r3
 800dc76:	f200 8105 	bhi.w	800de84 <_scanf_float+0x290>
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	b007      	add	sp, #28
 800dc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dc86:	2a0d      	cmp	r2, #13
 800dc88:	d8e8      	bhi.n	800dc5c <_scanf_float+0x68>
 800dc8a:	a101      	add	r1, pc, #4	@ (adr r1, 800dc90 <_scanf_float+0x9c>)
 800dc8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc90:	0800ddd9 	.word	0x0800ddd9
 800dc94:	0800dc5d 	.word	0x0800dc5d
 800dc98:	0800dc5d 	.word	0x0800dc5d
 800dc9c:	0800dc5d 	.word	0x0800dc5d
 800dca0:	0800de35 	.word	0x0800de35
 800dca4:	0800de0f 	.word	0x0800de0f
 800dca8:	0800dc5d 	.word	0x0800dc5d
 800dcac:	0800dc5d 	.word	0x0800dc5d
 800dcb0:	0800dde7 	.word	0x0800dde7
 800dcb4:	0800dc5d 	.word	0x0800dc5d
 800dcb8:	0800dc5d 	.word	0x0800dc5d
 800dcbc:	0800dc5d 	.word	0x0800dc5d
 800dcc0:	0800dc5d 	.word	0x0800dc5d
 800dcc4:	0800dda3 	.word	0x0800dda3
 800dcc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dccc:	e7db      	b.n	800dc86 <_scanf_float+0x92>
 800dcce:	290e      	cmp	r1, #14
 800dcd0:	d8c4      	bhi.n	800dc5c <_scanf_float+0x68>
 800dcd2:	a001      	add	r0, pc, #4	@ (adr r0, 800dcd8 <_scanf_float+0xe4>)
 800dcd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dcd8:	0800dd93 	.word	0x0800dd93
 800dcdc:	0800dc5d 	.word	0x0800dc5d
 800dce0:	0800dd93 	.word	0x0800dd93
 800dce4:	0800de23 	.word	0x0800de23
 800dce8:	0800dc5d 	.word	0x0800dc5d
 800dcec:	0800dd35 	.word	0x0800dd35
 800dcf0:	0800dd79 	.word	0x0800dd79
 800dcf4:	0800dd79 	.word	0x0800dd79
 800dcf8:	0800dd79 	.word	0x0800dd79
 800dcfc:	0800dd79 	.word	0x0800dd79
 800dd00:	0800dd79 	.word	0x0800dd79
 800dd04:	0800dd79 	.word	0x0800dd79
 800dd08:	0800dd79 	.word	0x0800dd79
 800dd0c:	0800dd79 	.word	0x0800dd79
 800dd10:	0800dd79 	.word	0x0800dd79
 800dd14:	2b6e      	cmp	r3, #110	@ 0x6e
 800dd16:	d809      	bhi.n	800dd2c <_scanf_float+0x138>
 800dd18:	2b60      	cmp	r3, #96	@ 0x60
 800dd1a:	d8b2      	bhi.n	800dc82 <_scanf_float+0x8e>
 800dd1c:	2b54      	cmp	r3, #84	@ 0x54
 800dd1e:	d07b      	beq.n	800de18 <_scanf_float+0x224>
 800dd20:	2b59      	cmp	r3, #89	@ 0x59
 800dd22:	d19b      	bne.n	800dc5c <_scanf_float+0x68>
 800dd24:	2d07      	cmp	r5, #7
 800dd26:	d199      	bne.n	800dc5c <_scanf_float+0x68>
 800dd28:	2508      	movs	r5, #8
 800dd2a:	e02f      	b.n	800dd8c <_scanf_float+0x198>
 800dd2c:	2b74      	cmp	r3, #116	@ 0x74
 800dd2e:	d073      	beq.n	800de18 <_scanf_float+0x224>
 800dd30:	2b79      	cmp	r3, #121	@ 0x79
 800dd32:	e7f6      	b.n	800dd22 <_scanf_float+0x12e>
 800dd34:	6821      	ldr	r1, [r4, #0]
 800dd36:	05c8      	lsls	r0, r1, #23
 800dd38:	d51e      	bpl.n	800dd78 <_scanf_float+0x184>
 800dd3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dd3e:	6021      	str	r1, [r4, #0]
 800dd40:	3701      	adds	r7, #1
 800dd42:	f1bb 0f00 	cmp.w	fp, #0
 800dd46:	d003      	beq.n	800dd50 <_scanf_float+0x15c>
 800dd48:	3201      	adds	r2, #1
 800dd4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd4e:	60a2      	str	r2, [r4, #8]
 800dd50:	68a3      	ldr	r3, [r4, #8]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	60a3      	str	r3, [r4, #8]
 800dd56:	6923      	ldr	r3, [r4, #16]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	6123      	str	r3, [r4, #16]
 800dd5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f8c9 3004 	str.w	r3, [r9, #4]
 800dd68:	f340 8083 	ble.w	800de72 <_scanf_float+0x27e>
 800dd6c:	f8d9 3000 	ldr.w	r3, [r9]
 800dd70:	3301      	adds	r3, #1
 800dd72:	f8c9 3000 	str.w	r3, [r9]
 800dd76:	e763      	b.n	800dc40 <_scanf_float+0x4c>
 800dd78:	eb1a 0105 	adds.w	r1, sl, r5
 800dd7c:	f47f af6e 	bne.w	800dc5c <_scanf_float+0x68>
 800dd80:	460d      	mov	r5, r1
 800dd82:	468a      	mov	sl, r1
 800dd84:	6822      	ldr	r2, [r4, #0]
 800dd86:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dd8a:	6022      	str	r2, [r4, #0]
 800dd8c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd90:	e7de      	b.n	800dd50 <_scanf_float+0x15c>
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	0610      	lsls	r0, r2, #24
 800dd96:	f57f af61 	bpl.w	800dc5c <_scanf_float+0x68>
 800dd9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd9e:	6022      	str	r2, [r4, #0]
 800dda0:	e7f4      	b.n	800dd8c <_scanf_float+0x198>
 800dda2:	f1ba 0f00 	cmp.w	sl, #0
 800dda6:	d10c      	bne.n	800ddc2 <_scanf_float+0x1ce>
 800dda8:	b977      	cbnz	r7, 800ddc8 <_scanf_float+0x1d4>
 800ddaa:	6822      	ldr	r2, [r4, #0]
 800ddac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ddb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ddb4:	d108      	bne.n	800ddc8 <_scanf_float+0x1d4>
 800ddb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ddba:	f04f 0a01 	mov.w	sl, #1
 800ddbe:	6022      	str	r2, [r4, #0]
 800ddc0:	e7e4      	b.n	800dd8c <_scanf_float+0x198>
 800ddc2:	f1ba 0f02 	cmp.w	sl, #2
 800ddc6:	d051      	beq.n	800de6c <_scanf_float+0x278>
 800ddc8:	2d01      	cmp	r5, #1
 800ddca:	d002      	beq.n	800ddd2 <_scanf_float+0x1de>
 800ddcc:	2d04      	cmp	r5, #4
 800ddce:	f47f af45 	bne.w	800dc5c <_scanf_float+0x68>
 800ddd2:	3501      	adds	r5, #1
 800ddd4:	b2ed      	uxtb	r5, r5
 800ddd6:	e7d9      	b.n	800dd8c <_scanf_float+0x198>
 800ddd8:	f1ba 0f01 	cmp.w	sl, #1
 800dddc:	f47f af3e 	bne.w	800dc5c <_scanf_float+0x68>
 800dde0:	f04f 0a02 	mov.w	sl, #2
 800dde4:	e7d2      	b.n	800dd8c <_scanf_float+0x198>
 800dde6:	b975      	cbnz	r5, 800de06 <_scanf_float+0x212>
 800dde8:	2f00      	cmp	r7, #0
 800ddea:	f47f af38 	bne.w	800dc5e <_scanf_float+0x6a>
 800ddee:	6822      	ldr	r2, [r4, #0]
 800ddf0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ddf4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ddf8:	f040 80ff 	bne.w	800dffa <_scanf_float+0x406>
 800ddfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de00:	2501      	movs	r5, #1
 800de02:	6022      	str	r2, [r4, #0]
 800de04:	e7c2      	b.n	800dd8c <_scanf_float+0x198>
 800de06:	2d03      	cmp	r5, #3
 800de08:	d0e3      	beq.n	800ddd2 <_scanf_float+0x1de>
 800de0a:	2d05      	cmp	r5, #5
 800de0c:	e7df      	b.n	800ddce <_scanf_float+0x1da>
 800de0e:	2d02      	cmp	r5, #2
 800de10:	f47f af24 	bne.w	800dc5c <_scanf_float+0x68>
 800de14:	2503      	movs	r5, #3
 800de16:	e7b9      	b.n	800dd8c <_scanf_float+0x198>
 800de18:	2d06      	cmp	r5, #6
 800de1a:	f47f af1f 	bne.w	800dc5c <_scanf_float+0x68>
 800de1e:	2507      	movs	r5, #7
 800de20:	e7b4      	b.n	800dd8c <_scanf_float+0x198>
 800de22:	6822      	ldr	r2, [r4, #0]
 800de24:	0591      	lsls	r1, r2, #22
 800de26:	f57f af19 	bpl.w	800dc5c <_scanf_float+0x68>
 800de2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800de2e:	6022      	str	r2, [r4, #0]
 800de30:	9702      	str	r7, [sp, #8]
 800de32:	e7ab      	b.n	800dd8c <_scanf_float+0x198>
 800de34:	6822      	ldr	r2, [r4, #0]
 800de36:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800de3a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800de3e:	d005      	beq.n	800de4c <_scanf_float+0x258>
 800de40:	0550      	lsls	r0, r2, #21
 800de42:	f57f af0b 	bpl.w	800dc5c <_scanf_float+0x68>
 800de46:	2f00      	cmp	r7, #0
 800de48:	f000 80d7 	beq.w	800dffa <_scanf_float+0x406>
 800de4c:	0591      	lsls	r1, r2, #22
 800de4e:	bf58      	it	pl
 800de50:	9902      	ldrpl	r1, [sp, #8]
 800de52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de56:	bf58      	it	pl
 800de58:	1a79      	subpl	r1, r7, r1
 800de5a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800de5e:	f04f 0700 	mov.w	r7, #0
 800de62:	bf58      	it	pl
 800de64:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800de68:	6022      	str	r2, [r4, #0]
 800de6a:	e78f      	b.n	800dd8c <_scanf_float+0x198>
 800de6c:	f04f 0a03 	mov.w	sl, #3
 800de70:	e78c      	b.n	800dd8c <_scanf_float+0x198>
 800de72:	4649      	mov	r1, r9
 800de74:	4640      	mov	r0, r8
 800de76:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800de7a:	4798      	blx	r3
 800de7c:	2800      	cmp	r0, #0
 800de7e:	f43f aedf 	beq.w	800dc40 <_scanf_float+0x4c>
 800de82:	e6eb      	b.n	800dc5c <_scanf_float+0x68>
 800de84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de88:	464a      	mov	r2, r9
 800de8a:	4640      	mov	r0, r8
 800de8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de90:	4798      	blx	r3
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	3b01      	subs	r3, #1
 800de96:	6123      	str	r3, [r4, #16]
 800de98:	e6eb      	b.n	800dc72 <_scanf_float+0x7e>
 800de9a:	1e6b      	subs	r3, r5, #1
 800de9c:	2b06      	cmp	r3, #6
 800de9e:	d824      	bhi.n	800deea <_scanf_float+0x2f6>
 800dea0:	2d02      	cmp	r5, #2
 800dea2:	d836      	bhi.n	800df12 <_scanf_float+0x31e>
 800dea4:	9b01      	ldr	r3, [sp, #4]
 800dea6:	429e      	cmp	r6, r3
 800dea8:	f67f aee7 	bls.w	800dc7a <_scanf_float+0x86>
 800deac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800deb0:	464a      	mov	r2, r9
 800deb2:	4640      	mov	r0, r8
 800deb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800deb8:	4798      	blx	r3
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	3b01      	subs	r3, #1
 800debe:	6123      	str	r3, [r4, #16]
 800dec0:	e7f0      	b.n	800dea4 <_scanf_float+0x2b0>
 800dec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dec6:	464a      	mov	r2, r9
 800dec8:	4640      	mov	r0, r8
 800deca:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dece:	4798      	blx	r3
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	3b01      	subs	r3, #1
 800ded4:	6123      	str	r3, [r4, #16]
 800ded6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800deda:	fa5f fa8a 	uxtb.w	sl, sl
 800dede:	f1ba 0f02 	cmp.w	sl, #2
 800dee2:	d1ee      	bne.n	800dec2 <_scanf_float+0x2ce>
 800dee4:	3d03      	subs	r5, #3
 800dee6:	b2ed      	uxtb	r5, r5
 800dee8:	1b76      	subs	r6, r6, r5
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	05da      	lsls	r2, r3, #23
 800deee:	d530      	bpl.n	800df52 <_scanf_float+0x35e>
 800def0:	055b      	lsls	r3, r3, #21
 800def2:	d511      	bpl.n	800df18 <_scanf_float+0x324>
 800def4:	9b01      	ldr	r3, [sp, #4]
 800def6:	429e      	cmp	r6, r3
 800def8:	f67f aebf 	bls.w	800dc7a <_scanf_float+0x86>
 800defc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df00:	464a      	mov	r2, r9
 800df02:	4640      	mov	r0, r8
 800df04:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df08:	4798      	blx	r3
 800df0a:	6923      	ldr	r3, [r4, #16]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	6123      	str	r3, [r4, #16]
 800df10:	e7f0      	b.n	800def4 <_scanf_float+0x300>
 800df12:	46aa      	mov	sl, r5
 800df14:	46b3      	mov	fp, r6
 800df16:	e7de      	b.n	800ded6 <_scanf_float+0x2e2>
 800df18:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800df1c:	6923      	ldr	r3, [r4, #16]
 800df1e:	2965      	cmp	r1, #101	@ 0x65
 800df20:	f103 33ff 	add.w	r3, r3, #4294967295
 800df24:	f106 35ff 	add.w	r5, r6, #4294967295
 800df28:	6123      	str	r3, [r4, #16]
 800df2a:	d00c      	beq.n	800df46 <_scanf_float+0x352>
 800df2c:	2945      	cmp	r1, #69	@ 0x45
 800df2e:	d00a      	beq.n	800df46 <_scanf_float+0x352>
 800df30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df34:	464a      	mov	r2, r9
 800df36:	4640      	mov	r0, r8
 800df38:	4798      	blx	r3
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800df40:	3b01      	subs	r3, #1
 800df42:	1eb5      	subs	r5, r6, #2
 800df44:	6123      	str	r3, [r4, #16]
 800df46:	464a      	mov	r2, r9
 800df48:	4640      	mov	r0, r8
 800df4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df4e:	4798      	blx	r3
 800df50:	462e      	mov	r6, r5
 800df52:	6822      	ldr	r2, [r4, #0]
 800df54:	f012 0210 	ands.w	r2, r2, #16
 800df58:	d001      	beq.n	800df5e <_scanf_float+0x36a>
 800df5a:	2000      	movs	r0, #0
 800df5c:	e68e      	b.n	800dc7c <_scanf_float+0x88>
 800df5e:	7032      	strb	r2, [r6, #0]
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800df66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df6a:	d125      	bne.n	800dfb8 <_scanf_float+0x3c4>
 800df6c:	9b02      	ldr	r3, [sp, #8]
 800df6e:	429f      	cmp	r7, r3
 800df70:	d00a      	beq.n	800df88 <_scanf_float+0x394>
 800df72:	1bda      	subs	r2, r3, r7
 800df74:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800df78:	429e      	cmp	r6, r3
 800df7a:	bf28      	it	cs
 800df7c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800df80:	4630      	mov	r0, r6
 800df82:	491f      	ldr	r1, [pc, #124]	@ (800e000 <_scanf_float+0x40c>)
 800df84:	f000 f902 	bl	800e18c <siprintf>
 800df88:	2200      	movs	r2, #0
 800df8a:	4640      	mov	r0, r8
 800df8c:	9901      	ldr	r1, [sp, #4]
 800df8e:	f002 fc67 	bl	8010860 <_strtod_r>
 800df92:	9b03      	ldr	r3, [sp, #12]
 800df94:	6825      	ldr	r5, [r4, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f015 0f02 	tst.w	r5, #2
 800df9c:	4606      	mov	r6, r0
 800df9e:	460f      	mov	r7, r1
 800dfa0:	f103 0204 	add.w	r2, r3, #4
 800dfa4:	d015      	beq.n	800dfd2 <_scanf_float+0x3de>
 800dfa6:	9903      	ldr	r1, [sp, #12]
 800dfa8:	600a      	str	r2, [r1, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	e9c3 6700 	strd	r6, r7, [r3]
 800dfb0:	68e3      	ldr	r3, [r4, #12]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	60e3      	str	r3, [r4, #12]
 800dfb6:	e7d0      	b.n	800df5a <_scanf_float+0x366>
 800dfb8:	9b04      	ldr	r3, [sp, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d0e4      	beq.n	800df88 <_scanf_float+0x394>
 800dfbe:	9905      	ldr	r1, [sp, #20]
 800dfc0:	230a      	movs	r3, #10
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	3101      	adds	r1, #1
 800dfc6:	f002 fccb 	bl	8010960 <_strtol_r>
 800dfca:	9b04      	ldr	r3, [sp, #16]
 800dfcc:	9e05      	ldr	r6, [sp, #20]
 800dfce:	1ac2      	subs	r2, r0, r3
 800dfd0:	e7d0      	b.n	800df74 <_scanf_float+0x380>
 800dfd2:	076d      	lsls	r5, r5, #29
 800dfd4:	d4e7      	bmi.n	800dfa6 <_scanf_float+0x3b2>
 800dfd6:	9d03      	ldr	r5, [sp, #12]
 800dfd8:	602a      	str	r2, [r5, #0]
 800dfda:	681d      	ldr	r5, [r3, #0]
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	f7f2 fd14 	bl	8000a0c <__aeabi_dcmpun>
 800dfe4:	b120      	cbz	r0, 800dff0 <_scanf_float+0x3fc>
 800dfe6:	4807      	ldr	r0, [pc, #28]	@ (800e004 <_scanf_float+0x410>)
 800dfe8:	f000 fa40 	bl	800e46c <nanf>
 800dfec:	6028      	str	r0, [r5, #0]
 800dfee:	e7df      	b.n	800dfb0 <_scanf_float+0x3bc>
 800dff0:	4630      	mov	r0, r6
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 fd68 	bl	8000ac8 <__aeabi_d2f>
 800dff8:	e7f8      	b.n	800dfec <_scanf_float+0x3f8>
 800dffa:	2700      	movs	r7, #0
 800dffc:	e633      	b.n	800dc66 <_scanf_float+0x72>
 800dffe:	bf00      	nop
 800e000:	08012a68 	.word	0x08012a68
 800e004:	08012bc4 	.word	0x08012bc4

0800e008 <std>:
 800e008:	2300      	movs	r3, #0
 800e00a:	b510      	push	{r4, lr}
 800e00c:	4604      	mov	r4, r0
 800e00e:	e9c0 3300 	strd	r3, r3, [r0]
 800e012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e016:	6083      	str	r3, [r0, #8]
 800e018:	8181      	strh	r1, [r0, #12]
 800e01a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e01c:	81c2      	strh	r2, [r0, #14]
 800e01e:	6183      	str	r3, [r0, #24]
 800e020:	4619      	mov	r1, r3
 800e022:	2208      	movs	r2, #8
 800e024:	305c      	adds	r0, #92	@ 0x5c
 800e026:	f000 f981 	bl	800e32c <memset>
 800e02a:	4b0d      	ldr	r3, [pc, #52]	@ (800e060 <std+0x58>)
 800e02c:	6224      	str	r4, [r4, #32]
 800e02e:	6263      	str	r3, [r4, #36]	@ 0x24
 800e030:	4b0c      	ldr	r3, [pc, #48]	@ (800e064 <std+0x5c>)
 800e032:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e034:	4b0c      	ldr	r3, [pc, #48]	@ (800e068 <std+0x60>)
 800e036:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e038:	4b0c      	ldr	r3, [pc, #48]	@ (800e06c <std+0x64>)
 800e03a:	6323      	str	r3, [r4, #48]	@ 0x30
 800e03c:	4b0c      	ldr	r3, [pc, #48]	@ (800e070 <std+0x68>)
 800e03e:	429c      	cmp	r4, r3
 800e040:	d006      	beq.n	800e050 <std+0x48>
 800e042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e046:	4294      	cmp	r4, r2
 800e048:	d002      	beq.n	800e050 <std+0x48>
 800e04a:	33d0      	adds	r3, #208	@ 0xd0
 800e04c:	429c      	cmp	r4, r3
 800e04e:	d105      	bne.n	800e05c <std+0x54>
 800e050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e058:	f000 b9f6 	b.w	800e448 <__retarget_lock_init_recursive>
 800e05c:	bd10      	pop	{r4, pc}
 800e05e:	bf00      	nop
 800e060:	0800e229 	.word	0x0800e229
 800e064:	0800e24f 	.word	0x0800e24f
 800e068:	0800e287 	.word	0x0800e287
 800e06c:	0800e2ab 	.word	0x0800e2ab
 800e070:	200019dc 	.word	0x200019dc

0800e074 <stdio_exit_handler>:
 800e074:	4a02      	ldr	r2, [pc, #8]	@ (800e080 <stdio_exit_handler+0xc>)
 800e076:	4903      	ldr	r1, [pc, #12]	@ (800e084 <stdio_exit_handler+0x10>)
 800e078:	4803      	ldr	r0, [pc, #12]	@ (800e088 <stdio_exit_handler+0x14>)
 800e07a:	f000 b869 	b.w	800e150 <_fwalk_sglue>
 800e07e:	bf00      	nop
 800e080:	20000194 	.word	0x20000194
 800e084:	08011349 	.word	0x08011349
 800e088:	200001a4 	.word	0x200001a4

0800e08c <cleanup_stdio>:
 800e08c:	6841      	ldr	r1, [r0, #4]
 800e08e:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <cleanup_stdio+0x34>)
 800e090:	b510      	push	{r4, lr}
 800e092:	4299      	cmp	r1, r3
 800e094:	4604      	mov	r4, r0
 800e096:	d001      	beq.n	800e09c <cleanup_stdio+0x10>
 800e098:	f003 f956 	bl	8011348 <_fflush_r>
 800e09c:	68a1      	ldr	r1, [r4, #8]
 800e09e:	4b09      	ldr	r3, [pc, #36]	@ (800e0c4 <cleanup_stdio+0x38>)
 800e0a0:	4299      	cmp	r1, r3
 800e0a2:	d002      	beq.n	800e0aa <cleanup_stdio+0x1e>
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f003 f94f 	bl	8011348 <_fflush_r>
 800e0aa:	68e1      	ldr	r1, [r4, #12]
 800e0ac:	4b06      	ldr	r3, [pc, #24]	@ (800e0c8 <cleanup_stdio+0x3c>)
 800e0ae:	4299      	cmp	r1, r3
 800e0b0:	d004      	beq.n	800e0bc <cleanup_stdio+0x30>
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0b8:	f003 b946 	b.w	8011348 <_fflush_r>
 800e0bc:	bd10      	pop	{r4, pc}
 800e0be:	bf00      	nop
 800e0c0:	200019dc 	.word	0x200019dc
 800e0c4:	20001a44 	.word	0x20001a44
 800e0c8:	20001aac 	.word	0x20001aac

0800e0cc <global_stdio_init.part.0>:
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e0fc <global_stdio_init.part.0+0x30>)
 800e0d0:	4c0b      	ldr	r4, [pc, #44]	@ (800e100 <global_stdio_init.part.0+0x34>)
 800e0d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e104 <global_stdio_init.part.0+0x38>)
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	601a      	str	r2, [r3, #0]
 800e0d8:	2104      	movs	r1, #4
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f7ff ff94 	bl	800e008 <std>
 800e0e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	2109      	movs	r1, #9
 800e0e8:	f7ff ff8e 	bl	800e008 <std>
 800e0ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e0f0:	2202      	movs	r2, #2
 800e0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0f6:	2112      	movs	r1, #18
 800e0f8:	f7ff bf86 	b.w	800e008 <std>
 800e0fc:	20001b14 	.word	0x20001b14
 800e100:	200019dc 	.word	0x200019dc
 800e104:	0800e075 	.word	0x0800e075

0800e108 <__sfp_lock_acquire>:
 800e108:	4801      	ldr	r0, [pc, #4]	@ (800e110 <__sfp_lock_acquire+0x8>)
 800e10a:	f000 b99e 	b.w	800e44a <__retarget_lock_acquire_recursive>
 800e10e:	bf00      	nop
 800e110:	20001b1d 	.word	0x20001b1d

0800e114 <__sfp_lock_release>:
 800e114:	4801      	ldr	r0, [pc, #4]	@ (800e11c <__sfp_lock_release+0x8>)
 800e116:	f000 b999 	b.w	800e44c <__retarget_lock_release_recursive>
 800e11a:	bf00      	nop
 800e11c:	20001b1d 	.word	0x20001b1d

0800e120 <__sinit>:
 800e120:	b510      	push	{r4, lr}
 800e122:	4604      	mov	r4, r0
 800e124:	f7ff fff0 	bl	800e108 <__sfp_lock_acquire>
 800e128:	6a23      	ldr	r3, [r4, #32]
 800e12a:	b11b      	cbz	r3, 800e134 <__sinit+0x14>
 800e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e130:	f7ff bff0 	b.w	800e114 <__sfp_lock_release>
 800e134:	4b04      	ldr	r3, [pc, #16]	@ (800e148 <__sinit+0x28>)
 800e136:	6223      	str	r3, [r4, #32]
 800e138:	4b04      	ldr	r3, [pc, #16]	@ (800e14c <__sinit+0x2c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f5      	bne.n	800e12c <__sinit+0xc>
 800e140:	f7ff ffc4 	bl	800e0cc <global_stdio_init.part.0>
 800e144:	e7f2      	b.n	800e12c <__sinit+0xc>
 800e146:	bf00      	nop
 800e148:	0800e08d 	.word	0x0800e08d
 800e14c:	20001b14 	.word	0x20001b14

0800e150 <_fwalk_sglue>:
 800e150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e154:	4607      	mov	r7, r0
 800e156:	4688      	mov	r8, r1
 800e158:	4614      	mov	r4, r2
 800e15a:	2600      	movs	r6, #0
 800e15c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e160:	f1b9 0901 	subs.w	r9, r9, #1
 800e164:	d505      	bpl.n	800e172 <_fwalk_sglue+0x22>
 800e166:	6824      	ldr	r4, [r4, #0]
 800e168:	2c00      	cmp	r4, #0
 800e16a:	d1f7      	bne.n	800e15c <_fwalk_sglue+0xc>
 800e16c:	4630      	mov	r0, r6
 800e16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e172:	89ab      	ldrh	r3, [r5, #12]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d907      	bls.n	800e188 <_fwalk_sglue+0x38>
 800e178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e17c:	3301      	adds	r3, #1
 800e17e:	d003      	beq.n	800e188 <_fwalk_sglue+0x38>
 800e180:	4629      	mov	r1, r5
 800e182:	4638      	mov	r0, r7
 800e184:	47c0      	blx	r8
 800e186:	4306      	orrs	r6, r0
 800e188:	3568      	adds	r5, #104	@ 0x68
 800e18a:	e7e9      	b.n	800e160 <_fwalk_sglue+0x10>

0800e18c <siprintf>:
 800e18c:	b40e      	push	{r1, r2, r3}
 800e18e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e192:	b510      	push	{r4, lr}
 800e194:	2400      	movs	r4, #0
 800e196:	b09d      	sub	sp, #116	@ 0x74
 800e198:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e19a:	9002      	str	r0, [sp, #8]
 800e19c:	9006      	str	r0, [sp, #24]
 800e19e:	9107      	str	r1, [sp, #28]
 800e1a0:	9104      	str	r1, [sp, #16]
 800e1a2:	4809      	ldr	r0, [pc, #36]	@ (800e1c8 <siprintf+0x3c>)
 800e1a4:	4909      	ldr	r1, [pc, #36]	@ (800e1cc <siprintf+0x40>)
 800e1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1aa:	9105      	str	r1, [sp, #20]
 800e1ac:	6800      	ldr	r0, [r0, #0]
 800e1ae:	a902      	add	r1, sp, #8
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e1b4:	f002 fc32 	bl	8010a1c <_svfiprintf_r>
 800e1b8:	9b02      	ldr	r3, [sp, #8]
 800e1ba:	701c      	strb	r4, [r3, #0]
 800e1bc:	b01d      	add	sp, #116	@ 0x74
 800e1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c2:	b003      	add	sp, #12
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	200001a0 	.word	0x200001a0
 800e1cc:	ffff0208 	.word	0xffff0208

0800e1d0 <siscanf>:
 800e1d0:	b40e      	push	{r1, r2, r3}
 800e1d2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e1d6:	b570      	push	{r4, r5, r6, lr}
 800e1d8:	2500      	movs	r5, #0
 800e1da:	b09d      	sub	sp, #116	@ 0x74
 800e1dc:	ac21      	add	r4, sp, #132	@ 0x84
 800e1de:	f854 6b04 	ldr.w	r6, [r4], #4
 800e1e2:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e1e6:	951b      	str	r5, [sp, #108]	@ 0x6c
 800e1e8:	9002      	str	r0, [sp, #8]
 800e1ea:	9006      	str	r0, [sp, #24]
 800e1ec:	f7f1 ffb0 	bl	8000150 <strlen>
 800e1f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e220 <siscanf+0x50>)
 800e1f2:	9003      	str	r0, [sp, #12]
 800e1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e1fa:	9007      	str	r0, [sp, #28]
 800e1fc:	4809      	ldr	r0, [pc, #36]	@ (800e224 <siscanf+0x54>)
 800e1fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e202:	4632      	mov	r2, r6
 800e204:	4623      	mov	r3, r4
 800e206:	a902      	add	r1, sp, #8
 800e208:	6800      	ldr	r0, [r0, #0]
 800e20a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e20c:	9514      	str	r5, [sp, #80]	@ 0x50
 800e20e:	9401      	str	r4, [sp, #4]
 800e210:	f002 fd5a 	bl	8010cc8 <__ssvfiscanf_r>
 800e214:	b01d      	add	sp, #116	@ 0x74
 800e216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e21a:	b003      	add	sp, #12
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	0800e24b 	.word	0x0800e24b
 800e224:	200001a0 	.word	0x200001a0

0800e228 <__sread>:
 800e228:	b510      	push	{r4, lr}
 800e22a:	460c      	mov	r4, r1
 800e22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e230:	f000 f8bc 	bl	800e3ac <_read_r>
 800e234:	2800      	cmp	r0, #0
 800e236:	bfab      	itete	ge
 800e238:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e23a:	89a3      	ldrhlt	r3, [r4, #12]
 800e23c:	181b      	addge	r3, r3, r0
 800e23e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e242:	bfac      	ite	ge
 800e244:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e246:	81a3      	strhlt	r3, [r4, #12]
 800e248:	bd10      	pop	{r4, pc}

0800e24a <__seofread>:
 800e24a:	2000      	movs	r0, #0
 800e24c:	4770      	bx	lr

0800e24e <__swrite>:
 800e24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e252:	461f      	mov	r7, r3
 800e254:	898b      	ldrh	r3, [r1, #12]
 800e256:	4605      	mov	r5, r0
 800e258:	05db      	lsls	r3, r3, #23
 800e25a:	460c      	mov	r4, r1
 800e25c:	4616      	mov	r6, r2
 800e25e:	d505      	bpl.n	800e26c <__swrite+0x1e>
 800e260:	2302      	movs	r3, #2
 800e262:	2200      	movs	r2, #0
 800e264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e268:	f000 f88e 	bl	800e388 <_lseek_r>
 800e26c:	89a3      	ldrh	r3, [r4, #12]
 800e26e:	4632      	mov	r2, r6
 800e270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	4628      	mov	r0, r5
 800e278:	463b      	mov	r3, r7
 800e27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e282:	f000 b8a5 	b.w	800e3d0 <_write_r>

0800e286 <__sseek>:
 800e286:	b510      	push	{r4, lr}
 800e288:	460c      	mov	r4, r1
 800e28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e28e:	f000 f87b 	bl	800e388 <_lseek_r>
 800e292:	1c43      	adds	r3, r0, #1
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	bf15      	itete	ne
 800e298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e29a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e29e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e2a2:	81a3      	strheq	r3, [r4, #12]
 800e2a4:	bf18      	it	ne
 800e2a6:	81a3      	strhne	r3, [r4, #12]
 800e2a8:	bd10      	pop	{r4, pc}

0800e2aa <__sclose>:
 800e2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ae:	f000 b85b 	b.w	800e368 <_close_r>

0800e2b2 <_vsniprintf_r>:
 800e2b2:	b530      	push	{r4, r5, lr}
 800e2b4:	4614      	mov	r4, r2
 800e2b6:	2c00      	cmp	r4, #0
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	b09b      	sub	sp, #108	@ 0x6c
 800e2be:	da05      	bge.n	800e2cc <_vsniprintf_r+0x1a>
 800e2c0:	238b      	movs	r3, #139	@ 0x8b
 800e2c2:	6003      	str	r3, [r0, #0]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	b01b      	add	sp, #108	@ 0x6c
 800e2ca:	bd30      	pop	{r4, r5, pc}
 800e2cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e2d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e2d4:	f04f 0300 	mov.w	r3, #0
 800e2d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e2da:	bf0c      	ite	eq
 800e2dc:	4623      	moveq	r3, r4
 800e2de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e2e2:	9302      	str	r3, [sp, #8]
 800e2e4:	9305      	str	r3, [sp, #20]
 800e2e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e2ea:	9100      	str	r1, [sp, #0]
 800e2ec:	9104      	str	r1, [sp, #16]
 800e2ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e2f2:	4669      	mov	r1, sp
 800e2f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e2f6:	f002 fb91 	bl	8010a1c <_svfiprintf_r>
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	bfbc      	itt	lt
 800e2fe:	238b      	movlt	r3, #139	@ 0x8b
 800e300:	602b      	strlt	r3, [r5, #0]
 800e302:	2c00      	cmp	r4, #0
 800e304:	d0e0      	beq.n	800e2c8 <_vsniprintf_r+0x16>
 800e306:	2200      	movs	r2, #0
 800e308:	9b00      	ldr	r3, [sp, #0]
 800e30a:	701a      	strb	r2, [r3, #0]
 800e30c:	e7dc      	b.n	800e2c8 <_vsniprintf_r+0x16>
	...

0800e310 <vsniprintf>:
 800e310:	b507      	push	{r0, r1, r2, lr}
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	4613      	mov	r3, r2
 800e316:	460a      	mov	r2, r1
 800e318:	4601      	mov	r1, r0
 800e31a:	4803      	ldr	r0, [pc, #12]	@ (800e328 <vsniprintf+0x18>)
 800e31c:	6800      	ldr	r0, [r0, #0]
 800e31e:	f7ff ffc8 	bl	800e2b2 <_vsniprintf_r>
 800e322:	b003      	add	sp, #12
 800e324:	f85d fb04 	ldr.w	pc, [sp], #4
 800e328:	200001a0 	.word	0x200001a0

0800e32c <memset>:
 800e32c:	4603      	mov	r3, r0
 800e32e:	4402      	add	r2, r0
 800e330:	4293      	cmp	r3, r2
 800e332:	d100      	bne.n	800e336 <memset+0xa>
 800e334:	4770      	bx	lr
 800e336:	f803 1b01 	strb.w	r1, [r3], #1
 800e33a:	e7f9      	b.n	800e330 <memset+0x4>

0800e33c <strncmp>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	b16a      	cbz	r2, 800e35c <strncmp+0x20>
 800e340:	3901      	subs	r1, #1
 800e342:	1884      	adds	r4, r0, r2
 800e344:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e348:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d103      	bne.n	800e358 <strncmp+0x1c>
 800e350:	42a0      	cmp	r0, r4
 800e352:	d001      	beq.n	800e358 <strncmp+0x1c>
 800e354:	2a00      	cmp	r2, #0
 800e356:	d1f5      	bne.n	800e344 <strncmp+0x8>
 800e358:	1ad0      	subs	r0, r2, r3
 800e35a:	bd10      	pop	{r4, pc}
 800e35c:	4610      	mov	r0, r2
 800e35e:	e7fc      	b.n	800e35a <strncmp+0x1e>

0800e360 <_localeconv_r>:
 800e360:	4800      	ldr	r0, [pc, #0]	@ (800e364 <_localeconv_r+0x4>)
 800e362:	4770      	bx	lr
 800e364:	200002e0 	.word	0x200002e0

0800e368 <_close_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	2300      	movs	r3, #0
 800e36c:	4d05      	ldr	r5, [pc, #20]	@ (800e384 <_close_r+0x1c>)
 800e36e:	4604      	mov	r4, r0
 800e370:	4608      	mov	r0, r1
 800e372:	602b      	str	r3, [r5, #0]
 800e374:	f7f5 fabd 	bl	80038f2 <_close>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	d102      	bne.n	800e382 <_close_r+0x1a>
 800e37c:	682b      	ldr	r3, [r5, #0]
 800e37e:	b103      	cbz	r3, 800e382 <_close_r+0x1a>
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	bd38      	pop	{r3, r4, r5, pc}
 800e384:	20001b18 	.word	0x20001b18

0800e388 <_lseek_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4604      	mov	r4, r0
 800e38c:	4608      	mov	r0, r1
 800e38e:	4611      	mov	r1, r2
 800e390:	2200      	movs	r2, #0
 800e392:	4d05      	ldr	r5, [pc, #20]	@ (800e3a8 <_lseek_r+0x20>)
 800e394:	602a      	str	r2, [r5, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	f7f5 facf 	bl	800393a <_lseek>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d102      	bne.n	800e3a6 <_lseek_r+0x1e>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	b103      	cbz	r3, 800e3a6 <_lseek_r+0x1e>
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	20001b18 	.word	0x20001b18

0800e3ac <_read_r>:
 800e3ac:	b538      	push	{r3, r4, r5, lr}
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	4608      	mov	r0, r1
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	4d05      	ldr	r5, [pc, #20]	@ (800e3cc <_read_r+0x20>)
 800e3b8:	602a      	str	r2, [r5, #0]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	f7f5 fa60 	bl	8003880 <_read>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	d102      	bne.n	800e3ca <_read_r+0x1e>
 800e3c4:	682b      	ldr	r3, [r5, #0]
 800e3c6:	b103      	cbz	r3, 800e3ca <_read_r+0x1e>
 800e3c8:	6023      	str	r3, [r4, #0]
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}
 800e3cc:	20001b18 	.word	0x20001b18

0800e3d0 <_write_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4d05      	ldr	r5, [pc, #20]	@ (800e3f0 <_write_r+0x20>)
 800e3dc:	602a      	str	r2, [r5, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f7f5 fa6b 	bl	80038ba <_write>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d102      	bne.n	800e3ee <_write_r+0x1e>
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	b103      	cbz	r3, 800e3ee <_write_r+0x1e>
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	20001b18 	.word	0x20001b18

0800e3f4 <__errno>:
 800e3f4:	4b01      	ldr	r3, [pc, #4]	@ (800e3fc <__errno+0x8>)
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	200001a0 	.word	0x200001a0

0800e400 <__libc_init_array>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	2600      	movs	r6, #0
 800e404:	4d0c      	ldr	r5, [pc, #48]	@ (800e438 <__libc_init_array+0x38>)
 800e406:	4c0d      	ldr	r4, [pc, #52]	@ (800e43c <__libc_init_array+0x3c>)
 800e408:	1b64      	subs	r4, r4, r5
 800e40a:	10a4      	asrs	r4, r4, #2
 800e40c:	42a6      	cmp	r6, r4
 800e40e:	d109      	bne.n	800e424 <__libc_init_array+0x24>
 800e410:	f003 ff58 	bl	80122c4 <_init>
 800e414:	2600      	movs	r6, #0
 800e416:	4d0a      	ldr	r5, [pc, #40]	@ (800e440 <__libc_init_array+0x40>)
 800e418:	4c0a      	ldr	r4, [pc, #40]	@ (800e444 <__libc_init_array+0x44>)
 800e41a:	1b64      	subs	r4, r4, r5
 800e41c:	10a4      	asrs	r4, r4, #2
 800e41e:	42a6      	cmp	r6, r4
 800e420:	d105      	bne.n	800e42e <__libc_init_array+0x2e>
 800e422:	bd70      	pop	{r4, r5, r6, pc}
 800e424:	f855 3b04 	ldr.w	r3, [r5], #4
 800e428:	4798      	blx	r3
 800e42a:	3601      	adds	r6, #1
 800e42c:	e7ee      	b.n	800e40c <__libc_init_array+0xc>
 800e42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e432:	4798      	blx	r3
 800e434:	3601      	adds	r6, #1
 800e436:	e7f2      	b.n	800e41e <__libc_init_array+0x1e>
 800e438:	08012e84 	.word	0x08012e84
 800e43c:	08012e84 	.word	0x08012e84
 800e440:	08012e84 	.word	0x08012e84
 800e444:	08012e88 	.word	0x08012e88

0800e448 <__retarget_lock_init_recursive>:
 800e448:	4770      	bx	lr

0800e44a <__retarget_lock_acquire_recursive>:
 800e44a:	4770      	bx	lr

0800e44c <__retarget_lock_release_recursive>:
 800e44c:	4770      	bx	lr

0800e44e <memchr>:
 800e44e:	4603      	mov	r3, r0
 800e450:	b510      	push	{r4, lr}
 800e452:	b2c9      	uxtb	r1, r1
 800e454:	4402      	add	r2, r0
 800e456:	4293      	cmp	r3, r2
 800e458:	4618      	mov	r0, r3
 800e45a:	d101      	bne.n	800e460 <memchr+0x12>
 800e45c:	2000      	movs	r0, #0
 800e45e:	e003      	b.n	800e468 <memchr+0x1a>
 800e460:	7804      	ldrb	r4, [r0, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	428c      	cmp	r4, r1
 800e466:	d1f6      	bne.n	800e456 <memchr+0x8>
 800e468:	bd10      	pop	{r4, pc}
	...

0800e46c <nanf>:
 800e46c:	4800      	ldr	r0, [pc, #0]	@ (800e470 <nanf+0x4>)
 800e46e:	4770      	bx	lr
 800e470:	7fc00000 	.word	0x7fc00000

0800e474 <quorem>:
 800e474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e478:	6903      	ldr	r3, [r0, #16]
 800e47a:	690c      	ldr	r4, [r1, #16]
 800e47c:	4607      	mov	r7, r0
 800e47e:	42a3      	cmp	r3, r4
 800e480:	db7e      	blt.n	800e580 <quorem+0x10c>
 800e482:	3c01      	subs	r4, #1
 800e484:	00a3      	lsls	r3, r4, #2
 800e486:	f100 0514 	add.w	r5, r0, #20
 800e48a:	f101 0814 	add.w	r8, r1, #20
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e49a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4aa:	d32e      	bcc.n	800e50a <quorem+0x96>
 800e4ac:	f04f 0a00 	mov.w	sl, #0
 800e4b0:	46c4      	mov	ip, r8
 800e4b2:	46ae      	mov	lr, r5
 800e4b4:	46d3      	mov	fp, sl
 800e4b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4ba:	b298      	uxth	r0, r3
 800e4bc:	fb06 a000 	mla	r0, r6, r0, sl
 800e4c0:	0c1b      	lsrs	r3, r3, #16
 800e4c2:	0c02      	lsrs	r2, r0, #16
 800e4c4:	fb06 2303 	mla	r3, r6, r3, r2
 800e4c8:	f8de 2000 	ldr.w	r2, [lr]
 800e4cc:	b280      	uxth	r0, r0
 800e4ce:	b292      	uxth	r2, r2
 800e4d0:	1a12      	subs	r2, r2, r0
 800e4d2:	445a      	add	r2, fp
 800e4d4:	f8de 0000 	ldr.w	r0, [lr]
 800e4d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4e6:	b292      	uxth	r2, r2
 800e4e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4ec:	45e1      	cmp	r9, ip
 800e4ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4f2:	f84e 2b04 	str.w	r2, [lr], #4
 800e4f6:	d2de      	bcs.n	800e4b6 <quorem+0x42>
 800e4f8:	9b00      	ldr	r3, [sp, #0]
 800e4fa:	58eb      	ldr	r3, [r5, r3]
 800e4fc:	b92b      	cbnz	r3, 800e50a <quorem+0x96>
 800e4fe:	9b01      	ldr	r3, [sp, #4]
 800e500:	3b04      	subs	r3, #4
 800e502:	429d      	cmp	r5, r3
 800e504:	461a      	mov	r2, r3
 800e506:	d32f      	bcc.n	800e568 <quorem+0xf4>
 800e508:	613c      	str	r4, [r7, #16]
 800e50a:	4638      	mov	r0, r7
 800e50c:	f001 f9ca 	bl	800f8a4 <__mcmp>
 800e510:	2800      	cmp	r0, #0
 800e512:	db25      	blt.n	800e560 <quorem+0xec>
 800e514:	4629      	mov	r1, r5
 800e516:	2000      	movs	r0, #0
 800e518:	f858 2b04 	ldr.w	r2, [r8], #4
 800e51c:	f8d1 c000 	ldr.w	ip, [r1]
 800e520:	fa1f fe82 	uxth.w	lr, r2
 800e524:	fa1f f38c 	uxth.w	r3, ip
 800e528:	eba3 030e 	sub.w	r3, r3, lr
 800e52c:	4403      	add	r3, r0
 800e52e:	0c12      	lsrs	r2, r2, #16
 800e530:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e534:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e538:	b29b      	uxth	r3, r3
 800e53a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e53e:	45c1      	cmp	r9, r8
 800e540:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e544:	f841 3b04 	str.w	r3, [r1], #4
 800e548:	d2e6      	bcs.n	800e518 <quorem+0xa4>
 800e54a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e54e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e552:	b922      	cbnz	r2, 800e55e <quorem+0xea>
 800e554:	3b04      	subs	r3, #4
 800e556:	429d      	cmp	r5, r3
 800e558:	461a      	mov	r2, r3
 800e55a:	d30b      	bcc.n	800e574 <quorem+0x100>
 800e55c:	613c      	str	r4, [r7, #16]
 800e55e:	3601      	adds	r6, #1
 800e560:	4630      	mov	r0, r6
 800e562:	b003      	add	sp, #12
 800e564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e568:	6812      	ldr	r2, [r2, #0]
 800e56a:	3b04      	subs	r3, #4
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	d1cb      	bne.n	800e508 <quorem+0x94>
 800e570:	3c01      	subs	r4, #1
 800e572:	e7c6      	b.n	800e502 <quorem+0x8e>
 800e574:	6812      	ldr	r2, [r2, #0]
 800e576:	3b04      	subs	r3, #4
 800e578:	2a00      	cmp	r2, #0
 800e57a:	d1ef      	bne.n	800e55c <quorem+0xe8>
 800e57c:	3c01      	subs	r4, #1
 800e57e:	e7ea      	b.n	800e556 <quorem+0xe2>
 800e580:	2000      	movs	r0, #0
 800e582:	e7ee      	b.n	800e562 <quorem+0xee>
 800e584:	0000      	movs	r0, r0
	...

0800e588 <_dtoa_r>:
 800e588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58c:	4614      	mov	r4, r2
 800e58e:	461d      	mov	r5, r3
 800e590:	69c7      	ldr	r7, [r0, #28]
 800e592:	b097      	sub	sp, #92	@ 0x5c
 800e594:	4681      	mov	r9, r0
 800e596:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e59a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e59c:	b97f      	cbnz	r7, 800e5be <_dtoa_r+0x36>
 800e59e:	2010      	movs	r0, #16
 800e5a0:	f000 fe0e 	bl	800f1c0 <malloc>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	f8c9 001c 	str.w	r0, [r9, #28]
 800e5aa:	b920      	cbnz	r0, 800e5b6 <_dtoa_r+0x2e>
 800e5ac:	21ef      	movs	r1, #239	@ 0xef
 800e5ae:	4bac      	ldr	r3, [pc, #688]	@ (800e860 <_dtoa_r+0x2d8>)
 800e5b0:	48ac      	ldr	r0, [pc, #688]	@ (800e864 <_dtoa_r+0x2dc>)
 800e5b2:	f002 ffa1 	bl	80114f8 <__assert_func>
 800e5b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5ba:	6007      	str	r7, [r0, #0]
 800e5bc:	60c7      	str	r7, [r0, #12]
 800e5be:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e5c2:	6819      	ldr	r1, [r3, #0]
 800e5c4:	b159      	cbz	r1, 800e5de <_dtoa_r+0x56>
 800e5c6:	685a      	ldr	r2, [r3, #4]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	4093      	lsls	r3, r2
 800e5cc:	604a      	str	r2, [r1, #4]
 800e5ce:	608b      	str	r3, [r1, #8]
 800e5d0:	4648      	mov	r0, r9
 800e5d2:	f000 feeb 	bl	800f3ac <_Bfree>
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	1e2b      	subs	r3, r5, #0
 800e5e0:	bfaf      	iteee	ge
 800e5e2:	2300      	movge	r3, #0
 800e5e4:	2201      	movlt	r2, #1
 800e5e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5ea:	9307      	strlt	r3, [sp, #28]
 800e5ec:	bfa8      	it	ge
 800e5ee:	6033      	strge	r3, [r6, #0]
 800e5f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e5f4:	4b9c      	ldr	r3, [pc, #624]	@ (800e868 <_dtoa_r+0x2e0>)
 800e5f6:	bfb8      	it	lt
 800e5f8:	6032      	strlt	r2, [r6, #0]
 800e5fa:	ea33 0308 	bics.w	r3, r3, r8
 800e5fe:	d112      	bne.n	800e626 <_dtoa_r+0x9e>
 800e600:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e604:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e60c:	4323      	orrs	r3, r4
 800e60e:	f000 855e 	beq.w	800f0ce <_dtoa_r+0xb46>
 800e612:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e614:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e86c <_dtoa_r+0x2e4>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f000 8560 	beq.w	800f0de <_dtoa_r+0xb56>
 800e61e:	f10a 0303 	add.w	r3, sl, #3
 800e622:	f000 bd5a 	b.w	800f0da <_dtoa_r+0xb52>
 800e626:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e62a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e62e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e632:	2200      	movs	r2, #0
 800e634:	2300      	movs	r3, #0
 800e636:	f7f2 f9b7 	bl	80009a8 <__aeabi_dcmpeq>
 800e63a:	4607      	mov	r7, r0
 800e63c:	b158      	cbz	r0, 800e656 <_dtoa_r+0xce>
 800e63e:	2301      	movs	r3, #1
 800e640:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e646:	b113      	cbz	r3, 800e64e <_dtoa_r+0xc6>
 800e648:	4b89      	ldr	r3, [pc, #548]	@ (800e870 <_dtoa_r+0x2e8>)
 800e64a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e874 <_dtoa_r+0x2ec>
 800e652:	f000 bd44 	b.w	800f0de <_dtoa_r+0xb56>
 800e656:	ab14      	add	r3, sp, #80	@ 0x50
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	ab15      	add	r3, sp, #84	@ 0x54
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	4648      	mov	r0, r9
 800e660:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e664:	f001 fa36 	bl	800fad4 <__d2b>
 800e668:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e66c:	9003      	str	r0, [sp, #12]
 800e66e:	2e00      	cmp	r6, #0
 800e670:	d078      	beq.n	800e764 <_dtoa_r+0x1dc>
 800e672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e678:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e680:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e684:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e688:	9712      	str	r7, [sp, #72]	@ 0x48
 800e68a:	4619      	mov	r1, r3
 800e68c:	2200      	movs	r2, #0
 800e68e:	4b7a      	ldr	r3, [pc, #488]	@ (800e878 <_dtoa_r+0x2f0>)
 800e690:	f7f1 fd6a 	bl	8000168 <__aeabi_dsub>
 800e694:	a36c      	add	r3, pc, #432	@ (adr r3, 800e848 <_dtoa_r+0x2c0>)
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f7f1 ff1d 	bl	80004d8 <__aeabi_dmul>
 800e69e:	a36c      	add	r3, pc, #432	@ (adr r3, 800e850 <_dtoa_r+0x2c8>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f7f1 fd62 	bl	800016c <__adddf3>
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	460d      	mov	r5, r1
 800e6ae:	f7f1 fea9 	bl	8000404 <__aeabi_i2d>
 800e6b2:	a369      	add	r3, pc, #420	@ (adr r3, 800e858 <_dtoa_r+0x2d0>)
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f7f1 ff0e 	bl	80004d8 <__aeabi_dmul>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	f7f1 fd52 	bl	800016c <__adddf3>
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	f7f2 f9b4 	bl	8000a38 <__aeabi_d2iz>
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	4607      	mov	r7, r0
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	f7f2 f96f 	bl	80009bc <__aeabi_dcmplt>
 800e6de:	b140      	cbz	r0, 800e6f2 <_dtoa_r+0x16a>
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	f7f1 fe8f 	bl	8000404 <__aeabi_i2d>
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	462b      	mov	r3, r5
 800e6ea:	f7f2 f95d 	bl	80009a8 <__aeabi_dcmpeq>
 800e6ee:	b900      	cbnz	r0, 800e6f2 <_dtoa_r+0x16a>
 800e6f0:	3f01      	subs	r7, #1
 800e6f2:	2f16      	cmp	r7, #22
 800e6f4:	d854      	bhi.n	800e7a0 <_dtoa_r+0x218>
 800e6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6fa:	4b60      	ldr	r3, [pc, #384]	@ (800e87c <_dtoa_r+0x2f4>)
 800e6fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e704:	f7f2 f95a 	bl	80009bc <__aeabi_dcmplt>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d04b      	beq.n	800e7a4 <_dtoa_r+0x21c>
 800e70c:	2300      	movs	r3, #0
 800e70e:	3f01      	subs	r7, #1
 800e710:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e712:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e714:	1b9b      	subs	r3, r3, r6
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	bf49      	itett	mi
 800e71a:	f1c3 0301 	rsbmi	r3, r3, #1
 800e71e:	2300      	movpl	r3, #0
 800e720:	9304      	strmi	r3, [sp, #16]
 800e722:	2300      	movmi	r3, #0
 800e724:	9209      	str	r2, [sp, #36]	@ 0x24
 800e726:	bf54      	ite	pl
 800e728:	9304      	strpl	r3, [sp, #16]
 800e72a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e72c:	2f00      	cmp	r7, #0
 800e72e:	db3b      	blt.n	800e7a8 <_dtoa_r+0x220>
 800e730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e732:	970e      	str	r7, [sp, #56]	@ 0x38
 800e734:	443b      	add	r3, r7
 800e736:	9309      	str	r3, [sp, #36]	@ 0x24
 800e738:	2300      	movs	r3, #0
 800e73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e73c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e73e:	2b09      	cmp	r3, #9
 800e740:	d865      	bhi.n	800e80e <_dtoa_r+0x286>
 800e742:	2b05      	cmp	r3, #5
 800e744:	bfc4      	itt	gt
 800e746:	3b04      	subgt	r3, #4
 800e748:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e74a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e74c:	bfc8      	it	gt
 800e74e:	2400      	movgt	r4, #0
 800e750:	f1a3 0302 	sub.w	r3, r3, #2
 800e754:	bfd8      	it	le
 800e756:	2401      	movle	r4, #1
 800e758:	2b03      	cmp	r3, #3
 800e75a:	d864      	bhi.n	800e826 <_dtoa_r+0x29e>
 800e75c:	e8df f003 	tbb	[pc, r3]
 800e760:	2c385553 	.word	0x2c385553
 800e764:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e768:	441e      	add	r6, r3
 800e76a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e76e:	2b20      	cmp	r3, #32
 800e770:	bfc1      	itttt	gt
 800e772:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e776:	fa08 f803 	lslgt.w	r8, r8, r3
 800e77a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e77e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e782:	bfd6      	itet	le
 800e784:	f1c3 0320 	rsble	r3, r3, #32
 800e788:	ea48 0003 	orrgt.w	r0, r8, r3
 800e78c:	fa04 f003 	lslle.w	r0, r4, r3
 800e790:	f7f1 fe28 	bl	80003e4 <__aeabi_ui2d>
 800e794:	2201      	movs	r2, #1
 800e796:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e79a:	3e01      	subs	r6, #1
 800e79c:	9212      	str	r2, [sp, #72]	@ 0x48
 800e79e:	e774      	b.n	800e68a <_dtoa_r+0x102>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e7b5      	b.n	800e710 <_dtoa_r+0x188>
 800e7a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e7a6:	e7b4      	b.n	800e712 <_dtoa_r+0x18a>
 800e7a8:	9b04      	ldr	r3, [sp, #16]
 800e7aa:	1bdb      	subs	r3, r3, r7
 800e7ac:	9304      	str	r3, [sp, #16]
 800e7ae:	427b      	negs	r3, r7
 800e7b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e7b6:	e7c1      	b.n	800e73c <_dtoa_r+0x1b4>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e7be:	eb07 0b03 	add.w	fp, r7, r3
 800e7c2:	f10b 0301 	add.w	r3, fp, #1
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	9308      	str	r3, [sp, #32]
 800e7ca:	bfb8      	it	lt
 800e7cc:	2301      	movlt	r3, #1
 800e7ce:	e006      	b.n	800e7de <_dtoa_r+0x256>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	dd28      	ble.n	800e82c <_dtoa_r+0x2a4>
 800e7da:	469b      	mov	fp, r3
 800e7dc:	9308      	str	r3, [sp, #32]
 800e7de:	2100      	movs	r1, #0
 800e7e0:	2204      	movs	r2, #4
 800e7e2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e7e6:	f102 0514 	add.w	r5, r2, #20
 800e7ea:	429d      	cmp	r5, r3
 800e7ec:	d926      	bls.n	800e83c <_dtoa_r+0x2b4>
 800e7ee:	6041      	str	r1, [r0, #4]
 800e7f0:	4648      	mov	r0, r9
 800e7f2:	f000 fd9b 	bl	800f32c <_Balloc>
 800e7f6:	4682      	mov	sl, r0
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d143      	bne.n	800e884 <_dtoa_r+0x2fc>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800e802:	4b1f      	ldr	r3, [pc, #124]	@ (800e880 <_dtoa_r+0x2f8>)
 800e804:	e6d4      	b.n	800e5b0 <_dtoa_r+0x28>
 800e806:	2300      	movs	r3, #0
 800e808:	e7e3      	b.n	800e7d2 <_dtoa_r+0x24a>
 800e80a:	2300      	movs	r3, #0
 800e80c:	e7d5      	b.n	800e7ba <_dtoa_r+0x232>
 800e80e:	2401      	movs	r4, #1
 800e810:	2300      	movs	r3, #0
 800e812:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e814:	9320      	str	r3, [sp, #128]	@ 0x80
 800e816:	f04f 3bff 	mov.w	fp, #4294967295
 800e81a:	2200      	movs	r2, #0
 800e81c:	2312      	movs	r3, #18
 800e81e:	f8cd b020 	str.w	fp, [sp, #32]
 800e822:	9221      	str	r2, [sp, #132]	@ 0x84
 800e824:	e7db      	b.n	800e7de <_dtoa_r+0x256>
 800e826:	2301      	movs	r3, #1
 800e828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e82a:	e7f4      	b.n	800e816 <_dtoa_r+0x28e>
 800e82c:	f04f 0b01 	mov.w	fp, #1
 800e830:	465b      	mov	r3, fp
 800e832:	f8cd b020 	str.w	fp, [sp, #32]
 800e836:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800e83a:	e7d0      	b.n	800e7de <_dtoa_r+0x256>
 800e83c:	3101      	adds	r1, #1
 800e83e:	0052      	lsls	r2, r2, #1
 800e840:	e7d1      	b.n	800e7e6 <_dtoa_r+0x25e>
 800e842:	bf00      	nop
 800e844:	f3af 8000 	nop.w
 800e848:	636f4361 	.word	0x636f4361
 800e84c:	3fd287a7 	.word	0x3fd287a7
 800e850:	8b60c8b3 	.word	0x8b60c8b3
 800e854:	3fc68a28 	.word	0x3fc68a28
 800e858:	509f79fb 	.word	0x509f79fb
 800e85c:	3fd34413 	.word	0x3fd34413
 800e860:	08012a7a 	.word	0x08012a7a
 800e864:	08012a91 	.word	0x08012a91
 800e868:	7ff00000 	.word	0x7ff00000
 800e86c:	08012a76 	.word	0x08012a76
 800e870:	08012b7d 	.word	0x08012b7d
 800e874:	08012b7c 	.word	0x08012b7c
 800e878:	3ff80000 	.word	0x3ff80000
 800e87c:	08012c60 	.word	0x08012c60
 800e880:	08012ae9 	.word	0x08012ae9
 800e884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e888:	6018      	str	r0, [r3, #0]
 800e88a:	9b08      	ldr	r3, [sp, #32]
 800e88c:	2b0e      	cmp	r3, #14
 800e88e:	f200 80a1 	bhi.w	800e9d4 <_dtoa_r+0x44c>
 800e892:	2c00      	cmp	r4, #0
 800e894:	f000 809e 	beq.w	800e9d4 <_dtoa_r+0x44c>
 800e898:	2f00      	cmp	r7, #0
 800e89a:	dd33      	ble.n	800e904 <_dtoa_r+0x37c>
 800e89c:	4b9c      	ldr	r3, [pc, #624]	@ (800eb10 <_dtoa_r+0x588>)
 800e89e:	f007 020f 	and.w	r2, r7, #15
 800e8a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8a6:	05f8      	lsls	r0, r7, #23
 800e8a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e8ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800e8b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8b4:	d516      	bpl.n	800e8e4 <_dtoa_r+0x35c>
 800e8b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8ba:	4b96      	ldr	r3, [pc, #600]	@ (800eb14 <_dtoa_r+0x58c>)
 800e8bc:	2603      	movs	r6, #3
 800e8be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8c2:	f7f1 ff33 	bl	800072c <__aeabi_ddiv>
 800e8c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8ca:	f004 040f 	and.w	r4, r4, #15
 800e8ce:	4d91      	ldr	r5, [pc, #580]	@ (800eb14 <_dtoa_r+0x58c>)
 800e8d0:	b954      	cbnz	r4, 800e8e8 <_dtoa_r+0x360>
 800e8d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8da:	f7f1 ff27 	bl	800072c <__aeabi_ddiv>
 800e8de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8e2:	e028      	b.n	800e936 <_dtoa_r+0x3ae>
 800e8e4:	2602      	movs	r6, #2
 800e8e6:	e7f2      	b.n	800e8ce <_dtoa_r+0x346>
 800e8e8:	07e1      	lsls	r1, r4, #31
 800e8ea:	d508      	bpl.n	800e8fe <_dtoa_r+0x376>
 800e8ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e8f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8f4:	f7f1 fdf0 	bl	80004d8 <__aeabi_dmul>
 800e8f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e8fc:	3601      	adds	r6, #1
 800e8fe:	1064      	asrs	r4, r4, #1
 800e900:	3508      	adds	r5, #8
 800e902:	e7e5      	b.n	800e8d0 <_dtoa_r+0x348>
 800e904:	f000 80af 	beq.w	800ea66 <_dtoa_r+0x4de>
 800e908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e90c:	427c      	negs	r4, r7
 800e90e:	4b80      	ldr	r3, [pc, #512]	@ (800eb10 <_dtoa_r+0x588>)
 800e910:	f004 020f 	and.w	r2, r4, #15
 800e914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91c:	f7f1 fddc 	bl	80004d8 <__aeabi_dmul>
 800e920:	2602      	movs	r6, #2
 800e922:	2300      	movs	r3, #0
 800e924:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e928:	4d7a      	ldr	r5, [pc, #488]	@ (800eb14 <_dtoa_r+0x58c>)
 800e92a:	1124      	asrs	r4, r4, #4
 800e92c:	2c00      	cmp	r4, #0
 800e92e:	f040 808f 	bne.w	800ea50 <_dtoa_r+0x4c8>
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1d3      	bne.n	800e8de <_dtoa_r+0x356>
 800e936:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e93a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 8094 	beq.w	800ea6a <_dtoa_r+0x4e2>
 800e942:	2200      	movs	r2, #0
 800e944:	4620      	mov	r0, r4
 800e946:	4629      	mov	r1, r5
 800e948:	4b73      	ldr	r3, [pc, #460]	@ (800eb18 <_dtoa_r+0x590>)
 800e94a:	f7f2 f837 	bl	80009bc <__aeabi_dcmplt>
 800e94e:	2800      	cmp	r0, #0
 800e950:	f000 808b 	beq.w	800ea6a <_dtoa_r+0x4e2>
 800e954:	9b08      	ldr	r3, [sp, #32]
 800e956:	2b00      	cmp	r3, #0
 800e958:	f000 8087 	beq.w	800ea6a <_dtoa_r+0x4e2>
 800e95c:	f1bb 0f00 	cmp.w	fp, #0
 800e960:	dd34      	ble.n	800e9cc <_dtoa_r+0x444>
 800e962:	4620      	mov	r0, r4
 800e964:	2200      	movs	r2, #0
 800e966:	4629      	mov	r1, r5
 800e968:	4b6c      	ldr	r3, [pc, #432]	@ (800eb1c <_dtoa_r+0x594>)
 800e96a:	f7f1 fdb5 	bl	80004d8 <__aeabi_dmul>
 800e96e:	465c      	mov	r4, fp
 800e970:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e974:	f107 38ff 	add.w	r8, r7, #4294967295
 800e978:	3601      	adds	r6, #1
 800e97a:	4630      	mov	r0, r6
 800e97c:	f7f1 fd42 	bl	8000404 <__aeabi_i2d>
 800e980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e984:	f7f1 fda8 	bl	80004d8 <__aeabi_dmul>
 800e988:	2200      	movs	r2, #0
 800e98a:	4b65      	ldr	r3, [pc, #404]	@ (800eb20 <_dtoa_r+0x598>)
 800e98c:	f7f1 fbee 	bl	800016c <__adddf3>
 800e990:	4605      	mov	r5, r0
 800e992:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e996:	2c00      	cmp	r4, #0
 800e998:	d16a      	bne.n	800ea70 <_dtoa_r+0x4e8>
 800e99a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4b60      	ldr	r3, [pc, #384]	@ (800eb24 <_dtoa_r+0x59c>)
 800e9a2:	f7f1 fbe1 	bl	8000168 <__aeabi_dsub>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9ae:	462a      	mov	r2, r5
 800e9b0:	4633      	mov	r3, r6
 800e9b2:	f7f2 f821 	bl	80009f8 <__aeabi_dcmpgt>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f040 8298 	bne.w	800eeec <_dtoa_r+0x964>
 800e9bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9c6:	f7f1 fff9 	bl	80009bc <__aeabi_dcmplt>
 800e9ca:	bb38      	cbnz	r0, 800ea1c <_dtoa_r+0x494>
 800e9cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e9d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f2c0 8157 	blt.w	800ec8a <_dtoa_r+0x702>
 800e9dc:	2f0e      	cmp	r7, #14
 800e9de:	f300 8154 	bgt.w	800ec8a <_dtoa_r+0x702>
 800e9e2:	4b4b      	ldr	r3, [pc, #300]	@ (800eb10 <_dtoa_r+0x588>)
 800e9e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e9ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e9f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f280 80e5 	bge.w	800ebc2 <_dtoa_r+0x63a>
 800e9f8:	9b08      	ldr	r3, [sp, #32]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f300 80e1 	bgt.w	800ebc2 <_dtoa_r+0x63a>
 800ea00:	d10c      	bne.n	800ea1c <_dtoa_r+0x494>
 800ea02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea06:	2200      	movs	r2, #0
 800ea08:	4b46      	ldr	r3, [pc, #280]	@ (800eb24 <_dtoa_r+0x59c>)
 800ea0a:	f7f1 fd65 	bl	80004d8 <__aeabi_dmul>
 800ea0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea12:	f7f1 ffe7 	bl	80009e4 <__aeabi_dcmpge>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f000 8266 	beq.w	800eee8 <_dtoa_r+0x960>
 800ea1c:	2400      	movs	r4, #0
 800ea1e:	4625      	mov	r5, r4
 800ea20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea22:	4656      	mov	r6, sl
 800ea24:	ea6f 0803 	mvn.w	r8, r3
 800ea28:	2700      	movs	r7, #0
 800ea2a:	4621      	mov	r1, r4
 800ea2c:	4648      	mov	r0, r9
 800ea2e:	f000 fcbd 	bl	800f3ac <_Bfree>
 800ea32:	2d00      	cmp	r5, #0
 800ea34:	f000 80bd 	beq.w	800ebb2 <_dtoa_r+0x62a>
 800ea38:	b12f      	cbz	r7, 800ea46 <_dtoa_r+0x4be>
 800ea3a:	42af      	cmp	r7, r5
 800ea3c:	d003      	beq.n	800ea46 <_dtoa_r+0x4be>
 800ea3e:	4639      	mov	r1, r7
 800ea40:	4648      	mov	r0, r9
 800ea42:	f000 fcb3 	bl	800f3ac <_Bfree>
 800ea46:	4629      	mov	r1, r5
 800ea48:	4648      	mov	r0, r9
 800ea4a:	f000 fcaf 	bl	800f3ac <_Bfree>
 800ea4e:	e0b0      	b.n	800ebb2 <_dtoa_r+0x62a>
 800ea50:	07e2      	lsls	r2, r4, #31
 800ea52:	d505      	bpl.n	800ea60 <_dtoa_r+0x4d8>
 800ea54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea58:	f7f1 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	3601      	adds	r6, #1
 800ea60:	1064      	asrs	r4, r4, #1
 800ea62:	3508      	adds	r5, #8
 800ea64:	e762      	b.n	800e92c <_dtoa_r+0x3a4>
 800ea66:	2602      	movs	r6, #2
 800ea68:	e765      	b.n	800e936 <_dtoa_r+0x3ae>
 800ea6a:	46b8      	mov	r8, r7
 800ea6c:	9c08      	ldr	r4, [sp, #32]
 800ea6e:	e784      	b.n	800e97a <_dtoa_r+0x3f2>
 800ea70:	4b27      	ldr	r3, [pc, #156]	@ (800eb10 <_dtoa_r+0x588>)
 800ea72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea7c:	4454      	add	r4, sl
 800ea7e:	2900      	cmp	r1, #0
 800ea80:	d054      	beq.n	800eb2c <_dtoa_r+0x5a4>
 800ea82:	2000      	movs	r0, #0
 800ea84:	4928      	ldr	r1, [pc, #160]	@ (800eb28 <_dtoa_r+0x5a0>)
 800ea86:	f7f1 fe51 	bl	800072c <__aeabi_ddiv>
 800ea8a:	4633      	mov	r3, r6
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	f7f1 fb6b 	bl	8000168 <__aeabi_dsub>
 800ea92:	4656      	mov	r6, sl
 800ea94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea9c:	f7f1 ffcc 	bl	8000a38 <__aeabi_d2iz>
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	f7f1 fcaf 	bl	8000404 <__aeabi_i2d>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaae:	f7f1 fb5b 	bl	8000168 <__aeabi_dsub>
 800eab2:	4602      	mov	r2, r0
 800eab4:	460b      	mov	r3, r1
 800eab6:	3530      	adds	r5, #48	@ 0x30
 800eab8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eabc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eac0:	f806 5b01 	strb.w	r5, [r6], #1
 800eac4:	f7f1 ff7a 	bl	80009bc <__aeabi_dcmplt>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d172      	bne.n	800ebb2 <_dtoa_r+0x62a>
 800eacc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ead0:	2000      	movs	r0, #0
 800ead2:	4911      	ldr	r1, [pc, #68]	@ (800eb18 <_dtoa_r+0x590>)
 800ead4:	f7f1 fb48 	bl	8000168 <__aeabi_dsub>
 800ead8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eadc:	f7f1 ff6e 	bl	80009bc <__aeabi_dcmplt>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	f040 80b4 	bne.w	800ec4e <_dtoa_r+0x6c6>
 800eae6:	42a6      	cmp	r6, r4
 800eae8:	f43f af70 	beq.w	800e9cc <_dtoa_r+0x444>
 800eaec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	4b0a      	ldr	r3, [pc, #40]	@ (800eb1c <_dtoa_r+0x594>)
 800eaf4:	f7f1 fcf0 	bl	80004d8 <__aeabi_dmul>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eafe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb02:	4b06      	ldr	r3, [pc, #24]	@ (800eb1c <_dtoa_r+0x594>)
 800eb04:	f7f1 fce8 	bl	80004d8 <__aeabi_dmul>
 800eb08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb0c:	e7c4      	b.n	800ea98 <_dtoa_r+0x510>
 800eb0e:	bf00      	nop
 800eb10:	08012c60 	.word	0x08012c60
 800eb14:	08012c38 	.word	0x08012c38
 800eb18:	3ff00000 	.word	0x3ff00000
 800eb1c:	40240000 	.word	0x40240000
 800eb20:	401c0000 	.word	0x401c0000
 800eb24:	40140000 	.word	0x40140000
 800eb28:	3fe00000 	.word	0x3fe00000
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f7f1 fcd2 	bl	80004d8 <__aeabi_dmul>
 800eb34:	4656      	mov	r6, sl
 800eb36:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb3a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eb3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb40:	f7f1 ff7a 	bl	8000a38 <__aeabi_d2iz>
 800eb44:	4605      	mov	r5, r0
 800eb46:	f7f1 fc5d 	bl	8000404 <__aeabi_i2d>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb52:	f7f1 fb09 	bl	8000168 <__aeabi_dsub>
 800eb56:	4602      	mov	r2, r0
 800eb58:	460b      	mov	r3, r1
 800eb5a:	3530      	adds	r5, #48	@ 0x30
 800eb5c:	f806 5b01 	strb.w	r5, [r6], #1
 800eb60:	42a6      	cmp	r6, r4
 800eb62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb66:	f04f 0200 	mov.w	r2, #0
 800eb6a:	d124      	bne.n	800ebb6 <_dtoa_r+0x62e>
 800eb6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb70:	4bae      	ldr	r3, [pc, #696]	@ (800ee2c <_dtoa_r+0x8a4>)
 800eb72:	f7f1 fafb 	bl	800016c <__adddf3>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb7e:	f7f1 ff3b 	bl	80009f8 <__aeabi_dcmpgt>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d163      	bne.n	800ec4e <_dtoa_r+0x6c6>
 800eb86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	49a7      	ldr	r1, [pc, #668]	@ (800ee2c <_dtoa_r+0x8a4>)
 800eb8e:	f7f1 faeb 	bl	8000168 <__aeabi_dsub>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb9a:	f7f1 ff0f 	bl	80009bc <__aeabi_dcmplt>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	f43f af14 	beq.w	800e9cc <_dtoa_r+0x444>
 800eba4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eba6:	1e73      	subs	r3, r6, #1
 800eba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ebaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebae:	2b30      	cmp	r3, #48	@ 0x30
 800ebb0:	d0f8      	beq.n	800eba4 <_dtoa_r+0x61c>
 800ebb2:	4647      	mov	r7, r8
 800ebb4:	e03b      	b.n	800ec2e <_dtoa_r+0x6a6>
 800ebb6:	4b9e      	ldr	r3, [pc, #632]	@ (800ee30 <_dtoa_r+0x8a8>)
 800ebb8:	f7f1 fc8e 	bl	80004d8 <__aeabi_dmul>
 800ebbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebc0:	e7bc      	b.n	800eb3c <_dtoa_r+0x5b4>
 800ebc2:	4656      	mov	r6, sl
 800ebc4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ebc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebcc:	4620      	mov	r0, r4
 800ebce:	4629      	mov	r1, r5
 800ebd0:	f7f1 fdac 	bl	800072c <__aeabi_ddiv>
 800ebd4:	f7f1 ff30 	bl	8000a38 <__aeabi_d2iz>
 800ebd8:	4680      	mov	r8, r0
 800ebda:	f7f1 fc13 	bl	8000404 <__aeabi_i2d>
 800ebde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebe2:	f7f1 fc79 	bl	80004d8 <__aeabi_dmul>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4620      	mov	r0, r4
 800ebec:	4629      	mov	r1, r5
 800ebee:	f7f1 fabb 	bl	8000168 <__aeabi_dsub>
 800ebf2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ebf6:	9d08      	ldr	r5, [sp, #32]
 800ebf8:	f806 4b01 	strb.w	r4, [r6], #1
 800ebfc:	eba6 040a 	sub.w	r4, r6, sl
 800ec00:	42a5      	cmp	r5, r4
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
 800ec06:	d133      	bne.n	800ec70 <_dtoa_r+0x6e8>
 800ec08:	f7f1 fab0 	bl	800016c <__adddf3>
 800ec0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec10:	4604      	mov	r4, r0
 800ec12:	460d      	mov	r5, r1
 800ec14:	f7f1 fef0 	bl	80009f8 <__aeabi_dcmpgt>
 800ec18:	b9c0      	cbnz	r0, 800ec4c <_dtoa_r+0x6c4>
 800ec1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec1e:	4620      	mov	r0, r4
 800ec20:	4629      	mov	r1, r5
 800ec22:	f7f1 fec1 	bl	80009a8 <__aeabi_dcmpeq>
 800ec26:	b110      	cbz	r0, 800ec2e <_dtoa_r+0x6a6>
 800ec28:	f018 0f01 	tst.w	r8, #1
 800ec2c:	d10e      	bne.n	800ec4c <_dtoa_r+0x6c4>
 800ec2e:	4648      	mov	r0, r9
 800ec30:	9903      	ldr	r1, [sp, #12]
 800ec32:	f000 fbbb 	bl	800f3ac <_Bfree>
 800ec36:	2300      	movs	r3, #0
 800ec38:	7033      	strb	r3, [r6, #0]
 800ec3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ec3c:	3701      	adds	r7, #1
 800ec3e:	601f      	str	r7, [r3, #0]
 800ec40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 824b 	beq.w	800f0de <_dtoa_r+0xb56>
 800ec48:	601e      	str	r6, [r3, #0]
 800ec4a:	e248      	b.n	800f0de <_dtoa_r+0xb56>
 800ec4c:	46b8      	mov	r8, r7
 800ec4e:	4633      	mov	r3, r6
 800ec50:	461e      	mov	r6, r3
 800ec52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec56:	2a39      	cmp	r2, #57	@ 0x39
 800ec58:	d106      	bne.n	800ec68 <_dtoa_r+0x6e0>
 800ec5a:	459a      	cmp	sl, r3
 800ec5c:	d1f8      	bne.n	800ec50 <_dtoa_r+0x6c8>
 800ec5e:	2230      	movs	r2, #48	@ 0x30
 800ec60:	f108 0801 	add.w	r8, r8, #1
 800ec64:	f88a 2000 	strb.w	r2, [sl]
 800ec68:	781a      	ldrb	r2, [r3, #0]
 800ec6a:	3201      	adds	r2, #1
 800ec6c:	701a      	strb	r2, [r3, #0]
 800ec6e:	e7a0      	b.n	800ebb2 <_dtoa_r+0x62a>
 800ec70:	2200      	movs	r2, #0
 800ec72:	4b6f      	ldr	r3, [pc, #444]	@ (800ee30 <_dtoa_r+0x8a8>)
 800ec74:	f7f1 fc30 	bl	80004d8 <__aeabi_dmul>
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	460d      	mov	r5, r1
 800ec80:	f7f1 fe92 	bl	80009a8 <__aeabi_dcmpeq>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d09f      	beq.n	800ebc8 <_dtoa_r+0x640>
 800ec88:	e7d1      	b.n	800ec2e <_dtoa_r+0x6a6>
 800ec8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	f000 80ea 	beq.w	800ee66 <_dtoa_r+0x8de>
 800ec92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ec94:	2a01      	cmp	r2, #1
 800ec96:	f300 80cd 	bgt.w	800ee34 <_dtoa_r+0x8ac>
 800ec9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec9c:	2a00      	cmp	r2, #0
 800ec9e:	f000 80c1 	beq.w	800ee24 <_dtoa_r+0x89c>
 800eca2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eca6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eca8:	9e04      	ldr	r6, [sp, #16]
 800ecaa:	9a04      	ldr	r2, [sp, #16]
 800ecac:	2101      	movs	r1, #1
 800ecae:	441a      	add	r2, r3
 800ecb0:	9204      	str	r2, [sp, #16]
 800ecb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecb4:	4648      	mov	r0, r9
 800ecb6:	441a      	add	r2, r3
 800ecb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecba:	f000 fc75 	bl	800f5a8 <__i2b>
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	b166      	cbz	r6, 800ecdc <_dtoa_r+0x754>
 800ecc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	dd09      	ble.n	800ecdc <_dtoa_r+0x754>
 800ecc8:	42b3      	cmp	r3, r6
 800ecca:	bfa8      	it	ge
 800eccc:	4633      	movge	r3, r6
 800ecce:	9a04      	ldr	r2, [sp, #16]
 800ecd0:	1af6      	subs	r6, r6, r3
 800ecd2:	1ad2      	subs	r2, r2, r3
 800ecd4:	9204      	str	r2, [sp, #16]
 800ecd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecd8:	1ad3      	subs	r3, r2, r3
 800ecda:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecde:	b30b      	cbz	r3, 800ed24 <_dtoa_r+0x79c>
 800ece0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f000 80c6 	beq.w	800ee74 <_dtoa_r+0x8ec>
 800ece8:	2c00      	cmp	r4, #0
 800ecea:	f000 80c0 	beq.w	800ee6e <_dtoa_r+0x8e6>
 800ecee:	4629      	mov	r1, r5
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	4648      	mov	r0, r9
 800ecf4:	f000 fd10 	bl	800f718 <__pow5mult>
 800ecf8:	9a03      	ldr	r2, [sp, #12]
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	4648      	mov	r0, r9
 800ed00:	f000 fc68 	bl	800f5d4 <__multiply>
 800ed04:	9903      	ldr	r1, [sp, #12]
 800ed06:	4680      	mov	r8, r0
 800ed08:	4648      	mov	r0, r9
 800ed0a:	f000 fb4f 	bl	800f3ac <_Bfree>
 800ed0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed10:	1b1b      	subs	r3, r3, r4
 800ed12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed14:	f000 80b1 	beq.w	800ee7a <_dtoa_r+0x8f2>
 800ed18:	4641      	mov	r1, r8
 800ed1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f000 fcfb 	bl	800f718 <__pow5mult>
 800ed22:	9003      	str	r0, [sp, #12]
 800ed24:	2101      	movs	r1, #1
 800ed26:	4648      	mov	r0, r9
 800ed28:	f000 fc3e 	bl	800f5a8 <__i2b>
 800ed2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed2e:	4604      	mov	r4, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	f000 81d8 	beq.w	800f0e6 <_dtoa_r+0xb5e>
 800ed36:	461a      	mov	r2, r3
 800ed38:	4601      	mov	r1, r0
 800ed3a:	4648      	mov	r0, r9
 800ed3c:	f000 fcec 	bl	800f718 <__pow5mult>
 800ed40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ed42:	4604      	mov	r4, r0
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	f300 809f 	bgt.w	800ee88 <_dtoa_r+0x900>
 800ed4a:	9b06      	ldr	r3, [sp, #24]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f040 8097 	bne.w	800ee80 <_dtoa_r+0x8f8>
 800ed52:	9b07      	ldr	r3, [sp, #28]
 800ed54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f040 8093 	bne.w	800ee84 <_dtoa_r+0x8fc>
 800ed5e:	9b07      	ldr	r3, [sp, #28]
 800ed60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed64:	0d1b      	lsrs	r3, r3, #20
 800ed66:	051b      	lsls	r3, r3, #20
 800ed68:	b133      	cbz	r3, 800ed78 <_dtoa_r+0x7f0>
 800ed6a:	9b04      	ldr	r3, [sp, #16]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	9304      	str	r3, [sp, #16]
 800ed70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed72:	3301      	adds	r3, #1
 800ed74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed76:	2301      	movs	r3, #1
 800ed78:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f000 81b8 	beq.w	800f0f2 <_dtoa_r+0xb6a>
 800ed82:	6923      	ldr	r3, [r4, #16]
 800ed84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed88:	6918      	ldr	r0, [r3, #16]
 800ed8a:	f000 fbc1 	bl	800f510 <__hi0bits>
 800ed8e:	f1c0 0020 	rsb	r0, r0, #32
 800ed92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed94:	4418      	add	r0, r3
 800ed96:	f010 001f 	ands.w	r0, r0, #31
 800ed9a:	f000 8082 	beq.w	800eea2 <_dtoa_r+0x91a>
 800ed9e:	f1c0 0320 	rsb	r3, r0, #32
 800eda2:	2b04      	cmp	r3, #4
 800eda4:	dd73      	ble.n	800ee8e <_dtoa_r+0x906>
 800eda6:	9b04      	ldr	r3, [sp, #16]
 800eda8:	f1c0 001c 	rsb	r0, r0, #28
 800edac:	4403      	add	r3, r0
 800edae:	9304      	str	r3, [sp, #16]
 800edb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edb2:	4406      	add	r6, r0
 800edb4:	4403      	add	r3, r0
 800edb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800edb8:	9b04      	ldr	r3, [sp, #16]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	dd05      	ble.n	800edca <_dtoa_r+0x842>
 800edbe:	461a      	mov	r2, r3
 800edc0:	4648      	mov	r0, r9
 800edc2:	9903      	ldr	r1, [sp, #12]
 800edc4:	f000 fd02 	bl	800f7cc <__lshift>
 800edc8:	9003      	str	r0, [sp, #12]
 800edca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edcc:	2b00      	cmp	r3, #0
 800edce:	dd05      	ble.n	800eddc <_dtoa_r+0x854>
 800edd0:	4621      	mov	r1, r4
 800edd2:	461a      	mov	r2, r3
 800edd4:	4648      	mov	r0, r9
 800edd6:	f000 fcf9 	bl	800f7cc <__lshift>
 800edda:	4604      	mov	r4, r0
 800eddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d061      	beq.n	800eea6 <_dtoa_r+0x91e>
 800ede2:	4621      	mov	r1, r4
 800ede4:	9803      	ldr	r0, [sp, #12]
 800ede6:	f000 fd5d 	bl	800f8a4 <__mcmp>
 800edea:	2800      	cmp	r0, #0
 800edec:	da5b      	bge.n	800eea6 <_dtoa_r+0x91e>
 800edee:	2300      	movs	r3, #0
 800edf0:	220a      	movs	r2, #10
 800edf2:	4648      	mov	r0, r9
 800edf4:	9903      	ldr	r1, [sp, #12]
 800edf6:	f000 fafb 	bl	800f3f0 <__multadd>
 800edfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edfc:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee00:	9003      	str	r0, [sp, #12]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f000 8177 	beq.w	800f0f6 <_dtoa_r+0xb6e>
 800ee08:	4629      	mov	r1, r5
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	220a      	movs	r2, #10
 800ee0e:	4648      	mov	r0, r9
 800ee10:	f000 faee 	bl	800f3f0 <__multadd>
 800ee14:	f1bb 0f00 	cmp.w	fp, #0
 800ee18:	4605      	mov	r5, r0
 800ee1a:	dc6f      	bgt.n	800eefc <_dtoa_r+0x974>
 800ee1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ee1e:	2b02      	cmp	r3, #2
 800ee20:	dc49      	bgt.n	800eeb6 <_dtoa_r+0x92e>
 800ee22:	e06b      	b.n	800eefc <_dtoa_r+0x974>
 800ee24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee2a:	e73c      	b.n	800eca6 <_dtoa_r+0x71e>
 800ee2c:	3fe00000 	.word	0x3fe00000
 800ee30:	40240000 	.word	0x40240000
 800ee34:	9b08      	ldr	r3, [sp, #32]
 800ee36:	1e5c      	subs	r4, r3, #1
 800ee38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee3a:	42a3      	cmp	r3, r4
 800ee3c:	db09      	blt.n	800ee52 <_dtoa_r+0x8ca>
 800ee3e:	1b1c      	subs	r4, r3, r4
 800ee40:	9b08      	ldr	r3, [sp, #32]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f6bf af30 	bge.w	800eca8 <_dtoa_r+0x720>
 800ee48:	9b04      	ldr	r3, [sp, #16]
 800ee4a:	9a08      	ldr	r2, [sp, #32]
 800ee4c:	1a9e      	subs	r6, r3, r2
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e72b      	b.n	800ecaa <_dtoa_r+0x722>
 800ee52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee56:	1ae3      	subs	r3, r4, r3
 800ee58:	441a      	add	r2, r3
 800ee5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee5c:	9e04      	ldr	r6, [sp, #16]
 800ee5e:	2400      	movs	r4, #0
 800ee60:	9b08      	ldr	r3, [sp, #32]
 800ee62:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee64:	e721      	b.n	800ecaa <_dtoa_r+0x722>
 800ee66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee68:	9e04      	ldr	r6, [sp, #16]
 800ee6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee6c:	e728      	b.n	800ecc0 <_dtoa_r+0x738>
 800ee6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ee72:	e751      	b.n	800ed18 <_dtoa_r+0x790>
 800ee74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee76:	9903      	ldr	r1, [sp, #12]
 800ee78:	e750      	b.n	800ed1c <_dtoa_r+0x794>
 800ee7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee7e:	e751      	b.n	800ed24 <_dtoa_r+0x79c>
 800ee80:	2300      	movs	r3, #0
 800ee82:	e779      	b.n	800ed78 <_dtoa_r+0x7f0>
 800ee84:	9b06      	ldr	r3, [sp, #24]
 800ee86:	e777      	b.n	800ed78 <_dtoa_r+0x7f0>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee8c:	e779      	b.n	800ed82 <_dtoa_r+0x7fa>
 800ee8e:	d093      	beq.n	800edb8 <_dtoa_r+0x830>
 800ee90:	9a04      	ldr	r2, [sp, #16]
 800ee92:	331c      	adds	r3, #28
 800ee94:	441a      	add	r2, r3
 800ee96:	9204      	str	r2, [sp, #16]
 800ee98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee9a:	441e      	add	r6, r3
 800ee9c:	441a      	add	r2, r3
 800ee9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800eea0:	e78a      	b.n	800edb8 <_dtoa_r+0x830>
 800eea2:	4603      	mov	r3, r0
 800eea4:	e7f4      	b.n	800ee90 <_dtoa_r+0x908>
 800eea6:	9b08      	ldr	r3, [sp, #32]
 800eea8:	46b8      	mov	r8, r7
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	dc20      	bgt.n	800eef0 <_dtoa_r+0x968>
 800eeae:	469b      	mov	fp, r3
 800eeb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	dd1e      	ble.n	800eef4 <_dtoa_r+0x96c>
 800eeb6:	f1bb 0f00 	cmp.w	fp, #0
 800eeba:	f47f adb1 	bne.w	800ea20 <_dtoa_r+0x498>
 800eebe:	4621      	mov	r1, r4
 800eec0:	465b      	mov	r3, fp
 800eec2:	2205      	movs	r2, #5
 800eec4:	4648      	mov	r0, r9
 800eec6:	f000 fa93 	bl	800f3f0 <__multadd>
 800eeca:	4601      	mov	r1, r0
 800eecc:	4604      	mov	r4, r0
 800eece:	9803      	ldr	r0, [sp, #12]
 800eed0:	f000 fce8 	bl	800f8a4 <__mcmp>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	f77f ada3 	ble.w	800ea20 <_dtoa_r+0x498>
 800eeda:	4656      	mov	r6, sl
 800eedc:	2331      	movs	r3, #49	@ 0x31
 800eede:	f108 0801 	add.w	r8, r8, #1
 800eee2:	f806 3b01 	strb.w	r3, [r6], #1
 800eee6:	e59f      	b.n	800ea28 <_dtoa_r+0x4a0>
 800eee8:	46b8      	mov	r8, r7
 800eeea:	9c08      	ldr	r4, [sp, #32]
 800eeec:	4625      	mov	r5, r4
 800eeee:	e7f4      	b.n	800eeda <_dtoa_r+0x952>
 800eef0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800eef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	f000 8101 	beq.w	800f0fe <_dtoa_r+0xb76>
 800eefc:	2e00      	cmp	r6, #0
 800eefe:	dd05      	ble.n	800ef0c <_dtoa_r+0x984>
 800ef00:	4629      	mov	r1, r5
 800ef02:	4632      	mov	r2, r6
 800ef04:	4648      	mov	r0, r9
 800ef06:	f000 fc61 	bl	800f7cc <__lshift>
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d05c      	beq.n	800efcc <_dtoa_r+0xa44>
 800ef12:	4648      	mov	r0, r9
 800ef14:	6869      	ldr	r1, [r5, #4]
 800ef16:	f000 fa09 	bl	800f32c <_Balloc>
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	b928      	cbnz	r0, 800ef2a <_dtoa_r+0x9a2>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef24:	4b80      	ldr	r3, [pc, #512]	@ (800f128 <_dtoa_r+0xba0>)
 800ef26:	f7ff bb43 	b.w	800e5b0 <_dtoa_r+0x28>
 800ef2a:	692a      	ldr	r2, [r5, #16]
 800ef2c:	f105 010c 	add.w	r1, r5, #12
 800ef30:	3202      	adds	r2, #2
 800ef32:	0092      	lsls	r2, r2, #2
 800ef34:	300c      	adds	r0, #12
 800ef36:	f002 facb 	bl	80114d0 <memcpy>
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	4631      	mov	r1, r6
 800ef3e:	4648      	mov	r0, r9
 800ef40:	f000 fc44 	bl	800f7cc <__lshift>
 800ef44:	462f      	mov	r7, r5
 800ef46:	4605      	mov	r5, r0
 800ef48:	f10a 0301 	add.w	r3, sl, #1
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	eb0a 030b 	add.w	r3, sl, fp
 800ef52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef54:	9b06      	ldr	r3, [sp, #24]
 800ef56:	f003 0301 	and.w	r3, r3, #1
 800ef5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef5c:	9b04      	ldr	r3, [sp, #16]
 800ef5e:	4621      	mov	r1, r4
 800ef60:	9803      	ldr	r0, [sp, #12]
 800ef62:	f103 3bff 	add.w	fp, r3, #4294967295
 800ef66:	f7ff fa85 	bl	800e474 <quorem>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	3330      	adds	r3, #48	@ 0x30
 800ef70:	9006      	str	r0, [sp, #24]
 800ef72:	9803      	ldr	r0, [sp, #12]
 800ef74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef76:	f000 fc95 	bl	800f8a4 <__mcmp>
 800ef7a:	462a      	mov	r2, r5
 800ef7c:	9008      	str	r0, [sp, #32]
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4648      	mov	r0, r9
 800ef82:	f000 fcab 	bl	800f8dc <__mdiff>
 800ef86:	68c2      	ldr	r2, [r0, #12]
 800ef88:	4606      	mov	r6, r0
 800ef8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef8c:	bb02      	cbnz	r2, 800efd0 <_dtoa_r+0xa48>
 800ef8e:	4601      	mov	r1, r0
 800ef90:	9803      	ldr	r0, [sp, #12]
 800ef92:	f000 fc87 	bl	800f8a4 <__mcmp>
 800ef96:	4602      	mov	r2, r0
 800ef98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4648      	mov	r0, r9
 800ef9e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800efa2:	f000 fa03 	bl	800f3ac <_Bfree>
 800efa6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800efa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800efaa:	9e04      	ldr	r6, [sp, #16]
 800efac:	ea42 0103 	orr.w	r1, r2, r3
 800efb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb2:	4319      	orrs	r1, r3
 800efb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efb6:	d10d      	bne.n	800efd4 <_dtoa_r+0xa4c>
 800efb8:	2b39      	cmp	r3, #57	@ 0x39
 800efba:	d027      	beq.n	800f00c <_dtoa_r+0xa84>
 800efbc:	9a08      	ldr	r2, [sp, #32]
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	dd01      	ble.n	800efc6 <_dtoa_r+0xa3e>
 800efc2:	9b06      	ldr	r3, [sp, #24]
 800efc4:	3331      	adds	r3, #49	@ 0x31
 800efc6:	f88b 3000 	strb.w	r3, [fp]
 800efca:	e52e      	b.n	800ea2a <_dtoa_r+0x4a2>
 800efcc:	4628      	mov	r0, r5
 800efce:	e7b9      	b.n	800ef44 <_dtoa_r+0x9bc>
 800efd0:	2201      	movs	r2, #1
 800efd2:	e7e2      	b.n	800ef9a <_dtoa_r+0xa12>
 800efd4:	9908      	ldr	r1, [sp, #32]
 800efd6:	2900      	cmp	r1, #0
 800efd8:	db04      	blt.n	800efe4 <_dtoa_r+0xa5c>
 800efda:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800efdc:	4301      	orrs	r1, r0
 800efde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efe0:	4301      	orrs	r1, r0
 800efe2:	d120      	bne.n	800f026 <_dtoa_r+0xa9e>
 800efe4:	2a00      	cmp	r2, #0
 800efe6:	ddee      	ble.n	800efc6 <_dtoa_r+0xa3e>
 800efe8:	2201      	movs	r2, #1
 800efea:	9903      	ldr	r1, [sp, #12]
 800efec:	4648      	mov	r0, r9
 800efee:	9304      	str	r3, [sp, #16]
 800eff0:	f000 fbec 	bl	800f7cc <__lshift>
 800eff4:	4621      	mov	r1, r4
 800eff6:	9003      	str	r0, [sp, #12]
 800eff8:	f000 fc54 	bl	800f8a4 <__mcmp>
 800effc:	2800      	cmp	r0, #0
 800effe:	9b04      	ldr	r3, [sp, #16]
 800f000:	dc02      	bgt.n	800f008 <_dtoa_r+0xa80>
 800f002:	d1e0      	bne.n	800efc6 <_dtoa_r+0xa3e>
 800f004:	07da      	lsls	r2, r3, #31
 800f006:	d5de      	bpl.n	800efc6 <_dtoa_r+0xa3e>
 800f008:	2b39      	cmp	r3, #57	@ 0x39
 800f00a:	d1da      	bne.n	800efc2 <_dtoa_r+0xa3a>
 800f00c:	2339      	movs	r3, #57	@ 0x39
 800f00e:	f88b 3000 	strb.w	r3, [fp]
 800f012:	4633      	mov	r3, r6
 800f014:	461e      	mov	r6, r3
 800f016:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	2a39      	cmp	r2, #57	@ 0x39
 800f01e:	d04e      	beq.n	800f0be <_dtoa_r+0xb36>
 800f020:	3201      	adds	r2, #1
 800f022:	701a      	strb	r2, [r3, #0]
 800f024:	e501      	b.n	800ea2a <_dtoa_r+0x4a2>
 800f026:	2a00      	cmp	r2, #0
 800f028:	dd03      	ble.n	800f032 <_dtoa_r+0xaaa>
 800f02a:	2b39      	cmp	r3, #57	@ 0x39
 800f02c:	d0ee      	beq.n	800f00c <_dtoa_r+0xa84>
 800f02e:	3301      	adds	r3, #1
 800f030:	e7c9      	b.n	800efc6 <_dtoa_r+0xa3e>
 800f032:	9a04      	ldr	r2, [sp, #16]
 800f034:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f036:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f03a:	428a      	cmp	r2, r1
 800f03c:	d028      	beq.n	800f090 <_dtoa_r+0xb08>
 800f03e:	2300      	movs	r3, #0
 800f040:	220a      	movs	r2, #10
 800f042:	9903      	ldr	r1, [sp, #12]
 800f044:	4648      	mov	r0, r9
 800f046:	f000 f9d3 	bl	800f3f0 <__multadd>
 800f04a:	42af      	cmp	r7, r5
 800f04c:	9003      	str	r0, [sp, #12]
 800f04e:	f04f 0300 	mov.w	r3, #0
 800f052:	f04f 020a 	mov.w	r2, #10
 800f056:	4639      	mov	r1, r7
 800f058:	4648      	mov	r0, r9
 800f05a:	d107      	bne.n	800f06c <_dtoa_r+0xae4>
 800f05c:	f000 f9c8 	bl	800f3f0 <__multadd>
 800f060:	4607      	mov	r7, r0
 800f062:	4605      	mov	r5, r0
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	3301      	adds	r3, #1
 800f068:	9304      	str	r3, [sp, #16]
 800f06a:	e777      	b.n	800ef5c <_dtoa_r+0x9d4>
 800f06c:	f000 f9c0 	bl	800f3f0 <__multadd>
 800f070:	4629      	mov	r1, r5
 800f072:	4607      	mov	r7, r0
 800f074:	2300      	movs	r3, #0
 800f076:	220a      	movs	r2, #10
 800f078:	4648      	mov	r0, r9
 800f07a:	f000 f9b9 	bl	800f3f0 <__multadd>
 800f07e:	4605      	mov	r5, r0
 800f080:	e7f0      	b.n	800f064 <_dtoa_r+0xadc>
 800f082:	f1bb 0f00 	cmp.w	fp, #0
 800f086:	bfcc      	ite	gt
 800f088:	465e      	movgt	r6, fp
 800f08a:	2601      	movle	r6, #1
 800f08c:	2700      	movs	r7, #0
 800f08e:	4456      	add	r6, sl
 800f090:	2201      	movs	r2, #1
 800f092:	9903      	ldr	r1, [sp, #12]
 800f094:	4648      	mov	r0, r9
 800f096:	9304      	str	r3, [sp, #16]
 800f098:	f000 fb98 	bl	800f7cc <__lshift>
 800f09c:	4621      	mov	r1, r4
 800f09e:	9003      	str	r0, [sp, #12]
 800f0a0:	f000 fc00 	bl	800f8a4 <__mcmp>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dcb4      	bgt.n	800f012 <_dtoa_r+0xa8a>
 800f0a8:	d102      	bne.n	800f0b0 <_dtoa_r+0xb28>
 800f0aa:	9b04      	ldr	r3, [sp, #16]
 800f0ac:	07db      	lsls	r3, r3, #31
 800f0ae:	d4b0      	bmi.n	800f012 <_dtoa_r+0xa8a>
 800f0b0:	4633      	mov	r3, r6
 800f0b2:	461e      	mov	r6, r3
 800f0b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0b8:	2a30      	cmp	r2, #48	@ 0x30
 800f0ba:	d0fa      	beq.n	800f0b2 <_dtoa_r+0xb2a>
 800f0bc:	e4b5      	b.n	800ea2a <_dtoa_r+0x4a2>
 800f0be:	459a      	cmp	sl, r3
 800f0c0:	d1a8      	bne.n	800f014 <_dtoa_r+0xa8c>
 800f0c2:	2331      	movs	r3, #49	@ 0x31
 800f0c4:	f108 0801 	add.w	r8, r8, #1
 800f0c8:	f88a 3000 	strb.w	r3, [sl]
 800f0cc:	e4ad      	b.n	800ea2a <_dtoa_r+0x4a2>
 800f0ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f0d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f12c <_dtoa_r+0xba4>
 800f0d4:	b11b      	cbz	r3, 800f0de <_dtoa_r+0xb56>
 800f0d6:	f10a 0308 	add.w	r3, sl, #8
 800f0da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f0dc:	6013      	str	r3, [r2, #0]
 800f0de:	4650      	mov	r0, sl
 800f0e0:	b017      	add	sp, #92	@ 0x5c
 800f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	f77f ae2e 	ble.w	800ed4a <_dtoa_r+0x7c2>
 800f0ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	e64d      	b.n	800ed92 <_dtoa_r+0x80a>
 800f0f6:	f1bb 0f00 	cmp.w	fp, #0
 800f0fa:	f77f aed9 	ble.w	800eeb0 <_dtoa_r+0x928>
 800f0fe:	4656      	mov	r6, sl
 800f100:	4621      	mov	r1, r4
 800f102:	9803      	ldr	r0, [sp, #12]
 800f104:	f7ff f9b6 	bl	800e474 <quorem>
 800f108:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f10c:	f806 3b01 	strb.w	r3, [r6], #1
 800f110:	eba6 020a 	sub.w	r2, r6, sl
 800f114:	4593      	cmp	fp, r2
 800f116:	ddb4      	ble.n	800f082 <_dtoa_r+0xafa>
 800f118:	2300      	movs	r3, #0
 800f11a:	220a      	movs	r2, #10
 800f11c:	4648      	mov	r0, r9
 800f11e:	9903      	ldr	r1, [sp, #12]
 800f120:	f000 f966 	bl	800f3f0 <__multadd>
 800f124:	9003      	str	r0, [sp, #12]
 800f126:	e7eb      	b.n	800f100 <_dtoa_r+0xb78>
 800f128:	08012ae9 	.word	0x08012ae9
 800f12c:	08012a6d 	.word	0x08012a6d

0800f130 <_free_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4605      	mov	r5, r0
 800f134:	2900      	cmp	r1, #0
 800f136:	d040      	beq.n	800f1ba <_free_r+0x8a>
 800f138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f13c:	1f0c      	subs	r4, r1, #4
 800f13e:	2b00      	cmp	r3, #0
 800f140:	bfb8      	it	lt
 800f142:	18e4      	addlt	r4, r4, r3
 800f144:	f000 f8e6 	bl	800f314 <__malloc_lock>
 800f148:	4a1c      	ldr	r2, [pc, #112]	@ (800f1bc <_free_r+0x8c>)
 800f14a:	6813      	ldr	r3, [r2, #0]
 800f14c:	b933      	cbnz	r3, 800f15c <_free_r+0x2c>
 800f14e:	6063      	str	r3, [r4, #4]
 800f150:	6014      	str	r4, [r2, #0]
 800f152:	4628      	mov	r0, r5
 800f154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f158:	f000 b8e2 	b.w	800f320 <__malloc_unlock>
 800f15c:	42a3      	cmp	r3, r4
 800f15e:	d908      	bls.n	800f172 <_free_r+0x42>
 800f160:	6820      	ldr	r0, [r4, #0]
 800f162:	1821      	adds	r1, r4, r0
 800f164:	428b      	cmp	r3, r1
 800f166:	bf01      	itttt	eq
 800f168:	6819      	ldreq	r1, [r3, #0]
 800f16a:	685b      	ldreq	r3, [r3, #4]
 800f16c:	1809      	addeq	r1, r1, r0
 800f16e:	6021      	streq	r1, [r4, #0]
 800f170:	e7ed      	b.n	800f14e <_free_r+0x1e>
 800f172:	461a      	mov	r2, r3
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	b10b      	cbz	r3, 800f17c <_free_r+0x4c>
 800f178:	42a3      	cmp	r3, r4
 800f17a:	d9fa      	bls.n	800f172 <_free_r+0x42>
 800f17c:	6811      	ldr	r1, [r2, #0]
 800f17e:	1850      	adds	r0, r2, r1
 800f180:	42a0      	cmp	r0, r4
 800f182:	d10b      	bne.n	800f19c <_free_r+0x6c>
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	4401      	add	r1, r0
 800f188:	1850      	adds	r0, r2, r1
 800f18a:	4283      	cmp	r3, r0
 800f18c:	6011      	str	r1, [r2, #0]
 800f18e:	d1e0      	bne.n	800f152 <_free_r+0x22>
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	4408      	add	r0, r1
 800f196:	6010      	str	r0, [r2, #0]
 800f198:	6053      	str	r3, [r2, #4]
 800f19a:	e7da      	b.n	800f152 <_free_r+0x22>
 800f19c:	d902      	bls.n	800f1a4 <_free_r+0x74>
 800f19e:	230c      	movs	r3, #12
 800f1a0:	602b      	str	r3, [r5, #0]
 800f1a2:	e7d6      	b.n	800f152 <_free_r+0x22>
 800f1a4:	6820      	ldr	r0, [r4, #0]
 800f1a6:	1821      	adds	r1, r4, r0
 800f1a8:	428b      	cmp	r3, r1
 800f1aa:	bf01      	itttt	eq
 800f1ac:	6819      	ldreq	r1, [r3, #0]
 800f1ae:	685b      	ldreq	r3, [r3, #4]
 800f1b0:	1809      	addeq	r1, r1, r0
 800f1b2:	6021      	streq	r1, [r4, #0]
 800f1b4:	6063      	str	r3, [r4, #4]
 800f1b6:	6054      	str	r4, [r2, #4]
 800f1b8:	e7cb      	b.n	800f152 <_free_r+0x22>
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	20001b24 	.word	0x20001b24

0800f1c0 <malloc>:
 800f1c0:	4b02      	ldr	r3, [pc, #8]	@ (800f1cc <malloc+0xc>)
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f000 b825 	b.w	800f214 <_malloc_r>
 800f1ca:	bf00      	nop
 800f1cc:	200001a0 	.word	0x200001a0

0800f1d0 <sbrk_aligned>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4e0f      	ldr	r6, [pc, #60]	@ (800f210 <sbrk_aligned+0x40>)
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	6831      	ldr	r1, [r6, #0]
 800f1d8:	4605      	mov	r5, r0
 800f1da:	b911      	cbnz	r1, 800f1e2 <sbrk_aligned+0x12>
 800f1dc:	f002 f968 	bl	80114b0 <_sbrk_r>
 800f1e0:	6030      	str	r0, [r6, #0]
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f002 f963 	bl	80114b0 <_sbrk_r>
 800f1ea:	1c43      	adds	r3, r0, #1
 800f1ec:	d103      	bne.n	800f1f6 <sbrk_aligned+0x26>
 800f1ee:	f04f 34ff 	mov.w	r4, #4294967295
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	bd70      	pop	{r4, r5, r6, pc}
 800f1f6:	1cc4      	adds	r4, r0, #3
 800f1f8:	f024 0403 	bic.w	r4, r4, #3
 800f1fc:	42a0      	cmp	r0, r4
 800f1fe:	d0f8      	beq.n	800f1f2 <sbrk_aligned+0x22>
 800f200:	1a21      	subs	r1, r4, r0
 800f202:	4628      	mov	r0, r5
 800f204:	f002 f954 	bl	80114b0 <_sbrk_r>
 800f208:	3001      	adds	r0, #1
 800f20a:	d1f2      	bne.n	800f1f2 <sbrk_aligned+0x22>
 800f20c:	e7ef      	b.n	800f1ee <sbrk_aligned+0x1e>
 800f20e:	bf00      	nop
 800f210:	20001b20 	.word	0x20001b20

0800f214 <_malloc_r>:
 800f214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f218:	1ccd      	adds	r5, r1, #3
 800f21a:	f025 0503 	bic.w	r5, r5, #3
 800f21e:	3508      	adds	r5, #8
 800f220:	2d0c      	cmp	r5, #12
 800f222:	bf38      	it	cc
 800f224:	250c      	movcc	r5, #12
 800f226:	2d00      	cmp	r5, #0
 800f228:	4606      	mov	r6, r0
 800f22a:	db01      	blt.n	800f230 <_malloc_r+0x1c>
 800f22c:	42a9      	cmp	r1, r5
 800f22e:	d904      	bls.n	800f23a <_malloc_r+0x26>
 800f230:	230c      	movs	r3, #12
 800f232:	6033      	str	r3, [r6, #0]
 800f234:	2000      	movs	r0, #0
 800f236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f310 <_malloc_r+0xfc>
 800f23e:	f000 f869 	bl	800f314 <__malloc_lock>
 800f242:	f8d8 3000 	ldr.w	r3, [r8]
 800f246:	461c      	mov	r4, r3
 800f248:	bb44      	cbnz	r4, 800f29c <_malloc_r+0x88>
 800f24a:	4629      	mov	r1, r5
 800f24c:	4630      	mov	r0, r6
 800f24e:	f7ff ffbf 	bl	800f1d0 <sbrk_aligned>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	4604      	mov	r4, r0
 800f256:	d158      	bne.n	800f30a <_malloc_r+0xf6>
 800f258:	f8d8 4000 	ldr.w	r4, [r8]
 800f25c:	4627      	mov	r7, r4
 800f25e:	2f00      	cmp	r7, #0
 800f260:	d143      	bne.n	800f2ea <_malloc_r+0xd6>
 800f262:	2c00      	cmp	r4, #0
 800f264:	d04b      	beq.n	800f2fe <_malloc_r+0xea>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	4639      	mov	r1, r7
 800f26a:	4630      	mov	r0, r6
 800f26c:	eb04 0903 	add.w	r9, r4, r3
 800f270:	f002 f91e 	bl	80114b0 <_sbrk_r>
 800f274:	4581      	cmp	r9, r0
 800f276:	d142      	bne.n	800f2fe <_malloc_r+0xea>
 800f278:	6821      	ldr	r1, [r4, #0]
 800f27a:	4630      	mov	r0, r6
 800f27c:	1a6d      	subs	r5, r5, r1
 800f27e:	4629      	mov	r1, r5
 800f280:	f7ff ffa6 	bl	800f1d0 <sbrk_aligned>
 800f284:	3001      	adds	r0, #1
 800f286:	d03a      	beq.n	800f2fe <_malloc_r+0xea>
 800f288:	6823      	ldr	r3, [r4, #0]
 800f28a:	442b      	add	r3, r5
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	f8d8 3000 	ldr.w	r3, [r8]
 800f292:	685a      	ldr	r2, [r3, #4]
 800f294:	bb62      	cbnz	r2, 800f2f0 <_malloc_r+0xdc>
 800f296:	f8c8 7000 	str.w	r7, [r8]
 800f29a:	e00f      	b.n	800f2bc <_malloc_r+0xa8>
 800f29c:	6822      	ldr	r2, [r4, #0]
 800f29e:	1b52      	subs	r2, r2, r5
 800f2a0:	d420      	bmi.n	800f2e4 <_malloc_r+0xd0>
 800f2a2:	2a0b      	cmp	r2, #11
 800f2a4:	d917      	bls.n	800f2d6 <_malloc_r+0xc2>
 800f2a6:	1961      	adds	r1, r4, r5
 800f2a8:	42a3      	cmp	r3, r4
 800f2aa:	6025      	str	r5, [r4, #0]
 800f2ac:	bf18      	it	ne
 800f2ae:	6059      	strne	r1, [r3, #4]
 800f2b0:	6863      	ldr	r3, [r4, #4]
 800f2b2:	bf08      	it	eq
 800f2b4:	f8c8 1000 	streq.w	r1, [r8]
 800f2b8:	5162      	str	r2, [r4, r5]
 800f2ba:	604b      	str	r3, [r1, #4]
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f000 f82f 	bl	800f320 <__malloc_unlock>
 800f2c2:	f104 000b 	add.w	r0, r4, #11
 800f2c6:	1d23      	adds	r3, r4, #4
 800f2c8:	f020 0007 	bic.w	r0, r0, #7
 800f2cc:	1ac2      	subs	r2, r0, r3
 800f2ce:	bf1c      	itt	ne
 800f2d0:	1a1b      	subne	r3, r3, r0
 800f2d2:	50a3      	strne	r3, [r4, r2]
 800f2d4:	e7af      	b.n	800f236 <_malloc_r+0x22>
 800f2d6:	6862      	ldr	r2, [r4, #4]
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	bf0c      	ite	eq
 800f2dc:	f8c8 2000 	streq.w	r2, [r8]
 800f2e0:	605a      	strne	r2, [r3, #4]
 800f2e2:	e7eb      	b.n	800f2bc <_malloc_r+0xa8>
 800f2e4:	4623      	mov	r3, r4
 800f2e6:	6864      	ldr	r4, [r4, #4]
 800f2e8:	e7ae      	b.n	800f248 <_malloc_r+0x34>
 800f2ea:	463c      	mov	r4, r7
 800f2ec:	687f      	ldr	r7, [r7, #4]
 800f2ee:	e7b6      	b.n	800f25e <_malloc_r+0x4a>
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	42a3      	cmp	r3, r4
 800f2f6:	d1fb      	bne.n	800f2f0 <_malloc_r+0xdc>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	6053      	str	r3, [r2, #4]
 800f2fc:	e7de      	b.n	800f2bc <_malloc_r+0xa8>
 800f2fe:	230c      	movs	r3, #12
 800f300:	4630      	mov	r0, r6
 800f302:	6033      	str	r3, [r6, #0]
 800f304:	f000 f80c 	bl	800f320 <__malloc_unlock>
 800f308:	e794      	b.n	800f234 <_malloc_r+0x20>
 800f30a:	6005      	str	r5, [r0, #0]
 800f30c:	e7d6      	b.n	800f2bc <_malloc_r+0xa8>
 800f30e:	bf00      	nop
 800f310:	20001b24 	.word	0x20001b24

0800f314 <__malloc_lock>:
 800f314:	4801      	ldr	r0, [pc, #4]	@ (800f31c <__malloc_lock+0x8>)
 800f316:	f7ff b898 	b.w	800e44a <__retarget_lock_acquire_recursive>
 800f31a:	bf00      	nop
 800f31c:	20001b1c 	.word	0x20001b1c

0800f320 <__malloc_unlock>:
 800f320:	4801      	ldr	r0, [pc, #4]	@ (800f328 <__malloc_unlock+0x8>)
 800f322:	f7ff b893 	b.w	800e44c <__retarget_lock_release_recursive>
 800f326:	bf00      	nop
 800f328:	20001b1c 	.word	0x20001b1c

0800f32c <_Balloc>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	69c6      	ldr	r6, [r0, #28]
 800f330:	4604      	mov	r4, r0
 800f332:	460d      	mov	r5, r1
 800f334:	b976      	cbnz	r6, 800f354 <_Balloc+0x28>
 800f336:	2010      	movs	r0, #16
 800f338:	f7ff ff42 	bl	800f1c0 <malloc>
 800f33c:	4602      	mov	r2, r0
 800f33e:	61e0      	str	r0, [r4, #28]
 800f340:	b920      	cbnz	r0, 800f34c <_Balloc+0x20>
 800f342:	216b      	movs	r1, #107	@ 0x6b
 800f344:	4b17      	ldr	r3, [pc, #92]	@ (800f3a4 <_Balloc+0x78>)
 800f346:	4818      	ldr	r0, [pc, #96]	@ (800f3a8 <_Balloc+0x7c>)
 800f348:	f002 f8d6 	bl	80114f8 <__assert_func>
 800f34c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f350:	6006      	str	r6, [r0, #0]
 800f352:	60c6      	str	r6, [r0, #12]
 800f354:	69e6      	ldr	r6, [r4, #28]
 800f356:	68f3      	ldr	r3, [r6, #12]
 800f358:	b183      	cbz	r3, 800f37c <_Balloc+0x50>
 800f35a:	69e3      	ldr	r3, [r4, #28]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f362:	b9b8      	cbnz	r0, 800f394 <_Balloc+0x68>
 800f364:	2101      	movs	r1, #1
 800f366:	fa01 f605 	lsl.w	r6, r1, r5
 800f36a:	1d72      	adds	r2, r6, #5
 800f36c:	4620      	mov	r0, r4
 800f36e:	0092      	lsls	r2, r2, #2
 800f370:	f002 f8e0 	bl	8011534 <_calloc_r>
 800f374:	b160      	cbz	r0, 800f390 <_Balloc+0x64>
 800f376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f37a:	e00e      	b.n	800f39a <_Balloc+0x6e>
 800f37c:	2221      	movs	r2, #33	@ 0x21
 800f37e:	2104      	movs	r1, #4
 800f380:	4620      	mov	r0, r4
 800f382:	f002 f8d7 	bl	8011534 <_calloc_r>
 800f386:	69e3      	ldr	r3, [r4, #28]
 800f388:	60f0      	str	r0, [r6, #12]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1e4      	bne.n	800f35a <_Balloc+0x2e>
 800f390:	2000      	movs	r0, #0
 800f392:	bd70      	pop	{r4, r5, r6, pc}
 800f394:	6802      	ldr	r2, [r0, #0]
 800f396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f39a:	2300      	movs	r3, #0
 800f39c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3a0:	e7f7      	b.n	800f392 <_Balloc+0x66>
 800f3a2:	bf00      	nop
 800f3a4:	08012a7a 	.word	0x08012a7a
 800f3a8:	08012afa 	.word	0x08012afa

0800f3ac <_Bfree>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	69c6      	ldr	r6, [r0, #28]
 800f3b0:	4605      	mov	r5, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	b976      	cbnz	r6, 800f3d4 <_Bfree+0x28>
 800f3b6:	2010      	movs	r0, #16
 800f3b8:	f7ff ff02 	bl	800f1c0 <malloc>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	61e8      	str	r0, [r5, #28]
 800f3c0:	b920      	cbnz	r0, 800f3cc <_Bfree+0x20>
 800f3c2:	218f      	movs	r1, #143	@ 0x8f
 800f3c4:	4b08      	ldr	r3, [pc, #32]	@ (800f3e8 <_Bfree+0x3c>)
 800f3c6:	4809      	ldr	r0, [pc, #36]	@ (800f3ec <_Bfree+0x40>)
 800f3c8:	f002 f896 	bl	80114f8 <__assert_func>
 800f3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3d0:	6006      	str	r6, [r0, #0]
 800f3d2:	60c6      	str	r6, [r0, #12]
 800f3d4:	b13c      	cbz	r4, 800f3e6 <_Bfree+0x3a>
 800f3d6:	69eb      	ldr	r3, [r5, #28]
 800f3d8:	6862      	ldr	r2, [r4, #4]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3e0:	6021      	str	r1, [r4, #0]
 800f3e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3e6:	bd70      	pop	{r4, r5, r6, pc}
 800f3e8:	08012a7a 	.word	0x08012a7a
 800f3ec:	08012afa 	.word	0x08012afa

0800f3f0 <__multadd>:
 800f3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	460c      	mov	r4, r1
 800f3f8:	461e      	mov	r6, r3
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	690d      	ldr	r5, [r1, #16]
 800f3fe:	f101 0c14 	add.w	ip, r1, #20
 800f402:	f8dc 3000 	ldr.w	r3, [ip]
 800f406:	3001      	adds	r0, #1
 800f408:	b299      	uxth	r1, r3
 800f40a:	fb02 6101 	mla	r1, r2, r1, r6
 800f40e:	0c1e      	lsrs	r6, r3, #16
 800f410:	0c0b      	lsrs	r3, r1, #16
 800f412:	fb02 3306 	mla	r3, r2, r6, r3
 800f416:	b289      	uxth	r1, r1
 800f418:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f41c:	4285      	cmp	r5, r0
 800f41e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f422:	f84c 1b04 	str.w	r1, [ip], #4
 800f426:	dcec      	bgt.n	800f402 <__multadd+0x12>
 800f428:	b30e      	cbz	r6, 800f46e <__multadd+0x7e>
 800f42a:	68a3      	ldr	r3, [r4, #8]
 800f42c:	42ab      	cmp	r3, r5
 800f42e:	dc19      	bgt.n	800f464 <__multadd+0x74>
 800f430:	6861      	ldr	r1, [r4, #4]
 800f432:	4638      	mov	r0, r7
 800f434:	3101      	adds	r1, #1
 800f436:	f7ff ff79 	bl	800f32c <_Balloc>
 800f43a:	4680      	mov	r8, r0
 800f43c:	b928      	cbnz	r0, 800f44a <__multadd+0x5a>
 800f43e:	4602      	mov	r2, r0
 800f440:	21ba      	movs	r1, #186	@ 0xba
 800f442:	4b0c      	ldr	r3, [pc, #48]	@ (800f474 <__multadd+0x84>)
 800f444:	480c      	ldr	r0, [pc, #48]	@ (800f478 <__multadd+0x88>)
 800f446:	f002 f857 	bl	80114f8 <__assert_func>
 800f44a:	6922      	ldr	r2, [r4, #16]
 800f44c:	f104 010c 	add.w	r1, r4, #12
 800f450:	3202      	adds	r2, #2
 800f452:	0092      	lsls	r2, r2, #2
 800f454:	300c      	adds	r0, #12
 800f456:	f002 f83b 	bl	80114d0 <memcpy>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4638      	mov	r0, r7
 800f45e:	f7ff ffa5 	bl	800f3ac <_Bfree>
 800f462:	4644      	mov	r4, r8
 800f464:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f468:	3501      	adds	r5, #1
 800f46a:	615e      	str	r6, [r3, #20]
 800f46c:	6125      	str	r5, [r4, #16]
 800f46e:	4620      	mov	r0, r4
 800f470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f474:	08012ae9 	.word	0x08012ae9
 800f478:	08012afa 	.word	0x08012afa

0800f47c <__s2b>:
 800f47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f480:	4615      	mov	r5, r2
 800f482:	2209      	movs	r2, #9
 800f484:	461f      	mov	r7, r3
 800f486:	3308      	adds	r3, #8
 800f488:	460c      	mov	r4, r1
 800f48a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f48e:	4606      	mov	r6, r0
 800f490:	2201      	movs	r2, #1
 800f492:	2100      	movs	r1, #0
 800f494:	429a      	cmp	r2, r3
 800f496:	db09      	blt.n	800f4ac <__s2b+0x30>
 800f498:	4630      	mov	r0, r6
 800f49a:	f7ff ff47 	bl	800f32c <_Balloc>
 800f49e:	b940      	cbnz	r0, 800f4b2 <__s2b+0x36>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	21d3      	movs	r1, #211	@ 0xd3
 800f4a4:	4b18      	ldr	r3, [pc, #96]	@ (800f508 <__s2b+0x8c>)
 800f4a6:	4819      	ldr	r0, [pc, #100]	@ (800f50c <__s2b+0x90>)
 800f4a8:	f002 f826 	bl	80114f8 <__assert_func>
 800f4ac:	0052      	lsls	r2, r2, #1
 800f4ae:	3101      	adds	r1, #1
 800f4b0:	e7f0      	b.n	800f494 <__s2b+0x18>
 800f4b2:	9b08      	ldr	r3, [sp, #32]
 800f4b4:	2d09      	cmp	r5, #9
 800f4b6:	6143      	str	r3, [r0, #20]
 800f4b8:	f04f 0301 	mov.w	r3, #1
 800f4bc:	6103      	str	r3, [r0, #16]
 800f4be:	dd16      	ble.n	800f4ee <__s2b+0x72>
 800f4c0:	f104 0909 	add.w	r9, r4, #9
 800f4c4:	46c8      	mov	r8, r9
 800f4c6:	442c      	add	r4, r5
 800f4c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4cc:	4601      	mov	r1, r0
 800f4ce:	220a      	movs	r2, #10
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	3b30      	subs	r3, #48	@ 0x30
 800f4d4:	f7ff ff8c 	bl	800f3f0 <__multadd>
 800f4d8:	45a0      	cmp	r8, r4
 800f4da:	d1f5      	bne.n	800f4c8 <__s2b+0x4c>
 800f4dc:	f1a5 0408 	sub.w	r4, r5, #8
 800f4e0:	444c      	add	r4, r9
 800f4e2:	1b2d      	subs	r5, r5, r4
 800f4e4:	1963      	adds	r3, r4, r5
 800f4e6:	42bb      	cmp	r3, r7
 800f4e8:	db04      	blt.n	800f4f4 <__s2b+0x78>
 800f4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ee:	2509      	movs	r5, #9
 800f4f0:	340a      	adds	r4, #10
 800f4f2:	e7f6      	b.n	800f4e2 <__s2b+0x66>
 800f4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4f8:	4601      	mov	r1, r0
 800f4fa:	220a      	movs	r2, #10
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	3b30      	subs	r3, #48	@ 0x30
 800f500:	f7ff ff76 	bl	800f3f0 <__multadd>
 800f504:	e7ee      	b.n	800f4e4 <__s2b+0x68>
 800f506:	bf00      	nop
 800f508:	08012ae9 	.word	0x08012ae9
 800f50c:	08012afa 	.word	0x08012afa

0800f510 <__hi0bits>:
 800f510:	4603      	mov	r3, r0
 800f512:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f516:	bf3a      	itte	cc
 800f518:	0403      	lslcc	r3, r0, #16
 800f51a:	2010      	movcc	r0, #16
 800f51c:	2000      	movcs	r0, #0
 800f51e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f522:	bf3c      	itt	cc
 800f524:	021b      	lslcc	r3, r3, #8
 800f526:	3008      	addcc	r0, #8
 800f528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f52c:	bf3c      	itt	cc
 800f52e:	011b      	lslcc	r3, r3, #4
 800f530:	3004      	addcc	r0, #4
 800f532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f536:	bf3c      	itt	cc
 800f538:	009b      	lslcc	r3, r3, #2
 800f53a:	3002      	addcc	r0, #2
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	db05      	blt.n	800f54c <__hi0bits+0x3c>
 800f540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f544:	f100 0001 	add.w	r0, r0, #1
 800f548:	bf08      	it	eq
 800f54a:	2020      	moveq	r0, #32
 800f54c:	4770      	bx	lr

0800f54e <__lo0bits>:
 800f54e:	6803      	ldr	r3, [r0, #0]
 800f550:	4602      	mov	r2, r0
 800f552:	f013 0007 	ands.w	r0, r3, #7
 800f556:	d00b      	beq.n	800f570 <__lo0bits+0x22>
 800f558:	07d9      	lsls	r1, r3, #31
 800f55a:	d421      	bmi.n	800f5a0 <__lo0bits+0x52>
 800f55c:	0798      	lsls	r0, r3, #30
 800f55e:	bf49      	itett	mi
 800f560:	085b      	lsrmi	r3, r3, #1
 800f562:	089b      	lsrpl	r3, r3, #2
 800f564:	2001      	movmi	r0, #1
 800f566:	6013      	strmi	r3, [r2, #0]
 800f568:	bf5c      	itt	pl
 800f56a:	2002      	movpl	r0, #2
 800f56c:	6013      	strpl	r3, [r2, #0]
 800f56e:	4770      	bx	lr
 800f570:	b299      	uxth	r1, r3
 800f572:	b909      	cbnz	r1, 800f578 <__lo0bits+0x2a>
 800f574:	2010      	movs	r0, #16
 800f576:	0c1b      	lsrs	r3, r3, #16
 800f578:	b2d9      	uxtb	r1, r3
 800f57a:	b909      	cbnz	r1, 800f580 <__lo0bits+0x32>
 800f57c:	3008      	adds	r0, #8
 800f57e:	0a1b      	lsrs	r3, r3, #8
 800f580:	0719      	lsls	r1, r3, #28
 800f582:	bf04      	itt	eq
 800f584:	091b      	lsreq	r3, r3, #4
 800f586:	3004      	addeq	r0, #4
 800f588:	0799      	lsls	r1, r3, #30
 800f58a:	bf04      	itt	eq
 800f58c:	089b      	lsreq	r3, r3, #2
 800f58e:	3002      	addeq	r0, #2
 800f590:	07d9      	lsls	r1, r3, #31
 800f592:	d403      	bmi.n	800f59c <__lo0bits+0x4e>
 800f594:	085b      	lsrs	r3, r3, #1
 800f596:	f100 0001 	add.w	r0, r0, #1
 800f59a:	d003      	beq.n	800f5a4 <__lo0bits+0x56>
 800f59c:	6013      	str	r3, [r2, #0]
 800f59e:	4770      	bx	lr
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	4770      	bx	lr
 800f5a4:	2020      	movs	r0, #32
 800f5a6:	4770      	bx	lr

0800f5a8 <__i2b>:
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	460c      	mov	r4, r1
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	f7ff febd 	bl	800f32c <_Balloc>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	b928      	cbnz	r0, 800f5c2 <__i2b+0x1a>
 800f5b6:	f240 1145 	movw	r1, #325	@ 0x145
 800f5ba:	4b04      	ldr	r3, [pc, #16]	@ (800f5cc <__i2b+0x24>)
 800f5bc:	4804      	ldr	r0, [pc, #16]	@ (800f5d0 <__i2b+0x28>)
 800f5be:	f001 ff9b 	bl	80114f8 <__assert_func>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	6144      	str	r4, [r0, #20]
 800f5c6:	6103      	str	r3, [r0, #16]
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	bf00      	nop
 800f5cc:	08012ae9 	.word	0x08012ae9
 800f5d0:	08012afa 	.word	0x08012afa

0800f5d4 <__multiply>:
 800f5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	4617      	mov	r7, r2
 800f5da:	690a      	ldr	r2, [r1, #16]
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	4689      	mov	r9, r1
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	bfa2      	ittt	ge
 800f5e4:	463b      	movge	r3, r7
 800f5e6:	460f      	movge	r7, r1
 800f5e8:	4699      	movge	r9, r3
 800f5ea:	693d      	ldr	r5, [r7, #16]
 800f5ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	6879      	ldr	r1, [r7, #4]
 800f5f4:	eb05 060a 	add.w	r6, r5, sl
 800f5f8:	42b3      	cmp	r3, r6
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	bfb8      	it	lt
 800f5fe:	3101      	addlt	r1, #1
 800f600:	f7ff fe94 	bl	800f32c <_Balloc>
 800f604:	b930      	cbnz	r0, 800f614 <__multiply+0x40>
 800f606:	4602      	mov	r2, r0
 800f608:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f60c:	4b40      	ldr	r3, [pc, #256]	@ (800f710 <__multiply+0x13c>)
 800f60e:	4841      	ldr	r0, [pc, #260]	@ (800f714 <__multiply+0x140>)
 800f610:	f001 ff72 	bl	80114f8 <__assert_func>
 800f614:	f100 0414 	add.w	r4, r0, #20
 800f618:	4623      	mov	r3, r4
 800f61a:	2200      	movs	r2, #0
 800f61c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f620:	4573      	cmp	r3, lr
 800f622:	d320      	bcc.n	800f666 <__multiply+0x92>
 800f624:	f107 0814 	add.w	r8, r7, #20
 800f628:	f109 0114 	add.w	r1, r9, #20
 800f62c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f630:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f634:	9302      	str	r3, [sp, #8]
 800f636:	1beb      	subs	r3, r5, r7
 800f638:	3b15      	subs	r3, #21
 800f63a:	f023 0303 	bic.w	r3, r3, #3
 800f63e:	3304      	adds	r3, #4
 800f640:	3715      	adds	r7, #21
 800f642:	42bd      	cmp	r5, r7
 800f644:	bf38      	it	cc
 800f646:	2304      	movcc	r3, #4
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	9b02      	ldr	r3, [sp, #8]
 800f64c:	9103      	str	r1, [sp, #12]
 800f64e:	428b      	cmp	r3, r1
 800f650:	d80c      	bhi.n	800f66c <__multiply+0x98>
 800f652:	2e00      	cmp	r6, #0
 800f654:	dd03      	ble.n	800f65e <__multiply+0x8a>
 800f656:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d055      	beq.n	800f70a <__multiply+0x136>
 800f65e:	6106      	str	r6, [r0, #16]
 800f660:	b005      	add	sp, #20
 800f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f666:	f843 2b04 	str.w	r2, [r3], #4
 800f66a:	e7d9      	b.n	800f620 <__multiply+0x4c>
 800f66c:	f8b1 a000 	ldrh.w	sl, [r1]
 800f670:	f1ba 0f00 	cmp.w	sl, #0
 800f674:	d01f      	beq.n	800f6b6 <__multiply+0xe2>
 800f676:	46c4      	mov	ip, r8
 800f678:	46a1      	mov	r9, r4
 800f67a:	2700      	movs	r7, #0
 800f67c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f680:	f8d9 3000 	ldr.w	r3, [r9]
 800f684:	fa1f fb82 	uxth.w	fp, r2
 800f688:	b29b      	uxth	r3, r3
 800f68a:	fb0a 330b 	mla	r3, sl, fp, r3
 800f68e:	443b      	add	r3, r7
 800f690:	f8d9 7000 	ldr.w	r7, [r9]
 800f694:	0c12      	lsrs	r2, r2, #16
 800f696:	0c3f      	lsrs	r7, r7, #16
 800f698:	fb0a 7202 	mla	r2, sl, r2, r7
 800f69c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6a6:	4565      	cmp	r5, ip
 800f6a8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f6ac:	f849 3b04 	str.w	r3, [r9], #4
 800f6b0:	d8e4      	bhi.n	800f67c <__multiply+0xa8>
 800f6b2:	9b01      	ldr	r3, [sp, #4]
 800f6b4:	50e7      	str	r7, [r4, r3]
 800f6b6:	9b03      	ldr	r3, [sp, #12]
 800f6b8:	3104      	adds	r1, #4
 800f6ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6be:	f1b9 0f00 	cmp.w	r9, #0
 800f6c2:	d020      	beq.n	800f706 <__multiply+0x132>
 800f6c4:	4647      	mov	r7, r8
 800f6c6:	46a4      	mov	ip, r4
 800f6c8:	f04f 0a00 	mov.w	sl, #0
 800f6cc:	6823      	ldr	r3, [r4, #0]
 800f6ce:	f8b7 b000 	ldrh.w	fp, [r7]
 800f6d2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	fb09 220b 	mla	r2, r9, fp, r2
 800f6dc:	4452      	add	r2, sl
 800f6de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6e2:	f84c 3b04 	str.w	r3, [ip], #4
 800f6e6:	f857 3b04 	ldr.w	r3, [r7], #4
 800f6ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6ee:	f8bc 3000 	ldrh.w	r3, [ip]
 800f6f2:	42bd      	cmp	r5, r7
 800f6f4:	fb09 330a 	mla	r3, r9, sl, r3
 800f6f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f6fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f700:	d8e5      	bhi.n	800f6ce <__multiply+0xfa>
 800f702:	9a01      	ldr	r2, [sp, #4]
 800f704:	50a3      	str	r3, [r4, r2]
 800f706:	3404      	adds	r4, #4
 800f708:	e79f      	b.n	800f64a <__multiply+0x76>
 800f70a:	3e01      	subs	r6, #1
 800f70c:	e7a1      	b.n	800f652 <__multiply+0x7e>
 800f70e:	bf00      	nop
 800f710:	08012ae9 	.word	0x08012ae9
 800f714:	08012afa 	.word	0x08012afa

0800f718 <__pow5mult>:
 800f718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f71c:	4615      	mov	r5, r2
 800f71e:	f012 0203 	ands.w	r2, r2, #3
 800f722:	4607      	mov	r7, r0
 800f724:	460e      	mov	r6, r1
 800f726:	d007      	beq.n	800f738 <__pow5mult+0x20>
 800f728:	4c25      	ldr	r4, [pc, #148]	@ (800f7c0 <__pow5mult+0xa8>)
 800f72a:	3a01      	subs	r2, #1
 800f72c:	2300      	movs	r3, #0
 800f72e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f732:	f7ff fe5d 	bl	800f3f0 <__multadd>
 800f736:	4606      	mov	r6, r0
 800f738:	10ad      	asrs	r5, r5, #2
 800f73a:	d03d      	beq.n	800f7b8 <__pow5mult+0xa0>
 800f73c:	69fc      	ldr	r4, [r7, #28]
 800f73e:	b97c      	cbnz	r4, 800f760 <__pow5mult+0x48>
 800f740:	2010      	movs	r0, #16
 800f742:	f7ff fd3d 	bl	800f1c0 <malloc>
 800f746:	4602      	mov	r2, r0
 800f748:	61f8      	str	r0, [r7, #28]
 800f74a:	b928      	cbnz	r0, 800f758 <__pow5mult+0x40>
 800f74c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f750:	4b1c      	ldr	r3, [pc, #112]	@ (800f7c4 <__pow5mult+0xac>)
 800f752:	481d      	ldr	r0, [pc, #116]	@ (800f7c8 <__pow5mult+0xb0>)
 800f754:	f001 fed0 	bl	80114f8 <__assert_func>
 800f758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f75c:	6004      	str	r4, [r0, #0]
 800f75e:	60c4      	str	r4, [r0, #12]
 800f760:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f768:	b94c      	cbnz	r4, 800f77e <__pow5mult+0x66>
 800f76a:	f240 2171 	movw	r1, #625	@ 0x271
 800f76e:	4638      	mov	r0, r7
 800f770:	f7ff ff1a 	bl	800f5a8 <__i2b>
 800f774:	2300      	movs	r3, #0
 800f776:	4604      	mov	r4, r0
 800f778:	f8c8 0008 	str.w	r0, [r8, #8]
 800f77c:	6003      	str	r3, [r0, #0]
 800f77e:	f04f 0900 	mov.w	r9, #0
 800f782:	07eb      	lsls	r3, r5, #31
 800f784:	d50a      	bpl.n	800f79c <__pow5mult+0x84>
 800f786:	4631      	mov	r1, r6
 800f788:	4622      	mov	r2, r4
 800f78a:	4638      	mov	r0, r7
 800f78c:	f7ff ff22 	bl	800f5d4 <__multiply>
 800f790:	4680      	mov	r8, r0
 800f792:	4631      	mov	r1, r6
 800f794:	4638      	mov	r0, r7
 800f796:	f7ff fe09 	bl	800f3ac <_Bfree>
 800f79a:	4646      	mov	r6, r8
 800f79c:	106d      	asrs	r5, r5, #1
 800f79e:	d00b      	beq.n	800f7b8 <__pow5mult+0xa0>
 800f7a0:	6820      	ldr	r0, [r4, #0]
 800f7a2:	b938      	cbnz	r0, 800f7b4 <__pow5mult+0x9c>
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	f7ff ff13 	bl	800f5d4 <__multiply>
 800f7ae:	6020      	str	r0, [r4, #0]
 800f7b0:	f8c0 9000 	str.w	r9, [r0]
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	e7e4      	b.n	800f782 <__pow5mult+0x6a>
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7be:	bf00      	nop
 800f7c0:	08012c28 	.word	0x08012c28
 800f7c4:	08012a7a 	.word	0x08012a7a
 800f7c8:	08012afa 	.word	0x08012afa

0800f7cc <__lshift>:
 800f7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d0:	460c      	mov	r4, r1
 800f7d2:	4607      	mov	r7, r0
 800f7d4:	4691      	mov	r9, r2
 800f7d6:	6923      	ldr	r3, [r4, #16]
 800f7d8:	6849      	ldr	r1, [r1, #4]
 800f7da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7de:	68a3      	ldr	r3, [r4, #8]
 800f7e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7e4:	f108 0601 	add.w	r6, r8, #1
 800f7e8:	42b3      	cmp	r3, r6
 800f7ea:	db0b      	blt.n	800f804 <__lshift+0x38>
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	f7ff fd9d 	bl	800f32c <_Balloc>
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	b948      	cbnz	r0, 800f80a <__lshift+0x3e>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7fc:	4b27      	ldr	r3, [pc, #156]	@ (800f89c <__lshift+0xd0>)
 800f7fe:	4828      	ldr	r0, [pc, #160]	@ (800f8a0 <__lshift+0xd4>)
 800f800:	f001 fe7a 	bl	80114f8 <__assert_func>
 800f804:	3101      	adds	r1, #1
 800f806:	005b      	lsls	r3, r3, #1
 800f808:	e7ee      	b.n	800f7e8 <__lshift+0x1c>
 800f80a:	2300      	movs	r3, #0
 800f80c:	f100 0114 	add.w	r1, r0, #20
 800f810:	f100 0210 	add.w	r2, r0, #16
 800f814:	4618      	mov	r0, r3
 800f816:	4553      	cmp	r3, sl
 800f818:	db33      	blt.n	800f882 <__lshift+0xb6>
 800f81a:	6920      	ldr	r0, [r4, #16]
 800f81c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f820:	f104 0314 	add.w	r3, r4, #20
 800f824:	f019 091f 	ands.w	r9, r9, #31
 800f828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f82c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f830:	d02b      	beq.n	800f88a <__lshift+0xbe>
 800f832:	468a      	mov	sl, r1
 800f834:	2200      	movs	r2, #0
 800f836:	f1c9 0e20 	rsb	lr, r9, #32
 800f83a:	6818      	ldr	r0, [r3, #0]
 800f83c:	fa00 f009 	lsl.w	r0, r0, r9
 800f840:	4310      	orrs	r0, r2
 800f842:	f84a 0b04 	str.w	r0, [sl], #4
 800f846:	f853 2b04 	ldr.w	r2, [r3], #4
 800f84a:	459c      	cmp	ip, r3
 800f84c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f850:	d8f3      	bhi.n	800f83a <__lshift+0x6e>
 800f852:	ebac 0304 	sub.w	r3, ip, r4
 800f856:	3b15      	subs	r3, #21
 800f858:	f023 0303 	bic.w	r3, r3, #3
 800f85c:	3304      	adds	r3, #4
 800f85e:	f104 0015 	add.w	r0, r4, #21
 800f862:	4560      	cmp	r0, ip
 800f864:	bf88      	it	hi
 800f866:	2304      	movhi	r3, #4
 800f868:	50ca      	str	r2, [r1, r3]
 800f86a:	b10a      	cbz	r2, 800f870 <__lshift+0xa4>
 800f86c:	f108 0602 	add.w	r6, r8, #2
 800f870:	3e01      	subs	r6, #1
 800f872:	4638      	mov	r0, r7
 800f874:	4621      	mov	r1, r4
 800f876:	612e      	str	r6, [r5, #16]
 800f878:	f7ff fd98 	bl	800f3ac <_Bfree>
 800f87c:	4628      	mov	r0, r5
 800f87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f882:	f842 0f04 	str.w	r0, [r2, #4]!
 800f886:	3301      	adds	r3, #1
 800f888:	e7c5      	b.n	800f816 <__lshift+0x4a>
 800f88a:	3904      	subs	r1, #4
 800f88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f890:	459c      	cmp	ip, r3
 800f892:	f841 2f04 	str.w	r2, [r1, #4]!
 800f896:	d8f9      	bhi.n	800f88c <__lshift+0xc0>
 800f898:	e7ea      	b.n	800f870 <__lshift+0xa4>
 800f89a:	bf00      	nop
 800f89c:	08012ae9 	.word	0x08012ae9
 800f8a0:	08012afa 	.word	0x08012afa

0800f8a4 <__mcmp>:
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	690a      	ldr	r2, [r1, #16]
 800f8a8:	6900      	ldr	r0, [r0, #16]
 800f8aa:	b530      	push	{r4, r5, lr}
 800f8ac:	1a80      	subs	r0, r0, r2
 800f8ae:	d10e      	bne.n	800f8ce <__mcmp+0x2a>
 800f8b0:	3314      	adds	r3, #20
 800f8b2:	3114      	adds	r1, #20
 800f8b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8c4:	4295      	cmp	r5, r2
 800f8c6:	d003      	beq.n	800f8d0 <__mcmp+0x2c>
 800f8c8:	d205      	bcs.n	800f8d6 <__mcmp+0x32>
 800f8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ce:	bd30      	pop	{r4, r5, pc}
 800f8d0:	42a3      	cmp	r3, r4
 800f8d2:	d3f3      	bcc.n	800f8bc <__mcmp+0x18>
 800f8d4:	e7fb      	b.n	800f8ce <__mcmp+0x2a>
 800f8d6:	2001      	movs	r0, #1
 800f8d8:	e7f9      	b.n	800f8ce <__mcmp+0x2a>
	...

0800f8dc <__mdiff>:
 800f8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	4689      	mov	r9, r1
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	4611      	mov	r1, r2
 800f8e6:	4648      	mov	r0, r9
 800f8e8:	4614      	mov	r4, r2
 800f8ea:	f7ff ffdb 	bl	800f8a4 <__mcmp>
 800f8ee:	1e05      	subs	r5, r0, #0
 800f8f0:	d112      	bne.n	800f918 <__mdiff+0x3c>
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f7ff fd19 	bl	800f32c <_Balloc>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	b928      	cbnz	r0, 800f90a <__mdiff+0x2e>
 800f8fe:	f240 2137 	movw	r1, #567	@ 0x237
 800f902:	4b3e      	ldr	r3, [pc, #248]	@ (800f9fc <__mdiff+0x120>)
 800f904:	483e      	ldr	r0, [pc, #248]	@ (800fa00 <__mdiff+0x124>)
 800f906:	f001 fdf7 	bl	80114f8 <__assert_func>
 800f90a:	2301      	movs	r3, #1
 800f90c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f910:	4610      	mov	r0, r2
 800f912:	b003      	add	sp, #12
 800f914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f918:	bfbc      	itt	lt
 800f91a:	464b      	movlt	r3, r9
 800f91c:	46a1      	movlt	r9, r4
 800f91e:	4630      	mov	r0, r6
 800f920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f924:	bfba      	itte	lt
 800f926:	461c      	movlt	r4, r3
 800f928:	2501      	movlt	r5, #1
 800f92a:	2500      	movge	r5, #0
 800f92c:	f7ff fcfe 	bl	800f32c <_Balloc>
 800f930:	4602      	mov	r2, r0
 800f932:	b918      	cbnz	r0, 800f93c <__mdiff+0x60>
 800f934:	f240 2145 	movw	r1, #581	@ 0x245
 800f938:	4b30      	ldr	r3, [pc, #192]	@ (800f9fc <__mdiff+0x120>)
 800f93a:	e7e3      	b.n	800f904 <__mdiff+0x28>
 800f93c:	f100 0b14 	add.w	fp, r0, #20
 800f940:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f944:	f109 0310 	add.w	r3, r9, #16
 800f948:	60c5      	str	r5, [r0, #12]
 800f94a:	f04f 0c00 	mov.w	ip, #0
 800f94e:	f109 0514 	add.w	r5, r9, #20
 800f952:	46d9      	mov	r9, fp
 800f954:	6926      	ldr	r6, [r4, #16]
 800f956:	f104 0e14 	add.w	lr, r4, #20
 800f95a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f95e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	9b01      	ldr	r3, [sp, #4]
 800f966:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f96a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f96e:	b281      	uxth	r1, r0
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	fa1f f38a 	uxth.w	r3, sl
 800f976:	1a5b      	subs	r3, r3, r1
 800f978:	0c00      	lsrs	r0, r0, #16
 800f97a:	4463      	add	r3, ip
 800f97c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f980:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f984:	b29b      	uxth	r3, r3
 800f986:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f98a:	4576      	cmp	r6, lr
 800f98c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f990:	f849 3b04 	str.w	r3, [r9], #4
 800f994:	d8e6      	bhi.n	800f964 <__mdiff+0x88>
 800f996:	1b33      	subs	r3, r6, r4
 800f998:	3b15      	subs	r3, #21
 800f99a:	f023 0303 	bic.w	r3, r3, #3
 800f99e:	3415      	adds	r4, #21
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	42a6      	cmp	r6, r4
 800f9a4:	bf38      	it	cc
 800f9a6:	2304      	movcc	r3, #4
 800f9a8:	441d      	add	r5, r3
 800f9aa:	445b      	add	r3, fp
 800f9ac:	461e      	mov	r6, r3
 800f9ae:	462c      	mov	r4, r5
 800f9b0:	4544      	cmp	r4, r8
 800f9b2:	d30e      	bcc.n	800f9d2 <__mdiff+0xf6>
 800f9b4:	f108 0103 	add.w	r1, r8, #3
 800f9b8:	1b49      	subs	r1, r1, r5
 800f9ba:	f021 0103 	bic.w	r1, r1, #3
 800f9be:	3d03      	subs	r5, #3
 800f9c0:	45a8      	cmp	r8, r5
 800f9c2:	bf38      	it	cc
 800f9c4:	2100      	movcc	r1, #0
 800f9c6:	440b      	add	r3, r1
 800f9c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9cc:	b199      	cbz	r1, 800f9f6 <__mdiff+0x11a>
 800f9ce:	6117      	str	r7, [r2, #16]
 800f9d0:	e79e      	b.n	800f910 <__mdiff+0x34>
 800f9d2:	46e6      	mov	lr, ip
 800f9d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9d8:	fa1f fc81 	uxth.w	ip, r1
 800f9dc:	44f4      	add	ip, lr
 800f9de:	0c08      	lsrs	r0, r1, #16
 800f9e0:	4471      	add	r1, lr
 800f9e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9e6:	b289      	uxth	r1, r1
 800f9e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9f0:	f846 1b04 	str.w	r1, [r6], #4
 800f9f4:	e7dc      	b.n	800f9b0 <__mdiff+0xd4>
 800f9f6:	3f01      	subs	r7, #1
 800f9f8:	e7e6      	b.n	800f9c8 <__mdiff+0xec>
 800f9fa:	bf00      	nop
 800f9fc:	08012ae9 	.word	0x08012ae9
 800fa00:	08012afa 	.word	0x08012afa

0800fa04 <__ulp>:
 800fa04:	4b0e      	ldr	r3, [pc, #56]	@ (800fa40 <__ulp+0x3c>)
 800fa06:	400b      	ands	r3, r1
 800fa08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dc08      	bgt.n	800fa22 <__ulp+0x1e>
 800fa10:	425b      	negs	r3, r3
 800fa12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa16:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa1a:	da04      	bge.n	800fa26 <__ulp+0x22>
 800fa1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa20:	4113      	asrs	r3, r2
 800fa22:	2200      	movs	r2, #0
 800fa24:	e008      	b.n	800fa38 <__ulp+0x34>
 800fa26:	f1a2 0314 	sub.w	r3, r2, #20
 800fa2a:	2b1e      	cmp	r3, #30
 800fa2c:	bfd6      	itet	le
 800fa2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa32:	2201      	movgt	r2, #1
 800fa34:	40da      	lsrle	r2, r3
 800fa36:	2300      	movs	r3, #0
 800fa38:	4619      	mov	r1, r3
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	7ff00000 	.word	0x7ff00000

0800fa44 <__b2d>:
 800fa44:	6902      	ldr	r2, [r0, #16]
 800fa46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa48:	f100 0614 	add.w	r6, r0, #20
 800fa4c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800fa50:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800fa54:	4f1e      	ldr	r7, [pc, #120]	@ (800fad0 <__b2d+0x8c>)
 800fa56:	4620      	mov	r0, r4
 800fa58:	f7ff fd5a 	bl	800f510 <__hi0bits>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	f1c0 0020 	rsb	r0, r0, #32
 800fa62:	2b0a      	cmp	r3, #10
 800fa64:	f1a2 0504 	sub.w	r5, r2, #4
 800fa68:	6008      	str	r0, [r1, #0]
 800fa6a:	dc12      	bgt.n	800fa92 <__b2d+0x4e>
 800fa6c:	42ae      	cmp	r6, r5
 800fa6e:	bf2c      	ite	cs
 800fa70:	2200      	movcs	r2, #0
 800fa72:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800fa76:	f1c3 0c0b 	rsb	ip, r3, #11
 800fa7a:	3315      	adds	r3, #21
 800fa7c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800fa80:	fa04 f303 	lsl.w	r3, r4, r3
 800fa84:	fa22 f20c 	lsr.w	r2, r2, ip
 800fa88:	ea4e 0107 	orr.w	r1, lr, r7
 800fa8c:	431a      	orrs	r2, r3
 800fa8e:	4610      	mov	r0, r2
 800fa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa92:	42ae      	cmp	r6, r5
 800fa94:	bf36      	itet	cc
 800fa96:	f1a2 0508 	subcc.w	r5, r2, #8
 800fa9a:	2200      	movcs	r2, #0
 800fa9c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800faa0:	3b0b      	subs	r3, #11
 800faa2:	d012      	beq.n	800faca <__b2d+0x86>
 800faa4:	f1c3 0720 	rsb	r7, r3, #32
 800faa8:	fa22 f107 	lsr.w	r1, r2, r7
 800faac:	409c      	lsls	r4, r3
 800faae:	430c      	orrs	r4, r1
 800fab0:	42b5      	cmp	r5, r6
 800fab2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800fab6:	bf94      	ite	ls
 800fab8:	2400      	movls	r4, #0
 800faba:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800fabe:	409a      	lsls	r2, r3
 800fac0:	40fc      	lsrs	r4, r7
 800fac2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fac6:	4322      	orrs	r2, r4
 800fac8:	e7e1      	b.n	800fa8e <__b2d+0x4a>
 800faca:	ea44 0107 	orr.w	r1, r4, r7
 800face:	e7de      	b.n	800fa8e <__b2d+0x4a>
 800fad0:	3ff00000 	.word	0x3ff00000

0800fad4 <__d2b>:
 800fad4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800fad8:	2101      	movs	r1, #1
 800fada:	4690      	mov	r8, r2
 800fadc:	4699      	mov	r9, r3
 800fade:	9e08      	ldr	r6, [sp, #32]
 800fae0:	f7ff fc24 	bl	800f32c <_Balloc>
 800fae4:	4604      	mov	r4, r0
 800fae6:	b930      	cbnz	r0, 800faf6 <__d2b+0x22>
 800fae8:	4602      	mov	r2, r0
 800faea:	f240 310f 	movw	r1, #783	@ 0x30f
 800faee:	4b23      	ldr	r3, [pc, #140]	@ (800fb7c <__d2b+0xa8>)
 800faf0:	4823      	ldr	r0, [pc, #140]	@ (800fb80 <__d2b+0xac>)
 800faf2:	f001 fd01 	bl	80114f8 <__assert_func>
 800faf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fafa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fafe:	b10d      	cbz	r5, 800fb04 <__d2b+0x30>
 800fb00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb04:	9301      	str	r3, [sp, #4]
 800fb06:	f1b8 0300 	subs.w	r3, r8, #0
 800fb0a:	d024      	beq.n	800fb56 <__d2b+0x82>
 800fb0c:	4668      	mov	r0, sp
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	f7ff fd1d 	bl	800f54e <__lo0bits>
 800fb14:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb18:	b1d8      	cbz	r0, 800fb52 <__d2b+0x7e>
 800fb1a:	f1c0 0320 	rsb	r3, r0, #32
 800fb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb22:	430b      	orrs	r3, r1
 800fb24:	40c2      	lsrs	r2, r0
 800fb26:	6163      	str	r3, [r4, #20]
 800fb28:	9201      	str	r2, [sp, #4]
 800fb2a:	9b01      	ldr	r3, [sp, #4]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bf0c      	ite	eq
 800fb30:	2201      	moveq	r2, #1
 800fb32:	2202      	movne	r2, #2
 800fb34:	61a3      	str	r3, [r4, #24]
 800fb36:	6122      	str	r2, [r4, #16]
 800fb38:	b1ad      	cbz	r5, 800fb66 <__d2b+0x92>
 800fb3a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb3e:	4405      	add	r5, r0
 800fb40:	6035      	str	r5, [r6, #0]
 800fb42:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb48:	6018      	str	r0, [r3, #0]
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	b002      	add	sp, #8
 800fb4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800fb52:	6161      	str	r1, [r4, #20]
 800fb54:	e7e9      	b.n	800fb2a <__d2b+0x56>
 800fb56:	a801      	add	r0, sp, #4
 800fb58:	f7ff fcf9 	bl	800f54e <__lo0bits>
 800fb5c:	9b01      	ldr	r3, [sp, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	6163      	str	r3, [r4, #20]
 800fb62:	3020      	adds	r0, #32
 800fb64:	e7e7      	b.n	800fb36 <__d2b+0x62>
 800fb66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb6e:	6030      	str	r0, [r6, #0]
 800fb70:	6918      	ldr	r0, [r3, #16]
 800fb72:	f7ff fccd 	bl	800f510 <__hi0bits>
 800fb76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb7a:	e7e4      	b.n	800fb46 <__d2b+0x72>
 800fb7c:	08012ae9 	.word	0x08012ae9
 800fb80:	08012afa 	.word	0x08012afa

0800fb84 <__ratio>:
 800fb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb88:	b085      	sub	sp, #20
 800fb8a:	e9cd 1000 	strd	r1, r0, [sp]
 800fb8e:	a902      	add	r1, sp, #8
 800fb90:	f7ff ff58 	bl	800fa44 <__b2d>
 800fb94:	468b      	mov	fp, r1
 800fb96:	4606      	mov	r6, r0
 800fb98:	460f      	mov	r7, r1
 800fb9a:	9800      	ldr	r0, [sp, #0]
 800fb9c:	a903      	add	r1, sp, #12
 800fb9e:	f7ff ff51 	bl	800fa44 <__b2d>
 800fba2:	460d      	mov	r5, r1
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	4689      	mov	r9, r1
 800fba8:	6919      	ldr	r1, [r3, #16]
 800fbaa:	9b00      	ldr	r3, [sp, #0]
 800fbac:	4604      	mov	r4, r0
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	1ac9      	subs	r1, r1, r3
 800fbb4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbb8:	1a9b      	subs	r3, r3, r2
 800fbba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	bfcd      	iteet	gt
 800fbc2:	463a      	movgt	r2, r7
 800fbc4:	462a      	movle	r2, r5
 800fbc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fbca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800fbce:	bfd8      	it	le
 800fbd0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fbd4:	464b      	mov	r3, r9
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	4659      	mov	r1, fp
 800fbda:	f7f0 fda7 	bl	800072c <__aeabi_ddiv>
 800fbde:	b005      	add	sp, #20
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbe4 <__copybits>:
 800fbe4:	3901      	subs	r1, #1
 800fbe6:	b570      	push	{r4, r5, r6, lr}
 800fbe8:	1149      	asrs	r1, r1, #5
 800fbea:	6914      	ldr	r4, [r2, #16]
 800fbec:	3101      	adds	r1, #1
 800fbee:	f102 0314 	add.w	r3, r2, #20
 800fbf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbfa:	1f05      	subs	r5, r0, #4
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d30c      	bcc.n	800fc1a <__copybits+0x36>
 800fc00:	1aa3      	subs	r3, r4, r2
 800fc02:	3b11      	subs	r3, #17
 800fc04:	f023 0303 	bic.w	r3, r3, #3
 800fc08:	3211      	adds	r2, #17
 800fc0a:	42a2      	cmp	r2, r4
 800fc0c:	bf88      	it	hi
 800fc0e:	2300      	movhi	r3, #0
 800fc10:	4418      	add	r0, r3
 800fc12:	2300      	movs	r3, #0
 800fc14:	4288      	cmp	r0, r1
 800fc16:	d305      	bcc.n	800fc24 <__copybits+0x40>
 800fc18:	bd70      	pop	{r4, r5, r6, pc}
 800fc1a:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc1e:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc22:	e7eb      	b.n	800fbfc <__copybits+0x18>
 800fc24:	f840 3b04 	str.w	r3, [r0], #4
 800fc28:	e7f4      	b.n	800fc14 <__copybits+0x30>

0800fc2a <__any_on>:
 800fc2a:	f100 0214 	add.w	r2, r0, #20
 800fc2e:	6900      	ldr	r0, [r0, #16]
 800fc30:	114b      	asrs	r3, r1, #5
 800fc32:	4298      	cmp	r0, r3
 800fc34:	b510      	push	{r4, lr}
 800fc36:	db11      	blt.n	800fc5c <__any_on+0x32>
 800fc38:	dd0a      	ble.n	800fc50 <__any_on+0x26>
 800fc3a:	f011 011f 	ands.w	r1, r1, #31
 800fc3e:	d007      	beq.n	800fc50 <__any_on+0x26>
 800fc40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc44:	fa24 f001 	lsr.w	r0, r4, r1
 800fc48:	fa00 f101 	lsl.w	r1, r0, r1
 800fc4c:	428c      	cmp	r4, r1
 800fc4e:	d10b      	bne.n	800fc68 <__any_on+0x3e>
 800fc50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d803      	bhi.n	800fc60 <__any_on+0x36>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	bd10      	pop	{r4, pc}
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	e7f7      	b.n	800fc50 <__any_on+0x26>
 800fc60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc64:	2900      	cmp	r1, #0
 800fc66:	d0f5      	beq.n	800fc54 <__any_on+0x2a>
 800fc68:	2001      	movs	r0, #1
 800fc6a:	e7f6      	b.n	800fc5a <__any_on+0x30>

0800fc6c <sulp>:
 800fc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc70:	460f      	mov	r7, r1
 800fc72:	4690      	mov	r8, r2
 800fc74:	f7ff fec6 	bl	800fa04 <__ulp>
 800fc78:	4604      	mov	r4, r0
 800fc7a:	460d      	mov	r5, r1
 800fc7c:	f1b8 0f00 	cmp.w	r8, #0
 800fc80:	d011      	beq.n	800fca6 <sulp+0x3a>
 800fc82:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fc86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	dd0b      	ble.n	800fca6 <sulp+0x3a>
 800fc8e:	2400      	movs	r4, #0
 800fc90:	051b      	lsls	r3, r3, #20
 800fc92:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fc96:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	462b      	mov	r3, r5
 800fc9e:	f7f0 fc1b 	bl	80004d8 <__aeabi_dmul>
 800fca2:	4604      	mov	r4, r0
 800fca4:	460d      	mov	r5, r1
 800fca6:	4620      	mov	r0, r4
 800fca8:	4629      	mov	r1, r5
 800fcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800fcb0 <_strtod_l>:
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	b09f      	sub	sp, #124	@ 0x7c
 800fcb6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcb8:	2200      	movs	r2, #0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcbe:	f04f 0a00 	mov.w	sl, #0
 800fcc2:	f04f 0b00 	mov.w	fp, #0
 800fcc6:	460a      	mov	r2, r1
 800fcc8:	9005      	str	r0, [sp, #20]
 800fcca:	9219      	str	r2, [sp, #100]	@ 0x64
 800fccc:	7811      	ldrb	r1, [r2, #0]
 800fcce:	292b      	cmp	r1, #43	@ 0x2b
 800fcd0:	d048      	beq.n	800fd64 <_strtod_l+0xb4>
 800fcd2:	d836      	bhi.n	800fd42 <_strtod_l+0x92>
 800fcd4:	290d      	cmp	r1, #13
 800fcd6:	d830      	bhi.n	800fd3a <_strtod_l+0x8a>
 800fcd8:	2908      	cmp	r1, #8
 800fcda:	d830      	bhi.n	800fd3e <_strtod_l+0x8e>
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	d039      	beq.n	800fd54 <_strtod_l+0xa4>
 800fce0:	2200      	movs	r2, #0
 800fce2:	920e      	str	r2, [sp, #56]	@ 0x38
 800fce4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fce6:	782a      	ldrb	r2, [r5, #0]
 800fce8:	2a30      	cmp	r2, #48	@ 0x30
 800fcea:	f040 80b0 	bne.w	800fe4e <_strtod_l+0x19e>
 800fcee:	786a      	ldrb	r2, [r5, #1]
 800fcf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcf4:	2a58      	cmp	r2, #88	@ 0x58
 800fcf6:	d16c      	bne.n	800fdd2 <_strtod_l+0x122>
 800fcf8:	9302      	str	r3, [sp, #8]
 800fcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcfc:	4a8f      	ldr	r2, [pc, #572]	@ (800ff3c <_strtod_l+0x28c>)
 800fcfe:	9301      	str	r3, [sp, #4]
 800fd00:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	9805      	ldr	r0, [sp, #20]
 800fd06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd08:	a919      	add	r1, sp, #100	@ 0x64
 800fd0a:	f001 fc8f 	bl	801162c <__gethex>
 800fd0e:	f010 060f 	ands.w	r6, r0, #15
 800fd12:	4604      	mov	r4, r0
 800fd14:	d005      	beq.n	800fd22 <_strtod_l+0x72>
 800fd16:	2e06      	cmp	r6, #6
 800fd18:	d126      	bne.n	800fd68 <_strtod_l+0xb8>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	3501      	adds	r5, #1
 800fd1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd20:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 8582 	bne.w	801082e <_strtod_l+0xb7e>
 800fd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd2c:	b1bb      	cbz	r3, 800fd5e <_strtod_l+0xae>
 800fd2e:	4650      	mov	r0, sl
 800fd30:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800fd34:	b01f      	add	sp, #124	@ 0x7c
 800fd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3a:	2920      	cmp	r1, #32
 800fd3c:	d1d0      	bne.n	800fce0 <_strtod_l+0x30>
 800fd3e:	3201      	adds	r2, #1
 800fd40:	e7c3      	b.n	800fcca <_strtod_l+0x1a>
 800fd42:	292d      	cmp	r1, #45	@ 0x2d
 800fd44:	d1cc      	bne.n	800fce0 <_strtod_l+0x30>
 800fd46:	2101      	movs	r1, #1
 800fd48:	910e      	str	r1, [sp, #56]	@ 0x38
 800fd4a:	1c51      	adds	r1, r2, #1
 800fd4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd4e:	7852      	ldrb	r2, [r2, #1]
 800fd50:	2a00      	cmp	r2, #0
 800fd52:	d1c7      	bne.n	800fce4 <_strtod_l+0x34>
 800fd54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd56:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f040 8566 	bne.w	801082a <_strtod_l+0xb7a>
 800fd5e:	4650      	mov	r0, sl
 800fd60:	4659      	mov	r1, fp
 800fd62:	e7e7      	b.n	800fd34 <_strtod_l+0x84>
 800fd64:	2100      	movs	r1, #0
 800fd66:	e7ef      	b.n	800fd48 <_strtod_l+0x98>
 800fd68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd6a:	b13a      	cbz	r2, 800fd7c <_strtod_l+0xcc>
 800fd6c:	2135      	movs	r1, #53	@ 0x35
 800fd6e:	a81c      	add	r0, sp, #112	@ 0x70
 800fd70:	f7ff ff38 	bl	800fbe4 <__copybits>
 800fd74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd76:	9805      	ldr	r0, [sp, #20]
 800fd78:	f7ff fb18 	bl	800f3ac <_Bfree>
 800fd7c:	3e01      	subs	r6, #1
 800fd7e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd80:	2e04      	cmp	r6, #4
 800fd82:	d806      	bhi.n	800fd92 <_strtod_l+0xe2>
 800fd84:	e8df f006 	tbb	[pc, r6]
 800fd88:	201d0314 	.word	0x201d0314
 800fd8c:	14          	.byte	0x14
 800fd8d:	00          	.byte	0x00
 800fd8e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd92:	05e1      	lsls	r1, r4, #23
 800fd94:	bf48      	it	mi
 800fd96:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fd9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd9e:	0d1b      	lsrs	r3, r3, #20
 800fda0:	051b      	lsls	r3, r3, #20
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1bd      	bne.n	800fd22 <_strtod_l+0x72>
 800fda6:	f7fe fb25 	bl	800e3f4 <__errno>
 800fdaa:	2322      	movs	r3, #34	@ 0x22
 800fdac:	6003      	str	r3, [r0, #0]
 800fdae:	e7b8      	b.n	800fd22 <_strtod_l+0x72>
 800fdb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdbc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdc0:	e7e7      	b.n	800fd92 <_strtod_l+0xe2>
 800fdc2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ff40 <_strtod_l+0x290>
 800fdc6:	e7e4      	b.n	800fd92 <_strtod_l+0xe2>
 800fdc8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fdcc:	f04f 3aff 	mov.w	sl, #4294967295
 800fdd0:	e7df      	b.n	800fd92 <_strtod_l+0xe2>
 800fdd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdd4:	1c5a      	adds	r2, r3, #1
 800fdd6:	9219      	str	r2, [sp, #100]	@ 0x64
 800fdd8:	785b      	ldrb	r3, [r3, #1]
 800fdda:	2b30      	cmp	r3, #48	@ 0x30
 800fddc:	d0f9      	beq.n	800fdd2 <_strtod_l+0x122>
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d09f      	beq.n	800fd22 <_strtod_l+0x72>
 800fde2:	2301      	movs	r3, #1
 800fde4:	2700      	movs	r7, #0
 800fde6:	220a      	movs	r2, #10
 800fde8:	46b9      	mov	r9, r7
 800fdea:	9308      	str	r3, [sp, #32]
 800fdec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdee:	970b      	str	r7, [sp, #44]	@ 0x2c
 800fdf0:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdf2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fdf4:	7805      	ldrb	r5, [r0, #0]
 800fdf6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fdfa:	b2d9      	uxtb	r1, r3
 800fdfc:	2909      	cmp	r1, #9
 800fdfe:	d928      	bls.n	800fe52 <_strtod_l+0x1a2>
 800fe00:	2201      	movs	r2, #1
 800fe02:	4950      	ldr	r1, [pc, #320]	@ (800ff44 <_strtod_l+0x294>)
 800fe04:	f7fe fa9a 	bl	800e33c <strncmp>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d032      	beq.n	800fe72 <_strtod_l+0x1c2>
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	462a      	mov	r2, r5
 800fe10:	4603      	mov	r3, r0
 800fe12:	464d      	mov	r5, r9
 800fe14:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe16:	2a65      	cmp	r2, #101	@ 0x65
 800fe18:	d001      	beq.n	800fe1e <_strtod_l+0x16e>
 800fe1a:	2a45      	cmp	r2, #69	@ 0x45
 800fe1c:	d114      	bne.n	800fe48 <_strtod_l+0x198>
 800fe1e:	b91d      	cbnz	r5, 800fe28 <_strtod_l+0x178>
 800fe20:	9a08      	ldr	r2, [sp, #32]
 800fe22:	4302      	orrs	r2, r0
 800fe24:	d096      	beq.n	800fd54 <_strtod_l+0xa4>
 800fe26:	2500      	movs	r5, #0
 800fe28:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe2a:	1c62      	adds	r2, r4, #1
 800fe2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe2e:	7862      	ldrb	r2, [r4, #1]
 800fe30:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe32:	d07a      	beq.n	800ff2a <_strtod_l+0x27a>
 800fe34:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe36:	d07e      	beq.n	800ff36 <_strtod_l+0x286>
 800fe38:	f04f 0c00 	mov.w	ip, #0
 800fe3c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe40:	2909      	cmp	r1, #9
 800fe42:	f240 8085 	bls.w	800ff50 <_strtod_l+0x2a0>
 800fe46:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe48:	f04f 0800 	mov.w	r8, #0
 800fe4c:	e0a5      	b.n	800ff9a <_strtod_l+0x2ea>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e7c8      	b.n	800fde4 <_strtod_l+0x134>
 800fe52:	f1b9 0f08 	cmp.w	r9, #8
 800fe56:	bfd8      	it	le
 800fe58:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800fe5a:	f100 0001 	add.w	r0, r0, #1
 800fe5e:	bfd6      	itet	le
 800fe60:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe64:	fb02 3707 	mlagt	r7, r2, r7, r3
 800fe68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800fe6a:	f109 0901 	add.w	r9, r9, #1
 800fe6e:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe70:	e7bf      	b.n	800fdf2 <_strtod_l+0x142>
 800fe72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe74:	1c5a      	adds	r2, r3, #1
 800fe76:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe78:	785a      	ldrb	r2, [r3, #1]
 800fe7a:	f1b9 0f00 	cmp.w	r9, #0
 800fe7e:	d03b      	beq.n	800fef8 <_strtod_l+0x248>
 800fe80:	464d      	mov	r5, r9
 800fe82:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe84:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe88:	2b09      	cmp	r3, #9
 800fe8a:	d912      	bls.n	800feb2 <_strtod_l+0x202>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e7c2      	b.n	800fe16 <_strtod_l+0x166>
 800fe90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe92:	3001      	adds	r0, #1
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe98:	785a      	ldrb	r2, [r3, #1]
 800fe9a:	2a30      	cmp	r2, #48	@ 0x30
 800fe9c:	d0f8      	beq.n	800fe90 <_strtod_l+0x1e0>
 800fe9e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fea2:	2b08      	cmp	r3, #8
 800fea4:	f200 84c8 	bhi.w	8010838 <_strtod_l+0xb88>
 800fea8:	900a      	str	r0, [sp, #40]	@ 0x28
 800feaa:	2000      	movs	r0, #0
 800feac:	4605      	mov	r5, r0
 800feae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feb0:	930c      	str	r3, [sp, #48]	@ 0x30
 800feb2:	3a30      	subs	r2, #48	@ 0x30
 800feb4:	f100 0301 	add.w	r3, r0, #1
 800feb8:	d018      	beq.n	800feec <_strtod_l+0x23c>
 800feba:	462e      	mov	r6, r5
 800febc:	f04f 0e0a 	mov.w	lr, #10
 800fec0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fec2:	4419      	add	r1, r3
 800fec4:	910a      	str	r1, [sp, #40]	@ 0x28
 800fec6:	1c71      	adds	r1, r6, #1
 800fec8:	eba1 0c05 	sub.w	ip, r1, r5
 800fecc:	4563      	cmp	r3, ip
 800fece:	dc15      	bgt.n	800fefc <_strtod_l+0x24c>
 800fed0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800fed4:	182b      	adds	r3, r5, r0
 800fed6:	2b08      	cmp	r3, #8
 800fed8:	f105 0501 	add.w	r5, r5, #1
 800fedc:	4405      	add	r5, r0
 800fede:	dc1a      	bgt.n	800ff16 <_strtod_l+0x266>
 800fee0:	230a      	movs	r3, #10
 800fee2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fee4:	fb03 2301 	mla	r3, r3, r1, r2
 800fee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800feea:	2300      	movs	r3, #0
 800feec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800feee:	4618      	mov	r0, r3
 800fef0:	1c51      	adds	r1, r2, #1
 800fef2:	9119      	str	r1, [sp, #100]	@ 0x64
 800fef4:	7852      	ldrb	r2, [r2, #1]
 800fef6:	e7c5      	b.n	800fe84 <_strtod_l+0x1d4>
 800fef8:	4648      	mov	r0, r9
 800fefa:	e7ce      	b.n	800fe9a <_strtod_l+0x1ea>
 800fefc:	2e08      	cmp	r6, #8
 800fefe:	dc05      	bgt.n	800ff0c <_strtod_l+0x25c>
 800ff00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ff02:	fb0e f606 	mul.w	r6, lr, r6
 800ff06:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ff08:	460e      	mov	r6, r1
 800ff0a:	e7dc      	b.n	800fec6 <_strtod_l+0x216>
 800ff0c:	2910      	cmp	r1, #16
 800ff0e:	bfd8      	it	le
 800ff10:	fb0e f707 	mulle.w	r7, lr, r7
 800ff14:	e7f8      	b.n	800ff08 <_strtod_l+0x258>
 800ff16:	2b0f      	cmp	r3, #15
 800ff18:	bfdc      	itt	le
 800ff1a:	230a      	movle	r3, #10
 800ff1c:	fb03 2707 	mlale	r7, r3, r7, r2
 800ff20:	e7e3      	b.n	800feea <_strtod_l+0x23a>
 800ff22:	2300      	movs	r3, #0
 800ff24:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff26:	2301      	movs	r3, #1
 800ff28:	e77a      	b.n	800fe20 <_strtod_l+0x170>
 800ff2a:	f04f 0c00 	mov.w	ip, #0
 800ff2e:	1ca2      	adds	r2, r4, #2
 800ff30:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff32:	78a2      	ldrb	r2, [r4, #2]
 800ff34:	e782      	b.n	800fe3c <_strtod_l+0x18c>
 800ff36:	f04f 0c01 	mov.w	ip, #1
 800ff3a:	e7f8      	b.n	800ff2e <_strtod_l+0x27e>
 800ff3c:	08012d3c 	.word	0x08012d3c
 800ff40:	7ff00000 	.word	0x7ff00000
 800ff44:	08012b53 	.word	0x08012b53
 800ff48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff4a:	1c51      	adds	r1, r2, #1
 800ff4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff4e:	7852      	ldrb	r2, [r2, #1]
 800ff50:	2a30      	cmp	r2, #48	@ 0x30
 800ff52:	d0f9      	beq.n	800ff48 <_strtod_l+0x298>
 800ff54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff58:	2908      	cmp	r1, #8
 800ff5a:	f63f af75 	bhi.w	800fe48 <_strtod_l+0x198>
 800ff5e:	f04f 080a 	mov.w	r8, #10
 800ff62:	3a30      	subs	r2, #48	@ 0x30
 800ff64:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff68:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff6c:	1c56      	adds	r6, r2, #1
 800ff6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff70:	7852      	ldrb	r2, [r2, #1]
 800ff72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff76:	f1be 0f09 	cmp.w	lr, #9
 800ff7a:	d939      	bls.n	800fff0 <_strtod_l+0x340>
 800ff7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff7e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff82:	1a76      	subs	r6, r6, r1
 800ff84:	2e08      	cmp	r6, #8
 800ff86:	dc03      	bgt.n	800ff90 <_strtod_l+0x2e0>
 800ff88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff8a:	4588      	cmp	r8, r1
 800ff8c:	bfa8      	it	ge
 800ff8e:	4688      	movge	r8, r1
 800ff90:	f1bc 0f00 	cmp.w	ip, #0
 800ff94:	d001      	beq.n	800ff9a <_strtod_l+0x2ea>
 800ff96:	f1c8 0800 	rsb	r8, r8, #0
 800ff9a:	2d00      	cmp	r5, #0
 800ff9c:	d14e      	bne.n	801003c <_strtod_l+0x38c>
 800ff9e:	9908      	ldr	r1, [sp, #32]
 800ffa0:	4308      	orrs	r0, r1
 800ffa2:	f47f aebe 	bne.w	800fd22 <_strtod_l+0x72>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f47f aed4 	bne.w	800fd54 <_strtod_l+0xa4>
 800ffac:	2a69      	cmp	r2, #105	@ 0x69
 800ffae:	d028      	beq.n	8010002 <_strtod_l+0x352>
 800ffb0:	dc25      	bgt.n	800fffe <_strtod_l+0x34e>
 800ffb2:	2a49      	cmp	r2, #73	@ 0x49
 800ffb4:	d025      	beq.n	8010002 <_strtod_l+0x352>
 800ffb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffb8:	f47f aecc 	bne.w	800fd54 <_strtod_l+0xa4>
 800ffbc:	4999      	ldr	r1, [pc, #612]	@ (8010224 <_strtod_l+0x574>)
 800ffbe:	a819      	add	r0, sp, #100	@ 0x64
 800ffc0:	f001 fd56 	bl	8011a70 <__match>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f43f aec5 	beq.w	800fd54 <_strtod_l+0xa4>
 800ffca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b28      	cmp	r3, #40	@ 0x28
 800ffd0:	d12e      	bne.n	8010030 <_strtod_l+0x380>
 800ffd2:	4995      	ldr	r1, [pc, #596]	@ (8010228 <_strtod_l+0x578>)
 800ffd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffd6:	a819      	add	r0, sp, #100	@ 0x64
 800ffd8:	f001 fd5e 	bl	8011a98 <__hexnan>
 800ffdc:	2805      	cmp	r0, #5
 800ffde:	d127      	bne.n	8010030 <_strtod_l+0x380>
 800ffe0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffe2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ffe6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ffea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ffee:	e698      	b.n	800fd22 <_strtod_l+0x72>
 800fff0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fff2:	fb08 2101 	mla	r1, r8, r1, r2
 800fff6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fffa:	9209      	str	r2, [sp, #36]	@ 0x24
 800fffc:	e7b5      	b.n	800ff6a <_strtod_l+0x2ba>
 800fffe:	2a6e      	cmp	r2, #110	@ 0x6e
 8010000:	e7da      	b.n	800ffb8 <_strtod_l+0x308>
 8010002:	498a      	ldr	r1, [pc, #552]	@ (801022c <_strtod_l+0x57c>)
 8010004:	a819      	add	r0, sp, #100	@ 0x64
 8010006:	f001 fd33 	bl	8011a70 <__match>
 801000a:	2800      	cmp	r0, #0
 801000c:	f43f aea2 	beq.w	800fd54 <_strtod_l+0xa4>
 8010010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010012:	4987      	ldr	r1, [pc, #540]	@ (8010230 <_strtod_l+0x580>)
 8010014:	3b01      	subs	r3, #1
 8010016:	a819      	add	r0, sp, #100	@ 0x64
 8010018:	9319      	str	r3, [sp, #100]	@ 0x64
 801001a:	f001 fd29 	bl	8011a70 <__match>
 801001e:	b910      	cbnz	r0, 8010026 <_strtod_l+0x376>
 8010020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010022:	3301      	adds	r3, #1
 8010024:	9319      	str	r3, [sp, #100]	@ 0x64
 8010026:	f04f 0a00 	mov.w	sl, #0
 801002a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8010234 <_strtod_l+0x584>
 801002e:	e678      	b.n	800fd22 <_strtod_l+0x72>
 8010030:	4881      	ldr	r0, [pc, #516]	@ (8010238 <_strtod_l+0x588>)
 8010032:	f001 fa5b 	bl	80114ec <nan>
 8010036:	4682      	mov	sl, r0
 8010038:	468b      	mov	fp, r1
 801003a:	e672      	b.n	800fd22 <_strtod_l+0x72>
 801003c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801003e:	f1b9 0f00 	cmp.w	r9, #0
 8010042:	bf08      	it	eq
 8010044:	46a9      	moveq	r9, r5
 8010046:	eba8 0303 	sub.w	r3, r8, r3
 801004a:	2d10      	cmp	r5, #16
 801004c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801004e:	462c      	mov	r4, r5
 8010050:	9309      	str	r3, [sp, #36]	@ 0x24
 8010052:	bfa8      	it	ge
 8010054:	2410      	movge	r4, #16
 8010056:	f7f0 f9c5 	bl	80003e4 <__aeabi_ui2d>
 801005a:	2d09      	cmp	r5, #9
 801005c:	4682      	mov	sl, r0
 801005e:	468b      	mov	fp, r1
 8010060:	dc11      	bgt.n	8010086 <_strtod_l+0x3d6>
 8010062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010064:	2b00      	cmp	r3, #0
 8010066:	f43f ae5c 	beq.w	800fd22 <_strtod_l+0x72>
 801006a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801006c:	dd76      	ble.n	801015c <_strtod_l+0x4ac>
 801006e:	2b16      	cmp	r3, #22
 8010070:	dc5d      	bgt.n	801012e <_strtod_l+0x47e>
 8010072:	4972      	ldr	r1, [pc, #456]	@ (801023c <_strtod_l+0x58c>)
 8010074:	4652      	mov	r2, sl
 8010076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801007a:	465b      	mov	r3, fp
 801007c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010080:	f7f0 fa2a 	bl	80004d8 <__aeabi_dmul>
 8010084:	e7d7      	b.n	8010036 <_strtod_l+0x386>
 8010086:	4b6d      	ldr	r3, [pc, #436]	@ (801023c <_strtod_l+0x58c>)
 8010088:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801008c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010090:	f7f0 fa22 	bl	80004d8 <__aeabi_dmul>
 8010094:	4682      	mov	sl, r0
 8010096:	4638      	mov	r0, r7
 8010098:	468b      	mov	fp, r1
 801009a:	f7f0 f9a3 	bl	80003e4 <__aeabi_ui2d>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4650      	mov	r0, sl
 80100a4:	4659      	mov	r1, fp
 80100a6:	f7f0 f861 	bl	800016c <__adddf3>
 80100aa:	2d0f      	cmp	r5, #15
 80100ac:	4682      	mov	sl, r0
 80100ae:	468b      	mov	fp, r1
 80100b0:	ddd7      	ble.n	8010062 <_strtod_l+0x3b2>
 80100b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100b4:	1b2c      	subs	r4, r5, r4
 80100b6:	441c      	add	r4, r3
 80100b8:	2c00      	cmp	r4, #0
 80100ba:	f340 8093 	ble.w	80101e4 <_strtod_l+0x534>
 80100be:	f014 030f 	ands.w	r3, r4, #15
 80100c2:	d00a      	beq.n	80100da <_strtod_l+0x42a>
 80100c4:	495d      	ldr	r1, [pc, #372]	@ (801023c <_strtod_l+0x58c>)
 80100c6:	4652      	mov	r2, sl
 80100c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d0:	465b      	mov	r3, fp
 80100d2:	f7f0 fa01 	bl	80004d8 <__aeabi_dmul>
 80100d6:	4682      	mov	sl, r0
 80100d8:	468b      	mov	fp, r1
 80100da:	f034 040f 	bics.w	r4, r4, #15
 80100de:	d073      	beq.n	80101c8 <_strtod_l+0x518>
 80100e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100e4:	dd49      	ble.n	801017a <_strtod_l+0x4ca>
 80100e6:	2400      	movs	r4, #0
 80100e8:	46a0      	mov	r8, r4
 80100ea:	46a1      	mov	r9, r4
 80100ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 80100ee:	2322      	movs	r3, #34	@ 0x22
 80100f0:	f04f 0a00 	mov.w	sl, #0
 80100f4:	9a05      	ldr	r2, [sp, #20]
 80100f6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8010234 <_strtod_l+0x584>
 80100fa:	6013      	str	r3, [r2, #0]
 80100fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f43f ae0f 	beq.w	800fd22 <_strtod_l+0x72>
 8010104:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010106:	9805      	ldr	r0, [sp, #20]
 8010108:	f7ff f950 	bl	800f3ac <_Bfree>
 801010c:	4649      	mov	r1, r9
 801010e:	9805      	ldr	r0, [sp, #20]
 8010110:	f7ff f94c 	bl	800f3ac <_Bfree>
 8010114:	4641      	mov	r1, r8
 8010116:	9805      	ldr	r0, [sp, #20]
 8010118:	f7ff f948 	bl	800f3ac <_Bfree>
 801011c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801011e:	9805      	ldr	r0, [sp, #20]
 8010120:	f7ff f944 	bl	800f3ac <_Bfree>
 8010124:	4621      	mov	r1, r4
 8010126:	9805      	ldr	r0, [sp, #20]
 8010128:	f7ff f940 	bl	800f3ac <_Bfree>
 801012c:	e5f9      	b.n	800fd22 <_strtod_l+0x72>
 801012e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010130:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010134:	4293      	cmp	r3, r2
 8010136:	dbbc      	blt.n	80100b2 <_strtod_l+0x402>
 8010138:	4c40      	ldr	r4, [pc, #256]	@ (801023c <_strtod_l+0x58c>)
 801013a:	f1c5 050f 	rsb	r5, r5, #15
 801013e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010142:	4652      	mov	r2, sl
 8010144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010148:	465b      	mov	r3, fp
 801014a:	f7f0 f9c5 	bl	80004d8 <__aeabi_dmul>
 801014e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010150:	1b5d      	subs	r5, r3, r5
 8010152:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010156:	e9d4 2300 	ldrd	r2, r3, [r4]
 801015a:	e791      	b.n	8010080 <_strtod_l+0x3d0>
 801015c:	3316      	adds	r3, #22
 801015e:	dba8      	blt.n	80100b2 <_strtod_l+0x402>
 8010160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010162:	4650      	mov	r0, sl
 8010164:	eba3 0808 	sub.w	r8, r3, r8
 8010168:	4b34      	ldr	r3, [pc, #208]	@ (801023c <_strtod_l+0x58c>)
 801016a:	4659      	mov	r1, fp
 801016c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010170:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010174:	f7f0 fada 	bl	800072c <__aeabi_ddiv>
 8010178:	e75d      	b.n	8010036 <_strtod_l+0x386>
 801017a:	2300      	movs	r3, #0
 801017c:	4650      	mov	r0, sl
 801017e:	4659      	mov	r1, fp
 8010180:	461e      	mov	r6, r3
 8010182:	4f2f      	ldr	r7, [pc, #188]	@ (8010240 <_strtod_l+0x590>)
 8010184:	1124      	asrs	r4, r4, #4
 8010186:	2c01      	cmp	r4, #1
 8010188:	dc21      	bgt.n	80101ce <_strtod_l+0x51e>
 801018a:	b10b      	cbz	r3, 8010190 <_strtod_l+0x4e0>
 801018c:	4682      	mov	sl, r0
 801018e:	468b      	mov	fp, r1
 8010190:	492b      	ldr	r1, [pc, #172]	@ (8010240 <_strtod_l+0x590>)
 8010192:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010196:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801019a:	4652      	mov	r2, sl
 801019c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101a0:	465b      	mov	r3, fp
 80101a2:	f7f0 f999 	bl	80004d8 <__aeabi_dmul>
 80101a6:	4b23      	ldr	r3, [pc, #140]	@ (8010234 <_strtod_l+0x584>)
 80101a8:	460a      	mov	r2, r1
 80101aa:	400b      	ands	r3, r1
 80101ac:	4925      	ldr	r1, [pc, #148]	@ (8010244 <_strtod_l+0x594>)
 80101ae:	4682      	mov	sl, r0
 80101b0:	428b      	cmp	r3, r1
 80101b2:	d898      	bhi.n	80100e6 <_strtod_l+0x436>
 80101b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101b8:	428b      	cmp	r3, r1
 80101ba:	bf86      	itte	hi
 80101bc:	f04f 3aff 	movhi.w	sl, #4294967295
 80101c0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8010248 <_strtod_l+0x598>
 80101c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101c8:	2300      	movs	r3, #0
 80101ca:	9308      	str	r3, [sp, #32]
 80101cc:	e076      	b.n	80102bc <_strtod_l+0x60c>
 80101ce:	07e2      	lsls	r2, r4, #31
 80101d0:	d504      	bpl.n	80101dc <_strtod_l+0x52c>
 80101d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101d6:	f7f0 f97f 	bl	80004d8 <__aeabi_dmul>
 80101da:	2301      	movs	r3, #1
 80101dc:	3601      	adds	r6, #1
 80101de:	1064      	asrs	r4, r4, #1
 80101e0:	3708      	adds	r7, #8
 80101e2:	e7d0      	b.n	8010186 <_strtod_l+0x4d6>
 80101e4:	d0f0      	beq.n	80101c8 <_strtod_l+0x518>
 80101e6:	4264      	negs	r4, r4
 80101e8:	f014 020f 	ands.w	r2, r4, #15
 80101ec:	d00a      	beq.n	8010204 <_strtod_l+0x554>
 80101ee:	4b13      	ldr	r3, [pc, #76]	@ (801023c <_strtod_l+0x58c>)
 80101f0:	4650      	mov	r0, sl
 80101f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101f6:	4659      	mov	r1, fp
 80101f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fc:	f7f0 fa96 	bl	800072c <__aeabi_ddiv>
 8010200:	4682      	mov	sl, r0
 8010202:	468b      	mov	fp, r1
 8010204:	1124      	asrs	r4, r4, #4
 8010206:	d0df      	beq.n	80101c8 <_strtod_l+0x518>
 8010208:	2c1f      	cmp	r4, #31
 801020a:	dd1f      	ble.n	801024c <_strtod_l+0x59c>
 801020c:	2400      	movs	r4, #0
 801020e:	46a0      	mov	r8, r4
 8010210:	46a1      	mov	r9, r4
 8010212:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010214:	2322      	movs	r3, #34	@ 0x22
 8010216:	9a05      	ldr	r2, [sp, #20]
 8010218:	f04f 0a00 	mov.w	sl, #0
 801021c:	f04f 0b00 	mov.w	fp, #0
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	e76b      	b.n	80100fc <_strtod_l+0x44c>
 8010224:	08012a43 	.word	0x08012a43
 8010228:	08012d28 	.word	0x08012d28
 801022c:	08012a3b 	.word	0x08012a3b
 8010230:	08012a70 	.word	0x08012a70
 8010234:	7ff00000 	.word	0x7ff00000
 8010238:	08012bc4 	.word	0x08012bc4
 801023c:	08012c60 	.word	0x08012c60
 8010240:	08012c38 	.word	0x08012c38
 8010244:	7ca00000 	.word	0x7ca00000
 8010248:	7fefffff 	.word	0x7fefffff
 801024c:	f014 0310 	ands.w	r3, r4, #16
 8010250:	bf18      	it	ne
 8010252:	236a      	movne	r3, #106	@ 0x6a
 8010254:	4650      	mov	r0, sl
 8010256:	9308      	str	r3, [sp, #32]
 8010258:	4659      	mov	r1, fp
 801025a:	2300      	movs	r3, #0
 801025c:	4e77      	ldr	r6, [pc, #476]	@ (801043c <_strtod_l+0x78c>)
 801025e:	07e7      	lsls	r7, r4, #31
 8010260:	d504      	bpl.n	801026c <_strtod_l+0x5bc>
 8010262:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010266:	f7f0 f937 	bl	80004d8 <__aeabi_dmul>
 801026a:	2301      	movs	r3, #1
 801026c:	1064      	asrs	r4, r4, #1
 801026e:	f106 0608 	add.w	r6, r6, #8
 8010272:	d1f4      	bne.n	801025e <_strtod_l+0x5ae>
 8010274:	b10b      	cbz	r3, 801027a <_strtod_l+0x5ca>
 8010276:	4682      	mov	sl, r0
 8010278:	468b      	mov	fp, r1
 801027a:	9b08      	ldr	r3, [sp, #32]
 801027c:	b1b3      	cbz	r3, 80102ac <_strtod_l+0x5fc>
 801027e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010282:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010286:	2b00      	cmp	r3, #0
 8010288:	4659      	mov	r1, fp
 801028a:	dd0f      	ble.n	80102ac <_strtod_l+0x5fc>
 801028c:	2b1f      	cmp	r3, #31
 801028e:	dd58      	ble.n	8010342 <_strtod_l+0x692>
 8010290:	2b34      	cmp	r3, #52	@ 0x34
 8010292:	bfd8      	it	le
 8010294:	f04f 33ff 	movle.w	r3, #4294967295
 8010298:	f04f 0a00 	mov.w	sl, #0
 801029c:	bfcf      	iteee	gt
 801029e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80102a6:	4093      	lslle	r3, r2
 80102a8:	ea03 0b01 	andle.w	fp, r3, r1
 80102ac:	2200      	movs	r2, #0
 80102ae:	2300      	movs	r3, #0
 80102b0:	4650      	mov	r0, sl
 80102b2:	4659      	mov	r1, fp
 80102b4:	f7f0 fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d1a7      	bne.n	801020c <_strtod_l+0x55c>
 80102bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102be:	464a      	mov	r2, r9
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102c4:	462b      	mov	r3, r5
 80102c6:	9805      	ldr	r0, [sp, #20]
 80102c8:	f7ff f8d8 	bl	800f47c <__s2b>
 80102cc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f43f af09 	beq.w	80100e6 <_strtod_l+0x436>
 80102d4:	2400      	movs	r4, #0
 80102d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102da:	2a00      	cmp	r2, #0
 80102dc:	eba3 0308 	sub.w	r3, r3, r8
 80102e0:	bfa8      	it	ge
 80102e2:	2300      	movge	r3, #0
 80102e4:	46a0      	mov	r8, r4
 80102e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80102e8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102ec:	9316      	str	r3, [sp, #88]	@ 0x58
 80102ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102f0:	9805      	ldr	r0, [sp, #20]
 80102f2:	6859      	ldr	r1, [r3, #4]
 80102f4:	f7ff f81a 	bl	800f32c <_Balloc>
 80102f8:	4681      	mov	r9, r0
 80102fa:	2800      	cmp	r0, #0
 80102fc:	f43f aef7 	beq.w	80100ee <_strtod_l+0x43e>
 8010300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010302:	300c      	adds	r0, #12
 8010304:	691a      	ldr	r2, [r3, #16]
 8010306:	f103 010c 	add.w	r1, r3, #12
 801030a:	3202      	adds	r2, #2
 801030c:	0092      	lsls	r2, r2, #2
 801030e:	f001 f8df 	bl	80114d0 <memcpy>
 8010312:	ab1c      	add	r3, sp, #112	@ 0x70
 8010314:	9301      	str	r3, [sp, #4]
 8010316:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010318:	9300      	str	r3, [sp, #0]
 801031a:	4652      	mov	r2, sl
 801031c:	465b      	mov	r3, fp
 801031e:	9805      	ldr	r0, [sp, #20]
 8010320:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010324:	f7ff fbd6 	bl	800fad4 <__d2b>
 8010328:	901a      	str	r0, [sp, #104]	@ 0x68
 801032a:	2800      	cmp	r0, #0
 801032c:	f43f aedf 	beq.w	80100ee <_strtod_l+0x43e>
 8010330:	2101      	movs	r1, #1
 8010332:	9805      	ldr	r0, [sp, #20]
 8010334:	f7ff f938 	bl	800f5a8 <__i2b>
 8010338:	4680      	mov	r8, r0
 801033a:	b948      	cbnz	r0, 8010350 <_strtod_l+0x6a0>
 801033c:	f04f 0800 	mov.w	r8, #0
 8010340:	e6d5      	b.n	80100ee <_strtod_l+0x43e>
 8010342:	f04f 32ff 	mov.w	r2, #4294967295
 8010346:	fa02 f303 	lsl.w	r3, r2, r3
 801034a:	ea03 0a0a 	and.w	sl, r3, sl
 801034e:	e7ad      	b.n	80102ac <_strtod_l+0x5fc>
 8010350:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010352:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010354:	2d00      	cmp	r5, #0
 8010356:	bfab      	itete	ge
 8010358:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801035a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801035c:	18ef      	addge	r7, r5, r3
 801035e:	1b5e      	sublt	r6, r3, r5
 8010360:	9b08      	ldr	r3, [sp, #32]
 8010362:	bfa8      	it	ge
 8010364:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010366:	eba5 0503 	sub.w	r5, r5, r3
 801036a:	4415      	add	r5, r2
 801036c:	4b34      	ldr	r3, [pc, #208]	@ (8010440 <_strtod_l+0x790>)
 801036e:	f105 35ff 	add.w	r5, r5, #4294967295
 8010372:	bfb8      	it	lt
 8010374:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010376:	429d      	cmp	r5, r3
 8010378:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801037c:	da50      	bge.n	8010420 <_strtod_l+0x770>
 801037e:	1b5b      	subs	r3, r3, r5
 8010380:	2b1f      	cmp	r3, #31
 8010382:	f04f 0101 	mov.w	r1, #1
 8010386:	eba2 0203 	sub.w	r2, r2, r3
 801038a:	dc3d      	bgt.n	8010408 <_strtod_l+0x758>
 801038c:	fa01 f303 	lsl.w	r3, r1, r3
 8010390:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010392:	2300      	movs	r3, #0
 8010394:	9310      	str	r3, [sp, #64]	@ 0x40
 8010396:	18bd      	adds	r5, r7, r2
 8010398:	9b08      	ldr	r3, [sp, #32]
 801039a:	42af      	cmp	r7, r5
 801039c:	4416      	add	r6, r2
 801039e:	441e      	add	r6, r3
 80103a0:	463b      	mov	r3, r7
 80103a2:	bfa8      	it	ge
 80103a4:	462b      	movge	r3, r5
 80103a6:	42b3      	cmp	r3, r6
 80103a8:	bfa8      	it	ge
 80103aa:	4633      	movge	r3, r6
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	bfc2      	ittt	gt
 80103b0:	1aed      	subgt	r5, r5, r3
 80103b2:	1af6      	subgt	r6, r6, r3
 80103b4:	1aff      	subgt	r7, r7, r3
 80103b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	dd16      	ble.n	80103ea <_strtod_l+0x73a>
 80103bc:	4641      	mov	r1, r8
 80103be:	461a      	mov	r2, r3
 80103c0:	9805      	ldr	r0, [sp, #20]
 80103c2:	f7ff f9a9 	bl	800f718 <__pow5mult>
 80103c6:	4680      	mov	r8, r0
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d0b7      	beq.n	801033c <_strtod_l+0x68c>
 80103cc:	4601      	mov	r1, r0
 80103ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103d0:	9805      	ldr	r0, [sp, #20]
 80103d2:	f7ff f8ff 	bl	800f5d4 <__multiply>
 80103d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80103d8:	2800      	cmp	r0, #0
 80103da:	f43f ae88 	beq.w	80100ee <_strtod_l+0x43e>
 80103de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103e0:	9805      	ldr	r0, [sp, #20]
 80103e2:	f7fe ffe3 	bl	800f3ac <_Bfree>
 80103e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80103ea:	2d00      	cmp	r5, #0
 80103ec:	dc1d      	bgt.n	801042a <_strtod_l+0x77a>
 80103ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	dd27      	ble.n	8010444 <_strtod_l+0x794>
 80103f4:	4649      	mov	r1, r9
 80103f6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80103f8:	9805      	ldr	r0, [sp, #20]
 80103fa:	f7ff f98d 	bl	800f718 <__pow5mult>
 80103fe:	4681      	mov	r9, r0
 8010400:	bb00      	cbnz	r0, 8010444 <_strtod_l+0x794>
 8010402:	f04f 0900 	mov.w	r9, #0
 8010406:	e672      	b.n	80100ee <_strtod_l+0x43e>
 8010408:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801040c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010410:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010414:	35e2      	adds	r5, #226	@ 0xe2
 8010416:	fa01 f305 	lsl.w	r3, r1, r5
 801041a:	9310      	str	r3, [sp, #64]	@ 0x40
 801041c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801041e:	e7ba      	b.n	8010396 <_strtod_l+0x6e6>
 8010420:	2300      	movs	r3, #0
 8010422:	9310      	str	r3, [sp, #64]	@ 0x40
 8010424:	2301      	movs	r3, #1
 8010426:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010428:	e7b5      	b.n	8010396 <_strtod_l+0x6e6>
 801042a:	462a      	mov	r2, r5
 801042c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801042e:	9805      	ldr	r0, [sp, #20]
 8010430:	f7ff f9cc 	bl	800f7cc <__lshift>
 8010434:	901a      	str	r0, [sp, #104]	@ 0x68
 8010436:	2800      	cmp	r0, #0
 8010438:	d1d9      	bne.n	80103ee <_strtod_l+0x73e>
 801043a:	e658      	b.n	80100ee <_strtod_l+0x43e>
 801043c:	08012d50 	.word	0x08012d50
 8010440:	fffffc02 	.word	0xfffffc02
 8010444:	2e00      	cmp	r6, #0
 8010446:	dd07      	ble.n	8010458 <_strtod_l+0x7a8>
 8010448:	4649      	mov	r1, r9
 801044a:	4632      	mov	r2, r6
 801044c:	9805      	ldr	r0, [sp, #20]
 801044e:	f7ff f9bd 	bl	800f7cc <__lshift>
 8010452:	4681      	mov	r9, r0
 8010454:	2800      	cmp	r0, #0
 8010456:	d0d4      	beq.n	8010402 <_strtod_l+0x752>
 8010458:	2f00      	cmp	r7, #0
 801045a:	dd08      	ble.n	801046e <_strtod_l+0x7be>
 801045c:	4641      	mov	r1, r8
 801045e:	463a      	mov	r2, r7
 8010460:	9805      	ldr	r0, [sp, #20]
 8010462:	f7ff f9b3 	bl	800f7cc <__lshift>
 8010466:	4680      	mov	r8, r0
 8010468:	2800      	cmp	r0, #0
 801046a:	f43f ae40 	beq.w	80100ee <_strtod_l+0x43e>
 801046e:	464a      	mov	r2, r9
 8010470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010472:	9805      	ldr	r0, [sp, #20]
 8010474:	f7ff fa32 	bl	800f8dc <__mdiff>
 8010478:	4604      	mov	r4, r0
 801047a:	2800      	cmp	r0, #0
 801047c:	f43f ae37 	beq.w	80100ee <_strtod_l+0x43e>
 8010480:	68c3      	ldr	r3, [r0, #12]
 8010482:	4641      	mov	r1, r8
 8010484:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010486:	2300      	movs	r3, #0
 8010488:	60c3      	str	r3, [r0, #12]
 801048a:	f7ff fa0b 	bl	800f8a4 <__mcmp>
 801048e:	2800      	cmp	r0, #0
 8010490:	da3d      	bge.n	801050e <_strtod_l+0x85e>
 8010492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010494:	ea53 030a 	orrs.w	r3, r3, sl
 8010498:	d163      	bne.n	8010562 <_strtod_l+0x8b2>
 801049a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d15f      	bne.n	8010562 <_strtod_l+0x8b2>
 80104a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104a6:	0d1b      	lsrs	r3, r3, #20
 80104a8:	051b      	lsls	r3, r3, #20
 80104aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104ae:	d958      	bls.n	8010562 <_strtod_l+0x8b2>
 80104b0:	6963      	ldr	r3, [r4, #20]
 80104b2:	b913      	cbnz	r3, 80104ba <_strtod_l+0x80a>
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	dd53      	ble.n	8010562 <_strtod_l+0x8b2>
 80104ba:	4621      	mov	r1, r4
 80104bc:	2201      	movs	r2, #1
 80104be:	9805      	ldr	r0, [sp, #20]
 80104c0:	f7ff f984 	bl	800f7cc <__lshift>
 80104c4:	4641      	mov	r1, r8
 80104c6:	4604      	mov	r4, r0
 80104c8:	f7ff f9ec 	bl	800f8a4 <__mcmp>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	dd48      	ble.n	8010562 <_strtod_l+0x8b2>
 80104d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104d4:	9a08      	ldr	r2, [sp, #32]
 80104d6:	0d1b      	lsrs	r3, r3, #20
 80104d8:	051b      	lsls	r3, r3, #20
 80104da:	2a00      	cmp	r2, #0
 80104dc:	d062      	beq.n	80105a4 <_strtod_l+0x8f4>
 80104de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104e2:	d85f      	bhi.n	80105a4 <_strtod_l+0x8f4>
 80104e4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104e8:	f67f ae94 	bls.w	8010214 <_strtod_l+0x564>
 80104ec:	4650      	mov	r0, sl
 80104ee:	4659      	mov	r1, fp
 80104f0:	4ba3      	ldr	r3, [pc, #652]	@ (8010780 <_strtod_l+0xad0>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	f7ef fff0 	bl	80004d8 <__aeabi_dmul>
 80104f8:	4ba2      	ldr	r3, [pc, #648]	@ (8010784 <_strtod_l+0xad4>)
 80104fa:	4682      	mov	sl, r0
 80104fc:	400b      	ands	r3, r1
 80104fe:	468b      	mov	fp, r1
 8010500:	2b00      	cmp	r3, #0
 8010502:	f47f adff 	bne.w	8010104 <_strtod_l+0x454>
 8010506:	2322      	movs	r3, #34	@ 0x22
 8010508:	9a05      	ldr	r2, [sp, #20]
 801050a:	6013      	str	r3, [r2, #0]
 801050c:	e5fa      	b.n	8010104 <_strtod_l+0x454>
 801050e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010512:	d165      	bne.n	80105e0 <_strtod_l+0x930>
 8010514:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801051a:	b35a      	cbz	r2, 8010574 <_strtod_l+0x8c4>
 801051c:	4a9a      	ldr	r2, [pc, #616]	@ (8010788 <_strtod_l+0xad8>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d12b      	bne.n	801057a <_strtod_l+0x8ca>
 8010522:	9b08      	ldr	r3, [sp, #32]
 8010524:	4651      	mov	r1, sl
 8010526:	b303      	cbz	r3, 801056a <_strtod_l+0x8ba>
 8010528:	465a      	mov	r2, fp
 801052a:	4b96      	ldr	r3, [pc, #600]	@ (8010784 <_strtod_l+0xad4>)
 801052c:	4013      	ands	r3, r2
 801052e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010532:	f04f 32ff 	mov.w	r2, #4294967295
 8010536:	d81b      	bhi.n	8010570 <_strtod_l+0x8c0>
 8010538:	0d1b      	lsrs	r3, r3, #20
 801053a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801053e:	fa02 f303 	lsl.w	r3, r2, r3
 8010542:	4299      	cmp	r1, r3
 8010544:	d119      	bne.n	801057a <_strtod_l+0x8ca>
 8010546:	4b91      	ldr	r3, [pc, #580]	@ (801078c <_strtod_l+0xadc>)
 8010548:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801054a:	429a      	cmp	r2, r3
 801054c:	d102      	bne.n	8010554 <_strtod_l+0x8a4>
 801054e:	3101      	adds	r1, #1
 8010550:	f43f adcd 	beq.w	80100ee <_strtod_l+0x43e>
 8010554:	f04f 0a00 	mov.w	sl, #0
 8010558:	4b8a      	ldr	r3, [pc, #552]	@ (8010784 <_strtod_l+0xad4>)
 801055a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801055c:	401a      	ands	r2, r3
 801055e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010562:	9b08      	ldr	r3, [sp, #32]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1c1      	bne.n	80104ec <_strtod_l+0x83c>
 8010568:	e5cc      	b.n	8010104 <_strtod_l+0x454>
 801056a:	f04f 33ff 	mov.w	r3, #4294967295
 801056e:	e7e8      	b.n	8010542 <_strtod_l+0x892>
 8010570:	4613      	mov	r3, r2
 8010572:	e7e6      	b.n	8010542 <_strtod_l+0x892>
 8010574:	ea53 030a 	orrs.w	r3, r3, sl
 8010578:	d0aa      	beq.n	80104d0 <_strtod_l+0x820>
 801057a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801057c:	b1db      	cbz	r3, 80105b6 <_strtod_l+0x906>
 801057e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010580:	4213      	tst	r3, r2
 8010582:	d0ee      	beq.n	8010562 <_strtod_l+0x8b2>
 8010584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010586:	4650      	mov	r0, sl
 8010588:	4659      	mov	r1, fp
 801058a:	9a08      	ldr	r2, [sp, #32]
 801058c:	b1bb      	cbz	r3, 80105be <_strtod_l+0x90e>
 801058e:	f7ff fb6d 	bl	800fc6c <sulp>
 8010592:	4602      	mov	r2, r0
 8010594:	460b      	mov	r3, r1
 8010596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801059a:	f7ef fde7 	bl	800016c <__adddf3>
 801059e:	4682      	mov	sl, r0
 80105a0:	468b      	mov	fp, r1
 80105a2:	e7de      	b.n	8010562 <_strtod_l+0x8b2>
 80105a4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105a8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105ac:	f04f 3aff 	mov.w	sl, #4294967295
 80105b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105b4:	e7d5      	b.n	8010562 <_strtod_l+0x8b2>
 80105b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105b8:	ea13 0f0a 	tst.w	r3, sl
 80105bc:	e7e1      	b.n	8010582 <_strtod_l+0x8d2>
 80105be:	f7ff fb55 	bl	800fc6c <sulp>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105ca:	f7ef fdcd 	bl	8000168 <__aeabi_dsub>
 80105ce:	2200      	movs	r2, #0
 80105d0:	2300      	movs	r3, #0
 80105d2:	4682      	mov	sl, r0
 80105d4:	468b      	mov	fp, r1
 80105d6:	f7f0 f9e7 	bl	80009a8 <__aeabi_dcmpeq>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d0c1      	beq.n	8010562 <_strtod_l+0x8b2>
 80105de:	e619      	b.n	8010214 <_strtod_l+0x564>
 80105e0:	4641      	mov	r1, r8
 80105e2:	4620      	mov	r0, r4
 80105e4:	f7ff face 	bl	800fb84 <__ratio>
 80105e8:	2200      	movs	r2, #0
 80105ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80105ee:	4606      	mov	r6, r0
 80105f0:	460f      	mov	r7, r1
 80105f2:	f7f0 f9ed 	bl	80009d0 <__aeabi_dcmple>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d06d      	beq.n	80106d6 <_strtod_l+0xa26>
 80105fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d178      	bne.n	80106f2 <_strtod_l+0xa42>
 8010600:	f1ba 0f00 	cmp.w	sl, #0
 8010604:	d156      	bne.n	80106b4 <_strtod_l+0xa04>
 8010606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801060c:	2b00      	cmp	r3, #0
 801060e:	d158      	bne.n	80106c2 <_strtod_l+0xa12>
 8010610:	2200      	movs	r2, #0
 8010612:	4630      	mov	r0, r6
 8010614:	4639      	mov	r1, r7
 8010616:	4b5e      	ldr	r3, [pc, #376]	@ (8010790 <_strtod_l+0xae0>)
 8010618:	f7f0 f9d0 	bl	80009bc <__aeabi_dcmplt>
 801061c:	2800      	cmp	r0, #0
 801061e:	d157      	bne.n	80106d0 <_strtod_l+0xa20>
 8010620:	4630      	mov	r0, r6
 8010622:	4639      	mov	r1, r7
 8010624:	2200      	movs	r2, #0
 8010626:	4b5b      	ldr	r3, [pc, #364]	@ (8010794 <_strtod_l+0xae4>)
 8010628:	f7ef ff56 	bl	80004d8 <__aeabi_dmul>
 801062c:	4606      	mov	r6, r0
 801062e:	460f      	mov	r7, r1
 8010630:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010634:	9606      	str	r6, [sp, #24]
 8010636:	9307      	str	r3, [sp, #28]
 8010638:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801063c:	4d51      	ldr	r5, [pc, #324]	@ (8010784 <_strtod_l+0xad4>)
 801063e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010644:	401d      	ands	r5, r3
 8010646:	4b54      	ldr	r3, [pc, #336]	@ (8010798 <_strtod_l+0xae8>)
 8010648:	429d      	cmp	r5, r3
 801064a:	f040 80ab 	bne.w	80107a4 <_strtod_l+0xaf4>
 801064e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010650:	4650      	mov	r0, sl
 8010652:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010656:	4659      	mov	r1, fp
 8010658:	f7ff f9d4 	bl	800fa04 <__ulp>
 801065c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010660:	f7ef ff3a 	bl	80004d8 <__aeabi_dmul>
 8010664:	4652      	mov	r2, sl
 8010666:	465b      	mov	r3, fp
 8010668:	f7ef fd80 	bl	800016c <__adddf3>
 801066c:	460b      	mov	r3, r1
 801066e:	4945      	ldr	r1, [pc, #276]	@ (8010784 <_strtod_l+0xad4>)
 8010670:	4a4a      	ldr	r2, [pc, #296]	@ (801079c <_strtod_l+0xaec>)
 8010672:	4019      	ands	r1, r3
 8010674:	4291      	cmp	r1, r2
 8010676:	4682      	mov	sl, r0
 8010678:	d942      	bls.n	8010700 <_strtod_l+0xa50>
 801067a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801067c:	4b43      	ldr	r3, [pc, #268]	@ (801078c <_strtod_l+0xadc>)
 801067e:	429a      	cmp	r2, r3
 8010680:	d103      	bne.n	801068a <_strtod_l+0x9da>
 8010682:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010684:	3301      	adds	r3, #1
 8010686:	f43f ad32 	beq.w	80100ee <_strtod_l+0x43e>
 801068a:	f04f 3aff 	mov.w	sl, #4294967295
 801068e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 801078c <_strtod_l+0xadc>
 8010692:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010694:	9805      	ldr	r0, [sp, #20]
 8010696:	f7fe fe89 	bl	800f3ac <_Bfree>
 801069a:	4649      	mov	r1, r9
 801069c:	9805      	ldr	r0, [sp, #20]
 801069e:	f7fe fe85 	bl	800f3ac <_Bfree>
 80106a2:	4641      	mov	r1, r8
 80106a4:	9805      	ldr	r0, [sp, #20]
 80106a6:	f7fe fe81 	bl	800f3ac <_Bfree>
 80106aa:	4621      	mov	r1, r4
 80106ac:	9805      	ldr	r0, [sp, #20]
 80106ae:	f7fe fe7d 	bl	800f3ac <_Bfree>
 80106b2:	e61c      	b.n	80102ee <_strtod_l+0x63e>
 80106b4:	f1ba 0f01 	cmp.w	sl, #1
 80106b8:	d103      	bne.n	80106c2 <_strtod_l+0xa12>
 80106ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f43f ada9 	beq.w	8010214 <_strtod_l+0x564>
 80106c2:	2200      	movs	r2, #0
 80106c4:	4b36      	ldr	r3, [pc, #216]	@ (80107a0 <_strtod_l+0xaf0>)
 80106c6:	2600      	movs	r6, #0
 80106c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80106cc:	4f30      	ldr	r7, [pc, #192]	@ (8010790 <_strtod_l+0xae0>)
 80106ce:	e7b3      	b.n	8010638 <_strtod_l+0x988>
 80106d0:	2600      	movs	r6, #0
 80106d2:	4f30      	ldr	r7, [pc, #192]	@ (8010794 <_strtod_l+0xae4>)
 80106d4:	e7ac      	b.n	8010630 <_strtod_l+0x980>
 80106d6:	4630      	mov	r0, r6
 80106d8:	4639      	mov	r1, r7
 80106da:	4b2e      	ldr	r3, [pc, #184]	@ (8010794 <_strtod_l+0xae4>)
 80106dc:	2200      	movs	r2, #0
 80106de:	f7ef fefb 	bl	80004d8 <__aeabi_dmul>
 80106e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106e4:	4606      	mov	r6, r0
 80106e6:	460f      	mov	r7, r1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d0a1      	beq.n	8010630 <_strtod_l+0x980>
 80106ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106f0:	e7a2      	b.n	8010638 <_strtod_l+0x988>
 80106f2:	2200      	movs	r2, #0
 80106f4:	4b26      	ldr	r3, [pc, #152]	@ (8010790 <_strtod_l+0xae0>)
 80106f6:	4616      	mov	r6, r2
 80106f8:	461f      	mov	r7, r3
 80106fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80106fe:	e79b      	b.n	8010638 <_strtod_l+0x988>
 8010700:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010704:	9b08      	ldr	r3, [sp, #32]
 8010706:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1c1      	bne.n	8010692 <_strtod_l+0x9e2>
 801070e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010712:	0d1b      	lsrs	r3, r3, #20
 8010714:	051b      	lsls	r3, r3, #20
 8010716:	429d      	cmp	r5, r3
 8010718:	d1bb      	bne.n	8010692 <_strtod_l+0x9e2>
 801071a:	4630      	mov	r0, r6
 801071c:	4639      	mov	r1, r7
 801071e:	f7f0 fcf7 	bl	8001110 <__aeabi_d2lz>
 8010722:	f7ef feab 	bl	800047c <__aeabi_l2d>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	4630      	mov	r0, r6
 801072c:	4639      	mov	r1, r7
 801072e:	f7ef fd1b 	bl	8000168 <__aeabi_dsub>
 8010732:	460b      	mov	r3, r1
 8010734:	4602      	mov	r2, r0
 8010736:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801073a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801073e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010740:	ea46 060a 	orr.w	r6, r6, sl
 8010744:	431e      	orrs	r6, r3
 8010746:	d06a      	beq.n	801081e <_strtod_l+0xb6e>
 8010748:	a309      	add	r3, pc, #36	@ (adr r3, 8010770 <_strtod_l+0xac0>)
 801074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074e:	f7f0 f935 	bl	80009bc <__aeabi_dcmplt>
 8010752:	2800      	cmp	r0, #0
 8010754:	f47f acd6 	bne.w	8010104 <_strtod_l+0x454>
 8010758:	a307      	add	r3, pc, #28	@ (adr r3, 8010778 <_strtod_l+0xac8>)
 801075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010762:	f7f0 f949 	bl	80009f8 <__aeabi_dcmpgt>
 8010766:	2800      	cmp	r0, #0
 8010768:	d093      	beq.n	8010692 <_strtod_l+0x9e2>
 801076a:	e4cb      	b.n	8010104 <_strtod_l+0x454>
 801076c:	f3af 8000 	nop.w
 8010770:	94a03595 	.word	0x94a03595
 8010774:	3fdfffff 	.word	0x3fdfffff
 8010778:	35afe535 	.word	0x35afe535
 801077c:	3fe00000 	.word	0x3fe00000
 8010780:	39500000 	.word	0x39500000
 8010784:	7ff00000 	.word	0x7ff00000
 8010788:	000fffff 	.word	0x000fffff
 801078c:	7fefffff 	.word	0x7fefffff
 8010790:	3ff00000 	.word	0x3ff00000
 8010794:	3fe00000 	.word	0x3fe00000
 8010798:	7fe00000 	.word	0x7fe00000
 801079c:	7c9fffff 	.word	0x7c9fffff
 80107a0:	bff00000 	.word	0xbff00000
 80107a4:	9b08      	ldr	r3, [sp, #32]
 80107a6:	b323      	cbz	r3, 80107f2 <_strtod_l+0xb42>
 80107a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107ac:	d821      	bhi.n	80107f2 <_strtod_l+0xb42>
 80107ae:	a328      	add	r3, pc, #160	@ (adr r3, 8010850 <_strtod_l+0xba0>)
 80107b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b4:	4630      	mov	r0, r6
 80107b6:	4639      	mov	r1, r7
 80107b8:	f7f0 f90a 	bl	80009d0 <__aeabi_dcmple>
 80107bc:	b1a0      	cbz	r0, 80107e8 <_strtod_l+0xb38>
 80107be:	4639      	mov	r1, r7
 80107c0:	4630      	mov	r0, r6
 80107c2:	f7f0 f961 	bl	8000a88 <__aeabi_d2uiz>
 80107c6:	2801      	cmp	r0, #1
 80107c8:	bf38      	it	cc
 80107ca:	2001      	movcc	r0, #1
 80107cc:	f7ef fe0a 	bl	80003e4 <__aeabi_ui2d>
 80107d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107d2:	4606      	mov	r6, r0
 80107d4:	460f      	mov	r7, r1
 80107d6:	b9fb      	cbnz	r3, 8010818 <_strtod_l+0xb68>
 80107d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80107de:	9315      	str	r3, [sp, #84]	@ 0x54
 80107e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80107e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80107e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80107ee:	1b5b      	subs	r3, r3, r5
 80107f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80107f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80107fa:	f7ff f903 	bl	800fa04 <__ulp>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	4650      	mov	r0, sl
 8010804:	4659      	mov	r1, fp
 8010806:	f7ef fe67 	bl	80004d8 <__aeabi_dmul>
 801080a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801080e:	f7ef fcad 	bl	800016c <__adddf3>
 8010812:	4682      	mov	sl, r0
 8010814:	468b      	mov	fp, r1
 8010816:	e775      	b.n	8010704 <_strtod_l+0xa54>
 8010818:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801081c:	e7e0      	b.n	80107e0 <_strtod_l+0xb30>
 801081e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010858 <_strtod_l+0xba8>)
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f7f0 f8ca 	bl	80009bc <__aeabi_dcmplt>
 8010828:	e79d      	b.n	8010766 <_strtod_l+0xab6>
 801082a:	2300      	movs	r3, #0
 801082c:	930e      	str	r3, [sp, #56]	@ 0x38
 801082e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010830:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010832:	6013      	str	r3, [r2, #0]
 8010834:	f7ff ba79 	b.w	800fd2a <_strtod_l+0x7a>
 8010838:	2a65      	cmp	r2, #101	@ 0x65
 801083a:	f43f ab72 	beq.w	800ff22 <_strtod_l+0x272>
 801083e:	2a45      	cmp	r2, #69	@ 0x45
 8010840:	f43f ab6f 	beq.w	800ff22 <_strtod_l+0x272>
 8010844:	2301      	movs	r3, #1
 8010846:	f7ff bbaa 	b.w	800ff9e <_strtod_l+0x2ee>
 801084a:	bf00      	nop
 801084c:	f3af 8000 	nop.w
 8010850:	ffc00000 	.word	0xffc00000
 8010854:	41dfffff 	.word	0x41dfffff
 8010858:	94a03595 	.word	0x94a03595
 801085c:	3fcfffff 	.word	0x3fcfffff

08010860 <_strtod_r>:
 8010860:	4b01      	ldr	r3, [pc, #4]	@ (8010868 <_strtod_r+0x8>)
 8010862:	f7ff ba25 	b.w	800fcb0 <_strtod_l>
 8010866:	bf00      	nop
 8010868:	200001f0 	.word	0x200001f0

0801086c <_strtol_l.isra.0>:
 801086c:	2b24      	cmp	r3, #36	@ 0x24
 801086e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010872:	4686      	mov	lr, r0
 8010874:	4690      	mov	r8, r2
 8010876:	d801      	bhi.n	801087c <_strtol_l.isra.0+0x10>
 8010878:	2b01      	cmp	r3, #1
 801087a:	d106      	bne.n	801088a <_strtol_l.isra.0+0x1e>
 801087c:	f7fd fdba 	bl	800e3f4 <__errno>
 8010880:	2316      	movs	r3, #22
 8010882:	6003      	str	r3, [r0, #0]
 8010884:	2000      	movs	r0, #0
 8010886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801088a:	460d      	mov	r5, r1
 801088c:	4833      	ldr	r0, [pc, #204]	@ (801095c <_strtol_l.isra.0+0xf0>)
 801088e:	462a      	mov	r2, r5
 8010890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010894:	5d06      	ldrb	r6, [r0, r4]
 8010896:	f016 0608 	ands.w	r6, r6, #8
 801089a:	d1f8      	bne.n	801088e <_strtol_l.isra.0+0x22>
 801089c:	2c2d      	cmp	r4, #45	@ 0x2d
 801089e:	d110      	bne.n	80108c2 <_strtol_l.isra.0+0x56>
 80108a0:	2601      	movs	r6, #1
 80108a2:	782c      	ldrb	r4, [r5, #0]
 80108a4:	1c95      	adds	r5, r2, #2
 80108a6:	f033 0210 	bics.w	r2, r3, #16
 80108aa:	d115      	bne.n	80108d8 <_strtol_l.isra.0+0x6c>
 80108ac:	2c30      	cmp	r4, #48	@ 0x30
 80108ae:	d10d      	bne.n	80108cc <_strtol_l.isra.0+0x60>
 80108b0:	782a      	ldrb	r2, [r5, #0]
 80108b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80108b6:	2a58      	cmp	r2, #88	@ 0x58
 80108b8:	d108      	bne.n	80108cc <_strtol_l.isra.0+0x60>
 80108ba:	786c      	ldrb	r4, [r5, #1]
 80108bc:	3502      	adds	r5, #2
 80108be:	2310      	movs	r3, #16
 80108c0:	e00a      	b.n	80108d8 <_strtol_l.isra.0+0x6c>
 80108c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80108c4:	bf04      	itt	eq
 80108c6:	782c      	ldrbeq	r4, [r5, #0]
 80108c8:	1c95      	addeq	r5, r2, #2
 80108ca:	e7ec      	b.n	80108a6 <_strtol_l.isra.0+0x3a>
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1f6      	bne.n	80108be <_strtol_l.isra.0+0x52>
 80108d0:	2c30      	cmp	r4, #48	@ 0x30
 80108d2:	bf14      	ite	ne
 80108d4:	230a      	movne	r3, #10
 80108d6:	2308      	moveq	r3, #8
 80108d8:	2200      	movs	r2, #0
 80108da:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80108de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80108e2:	fbbc f9f3 	udiv	r9, ip, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80108ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80108f0:	2f09      	cmp	r7, #9
 80108f2:	d80f      	bhi.n	8010914 <_strtol_l.isra.0+0xa8>
 80108f4:	463c      	mov	r4, r7
 80108f6:	42a3      	cmp	r3, r4
 80108f8:	dd1b      	ble.n	8010932 <_strtol_l.isra.0+0xc6>
 80108fa:	1c57      	adds	r7, r2, #1
 80108fc:	d007      	beq.n	801090e <_strtol_l.isra.0+0xa2>
 80108fe:	4581      	cmp	r9, r0
 8010900:	d314      	bcc.n	801092c <_strtol_l.isra.0+0xc0>
 8010902:	d101      	bne.n	8010908 <_strtol_l.isra.0+0x9c>
 8010904:	45a2      	cmp	sl, r4
 8010906:	db11      	blt.n	801092c <_strtol_l.isra.0+0xc0>
 8010908:	2201      	movs	r2, #1
 801090a:	fb00 4003 	mla	r0, r0, r3, r4
 801090e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010912:	e7eb      	b.n	80108ec <_strtol_l.isra.0+0x80>
 8010914:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010918:	2f19      	cmp	r7, #25
 801091a:	d801      	bhi.n	8010920 <_strtol_l.isra.0+0xb4>
 801091c:	3c37      	subs	r4, #55	@ 0x37
 801091e:	e7ea      	b.n	80108f6 <_strtol_l.isra.0+0x8a>
 8010920:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010924:	2f19      	cmp	r7, #25
 8010926:	d804      	bhi.n	8010932 <_strtol_l.isra.0+0xc6>
 8010928:	3c57      	subs	r4, #87	@ 0x57
 801092a:	e7e4      	b.n	80108f6 <_strtol_l.isra.0+0x8a>
 801092c:	f04f 32ff 	mov.w	r2, #4294967295
 8010930:	e7ed      	b.n	801090e <_strtol_l.isra.0+0xa2>
 8010932:	1c53      	adds	r3, r2, #1
 8010934:	d108      	bne.n	8010948 <_strtol_l.isra.0+0xdc>
 8010936:	2322      	movs	r3, #34	@ 0x22
 8010938:	4660      	mov	r0, ip
 801093a:	f8ce 3000 	str.w	r3, [lr]
 801093e:	f1b8 0f00 	cmp.w	r8, #0
 8010942:	d0a0      	beq.n	8010886 <_strtol_l.isra.0+0x1a>
 8010944:	1e69      	subs	r1, r5, #1
 8010946:	e006      	b.n	8010956 <_strtol_l.isra.0+0xea>
 8010948:	b106      	cbz	r6, 801094c <_strtol_l.isra.0+0xe0>
 801094a:	4240      	negs	r0, r0
 801094c:	f1b8 0f00 	cmp.w	r8, #0
 8010950:	d099      	beq.n	8010886 <_strtol_l.isra.0+0x1a>
 8010952:	2a00      	cmp	r2, #0
 8010954:	d1f6      	bne.n	8010944 <_strtol_l.isra.0+0xd8>
 8010956:	f8c8 1000 	str.w	r1, [r8]
 801095a:	e794      	b.n	8010886 <_strtol_l.isra.0+0x1a>
 801095c:	08012d79 	.word	0x08012d79

08010960 <_strtol_r>:
 8010960:	f7ff bf84 	b.w	801086c <_strtol_l.isra.0>

08010964 <__ssputs_r>:
 8010964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010968:	461f      	mov	r7, r3
 801096a:	688e      	ldr	r6, [r1, #8]
 801096c:	4682      	mov	sl, r0
 801096e:	42be      	cmp	r6, r7
 8010970:	460c      	mov	r4, r1
 8010972:	4690      	mov	r8, r2
 8010974:	680b      	ldr	r3, [r1, #0]
 8010976:	d82d      	bhi.n	80109d4 <__ssputs_r+0x70>
 8010978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801097c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010980:	d026      	beq.n	80109d0 <__ssputs_r+0x6c>
 8010982:	6965      	ldr	r5, [r4, #20]
 8010984:	6909      	ldr	r1, [r1, #16]
 8010986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801098a:	eba3 0901 	sub.w	r9, r3, r1
 801098e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010992:	1c7b      	adds	r3, r7, #1
 8010994:	444b      	add	r3, r9
 8010996:	106d      	asrs	r5, r5, #1
 8010998:	429d      	cmp	r5, r3
 801099a:	bf38      	it	cc
 801099c:	461d      	movcc	r5, r3
 801099e:	0553      	lsls	r3, r2, #21
 80109a0:	d527      	bpl.n	80109f2 <__ssputs_r+0x8e>
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7fe fc36 	bl	800f214 <_malloc_r>
 80109a8:	4606      	mov	r6, r0
 80109aa:	b360      	cbz	r0, 8010a06 <__ssputs_r+0xa2>
 80109ac:	464a      	mov	r2, r9
 80109ae:	6921      	ldr	r1, [r4, #16]
 80109b0:	f000 fd8e 	bl	80114d0 <memcpy>
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80109ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109be:	81a3      	strh	r3, [r4, #12]
 80109c0:	6126      	str	r6, [r4, #16]
 80109c2:	444e      	add	r6, r9
 80109c4:	6026      	str	r6, [r4, #0]
 80109c6:	463e      	mov	r6, r7
 80109c8:	6165      	str	r5, [r4, #20]
 80109ca:	eba5 0509 	sub.w	r5, r5, r9
 80109ce:	60a5      	str	r5, [r4, #8]
 80109d0:	42be      	cmp	r6, r7
 80109d2:	d900      	bls.n	80109d6 <__ssputs_r+0x72>
 80109d4:	463e      	mov	r6, r7
 80109d6:	4632      	mov	r2, r6
 80109d8:	4641      	mov	r1, r8
 80109da:	6820      	ldr	r0, [r4, #0]
 80109dc:	f000 fd4d 	bl	801147a <memmove>
 80109e0:	2000      	movs	r0, #0
 80109e2:	68a3      	ldr	r3, [r4, #8]
 80109e4:	1b9b      	subs	r3, r3, r6
 80109e6:	60a3      	str	r3, [r4, #8]
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	4433      	add	r3, r6
 80109ec:	6023      	str	r3, [r4, #0]
 80109ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109f2:	462a      	mov	r2, r5
 80109f4:	f001 f8fd 	bl	8011bf2 <_realloc_r>
 80109f8:	4606      	mov	r6, r0
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d1e0      	bne.n	80109c0 <__ssputs_r+0x5c>
 80109fe:	4650      	mov	r0, sl
 8010a00:	6921      	ldr	r1, [r4, #16]
 8010a02:	f7fe fb95 	bl	800f130 <_free_r>
 8010a06:	230c      	movs	r3, #12
 8010a08:	f8ca 3000 	str.w	r3, [sl]
 8010a0c:	89a3      	ldrh	r3, [r4, #12]
 8010a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a16:	81a3      	strh	r3, [r4, #12]
 8010a18:	e7e9      	b.n	80109ee <__ssputs_r+0x8a>
	...

08010a1c <_svfiprintf_r>:
 8010a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a20:	4698      	mov	r8, r3
 8010a22:	898b      	ldrh	r3, [r1, #12]
 8010a24:	4607      	mov	r7, r0
 8010a26:	061b      	lsls	r3, r3, #24
 8010a28:	460d      	mov	r5, r1
 8010a2a:	4614      	mov	r4, r2
 8010a2c:	b09d      	sub	sp, #116	@ 0x74
 8010a2e:	d510      	bpl.n	8010a52 <_svfiprintf_r+0x36>
 8010a30:	690b      	ldr	r3, [r1, #16]
 8010a32:	b973      	cbnz	r3, 8010a52 <_svfiprintf_r+0x36>
 8010a34:	2140      	movs	r1, #64	@ 0x40
 8010a36:	f7fe fbed 	bl	800f214 <_malloc_r>
 8010a3a:	6028      	str	r0, [r5, #0]
 8010a3c:	6128      	str	r0, [r5, #16]
 8010a3e:	b930      	cbnz	r0, 8010a4e <_svfiprintf_r+0x32>
 8010a40:	230c      	movs	r3, #12
 8010a42:	603b      	str	r3, [r7, #0]
 8010a44:	f04f 30ff 	mov.w	r0, #4294967295
 8010a48:	b01d      	add	sp, #116	@ 0x74
 8010a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4e:	2340      	movs	r3, #64	@ 0x40
 8010a50:	616b      	str	r3, [r5, #20]
 8010a52:	2300      	movs	r3, #0
 8010a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a56:	2320      	movs	r3, #32
 8010a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a5c:	2330      	movs	r3, #48	@ 0x30
 8010a5e:	f04f 0901 	mov.w	r9, #1
 8010a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a66:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8010c00 <_svfiprintf_r+0x1e4>
 8010a6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a6e:	4623      	mov	r3, r4
 8010a70:	469a      	mov	sl, r3
 8010a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a76:	b10a      	cbz	r2, 8010a7c <_svfiprintf_r+0x60>
 8010a78:	2a25      	cmp	r2, #37	@ 0x25
 8010a7a:	d1f9      	bne.n	8010a70 <_svfiprintf_r+0x54>
 8010a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010a80:	d00b      	beq.n	8010a9a <_svfiprintf_r+0x7e>
 8010a82:	465b      	mov	r3, fp
 8010a84:	4622      	mov	r2, r4
 8010a86:	4629      	mov	r1, r5
 8010a88:	4638      	mov	r0, r7
 8010a8a:	f7ff ff6b 	bl	8010964 <__ssputs_r>
 8010a8e:	3001      	adds	r0, #1
 8010a90:	f000 80a7 	beq.w	8010be2 <_svfiprintf_r+0x1c6>
 8010a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a96:	445a      	add	r2, fp
 8010a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f000 809f 	beq.w	8010be2 <_svfiprintf_r+0x1c6>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010aae:	f10a 0a01 	add.w	sl, sl, #1
 8010ab2:	9304      	str	r3, [sp, #16]
 8010ab4:	9307      	str	r3, [sp, #28]
 8010ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8010abc:	4654      	mov	r4, sl
 8010abe:	2205      	movs	r2, #5
 8010ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ac4:	484e      	ldr	r0, [pc, #312]	@ (8010c00 <_svfiprintf_r+0x1e4>)
 8010ac6:	f7fd fcc2 	bl	800e44e <memchr>
 8010aca:	9a04      	ldr	r2, [sp, #16]
 8010acc:	b9d8      	cbnz	r0, 8010b06 <_svfiprintf_r+0xea>
 8010ace:	06d0      	lsls	r0, r2, #27
 8010ad0:	bf44      	itt	mi
 8010ad2:	2320      	movmi	r3, #32
 8010ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ad8:	0711      	lsls	r1, r2, #28
 8010ada:	bf44      	itt	mi
 8010adc:	232b      	movmi	r3, #43	@ 0x2b
 8010ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ae8:	d015      	beq.n	8010b16 <_svfiprintf_r+0xfa>
 8010aea:	4654      	mov	r4, sl
 8010aec:	2000      	movs	r0, #0
 8010aee:	f04f 0c0a 	mov.w	ip, #10
 8010af2:	9a07      	ldr	r2, [sp, #28]
 8010af4:	4621      	mov	r1, r4
 8010af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010afa:	3b30      	subs	r3, #48	@ 0x30
 8010afc:	2b09      	cmp	r3, #9
 8010afe:	d94b      	bls.n	8010b98 <_svfiprintf_r+0x17c>
 8010b00:	b1b0      	cbz	r0, 8010b30 <_svfiprintf_r+0x114>
 8010b02:	9207      	str	r2, [sp, #28]
 8010b04:	e014      	b.n	8010b30 <_svfiprintf_r+0x114>
 8010b06:	eba0 0308 	sub.w	r3, r0, r8
 8010b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	46a2      	mov	sl, r4
 8010b12:	9304      	str	r3, [sp, #16]
 8010b14:	e7d2      	b.n	8010abc <_svfiprintf_r+0xa0>
 8010b16:	9b03      	ldr	r3, [sp, #12]
 8010b18:	1d19      	adds	r1, r3, #4
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	9103      	str	r1, [sp, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	bfbb      	ittet	lt
 8010b22:	425b      	neglt	r3, r3
 8010b24:	f042 0202 	orrlt.w	r2, r2, #2
 8010b28:	9307      	strge	r3, [sp, #28]
 8010b2a:	9307      	strlt	r3, [sp, #28]
 8010b2c:	bfb8      	it	lt
 8010b2e:	9204      	strlt	r2, [sp, #16]
 8010b30:	7823      	ldrb	r3, [r4, #0]
 8010b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b34:	d10a      	bne.n	8010b4c <_svfiprintf_r+0x130>
 8010b36:	7863      	ldrb	r3, [r4, #1]
 8010b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b3a:	d132      	bne.n	8010ba2 <_svfiprintf_r+0x186>
 8010b3c:	9b03      	ldr	r3, [sp, #12]
 8010b3e:	3402      	adds	r4, #2
 8010b40:	1d1a      	adds	r2, r3, #4
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	9203      	str	r2, [sp, #12]
 8010b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b4a:	9305      	str	r3, [sp, #20]
 8010b4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8010c04 <_svfiprintf_r+0x1e8>
 8010b50:	2203      	movs	r2, #3
 8010b52:	4650      	mov	r0, sl
 8010b54:	7821      	ldrb	r1, [r4, #0]
 8010b56:	f7fd fc7a 	bl	800e44e <memchr>
 8010b5a:	b138      	cbz	r0, 8010b6c <_svfiprintf_r+0x150>
 8010b5c:	2240      	movs	r2, #64	@ 0x40
 8010b5e:	9b04      	ldr	r3, [sp, #16]
 8010b60:	eba0 000a 	sub.w	r0, r0, sl
 8010b64:	4082      	lsls	r2, r0
 8010b66:	4313      	orrs	r3, r2
 8010b68:	3401      	adds	r4, #1
 8010b6a:	9304      	str	r3, [sp, #16]
 8010b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b70:	2206      	movs	r2, #6
 8010b72:	4825      	ldr	r0, [pc, #148]	@ (8010c08 <_svfiprintf_r+0x1ec>)
 8010b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b78:	f7fd fc69 	bl	800e44e <memchr>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d036      	beq.n	8010bee <_svfiprintf_r+0x1d2>
 8010b80:	4b22      	ldr	r3, [pc, #136]	@ (8010c0c <_svfiprintf_r+0x1f0>)
 8010b82:	bb1b      	cbnz	r3, 8010bcc <_svfiprintf_r+0x1b0>
 8010b84:	9b03      	ldr	r3, [sp, #12]
 8010b86:	3307      	adds	r3, #7
 8010b88:	f023 0307 	bic.w	r3, r3, #7
 8010b8c:	3308      	adds	r3, #8
 8010b8e:	9303      	str	r3, [sp, #12]
 8010b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b92:	4433      	add	r3, r6
 8010b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b96:	e76a      	b.n	8010a6e <_svfiprintf_r+0x52>
 8010b98:	460c      	mov	r4, r1
 8010b9a:	2001      	movs	r0, #1
 8010b9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ba0:	e7a8      	b.n	8010af4 <_svfiprintf_r+0xd8>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f04f 0c0a 	mov.w	ip, #10
 8010ba8:	4619      	mov	r1, r3
 8010baa:	3401      	adds	r4, #1
 8010bac:	9305      	str	r3, [sp, #20]
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bb4:	3a30      	subs	r2, #48	@ 0x30
 8010bb6:	2a09      	cmp	r2, #9
 8010bb8:	d903      	bls.n	8010bc2 <_svfiprintf_r+0x1a6>
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d0c6      	beq.n	8010b4c <_svfiprintf_r+0x130>
 8010bbe:	9105      	str	r1, [sp, #20]
 8010bc0:	e7c4      	b.n	8010b4c <_svfiprintf_r+0x130>
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bca:	e7f0      	b.n	8010bae <_svfiprintf_r+0x192>
 8010bcc:	ab03      	add	r3, sp, #12
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	462a      	mov	r2, r5
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010c10 <_svfiprintf_r+0x1f4>)
 8010bd6:	a904      	add	r1, sp, #16
 8010bd8:	f7fc fc50 	bl	800d47c <_printf_float>
 8010bdc:	1c42      	adds	r2, r0, #1
 8010bde:	4606      	mov	r6, r0
 8010be0:	d1d6      	bne.n	8010b90 <_svfiprintf_r+0x174>
 8010be2:	89ab      	ldrh	r3, [r5, #12]
 8010be4:	065b      	lsls	r3, r3, #25
 8010be6:	f53f af2d 	bmi.w	8010a44 <_svfiprintf_r+0x28>
 8010bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bec:	e72c      	b.n	8010a48 <_svfiprintf_r+0x2c>
 8010bee:	ab03      	add	r3, sp, #12
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	462a      	mov	r2, r5
 8010bf4:	4638      	mov	r0, r7
 8010bf6:	4b06      	ldr	r3, [pc, #24]	@ (8010c10 <_svfiprintf_r+0x1f4>)
 8010bf8:	a904      	add	r1, sp, #16
 8010bfa:	f7fc fedd 	bl	800d9b8 <_printf_i>
 8010bfe:	e7ed      	b.n	8010bdc <_svfiprintf_r+0x1c0>
 8010c00:	08012b55 	.word	0x08012b55
 8010c04:	08012b5b 	.word	0x08012b5b
 8010c08:	08012b5f 	.word	0x08012b5f
 8010c0c:	0800d47d 	.word	0x0800d47d
 8010c10:	08010965 	.word	0x08010965

08010c14 <_sungetc_r>:
 8010c14:	b538      	push	{r3, r4, r5, lr}
 8010c16:	1c4b      	adds	r3, r1, #1
 8010c18:	4614      	mov	r4, r2
 8010c1a:	d103      	bne.n	8010c24 <_sungetc_r+0x10>
 8010c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8010c20:	4628      	mov	r0, r5
 8010c22:	bd38      	pop	{r3, r4, r5, pc}
 8010c24:	8993      	ldrh	r3, [r2, #12]
 8010c26:	b2cd      	uxtb	r5, r1
 8010c28:	f023 0320 	bic.w	r3, r3, #32
 8010c2c:	8193      	strh	r3, [r2, #12]
 8010c2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c30:	6852      	ldr	r2, [r2, #4]
 8010c32:	b18b      	cbz	r3, 8010c58 <_sungetc_r+0x44>
 8010c34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010c36:	4293      	cmp	r3, r2
 8010c38:	dd08      	ble.n	8010c4c <_sungetc_r+0x38>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	1e5a      	subs	r2, r3, #1
 8010c3e:	6022      	str	r2, [r4, #0]
 8010c40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010c44:	6863      	ldr	r3, [r4, #4]
 8010c46:	3301      	adds	r3, #1
 8010c48:	6063      	str	r3, [r4, #4]
 8010c4a:	e7e9      	b.n	8010c20 <_sungetc_r+0xc>
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	f000 fbdc 	bl	801140a <__submore>
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d0f1      	beq.n	8010c3a <_sungetc_r+0x26>
 8010c56:	e7e1      	b.n	8010c1c <_sungetc_r+0x8>
 8010c58:	6921      	ldr	r1, [r4, #16]
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	b151      	cbz	r1, 8010c74 <_sungetc_r+0x60>
 8010c5e:	4299      	cmp	r1, r3
 8010c60:	d208      	bcs.n	8010c74 <_sungetc_r+0x60>
 8010c62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010c66:	42a9      	cmp	r1, r5
 8010c68:	d104      	bne.n	8010c74 <_sungetc_r+0x60>
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	3201      	adds	r2, #1
 8010c6e:	6023      	str	r3, [r4, #0]
 8010c70:	6062      	str	r2, [r4, #4]
 8010c72:	e7d5      	b.n	8010c20 <_sungetc_r+0xc>
 8010c74:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010c78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c7e:	2303      	movs	r3, #3
 8010c80:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010c82:	4623      	mov	r3, r4
 8010c84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010c88:	6023      	str	r3, [r4, #0]
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e7dc      	b.n	8010c48 <_sungetc_r+0x34>

08010c8e <__ssrefill_r>:
 8010c8e:	b510      	push	{r4, lr}
 8010c90:	460c      	mov	r4, r1
 8010c92:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010c94:	b169      	cbz	r1, 8010cb2 <__ssrefill_r+0x24>
 8010c96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c9a:	4299      	cmp	r1, r3
 8010c9c:	d001      	beq.n	8010ca2 <__ssrefill_r+0x14>
 8010c9e:	f7fe fa47 	bl	800f130 <_free_r>
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ca6:	6360      	str	r0, [r4, #52]	@ 0x34
 8010ca8:	6063      	str	r3, [r4, #4]
 8010caa:	b113      	cbz	r3, 8010cb2 <__ssrefill_r+0x24>
 8010cac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010cae:	6023      	str	r3, [r4, #0]
 8010cb0:	bd10      	pop	{r4, pc}
 8010cb2:	6923      	ldr	r3, [r4, #16]
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	6023      	str	r3, [r4, #0]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	6063      	str	r3, [r4, #4]
 8010cbe:	89a3      	ldrh	r3, [r4, #12]
 8010cc0:	f043 0320 	orr.w	r3, r3, #32
 8010cc4:	81a3      	strh	r3, [r4, #12]
 8010cc6:	e7f3      	b.n	8010cb0 <__ssrefill_r+0x22>

08010cc8 <__ssvfiscanf_r>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	460c      	mov	r4, r1
 8010cce:	2100      	movs	r1, #0
 8010cd0:	4606      	mov	r6, r0
 8010cd2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8010cd6:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010cda:	49ab      	ldr	r1, [pc, #684]	@ (8010f88 <__ssvfiscanf_r+0x2c0>)
 8010cdc:	f10d 0804 	add.w	r8, sp, #4
 8010ce0:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010ce2:	49aa      	ldr	r1, [pc, #680]	@ (8010f8c <__ssvfiscanf_r+0x2c4>)
 8010ce4:	4faa      	ldr	r7, [pc, #680]	@ (8010f90 <__ssvfiscanf_r+0x2c8>)
 8010ce6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010cea:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010cec:	9300      	str	r3, [sp, #0]
 8010cee:	f892 9000 	ldrb.w	r9, [r2]
 8010cf2:	f1b9 0f00 	cmp.w	r9, #0
 8010cf6:	f000 8159 	beq.w	8010fac <__ssvfiscanf_r+0x2e4>
 8010cfa:	f817 3009 	ldrb.w	r3, [r7, r9]
 8010cfe:	1c55      	adds	r5, r2, #1
 8010d00:	f013 0308 	ands.w	r3, r3, #8
 8010d04:	d019      	beq.n	8010d3a <__ssvfiscanf_r+0x72>
 8010d06:	6863      	ldr	r3, [r4, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	dd0f      	ble.n	8010d2c <__ssvfiscanf_r+0x64>
 8010d0c:	6823      	ldr	r3, [r4, #0]
 8010d0e:	781a      	ldrb	r2, [r3, #0]
 8010d10:	5cba      	ldrb	r2, [r7, r2]
 8010d12:	0712      	lsls	r2, r2, #28
 8010d14:	d401      	bmi.n	8010d1a <__ssvfiscanf_r+0x52>
 8010d16:	462a      	mov	r2, r5
 8010d18:	e7e9      	b.n	8010cee <__ssvfiscanf_r+0x26>
 8010d1a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	3201      	adds	r2, #1
 8010d20:	9245      	str	r2, [sp, #276]	@ 0x114
 8010d22:	6862      	ldr	r2, [r4, #4]
 8010d24:	6023      	str	r3, [r4, #0]
 8010d26:	3a01      	subs	r2, #1
 8010d28:	6062      	str	r2, [r4, #4]
 8010d2a:	e7ec      	b.n	8010d06 <__ssvfiscanf_r+0x3e>
 8010d2c:	4621      	mov	r1, r4
 8010d2e:	4630      	mov	r0, r6
 8010d30:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010d32:	4798      	blx	r3
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d0e9      	beq.n	8010d0c <__ssvfiscanf_r+0x44>
 8010d38:	e7ed      	b.n	8010d16 <__ssvfiscanf_r+0x4e>
 8010d3a:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010d3e:	f040 8086 	bne.w	8010e4e <__ssvfiscanf_r+0x186>
 8010d42:	9341      	str	r3, [sp, #260]	@ 0x104
 8010d44:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010d46:	7853      	ldrb	r3, [r2, #1]
 8010d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d4a:	bf04      	itt	eq
 8010d4c:	2310      	moveq	r3, #16
 8010d4e:	1c95      	addeq	r5, r2, #2
 8010d50:	f04f 020a 	mov.w	r2, #10
 8010d54:	bf08      	it	eq
 8010d56:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010d58:	46aa      	mov	sl, r5
 8010d5a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010d5e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010d62:	2b09      	cmp	r3, #9
 8010d64:	d91e      	bls.n	8010da4 <__ssvfiscanf_r+0xdc>
 8010d66:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8010f94 <__ssvfiscanf_r+0x2cc>
 8010d6a:	2203      	movs	r2, #3
 8010d6c:	4658      	mov	r0, fp
 8010d6e:	f7fd fb6e 	bl	800e44e <memchr>
 8010d72:	b138      	cbz	r0, 8010d84 <__ssvfiscanf_r+0xbc>
 8010d74:	2301      	movs	r3, #1
 8010d76:	4655      	mov	r5, sl
 8010d78:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010d7a:	eba0 000b 	sub.w	r0, r0, fp
 8010d7e:	4083      	lsls	r3, r0
 8010d80:	4313      	orrs	r3, r2
 8010d82:	9341      	str	r3, [sp, #260]	@ 0x104
 8010d84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010d88:	2b78      	cmp	r3, #120	@ 0x78
 8010d8a:	d806      	bhi.n	8010d9a <__ssvfiscanf_r+0xd2>
 8010d8c:	2b57      	cmp	r3, #87	@ 0x57
 8010d8e:	d810      	bhi.n	8010db2 <__ssvfiscanf_r+0xea>
 8010d90:	2b25      	cmp	r3, #37	@ 0x25
 8010d92:	d05c      	beq.n	8010e4e <__ssvfiscanf_r+0x186>
 8010d94:	d856      	bhi.n	8010e44 <__ssvfiscanf_r+0x17c>
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d074      	beq.n	8010e84 <__ssvfiscanf_r+0x1bc>
 8010d9a:	2303      	movs	r3, #3
 8010d9c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010d9e:	230a      	movs	r3, #10
 8010da0:	9342      	str	r3, [sp, #264]	@ 0x108
 8010da2:	e087      	b.n	8010eb4 <__ssvfiscanf_r+0x1ec>
 8010da4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010da6:	4655      	mov	r5, sl
 8010da8:	fb02 1103 	mla	r1, r2, r3, r1
 8010dac:	3930      	subs	r1, #48	@ 0x30
 8010dae:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010db0:	e7d2      	b.n	8010d58 <__ssvfiscanf_r+0x90>
 8010db2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010db6:	2a20      	cmp	r2, #32
 8010db8:	d8ef      	bhi.n	8010d9a <__ssvfiscanf_r+0xd2>
 8010dba:	a101      	add	r1, pc, #4	@ (adr r1, 8010dc0 <__ssvfiscanf_r+0xf8>)
 8010dbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010dc0:	08010e93 	.word	0x08010e93
 8010dc4:	08010d9b 	.word	0x08010d9b
 8010dc8:	08010d9b 	.word	0x08010d9b
 8010dcc:	08010eed 	.word	0x08010eed
 8010dd0:	08010d9b 	.word	0x08010d9b
 8010dd4:	08010d9b 	.word	0x08010d9b
 8010dd8:	08010d9b 	.word	0x08010d9b
 8010ddc:	08010d9b 	.word	0x08010d9b
 8010de0:	08010d9b 	.word	0x08010d9b
 8010de4:	08010d9b 	.word	0x08010d9b
 8010de8:	08010d9b 	.word	0x08010d9b
 8010dec:	08010f03 	.word	0x08010f03
 8010df0:	08010ee9 	.word	0x08010ee9
 8010df4:	08010e4b 	.word	0x08010e4b
 8010df8:	08010e4b 	.word	0x08010e4b
 8010dfc:	08010e4b 	.word	0x08010e4b
 8010e00:	08010d9b 	.word	0x08010d9b
 8010e04:	08010ea5 	.word	0x08010ea5
 8010e08:	08010d9b 	.word	0x08010d9b
 8010e0c:	08010d9b 	.word	0x08010d9b
 8010e10:	08010d9b 	.word	0x08010d9b
 8010e14:	08010d9b 	.word	0x08010d9b
 8010e18:	08010f13 	.word	0x08010f13
 8010e1c:	08010ead 	.word	0x08010ead
 8010e20:	08010e8b 	.word	0x08010e8b
 8010e24:	08010d9b 	.word	0x08010d9b
 8010e28:	08010d9b 	.word	0x08010d9b
 8010e2c:	08010f0f 	.word	0x08010f0f
 8010e30:	08010d9b 	.word	0x08010d9b
 8010e34:	08010ee9 	.word	0x08010ee9
 8010e38:	08010d9b 	.word	0x08010d9b
 8010e3c:	08010d9b 	.word	0x08010d9b
 8010e40:	08010e93 	.word	0x08010e93
 8010e44:	3b45      	subs	r3, #69	@ 0x45
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	d8a7      	bhi.n	8010d9a <__ssvfiscanf_r+0xd2>
 8010e4a:	2305      	movs	r3, #5
 8010e4c:	e031      	b.n	8010eb2 <__ssvfiscanf_r+0x1ea>
 8010e4e:	6863      	ldr	r3, [r4, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dd0d      	ble.n	8010e70 <__ssvfiscanf_r+0x1a8>
 8010e54:	6823      	ldr	r3, [r4, #0]
 8010e56:	781a      	ldrb	r2, [r3, #0]
 8010e58:	454a      	cmp	r2, r9
 8010e5a:	f040 80a7 	bne.w	8010fac <__ssvfiscanf_r+0x2e4>
 8010e5e:	3301      	adds	r3, #1
 8010e60:	6862      	ldr	r2, [r4, #4]
 8010e62:	6023      	str	r3, [r4, #0]
 8010e64:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010e66:	3a01      	subs	r2, #1
 8010e68:	3301      	adds	r3, #1
 8010e6a:	6062      	str	r2, [r4, #4]
 8010e6c:	9345      	str	r3, [sp, #276]	@ 0x114
 8010e6e:	e752      	b.n	8010d16 <__ssvfiscanf_r+0x4e>
 8010e70:	4621      	mov	r1, r4
 8010e72:	4630      	mov	r0, r6
 8010e74:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010e76:	4798      	blx	r3
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d0eb      	beq.n	8010e54 <__ssvfiscanf_r+0x18c>
 8010e7c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f040 808c 	bne.w	8010f9c <__ssvfiscanf_r+0x2d4>
 8010e84:	f04f 30ff 	mov.w	r0, #4294967295
 8010e88:	e08c      	b.n	8010fa4 <__ssvfiscanf_r+0x2dc>
 8010e8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010e8c:	f042 0220 	orr.w	r2, r2, #32
 8010e90:	9241      	str	r2, [sp, #260]	@ 0x104
 8010e92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010e98:	9241      	str	r2, [sp, #260]	@ 0x104
 8010e9a:	2210      	movs	r2, #16
 8010e9c:	2b6e      	cmp	r3, #110	@ 0x6e
 8010e9e:	9242      	str	r2, [sp, #264]	@ 0x108
 8010ea0:	d902      	bls.n	8010ea8 <__ssvfiscanf_r+0x1e0>
 8010ea2:	e005      	b.n	8010eb0 <__ssvfiscanf_r+0x1e8>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	9342      	str	r3, [sp, #264]	@ 0x108
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	e002      	b.n	8010eb2 <__ssvfiscanf_r+0x1ea>
 8010eac:	2308      	movs	r3, #8
 8010eae:	9342      	str	r3, [sp, #264]	@ 0x108
 8010eb0:	2304      	movs	r3, #4
 8010eb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010eb4:	6863      	ldr	r3, [r4, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	dd39      	ble.n	8010f2e <__ssvfiscanf_r+0x266>
 8010eba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010ebc:	0659      	lsls	r1, r3, #25
 8010ebe:	d404      	bmi.n	8010eca <__ssvfiscanf_r+0x202>
 8010ec0:	6823      	ldr	r3, [r4, #0]
 8010ec2:	781a      	ldrb	r2, [r3, #0]
 8010ec4:	5cba      	ldrb	r2, [r7, r2]
 8010ec6:	0712      	lsls	r2, r2, #28
 8010ec8:	d438      	bmi.n	8010f3c <__ssvfiscanf_r+0x274>
 8010eca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	dc47      	bgt.n	8010f60 <__ssvfiscanf_r+0x298>
 8010ed0:	466b      	mov	r3, sp
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	a941      	add	r1, sp, #260	@ 0x104
 8010ed8:	f000 f86a 	bl	8010fb0 <_scanf_chars>
 8010edc:	2801      	cmp	r0, #1
 8010ede:	d065      	beq.n	8010fac <__ssvfiscanf_r+0x2e4>
 8010ee0:	2802      	cmp	r0, #2
 8010ee2:	f47f af18 	bne.w	8010d16 <__ssvfiscanf_r+0x4e>
 8010ee6:	e7c9      	b.n	8010e7c <__ssvfiscanf_r+0x1b4>
 8010ee8:	220a      	movs	r2, #10
 8010eea:	e7d7      	b.n	8010e9c <__ssvfiscanf_r+0x1d4>
 8010eec:	4629      	mov	r1, r5
 8010eee:	4640      	mov	r0, r8
 8010ef0:	f000 fa52 	bl	8011398 <__sccl>
 8010ef4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010efc:	9341      	str	r3, [sp, #260]	@ 0x104
 8010efe:	2301      	movs	r3, #1
 8010f00:	e7d7      	b.n	8010eb2 <__ssvfiscanf_r+0x1ea>
 8010f02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f08:	9341      	str	r3, [sp, #260]	@ 0x104
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	e7d1      	b.n	8010eb2 <__ssvfiscanf_r+0x1ea>
 8010f0e:	2302      	movs	r3, #2
 8010f10:	e7cf      	b.n	8010eb2 <__ssvfiscanf_r+0x1ea>
 8010f12:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010f14:	06c3      	lsls	r3, r0, #27
 8010f16:	f53f aefe 	bmi.w	8010d16 <__ssvfiscanf_r+0x4e>
 8010f1a:	9b00      	ldr	r3, [sp, #0]
 8010f1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010f1e:	1d19      	adds	r1, r3, #4
 8010f20:	9100      	str	r1, [sp, #0]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	07c0      	lsls	r0, r0, #31
 8010f26:	bf4c      	ite	mi
 8010f28:	801a      	strhmi	r2, [r3, #0]
 8010f2a:	601a      	strpl	r2, [r3, #0]
 8010f2c:	e6f3      	b.n	8010d16 <__ssvfiscanf_r+0x4e>
 8010f2e:	4621      	mov	r1, r4
 8010f30:	4630      	mov	r0, r6
 8010f32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010f34:	4798      	blx	r3
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d0bf      	beq.n	8010eba <__ssvfiscanf_r+0x1f2>
 8010f3a:	e79f      	b.n	8010e7c <__ssvfiscanf_r+0x1b4>
 8010f3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010f3e:	3201      	adds	r2, #1
 8010f40:	9245      	str	r2, [sp, #276]	@ 0x114
 8010f42:	6862      	ldr	r2, [r4, #4]
 8010f44:	3a01      	subs	r2, #1
 8010f46:	2a00      	cmp	r2, #0
 8010f48:	6062      	str	r2, [r4, #4]
 8010f4a:	dd02      	ble.n	8010f52 <__ssvfiscanf_r+0x28a>
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	6023      	str	r3, [r4, #0]
 8010f50:	e7b6      	b.n	8010ec0 <__ssvfiscanf_r+0x1f8>
 8010f52:	4621      	mov	r1, r4
 8010f54:	4630      	mov	r0, r6
 8010f56:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010f58:	4798      	blx	r3
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d0b0      	beq.n	8010ec0 <__ssvfiscanf_r+0x1f8>
 8010f5e:	e78d      	b.n	8010e7c <__ssvfiscanf_r+0x1b4>
 8010f60:	2b04      	cmp	r3, #4
 8010f62:	dc06      	bgt.n	8010f72 <__ssvfiscanf_r+0x2aa>
 8010f64:	466b      	mov	r3, sp
 8010f66:	4622      	mov	r2, r4
 8010f68:	4630      	mov	r0, r6
 8010f6a:	a941      	add	r1, sp, #260	@ 0x104
 8010f6c:	f000 f87a 	bl	8011064 <_scanf_i>
 8010f70:	e7b4      	b.n	8010edc <__ssvfiscanf_r+0x214>
 8010f72:	4b09      	ldr	r3, [pc, #36]	@ (8010f98 <__ssvfiscanf_r+0x2d0>)
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f43f aece 	beq.w	8010d16 <__ssvfiscanf_r+0x4e>
 8010f7a:	466b      	mov	r3, sp
 8010f7c:	4622      	mov	r2, r4
 8010f7e:	4630      	mov	r0, r6
 8010f80:	a941      	add	r1, sp, #260	@ 0x104
 8010f82:	f7fc fe37 	bl	800dbf4 <_scanf_float>
 8010f86:	e7a9      	b.n	8010edc <__ssvfiscanf_r+0x214>
 8010f88:	08010c15 	.word	0x08010c15
 8010f8c:	08010c8f 	.word	0x08010c8f
 8010f90:	08012d79 	.word	0x08012d79
 8010f94:	08012b5b 	.word	0x08012b5b
 8010f98:	0800dbf5 	.word	0x0800dbf5
 8010f9c:	89a3      	ldrh	r3, [r4, #12]
 8010f9e:	065b      	lsls	r3, r3, #25
 8010fa0:	f53f af70 	bmi.w	8010e84 <__ssvfiscanf_r+0x1bc>
 8010fa4:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010fae:	e7f9      	b.n	8010fa4 <__ssvfiscanf_r+0x2dc>

08010fb0 <_scanf_chars>:
 8010fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fb4:	4615      	mov	r5, r2
 8010fb6:	688a      	ldr	r2, [r1, #8]
 8010fb8:	4680      	mov	r8, r0
 8010fba:	460c      	mov	r4, r1
 8010fbc:	b932      	cbnz	r2, 8010fcc <_scanf_chars+0x1c>
 8010fbe:	698a      	ldr	r2, [r1, #24]
 8010fc0:	2a00      	cmp	r2, #0
 8010fc2:	bf14      	ite	ne
 8010fc4:	f04f 32ff 	movne.w	r2, #4294967295
 8010fc8:	2201      	moveq	r2, #1
 8010fca:	608a      	str	r2, [r1, #8]
 8010fcc:	2700      	movs	r7, #0
 8010fce:	6822      	ldr	r2, [r4, #0]
 8010fd0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8011060 <_scanf_chars+0xb0>
 8010fd4:	06d1      	lsls	r1, r2, #27
 8010fd6:	bf5f      	itttt	pl
 8010fd8:	681a      	ldrpl	r2, [r3, #0]
 8010fda:	1d11      	addpl	r1, r2, #4
 8010fdc:	6019      	strpl	r1, [r3, #0]
 8010fde:	6816      	ldrpl	r6, [r2, #0]
 8010fe0:	69a0      	ldr	r0, [r4, #24]
 8010fe2:	b188      	cbz	r0, 8011008 <_scanf_chars+0x58>
 8010fe4:	2801      	cmp	r0, #1
 8010fe6:	d107      	bne.n	8010ff8 <_scanf_chars+0x48>
 8010fe8:	682b      	ldr	r3, [r5, #0]
 8010fea:	781a      	ldrb	r2, [r3, #0]
 8010fec:	6963      	ldr	r3, [r4, #20]
 8010fee:	5c9b      	ldrb	r3, [r3, r2]
 8010ff0:	b953      	cbnz	r3, 8011008 <_scanf_chars+0x58>
 8010ff2:	2f00      	cmp	r7, #0
 8010ff4:	d031      	beq.n	801105a <_scanf_chars+0xaa>
 8010ff6:	e022      	b.n	801103e <_scanf_chars+0x8e>
 8010ff8:	2802      	cmp	r0, #2
 8010ffa:	d120      	bne.n	801103e <_scanf_chars+0x8e>
 8010ffc:	682b      	ldr	r3, [r5, #0]
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011004:	071b      	lsls	r3, r3, #28
 8011006:	d41a      	bmi.n	801103e <_scanf_chars+0x8e>
 8011008:	6823      	ldr	r3, [r4, #0]
 801100a:	3701      	adds	r7, #1
 801100c:	06da      	lsls	r2, r3, #27
 801100e:	bf5e      	ittt	pl
 8011010:	682b      	ldrpl	r3, [r5, #0]
 8011012:	781b      	ldrbpl	r3, [r3, #0]
 8011014:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011018:	682a      	ldr	r2, [r5, #0]
 801101a:	686b      	ldr	r3, [r5, #4]
 801101c:	3201      	adds	r2, #1
 801101e:	602a      	str	r2, [r5, #0]
 8011020:	68a2      	ldr	r2, [r4, #8]
 8011022:	3b01      	subs	r3, #1
 8011024:	3a01      	subs	r2, #1
 8011026:	606b      	str	r3, [r5, #4]
 8011028:	60a2      	str	r2, [r4, #8]
 801102a:	b142      	cbz	r2, 801103e <_scanf_chars+0x8e>
 801102c:	2b00      	cmp	r3, #0
 801102e:	dcd7      	bgt.n	8010fe0 <_scanf_chars+0x30>
 8011030:	4629      	mov	r1, r5
 8011032:	4640      	mov	r0, r8
 8011034:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011038:	4798      	blx	r3
 801103a:	2800      	cmp	r0, #0
 801103c:	d0d0      	beq.n	8010fe0 <_scanf_chars+0x30>
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	f013 0310 	ands.w	r3, r3, #16
 8011044:	d105      	bne.n	8011052 <_scanf_chars+0xa2>
 8011046:	68e2      	ldr	r2, [r4, #12]
 8011048:	3201      	adds	r2, #1
 801104a:	60e2      	str	r2, [r4, #12]
 801104c:	69a2      	ldr	r2, [r4, #24]
 801104e:	b102      	cbz	r2, 8011052 <_scanf_chars+0xa2>
 8011050:	7033      	strb	r3, [r6, #0]
 8011052:	2000      	movs	r0, #0
 8011054:	6923      	ldr	r3, [r4, #16]
 8011056:	443b      	add	r3, r7
 8011058:	6123      	str	r3, [r4, #16]
 801105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105e:	bf00      	nop
 8011060:	08012d79 	.word	0x08012d79

08011064 <_scanf_i>:
 8011064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011068:	460c      	mov	r4, r1
 801106a:	4698      	mov	r8, r3
 801106c:	4b72      	ldr	r3, [pc, #456]	@ (8011238 <_scanf_i+0x1d4>)
 801106e:	b087      	sub	sp, #28
 8011070:	4682      	mov	sl, r0
 8011072:	4616      	mov	r6, r2
 8011074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011078:	ab03      	add	r3, sp, #12
 801107a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801107e:	4b6f      	ldr	r3, [pc, #444]	@ (801123c <_scanf_i+0x1d8>)
 8011080:	69a1      	ldr	r1, [r4, #24]
 8011082:	4a6f      	ldr	r2, [pc, #444]	@ (8011240 <_scanf_i+0x1dc>)
 8011084:	4627      	mov	r7, r4
 8011086:	2903      	cmp	r1, #3
 8011088:	bf08      	it	eq
 801108a:	461a      	moveq	r2, r3
 801108c:	68a3      	ldr	r3, [r4, #8]
 801108e:	9201      	str	r2, [sp, #4]
 8011090:	1e5a      	subs	r2, r3, #1
 8011092:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011096:	bf81      	itttt	hi
 8011098:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801109c:	eb03 0905 	addhi.w	r9, r3, r5
 80110a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80110a4:	60a3      	strhi	r3, [r4, #8]
 80110a6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80110aa:	bf98      	it	ls
 80110ac:	f04f 0900 	movls.w	r9, #0
 80110b0:	463d      	mov	r5, r7
 80110b2:	f04f 0b00 	mov.w	fp, #0
 80110b6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80110ba:	6023      	str	r3, [r4, #0]
 80110bc:	6831      	ldr	r1, [r6, #0]
 80110be:	ab03      	add	r3, sp, #12
 80110c0:	2202      	movs	r2, #2
 80110c2:	7809      	ldrb	r1, [r1, #0]
 80110c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80110c8:	f7fd f9c1 	bl	800e44e <memchr>
 80110cc:	b328      	cbz	r0, 801111a <_scanf_i+0xb6>
 80110ce:	f1bb 0f01 	cmp.w	fp, #1
 80110d2:	d159      	bne.n	8011188 <_scanf_i+0x124>
 80110d4:	6862      	ldr	r2, [r4, #4]
 80110d6:	b92a      	cbnz	r2, 80110e4 <_scanf_i+0x80>
 80110d8:	2108      	movs	r1, #8
 80110da:	6822      	ldr	r2, [r4, #0]
 80110dc:	6061      	str	r1, [r4, #4]
 80110de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80110e2:	6022      	str	r2, [r4, #0]
 80110e4:	6822      	ldr	r2, [r4, #0]
 80110e6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80110ea:	6022      	str	r2, [r4, #0]
 80110ec:	68a2      	ldr	r2, [r4, #8]
 80110ee:	1e51      	subs	r1, r2, #1
 80110f0:	60a1      	str	r1, [r4, #8]
 80110f2:	b192      	cbz	r2, 801111a <_scanf_i+0xb6>
 80110f4:	6832      	ldr	r2, [r6, #0]
 80110f6:	1c51      	adds	r1, r2, #1
 80110f8:	6031      	str	r1, [r6, #0]
 80110fa:	7812      	ldrb	r2, [r2, #0]
 80110fc:	f805 2b01 	strb.w	r2, [r5], #1
 8011100:	6872      	ldr	r2, [r6, #4]
 8011102:	3a01      	subs	r2, #1
 8011104:	2a00      	cmp	r2, #0
 8011106:	6072      	str	r2, [r6, #4]
 8011108:	dc07      	bgt.n	801111a <_scanf_i+0xb6>
 801110a:	4631      	mov	r1, r6
 801110c:	4650      	mov	r0, sl
 801110e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011112:	4790      	blx	r2
 8011114:	2800      	cmp	r0, #0
 8011116:	f040 8085 	bne.w	8011224 <_scanf_i+0x1c0>
 801111a:	f10b 0b01 	add.w	fp, fp, #1
 801111e:	f1bb 0f03 	cmp.w	fp, #3
 8011122:	d1cb      	bne.n	80110bc <_scanf_i+0x58>
 8011124:	6863      	ldr	r3, [r4, #4]
 8011126:	b90b      	cbnz	r3, 801112c <_scanf_i+0xc8>
 8011128:	230a      	movs	r3, #10
 801112a:	6063      	str	r3, [r4, #4]
 801112c:	6863      	ldr	r3, [r4, #4]
 801112e:	4945      	ldr	r1, [pc, #276]	@ (8011244 <_scanf_i+0x1e0>)
 8011130:	6960      	ldr	r0, [r4, #20]
 8011132:	1ac9      	subs	r1, r1, r3
 8011134:	f000 f930 	bl	8011398 <__sccl>
 8011138:	f04f 0b00 	mov.w	fp, #0
 801113c:	68a3      	ldr	r3, [r4, #8]
 801113e:	6822      	ldr	r2, [r4, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d03d      	beq.n	80111c0 <_scanf_i+0x15c>
 8011144:	6831      	ldr	r1, [r6, #0]
 8011146:	6960      	ldr	r0, [r4, #20]
 8011148:	f891 c000 	ldrb.w	ip, [r1]
 801114c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011150:	2800      	cmp	r0, #0
 8011152:	d035      	beq.n	80111c0 <_scanf_i+0x15c>
 8011154:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011158:	d124      	bne.n	80111a4 <_scanf_i+0x140>
 801115a:	0510      	lsls	r0, r2, #20
 801115c:	d522      	bpl.n	80111a4 <_scanf_i+0x140>
 801115e:	f10b 0b01 	add.w	fp, fp, #1
 8011162:	f1b9 0f00 	cmp.w	r9, #0
 8011166:	d003      	beq.n	8011170 <_scanf_i+0x10c>
 8011168:	3301      	adds	r3, #1
 801116a:	f109 39ff 	add.w	r9, r9, #4294967295
 801116e:	60a3      	str	r3, [r4, #8]
 8011170:	6873      	ldr	r3, [r6, #4]
 8011172:	3b01      	subs	r3, #1
 8011174:	2b00      	cmp	r3, #0
 8011176:	6073      	str	r3, [r6, #4]
 8011178:	dd1b      	ble.n	80111b2 <_scanf_i+0x14e>
 801117a:	6833      	ldr	r3, [r6, #0]
 801117c:	3301      	adds	r3, #1
 801117e:	6033      	str	r3, [r6, #0]
 8011180:	68a3      	ldr	r3, [r4, #8]
 8011182:	3b01      	subs	r3, #1
 8011184:	60a3      	str	r3, [r4, #8]
 8011186:	e7d9      	b.n	801113c <_scanf_i+0xd8>
 8011188:	f1bb 0f02 	cmp.w	fp, #2
 801118c:	d1ae      	bne.n	80110ec <_scanf_i+0x88>
 801118e:	6822      	ldr	r2, [r4, #0]
 8011190:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011194:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011198:	d1c4      	bne.n	8011124 <_scanf_i+0xc0>
 801119a:	2110      	movs	r1, #16
 801119c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80111a0:	6061      	str	r1, [r4, #4]
 80111a2:	e7a2      	b.n	80110ea <_scanf_i+0x86>
 80111a4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80111a8:	6022      	str	r2, [r4, #0]
 80111aa:	780b      	ldrb	r3, [r1, #0]
 80111ac:	f805 3b01 	strb.w	r3, [r5], #1
 80111b0:	e7de      	b.n	8011170 <_scanf_i+0x10c>
 80111b2:	4631      	mov	r1, r6
 80111b4:	4650      	mov	r0, sl
 80111b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80111ba:	4798      	blx	r3
 80111bc:	2800      	cmp	r0, #0
 80111be:	d0df      	beq.n	8011180 <_scanf_i+0x11c>
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	05d9      	lsls	r1, r3, #23
 80111c4:	d50d      	bpl.n	80111e2 <_scanf_i+0x17e>
 80111c6:	42bd      	cmp	r5, r7
 80111c8:	d909      	bls.n	80111de <_scanf_i+0x17a>
 80111ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80111ce:	4632      	mov	r2, r6
 80111d0:	4650      	mov	r0, sl
 80111d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80111da:	4798      	blx	r3
 80111dc:	464d      	mov	r5, r9
 80111de:	42bd      	cmp	r5, r7
 80111e0:	d028      	beq.n	8011234 <_scanf_i+0x1d0>
 80111e2:	6822      	ldr	r2, [r4, #0]
 80111e4:	f012 0210 	ands.w	r2, r2, #16
 80111e8:	d113      	bne.n	8011212 <_scanf_i+0x1ae>
 80111ea:	702a      	strb	r2, [r5, #0]
 80111ec:	4639      	mov	r1, r7
 80111ee:	6863      	ldr	r3, [r4, #4]
 80111f0:	4650      	mov	r0, sl
 80111f2:	9e01      	ldr	r6, [sp, #4]
 80111f4:	47b0      	blx	r6
 80111f6:	f8d8 3000 	ldr.w	r3, [r8]
 80111fa:	6821      	ldr	r1, [r4, #0]
 80111fc:	1d1a      	adds	r2, r3, #4
 80111fe:	f8c8 2000 	str.w	r2, [r8]
 8011202:	f011 0f20 	tst.w	r1, #32
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	d00f      	beq.n	801122a <_scanf_i+0x1c6>
 801120a:	6018      	str	r0, [r3, #0]
 801120c:	68e3      	ldr	r3, [r4, #12]
 801120e:	3301      	adds	r3, #1
 8011210:	60e3      	str	r3, [r4, #12]
 8011212:	2000      	movs	r0, #0
 8011214:	6923      	ldr	r3, [r4, #16]
 8011216:	1bed      	subs	r5, r5, r7
 8011218:	445d      	add	r5, fp
 801121a:	442b      	add	r3, r5
 801121c:	6123      	str	r3, [r4, #16]
 801121e:	b007      	add	sp, #28
 8011220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011224:	f04f 0b00 	mov.w	fp, #0
 8011228:	e7ca      	b.n	80111c0 <_scanf_i+0x15c>
 801122a:	07ca      	lsls	r2, r1, #31
 801122c:	bf4c      	ite	mi
 801122e:	8018      	strhmi	r0, [r3, #0]
 8011230:	6018      	strpl	r0, [r3, #0]
 8011232:	e7eb      	b.n	801120c <_scanf_i+0x1a8>
 8011234:	2001      	movs	r0, #1
 8011236:	e7f2      	b.n	801121e <_scanf_i+0x1ba>
 8011238:	080129b0 	.word	0x080129b0
 801123c:	08010961 	.word	0x08010961
 8011240:	08011d2d 	.word	0x08011d2d
 8011244:	08012b76 	.word	0x08012b76

08011248 <__sflush_r>:
 8011248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	0716      	lsls	r6, r2, #28
 8011250:	4605      	mov	r5, r0
 8011252:	460c      	mov	r4, r1
 8011254:	d454      	bmi.n	8011300 <__sflush_r+0xb8>
 8011256:	684b      	ldr	r3, [r1, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	dc02      	bgt.n	8011262 <__sflush_r+0x1a>
 801125c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801125e:	2b00      	cmp	r3, #0
 8011260:	dd48      	ble.n	80112f4 <__sflush_r+0xac>
 8011262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011264:	2e00      	cmp	r6, #0
 8011266:	d045      	beq.n	80112f4 <__sflush_r+0xac>
 8011268:	2300      	movs	r3, #0
 801126a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801126e:	682f      	ldr	r7, [r5, #0]
 8011270:	6a21      	ldr	r1, [r4, #32]
 8011272:	602b      	str	r3, [r5, #0]
 8011274:	d030      	beq.n	80112d8 <__sflush_r+0x90>
 8011276:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011278:	89a3      	ldrh	r3, [r4, #12]
 801127a:	0759      	lsls	r1, r3, #29
 801127c:	d505      	bpl.n	801128a <__sflush_r+0x42>
 801127e:	6863      	ldr	r3, [r4, #4]
 8011280:	1ad2      	subs	r2, r2, r3
 8011282:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011284:	b10b      	cbz	r3, 801128a <__sflush_r+0x42>
 8011286:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011288:	1ad2      	subs	r2, r2, r3
 801128a:	2300      	movs	r3, #0
 801128c:	4628      	mov	r0, r5
 801128e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011290:	6a21      	ldr	r1, [r4, #32]
 8011292:	47b0      	blx	r6
 8011294:	1c43      	adds	r3, r0, #1
 8011296:	89a3      	ldrh	r3, [r4, #12]
 8011298:	d106      	bne.n	80112a8 <__sflush_r+0x60>
 801129a:	6829      	ldr	r1, [r5, #0]
 801129c:	291d      	cmp	r1, #29
 801129e:	d82b      	bhi.n	80112f8 <__sflush_r+0xb0>
 80112a0:	4a28      	ldr	r2, [pc, #160]	@ (8011344 <__sflush_r+0xfc>)
 80112a2:	40ca      	lsrs	r2, r1
 80112a4:	07d6      	lsls	r6, r2, #31
 80112a6:	d527      	bpl.n	80112f8 <__sflush_r+0xb0>
 80112a8:	2200      	movs	r2, #0
 80112aa:	6062      	str	r2, [r4, #4]
 80112ac:	6922      	ldr	r2, [r4, #16]
 80112ae:	04d9      	lsls	r1, r3, #19
 80112b0:	6022      	str	r2, [r4, #0]
 80112b2:	d504      	bpl.n	80112be <__sflush_r+0x76>
 80112b4:	1c42      	adds	r2, r0, #1
 80112b6:	d101      	bne.n	80112bc <__sflush_r+0x74>
 80112b8:	682b      	ldr	r3, [r5, #0]
 80112ba:	b903      	cbnz	r3, 80112be <__sflush_r+0x76>
 80112bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80112be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112c0:	602f      	str	r7, [r5, #0]
 80112c2:	b1b9      	cbz	r1, 80112f4 <__sflush_r+0xac>
 80112c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112c8:	4299      	cmp	r1, r3
 80112ca:	d002      	beq.n	80112d2 <__sflush_r+0x8a>
 80112cc:	4628      	mov	r0, r5
 80112ce:	f7fd ff2f 	bl	800f130 <_free_r>
 80112d2:	2300      	movs	r3, #0
 80112d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80112d6:	e00d      	b.n	80112f4 <__sflush_r+0xac>
 80112d8:	2301      	movs	r3, #1
 80112da:	4628      	mov	r0, r5
 80112dc:	47b0      	blx	r6
 80112de:	4602      	mov	r2, r0
 80112e0:	1c50      	adds	r0, r2, #1
 80112e2:	d1c9      	bne.n	8011278 <__sflush_r+0x30>
 80112e4:	682b      	ldr	r3, [r5, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0c6      	beq.n	8011278 <__sflush_r+0x30>
 80112ea:	2b1d      	cmp	r3, #29
 80112ec:	d001      	beq.n	80112f2 <__sflush_r+0xaa>
 80112ee:	2b16      	cmp	r3, #22
 80112f0:	d11d      	bne.n	801132e <__sflush_r+0xe6>
 80112f2:	602f      	str	r7, [r5, #0]
 80112f4:	2000      	movs	r0, #0
 80112f6:	e021      	b.n	801133c <__sflush_r+0xf4>
 80112f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112fc:	b21b      	sxth	r3, r3
 80112fe:	e01a      	b.n	8011336 <__sflush_r+0xee>
 8011300:	690f      	ldr	r7, [r1, #16]
 8011302:	2f00      	cmp	r7, #0
 8011304:	d0f6      	beq.n	80112f4 <__sflush_r+0xac>
 8011306:	0793      	lsls	r3, r2, #30
 8011308:	bf18      	it	ne
 801130a:	2300      	movne	r3, #0
 801130c:	680e      	ldr	r6, [r1, #0]
 801130e:	bf08      	it	eq
 8011310:	694b      	ldreq	r3, [r1, #20]
 8011312:	1bf6      	subs	r6, r6, r7
 8011314:	600f      	str	r7, [r1, #0]
 8011316:	608b      	str	r3, [r1, #8]
 8011318:	2e00      	cmp	r6, #0
 801131a:	ddeb      	ble.n	80112f4 <__sflush_r+0xac>
 801131c:	4633      	mov	r3, r6
 801131e:	463a      	mov	r2, r7
 8011320:	4628      	mov	r0, r5
 8011322:	6a21      	ldr	r1, [r4, #32]
 8011324:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8011328:	47e0      	blx	ip
 801132a:	2800      	cmp	r0, #0
 801132c:	dc07      	bgt.n	801133e <__sflush_r+0xf6>
 801132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011336:	f04f 30ff 	mov.w	r0, #4294967295
 801133a:	81a3      	strh	r3, [r4, #12]
 801133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801133e:	4407      	add	r7, r0
 8011340:	1a36      	subs	r6, r6, r0
 8011342:	e7e9      	b.n	8011318 <__sflush_r+0xd0>
 8011344:	20400001 	.word	0x20400001

08011348 <_fflush_r>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	690b      	ldr	r3, [r1, #16]
 801134c:	4605      	mov	r5, r0
 801134e:	460c      	mov	r4, r1
 8011350:	b913      	cbnz	r3, 8011358 <_fflush_r+0x10>
 8011352:	2500      	movs	r5, #0
 8011354:	4628      	mov	r0, r5
 8011356:	bd38      	pop	{r3, r4, r5, pc}
 8011358:	b118      	cbz	r0, 8011362 <_fflush_r+0x1a>
 801135a:	6a03      	ldr	r3, [r0, #32]
 801135c:	b90b      	cbnz	r3, 8011362 <_fflush_r+0x1a>
 801135e:	f7fc fedf 	bl	800e120 <__sinit>
 8011362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0f3      	beq.n	8011352 <_fflush_r+0xa>
 801136a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801136c:	07d0      	lsls	r0, r2, #31
 801136e:	d404      	bmi.n	801137a <_fflush_r+0x32>
 8011370:	0599      	lsls	r1, r3, #22
 8011372:	d402      	bmi.n	801137a <_fflush_r+0x32>
 8011374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011376:	f7fd f868 	bl	800e44a <__retarget_lock_acquire_recursive>
 801137a:	4628      	mov	r0, r5
 801137c:	4621      	mov	r1, r4
 801137e:	f7ff ff63 	bl	8011248 <__sflush_r>
 8011382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011384:	4605      	mov	r5, r0
 8011386:	07da      	lsls	r2, r3, #31
 8011388:	d4e4      	bmi.n	8011354 <_fflush_r+0xc>
 801138a:	89a3      	ldrh	r3, [r4, #12]
 801138c:	059b      	lsls	r3, r3, #22
 801138e:	d4e1      	bmi.n	8011354 <_fflush_r+0xc>
 8011390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011392:	f7fd f85b 	bl	800e44c <__retarget_lock_release_recursive>
 8011396:	e7dd      	b.n	8011354 <_fflush_r+0xc>

08011398 <__sccl>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	780b      	ldrb	r3, [r1, #0]
 801139c:	4604      	mov	r4, r0
 801139e:	2b5e      	cmp	r3, #94	@ 0x5e
 80113a0:	bf0b      	itete	eq
 80113a2:	784b      	ldrbeq	r3, [r1, #1]
 80113a4:	1c4a      	addne	r2, r1, #1
 80113a6:	1c8a      	addeq	r2, r1, #2
 80113a8:	2100      	movne	r1, #0
 80113aa:	bf08      	it	eq
 80113ac:	2101      	moveq	r1, #1
 80113ae:	3801      	subs	r0, #1
 80113b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80113b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80113b8:	42a8      	cmp	r0, r5
 80113ba:	d1fb      	bne.n	80113b4 <__sccl+0x1c>
 80113bc:	b90b      	cbnz	r3, 80113c2 <__sccl+0x2a>
 80113be:	1e50      	subs	r0, r2, #1
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
 80113c2:	f081 0101 	eor.w	r1, r1, #1
 80113c6:	4610      	mov	r0, r2
 80113c8:	54e1      	strb	r1, [r4, r3]
 80113ca:	4602      	mov	r2, r0
 80113cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80113d0:	2d2d      	cmp	r5, #45	@ 0x2d
 80113d2:	d005      	beq.n	80113e0 <__sccl+0x48>
 80113d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80113d6:	d016      	beq.n	8011406 <__sccl+0x6e>
 80113d8:	2d00      	cmp	r5, #0
 80113da:	d0f1      	beq.n	80113c0 <__sccl+0x28>
 80113dc:	462b      	mov	r3, r5
 80113de:	e7f2      	b.n	80113c6 <__sccl+0x2e>
 80113e0:	7846      	ldrb	r6, [r0, #1]
 80113e2:	2e5d      	cmp	r6, #93	@ 0x5d
 80113e4:	d0fa      	beq.n	80113dc <__sccl+0x44>
 80113e6:	42b3      	cmp	r3, r6
 80113e8:	dcf8      	bgt.n	80113dc <__sccl+0x44>
 80113ea:	461a      	mov	r2, r3
 80113ec:	3002      	adds	r0, #2
 80113ee:	3201      	adds	r2, #1
 80113f0:	4296      	cmp	r6, r2
 80113f2:	54a1      	strb	r1, [r4, r2]
 80113f4:	dcfb      	bgt.n	80113ee <__sccl+0x56>
 80113f6:	1af2      	subs	r2, r6, r3
 80113f8:	3a01      	subs	r2, #1
 80113fa:	42b3      	cmp	r3, r6
 80113fc:	bfa8      	it	ge
 80113fe:	2200      	movge	r2, #0
 8011400:	1c5d      	adds	r5, r3, #1
 8011402:	18ab      	adds	r3, r5, r2
 8011404:	e7e1      	b.n	80113ca <__sccl+0x32>
 8011406:	4610      	mov	r0, r2
 8011408:	e7da      	b.n	80113c0 <__sccl+0x28>

0801140a <__submore>:
 801140a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801140e:	460c      	mov	r4, r1
 8011410:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011416:	4299      	cmp	r1, r3
 8011418:	d11b      	bne.n	8011452 <__submore+0x48>
 801141a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801141e:	f7fd fef9 	bl	800f214 <_malloc_r>
 8011422:	b918      	cbnz	r0, 801142c <__submore+0x22>
 8011424:	f04f 30ff 	mov.w	r0, #4294967295
 8011428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801142c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011430:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011432:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011436:	6360      	str	r0, [r4, #52]	@ 0x34
 8011438:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801143c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011440:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011444:	7043      	strb	r3, [r0, #1]
 8011446:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801144a:	7003      	strb	r3, [r0, #0]
 801144c:	6020      	str	r0, [r4, #0]
 801144e:	2000      	movs	r0, #0
 8011450:	e7ea      	b.n	8011428 <__submore+0x1e>
 8011452:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011454:	0077      	lsls	r7, r6, #1
 8011456:	463a      	mov	r2, r7
 8011458:	f000 fbcb 	bl	8011bf2 <_realloc_r>
 801145c:	4605      	mov	r5, r0
 801145e:	2800      	cmp	r0, #0
 8011460:	d0e0      	beq.n	8011424 <__submore+0x1a>
 8011462:	eb00 0806 	add.w	r8, r0, r6
 8011466:	4601      	mov	r1, r0
 8011468:	4632      	mov	r2, r6
 801146a:	4640      	mov	r0, r8
 801146c:	f000 f830 	bl	80114d0 <memcpy>
 8011470:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011474:	f8c4 8000 	str.w	r8, [r4]
 8011478:	e7e9      	b.n	801144e <__submore+0x44>

0801147a <memmove>:
 801147a:	4288      	cmp	r0, r1
 801147c:	b510      	push	{r4, lr}
 801147e:	eb01 0402 	add.w	r4, r1, r2
 8011482:	d902      	bls.n	801148a <memmove+0x10>
 8011484:	4284      	cmp	r4, r0
 8011486:	4623      	mov	r3, r4
 8011488:	d807      	bhi.n	801149a <memmove+0x20>
 801148a:	1e43      	subs	r3, r0, #1
 801148c:	42a1      	cmp	r1, r4
 801148e:	d008      	beq.n	80114a2 <memmove+0x28>
 8011490:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011494:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011498:	e7f8      	b.n	801148c <memmove+0x12>
 801149a:	4601      	mov	r1, r0
 801149c:	4402      	add	r2, r0
 801149e:	428a      	cmp	r2, r1
 80114a0:	d100      	bne.n	80114a4 <memmove+0x2a>
 80114a2:	bd10      	pop	{r4, pc}
 80114a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114ac:	e7f7      	b.n	801149e <memmove+0x24>
	...

080114b0 <_sbrk_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	2300      	movs	r3, #0
 80114b4:	4d05      	ldr	r5, [pc, #20]	@ (80114cc <_sbrk_r+0x1c>)
 80114b6:	4604      	mov	r4, r0
 80114b8:	4608      	mov	r0, r1
 80114ba:	602b      	str	r3, [r5, #0]
 80114bc:	f7f2 fa4a 	bl	8003954 <_sbrk>
 80114c0:	1c43      	adds	r3, r0, #1
 80114c2:	d102      	bne.n	80114ca <_sbrk_r+0x1a>
 80114c4:	682b      	ldr	r3, [r5, #0]
 80114c6:	b103      	cbz	r3, 80114ca <_sbrk_r+0x1a>
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	20001b18 	.word	0x20001b18

080114d0 <memcpy>:
 80114d0:	440a      	add	r2, r1
 80114d2:	4291      	cmp	r1, r2
 80114d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80114d8:	d100      	bne.n	80114dc <memcpy+0xc>
 80114da:	4770      	bx	lr
 80114dc:	b510      	push	{r4, lr}
 80114de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114e2:	4291      	cmp	r1, r2
 80114e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114e8:	d1f9      	bne.n	80114de <memcpy+0xe>
 80114ea:	bd10      	pop	{r4, pc}

080114ec <nan>:
 80114ec:	2000      	movs	r0, #0
 80114ee:	4901      	ldr	r1, [pc, #4]	@ (80114f4 <nan+0x8>)
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	7ff80000 	.word	0x7ff80000

080114f8 <__assert_func>:
 80114f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114fa:	4614      	mov	r4, r2
 80114fc:	461a      	mov	r2, r3
 80114fe:	4b09      	ldr	r3, [pc, #36]	@ (8011524 <__assert_func+0x2c>)
 8011500:	4605      	mov	r5, r0
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	68d8      	ldr	r0, [r3, #12]
 8011506:	b14c      	cbz	r4, 801151c <__assert_func+0x24>
 8011508:	4b07      	ldr	r3, [pc, #28]	@ (8011528 <__assert_func+0x30>)
 801150a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801150e:	9100      	str	r1, [sp, #0]
 8011510:	462b      	mov	r3, r5
 8011512:	4906      	ldr	r1, [pc, #24]	@ (801152c <__assert_func+0x34>)
 8011514:	f000 fc1a 	bl	8011d4c <fiprintf>
 8011518:	f000 fc2a 	bl	8011d70 <abort>
 801151c:	4b04      	ldr	r3, [pc, #16]	@ (8011530 <__assert_func+0x38>)
 801151e:	461c      	mov	r4, r3
 8011520:	e7f3      	b.n	801150a <__assert_func+0x12>
 8011522:	bf00      	nop
 8011524:	200001a0 	.word	0x200001a0
 8011528:	08012b89 	.word	0x08012b89
 801152c:	08012b96 	.word	0x08012b96
 8011530:	08012bc4 	.word	0x08012bc4

08011534 <_calloc_r>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	fba1 5402 	umull	r5, r4, r1, r2
 801153a:	b934      	cbnz	r4, 801154a <_calloc_r+0x16>
 801153c:	4629      	mov	r1, r5
 801153e:	f7fd fe69 	bl	800f214 <_malloc_r>
 8011542:	4606      	mov	r6, r0
 8011544:	b928      	cbnz	r0, 8011552 <_calloc_r+0x1e>
 8011546:	4630      	mov	r0, r6
 8011548:	bd70      	pop	{r4, r5, r6, pc}
 801154a:	220c      	movs	r2, #12
 801154c:	2600      	movs	r6, #0
 801154e:	6002      	str	r2, [r0, #0]
 8011550:	e7f9      	b.n	8011546 <_calloc_r+0x12>
 8011552:	462a      	mov	r2, r5
 8011554:	4621      	mov	r1, r4
 8011556:	f7fc fee9 	bl	800e32c <memset>
 801155a:	e7f4      	b.n	8011546 <_calloc_r+0x12>

0801155c <rshift>:
 801155c:	6903      	ldr	r3, [r0, #16]
 801155e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011562:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011566:	f100 0414 	add.w	r4, r0, #20
 801156a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801156e:	dd46      	ble.n	80115fe <rshift+0xa2>
 8011570:	f011 011f 	ands.w	r1, r1, #31
 8011574:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011578:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801157c:	d10c      	bne.n	8011598 <rshift+0x3c>
 801157e:	4629      	mov	r1, r5
 8011580:	f100 0710 	add.w	r7, r0, #16
 8011584:	42b1      	cmp	r1, r6
 8011586:	d335      	bcc.n	80115f4 <rshift+0x98>
 8011588:	1a9b      	subs	r3, r3, r2
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	1eea      	subs	r2, r5, #3
 801158e:	4296      	cmp	r6, r2
 8011590:	bf38      	it	cc
 8011592:	2300      	movcc	r3, #0
 8011594:	4423      	add	r3, r4
 8011596:	e015      	b.n	80115c4 <rshift+0x68>
 8011598:	46a1      	mov	r9, r4
 801159a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801159e:	f1c1 0820 	rsb	r8, r1, #32
 80115a2:	40cf      	lsrs	r7, r1
 80115a4:	f105 0e04 	add.w	lr, r5, #4
 80115a8:	4576      	cmp	r6, lr
 80115aa:	46f4      	mov	ip, lr
 80115ac:	d816      	bhi.n	80115dc <rshift+0x80>
 80115ae:	1a9a      	subs	r2, r3, r2
 80115b0:	0092      	lsls	r2, r2, #2
 80115b2:	3a04      	subs	r2, #4
 80115b4:	3501      	adds	r5, #1
 80115b6:	42ae      	cmp	r6, r5
 80115b8:	bf38      	it	cc
 80115ba:	2200      	movcc	r2, #0
 80115bc:	18a3      	adds	r3, r4, r2
 80115be:	50a7      	str	r7, [r4, r2]
 80115c0:	b107      	cbz	r7, 80115c4 <rshift+0x68>
 80115c2:	3304      	adds	r3, #4
 80115c4:	42a3      	cmp	r3, r4
 80115c6:	eba3 0204 	sub.w	r2, r3, r4
 80115ca:	bf08      	it	eq
 80115cc:	2300      	moveq	r3, #0
 80115ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80115d2:	6102      	str	r2, [r0, #16]
 80115d4:	bf08      	it	eq
 80115d6:	6143      	streq	r3, [r0, #20]
 80115d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115dc:	f8dc c000 	ldr.w	ip, [ip]
 80115e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80115e4:	ea4c 0707 	orr.w	r7, ip, r7
 80115e8:	f849 7b04 	str.w	r7, [r9], #4
 80115ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80115f0:	40cf      	lsrs	r7, r1
 80115f2:	e7d9      	b.n	80115a8 <rshift+0x4c>
 80115f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80115f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80115fc:	e7c2      	b.n	8011584 <rshift+0x28>
 80115fe:	4623      	mov	r3, r4
 8011600:	e7e0      	b.n	80115c4 <rshift+0x68>

08011602 <__hexdig_fun>:
 8011602:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011606:	2b09      	cmp	r3, #9
 8011608:	d802      	bhi.n	8011610 <__hexdig_fun+0xe>
 801160a:	3820      	subs	r0, #32
 801160c:	b2c0      	uxtb	r0, r0
 801160e:	4770      	bx	lr
 8011610:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011614:	2b05      	cmp	r3, #5
 8011616:	d801      	bhi.n	801161c <__hexdig_fun+0x1a>
 8011618:	3847      	subs	r0, #71	@ 0x47
 801161a:	e7f7      	b.n	801160c <__hexdig_fun+0xa>
 801161c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011620:	2b05      	cmp	r3, #5
 8011622:	d801      	bhi.n	8011628 <__hexdig_fun+0x26>
 8011624:	3827      	subs	r0, #39	@ 0x27
 8011626:	e7f1      	b.n	801160c <__hexdig_fun+0xa>
 8011628:	2000      	movs	r0, #0
 801162a:	4770      	bx	lr

0801162c <__gethex>:
 801162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011630:	468a      	mov	sl, r1
 8011632:	4690      	mov	r8, r2
 8011634:	b085      	sub	sp, #20
 8011636:	9302      	str	r3, [sp, #8]
 8011638:	680b      	ldr	r3, [r1, #0]
 801163a:	9001      	str	r0, [sp, #4]
 801163c:	1c9c      	adds	r4, r3, #2
 801163e:	46a1      	mov	r9, r4
 8011640:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011644:	2830      	cmp	r0, #48	@ 0x30
 8011646:	d0fa      	beq.n	801163e <__gethex+0x12>
 8011648:	eba9 0303 	sub.w	r3, r9, r3
 801164c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011650:	f7ff ffd7 	bl	8011602 <__hexdig_fun>
 8011654:	4605      	mov	r5, r0
 8011656:	2800      	cmp	r0, #0
 8011658:	d168      	bne.n	801172c <__gethex+0x100>
 801165a:	2201      	movs	r2, #1
 801165c:	4648      	mov	r0, r9
 801165e:	499f      	ldr	r1, [pc, #636]	@ (80118dc <__gethex+0x2b0>)
 8011660:	f7fc fe6c 	bl	800e33c <strncmp>
 8011664:	4607      	mov	r7, r0
 8011666:	2800      	cmp	r0, #0
 8011668:	d167      	bne.n	801173a <__gethex+0x10e>
 801166a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801166e:	4626      	mov	r6, r4
 8011670:	f7ff ffc7 	bl	8011602 <__hexdig_fun>
 8011674:	2800      	cmp	r0, #0
 8011676:	d062      	beq.n	801173e <__gethex+0x112>
 8011678:	4623      	mov	r3, r4
 801167a:	7818      	ldrb	r0, [r3, #0]
 801167c:	4699      	mov	r9, r3
 801167e:	2830      	cmp	r0, #48	@ 0x30
 8011680:	f103 0301 	add.w	r3, r3, #1
 8011684:	d0f9      	beq.n	801167a <__gethex+0x4e>
 8011686:	f7ff ffbc 	bl	8011602 <__hexdig_fun>
 801168a:	fab0 f580 	clz	r5, r0
 801168e:	f04f 0b01 	mov.w	fp, #1
 8011692:	096d      	lsrs	r5, r5, #5
 8011694:	464a      	mov	r2, r9
 8011696:	4616      	mov	r6, r2
 8011698:	7830      	ldrb	r0, [r6, #0]
 801169a:	3201      	adds	r2, #1
 801169c:	f7ff ffb1 	bl	8011602 <__hexdig_fun>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	d1f8      	bne.n	8011696 <__gethex+0x6a>
 80116a4:	2201      	movs	r2, #1
 80116a6:	4630      	mov	r0, r6
 80116a8:	498c      	ldr	r1, [pc, #560]	@ (80118dc <__gethex+0x2b0>)
 80116aa:	f7fc fe47 	bl	800e33c <strncmp>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	d13f      	bne.n	8011732 <__gethex+0x106>
 80116b2:	b944      	cbnz	r4, 80116c6 <__gethex+0x9a>
 80116b4:	1c74      	adds	r4, r6, #1
 80116b6:	4622      	mov	r2, r4
 80116b8:	4616      	mov	r6, r2
 80116ba:	7830      	ldrb	r0, [r6, #0]
 80116bc:	3201      	adds	r2, #1
 80116be:	f7ff ffa0 	bl	8011602 <__hexdig_fun>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	d1f8      	bne.n	80116b8 <__gethex+0x8c>
 80116c6:	1ba4      	subs	r4, r4, r6
 80116c8:	00a7      	lsls	r7, r4, #2
 80116ca:	7833      	ldrb	r3, [r6, #0]
 80116cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80116d0:	2b50      	cmp	r3, #80	@ 0x50
 80116d2:	d13e      	bne.n	8011752 <__gethex+0x126>
 80116d4:	7873      	ldrb	r3, [r6, #1]
 80116d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80116d8:	d033      	beq.n	8011742 <__gethex+0x116>
 80116da:	2b2d      	cmp	r3, #45	@ 0x2d
 80116dc:	d034      	beq.n	8011748 <__gethex+0x11c>
 80116de:	2400      	movs	r4, #0
 80116e0:	1c71      	adds	r1, r6, #1
 80116e2:	7808      	ldrb	r0, [r1, #0]
 80116e4:	f7ff ff8d 	bl	8011602 <__hexdig_fun>
 80116e8:	1e43      	subs	r3, r0, #1
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b18      	cmp	r3, #24
 80116ee:	d830      	bhi.n	8011752 <__gethex+0x126>
 80116f0:	f1a0 0210 	sub.w	r2, r0, #16
 80116f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116f8:	f7ff ff83 	bl	8011602 <__hexdig_fun>
 80116fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8011700:	fa5f fc8c 	uxtb.w	ip, ip
 8011704:	f1bc 0f18 	cmp.w	ip, #24
 8011708:	f04f 030a 	mov.w	r3, #10
 801170c:	d91e      	bls.n	801174c <__gethex+0x120>
 801170e:	b104      	cbz	r4, 8011712 <__gethex+0xe6>
 8011710:	4252      	negs	r2, r2
 8011712:	4417      	add	r7, r2
 8011714:	f8ca 1000 	str.w	r1, [sl]
 8011718:	b1ed      	cbz	r5, 8011756 <__gethex+0x12a>
 801171a:	f1bb 0f00 	cmp.w	fp, #0
 801171e:	bf0c      	ite	eq
 8011720:	2506      	moveq	r5, #6
 8011722:	2500      	movne	r5, #0
 8011724:	4628      	mov	r0, r5
 8011726:	b005      	add	sp, #20
 8011728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172c:	2500      	movs	r5, #0
 801172e:	462c      	mov	r4, r5
 8011730:	e7b0      	b.n	8011694 <__gethex+0x68>
 8011732:	2c00      	cmp	r4, #0
 8011734:	d1c7      	bne.n	80116c6 <__gethex+0x9a>
 8011736:	4627      	mov	r7, r4
 8011738:	e7c7      	b.n	80116ca <__gethex+0x9e>
 801173a:	464e      	mov	r6, r9
 801173c:	462f      	mov	r7, r5
 801173e:	2501      	movs	r5, #1
 8011740:	e7c3      	b.n	80116ca <__gethex+0x9e>
 8011742:	2400      	movs	r4, #0
 8011744:	1cb1      	adds	r1, r6, #2
 8011746:	e7cc      	b.n	80116e2 <__gethex+0xb6>
 8011748:	2401      	movs	r4, #1
 801174a:	e7fb      	b.n	8011744 <__gethex+0x118>
 801174c:	fb03 0002 	mla	r0, r3, r2, r0
 8011750:	e7ce      	b.n	80116f0 <__gethex+0xc4>
 8011752:	4631      	mov	r1, r6
 8011754:	e7de      	b.n	8011714 <__gethex+0xe8>
 8011756:	4629      	mov	r1, r5
 8011758:	eba6 0309 	sub.w	r3, r6, r9
 801175c:	3b01      	subs	r3, #1
 801175e:	2b07      	cmp	r3, #7
 8011760:	dc0a      	bgt.n	8011778 <__gethex+0x14c>
 8011762:	9801      	ldr	r0, [sp, #4]
 8011764:	f7fd fde2 	bl	800f32c <_Balloc>
 8011768:	4604      	mov	r4, r0
 801176a:	b940      	cbnz	r0, 801177e <__gethex+0x152>
 801176c:	4602      	mov	r2, r0
 801176e:	21e4      	movs	r1, #228	@ 0xe4
 8011770:	4b5b      	ldr	r3, [pc, #364]	@ (80118e0 <__gethex+0x2b4>)
 8011772:	485c      	ldr	r0, [pc, #368]	@ (80118e4 <__gethex+0x2b8>)
 8011774:	f7ff fec0 	bl	80114f8 <__assert_func>
 8011778:	3101      	adds	r1, #1
 801177a:	105b      	asrs	r3, r3, #1
 801177c:	e7ef      	b.n	801175e <__gethex+0x132>
 801177e:	2300      	movs	r3, #0
 8011780:	f100 0a14 	add.w	sl, r0, #20
 8011784:	4655      	mov	r5, sl
 8011786:	469b      	mov	fp, r3
 8011788:	45b1      	cmp	r9, r6
 801178a:	d337      	bcc.n	80117fc <__gethex+0x1d0>
 801178c:	f845 bb04 	str.w	fp, [r5], #4
 8011790:	eba5 050a 	sub.w	r5, r5, sl
 8011794:	10ad      	asrs	r5, r5, #2
 8011796:	6125      	str	r5, [r4, #16]
 8011798:	4658      	mov	r0, fp
 801179a:	f7fd feb9 	bl	800f510 <__hi0bits>
 801179e:	016d      	lsls	r5, r5, #5
 80117a0:	f8d8 6000 	ldr.w	r6, [r8]
 80117a4:	1a2d      	subs	r5, r5, r0
 80117a6:	42b5      	cmp	r5, r6
 80117a8:	dd54      	ble.n	8011854 <__gethex+0x228>
 80117aa:	1bad      	subs	r5, r5, r6
 80117ac:	4629      	mov	r1, r5
 80117ae:	4620      	mov	r0, r4
 80117b0:	f7fe fa3b 	bl	800fc2a <__any_on>
 80117b4:	4681      	mov	r9, r0
 80117b6:	b178      	cbz	r0, 80117d8 <__gethex+0x1ac>
 80117b8:	f04f 0901 	mov.w	r9, #1
 80117bc:	1e6b      	subs	r3, r5, #1
 80117be:	1159      	asrs	r1, r3, #5
 80117c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80117c4:	f003 021f 	and.w	r2, r3, #31
 80117c8:	fa09 f202 	lsl.w	r2, r9, r2
 80117cc:	420a      	tst	r2, r1
 80117ce:	d003      	beq.n	80117d8 <__gethex+0x1ac>
 80117d0:	454b      	cmp	r3, r9
 80117d2:	dc36      	bgt.n	8011842 <__gethex+0x216>
 80117d4:	f04f 0902 	mov.w	r9, #2
 80117d8:	4629      	mov	r1, r5
 80117da:	4620      	mov	r0, r4
 80117dc:	f7ff febe 	bl	801155c <rshift>
 80117e0:	442f      	add	r7, r5
 80117e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117e6:	42bb      	cmp	r3, r7
 80117e8:	da42      	bge.n	8011870 <__gethex+0x244>
 80117ea:	4621      	mov	r1, r4
 80117ec:	9801      	ldr	r0, [sp, #4]
 80117ee:	f7fd fddd 	bl	800f3ac <_Bfree>
 80117f2:	2300      	movs	r3, #0
 80117f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117f6:	25a3      	movs	r5, #163	@ 0xa3
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	e793      	b.n	8011724 <__gethex+0xf8>
 80117fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011800:	2a2e      	cmp	r2, #46	@ 0x2e
 8011802:	d012      	beq.n	801182a <__gethex+0x1fe>
 8011804:	2b20      	cmp	r3, #32
 8011806:	d104      	bne.n	8011812 <__gethex+0x1e6>
 8011808:	f845 bb04 	str.w	fp, [r5], #4
 801180c:	f04f 0b00 	mov.w	fp, #0
 8011810:	465b      	mov	r3, fp
 8011812:	7830      	ldrb	r0, [r6, #0]
 8011814:	9303      	str	r3, [sp, #12]
 8011816:	f7ff fef4 	bl	8011602 <__hexdig_fun>
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	f000 000f 	and.w	r0, r0, #15
 8011820:	4098      	lsls	r0, r3
 8011822:	ea4b 0b00 	orr.w	fp, fp, r0
 8011826:	3304      	adds	r3, #4
 8011828:	e7ae      	b.n	8011788 <__gethex+0x15c>
 801182a:	45b1      	cmp	r9, r6
 801182c:	d8ea      	bhi.n	8011804 <__gethex+0x1d8>
 801182e:	2201      	movs	r2, #1
 8011830:	4630      	mov	r0, r6
 8011832:	492a      	ldr	r1, [pc, #168]	@ (80118dc <__gethex+0x2b0>)
 8011834:	9303      	str	r3, [sp, #12]
 8011836:	f7fc fd81 	bl	800e33c <strncmp>
 801183a:	9b03      	ldr	r3, [sp, #12]
 801183c:	2800      	cmp	r0, #0
 801183e:	d1e1      	bne.n	8011804 <__gethex+0x1d8>
 8011840:	e7a2      	b.n	8011788 <__gethex+0x15c>
 8011842:	4620      	mov	r0, r4
 8011844:	1ea9      	subs	r1, r5, #2
 8011846:	f7fe f9f0 	bl	800fc2a <__any_on>
 801184a:	2800      	cmp	r0, #0
 801184c:	d0c2      	beq.n	80117d4 <__gethex+0x1a8>
 801184e:	f04f 0903 	mov.w	r9, #3
 8011852:	e7c1      	b.n	80117d8 <__gethex+0x1ac>
 8011854:	da09      	bge.n	801186a <__gethex+0x23e>
 8011856:	1b75      	subs	r5, r6, r5
 8011858:	4621      	mov	r1, r4
 801185a:	462a      	mov	r2, r5
 801185c:	9801      	ldr	r0, [sp, #4]
 801185e:	f7fd ffb5 	bl	800f7cc <__lshift>
 8011862:	4604      	mov	r4, r0
 8011864:	1b7f      	subs	r7, r7, r5
 8011866:	f100 0a14 	add.w	sl, r0, #20
 801186a:	f04f 0900 	mov.w	r9, #0
 801186e:	e7b8      	b.n	80117e2 <__gethex+0x1b6>
 8011870:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011874:	42bd      	cmp	r5, r7
 8011876:	dd6f      	ble.n	8011958 <__gethex+0x32c>
 8011878:	1bed      	subs	r5, r5, r7
 801187a:	42ae      	cmp	r6, r5
 801187c:	dc34      	bgt.n	80118e8 <__gethex+0x2bc>
 801187e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011882:	2b02      	cmp	r3, #2
 8011884:	d022      	beq.n	80118cc <__gethex+0x2a0>
 8011886:	2b03      	cmp	r3, #3
 8011888:	d024      	beq.n	80118d4 <__gethex+0x2a8>
 801188a:	2b01      	cmp	r3, #1
 801188c:	d115      	bne.n	80118ba <__gethex+0x28e>
 801188e:	42ae      	cmp	r6, r5
 8011890:	d113      	bne.n	80118ba <__gethex+0x28e>
 8011892:	2e01      	cmp	r6, #1
 8011894:	d10b      	bne.n	80118ae <__gethex+0x282>
 8011896:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801189a:	9a02      	ldr	r2, [sp, #8]
 801189c:	2562      	movs	r5, #98	@ 0x62
 801189e:	6013      	str	r3, [r2, #0]
 80118a0:	2301      	movs	r3, #1
 80118a2:	6123      	str	r3, [r4, #16]
 80118a4:	f8ca 3000 	str.w	r3, [sl]
 80118a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118aa:	601c      	str	r4, [r3, #0]
 80118ac:	e73a      	b.n	8011724 <__gethex+0xf8>
 80118ae:	4620      	mov	r0, r4
 80118b0:	1e71      	subs	r1, r6, #1
 80118b2:	f7fe f9ba 	bl	800fc2a <__any_on>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	d1ed      	bne.n	8011896 <__gethex+0x26a>
 80118ba:	4621      	mov	r1, r4
 80118bc:	9801      	ldr	r0, [sp, #4]
 80118be:	f7fd fd75 	bl	800f3ac <_Bfree>
 80118c2:	2300      	movs	r3, #0
 80118c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118c6:	2550      	movs	r5, #80	@ 0x50
 80118c8:	6013      	str	r3, [r2, #0]
 80118ca:	e72b      	b.n	8011724 <__gethex+0xf8>
 80118cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1f3      	bne.n	80118ba <__gethex+0x28e>
 80118d2:	e7e0      	b.n	8011896 <__gethex+0x26a>
 80118d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d1dd      	bne.n	8011896 <__gethex+0x26a>
 80118da:	e7ee      	b.n	80118ba <__gethex+0x28e>
 80118dc:	08012b53 	.word	0x08012b53
 80118e0:	08012ae9 	.word	0x08012ae9
 80118e4:	08012bc5 	.word	0x08012bc5
 80118e8:	1e6f      	subs	r7, r5, #1
 80118ea:	f1b9 0f00 	cmp.w	r9, #0
 80118ee:	d130      	bne.n	8011952 <__gethex+0x326>
 80118f0:	b127      	cbz	r7, 80118fc <__gethex+0x2d0>
 80118f2:	4639      	mov	r1, r7
 80118f4:	4620      	mov	r0, r4
 80118f6:	f7fe f998 	bl	800fc2a <__any_on>
 80118fa:	4681      	mov	r9, r0
 80118fc:	2301      	movs	r3, #1
 80118fe:	4629      	mov	r1, r5
 8011900:	1b76      	subs	r6, r6, r5
 8011902:	2502      	movs	r5, #2
 8011904:	117a      	asrs	r2, r7, #5
 8011906:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801190a:	f007 071f 	and.w	r7, r7, #31
 801190e:	40bb      	lsls	r3, r7
 8011910:	4213      	tst	r3, r2
 8011912:	4620      	mov	r0, r4
 8011914:	bf18      	it	ne
 8011916:	f049 0902 	orrne.w	r9, r9, #2
 801191a:	f7ff fe1f 	bl	801155c <rshift>
 801191e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011922:	f1b9 0f00 	cmp.w	r9, #0
 8011926:	d047      	beq.n	80119b8 <__gethex+0x38c>
 8011928:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801192c:	2b02      	cmp	r3, #2
 801192e:	d015      	beq.n	801195c <__gethex+0x330>
 8011930:	2b03      	cmp	r3, #3
 8011932:	d017      	beq.n	8011964 <__gethex+0x338>
 8011934:	2b01      	cmp	r3, #1
 8011936:	d109      	bne.n	801194c <__gethex+0x320>
 8011938:	f019 0f02 	tst.w	r9, #2
 801193c:	d006      	beq.n	801194c <__gethex+0x320>
 801193e:	f8da 3000 	ldr.w	r3, [sl]
 8011942:	ea49 0903 	orr.w	r9, r9, r3
 8011946:	f019 0f01 	tst.w	r9, #1
 801194a:	d10e      	bne.n	801196a <__gethex+0x33e>
 801194c:	f045 0510 	orr.w	r5, r5, #16
 8011950:	e032      	b.n	80119b8 <__gethex+0x38c>
 8011952:	f04f 0901 	mov.w	r9, #1
 8011956:	e7d1      	b.n	80118fc <__gethex+0x2d0>
 8011958:	2501      	movs	r5, #1
 801195a:	e7e2      	b.n	8011922 <__gethex+0x2f6>
 801195c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801195e:	f1c3 0301 	rsb	r3, r3, #1
 8011962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011966:	2b00      	cmp	r3, #0
 8011968:	d0f0      	beq.n	801194c <__gethex+0x320>
 801196a:	f04f 0c00 	mov.w	ip, #0
 801196e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011972:	f104 0314 	add.w	r3, r4, #20
 8011976:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801197a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801197e:	4618      	mov	r0, r3
 8011980:	f853 2b04 	ldr.w	r2, [r3], #4
 8011984:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011988:	d01b      	beq.n	80119c2 <__gethex+0x396>
 801198a:	3201      	adds	r2, #1
 801198c:	6002      	str	r2, [r0, #0]
 801198e:	2d02      	cmp	r5, #2
 8011990:	f104 0314 	add.w	r3, r4, #20
 8011994:	d13c      	bne.n	8011a10 <__gethex+0x3e4>
 8011996:	f8d8 2000 	ldr.w	r2, [r8]
 801199a:	3a01      	subs	r2, #1
 801199c:	42b2      	cmp	r2, r6
 801199e:	d109      	bne.n	80119b4 <__gethex+0x388>
 80119a0:	2201      	movs	r2, #1
 80119a2:	1171      	asrs	r1, r6, #5
 80119a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119a8:	f006 061f 	and.w	r6, r6, #31
 80119ac:	fa02 f606 	lsl.w	r6, r2, r6
 80119b0:	421e      	tst	r6, r3
 80119b2:	d13a      	bne.n	8011a2a <__gethex+0x3fe>
 80119b4:	f045 0520 	orr.w	r5, r5, #32
 80119b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119ba:	601c      	str	r4, [r3, #0]
 80119bc:	9b02      	ldr	r3, [sp, #8]
 80119be:	601f      	str	r7, [r3, #0]
 80119c0:	e6b0      	b.n	8011724 <__gethex+0xf8>
 80119c2:	4299      	cmp	r1, r3
 80119c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80119c8:	d8d9      	bhi.n	801197e <__gethex+0x352>
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	459b      	cmp	fp, r3
 80119ce:	db17      	blt.n	8011a00 <__gethex+0x3d4>
 80119d0:	6861      	ldr	r1, [r4, #4]
 80119d2:	9801      	ldr	r0, [sp, #4]
 80119d4:	3101      	adds	r1, #1
 80119d6:	f7fd fca9 	bl	800f32c <_Balloc>
 80119da:	4681      	mov	r9, r0
 80119dc:	b918      	cbnz	r0, 80119e6 <__gethex+0x3ba>
 80119de:	4602      	mov	r2, r0
 80119e0:	2184      	movs	r1, #132	@ 0x84
 80119e2:	4b19      	ldr	r3, [pc, #100]	@ (8011a48 <__gethex+0x41c>)
 80119e4:	e6c5      	b.n	8011772 <__gethex+0x146>
 80119e6:	6922      	ldr	r2, [r4, #16]
 80119e8:	f104 010c 	add.w	r1, r4, #12
 80119ec:	3202      	adds	r2, #2
 80119ee:	0092      	lsls	r2, r2, #2
 80119f0:	300c      	adds	r0, #12
 80119f2:	f7ff fd6d 	bl	80114d0 <memcpy>
 80119f6:	4621      	mov	r1, r4
 80119f8:	9801      	ldr	r0, [sp, #4]
 80119fa:	f7fd fcd7 	bl	800f3ac <_Bfree>
 80119fe:	464c      	mov	r4, r9
 8011a00:	6923      	ldr	r3, [r4, #16]
 8011a02:	1c5a      	adds	r2, r3, #1
 8011a04:	6122      	str	r2, [r4, #16]
 8011a06:	2201      	movs	r2, #1
 8011a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a0c:	615a      	str	r2, [r3, #20]
 8011a0e:	e7be      	b.n	801198e <__gethex+0x362>
 8011a10:	6922      	ldr	r2, [r4, #16]
 8011a12:	455a      	cmp	r2, fp
 8011a14:	dd0b      	ble.n	8011a2e <__gethex+0x402>
 8011a16:	2101      	movs	r1, #1
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7ff fd9f 	bl	801155c <rshift>
 8011a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a22:	3701      	adds	r7, #1
 8011a24:	42bb      	cmp	r3, r7
 8011a26:	f6ff aee0 	blt.w	80117ea <__gethex+0x1be>
 8011a2a:	2501      	movs	r5, #1
 8011a2c:	e7c2      	b.n	80119b4 <__gethex+0x388>
 8011a2e:	f016 061f 	ands.w	r6, r6, #31
 8011a32:	d0fa      	beq.n	8011a2a <__gethex+0x3fe>
 8011a34:	4453      	add	r3, sl
 8011a36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a3a:	f7fd fd69 	bl	800f510 <__hi0bits>
 8011a3e:	f1c6 0620 	rsb	r6, r6, #32
 8011a42:	42b0      	cmp	r0, r6
 8011a44:	dbe7      	blt.n	8011a16 <__gethex+0x3ea>
 8011a46:	e7f0      	b.n	8011a2a <__gethex+0x3fe>
 8011a48:	08012ae9 	.word	0x08012ae9

08011a4c <L_shift>:
 8011a4c:	f1c2 0208 	rsb	r2, r2, #8
 8011a50:	0092      	lsls	r2, r2, #2
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	f1c2 0620 	rsb	r6, r2, #32
 8011a58:	6843      	ldr	r3, [r0, #4]
 8011a5a:	6804      	ldr	r4, [r0, #0]
 8011a5c:	fa03 f506 	lsl.w	r5, r3, r6
 8011a60:	432c      	orrs	r4, r5
 8011a62:	40d3      	lsrs	r3, r2
 8011a64:	6004      	str	r4, [r0, #0]
 8011a66:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a6a:	4288      	cmp	r0, r1
 8011a6c:	d3f4      	bcc.n	8011a58 <L_shift+0xc>
 8011a6e:	bd70      	pop	{r4, r5, r6, pc}

08011a70 <__match>:
 8011a70:	b530      	push	{r4, r5, lr}
 8011a72:	6803      	ldr	r3, [r0, #0]
 8011a74:	3301      	adds	r3, #1
 8011a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a7a:	b914      	cbnz	r4, 8011a82 <__match+0x12>
 8011a7c:	6003      	str	r3, [r0, #0]
 8011a7e:	2001      	movs	r0, #1
 8011a80:	bd30      	pop	{r4, r5, pc}
 8011a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011a8a:	2d19      	cmp	r5, #25
 8011a8c:	bf98      	it	ls
 8011a8e:	3220      	addls	r2, #32
 8011a90:	42a2      	cmp	r2, r4
 8011a92:	d0f0      	beq.n	8011a76 <__match+0x6>
 8011a94:	2000      	movs	r0, #0
 8011a96:	e7f3      	b.n	8011a80 <__match+0x10>

08011a98 <__hexnan>:
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	2500      	movs	r5, #0
 8011a9e:	680b      	ldr	r3, [r1, #0]
 8011aa0:	4682      	mov	sl, r0
 8011aa2:	115e      	asrs	r6, r3, #5
 8011aa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011aa8:	f013 031f 	ands.w	r3, r3, #31
 8011aac:	bf18      	it	ne
 8011aae:	3604      	addne	r6, #4
 8011ab0:	1f37      	subs	r7, r6, #4
 8011ab2:	4690      	mov	r8, r2
 8011ab4:	46b9      	mov	r9, r7
 8011ab6:	463c      	mov	r4, r7
 8011ab8:	46ab      	mov	fp, r5
 8011aba:	b087      	sub	sp, #28
 8011abc:	6801      	ldr	r1, [r0, #0]
 8011abe:	9301      	str	r3, [sp, #4]
 8011ac0:	f846 5c04 	str.w	r5, [r6, #-4]
 8011ac4:	9502      	str	r5, [sp, #8]
 8011ac6:	784a      	ldrb	r2, [r1, #1]
 8011ac8:	1c4b      	adds	r3, r1, #1
 8011aca:	9303      	str	r3, [sp, #12]
 8011acc:	b342      	cbz	r2, 8011b20 <__hexnan+0x88>
 8011ace:	4610      	mov	r0, r2
 8011ad0:	9105      	str	r1, [sp, #20]
 8011ad2:	9204      	str	r2, [sp, #16]
 8011ad4:	f7ff fd95 	bl	8011602 <__hexdig_fun>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d151      	bne.n	8011b80 <__hexnan+0xe8>
 8011adc:	9a04      	ldr	r2, [sp, #16]
 8011ade:	9905      	ldr	r1, [sp, #20]
 8011ae0:	2a20      	cmp	r2, #32
 8011ae2:	d818      	bhi.n	8011b16 <__hexnan+0x7e>
 8011ae4:	9b02      	ldr	r3, [sp, #8]
 8011ae6:	459b      	cmp	fp, r3
 8011ae8:	dd13      	ble.n	8011b12 <__hexnan+0x7a>
 8011aea:	454c      	cmp	r4, r9
 8011aec:	d206      	bcs.n	8011afc <__hexnan+0x64>
 8011aee:	2d07      	cmp	r5, #7
 8011af0:	dc04      	bgt.n	8011afc <__hexnan+0x64>
 8011af2:	462a      	mov	r2, r5
 8011af4:	4649      	mov	r1, r9
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff ffa8 	bl	8011a4c <L_shift>
 8011afc:	4544      	cmp	r4, r8
 8011afe:	d952      	bls.n	8011ba6 <__hexnan+0x10e>
 8011b00:	2300      	movs	r3, #0
 8011b02:	f1a4 0904 	sub.w	r9, r4, #4
 8011b06:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b0a:	461d      	mov	r5, r3
 8011b0c:	464c      	mov	r4, r9
 8011b0e:	f8cd b008 	str.w	fp, [sp, #8]
 8011b12:	9903      	ldr	r1, [sp, #12]
 8011b14:	e7d7      	b.n	8011ac6 <__hexnan+0x2e>
 8011b16:	2a29      	cmp	r2, #41	@ 0x29
 8011b18:	d157      	bne.n	8011bca <__hexnan+0x132>
 8011b1a:	3102      	adds	r1, #2
 8011b1c:	f8ca 1000 	str.w	r1, [sl]
 8011b20:	f1bb 0f00 	cmp.w	fp, #0
 8011b24:	d051      	beq.n	8011bca <__hexnan+0x132>
 8011b26:	454c      	cmp	r4, r9
 8011b28:	d206      	bcs.n	8011b38 <__hexnan+0xa0>
 8011b2a:	2d07      	cmp	r5, #7
 8011b2c:	dc04      	bgt.n	8011b38 <__hexnan+0xa0>
 8011b2e:	462a      	mov	r2, r5
 8011b30:	4649      	mov	r1, r9
 8011b32:	4620      	mov	r0, r4
 8011b34:	f7ff ff8a 	bl	8011a4c <L_shift>
 8011b38:	4544      	cmp	r4, r8
 8011b3a:	d936      	bls.n	8011baa <__hexnan+0x112>
 8011b3c:	4623      	mov	r3, r4
 8011b3e:	f1a8 0204 	sub.w	r2, r8, #4
 8011b42:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b46:	429f      	cmp	r7, r3
 8011b48:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b4c:	d2f9      	bcs.n	8011b42 <__hexnan+0xaa>
 8011b4e:	1b3b      	subs	r3, r7, r4
 8011b50:	f023 0303 	bic.w	r3, r3, #3
 8011b54:	3304      	adds	r3, #4
 8011b56:	3401      	adds	r4, #1
 8011b58:	3e03      	subs	r6, #3
 8011b5a:	42b4      	cmp	r4, r6
 8011b5c:	bf88      	it	hi
 8011b5e:	2304      	movhi	r3, #4
 8011b60:	2200      	movs	r2, #0
 8011b62:	4443      	add	r3, r8
 8011b64:	f843 2b04 	str.w	r2, [r3], #4
 8011b68:	429f      	cmp	r7, r3
 8011b6a:	d2fb      	bcs.n	8011b64 <__hexnan+0xcc>
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	b91b      	cbnz	r3, 8011b78 <__hexnan+0xe0>
 8011b70:	4547      	cmp	r7, r8
 8011b72:	d128      	bne.n	8011bc6 <__hexnan+0x12e>
 8011b74:	2301      	movs	r3, #1
 8011b76:	603b      	str	r3, [r7, #0]
 8011b78:	2005      	movs	r0, #5
 8011b7a:	b007      	add	sp, #28
 8011b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b80:	3501      	adds	r5, #1
 8011b82:	2d08      	cmp	r5, #8
 8011b84:	f10b 0b01 	add.w	fp, fp, #1
 8011b88:	dd06      	ble.n	8011b98 <__hexnan+0x100>
 8011b8a:	4544      	cmp	r4, r8
 8011b8c:	d9c1      	bls.n	8011b12 <__hexnan+0x7a>
 8011b8e:	2300      	movs	r3, #0
 8011b90:	2501      	movs	r5, #1
 8011b92:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b96:	3c04      	subs	r4, #4
 8011b98:	6822      	ldr	r2, [r4, #0]
 8011b9a:	f000 000f 	and.w	r0, r0, #15
 8011b9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011ba2:	6020      	str	r0, [r4, #0]
 8011ba4:	e7b5      	b.n	8011b12 <__hexnan+0x7a>
 8011ba6:	2508      	movs	r5, #8
 8011ba8:	e7b3      	b.n	8011b12 <__hexnan+0x7a>
 8011baa:	9b01      	ldr	r3, [sp, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d0dd      	beq.n	8011b6c <__hexnan+0xd4>
 8011bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb4:	f1c3 0320 	rsb	r3, r3, #32
 8011bb8:	40da      	lsrs	r2, r3
 8011bba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011bbe:	4013      	ands	r3, r2
 8011bc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8011bc4:	e7d2      	b.n	8011b6c <__hexnan+0xd4>
 8011bc6:	3f04      	subs	r7, #4
 8011bc8:	e7d0      	b.n	8011b6c <__hexnan+0xd4>
 8011bca:	2004      	movs	r0, #4
 8011bcc:	e7d5      	b.n	8011b7a <__hexnan+0xe2>

08011bce <__ascii_mbtowc>:
 8011bce:	b082      	sub	sp, #8
 8011bd0:	b901      	cbnz	r1, 8011bd4 <__ascii_mbtowc+0x6>
 8011bd2:	a901      	add	r1, sp, #4
 8011bd4:	b142      	cbz	r2, 8011be8 <__ascii_mbtowc+0x1a>
 8011bd6:	b14b      	cbz	r3, 8011bec <__ascii_mbtowc+0x1e>
 8011bd8:	7813      	ldrb	r3, [r2, #0]
 8011bda:	600b      	str	r3, [r1, #0]
 8011bdc:	7812      	ldrb	r2, [r2, #0]
 8011bde:	1e10      	subs	r0, r2, #0
 8011be0:	bf18      	it	ne
 8011be2:	2001      	movne	r0, #1
 8011be4:	b002      	add	sp, #8
 8011be6:	4770      	bx	lr
 8011be8:	4610      	mov	r0, r2
 8011bea:	e7fb      	b.n	8011be4 <__ascii_mbtowc+0x16>
 8011bec:	f06f 0001 	mvn.w	r0, #1
 8011bf0:	e7f8      	b.n	8011be4 <__ascii_mbtowc+0x16>

08011bf2 <_realloc_r>:
 8011bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf6:	4607      	mov	r7, r0
 8011bf8:	4614      	mov	r4, r2
 8011bfa:	460d      	mov	r5, r1
 8011bfc:	b921      	cbnz	r1, 8011c08 <_realloc_r+0x16>
 8011bfe:	4611      	mov	r1, r2
 8011c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c04:	f7fd bb06 	b.w	800f214 <_malloc_r>
 8011c08:	b92a      	cbnz	r2, 8011c16 <_realloc_r+0x24>
 8011c0a:	f7fd fa91 	bl	800f130 <_free_r>
 8011c0e:	4625      	mov	r5, r4
 8011c10:	4628      	mov	r0, r5
 8011c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c16:	f000 f8b2 	bl	8011d7e <_malloc_usable_size_r>
 8011c1a:	4284      	cmp	r4, r0
 8011c1c:	4606      	mov	r6, r0
 8011c1e:	d802      	bhi.n	8011c26 <_realloc_r+0x34>
 8011c20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c24:	d8f4      	bhi.n	8011c10 <_realloc_r+0x1e>
 8011c26:	4621      	mov	r1, r4
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f7fd faf3 	bl	800f214 <_malloc_r>
 8011c2e:	4680      	mov	r8, r0
 8011c30:	b908      	cbnz	r0, 8011c36 <_realloc_r+0x44>
 8011c32:	4645      	mov	r5, r8
 8011c34:	e7ec      	b.n	8011c10 <_realloc_r+0x1e>
 8011c36:	42b4      	cmp	r4, r6
 8011c38:	4622      	mov	r2, r4
 8011c3a:	4629      	mov	r1, r5
 8011c3c:	bf28      	it	cs
 8011c3e:	4632      	movcs	r2, r6
 8011c40:	f7ff fc46 	bl	80114d0 <memcpy>
 8011c44:	4629      	mov	r1, r5
 8011c46:	4638      	mov	r0, r7
 8011c48:	f7fd fa72 	bl	800f130 <_free_r>
 8011c4c:	e7f1      	b.n	8011c32 <_realloc_r+0x40>
	...

08011c50 <_strtoul_l.isra.0>:
 8011c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c54:	4686      	mov	lr, r0
 8011c56:	460d      	mov	r5, r1
 8011c58:	4e33      	ldr	r6, [pc, #204]	@ (8011d28 <_strtoul_l.isra.0+0xd8>)
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c60:	5d37      	ldrb	r7, [r6, r4]
 8011c62:	f017 0708 	ands.w	r7, r7, #8
 8011c66:	d1f8      	bne.n	8011c5a <_strtoul_l.isra.0+0xa>
 8011c68:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c6a:	d110      	bne.n	8011c8e <_strtoul_l.isra.0+0x3e>
 8011c6c:	2701      	movs	r7, #1
 8011c6e:	782c      	ldrb	r4, [r5, #0]
 8011c70:	1c85      	adds	r5, r0, #2
 8011c72:	f033 0010 	bics.w	r0, r3, #16
 8011c76:	d115      	bne.n	8011ca4 <_strtoul_l.isra.0+0x54>
 8011c78:	2c30      	cmp	r4, #48	@ 0x30
 8011c7a:	d10d      	bne.n	8011c98 <_strtoul_l.isra.0+0x48>
 8011c7c:	7828      	ldrb	r0, [r5, #0]
 8011c7e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011c82:	2858      	cmp	r0, #88	@ 0x58
 8011c84:	d108      	bne.n	8011c98 <_strtoul_l.isra.0+0x48>
 8011c86:	786c      	ldrb	r4, [r5, #1]
 8011c88:	3502      	adds	r5, #2
 8011c8a:	2310      	movs	r3, #16
 8011c8c:	e00a      	b.n	8011ca4 <_strtoul_l.isra.0+0x54>
 8011c8e:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c90:	bf04      	itt	eq
 8011c92:	782c      	ldrbeq	r4, [r5, #0]
 8011c94:	1c85      	addeq	r5, r0, #2
 8011c96:	e7ec      	b.n	8011c72 <_strtoul_l.isra.0+0x22>
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1f6      	bne.n	8011c8a <_strtoul_l.isra.0+0x3a>
 8011c9c:	2c30      	cmp	r4, #48	@ 0x30
 8011c9e:	bf14      	ite	ne
 8011ca0:	230a      	movne	r3, #10
 8011ca2:	2308      	moveq	r3, #8
 8011ca4:	f04f 38ff 	mov.w	r8, #4294967295
 8011ca8:	fbb8 f8f3 	udiv	r8, r8, r3
 8011cac:	2600      	movs	r6, #0
 8011cae:	fb03 f908 	mul.w	r9, r3, r8
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	ea6f 0909 	mvn.w	r9, r9
 8011cb8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011cbc:	f1bc 0f09 	cmp.w	ip, #9
 8011cc0:	d810      	bhi.n	8011ce4 <_strtoul_l.isra.0+0x94>
 8011cc2:	4664      	mov	r4, ip
 8011cc4:	42a3      	cmp	r3, r4
 8011cc6:	dd1e      	ble.n	8011d06 <_strtoul_l.isra.0+0xb6>
 8011cc8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011ccc:	d007      	beq.n	8011cde <_strtoul_l.isra.0+0x8e>
 8011cce:	4580      	cmp	r8, r0
 8011cd0:	d316      	bcc.n	8011d00 <_strtoul_l.isra.0+0xb0>
 8011cd2:	d101      	bne.n	8011cd8 <_strtoul_l.isra.0+0x88>
 8011cd4:	45a1      	cmp	r9, r4
 8011cd6:	db13      	blt.n	8011d00 <_strtoul_l.isra.0+0xb0>
 8011cd8:	2601      	movs	r6, #1
 8011cda:	fb00 4003 	mla	r0, r0, r3, r4
 8011cde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ce2:	e7e9      	b.n	8011cb8 <_strtoul_l.isra.0+0x68>
 8011ce4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011ce8:	f1bc 0f19 	cmp.w	ip, #25
 8011cec:	d801      	bhi.n	8011cf2 <_strtoul_l.isra.0+0xa2>
 8011cee:	3c37      	subs	r4, #55	@ 0x37
 8011cf0:	e7e8      	b.n	8011cc4 <_strtoul_l.isra.0+0x74>
 8011cf2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011cf6:	f1bc 0f19 	cmp.w	ip, #25
 8011cfa:	d804      	bhi.n	8011d06 <_strtoul_l.isra.0+0xb6>
 8011cfc:	3c57      	subs	r4, #87	@ 0x57
 8011cfe:	e7e1      	b.n	8011cc4 <_strtoul_l.isra.0+0x74>
 8011d00:	f04f 36ff 	mov.w	r6, #4294967295
 8011d04:	e7eb      	b.n	8011cde <_strtoul_l.isra.0+0x8e>
 8011d06:	1c73      	adds	r3, r6, #1
 8011d08:	d106      	bne.n	8011d18 <_strtoul_l.isra.0+0xc8>
 8011d0a:	2322      	movs	r3, #34	@ 0x22
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f8ce 3000 	str.w	r3, [lr]
 8011d12:	b932      	cbnz	r2, 8011d22 <_strtoul_l.isra.0+0xd2>
 8011d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d18:	b107      	cbz	r7, 8011d1c <_strtoul_l.isra.0+0xcc>
 8011d1a:	4240      	negs	r0, r0
 8011d1c:	2a00      	cmp	r2, #0
 8011d1e:	d0f9      	beq.n	8011d14 <_strtoul_l.isra.0+0xc4>
 8011d20:	b106      	cbz	r6, 8011d24 <_strtoul_l.isra.0+0xd4>
 8011d22:	1e69      	subs	r1, r5, #1
 8011d24:	6011      	str	r1, [r2, #0]
 8011d26:	e7f5      	b.n	8011d14 <_strtoul_l.isra.0+0xc4>
 8011d28:	08012d79 	.word	0x08012d79

08011d2c <_strtoul_r>:
 8011d2c:	f7ff bf90 	b.w	8011c50 <_strtoul_l.isra.0>

08011d30 <__ascii_wctomb>:
 8011d30:	4603      	mov	r3, r0
 8011d32:	4608      	mov	r0, r1
 8011d34:	b141      	cbz	r1, 8011d48 <__ascii_wctomb+0x18>
 8011d36:	2aff      	cmp	r2, #255	@ 0xff
 8011d38:	d904      	bls.n	8011d44 <__ascii_wctomb+0x14>
 8011d3a:	228a      	movs	r2, #138	@ 0x8a
 8011d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d40:	601a      	str	r2, [r3, #0]
 8011d42:	4770      	bx	lr
 8011d44:	2001      	movs	r0, #1
 8011d46:	700a      	strb	r2, [r1, #0]
 8011d48:	4770      	bx	lr
	...

08011d4c <fiprintf>:
 8011d4c:	b40e      	push	{r1, r2, r3}
 8011d4e:	b503      	push	{r0, r1, lr}
 8011d50:	4601      	mov	r1, r0
 8011d52:	ab03      	add	r3, sp, #12
 8011d54:	4805      	ldr	r0, [pc, #20]	@ (8011d6c <fiprintf+0x20>)
 8011d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d5a:	6800      	ldr	r0, [r0, #0]
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	f000 f83d 	bl	8011ddc <_vfiprintf_r>
 8011d62:	b002      	add	sp, #8
 8011d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d68:	b003      	add	sp, #12
 8011d6a:	4770      	bx	lr
 8011d6c:	200001a0 	.word	0x200001a0

08011d70 <abort>:
 8011d70:	2006      	movs	r0, #6
 8011d72:	b508      	push	{r3, lr}
 8011d74:	f000 fa06 	bl	8012184 <raise>
 8011d78:	2001      	movs	r0, #1
 8011d7a:	f7f1 fd76 	bl	800386a <_exit>

08011d7e <_malloc_usable_size_r>:
 8011d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d82:	1f18      	subs	r0, r3, #4
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	bfbc      	itt	lt
 8011d88:	580b      	ldrlt	r3, [r1, r0]
 8011d8a:	18c0      	addlt	r0, r0, r3
 8011d8c:	4770      	bx	lr

08011d8e <__sfputc_r>:
 8011d8e:	6893      	ldr	r3, [r2, #8]
 8011d90:	b410      	push	{r4}
 8011d92:	3b01      	subs	r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	6093      	str	r3, [r2, #8]
 8011d98:	da07      	bge.n	8011daa <__sfputc_r+0x1c>
 8011d9a:	6994      	ldr	r4, [r2, #24]
 8011d9c:	42a3      	cmp	r3, r4
 8011d9e:	db01      	blt.n	8011da4 <__sfputc_r+0x16>
 8011da0:	290a      	cmp	r1, #10
 8011da2:	d102      	bne.n	8011daa <__sfputc_r+0x1c>
 8011da4:	bc10      	pop	{r4}
 8011da6:	f000 b931 	b.w	801200c <__swbuf_r>
 8011daa:	6813      	ldr	r3, [r2, #0]
 8011dac:	1c58      	adds	r0, r3, #1
 8011dae:	6010      	str	r0, [r2, #0]
 8011db0:	7019      	strb	r1, [r3, #0]
 8011db2:	4608      	mov	r0, r1
 8011db4:	bc10      	pop	{r4}
 8011db6:	4770      	bx	lr

08011db8 <__sfputs_r>:
 8011db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dba:	4606      	mov	r6, r0
 8011dbc:	460f      	mov	r7, r1
 8011dbe:	4614      	mov	r4, r2
 8011dc0:	18d5      	adds	r5, r2, r3
 8011dc2:	42ac      	cmp	r4, r5
 8011dc4:	d101      	bne.n	8011dca <__sfputs_r+0x12>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	e007      	b.n	8011dda <__sfputs_r+0x22>
 8011dca:	463a      	mov	r2, r7
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd2:	f7ff ffdc 	bl	8011d8e <__sfputc_r>
 8011dd6:	1c43      	adds	r3, r0, #1
 8011dd8:	d1f3      	bne.n	8011dc2 <__sfputs_r+0xa>
 8011dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ddc <_vfiprintf_r>:
 8011ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de0:	460d      	mov	r5, r1
 8011de2:	4614      	mov	r4, r2
 8011de4:	4698      	mov	r8, r3
 8011de6:	4606      	mov	r6, r0
 8011de8:	b09d      	sub	sp, #116	@ 0x74
 8011dea:	b118      	cbz	r0, 8011df4 <_vfiprintf_r+0x18>
 8011dec:	6a03      	ldr	r3, [r0, #32]
 8011dee:	b90b      	cbnz	r3, 8011df4 <_vfiprintf_r+0x18>
 8011df0:	f7fc f996 	bl	800e120 <__sinit>
 8011df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011df6:	07d9      	lsls	r1, r3, #31
 8011df8:	d405      	bmi.n	8011e06 <_vfiprintf_r+0x2a>
 8011dfa:	89ab      	ldrh	r3, [r5, #12]
 8011dfc:	059a      	lsls	r2, r3, #22
 8011dfe:	d402      	bmi.n	8011e06 <_vfiprintf_r+0x2a>
 8011e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e02:	f7fc fb22 	bl	800e44a <__retarget_lock_acquire_recursive>
 8011e06:	89ab      	ldrh	r3, [r5, #12]
 8011e08:	071b      	lsls	r3, r3, #28
 8011e0a:	d501      	bpl.n	8011e10 <_vfiprintf_r+0x34>
 8011e0c:	692b      	ldr	r3, [r5, #16]
 8011e0e:	b99b      	cbnz	r3, 8011e38 <_vfiprintf_r+0x5c>
 8011e10:	4629      	mov	r1, r5
 8011e12:	4630      	mov	r0, r6
 8011e14:	f000 f938 	bl	8012088 <__swsetup_r>
 8011e18:	b170      	cbz	r0, 8011e38 <_vfiprintf_r+0x5c>
 8011e1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e1c:	07dc      	lsls	r4, r3, #31
 8011e1e:	d504      	bpl.n	8011e2a <_vfiprintf_r+0x4e>
 8011e20:	f04f 30ff 	mov.w	r0, #4294967295
 8011e24:	b01d      	add	sp, #116	@ 0x74
 8011e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2a:	89ab      	ldrh	r3, [r5, #12]
 8011e2c:	0598      	lsls	r0, r3, #22
 8011e2e:	d4f7      	bmi.n	8011e20 <_vfiprintf_r+0x44>
 8011e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e32:	f7fc fb0b 	bl	800e44c <__retarget_lock_release_recursive>
 8011e36:	e7f3      	b.n	8011e20 <_vfiprintf_r+0x44>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e3c:	2320      	movs	r3, #32
 8011e3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e42:	2330      	movs	r3, #48	@ 0x30
 8011e44:	f04f 0901 	mov.w	r9, #1
 8011e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8011ff8 <_vfiprintf_r+0x21c>
 8011e50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e54:	4623      	mov	r3, r4
 8011e56:	469a      	mov	sl, r3
 8011e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e5c:	b10a      	cbz	r2, 8011e62 <_vfiprintf_r+0x86>
 8011e5e:	2a25      	cmp	r2, #37	@ 0x25
 8011e60:	d1f9      	bne.n	8011e56 <_vfiprintf_r+0x7a>
 8011e62:	ebba 0b04 	subs.w	fp, sl, r4
 8011e66:	d00b      	beq.n	8011e80 <_vfiprintf_r+0xa4>
 8011e68:	465b      	mov	r3, fp
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	4629      	mov	r1, r5
 8011e6e:	4630      	mov	r0, r6
 8011e70:	f7ff ffa2 	bl	8011db8 <__sfputs_r>
 8011e74:	3001      	adds	r0, #1
 8011e76:	f000 80a7 	beq.w	8011fc8 <_vfiprintf_r+0x1ec>
 8011e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e7c:	445a      	add	r2, fp
 8011e7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e80:	f89a 3000 	ldrb.w	r3, [sl]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f000 809f 	beq.w	8011fc8 <_vfiprintf_r+0x1ec>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e94:	f10a 0a01 	add.w	sl, sl, #1
 8011e98:	9304      	str	r3, [sp, #16]
 8011e9a:	9307      	str	r3, [sp, #28]
 8011e9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ea0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ea2:	4654      	mov	r4, sl
 8011ea4:	2205      	movs	r2, #5
 8011ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eaa:	4853      	ldr	r0, [pc, #332]	@ (8011ff8 <_vfiprintf_r+0x21c>)
 8011eac:	f7fc facf 	bl	800e44e <memchr>
 8011eb0:	9a04      	ldr	r2, [sp, #16]
 8011eb2:	b9d8      	cbnz	r0, 8011eec <_vfiprintf_r+0x110>
 8011eb4:	06d1      	lsls	r1, r2, #27
 8011eb6:	bf44      	itt	mi
 8011eb8:	2320      	movmi	r3, #32
 8011eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ebe:	0713      	lsls	r3, r2, #28
 8011ec0:	bf44      	itt	mi
 8011ec2:	232b      	movmi	r3, #43	@ 0x2b
 8011ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8011ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ece:	d015      	beq.n	8011efc <_vfiprintf_r+0x120>
 8011ed0:	4654      	mov	r4, sl
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f04f 0c0a 	mov.w	ip, #10
 8011ed8:	9a07      	ldr	r2, [sp, #28]
 8011eda:	4621      	mov	r1, r4
 8011edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ee0:	3b30      	subs	r3, #48	@ 0x30
 8011ee2:	2b09      	cmp	r3, #9
 8011ee4:	d94b      	bls.n	8011f7e <_vfiprintf_r+0x1a2>
 8011ee6:	b1b0      	cbz	r0, 8011f16 <_vfiprintf_r+0x13a>
 8011ee8:	9207      	str	r2, [sp, #28]
 8011eea:	e014      	b.n	8011f16 <_vfiprintf_r+0x13a>
 8011eec:	eba0 0308 	sub.w	r3, r0, r8
 8011ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	46a2      	mov	sl, r4
 8011ef8:	9304      	str	r3, [sp, #16]
 8011efa:	e7d2      	b.n	8011ea2 <_vfiprintf_r+0xc6>
 8011efc:	9b03      	ldr	r3, [sp, #12]
 8011efe:	1d19      	adds	r1, r3, #4
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	9103      	str	r1, [sp, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	bfbb      	ittet	lt
 8011f08:	425b      	neglt	r3, r3
 8011f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f0e:	9307      	strge	r3, [sp, #28]
 8011f10:	9307      	strlt	r3, [sp, #28]
 8011f12:	bfb8      	it	lt
 8011f14:	9204      	strlt	r2, [sp, #16]
 8011f16:	7823      	ldrb	r3, [r4, #0]
 8011f18:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f1a:	d10a      	bne.n	8011f32 <_vfiprintf_r+0x156>
 8011f1c:	7863      	ldrb	r3, [r4, #1]
 8011f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f20:	d132      	bne.n	8011f88 <_vfiprintf_r+0x1ac>
 8011f22:	9b03      	ldr	r3, [sp, #12]
 8011f24:	3402      	adds	r4, #2
 8011f26:	1d1a      	adds	r2, r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	9203      	str	r2, [sp, #12]
 8011f2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f30:	9305      	str	r3, [sp, #20]
 8011f32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8011ffc <_vfiprintf_r+0x220>
 8011f36:	2203      	movs	r2, #3
 8011f38:	4650      	mov	r0, sl
 8011f3a:	7821      	ldrb	r1, [r4, #0]
 8011f3c:	f7fc fa87 	bl	800e44e <memchr>
 8011f40:	b138      	cbz	r0, 8011f52 <_vfiprintf_r+0x176>
 8011f42:	2240      	movs	r2, #64	@ 0x40
 8011f44:	9b04      	ldr	r3, [sp, #16]
 8011f46:	eba0 000a 	sub.w	r0, r0, sl
 8011f4a:	4082      	lsls	r2, r0
 8011f4c:	4313      	orrs	r3, r2
 8011f4e:	3401      	adds	r4, #1
 8011f50:	9304      	str	r3, [sp, #16]
 8011f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f56:	2206      	movs	r2, #6
 8011f58:	4829      	ldr	r0, [pc, #164]	@ (8012000 <_vfiprintf_r+0x224>)
 8011f5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f5e:	f7fc fa76 	bl	800e44e <memchr>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	d03f      	beq.n	8011fe6 <_vfiprintf_r+0x20a>
 8011f66:	4b27      	ldr	r3, [pc, #156]	@ (8012004 <_vfiprintf_r+0x228>)
 8011f68:	bb1b      	cbnz	r3, 8011fb2 <_vfiprintf_r+0x1d6>
 8011f6a:	9b03      	ldr	r3, [sp, #12]
 8011f6c:	3307      	adds	r3, #7
 8011f6e:	f023 0307 	bic.w	r3, r3, #7
 8011f72:	3308      	adds	r3, #8
 8011f74:	9303      	str	r3, [sp, #12]
 8011f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f78:	443b      	add	r3, r7
 8011f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f7c:	e76a      	b.n	8011e54 <_vfiprintf_r+0x78>
 8011f7e:	460c      	mov	r4, r1
 8011f80:	2001      	movs	r0, #1
 8011f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f86:	e7a8      	b.n	8011eda <_vfiprintf_r+0xfe>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	f04f 0c0a 	mov.w	ip, #10
 8011f8e:	4619      	mov	r1, r3
 8011f90:	3401      	adds	r4, #1
 8011f92:	9305      	str	r3, [sp, #20]
 8011f94:	4620      	mov	r0, r4
 8011f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f9a:	3a30      	subs	r2, #48	@ 0x30
 8011f9c:	2a09      	cmp	r2, #9
 8011f9e:	d903      	bls.n	8011fa8 <_vfiprintf_r+0x1cc>
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d0c6      	beq.n	8011f32 <_vfiprintf_r+0x156>
 8011fa4:	9105      	str	r1, [sp, #20]
 8011fa6:	e7c4      	b.n	8011f32 <_vfiprintf_r+0x156>
 8011fa8:	4604      	mov	r4, r0
 8011faa:	2301      	movs	r3, #1
 8011fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fb0:	e7f0      	b.n	8011f94 <_vfiprintf_r+0x1b8>
 8011fb2:	ab03      	add	r3, sp, #12
 8011fb4:	9300      	str	r3, [sp, #0]
 8011fb6:	462a      	mov	r2, r5
 8011fb8:	4630      	mov	r0, r6
 8011fba:	4b13      	ldr	r3, [pc, #76]	@ (8012008 <_vfiprintf_r+0x22c>)
 8011fbc:	a904      	add	r1, sp, #16
 8011fbe:	f7fb fa5d 	bl	800d47c <_printf_float>
 8011fc2:	4607      	mov	r7, r0
 8011fc4:	1c78      	adds	r0, r7, #1
 8011fc6:	d1d6      	bne.n	8011f76 <_vfiprintf_r+0x19a>
 8011fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fca:	07d9      	lsls	r1, r3, #31
 8011fcc:	d405      	bmi.n	8011fda <_vfiprintf_r+0x1fe>
 8011fce:	89ab      	ldrh	r3, [r5, #12]
 8011fd0:	059a      	lsls	r2, r3, #22
 8011fd2:	d402      	bmi.n	8011fda <_vfiprintf_r+0x1fe>
 8011fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fd6:	f7fc fa39 	bl	800e44c <__retarget_lock_release_recursive>
 8011fda:	89ab      	ldrh	r3, [r5, #12]
 8011fdc:	065b      	lsls	r3, r3, #25
 8011fde:	f53f af1f 	bmi.w	8011e20 <_vfiprintf_r+0x44>
 8011fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fe4:	e71e      	b.n	8011e24 <_vfiprintf_r+0x48>
 8011fe6:	ab03      	add	r3, sp, #12
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	462a      	mov	r2, r5
 8011fec:	4630      	mov	r0, r6
 8011fee:	4b06      	ldr	r3, [pc, #24]	@ (8012008 <_vfiprintf_r+0x22c>)
 8011ff0:	a904      	add	r1, sp, #16
 8011ff2:	f7fb fce1 	bl	800d9b8 <_printf_i>
 8011ff6:	e7e4      	b.n	8011fc2 <_vfiprintf_r+0x1e6>
 8011ff8:	08012b55 	.word	0x08012b55
 8011ffc:	08012b5b 	.word	0x08012b5b
 8012000:	08012b5f 	.word	0x08012b5f
 8012004:	0800d47d 	.word	0x0800d47d
 8012008:	08011db9 	.word	0x08011db9

0801200c <__swbuf_r>:
 801200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200e:	460e      	mov	r6, r1
 8012010:	4614      	mov	r4, r2
 8012012:	4605      	mov	r5, r0
 8012014:	b118      	cbz	r0, 801201e <__swbuf_r+0x12>
 8012016:	6a03      	ldr	r3, [r0, #32]
 8012018:	b90b      	cbnz	r3, 801201e <__swbuf_r+0x12>
 801201a:	f7fc f881 	bl	800e120 <__sinit>
 801201e:	69a3      	ldr	r3, [r4, #24]
 8012020:	60a3      	str	r3, [r4, #8]
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	071a      	lsls	r2, r3, #28
 8012026:	d501      	bpl.n	801202c <__swbuf_r+0x20>
 8012028:	6923      	ldr	r3, [r4, #16]
 801202a:	b943      	cbnz	r3, 801203e <__swbuf_r+0x32>
 801202c:	4621      	mov	r1, r4
 801202e:	4628      	mov	r0, r5
 8012030:	f000 f82a 	bl	8012088 <__swsetup_r>
 8012034:	b118      	cbz	r0, 801203e <__swbuf_r+0x32>
 8012036:	f04f 37ff 	mov.w	r7, #4294967295
 801203a:	4638      	mov	r0, r7
 801203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801203e:	6823      	ldr	r3, [r4, #0]
 8012040:	6922      	ldr	r2, [r4, #16]
 8012042:	b2f6      	uxtb	r6, r6
 8012044:	1a98      	subs	r0, r3, r2
 8012046:	6963      	ldr	r3, [r4, #20]
 8012048:	4637      	mov	r7, r6
 801204a:	4283      	cmp	r3, r0
 801204c:	dc05      	bgt.n	801205a <__swbuf_r+0x4e>
 801204e:	4621      	mov	r1, r4
 8012050:	4628      	mov	r0, r5
 8012052:	f7ff f979 	bl	8011348 <_fflush_r>
 8012056:	2800      	cmp	r0, #0
 8012058:	d1ed      	bne.n	8012036 <__swbuf_r+0x2a>
 801205a:	68a3      	ldr	r3, [r4, #8]
 801205c:	3b01      	subs	r3, #1
 801205e:	60a3      	str	r3, [r4, #8]
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	1c5a      	adds	r2, r3, #1
 8012064:	6022      	str	r2, [r4, #0]
 8012066:	701e      	strb	r6, [r3, #0]
 8012068:	6962      	ldr	r2, [r4, #20]
 801206a:	1c43      	adds	r3, r0, #1
 801206c:	429a      	cmp	r2, r3
 801206e:	d004      	beq.n	801207a <__swbuf_r+0x6e>
 8012070:	89a3      	ldrh	r3, [r4, #12]
 8012072:	07db      	lsls	r3, r3, #31
 8012074:	d5e1      	bpl.n	801203a <__swbuf_r+0x2e>
 8012076:	2e0a      	cmp	r6, #10
 8012078:	d1df      	bne.n	801203a <__swbuf_r+0x2e>
 801207a:	4621      	mov	r1, r4
 801207c:	4628      	mov	r0, r5
 801207e:	f7ff f963 	bl	8011348 <_fflush_r>
 8012082:	2800      	cmp	r0, #0
 8012084:	d0d9      	beq.n	801203a <__swbuf_r+0x2e>
 8012086:	e7d6      	b.n	8012036 <__swbuf_r+0x2a>

08012088 <__swsetup_r>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4b29      	ldr	r3, [pc, #164]	@ (8012130 <__swsetup_r+0xa8>)
 801208c:	4605      	mov	r5, r0
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	460c      	mov	r4, r1
 8012092:	b118      	cbz	r0, 801209c <__swsetup_r+0x14>
 8012094:	6a03      	ldr	r3, [r0, #32]
 8012096:	b90b      	cbnz	r3, 801209c <__swsetup_r+0x14>
 8012098:	f7fc f842 	bl	800e120 <__sinit>
 801209c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120a0:	0719      	lsls	r1, r3, #28
 80120a2:	d422      	bmi.n	80120ea <__swsetup_r+0x62>
 80120a4:	06da      	lsls	r2, r3, #27
 80120a6:	d407      	bmi.n	80120b8 <__swsetup_r+0x30>
 80120a8:	2209      	movs	r2, #9
 80120aa:	602a      	str	r2, [r5, #0]
 80120ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120b0:	f04f 30ff 	mov.w	r0, #4294967295
 80120b4:	81a3      	strh	r3, [r4, #12]
 80120b6:	e033      	b.n	8012120 <__swsetup_r+0x98>
 80120b8:	0758      	lsls	r0, r3, #29
 80120ba:	d512      	bpl.n	80120e2 <__swsetup_r+0x5a>
 80120bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120be:	b141      	cbz	r1, 80120d2 <__swsetup_r+0x4a>
 80120c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120c4:	4299      	cmp	r1, r3
 80120c6:	d002      	beq.n	80120ce <__swsetup_r+0x46>
 80120c8:	4628      	mov	r0, r5
 80120ca:	f7fd f831 	bl	800f130 <_free_r>
 80120ce:	2300      	movs	r3, #0
 80120d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120d2:	89a3      	ldrh	r3, [r4, #12]
 80120d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120d8:	81a3      	strh	r3, [r4, #12]
 80120da:	2300      	movs	r3, #0
 80120dc:	6063      	str	r3, [r4, #4]
 80120de:	6923      	ldr	r3, [r4, #16]
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	89a3      	ldrh	r3, [r4, #12]
 80120e4:	f043 0308 	orr.w	r3, r3, #8
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	6923      	ldr	r3, [r4, #16]
 80120ec:	b94b      	cbnz	r3, 8012102 <__swsetup_r+0x7a>
 80120ee:	89a3      	ldrh	r3, [r4, #12]
 80120f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120f8:	d003      	beq.n	8012102 <__swsetup_r+0x7a>
 80120fa:	4621      	mov	r1, r4
 80120fc:	4628      	mov	r0, r5
 80120fe:	f000 f882 	bl	8012206 <__smakebuf_r>
 8012102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012106:	f013 0201 	ands.w	r2, r3, #1
 801210a:	d00a      	beq.n	8012122 <__swsetup_r+0x9a>
 801210c:	2200      	movs	r2, #0
 801210e:	60a2      	str	r2, [r4, #8]
 8012110:	6962      	ldr	r2, [r4, #20]
 8012112:	4252      	negs	r2, r2
 8012114:	61a2      	str	r2, [r4, #24]
 8012116:	6922      	ldr	r2, [r4, #16]
 8012118:	b942      	cbnz	r2, 801212c <__swsetup_r+0xa4>
 801211a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801211e:	d1c5      	bne.n	80120ac <__swsetup_r+0x24>
 8012120:	bd38      	pop	{r3, r4, r5, pc}
 8012122:	0799      	lsls	r1, r3, #30
 8012124:	bf58      	it	pl
 8012126:	6962      	ldrpl	r2, [r4, #20]
 8012128:	60a2      	str	r2, [r4, #8]
 801212a:	e7f4      	b.n	8012116 <__swsetup_r+0x8e>
 801212c:	2000      	movs	r0, #0
 801212e:	e7f7      	b.n	8012120 <__swsetup_r+0x98>
 8012130:	200001a0 	.word	0x200001a0

08012134 <_raise_r>:
 8012134:	291f      	cmp	r1, #31
 8012136:	b538      	push	{r3, r4, r5, lr}
 8012138:	4605      	mov	r5, r0
 801213a:	460c      	mov	r4, r1
 801213c:	d904      	bls.n	8012148 <_raise_r+0x14>
 801213e:	2316      	movs	r3, #22
 8012140:	6003      	str	r3, [r0, #0]
 8012142:	f04f 30ff 	mov.w	r0, #4294967295
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801214a:	b112      	cbz	r2, 8012152 <_raise_r+0x1e>
 801214c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012150:	b94b      	cbnz	r3, 8012166 <_raise_r+0x32>
 8012152:	4628      	mov	r0, r5
 8012154:	f000 f830 	bl	80121b8 <_getpid_r>
 8012158:	4622      	mov	r2, r4
 801215a:	4601      	mov	r1, r0
 801215c:	4628      	mov	r0, r5
 801215e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012162:	f000 b817 	b.w	8012194 <_kill_r>
 8012166:	2b01      	cmp	r3, #1
 8012168:	d00a      	beq.n	8012180 <_raise_r+0x4c>
 801216a:	1c59      	adds	r1, r3, #1
 801216c:	d103      	bne.n	8012176 <_raise_r+0x42>
 801216e:	2316      	movs	r3, #22
 8012170:	6003      	str	r3, [r0, #0]
 8012172:	2001      	movs	r0, #1
 8012174:	e7e7      	b.n	8012146 <_raise_r+0x12>
 8012176:	2100      	movs	r1, #0
 8012178:	4620      	mov	r0, r4
 801217a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801217e:	4798      	blx	r3
 8012180:	2000      	movs	r0, #0
 8012182:	e7e0      	b.n	8012146 <_raise_r+0x12>

08012184 <raise>:
 8012184:	4b02      	ldr	r3, [pc, #8]	@ (8012190 <raise+0xc>)
 8012186:	4601      	mov	r1, r0
 8012188:	6818      	ldr	r0, [r3, #0]
 801218a:	f7ff bfd3 	b.w	8012134 <_raise_r>
 801218e:	bf00      	nop
 8012190:	200001a0 	.word	0x200001a0

08012194 <_kill_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	2300      	movs	r3, #0
 8012198:	4d06      	ldr	r5, [pc, #24]	@ (80121b4 <_kill_r+0x20>)
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	4611      	mov	r1, r2
 80121a0:	602b      	str	r3, [r5, #0]
 80121a2:	f7f1 fb52 	bl	800384a <_kill>
 80121a6:	1c43      	adds	r3, r0, #1
 80121a8:	d102      	bne.n	80121b0 <_kill_r+0x1c>
 80121aa:	682b      	ldr	r3, [r5, #0]
 80121ac:	b103      	cbz	r3, 80121b0 <_kill_r+0x1c>
 80121ae:	6023      	str	r3, [r4, #0]
 80121b0:	bd38      	pop	{r3, r4, r5, pc}
 80121b2:	bf00      	nop
 80121b4:	20001b18 	.word	0x20001b18

080121b8 <_getpid_r>:
 80121b8:	f7f1 bb40 	b.w	800383c <_getpid>

080121bc <__swhatbuf_r>:
 80121bc:	b570      	push	{r4, r5, r6, lr}
 80121be:	460c      	mov	r4, r1
 80121c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121c4:	4615      	mov	r5, r2
 80121c6:	2900      	cmp	r1, #0
 80121c8:	461e      	mov	r6, r3
 80121ca:	b096      	sub	sp, #88	@ 0x58
 80121cc:	da0c      	bge.n	80121e8 <__swhatbuf_r+0x2c>
 80121ce:	89a3      	ldrh	r3, [r4, #12]
 80121d0:	2100      	movs	r1, #0
 80121d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80121d6:	bf14      	ite	ne
 80121d8:	2340      	movne	r3, #64	@ 0x40
 80121da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80121de:	2000      	movs	r0, #0
 80121e0:	6031      	str	r1, [r6, #0]
 80121e2:	602b      	str	r3, [r5, #0]
 80121e4:	b016      	add	sp, #88	@ 0x58
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
 80121e8:	466a      	mov	r2, sp
 80121ea:	f000 f849 	bl	8012280 <_fstat_r>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	dbed      	blt.n	80121ce <__swhatbuf_r+0x12>
 80121f2:	9901      	ldr	r1, [sp, #4]
 80121f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80121f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80121fc:	4259      	negs	r1, r3
 80121fe:	4159      	adcs	r1, r3
 8012200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012204:	e7eb      	b.n	80121de <__swhatbuf_r+0x22>

08012206 <__smakebuf_r>:
 8012206:	898b      	ldrh	r3, [r1, #12]
 8012208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801220a:	079d      	lsls	r5, r3, #30
 801220c:	4606      	mov	r6, r0
 801220e:	460c      	mov	r4, r1
 8012210:	d507      	bpl.n	8012222 <__smakebuf_r+0x1c>
 8012212:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012216:	6023      	str	r3, [r4, #0]
 8012218:	6123      	str	r3, [r4, #16]
 801221a:	2301      	movs	r3, #1
 801221c:	6163      	str	r3, [r4, #20]
 801221e:	b003      	add	sp, #12
 8012220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012222:	466a      	mov	r2, sp
 8012224:	ab01      	add	r3, sp, #4
 8012226:	f7ff ffc9 	bl	80121bc <__swhatbuf_r>
 801222a:	9f00      	ldr	r7, [sp, #0]
 801222c:	4605      	mov	r5, r0
 801222e:	4639      	mov	r1, r7
 8012230:	4630      	mov	r0, r6
 8012232:	f7fc ffef 	bl	800f214 <_malloc_r>
 8012236:	b948      	cbnz	r0, 801224c <__smakebuf_r+0x46>
 8012238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223c:	059a      	lsls	r2, r3, #22
 801223e:	d4ee      	bmi.n	801221e <__smakebuf_r+0x18>
 8012240:	f023 0303 	bic.w	r3, r3, #3
 8012244:	f043 0302 	orr.w	r3, r3, #2
 8012248:	81a3      	strh	r3, [r4, #12]
 801224a:	e7e2      	b.n	8012212 <__smakebuf_r+0xc>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012256:	81a3      	strh	r3, [r4, #12]
 8012258:	9b01      	ldr	r3, [sp, #4]
 801225a:	6020      	str	r0, [r4, #0]
 801225c:	b15b      	cbz	r3, 8012276 <__smakebuf_r+0x70>
 801225e:	4630      	mov	r0, r6
 8012260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012264:	f000 f81e 	bl	80122a4 <_isatty_r>
 8012268:	b128      	cbz	r0, 8012276 <__smakebuf_r+0x70>
 801226a:	89a3      	ldrh	r3, [r4, #12]
 801226c:	f023 0303 	bic.w	r3, r3, #3
 8012270:	f043 0301 	orr.w	r3, r3, #1
 8012274:	81a3      	strh	r3, [r4, #12]
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	431d      	orrs	r5, r3
 801227a:	81a5      	strh	r5, [r4, #12]
 801227c:	e7cf      	b.n	801221e <__smakebuf_r+0x18>
	...

08012280 <_fstat_r>:
 8012280:	b538      	push	{r3, r4, r5, lr}
 8012282:	2300      	movs	r3, #0
 8012284:	4d06      	ldr	r5, [pc, #24]	@ (80122a0 <_fstat_r+0x20>)
 8012286:	4604      	mov	r4, r0
 8012288:	4608      	mov	r0, r1
 801228a:	4611      	mov	r1, r2
 801228c:	602b      	str	r3, [r5, #0]
 801228e:	f7f1 fb3b 	bl	8003908 <_fstat>
 8012292:	1c43      	adds	r3, r0, #1
 8012294:	d102      	bne.n	801229c <_fstat_r+0x1c>
 8012296:	682b      	ldr	r3, [r5, #0]
 8012298:	b103      	cbz	r3, 801229c <_fstat_r+0x1c>
 801229a:	6023      	str	r3, [r4, #0]
 801229c:	bd38      	pop	{r3, r4, r5, pc}
 801229e:	bf00      	nop
 80122a0:	20001b18 	.word	0x20001b18

080122a4 <_isatty_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	2300      	movs	r3, #0
 80122a8:	4d05      	ldr	r5, [pc, #20]	@ (80122c0 <_isatty_r+0x1c>)
 80122aa:	4604      	mov	r4, r0
 80122ac:	4608      	mov	r0, r1
 80122ae:	602b      	str	r3, [r5, #0]
 80122b0:	f7f1 fb39 	bl	8003926 <_isatty>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	d102      	bne.n	80122be <_isatty_r+0x1a>
 80122b8:	682b      	ldr	r3, [r5, #0]
 80122ba:	b103      	cbz	r3, 80122be <_isatty_r+0x1a>
 80122bc:	6023      	str	r3, [r4, #0]
 80122be:	bd38      	pop	{r3, r4, r5, pc}
 80122c0:	20001b18 	.word	0x20001b18

080122c4 <_init>:
 80122c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c6:	bf00      	nop
 80122c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122ca:	bc08      	pop	{r3}
 80122cc:	469e      	mov	lr, r3
 80122ce:	4770      	bx	lr

080122d0 <_fini>:
 80122d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d2:	bf00      	nop
 80122d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122d6:	bc08      	pop	{r3}
 80122d8:	469e      	mov	lr, r3
 80122da:	4770      	bx	lr
