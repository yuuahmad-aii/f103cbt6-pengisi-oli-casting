
f103cbt6-pengisi-oli-casting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012234  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  08012348  08012348  00013348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ee4  08012ee4  0001435c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012ee4  08012ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012eec  08012eec  0001435c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012eec  08012eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ef0  08012ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  08012ef4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001758  20000360  08013250  00014360  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab8  08013250  00014ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001435c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b107  00000000  00000000  00014385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af8  00000000  00000000  0002f48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b5  00000000  00000000  00035968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9ff  00000000  00000000  00036d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218f7  00000000  00000000  0005471c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000970b5  00000000  00000000  00076013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d0c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000834c  00000000  00000000  0010d10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00115458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	0801232c 	.word	0x0801232c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	0801232c 	.word	0x0801232c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	@ 0x58
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8001188:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	4993      	ldr	r1, [pc, #588]	@ (800140c <HCSR04_Init+0x290>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a90      	ldr	r2, [pc, #576]	@ (8001410 <HCSR04_Init+0x294>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10c      	bne.n	80011ec <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b90      	ldr	r3, [pc, #576]	@ (8001414 <HCSR04_Init+0x298>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a8f      	ldr	r2, [pc, #572]	@ (8001414 <HCSR04_Init+0x298>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b8d      	ldr	r3, [pc, #564]	@ (8001414 <HCSR04_Init+0x298>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	e05e      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	4987      	ldr	r1, [pc, #540]	@ (800140c <HCSR04_Init+0x290>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a86      	ldr	r2, [pc, #536]	@ (8001418 <HCSR04_Init+0x29c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10c      	bne.n	800121c <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b84      	ldr	r3, [pc, #528]	@ (8001414 <HCSR04_Init+0x298>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a83      	ldr	r2, [pc, #524]	@ (8001414 <HCSR04_Init+0x298>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b81      	ldr	r3, [pc, #516]	@ (8001414 <HCSR04_Init+0x298>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	e046      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	497b      	ldr	r1, [pc, #492]	@ (800140c <HCSR04_Init+0x290>)
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a7b      	ldr	r2, [pc, #492]	@ (800141c <HCSR04_Init+0x2a0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10c      	bne.n	800124c <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b78      	ldr	r3, [pc, #480]	@ (8001414 <HCSR04_Init+0x298>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a77      	ldr	r2, [pc, #476]	@ (8001414 <HCSR04_Init+0x298>)
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <HCSR04_Init+0x298>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	e02e      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	496f      	ldr	r1, [pc, #444]	@ (800140c <HCSR04_Init+0x290>)
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a70      	ldr	r2, [pc, #448]	@ (8001420 <HCSR04_Init+0x2a4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10c      	bne.n	800127c <HCSR04_Init+0x100>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <HCSR04_Init+0x298>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a6b      	ldr	r2, [pc, #428]	@ (8001414 <HCSR04_Init+0x298>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <HCSR04_Init+0x298>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	e016      	b.n	80012aa <HCSR04_Init+0x12e>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4963      	ldr	r1, [pc, #396]	@ (800140c <HCSR04_Init+0x290>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a65      	ldr	r2, [pc, #404]	@ (8001424 <HCSR04_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10b      	bne.n	80012aa <HCSR04_Init+0x12e>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001292:	4b60      	ldr	r3, [pc, #384]	@ (8001414 <HCSR04_Init+0x298>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a5f      	ldr	r2, [pc, #380]	@ (8001414 <HCSR04_Init+0x298>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <HCSR04_Init+0x298>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4957      	ldr	r1, [pc, #348]	@ (800140c <HCSR04_Init+0x290>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3304      	adds	r3, #4
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2302      	movs	r3, #2
 80012c8:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	494f      	ldr	r1, [pc, #316]	@ (800140c <HCSR04_Init+0x290>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 ff63 	bl	80041ac <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4948      	ldr	r1, [pc, #288]	@ (800140c <HCSR04_Init+0x290>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3308      	adds	r3, #8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012fc:	484a      	ldr	r0, [pc, #296]	@ (8001428 <HCSR04_Init+0x2ac>)
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	3304      	adds	r3, #4
 800130a:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	493f      	ldr	r1, [pc, #252]	@ (800140c <HCSR04_Init+0x290>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3308      	adds	r3, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001322:	4841      	ldr	r0, [pc, #260]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4403      	add	r3, r0
 800132e:	3308      	adds	r3, #8
 8001330:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	493c      	ldr	r1, [pc, #240]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	3302      	adds	r3, #2
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4937      	ldr	r1, [pc, #220]	@ (8001428 <HCSR04_Init+0x2ac>)
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	331c      	adds	r3, #28
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	4932      	ldr	r1, [pc, #200]	@ (8001428 <HCSR04_Init+0x2ac>)
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3308      	adds	r3, #8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <HCSR04_Init+0x20a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	492d      	ldr	r1, [pc, #180]	@ (8001428 <HCSR04_Init+0x2ac>)
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3308      	adds	r3, #8
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4920      	ldr	r1, [pc, #128]	@ (800140c <HCSR04_Init+0x290>)
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	330c      	adds	r3, #12
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10a      	bne.n	80013b2 <HCSR04_Init+0x236>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	4922      	ldr	r1, [pc, #136]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3320      	adds	r3, #32
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e051      	b.n	8001456 <HCSR04_Init+0x2da>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	4915      	ldr	r1, [pc, #84]	@ (800140c <HCSR04_Init+0x290>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	330c      	adds	r3, #12
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d10a      	bne.n	80013de <HCSR04_Init+0x262>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4917      	ldr	r1, [pc, #92]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3320      	adds	r3, #32
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e03b      	b.n	8001456 <HCSR04_Init+0x2da>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	490a      	ldr	r1, [pc, #40]	@ (800140c <HCSR04_Init+0x290>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	330c      	adds	r3, #12
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d11b      	bne.n	800142c <HCSR04_Init+0x2b0>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	490c      	ldr	r1, [pc, #48]	@ (8001428 <HCSR04_Init+0x2ac>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3320      	adds	r3, #32
 8001404:	2204      	movs	r2, #4
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e025      	b.n	8001456 <HCSR04_Init+0x2da>
 800140a:	bf00      	nop
 800140c:	08012a24 	.word	0x08012a24
 8001410:	40010800 	.word	0x40010800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40011800 	.word	0x40011800
 8001428:	2000037c 	.word	0x2000037c
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4941      	ldr	r1, [pc, #260]	@ (8001534 <HCSR04_Init+0x3b8>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d109      	bne.n	8001456 <HCSR04_Init+0x2da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	493c      	ldr	r1, [pc, #240]	@ (8001538 <HCSR04_Init+0x3bc>)
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3320      	adds	r3, #32
 8001452:	2208      	movs	r2, #8
 8001454:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4936      	ldr	r1, [pc, #216]	@ (8001534 <HCSR04_Init+0x3b8>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4932      	ldr	r1, [pc, #200]	@ (8001538 <HCSR04_Init+0x3bc>)
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	492b      	ldr	r1, [pc, #172]	@ (8001538 <HCSR04_Init+0x3bc>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3308      	adds	r3, #8
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f006 fbbe 	bl	8007c2c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80014b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ba:	4619      	mov	r1, r3
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f006 ff47 	bl	8008350 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f006 fc54 	bl	8007d70 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80014d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014d4:	4619      	mov	r1, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f007 fa98 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigIC.ICFilter = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4911      	ldr	r1, [pc, #68]	@ (8001534 <HCSR04_Init+0x3b8>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	330c      	adds	r3, #12
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4619      	mov	r1, r3
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f006 fe87 	bl	8008218 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f006 fbde 	bl	8007ccc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <HCSR04_Init+0x3b8>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	330c      	adds	r3, #12
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f006 fc7b 	bl	8007e20 <HAL_TIM_IC_Start_IT>
}
 800152a:	bf00      	nop
 800152c:	3758      	adds	r7, #88	@ 0x58
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	08012a24 	.word	0x08012a24
 8001538:	2000037c 	.word	0x2000037c

0800153c <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e023      	b.n	8001596 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <HCSR04_TMR_OVF_ISR+0x6c>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4403      	add	r3, r0
 8001560:	3308      	adds	r3, #8
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4299      	cmp	r1, r3
 8001566:	d113      	bne.n	8001590 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	4910      	ldr	r1, [pc, #64]	@ (80015ac <HCSR04_TMR_OVF_ISR+0x70>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3302      	adds	r3, #2
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b298      	uxth	r0, r3
 800157e:	490b      	ldr	r1, [pc, #44]	@ (80015ac <HCSR04_TMR_OVF_ISR+0x70>)
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3302      	adds	r3, #2
 800158c:	4602      	mov	r2, r0
 800158e:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	3301      	adds	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d9d8      	bls.n	800154e <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	08012a24 	.word	0x08012a24
 80015ac:	2000037c 	.word	0x2000037c

080015b0 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e22a      	b.n	8001a1c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	486b      	ldr	r0, [pc, #428]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3308      	adds	r3, #8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4299      	cmp	r1, r3
 80015de:	f040 821a 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f19      	ldrb	r1, [r3, #28]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	4865      	ldr	r0, [pc, #404]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	3320      	adds	r3, #32
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4299      	cmp	r1, r3
 80015fa:	f040 820c 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	495f      	ldr	r1, [pc, #380]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80b8 	bne.w	8001784 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	4959      	ldr	r1, [pc, #356]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	330c      	adds	r3, #12
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bfc      	ldrb	r4, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f006 ff58 	bl	80084e0 <HAL_TIM_ReadCapturedValue>
 8001630:	4602      	mov	r2, r0
 8001632:	4953      	ldr	r1, [pc, #332]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001634:	4623      	mov	r3, r4
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4423      	add	r3, r4
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	494e      	ldr	r1, [pc, #312]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	4949      	ldr	r1, [pc, #292]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	330c      	adds	r3, #12
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d108      	bne.n	800167c <HCSR04_TMR_IC_ISR+0xcc>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020a 	bic.w	r2, r2, #10
 8001678:	621a      	str	r2, [r3, #32]
 800167a:	e02f      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	493f      	ldr	r1, [pc, #252]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	330c      	adds	r3, #12
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d108      	bne.n	80016a4 <HCSR04_TMR_IC_ISR+0xf4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e01b      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	4935      	ldr	r1, [pc, #212]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	330c      	adds	r3, #12
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d108      	bne.n	80016cc <HCSR04_TMR_IC_ISR+0x11c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e007      	b.n	80016dc <HCSR04_TMR_IC_ISR+0x12c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	4927      	ldr	r1, [pc, #156]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	330c      	adds	r3, #12
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HCSR04_TMR_IC_ISR+0x154>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0202 	orr.w	r2, r2, #2
 8001700:	621a      	str	r2, [r3, #32]
 8001702:	e02f      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	491d      	ldr	r1, [pc, #116]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	330c      	adds	r3, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d108      	bne.n	800172c <HCSR04_TMR_IC_ISR+0x17c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	e01b      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	4913      	ldr	r1, [pc, #76]	@ (800177c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d108      	bne.n	8001754 <HCSR04_TMR_IC_ISR+0x1a4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	e007      	b.n	8001764 <HCSR04_TMR_IC_ISR+0x1b4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001762:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	4906      	ldr	r1, [pc, #24]	@ (8001780 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3302      	adds	r3, #2
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	e14d      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 800177a:	bf00      	nop
 800177c:	08012a24 	.word	0x08012a24
 8001780:	2000037c 	.word	0x2000037c
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	49ac      	ldr	r1, [pc, #688]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	f040 813e 	bne.w	8001a16 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	49a7      	ldr	r1, [pc, #668]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3308      	adds	r3, #8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	49a2      	ldr	r1, [pc, #648]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c6:	489c      	ldr	r0, [pc, #624]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4403      	add	r3, r0
 80017d2:	3308      	adds	r3, #8
 80017d4:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	4998      	ldr	r1, [pc, #608]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	330c      	adds	r3, #12
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	7bfc      	ldrb	r4, [r7, #15]
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f006 fe77 	bl	80084e0 <HAL_TIM_ReadCapturedValue>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4990      	ldr	r1, [pc, #576]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80017f6:	4623      	mov	r3, r4
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4423      	add	r3, r4
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3310      	adds	r3, #16
 8001802:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	498c      	ldr	r1, [pc, #560]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3310      	adds	r3, #16
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	4887      	ldr	r0, [pc, #540]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4403      	add	r3, r0
 8001824:	3302      	adds	r3, #2
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	461c      	mov	r4, r3
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	4882      	ldr	r0, [pc, #520]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4403      	add	r3, r0
 8001838:	3308      	adds	r3, #8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	fb04 f303 	mul.w	r3, r4, r3
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	4419      	add	r1, r3
 8001846:	487c      	ldr	r0, [pc, #496]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4403      	add	r3, r0
 8001852:	3310      	adds	r3, #16
 8001854:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	4977      	ldr	r1, [pc, #476]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3310      	adds	r3, #16
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	4873      	ldr	r0, [pc, #460]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4403      	add	r3, r0
 8001876:	330c      	adds	r3, #12
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	1ac9      	subs	r1, r1, r3
 800187e:	486e      	ldr	r0, [pc, #440]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4403      	add	r3, r0
 800188a:	3314      	adds	r3, #20
 800188c:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	4969      	ldr	r1, [pc, #420]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3314      	adds	r3, #20
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fd9f 	bl	80003e4 <__aeabi_ui2d>
 80018a6:	a362      	add	r3, pc, #392	@ (adr r3, 8001a30 <HCSR04_TMR_IC_ISR+0x480>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe14 	bl	80004d8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	4960      	ldr	r1, [pc, #384]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3310      	adds	r3, #16
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3301      	adds	r3, #1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd86 	bl	80003e4 <__aeabi_ui2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe ff24 	bl	800072c <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	7bfc      	ldrb	r4, [r7, #15]
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f8eb 	bl	8000ac8 <__aeabi_d2f>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4950      	ldr	r1, [pc, #320]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 80018f6:	4623      	mov	r3, r4
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4423      	add	r3, r4
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3318      	adds	r3, #24
 8001902:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	494c      	ldr	r1, [pc, #304]	@ (8001a38 <HCSR04_TMR_IC_ISR+0x488>)
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	4948      	ldr	r1, [pc, #288]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	330c      	adds	r3, #12
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <HCSR04_TMR_IC_ISR+0x38e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a1a      	ldr	r2, [r3, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	621a      	str	r2, [r3, #32]
 800193c:	e02f      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	493e      	ldr	r1, [pc, #248]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	330c      	adds	r3, #12
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d108      	bne.n	8001966 <HCSR04_TMR_IC_ISR+0x3b6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	e01b      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	4934      	ldr	r1, [pc, #208]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	330c      	adds	r3, #12
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d108      	bne.n	800198e <HCSR04_TMR_IC_ISR+0x3de>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	e007      	b.n	800199e <HCSR04_TMR_IC_ISR+0x3ee>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800199c:	6213      	str	r3, [r2, #32]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	4926      	ldr	r1, [pc, #152]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HCSR04_TMR_IC_ISR+0x412>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a12      	ldr	r2, [r2, #32]
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	e029      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	491d      	ldr	r1, [pc, #116]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	330c      	adds	r3, #12
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d106      	bne.n	80019e6 <HCSR04_TMR_IC_ISR+0x436>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e017      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	4914      	ldr	r1, [pc, #80]	@ (8001a3c <HCSR04_TMR_IC_ISR+0x48c>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	330c      	adds	r3, #12
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d106      	bne.n	8001a0a <HCSR04_TMR_IC_ISR+0x45a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e005      	b.n	8001a16 <HCSR04_TMR_IC_ISR+0x466>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	f67f add1 	bls.w	80015c6 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	b020c49c 	.word	0xb020c49c
 8001a34:	3f916872 	.word	0x3f916872
 8001a38:	2000037c 	.word	0x2000037c
 8001a3c:	08012a24 	.word	0x08012a24

08001a40 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <HCSR04_Read+0x28>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3318      	adds	r3, #24
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000037c 	.word	0x2000037c

08001a6c <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4923      	ldr	r1, [pc, #140]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	491f      	ldr	r1, [pc, #124]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3304      	adds	r3, #4
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f002 fd21 	bl	80044e2 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <HCSR04_Trigger+0xa0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HCSR04_Trigger+0xa4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001b14 <HCSR04_Trigger+0xa8>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0c9b      	lsrs	r3, r3, #18
 8001ab2:	005a      	lsls	r2, r3, #1
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HCSR04_Trigger+0xa4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <HCSR04_Trigger+0xa8>)
 8001aba:	fba1 1303 	umull	r1, r3, r1, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HCSR04_Trigger+0xa0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f8      	bhi.n	8001ac6 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <HCSR04_Trigger+0x9c>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3304      	adds	r3, #4
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	4619      	mov	r1, r3
 8001afa:	f002 fcf2 	bl	80044e2 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	08012a24 	.word	0x08012a24
 8001b0c:	e000e010 	.word	0xe000e010
 8001b10:	20000004 	.word	0x20000004
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <lcd_send_cmd>:
#define LCD_I2C_ADDR 0x4E // Alamat umum adalah 0x27 << 1 atau 0x3F << 1. Cek datasheet.

I2C_HandleTypeDef *i2c_handle;

void lcd_send_cmd(char cmd)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f023 030f 	bic.w	r3, r3, #15
 8001b28:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // en=1, rs=0
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f043 030c 	orr.w	r3, r3, #12
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // en=0, rs=0
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // en=1, rs=0
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	f043 030c 	orr.w	r3, r3, #12
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // en=0, rs=0
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <lcd_send_cmd+0x5c>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f107 0208 	add.w	r2, r7, #8
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2304      	movs	r3, #4
 8001b66:	214e      	movs	r1, #78	@ 0x4e
 8001b68:	f002 fe18 	bl	800479c <HAL_I2C_Master_Transmit>
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200003e8 	.word	0x200003e8

08001b78 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f023 030f 	bic.w	r3, r3, #15
 8001b88:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // en=1, rs=1
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f043 030d 	orr.w	r3, r3, #13
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // en=0, rs=1
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f043 0309 	orr.w	r3, r3, #9
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // en=1, rs=1
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	f043 030d 	orr.w	r3, r3, #13
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // en=0, rs=1
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	f043 0309 	orr.w	r3, r3, #9
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(i2c_handle, LCD_I2C_ADDR, (uint8_t *)data_t, 4, 100);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <lcd_send_data+0x5c>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	2364      	movs	r3, #100	@ 0x64
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	214e      	movs	r1, #78	@ 0x4e
 8001bc8:	f002 fde8 	bl	800479c <HAL_I2C_Master_Transmit>
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200003e8 	.word	0x200003e8

08001bd8 <lcd_clear>:

void lcd_clear(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff9b 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(2);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f001 ffb0 	bl	8003b48 <HAL_Delay>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <lcd_set_cursor>:

void lcd_set_cursor(int row, int col)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    uint8_t cursor_addr;
    switch (row)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <lcd_set_cursor+0x18>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <lcd_set_cursor+0x22>
 8001c02:	e009      	b.n	8001c18 <lcd_set_cursor+0x2c>
    {
    case 0:
        cursor_addr = 0x80 + col;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3b80      	subs	r3, #128	@ 0x80
 8001c0a:	73fb      	strb	r3, [r7, #15]
        break;
 8001c0c:	e008      	b.n	8001c20 <lcd_set_cursor+0x34>
    case 1:
        cursor_addr = 0xC0 + col;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b40      	subs	r3, #64	@ 0x40
 8001c14:	73fb      	strb	r3, [r7, #15]
        break;
 8001c16:	e003      	b.n	8001c20 <lcd_set_cursor+0x34>
    default:
        cursor_addr = 0x80 + col;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3b80      	subs	r3, #128	@ 0x80
 8001c1e:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(cursor_addr);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff78 	bl	8001b18 <lcd_send_cmd>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <lcd_init+0x84>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001c3e:	2032      	movs	r0, #50	@ 0x32
 8001c40:	f001 ff82 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c44:	2030      	movs	r0, #48	@ 0x30
 8001c46:	f7ff ff67 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(5);
 8001c4a:	2005      	movs	r0, #5
 8001c4c:	f001 ff7c 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c50:	2030      	movs	r0, #48	@ 0x30
 8001c52:	f7ff ff61 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f001 ff76 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c5c:	2030      	movs	r0, #48	@ 0x30
 8001c5e:	f7ff ff5b 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f001 ff70 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x20);
 8001c68:	2020      	movs	r0, #32
 8001c6a:	f7ff ff55 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(10);
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f001 ff6a 	bl	8003b48 <HAL_Delay>

    lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001c74:	2028      	movs	r0, #40	@ 0x28
 8001c76:	f7ff ff4f 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f001 ff64 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8001c80:	2008      	movs	r0, #8
 8001c82:	f7ff ff49 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f001 ff5e 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x01); // clear display
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff ff43 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(2);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f001 ff58 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c98:	2006      	movs	r0, #6
 8001c9a:	f7ff ff3d 	bl	8001b18 <lcd_send_cmd>
    HAL_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f001 ff52 	bl	8003b48 <HAL_Delay>
    lcd_send_cmd(0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001ca4:	200c      	movs	r0, #12
 8001ca6:	f7ff ff37 	bl	8001b18 <lcd_send_cmd>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200003e8 	.word	0x200003e8

08001cb8 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    while (*str)
 8001cc0:	e006      	b.n	8001cd0 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff54 	bl	8001b78 <lcd_send_data>
    while (*str)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f4      	bne.n	8001cc2 <lcd_send_string+0xa>
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cea:	f001 fecb 	bl	8003a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cee:	f000 f899 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf2:	f000 faf5 	bl	80022e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cf6:	f000 f8f5 	bl	8001ee4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001cfa:	f000 f921 	bl	8001f40 <MX_RTC_Init>
  MX_SPI1_Init();
 8001cfe:	f000 f969 	bl	8001fd4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001d02:	f009 fa89 	bl	800b218 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001d06:	f00a feaf 	bl	800ca68 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001d0a:	f000 f999 	bl	8002040 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d0e:	f000 fa07 	bl	8002120 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d12:	f000 fa75 	bl	8002200 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#if GUNAKAN_LCD
  lcd_init(&hi2c1); // Inisialisasi LCD I2C
 8001d16:	4834      	ldr	r0, [pc, #208]	@ (8001de8 <main+0x104>)
 8001d18:	f7ff ff8a 	bl	8001c30 <lcd_init>
  lcd_clear();      // Bersihkan LCD
 8001d1c:	f7ff ff5c 	bl	8001bd8 <lcd_clear>

  // pesan awal di LCD
  lcd_set_cursor(0, 0);
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ff62 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "hai dunia");
 8001d28:	4930      	ldr	r1, [pc, #192]	@ (8001dec <main+0x108>)
 8001d2a:	4831      	ldr	r0, [pc, #196]	@ (8001df0 <main+0x10c>)
 8001d2c:	f00c fa64 	bl	800e1f8 <siprintf>
  lcd_send_string(lcd_buffer);
 8001d30:	482f      	ldr	r0, [pc, #188]	@ (8001df0 <main+0x10c>)
 8001d32:	f7ff ffc1 	bl	8001cb8 <lcd_send_string>
#endif

  // inisialisasi sensor ultrasonik
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8001d36:	492f      	ldr	r1, [pc, #188]	@ (8001df4 <main+0x110>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fa1f 	bl	800117c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR2, &htim3);
 8001d3e:	492e      	ldr	r1, [pc, #184]	@ (8001df8 <main+0x114>)
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fa1b 	bl	800117c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR3, &htim4);
 8001d46:	492d      	ldr	r1, [pc, #180]	@ (8001dfc <main+0x118>)
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fa17 	bl	800117c <HCSR04_Init>

  // Muat parameter dari Flash saat startup
  Load_Parameters_From_Flash();
 8001d4e:	f000 fc7f 	bl	8002650 <Load_Parameters_From_Flash>

  // Beri sedikit waktu agar USB siap
  HAL_Delay(2000);
 8001d52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d56:	f001 fef7 	bl	8003b48 <HAL_Delay>
  VCP_printf("\r\nSistem Kontrol Drum Siap. Ketik '$H' untuk bantuan.\r\n");
 8001d5a:	4829      	ldr	r0, [pc, #164]	@ (8001e00 <main+0x11c>)
 8001d5c:	f000 fbca 	bl	80024f4 <VCP_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fe6d 	bl	8001a40 <HCSR04_Read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <main+0x120>)
 8001d6a:	6013      	str	r3, [r2, #0]
    Distance2 = HCSR04_Read(HCSR04_SENSOR2);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fe67 	bl	8001a40 <HCSR04_Read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <main+0x124>)
 8001d76:	6013      	str	r3, [r2, #0]
    Distance3 = HCSR04_Read(HCSR04_SENSOR3);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fe61 	bl	8001a40 <HCSR04_Read>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <main+0x128>)
 8001d82:	6013      	str	r3, [r2, #0]

    uint32_t current_time = HAL_GetTick();
 8001d84:	f001 fed6 	bl	8003b34 <HAL_GetTick>
 8001d88:	6078      	str	r0, [r7, #4]

    // --- Task-like functions execution ---

    // Run HCSR04_Trigger every 100ms
    if (current_time - last_trig_time >= trig_time)
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <main+0x12c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <main+0x130>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d30b      	bcc.n	8001db2 <main+0xce>
    {
      // if (counter_trig == 1)
      HCSR04_Trigger(HCSR04_SENSOR1);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fe66 	bl	8001a6c <HCSR04_Trigger>
      // else if (counter_trig == 2)
      HCSR04_Trigger(HCSR04_SENSOR2);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff fe63 	bl	8001a6c <HCSR04_Trigger>
      // else if (counter_trig == 3)
      HCSR04_Trigger(HCSR04_SENSOR3);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f7ff fe60 	bl	8001a6c <HCSR04_Trigger>
      // else
      //   counter_trig = 0;
      // counter_trig++;
      last_trig_time = current_time;
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <main+0x12c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
    }

    // Cek apakah ada perintah baru dari USB VCP untuk diproses
    if (g_command_ready)
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <main+0x134>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <main+0xf4>
    {
      Process_Command(g_usb_rx_buffer);
 8001dbc:	4817      	ldr	r0, [pc, #92]	@ (8001e1c <main+0x138>)
 8001dbe:	f000 fc71 	bl	80026a4 <Process_Command>
      // Reset buffer dan flag
      memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <main+0x138>)
 8001dc8:	f00c fae6 	bl	800e398 <memset>
      g_rx_index = 0;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <main+0x13c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
      g_command_ready = 0;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <main+0x134>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
    }

    Run_Control_Logic();
 8001dd8:	f000 ffe0 	bl	8002d9c <Run_Control_Logic>

#if GUNAKAN_LCD == 1
    Update_LCD_Display();
 8001ddc:	f001 fa94 	bl	8003308 <Update_LCD_Display>
#endif

    HAL_Delay(100);
 8001de0:	2064      	movs	r0, #100	@ 0x64
 8001de2:	f001 feb1 	bl	8003b48 <HAL_Delay>
  {
 8001de6:	e7bb      	b.n	8001d60 <main+0x7c>
 8001de8:	200003ec 	.word	0x200003ec
 8001dec:	08012348 	.word	0x08012348
 8001df0:	2000067c 	.word	0x2000067c
 8001df4:	200004ac 	.word	0x200004ac
 8001df8:	200004f4 	.word	0x200004f4
 8001dfc:	2000053c 	.word	0x2000053c
 8001e00:	08012354 	.word	0x08012354
 8001e04:	20000758 	.word	0x20000758
 8001e08:	2000075c 	.word	0x2000075c
 8001e0c:	20000760 	.word	0x20000760
 8001e10:	20000764 	.word	0x20000764
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000754 	.word	0x20000754
 8001e1c:	200006d0 	.word	0x200006d0
 8001e20:	20000750 	.word	0x20000750

08001e24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	@ 0x50
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2e:	2228      	movs	r2, #40	@ 0x28
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00c fab0 	bl	800e398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001e54:	2309      	movs	r3, #9
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e62:	2301      	movs	r3, #1
 8001e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e66:	2301      	movs	r3, #1
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fd50 	bl	8006924 <HAL_RCC_OscConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e8a:	f001 faed 	bl	8003468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 ffbc 	bl	8006e28 <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eb6:	f001 fad7 	bl	8003468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 8001eba:	2311      	movs	r3, #17
 8001ebc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ec4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ec8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 f939 	bl	8007144 <HAL_RCCEx_PeriphCLKConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ed8:	f001 fac6 	bl	8003468 <Error_Handler>
  }
}
 8001edc:	bf00      	nop
 8001ede:	3750      	adds	r7, #80	@ 0x50
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f002 faf7 	bl	8004514 <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f001 fa9c 	bl	8003468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200003ec 	.word	0x200003ec
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	000186a0 	.word	0x000186a0

08001f40 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2100      	movs	r1, #0
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	460a      	mov	r2, r1
 8001f50:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f58:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <MX_RTC_Init+0x90>)
 8001f5a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f62:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f6a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f6c:	4817      	ldr	r0, [pc, #92]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f6e:	f005 fa55 	bl	800741c <HAL_RTC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001f78:	f001 fa76 	bl	8003468 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480f      	ldr	r0, [pc, #60]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001f90:	f005 fad0 	bl	8007534 <HAL_RTC_SetTime>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001f9a:	f001 fa65 	bl	8003468 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_RTC_Init+0x8c>)
 8001fb6:	f005 fb55 	bl	8007664 <HAL_RTC_SetDate>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001fc0:	f001 fa52 	bl	8003468 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000440 	.word	0x20000440
 8001fd0:	40002800 	.word	0x40002800

08001fd4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fd8:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fda:	4a18      	ldr	r2, [pc, #96]	@ (800203c <MX_SPI1_Init+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fde:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fe0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002008:	2208      	movs	r2, #8
 800200a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <MX_SPI1_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <MX_SPI1_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002020:	220a      	movs	r2, #10
 8002022:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	@ (8002038 <MX_SPI1_Init+0x64>)
 8002026:	f005 fd7d 	bl	8007b24 <HAL_SPI_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002030:	f001 fa1a 	bl	8003468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000454 	.word	0x20000454
 800203c:	40013000 	.word	0x40013000

08002040 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0318 	add.w	r3, r7, #24
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800206a:	4b2c      	ldr	r3, [pc, #176]	@ (800211c <MX_TIM2_Init+0xdc>)
 800206c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002072:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <MX_TIM2_Init+0xdc>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800207e:	4b27      	ldr	r3, [pc, #156]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b25      	ldr	r3, [pc, #148]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b23      	ldr	r3, [pc, #140]	@ (800211c <MX_TIM2_Init+0xdc>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002092:	4822      	ldr	r0, [pc, #136]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002094:	f005 fdca 	bl	8007c2c <HAL_TIM_Base_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800209e:	f001 f9e3 	bl	8003468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	4619      	mov	r1, r3
 80020ae:	481b      	ldr	r0, [pc, #108]	@ (800211c <MX_TIM2_Init+0xdc>)
 80020b0:	f006 f94e 	bl	8008350 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020ba:	f001 f9d5 	bl	8003468 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020be:	4817      	ldr	r0, [pc, #92]	@ (800211c <MX_TIM2_Init+0xdc>)
 80020c0:	f005 fe56 	bl	8007d70 <HAL_TIM_IC_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ca:	f001 f9cd 	bl	8003468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	480f      	ldr	r0, [pc, #60]	@ (800211c <MX_TIM2_Init+0xdc>)
 80020de:	f006 fc95 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80020e8:	f001 f9be 	bl	8003468 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020f0:	2301      	movs	r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	@ (800211c <MX_TIM2_Init+0xdc>)
 8002104:	f006 f888 	bl	8008218 <HAL_TIM_IC_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800210e:	f001 f9ab 	bl	8003468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	@ 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200004ac 	.word	0x200004ac

08002120 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002126:	f107 0318 	add.w	r3, r7, #24
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800213e:	463b      	mov	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214a:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800214c:	4a2b      	ldr	r2, [pc, #172]	@ (80021fc <MX_TIM3_Init+0xdc>)
 800214e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002150:	4b29      	ldr	r3, [pc, #164]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800215e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002170:	4821      	ldr	r0, [pc, #132]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 8002172:	f005 fd5b 	bl	8007c2c <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800217c:	f001 f974 	bl	8003468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002184:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4619      	mov	r1, r3
 800218c:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800218e:	f006 f8df 	bl	8008350 <HAL_TIM_ConfigClockSource>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002198:	f001 f966 	bl	8003468 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800219c:	4816      	ldr	r0, [pc, #88]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 800219e:	f005 fde7 	bl	8007d70 <HAL_TIM_IC_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f001 f95e 	bl	8003468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4619      	mov	r1, r3
 80021ba:	480f      	ldr	r0, [pc, #60]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 80021bc:	f006 fc26 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80021c6:	f001 f94f 	bl	8003468 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ce:	2301      	movs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_TIM3_Init+0xd8>)
 80021e2:	f006 f819 	bl	8008218 <HAL_TIM_IC_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80021ec:	f001 f93c 	bl	8003468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	@ 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200004f4 	.word	0x200004f4
 80021fc:	40000400 	.word	0x40000400

08002200 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800221e:	463b      	mov	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800222a:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800222c:	4a2b      	ldr	r2, [pc, #172]	@ (80022dc <MX_TIM4_Init+0xdc>)
 800222e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800223c:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800223e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002242:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002244:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224a:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002250:	4821      	ldr	r0, [pc, #132]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 8002252:	f005 fceb 	bl	8007c2c <HAL_TIM_Base_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800225c:	f001 f904 	bl	8003468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002264:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	4619      	mov	r1, r3
 800226c:	481a      	ldr	r0, [pc, #104]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800226e:	f006 f86f 	bl	8008350 <HAL_TIM_ConfigClockSource>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002278:	f001 f8f6 	bl	8003468 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800227c:	4816      	ldr	r0, [pc, #88]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800227e:	f005 fd77 	bl	8007d70 <HAL_TIM_IC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002288:	f001 f8ee 	bl	8003468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	480f      	ldr	r0, [pc, #60]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 800229c:	f006 fbb6 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80022a6:	f001 f8df 	bl	8003468 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ae:	2301      	movs	r3, #1
 80022b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <MX_TIM4_Init+0xd8>)
 80022c2:	f005 ffa9 	bl	8008218 <HAL_TIM_IC_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80022cc:	f001 f8cc 	bl	8003468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	@ 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000053c 	.word	0x2000053c
 80022dc:	40000800 	.word	0x40000800

080022e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	4b39      	ldr	r3, [pc, #228]	@ (80023dc <MX_GPIO_Init+0xfc>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <MX_GPIO_Init+0xfc>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800230c:	4b33      	ldr	r3, [pc, #204]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a32      	ldr	r2, [pc, #200]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a2c      	ldr	r2, [pc, #176]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a26      	ldr	r2, [pc, #152]	@ (80023dc <MX_GPIO_Init+0xfc>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <MX_GPIO_Init+0xfc>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	2110      	movs	r1, #16
 8002358:	4821      	ldr	r0, [pc, #132]	@ (80023e0 <MX_GPIO_Init+0x100>)
 800235a:	f002 f8c2 	bl	80044e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin | TRIG_1_Pin | TRIG_2_Pin | TRIG_3_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f24f 01ac 	movw	r1, #61612	@ 0xf0ac
 8002364:	481f      	ldr	r0, [pc, #124]	@ (80023e4 <MX_GPIO_Init+0x104>)
 8002366:	f002 f8bc 	bl	80044e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800236a:	2301      	movs	r3, #1
 800236c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	4818      	ldr	r0, [pc, #96]	@ (80023e0 <MX_GPIO_Init+0x100>)
 800237e:	f001 ff15 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002382:	2310      	movs	r3, #16
 8002384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2302      	movs	r3, #2
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4619      	mov	r1, r3
 8002398:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <MX_GPIO_Init+0x100>)
 800239a:	f001 ff07 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : POMPA_1_ON_Pin POMPA_2_ON_Pin */
  GPIO_InitStruct.Pin = POMPA_1_ON_Pin | POMPA_2_ON_Pin;
 800239e:	2303      	movs	r3, #3
 80023a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	@ (80023e4 <MX_GPIO_Init+0x104>)
 80023b2:	f001 fefb 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin LED_GREEN_Pin LED_RED_Pin POMPA_BA_Pin
                           POMPA_CB_Pin TRIG_1_Pin TRIG_2_Pin TRIG_3_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin | LED_GREEN_Pin | LED_RED_Pin | POMPA_BA_Pin | POMPA_CB_Pin | TRIG_1_Pin | TRIG_2_Pin | TRIG_3_Pin;
 80023b6:	f24f 03ac 	movw	r3, #61612	@ 0xf0ac
 80023ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <MX_GPIO_Init+0x104>)
 80023d0:	f001 feec 	bl	80041ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010800 	.word	0x40010800
 80023e4:	40010c00 	.word	0x40010c00

080023e8 <find_max_in_sample>:

/* USER CODE BEGIN 4 */
// Function to find the maximum value from a small sample
float find_max_in_sample(float *sample_buffer, float tinggi_drum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  float max_val = 0.0f;
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLE_SIZE; i++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	e014      	b.n	8002428 <find_max_in_sample+0x40>
  {
    if (sample_buffer[i] > max_val)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7fe fe58 	bl	80010c0 <__aeabi_fcmplt>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <find_max_in_sample+0x3a>
    {
      max_val = sample_buffer[i];
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLE_SIZE; i++)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b05      	cmp	r3, #5
 800242c:	dde7      	ble.n	80023fe <find_max_in_sample+0x16>
    }
  }

  if (max_val > tinggi_drum)
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7fe fe63 	bl	80010fc <__aeabi_fcmpgt>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <find_max_in_sample+0x58>
  {
    max_val = tinggi_drum; // jangan sampai nilainya melebihi max tinggi A
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  }

  return max_val;
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <calculate_moving_average>:

// kalkukasi moving average
float calculate_moving_average(float *buffer, uint8_t size, uint8_t is_full)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	4613      	mov	r3, r2
 800245a:	70bb      	strb	r3, [r7, #2]
  float sum = 0.0f;
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint8_t count = is_full ? size : buffer_index_1; // Gunakan jumlah data yang ada
 8002462:	78bb      	ldrb	r3, [r7, #2]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <calculate_moving_average+0x20>
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	e001      	b.n	8002470 <calculate_moving_average+0x24>
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <calculate_moving_average+0x78>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	73fb      	strb	r3, [r7, #15]

  if (count == 0)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <calculate_moving_average+0x32>
    return 0.0f;
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e01e      	b.n	80024bc <calculate_moving_average+0x70>

  for (int i = 0; i < count; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e00d      	b.n	80024a0 <calculate_moving_average+0x54>
  {
    sum += buffer[i];
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7fe fb6f 	bl	8000b74 <__addsf3>
 8002496:	4603      	mov	r3, r0
 8002498:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < count; i++)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3301      	adds	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbed      	blt.n	8002484 <calculate_moving_average+0x38>
  }
  return sum / count;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc16 	bl	8000cdc <__aeabi_i2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	6978      	ldr	r0, [r7, #20]
 80024b6:	f7fe fd19 	bl	8000eec <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000674 	.word	0x20000674

080024c8 <HAL_TIM_IC_CaptureCallback>:

  return sum_weighted_values / sum_of_weights;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_IC_ISR(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff f86d 	bl	80015b0 <HCSR04_TMR_IC_ISR>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_OVF_ISR(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff f828 	bl	800153c <HCSR04_TMR_OVF_ISR>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <VCP_printf>:

/**
 * @brief Mengirim string terformat melalui USB VCP.
 */
void VCP_printf(const char *format, ...)
{
 80024f4:	b40f      	push	{r0, r1, r2, r3}
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b0a2      	sub	sp, #136	@ 0x88
 80024fa:	af00      	add	r7, sp, #0
  char buf[126];
  va_list args;
  va_start(args, format);
 80024fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002500:	607b      	str	r3, [r7, #4]
  vsnprintf(buf, sizeof(buf), format, args);
 8002502:	f107 0008 	add.w	r0, r7, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800250c:	217e      	movs	r1, #126	@ 0x7e
 800250e:	f00b ff35 	bl	800e37c <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe1a 	bl	8000150 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	b29a      	uxth	r2, r3
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f00a fb62 	bl	800cbf0 <CDC_Transmit_FS>
}
 800252c:	bf00      	nop
 800252e:	3788      	adds	r7, #136	@ 0x88
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002536:	b004      	add	sp, #16
 8002538:	4770      	bx	lr
	...

0800253c <Set_Default_Parameters>:

/**
 * @brief Mengatur parameter ke nilai default.
 */
void Set_Default_Parameters(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  g_params.magic_number = FLASH_MAGIC_NUMBER;
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <Set_Default_Parameters+0x5c>)
 8002544:	601a      	str	r2, [r3, #0]
  g_params.tinggi_A = 85.0f;
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <Set_Default_Parameters+0x60>)
 800254a:	605a      	str	r2, [r3, #4]
  g_params.ambang_bawah_A = 70.0f;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <Set_Default_Parameters+0x58>)
 800254e:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <Set_Default_Parameters+0x64>)
 8002550:	609a      	str	r2, [r3, #8]
  g_params.target_penuh_A = 74.0f;
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002554:	4a13      	ldr	r2, [pc, #76]	@ (80025a4 <Set_Default_Parameters+0x68>)
 8002556:	60da      	str	r2, [r3, #12]
  g_params.tinggi_B = 85.0f;
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <Set_Default_Parameters+0x58>)
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <Set_Default_Parameters+0x60>)
 800255c:	611a      	str	r2, [r3, #16]
  g_params.ambang_bawah_B = 70.0f;
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <Set_Default_Parameters+0x64>)
 8002562:	615a      	str	r2, [r3, #20]
  g_params.target_penuh_B = 74.0f;
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002566:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <Set_Default_Parameters+0x68>)
 8002568:	619a      	str	r2, [r3, #24]
  g_params.tinggi_C = 85.0f;
 800256a:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <Set_Default_Parameters+0x58>)
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <Set_Default_Parameters+0x60>)
 800256e:	61da      	str	r2, [r3, #28]
  g_params.ambang_bawah_C = 70.0f;
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002572:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <Set_Default_Parameters+0x64>)
 8002574:	621a      	str	r2, [r3, #32]
  g_params.target_penuh_C = 74.0f;
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <Set_Default_Parameters+0x68>)
 800257a:	625a      	str	r2, [r3, #36]	@ 0x24
  g_params.sumber_kosong = 1.0f;
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <Set_Default_Parameters+0x58>)
 800257e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
  g_params.moving_avg_size = 30; // Nilai default 5
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <Set_Default_Parameters+0x58>)
 8002586:	221e      	movs	r2, #30
 8002588:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	200006a0 	.word	0x200006a0
 8002598:	deadbeef 	.word	0xdeadbeef
 800259c:	42aa0000 	.word	0x42aa0000
 80025a0:	428c0000 	.word	0x428c0000
 80025a4:	42940000 	.word	0x42940000

080025a8 <Save_Parameters_To_Flash>:

/**
 * @brief Menyimpan parameter ke Flash.
 */
void Save_Parameters_To_Flash(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 80025ae:	f001 fc6d 	bl	8003e8c <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  EraseInitStruct.PageAddress = FLASH_STORAGE_ADDRESS;
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <Save_Parameters_To_Flash+0x94>)
 80025bc:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.NbPages = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80025c2:	463a      	mov	r2, r7
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fd47 	bl	800405c <HAL_FLASHEx_Erase>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <Save_Parameters_To_Flash+0x38>
  {
    VCP_printf("Error: Gagal menghapus Flash!\r\n");
 80025d4:	481a      	ldr	r0, [pc, #104]	@ (8002640 <Save_Parameters_To_Flash+0x98>)
 80025d6:	f7ff ff8d 	bl	80024f4 <VCP_printf>
    HAL_FLASH_Lock();
 80025da:	f001 fc7d 	bl	8003ed8 <HAL_FLASH_Lock>
 80025de:	e029      	b.n	8002634 <Save_Parameters_To_Flash+0x8c>
    return;
  }

  uint32_t address = FLASH_STORAGE_ADDRESS;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <Save_Parameters_To_Flash+0x94>)
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t *data_ptr = (uint32_t *)&g_params;
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <Save_Parameters_To_Flash+0x9c>)
 80025e6:	617b      	str	r3, [r7, #20]
  for (size_t i = 0; i < sizeof(ControlParams) / 4; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e01a      	b.n	8002624 <Save_Parameters_To_Flash+0x7c>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data_ptr[i]) != HAL_OK)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4413      	add	r3, r2
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	461c      	mov	r4, r3
 80025fc:	4615      	mov	r5, r2
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	69f9      	ldr	r1, [r7, #28]
 8002604:	2002      	movs	r0, #2
 8002606:	f001 fbd1 	bl	8003dac <HAL_FLASH_Program>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <Save_Parameters_To_Flash+0x70>
    {
      VCP_printf("Error: Gagal menulis ke Flash!\r\n");
 8002610:	480d      	ldr	r0, [pc, #52]	@ (8002648 <Save_Parameters_To_Flash+0xa0>)
 8002612:	f7ff ff6f 	bl	80024f4 <VCP_printf>
      break;
 8002616:	e008      	b.n	800262a <Save_Parameters_To_Flash+0x82>
    }
    address += 4;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	3304      	adds	r3, #4
 800261c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < sizeof(ControlParams) / 4; i++)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3301      	adds	r3, #1
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0b      	cmp	r3, #11
 8002628:	d9e1      	bls.n	80025ee <Save_Parameters_To_Flash+0x46>
  }

  HAL_FLASH_Lock();
 800262a:	f001 fc55 	bl	8003ed8 <HAL_FLASH_Lock>
  VCP_printf("OK: Parameter berhasil disimpan ke Flash.\r\n");
 800262e:	4807      	ldr	r0, [pc, #28]	@ (800264c <Save_Parameters_To_Flash+0xa4>)
 8002630:	f7ff ff60 	bl	80024f4 <VCP_printf>
}
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bdb0      	pop	{r4, r5, r7, pc}
 800263a:	bf00      	nop
 800263c:	0800fc00 	.word	0x0800fc00
 8002640:	0801238c 	.word	0x0801238c
 8002644:	200006a0 	.word	0x200006a0
 8002648:	080123ac 	.word	0x080123ac
 800264c:	080123d0 	.word	0x080123d0

08002650 <Load_Parameters_From_Flash>:

/**
 * @brief Memuat parameter dari Flash. Jika gagal, gunakan nilai default.
 */
void Load_Parameters_From_Flash(void)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b08c      	sub	sp, #48	@ 0x30
 8002654:	af00      	add	r7, sp, #0
  ControlParams params_from_flash;
  memcpy(&params_from_flash, (void *)FLASH_STORAGE_ADDRESS,
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <Load_Parameters_From_Flash+0x48>)
 8002658:	463c      	mov	r4, r7
 800265a:	461d      	mov	r5, r3
 800265c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002664:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         sizeof(ControlParams));

  if (params_from_flash.magic_number == FLASH_MAGIC_NUMBER)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <Load_Parameters_From_Flash+0x4c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10b      	bne.n	800268c <Load_Parameters_From_Flash+0x3c>
  {
    memcpy(&g_params, &params_from_flash, sizeof(ControlParams));
 8002674:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <Load_Parameters_From_Flash+0x50>)
 8002676:	461d      	mov	r5, r3
 8002678:	463c      	mov	r4, r7
 800267a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002682:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002686:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  }
  else
  {
    Set_Default_Parameters();
  }
}
 800268a:	e001      	b.n	8002690 <Load_Parameters_From_Flash+0x40>
    Set_Default_Parameters();
 800268c:	f7ff ff56 	bl	800253c <Set_Default_Parameters>
}
 8002690:	bf00      	nop
 8002692:	3730      	adds	r7, #48	@ 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	0800fc00 	.word	0x0800fc00
 800269c:	deadbeef 	.word	0xdeadbeef
 80026a0:	200006a0 	.word	0x200006a0

080026a4 <Process_Command>:

/**
 * @brief Memproses perintah yang diterima dari USB VCP.
 */
void Process_Command(uint8_t *cmd_buffer)
{
 80026a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026a8:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80026b2:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80026b6:	6018      	str	r0, [r3, #0]
  char *cmd = (char *)cmd_buffer;
 80026b8:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80026bc:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
  float min, max;
  uint16_t val;

  if (strncmp(cmd, "$$", 2) == 0)
 80026c6:	2202      	movs	r2, #2
 80026c8:	49a3      	ldr	r1, [pc, #652]	@ (8002958 <Process_Command+0x2b4>)
 80026ca:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 80026ce:	f00b fe6b 	bl	800e3a8 <strncmp>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 80b0 	bne.w	800283a <Process_Command+0x196>
  {
    char large_buffer[2048]; // Gunakan buffer yang lebih besar
    int len = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    len += sprintf(large_buffer + len, "--- Parameter Saat Ini ---\r\n");
 80026e0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	4413      	add	r3, r2
 80026ea:	499c      	ldr	r1, [pc, #624]	@ (800295c <Process_Command+0x2b8>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00b fd83 	bl	800e1f8 <siprintf>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80026f8:	4413      	add	r3, r2
 80026fa:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum A: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_A, g_params.ambang_bawah_A, g_params.target_penuh_A);
 80026fe:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002702:	f107 020c 	add.w	r2, r7, #12
 8002706:	18d6      	adds	r6, r2, r3
 8002708:	4b95      	ldr	r3, [pc, #596]	@ (8002960 <Process_Command+0x2bc>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fe8b 	bl	8000428 <__aeabi_f2d>
 8002712:	4680      	mov	r8, r0
 8002714:	4689      	mov	r9, r1
 8002716:	4b92      	ldr	r3, [pc, #584]	@ (8002960 <Process_Command+0x2bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fe84 	bl	8000428 <__aeabi_f2d>
 8002720:	4604      	mov	r4, r0
 8002722:	460d      	mov	r5, r1
 8002724:	4b8e      	ldr	r3, [pc, #568]	@ (8002960 <Process_Command+0x2bc>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fe7d 	bl	8000428 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002736:	e9cd 4500 	strd	r4, r5, [sp]
 800273a:	4642      	mov	r2, r8
 800273c:	464b      	mov	r3, r9
 800273e:	4989      	ldr	r1, [pc, #548]	@ (8002964 <Process_Command+0x2c0>)
 8002740:	4630      	mov	r0, r6
 8002742:	f00b fd59 	bl	800e1f8 <siprintf>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800274c:	4413      	add	r3, r2
 800274e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum B: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_B, g_params.ambang_bawah_B, g_params.target_penuh_B);
 8002752:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002756:	f107 020c 	add.w	r2, r7, #12
 800275a:	18d6      	adds	r6, r2, r3
 800275c:	4b80      	ldr	r3, [pc, #512]	@ (8002960 <Process_Command+0x2bc>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fe61 	bl	8000428 <__aeabi_f2d>
 8002766:	4680      	mov	r8, r0
 8002768:	4689      	mov	r9, r1
 800276a:	4b7d      	ldr	r3, [pc, #500]	@ (8002960 <Process_Command+0x2bc>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe5a 	bl	8000428 <__aeabi_f2d>
 8002774:	4604      	mov	r4, r0
 8002776:	460d      	mov	r5, r1
 8002778:	4b79      	ldr	r3, [pc, #484]	@ (8002960 <Process_Command+0x2bc>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fe53 	bl	8000428 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800278a:	e9cd 4500 	strd	r4, r5, [sp]
 800278e:	4642      	mov	r2, r8
 8002790:	464b      	mov	r3, r9
 8002792:	4975      	ldr	r1, [pc, #468]	@ (8002968 <Process_Command+0x2c4>)
 8002794:	4630      	mov	r0, r6
 8002796:	f00b fd2f 	bl	800e1f8 <siprintf>
 800279a:	4602      	mov	r2, r0
 800279c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027a0:	4413      	add	r3, r2
 80027a2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Drum C: Tinggi=%.1f, Min=%.1f%%, Max=%.1f%%\r\n", g_params.tinggi_C, g_params.ambang_bawah_C, g_params.target_penuh_C);
 80027a6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027aa:	f107 020c 	add.w	r2, r7, #12
 80027ae:	18d6      	adds	r6, r2, r3
 80027b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002960 <Process_Command+0x2bc>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe37 	bl	8000428 <__aeabi_f2d>
 80027ba:	4680      	mov	r8, r0
 80027bc:	4689      	mov	r9, r1
 80027be:	4b68      	ldr	r3, [pc, #416]	@ (8002960 <Process_Command+0x2bc>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe30 	bl	8000428 <__aeabi_f2d>
 80027c8:	4604      	mov	r4, r0
 80027ca:	460d      	mov	r5, r1
 80027cc:	4b64      	ldr	r3, [pc, #400]	@ (8002960 <Process_Command+0x2bc>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe29 	bl	8000428 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027de:	e9cd 4500 	strd	r4, r5, [sp]
 80027e2:	4642      	mov	r2, r8
 80027e4:	464b      	mov	r3, r9
 80027e6:	4961      	ldr	r1, [pc, #388]	@ (800296c <Process_Command+0x2c8>)
 80027e8:	4630      	mov	r0, r6
 80027ea:	f00b fd05 	bl	800e1f8 <siprintf>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027f4:	4413      	add	r3, r2
 80027f6:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    len += sprintf(large_buffer + len, "Ambang Sumber Kosong: %.1f%%\r\n", g_params.sumber_kosong);
 80027fa:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	18d4      	adds	r4, r2, r3
 8002804:	4b56      	ldr	r3, [pc, #344]	@ (8002960 <Process_Command+0x2bc>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe0d 	bl	8000428 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4957      	ldr	r1, [pc, #348]	@ (8002970 <Process_Command+0x2cc>)
 8002814:	4620      	mov	r0, r4
 8002816:	f00b fcef 	bl	800e1f8 <siprintf>
 800281a:	4602      	mov	r2, r0
 800281c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002820:	4413      	add	r3, r2
 8002822:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002826:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800282a:	b29a      	uxth	r2, r3
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f00a f9dc 	bl	800cbf0 <CDC_Transmit_FS>
  else
  {
    VCP_printf(
        "Error: Perintah tidak dikenali. Ketik '$H' untuk bantuan.\r\n");
  }
}
 8002838:	e2a4      	b.n	8002d84 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$P", 2) == 0)
 800283a:	2202      	movs	r2, #2
 800283c:	494d      	ldr	r1, [pc, #308]	@ (8002974 <Process_Command+0x2d0>)
 800283e:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002842:	f00b fdb1 	bl	800e3a8 <strncmp>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 80a5 	bne.w	8002998 <Process_Command+0x2f4>
    int len = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "--- Daftar Pin ---\r\n");
 8002854:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002858:	f107 020c 	add.w	r2, r7, #12
 800285c:	4413      	add	r3, r2
 800285e:	4946      	ldr	r1, [pc, #280]	@ (8002978 <Process_Command+0x2d4>)
 8002860:	4618      	mov	r0, r3
 8002862:	f00b fcc9 	bl	800e1f8 <siprintf>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800286c:	4413      	add	r3, r2
 800286e:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor A (TIM2_CH1): PB3 (TRIG), PA15 (ECHO)\r\n");
 8002872:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002876:	f107 020c 	add.w	r2, r7, #12
 800287a:	4413      	add	r3, r2
 800287c:	493f      	ldr	r1, [pc, #252]	@ (800297c <Process_Command+0x2d8>)
 800287e:	4618      	mov	r0, r3
 8002880:	f00b fcba 	bl	800e1f8 <siprintf>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800288a:	4413      	add	r3, r2
 800288c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor B (TIM3_CH1): PB5 (TRIG), PB4 (ECHO)\r\n");
 8002890:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002894:	f107 020c 	add.w	r2, r7, #12
 8002898:	4413      	add	r3, r2
 800289a:	4939      	ldr	r1, [pc, #228]	@ (8002980 <Process_Command+0x2dc>)
 800289c:	4618      	mov	r0, r3
 800289e:	f00b fcab 	bl	800e1f8 <siprintf>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028a8:	4413      	add	r3, r2
 80028aa:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Sensor C (TIM4_CH1): PB7 (TRIG), PB6 (ECHO)\r\n");
 80028ae:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028b2:	f107 020c 	add.w	r2, r7, #12
 80028b6:	4413      	add	r3, r2
 80028b8:	4932      	ldr	r1, [pc, #200]	@ (8002984 <Process_Command+0x2e0>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00b fc9c 	bl	800e1f8 <siprintf>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028c6:	4413      	add	r3, r2
 80028c8:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Pompa B->A: PB14\r\n");
 80028cc:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028d0:	f107 020c 	add.w	r2, r7, #12
 80028d4:	4413      	add	r3, r2
 80028d6:	492c      	ldr	r1, [pc, #176]	@ (8002988 <Process_Command+0x2e4>)
 80028d8:	4618      	mov	r0, r3
 80028da:	f00b fc8d 	bl	800e1f8 <siprintf>
 80028de:	4602      	mov	r2, r0
 80028e0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028e4:	4413      	add	r3, r2
 80028e6:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "Pompa C->B: PB15\r\n");
 80028ea:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80028ee:	f107 020c 	add.w	r2, r7, #12
 80028f2:	4413      	add	r3, r2
 80028f4:	4925      	ldr	r1, [pc, #148]	@ (800298c <Process_Command+0x2e8>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f00b fc7e 	bl	800e1f8 <siprintf>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002902:	4413      	add	r3, r2
 8002904:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "LED Merah (Alert): PB13\r\n");
 8002908:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	4413      	add	r3, r2
 8002912:	491f      	ldr	r1, [pc, #124]	@ (8002990 <Process_Command+0x2ec>)
 8002914:	4618      	mov	r0, r3
 8002916:	f00b fc6f 	bl	800e1f8 <siprintf>
 800291a:	4602      	mov	r2, r0
 800291c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002920:	4413      	add	r3, r2
 8002922:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    len += sprintf(large_buffer + len, "LCD I2C (I2C1): PB6 (SCL), PB7 (SDA)\r\n");
 8002926:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800292a:	f107 020c 	add.w	r2, r7, #12
 800292e:	4413      	add	r3, r2
 8002930:	4918      	ldr	r1, [pc, #96]	@ (8002994 <Process_Command+0x2f0>)
 8002932:	4618      	mov	r0, r3
 8002934:	f00b fc60 	bl	800e1f8 <siprintf>
 8002938:	4602      	mov	r2, r0
 800293a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800293e:	4413      	add	r3, r2
 8002940:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002944:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002948:	b29a      	uxth	r2, r3
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f00a f94d 	bl	800cbf0 <CDC_Transmit_FS>
}
 8002956:	e215      	b.n	8002d84 <Process_Command+0x6e0>
 8002958:	080123fc 	.word	0x080123fc
 800295c:	08012400 	.word	0x08012400
 8002960:	200006a0 	.word	0x200006a0
 8002964:	08012420 	.word	0x08012420
 8002968:	08012450 	.word	0x08012450
 800296c:	08012480 	.word	0x08012480
 8002970:	080124b0 	.word	0x080124b0
 8002974:	080124d0 	.word	0x080124d0
 8002978:	080124d4 	.word	0x080124d4
 800297c:	080124ec 	.word	0x080124ec
 8002980:	0801251c 	.word	0x0801251c
 8002984:	0801254c 	.word	0x0801254c
 8002988:	0801257c 	.word	0x0801257c
 800298c:	08012590 	.word	0x08012590
 8002990:	080125a4 	.word	0x080125a4
 8002994:	080125c0 	.word	0x080125c0
  else if (strncmp(cmd, "$H", 2) == 0)
 8002998:	2202      	movs	r2, #2
 800299a:	49ce      	ldr	r1, [pc, #824]	@ (8002cd4 <Process_Command+0x630>)
 800299c:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 80029a0:	f00b fd02 	bl	800e3a8 <strncmp>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80b2 	bne.w	8002b10 <Process_Command+0x46c>
    int len = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "--- Bantuan ---\r\n");
 80029b2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029b6:	f107 020c 	add.w	r2, r7, #12
 80029ba:	4413      	add	r3, r2
 80029bc:	49c6      	ldr	r1, [pc, #792]	@ (8002cd8 <Process_Command+0x634>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f00b fc1a 	bl	800e1f8 <siprintf>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029ca:	4413      	add	r3, r2
 80029cc:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$$          : Lihat semua parameter\r\n");
 80029d0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029d4:	f107 020c 	add.w	r2, r7, #12
 80029d8:	4413      	add	r3, r2
 80029da:	49c0      	ldr	r1, [pc, #768]	@ (8002cdc <Process_Command+0x638>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f00b fc0b 	bl	800e1f8 <siprintf>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029e8:	4413      	add	r3, r2
 80029ea:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$P          : Lihat daftar pin\r\n");
 80029ee:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80029f2:	f107 020c 	add.w	r2, r7, #12
 80029f6:	4413      	add	r3, r2
 80029f8:	49b9      	ldr	r1, [pc, #740]	@ (8002ce0 <Process_Command+0x63c>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00b fbfc 	bl	800e1f8 <siprintf>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a06:	4413      	add	r3, r2
 8002a08:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$H          : Tampilkan pesan ini\r\n");
 8002a0c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	4413      	add	r3, r2
 8002a16:	49b3      	ldr	r1, [pc, #716]	@ (8002ce4 <Process_Command+0x640>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00b fbed 	bl	800e1f8 <siprintf>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a24:	4413      	add	r3, r2
 8002a26:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$1=<min>,<max> : Set ambang batas Drum A\r\n");
 8002a2a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	4413      	add	r3, r2
 8002a34:	49ac      	ldr	r1, [pc, #688]	@ (8002ce8 <Process_Command+0x644>)
 8002a36:	4618      	mov	r0, r3
 8002a38:	f00b fbde 	bl	800e1f8 <siprintf>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a42:	4413      	add	r3, r2
 8002a44:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$2=<min>,<max> : Set ambang batas Drum B\r\n");
 8002a48:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	4413      	add	r3, r2
 8002a52:	49a6      	ldr	r1, [pc, #664]	@ (8002cec <Process_Command+0x648>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00b fbcf 	bl	800e1f8 <siprintf>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a60:	4413      	add	r3, r2
 8002a62:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$3=<min>,<max> : Set ambang batas Drum C\r\n");
 8002a66:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a6a:	f107 020c 	add.w	r2, r7, #12
 8002a6e:	4413      	add	r3, r2
 8002a70:	499f      	ldr	r1, [pc, #636]	@ (8002cf0 <Process_Command+0x64c>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00b fbc0 	bl	800e1f8 <siprintf>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a7e:	4413      	add	r3, r2
 8002a80:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$M=<num>       : Set nilai mov avrg sensor\r\n");
 8002a84:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a88:	f107 020c 	add.w	r2, r7, #12
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4999      	ldr	r1, [pc, #612]	@ (8002cf4 <Process_Command+0x650>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00b fbb1 	bl	800e1f8 <siprintf>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$S          : Simpan parameter ke Flash\r\n");
 8002aa2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002aa6:	f107 020c 	add.w	r2, r7, #12
 8002aaa:	4413      	add	r3, r2
 8002aac:	4992      	ldr	r1, [pc, #584]	@ (8002cf8 <Process_Command+0x654>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00b fba2 	bl	800e1f8 <siprintf>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002aba:	4413      	add	r3, r2
 8002abc:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$L          : Muat parameter dari Flash\r\n");
 8002ac0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ac4:	f107 020c 	add.w	r2, r7, #12
 8002ac8:	4413      	add	r3, r2
 8002aca:	498c      	ldr	r1, [pc, #560]	@ (8002cfc <Process_Command+0x658>)
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00b fb93 	bl	800e1f8 <siprintf>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ad8:	4413      	add	r3, r2
 8002ada:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    len += sprintf(large_buffer + len, "$D          : Kembalikan ke pengaturan default\r\n");
 8002ade:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4985      	ldr	r1, [pc, #532]	@ (8002d00 <Process_Command+0x65c>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00b fb84 	bl	800e1f8 <siprintf>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002af6:	4413      	add	r3, r2
 8002af8:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
    CDC_Transmit_FS((uint8_t *)large_buffer, len);
 8002afc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00a f871 	bl	800cbf0 <CDC_Transmit_FS>
}
 8002b0e:	e139      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$1=%f,%f", &min, &max) == 2)
 8002b10:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002b14:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002b18:	497a      	ldr	r1, [pc, #488]	@ (8002d04 <Process_Command+0x660>)
 8002b1a:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002b1e:	f00b fb8d 	bl	800e23c <siscanf>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d11d      	bne.n	8002b64 <Process_Command+0x4c0>
    g_params.ambang_bawah_A = min;
 8002b28:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b2c:	4a76      	ldr	r2, [pc, #472]	@ (8002d08 <Process_Command+0x664>)
 8002b2e:	6093      	str	r3, [r2, #8]
    g_params.target_penuh_A = max;
 8002b30:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b34:	4a74      	ldr	r2, [pc, #464]	@ (8002d08 <Process_Command+0x664>)
 8002b36:	60d3      	str	r3, [r2, #12]
    VCP_printf("OK: Parameter Drum A diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002b38:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fc73 	bl	8000428 <__aeabi_f2d>
 8002b42:	4604      	mov	r4, r0
 8002b44:	460d      	mov	r5, r1
 8002b46:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fc6c 	bl	8000428 <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	e9cd 2300 	strd	r2, r3, [sp]
 8002b58:	4622      	mov	r2, r4
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	486b      	ldr	r0, [pc, #428]	@ (8002d0c <Process_Command+0x668>)
 8002b5e:	f7ff fcc9 	bl	80024f4 <VCP_printf>
}
 8002b62:	e10f      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$2=%f,%f", &min, &max) == 2)
 8002b64:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002b68:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002b6c:	4968      	ldr	r1, [pc, #416]	@ (8002d10 <Process_Command+0x66c>)
 8002b6e:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002b72:	f00b fb63 	bl	800e23c <siscanf>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11d      	bne.n	8002bb8 <Process_Command+0x514>
    g_params.ambang_bawah_B = min;
 8002b7c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b80:	4a61      	ldr	r2, [pc, #388]	@ (8002d08 <Process_Command+0x664>)
 8002b82:	6153      	str	r3, [r2, #20]
    g_params.target_penuh_B = max;
 8002b84:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b88:	4a5f      	ldr	r2, [pc, #380]	@ (8002d08 <Process_Command+0x664>)
 8002b8a:	6193      	str	r3, [r2, #24]
    VCP_printf("OK: Parameter Drum B diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002b8c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc49 	bl	8000428 <__aeabi_f2d>
 8002b96:	4604      	mov	r4, r0
 8002b98:	460d      	mov	r5, r1
 8002b9a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fc42 	bl	8000428 <__aeabi_f2d>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bac:	4622      	mov	r2, r4
 8002bae:	462b      	mov	r3, r5
 8002bb0:	4858      	ldr	r0, [pc, #352]	@ (8002d14 <Process_Command+0x670>)
 8002bb2:	f7ff fc9f 	bl	80024f4 <VCP_printf>
}
 8002bb6:	e0e5      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$3=%f,%f", &min, &max) == 2)
 8002bb8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002bbc:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002bc0:	4955      	ldr	r1, [pc, #340]	@ (8002d18 <Process_Command+0x674>)
 8002bc2:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002bc6:	f00b fb39 	bl	800e23c <siscanf>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11d      	bne.n	8002c0c <Process_Command+0x568>
    g_params.ambang_bawah_C = min;
 8002bd0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002d08 <Process_Command+0x664>)
 8002bd6:	6213      	str	r3, [r2, #32]
    g_params.target_penuh_C = max;
 8002bd8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d08 <Process_Command+0x664>)
 8002bde:	6253      	str	r3, [r2, #36]	@ 0x24
    VCP_printf("OK: Parameter Drum C diubah -> Min=%.1f, Max=%.1f\r\n", min, max);
 8002be0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fc1f 	bl	8000428 <__aeabi_f2d>
 8002bea:	4604      	mov	r4, r0
 8002bec:	460d      	mov	r5, r1
 8002bee:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc18 	bl	8000428 <__aeabi_f2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8002c00:	4622      	mov	r2, r4
 8002c02:	462b      	mov	r3, r5
 8002c04:	4845      	ldr	r0, [pc, #276]	@ (8002d1c <Process_Command+0x678>)
 8002c06:	f7ff fc75 	bl	80024f4 <VCP_printf>
}
 8002c0a:	e0bb      	b.n	8002d84 <Process_Command+0x6e0>
  else if (sscanf(cmd, "$M=%hd", &val) == 1)
 8002c0c:	f607 030e 	addw	r3, r7, #2062	@ 0x80e
 8002c10:	461a      	mov	r2, r3
 8002c12:	4943      	ldr	r1, [pc, #268]	@ (8002d20 <Process_Command+0x67c>)
 8002c14:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002c18:	f00b fb10 	bl	800e23c <siscanf>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d13a      	bne.n	8002c98 <Process_Command+0x5f4>
    if (val > 0 && val <= MAX_MOVING_AVG_SIZE)
 8002c22:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d031      	beq.n	8002c8e <Process_Command+0x5ea>
 8002c2a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d82d      	bhi.n	8002c8e <Process_Command+0x5ea>
      g_params.moving_avg_size = (uint8_t)val;
 8002c32:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b33      	ldr	r3, [pc, #204]	@ (8002d08 <Process_Command+0x664>)
 8002c3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
      VCP_printf("OK: Ukuran Moving Average diubah -> %d\r\n", val);
 8002c3e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8002c42:	4619      	mov	r1, r3
 8002c44:	4837      	ldr	r0, [pc, #220]	@ (8002d24 <Process_Command+0x680>)
 8002c46:	f7ff fc55 	bl	80024f4 <VCP_printf>
      memset(Distance1_buffer, 0, sizeof(Distance1_buffer));
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4836      	ldr	r0, [pc, #216]	@ (8002d28 <Process_Command+0x684>)
 8002c50:	f00b fba2 	bl	800e398 <memset>
      memset(Distance2_buffer, 0, sizeof(Distance2_buffer));
 8002c54:	2218      	movs	r2, #24
 8002c56:	2100      	movs	r1, #0
 8002c58:	4834      	ldr	r0, [pc, #208]	@ (8002d2c <Process_Command+0x688>)
 8002c5a:	f00b fb9d 	bl	800e398 <memset>
      memset(Distance3_buffer, 0, sizeof(Distance3_buffer));
 8002c5e:	2218      	movs	r2, #24
 8002c60:	2100      	movs	r1, #0
 8002c62:	4833      	ldr	r0, [pc, #204]	@ (8002d30 <Process_Command+0x68c>)
 8002c64:	f00b fb98 	bl	800e398 <memset>
      buffer_index_1 = 0;
 8002c68:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <Process_Command+0x690>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
      buffer_index_2 = 0;
 8002c6e:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <Process_Command+0x694>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
      buffer_index_3 = 0;
 8002c74:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <Process_Command+0x698>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
      is_buffer_full_1 = 0;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <Process_Command+0x69c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
      is_buffer_full_2 = 0;
 8002c80:	4b30      	ldr	r3, [pc, #192]	@ (8002d44 <Process_Command+0x6a0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
      is_buffer_full_3 = 0;
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <Process_Command+0x6a4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
}
 8002c8c:	e07a      	b.n	8002d84 <Process_Command+0x6e0>
      VCP_printf("Error: Ukuran Moving Average tidak valid (1-%d).\r\n", MAX_MOVING_AVG_SIZE);
 8002c8e:	2106      	movs	r1, #6
 8002c90:	482e      	ldr	r0, [pc, #184]	@ (8002d4c <Process_Command+0x6a8>)
 8002c92:	f7ff fc2f 	bl	80024f4 <VCP_printf>
}
 8002c96:	e075      	b.n	8002d84 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$S", 2) == 0)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	492d      	ldr	r1, [pc, #180]	@ (8002d50 <Process_Command+0x6ac>)
 8002c9c:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002ca0:	f00b fb82 	bl	800e3a8 <strncmp>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <Process_Command+0x612>
    Save_Parameters_To_Flash();
 8002caa:	f7ff fc7d 	bl	80025a8 <Save_Parameters_To_Flash>
    VCP_printf("OK: Parameter disimpan ke Flash.\r\n");
 8002cae:	4829      	ldr	r0, [pc, #164]	@ (8002d54 <Process_Command+0x6b0>)
 8002cb0:	f7ff fc20 	bl	80024f4 <VCP_printf>
}
 8002cb4:	e066      	b.n	8002d84 <Process_Command+0x6e0>
  else if (strncmp(cmd, "$L", 2) == 0)
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4927      	ldr	r1, [pc, #156]	@ (8002d58 <Process_Command+0x6b4>)
 8002cba:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002cbe:	f00b fb73 	bl	800e3a8 <strncmp>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d14b      	bne.n	8002d60 <Process_Command+0x6bc>
    Load_Parameters_From_Flash();
 8002cc8:	f7ff fcc2 	bl	8002650 <Load_Parameters_From_Flash>
    VCP_printf("OK: Parameter dimuat dari Flash.\r\n");
 8002ccc:	4823      	ldr	r0, [pc, #140]	@ (8002d5c <Process_Command+0x6b8>)
 8002cce:	f7ff fc11 	bl	80024f4 <VCP_printf>
}
 8002cd2:	e057      	b.n	8002d84 <Process_Command+0x6e0>
 8002cd4:	080125e8 	.word	0x080125e8
 8002cd8:	080125ec 	.word	0x080125ec
 8002cdc:	08012600 	.word	0x08012600
 8002ce0:	08012628 	.word	0x08012628
 8002ce4:	0801264c 	.word	0x0801264c
 8002ce8:	08012670 	.word	0x08012670
 8002cec:	0801269c 	.word	0x0801269c
 8002cf0:	080126c8 	.word	0x080126c8
 8002cf4:	080126f4 	.word	0x080126f4
 8002cf8:	08012724 	.word	0x08012724
 8002cfc:	08012750 	.word	0x08012750
 8002d00:	0801277c 	.word	0x0801277c
 8002d04:	080127b0 	.word	0x080127b0
 8002d08:	200006a0 	.word	0x200006a0
 8002d0c:	080127bc 	.word	0x080127bc
 8002d10:	080127f0 	.word	0x080127f0
 8002d14:	080127fc 	.word	0x080127fc
 8002d18:	08012830 	.word	0x08012830
 8002d1c:	0801283c 	.word	0x0801283c
 8002d20:	08012870 	.word	0x08012870
 8002d24:	08012878 	.word	0x08012878
 8002d28:	20000620 	.word	0x20000620
 8002d2c:	20000638 	.word	0x20000638
 8002d30:	20000650 	.word	0x20000650
 8002d34:	20000674 	.word	0x20000674
 8002d38:	20000675 	.word	0x20000675
 8002d3c:	20000676 	.word	0x20000676
 8002d40:	20000677 	.word	0x20000677
 8002d44:	20000678 	.word	0x20000678
 8002d48:	20000679 	.word	0x20000679
 8002d4c:	080128a4 	.word	0x080128a4
 8002d50:	080128d8 	.word	0x080128d8
 8002d54:	080128dc 	.word	0x080128dc
 8002d58:	08012900 	.word	0x08012900
 8002d5c:	08012904 	.word	0x08012904
  else if (strncmp(cmd, "$D", 2) == 0)
 8002d60:	2202      	movs	r2, #2
 8002d62:	490b      	ldr	r1, [pc, #44]	@ (8002d90 <Process_Command+0x6ec>)
 8002d64:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8002d68:	f00b fb1e 	bl	800e3a8 <strncmp>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <Process_Command+0x6da>
    Set_Default_Parameters();
 8002d72:	f7ff fbe3 	bl	800253c <Set_Default_Parameters>
    VCP_printf("OK: Parameter dikembalikan ke default.\r\n");
 8002d76:	4807      	ldr	r0, [pc, #28]	@ (8002d94 <Process_Command+0x6f0>)
 8002d78:	f7ff fbbc 	bl	80024f4 <VCP_printf>
}
 8002d7c:	e002      	b.n	8002d84 <Process_Command+0x6e0>
    VCP_printf(
 8002d7e:	4806      	ldr	r0, [pc, #24]	@ (8002d98 <Process_Command+0x6f4>)
 8002d80:	f7ff fbb8 	bl	80024f4 <VCP_printf>
}
 8002d84:	bf00      	nop
 8002d86:	f607 072c 	addw	r7, r7, #2092	@ 0x82c
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d90:	08012928 	.word	0x08012928
 8002d94:	0801292c 	.word	0x0801292c
 8002d98:	08012958 	.word	0x08012958

08002d9c <Run_Control_Logic>:

void Run_Control_Logic(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
  static uint8_t stage2_count1 = 0;
  static uint8_t stage2_count2 = 0;
  static uint8_t stage2_count3 = 0;

  // Collect 8 samples before processing
  sample_buffer1[sample_counter] = Distance1;
 8002da2:	4b9c      	ldr	r3, [pc, #624]	@ (8003014 <Run_Control_Logic+0x278>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	4b9b      	ldr	r3, [pc, #620]	@ (8003018 <Run_Control_Logic+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a9b      	ldr	r2, [pc, #620]	@ (800301c <Run_Control_Logic+0x280>)
 8002dae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  sample_buffer2[sample_counter] = Distance2;
 8002db2:	4b98      	ldr	r3, [pc, #608]	@ (8003014 <Run_Control_Logic+0x278>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4b99      	ldr	r3, [pc, #612]	@ (8003020 <Run_Control_Logic+0x284>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a99      	ldr	r2, [pc, #612]	@ (8003024 <Run_Control_Logic+0x288>)
 8002dbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  sample_buffer3[sample_counter] = Distance3;
 8002dc2:	4b94      	ldr	r3, [pc, #592]	@ (8003014 <Run_Control_Logic+0x278>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4b97      	ldr	r3, [pc, #604]	@ (8003028 <Run_Control_Logic+0x28c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a97      	ldr	r2, [pc, #604]	@ (800302c <Run_Control_Logic+0x290>)
 8002dce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  sample_counter++;
 8002dd2:	4b90      	ldr	r3, [pc, #576]	@ (8003014 <Run_Control_Logic+0x278>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b8e      	ldr	r3, [pc, #568]	@ (8003014 <Run_Control_Logic+0x278>)
 8002ddc:	701a      	strb	r2, [r3, #0]

  // Only process the filter when 8 samples are collected
  if (sample_counter >= SAMPLE_SIZE)
 8002dde:	4b8d      	ldr	r3, [pc, #564]	@ (8003014 <Run_Control_Logic+0x278>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	f240 80c0 	bls.w	8002f68 <Run_Control_Logic+0x1cc>
  {
    sample_counter = 0; // Reset the counter
 8002de8:	4b8a      	ldr	r3, [pc, #552]	@ (8003014 <Run_Control_Logic+0x278>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]

    // --- Stage 1: Find the maximum value from the 8 samples ---
    float max_distance1 = find_max_in_sample(sample_buffer1, g_params.tinggi_A);
 8002dee:	4b90      	ldr	r3, [pc, #576]	@ (8003030 <Run_Control_Logic+0x294>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4889      	ldr	r0, [pc, #548]	@ (800301c <Run_Control_Logic+0x280>)
 8002df6:	f7ff faf7 	bl	80023e8 <find_max_in_sample>
 8002dfa:	6178      	str	r0, [r7, #20]
    float max_distance2 = find_max_in_sample(sample_buffer2, g_params.tinggi_B);
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003030 <Run_Control_Logic+0x294>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4888      	ldr	r0, [pc, #544]	@ (8003024 <Run_Control_Logic+0x288>)
 8002e04:	f7ff faf0 	bl	80023e8 <find_max_in_sample>
 8002e08:	6138      	str	r0, [r7, #16]
    float max_distance3 = find_max_in_sample(sample_buffer3, g_params.tinggi_C);
 8002e0a:	4b89      	ldr	r3, [pc, #548]	@ (8003030 <Run_Control_Logic+0x294>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4886      	ldr	r0, [pc, #536]	@ (800302c <Run_Control_Logic+0x290>)
 8002e12:	f7ff fae9 	bl	80023e8 <find_max_in_sample>
 8002e16:	60f8      	str	r0, [r7, #12]

    // --- Stage 2: Push the max value into the WMA buffer ---
    Stage2_buffer1[stage2_index1] = max_distance1;
 8002e18:	4b86      	ldr	r3, [pc, #536]	@ (8003034 <Run_Control_Logic+0x298>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4a86      	ldr	r2, [pc, #536]	@ (8003038 <Run_Control_Logic+0x29c>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    stage2_index1 = (stage2_index1 + 1) % g_params.moving_avg_size;
 8002e26:	4b83      	ldr	r3, [pc, #524]	@ (8003034 <Run_Control_Logic+0x298>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a80      	ldr	r2, [pc, #512]	@ (8003030 <Run_Control_Logic+0x294>)
 8002e2e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002e32:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e36:	fb01 f202 	mul.w	r2, r1, r2
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8003034 <Run_Control_Logic+0x298>)
 8002e40:	701a      	strb	r2, [r3, #0]
    if (stage2_count1 < g_params.moving_avg_size)
 8002e42:	4b7b      	ldr	r3, [pc, #492]	@ (8003030 <Run_Control_Logic+0x294>)
 8002e44:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002e48:	4b7c      	ldr	r3, [pc, #496]	@ (800303c <Run_Control_Logic+0x2a0>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d90f      	bls.n	8002e70 <Run_Control_Logic+0xd4>
    {
      stage2_count1++;
 8002e50:	4b7a      	ldr	r3, [pc, #488]	@ (800303c <Run_Control_Logic+0x2a0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b78      	ldr	r3, [pc, #480]	@ (800303c <Run_Control_Logic+0x2a0>)
 8002e5a:	701a      	strb	r2, [r3, #0]
      if (stage2_count1 >= g_params.moving_avg_size)
 8002e5c:	4b74      	ldr	r3, [pc, #464]	@ (8003030 <Run_Control_Logic+0x294>)
 8002e5e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002e62:	4b76      	ldr	r3, [pc, #472]	@ (800303c <Run_Control_Logic+0x2a0>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d802      	bhi.n	8002e70 <Run_Control_Logic+0xd4>
      {
        is_stage2_full1 = 1;
 8002e6a:	4b75      	ldr	r3, [pc, #468]	@ (8003040 <Run_Control_Logic+0x2a4>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
      }
    }
    filtered_distance1 = calculate_moving_average(Stage2_buffer1, g_params.moving_avg_size, is_stage2_full1);
 8002e70:	4b6f      	ldr	r3, [pc, #444]	@ (8003030 <Run_Control_Logic+0x294>)
 8002e72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e76:	4a72      	ldr	r2, [pc, #456]	@ (8003040 <Run_Control_Logic+0x2a4>)
 8002e78:	7812      	ldrb	r2, [r2, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	486e      	ldr	r0, [pc, #440]	@ (8003038 <Run_Control_Logic+0x29c>)
 8002e7e:	f7ff fae5 	bl	800244c <calculate_moving_average>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a6f      	ldr	r2, [pc, #444]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002e86:	6013      	str	r3, [r2, #0]

    Stage2_buffer2[stage2_index2] = max_distance2;
 8002e88:	4b6f      	ldr	r3, [pc, #444]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800304c <Run_Control_Logic+0x2b0>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    stage2_index2 = (stage2_index2 + 1) % g_params.moving_avg_size;
 8002e96:	4b6c      	ldr	r3, [pc, #432]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a64      	ldr	r2, [pc, #400]	@ (8003030 <Run_Control_Logic+0x294>)
 8002e9e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002ea2:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ea6:	fb01 f202 	mul.w	r2, r1, r2
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b66      	ldr	r3, [pc, #408]	@ (8003048 <Run_Control_Logic+0x2ac>)
 8002eb0:	701a      	strb	r2, [r3, #0]
    if (stage2_count2 < g_params.moving_avg_size)
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8003030 <Run_Control_Logic+0x294>)
 8002eb4:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002eb8:	4b65      	ldr	r3, [pc, #404]	@ (8003050 <Run_Control_Logic+0x2b4>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d90f      	bls.n	8002ee0 <Run_Control_Logic+0x144>
    {
      stage2_count2++;
 8002ec0:	4b63      	ldr	r3, [pc, #396]	@ (8003050 <Run_Control_Logic+0x2b4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b61      	ldr	r3, [pc, #388]	@ (8003050 <Run_Control_Logic+0x2b4>)
 8002eca:	701a      	strb	r2, [r3, #0]
      if (stage2_count2 >= g_params.moving_avg_size)
 8002ecc:	4b58      	ldr	r3, [pc, #352]	@ (8003030 <Run_Control_Logic+0x294>)
 8002ece:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <Run_Control_Logic+0x2b4>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d802      	bhi.n	8002ee0 <Run_Control_Logic+0x144>
      {
        is_stage2_full2 = 1;
 8002eda:	4b5e      	ldr	r3, [pc, #376]	@ (8003054 <Run_Control_Logic+0x2b8>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
      }
    }
    filtered_distance2 = calculate_moving_average(Stage2_buffer2, g_params.moving_avg_size, is_stage2_full2);
 8002ee0:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <Run_Control_Logic+0x294>)
 8002ee2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8003054 <Run_Control_Logic+0x2b8>)
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	4857      	ldr	r0, [pc, #348]	@ (800304c <Run_Control_Logic+0x2b0>)
 8002eee:	f7ff faad 	bl	800244c <calculate_moving_average>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4a58      	ldr	r2, [pc, #352]	@ (8003058 <Run_Control_Logic+0x2bc>)
 8002ef6:	6013      	str	r3, [r2, #0]

    Stage2_buffer3[stage2_index3] = max_distance3;
 8002ef8:	4b58      	ldr	r3, [pc, #352]	@ (800305c <Run_Control_Logic+0x2c0>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	4a58      	ldr	r2, [pc, #352]	@ (8003060 <Run_Control_Logic+0x2c4>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    stage2_index3 = (stage2_index3 + 1) % g_params.moving_avg_size;
 8002f06:	4b55      	ldr	r3, [pc, #340]	@ (800305c <Run_Control_Logic+0x2c0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4a48      	ldr	r2, [pc, #288]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f0e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8002f12:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f16:	fb01 f202 	mul.w	r2, r1, r2
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800305c <Run_Control_Logic+0x2c0>)
 8002f20:	701a      	strb	r2, [r3, #0]
    if (stage2_count3 < g_params.moving_avg_size)
 8002f22:	4b43      	ldr	r3, [pc, #268]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f24:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002f28:	4b4e      	ldr	r3, [pc, #312]	@ (8003064 <Run_Control_Logic+0x2c8>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d90f      	bls.n	8002f50 <Run_Control_Logic+0x1b4>
    {
      stage2_count3++;
 8002f30:	4b4c      	ldr	r3, [pc, #304]	@ (8003064 <Run_Control_Logic+0x2c8>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <Run_Control_Logic+0x2c8>)
 8002f3a:	701a      	strb	r2, [r3, #0]
      if (stage2_count3 >= g_params.moving_avg_size)
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f3e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002f42:	4b48      	ldr	r3, [pc, #288]	@ (8003064 <Run_Control_Logic+0x2c8>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d802      	bhi.n	8002f50 <Run_Control_Logic+0x1b4>
      {
        is_stage2_full3 = 1;
 8002f4a:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <Run_Control_Logic+0x2cc>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
      }
    }
    filtered_distance3 = calculate_moving_average(Stage2_buffer3, g_params.moving_avg_size, is_stage2_full3);
 8002f50:	4b37      	ldr	r3, [pc, #220]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002f56:	4a44      	ldr	r2, [pc, #272]	@ (8003068 <Run_Control_Logic+0x2cc>)
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4840      	ldr	r0, [pc, #256]	@ (8003060 <Run_Control_Logic+0x2c4>)
 8002f5e:	f7ff fa75 	bl	800244c <calculate_moving_average>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4a41      	ldr	r2, [pc, #260]	@ (800306c <Run_Control_Logic+0x2d0>)
 8002f66:	6013      	str	r3, [r2, #0]
  }

  // Gunakan nilai jarak yang sudah difilter
  float LevelA_cm = g_params.tinggi_A - filtered_distance1;
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	@ (8003044 <Run_Control_Logic+0x2a8>)
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fdfc 	bl	8000b70 <__aeabi_fsub>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60bb      	str	r3, [r7, #8]
  float LevelB_cm = g_params.tinggi_B - filtered_distance2;
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <Run_Control_Logic+0x2bc>)
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fdf2 	bl	8000b70 <__aeabi_fsub>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	607b      	str	r3, [r7, #4]
  float LevelC_cm = g_params.tinggi_C - filtered_distance3;
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <Run_Control_Logic+0x294>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a35      	ldr	r2, [pc, #212]	@ (800306c <Run_Control_Logic+0x2d0>)
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fde8 	bl	8000b70 <__aeabi_fsub>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	603b      	str	r3, [r7, #0]

  LevelA_persen = (LevelA_cm / g_params.tinggi_A) * 100.0f;
 8002fa4:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <Run_Control_Logic+0x294>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68b8      	ldr	r0, [r7, #8]
 8002fac:	f7fd ff9e 	bl	8000eec <__aeabi_fdiv>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	492f      	ldr	r1, [pc, #188]	@ (8003070 <Run_Control_Logic+0x2d4>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fee5 	bl	8000d84 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <Run_Control_Logic+0x2d8>)
 8002fc0:	601a      	str	r2, [r3, #0]
  LevelB_persen = (LevelB_cm / g_params.tinggi_B) * 100.0f;
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <Run_Control_Logic+0x294>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fd ff8f 	bl	8000eec <__aeabi_fdiv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4927      	ldr	r1, [pc, #156]	@ (8003070 <Run_Control_Logic+0x2d4>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fed6 	bl	8000d84 <__aeabi_fmul>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b26      	ldr	r3, [pc, #152]	@ (8003078 <Run_Control_Logic+0x2dc>)
 8002fde:	601a      	str	r2, [r3, #0]
  LevelC_persen = (LevelC_cm / g_params.tinggi_C) * 100.0f;
 8002fe0:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <Run_Control_Logic+0x294>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6838      	ldr	r0, [r7, #0]
 8002fe8:	f7fd ff80 	bl	8000eec <__aeabi_fdiv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4920      	ldr	r1, [pc, #128]	@ (8003070 <Run_Control_Logic+0x2d4>)
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd fec7 	bl	8000d84 <__aeabi_fmul>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b20      	ldr	r3, [pc, #128]	@ (800307c <Run_Control_Logic+0x2e0>)
 8002ffc:	601a      	str	r2, [r3, #0]
  if (LevelA_persen < 0)
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <Run_Control_Logic+0x2d8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe f85a 	bl	80010c0 <__aeabi_fcmplt>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03b      	beq.n	800308a <Run_Control_Logic+0x2ee>
 8003012:	e035      	b.n	8003080 <Run_Control_Logic+0x2e4>
 8003014:	200005cc 	.word	0x200005cc
 8003018:	20000758 	.word	0x20000758
 800301c:	20000584 	.word	0x20000584
 8003020:	2000075c 	.word	0x2000075c
 8003024:	2000059c 	.word	0x2000059c
 8003028:	20000760 	.word	0x20000760
 800302c:	200005b4 	.word	0x200005b4
 8003030:	200006a0 	.word	0x200006a0
 8003034:	20000618 	.word	0x20000618
 8003038:	200005d0 	.word	0x200005d0
 800303c:	20000768 	.word	0x20000768
 8003040:	2000061b 	.word	0x2000061b
 8003044:	20000668 	.word	0x20000668
 8003048:	20000619 	.word	0x20000619
 800304c:	200005e8 	.word	0x200005e8
 8003050:	20000769 	.word	0x20000769
 8003054:	2000061c 	.word	0x2000061c
 8003058:	2000066c 	.word	0x2000066c
 800305c:	2000061a 	.word	0x2000061a
 8003060:	20000600 	.word	0x20000600
 8003064:	2000076a 	.word	0x2000076a
 8003068:	2000061d 	.word	0x2000061d
 800306c:	20000670 	.word	0x20000670
 8003070:	42c80000 	.word	0x42c80000
 8003074:	20000690 	.word	0x20000690
 8003078:	20000694 	.word	0x20000694
 800307c:	20000698 	.word	0x20000698
    LevelA_persen = 0;
 8003080:	4b99      	ldr	r3, [pc, #612]	@ (80032e8 <Run_Control_Logic+0x54c>)
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e00b      	b.n	80030a2 <Run_Control_Logic+0x306>
  else if (LevelA_persen > 100)
 800308a:	4b97      	ldr	r3, [pc, #604]	@ (80032e8 <Run_Control_Logic+0x54c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4997      	ldr	r1, [pc, #604]	@ (80032ec <Run_Control_Logic+0x550>)
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe f833 	bl	80010fc <__aeabi_fcmpgt>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <Run_Control_Logic+0x306>
    LevelA_persen = 100;
 800309c:	4b92      	ldr	r3, [pc, #584]	@ (80032e8 <Run_Control_Logic+0x54c>)
 800309e:	4a93      	ldr	r2, [pc, #588]	@ (80032ec <Run_Control_Logic+0x550>)
 80030a0:	601a      	str	r2, [r3, #0]
  if (LevelB_persen < 0)
 80030a2:	4b93      	ldr	r3, [pc, #588]	@ (80032f0 <Run_Control_Logic+0x554>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f808 	bl	80010c0 <__aeabi_fcmplt>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <Run_Control_Logic+0x324>
    LevelB_persen = 0;
 80030b6:	4b8e      	ldr	r3, [pc, #568]	@ (80032f0 <Run_Control_Logic+0x554>)
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00b      	b.n	80030d8 <Run_Control_Logic+0x33c>
  else if (LevelB_persen > 100)
 80030c0:	4b8b      	ldr	r3, [pc, #556]	@ (80032f0 <Run_Control_Logic+0x554>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4989      	ldr	r1, [pc, #548]	@ (80032ec <Run_Control_Logic+0x550>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe f818 	bl	80010fc <__aeabi_fcmpgt>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <Run_Control_Logic+0x33c>
    LevelB_persen = 100;
 80030d2:	4b87      	ldr	r3, [pc, #540]	@ (80032f0 <Run_Control_Logic+0x554>)
 80030d4:	4a85      	ldr	r2, [pc, #532]	@ (80032ec <Run_Control_Logic+0x550>)
 80030d6:	601a      	str	r2, [r3, #0]
  if (LevelC_persen < 0)
 80030d8:	4b86      	ldr	r3, [pc, #536]	@ (80032f4 <Run_Control_Logic+0x558>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd ffed 	bl	80010c0 <__aeabi_fcmplt>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <Run_Control_Logic+0x35a>
    LevelC_persen = 0;
 80030ec:	4b81      	ldr	r3, [pc, #516]	@ (80032f4 <Run_Control_Logic+0x558>)
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e00b      	b.n	800310e <Run_Control_Logic+0x372>
  else if (LevelC_persen > 100)
 80030f6:	4b7f      	ldr	r3, [pc, #508]	@ (80032f4 <Run_Control_Logic+0x558>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	497c      	ldr	r1, [pc, #496]	@ (80032ec <Run_Control_Logic+0x550>)
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fffd 	bl	80010fc <__aeabi_fcmpgt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <Run_Control_Logic+0x372>
    LevelC_persen = 100;
 8003108:	4b7a      	ldr	r3, [pc, #488]	@ (80032f4 <Run_Control_Logic+0x558>)
 800310a:	4a78      	ldr	r2, [pc, #480]	@ (80032ec <Run_Control_Logic+0x550>)
 800310c:	601a      	str	r2, [r3, #0]

  // --- LED merah jika salah satu drum di bawah ambang ---
  if (LevelA_persen <= g_params.ambang_bawah_A ||
 800310e:	4b7a      	ldr	r3, [pc, #488]	@ (80032f8 <Run_Control_Logic+0x55c>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4a75      	ldr	r2, [pc, #468]	@ (80032e8 <Run_Control_Logic+0x54c>)
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd ffe5 	bl	80010e8 <__aeabi_fcmpge>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d115      	bne.n	8003150 <Run_Control_Logic+0x3b4>
      LevelB_persen <= g_params.ambang_bawah_B ||
 8003124:	4b74      	ldr	r3, [pc, #464]	@ (80032f8 <Run_Control_Logic+0x55c>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4a71      	ldr	r2, [pc, #452]	@ (80032f0 <Run_Control_Logic+0x554>)
 800312a:	6812      	ldr	r2, [r2, #0]
  if (LevelA_persen <= g_params.ambang_bawah_A ||
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd ffda 	bl	80010e8 <__aeabi_fcmpge>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <Run_Control_Logic+0x3b4>
      LevelC_persen <= g_params.ambang_bawah_C)
 800313a:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <Run_Control_Logic+0x55c>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a6d      	ldr	r2, [pc, #436]	@ (80032f4 <Run_Control_Logic+0x558>)
 8003140:	6812      	ldr	r2, [r2, #0]
      LevelB_persen <= g_params.ambang_bawah_B ||
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd ffcf 	bl	80010e8 <__aeabi_fcmpge>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <Run_Control_Logic+0x3c2>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003156:	4869      	ldr	r0, [pc, #420]	@ (80032fc <Run_Control_Logic+0x560>)
 8003158:	f001 f9c3 	bl	80044e2 <HAL_GPIO_WritePin>
 800315c:	e005      	b.n	800316a <Run_Control_Logic+0x3ce>
  else
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800315e:	2200      	movs	r2, #0
 8003160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003164:	4865      	ldr	r0, [pc, #404]	@ (80032fc <Run_Control_Logic+0x560>)
 8003166:	f001 f9bc 	bl	80044e2 <HAL_GPIO_WritePin>

  // --- Kontrol POMPA_BA (drum A) ---
  if (state_pompa_A == STATE_IDLE)
 800316a:	4b65      	ldr	r3, [pc, #404]	@ (8003300 <Run_Control_Logic+0x564>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11b      	bne.n	80031aa <Run_Control_Logic+0x40e>
  {
    if (LevelA_persen <= g_params.ambang_bawah_A &&
 8003172:	4b61      	ldr	r3, [pc, #388]	@ (80032f8 <Run_Control_Logic+0x55c>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4a5c      	ldr	r2, [pc, #368]	@ (80032e8 <Run_Control_Logic+0x54c>)
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd ffb3 	bl	80010e8 <__aeabi_fcmpge>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <Run_Control_Logic+0x43e>
        HAL_GPIO_ReadPin(POMPA_1_ON_GPIO_Port, POMPA_1_ON_Pin) == GPIO_PIN_RESET) // tombol ditekan
 8003188:	2101      	movs	r1, #1
 800318a:	485c      	ldr	r0, [pc, #368]	@ (80032fc <Run_Control_Logic+0x560>)
 800318c:	f001 f992 	bl	80044b4 <HAL_GPIO_ReadPin>
 8003190:	4603      	mov	r3, r0
    if (LevelA_persen <= g_params.ambang_bawah_A &&
 8003192:	2b00      	cmp	r3, #0
 8003194:	d121      	bne.n	80031da <Run_Control_Logic+0x43e>
    {
      state_pompa_A = STATE_FILLING;
 8003196:	4b5a      	ldr	r3, [pc, #360]	@ (8003300 <Run_Control_Logic+0x564>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_SET);
 800319c:	2201      	movs	r2, #1
 800319e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031a2:	4856      	ldr	r0, [pc, #344]	@ (80032fc <Run_Control_Logic+0x560>)
 80031a4:	f001 f99d 	bl	80044e2 <HAL_GPIO_WritePin>
 80031a8:	e017      	b.n	80031da <Run_Control_Logic+0x43e>
    }
  }
  else if (state_pompa_A == STATE_FILLING)
 80031aa:	4b55      	ldr	r3, [pc, #340]	@ (8003300 <Run_Control_Logic+0x564>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d113      	bne.n	80031da <Run_Control_Logic+0x43e>
  {
    if (LevelA_persen >= g_params.target_penuh_A)
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <Run_Control_Logic+0x55c>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	4a4c      	ldr	r2, [pc, #304]	@ (80032e8 <Run_Control_Logic+0x54c>)
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff89 	bl	80010d4 <__aeabi_fcmple>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <Run_Control_Logic+0x43e>
    {
      state_pompa_A = STATE_IDLE;
 80031c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003300 <Run_Control_Logic+0x564>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_BA_GPIO_Port, POMPA_BA_Pin, GPIO_PIN_RESET);
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031d4:	4849      	ldr	r0, [pc, #292]	@ (80032fc <Run_Control_Logic+0x560>)
 80031d6:	f001 f984 	bl	80044e2 <HAL_GPIO_WritePin>
    }
  }

  // --- Kontrol POMPA_CB (drum B dan drum C) ---
  if (state_pompa_B == STATE_IDLE)
 80031da:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <Run_Control_Logic+0x568>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d137      	bne.n	8003252 <Run_Control_Logic+0x4b6>
  {
    if (LevelB_persen <= g_params.ambang_bawah_B &&
 80031e2:	4b45      	ldr	r3, [pc, #276]	@ (80032f8 <Run_Control_Logic+0x55c>)
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4a42      	ldr	r2, [pc, #264]	@ (80032f0 <Run_Control_Logic+0x554>)
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd ff7b 	bl	80010e8 <__aeabi_fcmpge>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d010      	beq.n	800321a <Run_Control_Logic+0x47e>
        HAL_GPIO_ReadPin(POMPA_2_ON_GPIO_Port, POMPA_2_ON_Pin) == GPIO_PIN_RESET) // tombol ditekan
 80031f8:	2102      	movs	r1, #2
 80031fa:	4840      	ldr	r0, [pc, #256]	@ (80032fc <Run_Control_Logic+0x560>)
 80031fc:	f001 f95a 	bl	80044b4 <HAL_GPIO_ReadPin>
 8003200:	4603      	mov	r3, r0
    if (LevelB_persen <= g_params.ambang_bawah_B &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <Run_Control_Logic+0x47e>
    {
      state_pompa_B = STATE_FILLING_B;
 8003206:	4b3f      	ldr	r3, [pc, #252]	@ (8003304 <Run_Control_Logic+0x568>)
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003212:	483a      	ldr	r0, [pc, #232]	@ (80032fc <Run_Control_Logic+0x560>)
 8003214:	f001 f965 	bl	80044e2 <HAL_GPIO_WritePin>
 8003218:	e04c      	b.n	80032b4 <Run_Control_Logic+0x518>
    }
    else if (LevelC_persen <= g_params.ambang_bawah_C &&
 800321a:	4b37      	ldr	r3, [pc, #220]	@ (80032f8 <Run_Control_Logic+0x55c>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a35      	ldr	r2, [pc, #212]	@ (80032f4 <Run_Control_Logic+0x558>)
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd ff5f 	bl	80010e8 <__aeabi_fcmpge>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d041      	beq.n	80032b4 <Run_Control_Logic+0x518>
             HAL_GPIO_ReadPin(POMPA_2_ON_GPIO_Port, POMPA_2_ON_Pin) == GPIO_PIN_RESET) // tombol ditekan
 8003230:	2102      	movs	r1, #2
 8003232:	4832      	ldr	r0, [pc, #200]	@ (80032fc <Run_Control_Logic+0x560>)
 8003234:	f001 f93e 	bl	80044b4 <HAL_GPIO_ReadPin>
 8003238:	4603      	mov	r3, r0
    else if (LevelC_persen <= g_params.ambang_bawah_C &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d13a      	bne.n	80032b4 <Run_Control_Logic+0x518>
    {
      state_pompa_B = STATE_FILLING_C;
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <Run_Control_Logic+0x568>)
 8003240:	2203      	movs	r2, #3
 8003242:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_SET);
 8003244:	2201      	movs	r2, #1
 8003246:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800324a:	482c      	ldr	r0, [pc, #176]	@ (80032fc <Run_Control_Logic+0x560>)
 800324c:	f001 f949 	bl	80044e2 <HAL_GPIO_WritePin>
 8003250:	e030      	b.n	80032b4 <Run_Control_Logic+0x518>
    }
  }
  else if (state_pompa_B == STATE_FILLING_B)
 8003252:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <Run_Control_Logic+0x568>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d114      	bne.n	8003284 <Run_Control_Logic+0x4e8>
  {
    if (LevelB_persen >= g_params.target_penuh_B)
 800325a:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <Run_Control_Logic+0x55c>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4a24      	ldr	r2, [pc, #144]	@ (80032f0 <Run_Control_Logic+0x554>)
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd ff35 	bl	80010d4 <__aeabi_fcmple>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d021      	beq.n	80032b4 <Run_Control_Logic+0x518>
    {
      state_pompa_B = STATE_IDLE;
 8003270:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <Run_Control_Logic+0x568>)
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 8003276:	2200      	movs	r2, #0
 8003278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800327c:	481f      	ldr	r0, [pc, #124]	@ (80032fc <Run_Control_Logic+0x560>)
 800327e:	f001 f930 	bl	80044e2 <HAL_GPIO_WritePin>
 8003282:	e017      	b.n	80032b4 <Run_Control_Logic+0x518>
    }
  }
  else if (state_pompa_B == STATE_FILLING_C)
 8003284:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <Run_Control_Logic+0x568>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d113      	bne.n	80032b4 <Run_Control_Logic+0x518>
  {
    if (LevelC_persen >= g_params.target_penuh_C)
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <Run_Control_Logic+0x55c>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <Run_Control_Logic+0x558>)
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd ff1c 	bl	80010d4 <__aeabi_fcmple>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <Run_Control_Logic+0x518>
    {
      state_pompa_B = STATE_IDLE;
 80032a2:	4b18      	ldr	r3, [pc, #96]	@ (8003304 <Run_Control_Logic+0x568>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(POMPA_CB_GPIO_Port, POMPA_CB_Pin, GPIO_PIN_RESET);
 80032a8:	2200      	movs	r2, #0
 80032aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032ae:	4813      	ldr	r0, [pc, #76]	@ (80032fc <Run_Control_Logic+0x560>)
 80032b0:	f001 f917 	bl	80044e2 <HAL_GPIO_WritePin>
    }
  }

  // --- LED hijau jika idle, mati jika menyalakan pompa ---
  if (state_pompa_A == STATE_IDLE && state_pompa_B == STATE_IDLE)
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <Run_Control_Logic+0x564>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <Run_Control_Logic+0x536>
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <Run_Control_Logic+0x568>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <Run_Control_Logic+0x536>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80032c4:	2201      	movs	r2, #1
 80032c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032ca:	480c      	ldr	r0, [pc, #48]	@ (80032fc <Run_Control_Logic+0x560>)
 80032cc:	f001 f909 	bl	80044e2 <HAL_GPIO_WritePin>
 80032d0:	e006      	b.n	80032e0 <Run_Control_Logic+0x544>
  else
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032d8:	4808      	ldr	r0, [pc, #32]	@ (80032fc <Run_Control_Logic+0x560>)
 80032da:	f001 f902 	bl	80044e2 <HAL_GPIO_WritePin>
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000690 	.word	0x20000690
 80032ec:	42c80000 	.word	0x42c80000
 80032f0:	20000694 	.word	0x20000694
 80032f4:	20000698 	.word	0x20000698
 80032f8:	200006a0 	.word	0x200006a0
 80032fc:	40010c00 	.word	0x40010c00
 8003300:	2000069c 	.word	0x2000069c
 8003304:	2000069d 	.word	0x2000069d

08003308 <Update_LCD_Display>:

void Update_LCD_Display(void)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af02      	add	r7, sp, #8
  lcd_set_cursor(0, 0);
 800330e:	2100      	movs	r1, #0
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe fc6b 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "A:%3.0f%% B:%3.0f%%", LevelA_persen, LevelB_persen);
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <Update_LCD_Display+0x98>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f884 	bl	8000428 <__aeabi_f2d>
 8003320:	4604      	mov	r4, r0
 8003322:	460d      	mov	r5, r1
 8003324:	4b1f      	ldr	r3, [pc, #124]	@ (80033a4 <Update_LCD_Display+0x9c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f87d 	bl	8000428 <__aeabi_f2d>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	e9cd 2300 	strd	r2, r3, [sp]
 8003336:	4622      	mov	r2, r4
 8003338:	462b      	mov	r3, r5
 800333a:	491b      	ldr	r1, [pc, #108]	@ (80033a8 <Update_LCD_Display+0xa0>)
 800333c:	481b      	ldr	r0, [pc, #108]	@ (80033ac <Update_LCD_Display+0xa4>)
 800333e:	f00a ff5b 	bl	800e1f8 <siprintf>
  lcd_send_string(lcd_buffer);
 8003342:	481a      	ldr	r0, [pc, #104]	@ (80033ac <Update_LCD_Display+0xa4>)
 8003344:	f7fe fcb8 	bl	8001cb8 <lcd_send_string>
  lcd_set_cursor(1, 0);
 8003348:	2100      	movs	r1, #0
 800334a:	2001      	movs	r0, #1
 800334c:	f7fe fc4e 	bl	8001bec <lcd_set_cursor>
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8003350:	4b17      	ldr	r3, [pc, #92]	@ (80033b0 <Update_LCD_Display+0xa8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f867 	bl	8000428 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
          (state_pompa_A == STATE_FILLING) ? 'A' : ' ',
 800335e:	4915      	ldr	r1, [pc, #84]	@ (80033b4 <Update_LCD_Display+0xac>)
 8003360:	7809      	ldrb	r1, [r1, #0]
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8003362:	2901      	cmp	r1, #1
 8003364:	d101      	bne.n	800336a <Update_LCD_Display+0x62>
 8003366:	2141      	movs	r1, #65	@ 0x41
 8003368:	e000      	b.n	800336c <Update_LCD_Display+0x64>
 800336a:	2120      	movs	r1, #32
          (state_pompa_B == STATE_FILLING) ? 'B' : ' ');
 800336c:	4812      	ldr	r0, [pc, #72]	@ (80033b8 <Update_LCD_Display+0xb0>)
 800336e:	7800      	ldrb	r0, [r0, #0]
  sprintf(lcd_buffer, "C:%3.0f%% S:%c%c", LevelC_persen,
 8003370:	2801      	cmp	r0, #1
 8003372:	d101      	bne.n	8003378 <Update_LCD_Display+0x70>
 8003374:	2042      	movs	r0, #66	@ 0x42
 8003376:	e000      	b.n	800337a <Update_LCD_Display+0x72>
 8003378:	2020      	movs	r0, #32
 800337a:	9001      	str	r0, [sp, #4]
 800337c:	9100      	str	r1, [sp, #0]
 800337e:	490f      	ldr	r1, [pc, #60]	@ (80033bc <Update_LCD_Display+0xb4>)
 8003380:	480a      	ldr	r0, [pc, #40]	@ (80033ac <Update_LCD_Display+0xa4>)
 8003382:	f00a ff39 	bl	800e1f8 <siprintf>
  lcd_send_string("                ");
 8003386:	480e      	ldr	r0, [pc, #56]	@ (80033c0 <Update_LCD_Display+0xb8>)
 8003388:	f7fe fc96 	bl	8001cb8 <lcd_send_string>
  lcd_set_cursor(1, 0);
 800338c:	2100      	movs	r1, #0
 800338e:	2001      	movs	r0, #1
 8003390:	f7fe fc2c 	bl	8001bec <lcd_set_cursor>
  lcd_send_string(lcd_buffer);
 8003394:	4805      	ldr	r0, [pc, #20]	@ (80033ac <Update_LCD_Display+0xa4>)
 8003396:	f7fe fc8f 	bl	8001cb8 <lcd_send_string>
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}
 80033a0:	20000690 	.word	0x20000690
 80033a4:	20000694 	.word	0x20000694
 80033a8:	08012994 	.word	0x08012994
 80033ac:	2000067c 	.word	0x2000067c
 80033b0:	20000698 	.word	0x20000698
 80033b4:	2000069c 	.word	0x2000069c
 80033b8:	2000069d 	.word	0x2000069d
 80033bc:	080129a8 	.word	0x080129a8
 80033c0:	080129bc 	.word	0x080129bc

080033c4 <CDC_On_Receive>:

/**
 * @brief  Callback ini dipanggil dari usbd_cdc_if.c setiap kali data diterima dari USB VCP.
 */
void CDC_On_Receive(uint8_t *Buf, uint32_t Len)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < Len; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e039      	b.n	8003448 <CDC_On_Receive+0x84>
  {
    // Cek jika buffer penuh
    if (g_rx_index >= RX_BUFFER_SIZE - 1)
 80033d4:	4b21      	ldr	r3, [pc, #132]	@ (800345c <CDC_On_Receive+0x98>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80033da:	d907      	bls.n	80033ec <CDC_On_Receive+0x28>
    {
      g_rx_index = 0; // Reset jika overflow
 80033dc:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <CDC_On_Receive+0x98>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
      memset(g_usb_rx_buffer, 0, RX_BUFFER_SIZE);
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	2100      	movs	r1, #0
 80033e6:	481e      	ldr	r0, [pc, #120]	@ (8003460 <CDC_On_Receive+0x9c>)
 80033e8:	f00a ffd6 	bl	800e398 <memset>
    }

    // Echo karakter kembali ke terminal
    CDC_Transmit_FS(&Buf[i], 1);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f009 fbfb 	bl	800cbf0 <CDC_Transmit_FS>

    // Jika menerima Enter (CR) atau Newline (LF)
    if (Buf[i] == '\r' || Buf[i] == '\n')
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b0d      	cmp	r3, #13
 8003404:	d005      	beq.n	8003412 <CDC_On_Receive+0x4e>
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d10c      	bne.n	800342c <CDC_On_Receive+0x68>
    {
      // Abaikan jika buffer kosong
      if (g_rx_index > 0)
 8003412:	4b12      	ldr	r3, [pc, #72]	@ (800345c <CDC_On_Receive+0x98>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d013      	beq.n	8003442 <CDC_On_Receive+0x7e>
      {
        g_usb_rx_buffer[g_rx_index] = '\0'; // Null-terminate string
 800341a:	4b10      	ldr	r3, [pc, #64]	@ (800345c <CDC_On_Receive+0x98>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <CDC_On_Receive+0x9c>)
 8003420:	2100      	movs	r1, #0
 8003422:	54d1      	strb	r1, [r2, r3]
        g_command_ready = 1;                // Set flag untuk diproses di main loop
 8003424:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <CDC_On_Receive+0xa0>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
      if (g_rx_index > 0)
 800342a:	e00a      	b.n	8003442 <CDC_On_Receive+0x7e>
      }
    }
    else
    {
      g_usb_rx_buffer[g_rx_index++] = Buf[i]; // Tambahkan karakter ke buffer
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	441a      	add	r2, r3
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <CDC_On_Receive+0x98>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	4808      	ldr	r0, [pc, #32]	@ (800345c <CDC_On_Receive+0x98>)
 800343a:	6001      	str	r1, [r0, #0]
 800343c:	7811      	ldrb	r1, [r2, #0]
 800343e:	4a08      	ldr	r2, [pc, #32]	@ (8003460 <CDC_On_Receive+0x9c>)
 8003440:	54d1      	strb	r1, [r2, r3]
  for (uint32_t i = 0; i < Len; i++)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d3c1      	bcc.n	80033d4 <CDC_On_Receive+0x10>
    }
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000750 	.word	0x20000750
 8003460:	200006d0 	.word	0x200006d0
 8003464:	20000754 	.word	0x20000754

08003468 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800346c:	b672      	cpsid	i
}
 800346e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <Error_Handler+0x8>

08003474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <HAL_MspInit+0x5c>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <HAL_MspInit+0x5c>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6193      	str	r3, [r2, #24]
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <HAL_MspInit+0x5c>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003492:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <HAL_MspInit+0x5c>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <HAL_MspInit+0x5c>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349c:	61d3      	str	r3, [r2, #28]
 800349e:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <HAL_MspInit+0x5c>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034aa:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <HAL_MspInit+0x60>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <HAL_MspInit+0x60>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40010000 	.word	0x40010000

080034d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <HAL_I2C_MspInit+0x90>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d132      	bne.n	800355e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f8:	4b1c      	ldr	r3, [pc, #112]	@ (800356c <HAL_I2C_MspInit+0x94>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_I2C_MspInit+0x94>)
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	6193      	str	r3, [r2, #24]
 8003504:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_I2C_MspInit+0x94>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003510:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003516:	2312      	movs	r3, #18
 8003518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800351a:	2303      	movs	r3, #3
 800351c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	4812      	ldr	r0, [pc, #72]	@ (8003570 <HAL_I2C_MspInit+0x98>)
 8003526:	f000 fe41 	bl	80041ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_I2C_MspInit+0x9c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003540:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <HAL_I2C_MspInit+0x9c>)
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_I2C_MspInit+0x94>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4a08      	ldr	r2, [pc, #32]	@ (800356c <HAL_I2C_MspInit+0x94>)
 800354c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003550:	61d3      	str	r3, [r2, #28]
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_I2C_MspInit+0x94>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	@ 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40005400 	.word	0x40005400
 800356c:	40021000 	.word	0x40021000
 8003570:	40010c00 	.word	0x40010c00
 8003574:	40010000 	.word	0x40010000

08003578 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0b      	ldr	r2, [pc, #44]	@ (80035b4 <HAL_RTC_MspInit+0x3c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d110      	bne.n	80035ac <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800358a:	f003 f9bf 	bl	800690c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800358e:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <HAL_RTC_MspInit+0x40>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4a09      	ldr	r2, [pc, #36]	@ (80035b8 <HAL_RTC_MspInit+0x40>)
 8003594:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003598:	61d3      	str	r3, [r2, #28]
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RTC_MspInit+0x40>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RTC_MspInit+0x44>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40002800 	.word	0x40002800
 80035b8:	40021000 	.word	0x40021000
 80035bc:	4242043c 	.word	0x4242043c

080035c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1b      	ldr	r2, [pc, #108]	@ (8003648 <HAL_SPI_MspInit+0x88>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d12f      	bne.n	8003640 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035e0:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <HAL_SPI_MspInit+0x8c>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4a19      	ldr	r2, [pc, #100]	@ (800364c <HAL_SPI_MspInit+0x8c>)
 80035e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035ea:	6193      	str	r3, [r2, #24]
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_SPI_MspInit+0x8c>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_SPI_MspInit+0x8c>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	4a13      	ldr	r2, [pc, #76]	@ (800364c <HAL_SPI_MspInit+0x8c>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	6193      	str	r3, [r2, #24]
 8003604:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_SPI_MspInit+0x8c>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003610:	23a0      	movs	r3, #160	@ 0xa0
 8003612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	4619      	mov	r1, r3
 8003622:	480b      	ldr	r0, [pc, #44]	@ (8003650 <HAL_SPI_MspInit+0x90>)
 8003624:	f000 fdc2 	bl	80041ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003628:	2340      	movs	r3, #64	@ 0x40
 800362a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	4619      	mov	r1, r3
 800363a:	4805      	ldr	r0, [pc, #20]	@ (8003650 <HAL_SPI_MspInit+0x90>)
 800363c:	f000 fdb6 	bl	80041ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003640:	bf00      	nop
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40013000 	.word	0x40013000
 800364c:	40021000 	.word	0x40021000
 8003650:	40010800 	.word	0x40010800

08003654 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	@ 0x38
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0320 	add.w	r3, r7, #32
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003672:	d13f      	bne.n	80036f4 <HAL_TIM_Base_MspInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003674:	4b5c      	ldr	r3, [pc, #368]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a5b      	ldr	r2, [pc, #364]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	61d3      	str	r3, [r2, #28]
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b56      	ldr	r3, [pc, #344]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a55      	ldr	r2, [pc, #340]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f107 0320 	add.w	r3, r7, #32
 80036b6:	4619      	mov	r1, r3
 80036b8:	484c      	ldr	r0, [pc, #304]	@ (80037ec <HAL_TIM_Base_MspInit+0x198>)
 80036ba:	f000 fd77 	bl	80041ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80036be:	4b4c      	ldr	r3, [pc, #304]	@ (80037f0 <HAL_TIM_Base_MspInit+0x19c>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80036d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
 80036dc:	4a44      	ldr	r2, [pc, #272]	@ (80037f0 <HAL_TIM_Base_MspInit+0x19c>)
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2100      	movs	r1, #0
 80036e6:	201c      	movs	r0, #28
 80036e8:	f000 fb29 	bl	8003d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036ec:	201c      	movs	r0, #28
 80036ee:	f000 fb42 	bl	8003d76 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036f2:	e074      	b.n	80037de <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3e      	ldr	r2, [pc, #248]	@ (80037f4 <HAL_TIM_Base_MspInit+0x1a0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d13e      	bne.n	800377c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036fe:	4b3a      	ldr	r3, [pc, #232]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a39      	ldr	r2, [pc, #228]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	61d3      	str	r3, [r2, #28]
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	4b34      	ldr	r3, [pc, #208]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	4a33      	ldr	r2, [pc, #204]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	6193      	str	r3, [r2, #24]
 8003722:	4b31      	ldr	r3, [pc, #196]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800372e:	2310      	movs	r3, #16
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373a:	f107 0320 	add.w	r3, r7, #32
 800373e:	4619      	mov	r1, r3
 8003740:	482d      	ldr	r0, [pc, #180]	@ (80037f8 <HAL_TIM_Base_MspInit+0x1a4>)
 8003742:	f000 fd33 	bl	80041ac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003746:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_TIM_Base_MspInit+0x19c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
 800374c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
 8003754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003756:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
 800375c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
 8003764:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <HAL_TIM_Base_MspInit+0x19c>)
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	201d      	movs	r0, #29
 8003770:	f000 fae5 	bl	8003d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003774:	201d      	movs	r0, #29
 8003776:	f000 fafe 	bl	8003d76 <HAL_NVIC_EnableIRQ>
}
 800377a:	e030      	b.n	80037de <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <HAL_TIM_Base_MspInit+0x1a8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12b      	bne.n	80037de <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003786:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	4a11      	ldr	r2, [pc, #68]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	6193      	str	r3, [r2, #24]
 80037aa:	4b0f      	ldr	r3, [pc, #60]	@ (80037e8 <HAL_TIM_Base_MspInit+0x194>)
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037b6:	2340      	movs	r3, #64	@ 0x40
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 0320 	add.w	r3, r7, #32
 80037c6:	4619      	mov	r1, r3
 80037c8:	480b      	ldr	r0, [pc, #44]	@ (80037f8 <HAL_TIM_Base_MspInit+0x1a4>)
 80037ca:	f000 fcef 	bl	80041ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	201e      	movs	r0, #30
 80037d4:	f000 fab3 	bl	8003d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037d8:	201e      	movs	r0, #30
 80037da:	f000 facc 	bl	8003d76 <HAL_NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3738      	adds	r7, #56	@ 0x38
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40010800 	.word	0x40010800
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40010c00 	.word	0x40010c00
 80037fc:	40000800 	.word	0x40000800

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <NMI_Handler+0x4>

08003808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <MemManage_Handler+0x4>

08003818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <UsageFault_Handler+0x4>

08003828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003850:	f000 f95e 	bl	8003b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}

08003858 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800385c:	4802      	ldr	r0, [pc, #8]	@ (8003868 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800385e:	f001 fc11 	bl	8005084 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20001474 	.word	0x20001474

0800386c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003870:	4802      	ldr	r0, [pc, #8]	@ (800387c <TIM2_IRQHandler+0x10>)
 8003872:	f004 fbe1 	bl	8008038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200004ac 	.word	0x200004ac

08003880 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003884:	4802      	ldr	r0, [pc, #8]	@ (8003890 <TIM3_IRQHandler+0x10>)
 8003886:	f004 fbd7 	bl	8008038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200004f4 	.word	0x200004f4

08003894 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003898:	4802      	ldr	r0, [pc, #8]	@ (80038a4 <TIM4_IRQHandler+0x10>)
 800389a:	f004 fbcd 	bl	8008038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2000053c 	.word	0x2000053c

080038a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return 1;
 80038ac:	2301      	movs	r3, #1
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <_kill>:

int _kill(int pid, int sig)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038c0:	f00a fdce 	bl	800e460 <__errno>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2216      	movs	r2, #22
 80038c8:	601a      	str	r2, [r3, #0]
  return -1;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_exit>:

void _exit (int status)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038de:	f04f 31ff 	mov.w	r1, #4294967295
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffe7 	bl	80038b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <_exit+0x12>

080038ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e00a      	b.n	8003914 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038fe:	f3af 8000 	nop.w
 8003902:	4601      	mov	r1, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	60ba      	str	r2, [r7, #8]
 800390a:	b2ca      	uxtb	r2, r1
 800390c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3301      	adds	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	dbf0      	blt.n	80038fe <_read+0x12>
  }

  return len;
 800391c:	687b      	ldr	r3, [r7, #4]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e009      	b.n	800394c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	60ba      	str	r2, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3301      	adds	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	dbf1      	blt.n	8003938 <_write+0x12>
  }
  return len;
 8003954:	687b      	ldr	r3, [r7, #4]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_close>:

int _close(int file)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003984:	605a      	str	r2, [r3, #4]
  return 0;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <_isatty>:

int _isatty(int file)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800399a:	2301      	movs	r3, #1
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
	...

080039c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c8:	4a14      	ldr	r2, [pc, #80]	@ (8003a1c <_sbrk+0x5c>)
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <_sbrk+0x60>)
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <_sbrk+0x64>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <_sbrk+0x64>)
 80039de:	4a12      	ldr	r2, [pc, #72]	@ (8003a28 <_sbrk+0x68>)
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <_sbrk+0x64>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d207      	bcs.n	8003a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039f0:	f00a fd36 	bl	800e460 <__errno>
 80039f4:	4603      	mov	r3, r0
 80039f6:	220c      	movs	r2, #12
 80039f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	e009      	b.n	8003a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a00:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <_sbrk+0x64>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a06:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <_sbrk+0x64>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a05      	ldr	r2, [pc, #20]	@ (8003a24 <_sbrk+0x64>)
 8003a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20005000 	.word	0x20005000
 8003a20:	00000400 	.word	0x00000400
 8003a24:	2000076c 	.word	0x2000076c
 8003a28:	20001ab8 	.word	0x20001ab8

08003a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a38:	f7ff fff8 	bl	8003a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a3c:	480b      	ldr	r0, [pc, #44]	@ (8003a6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a3e:	490c      	ldr	r1, [pc, #48]	@ (8003a70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a40:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a44:	e002      	b.n	8003a4c <LoopCopyDataInit>

08003a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4a:	3304      	adds	r3, #4

08003a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a50:	d3f9      	bcc.n	8003a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a54:	4c09      	ldr	r4, [pc, #36]	@ (8003a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a58:	e001      	b.n	8003a5e <LoopFillZerobss>

08003a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a5c:	3204      	adds	r2, #4

08003a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a60:	d3fb      	bcc.n	8003a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a62:	f00a fd03 	bl	800e46c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a66:	f7fe f93d 	bl	8001ce4 <main>
  bx lr
 8003a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8003a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a70:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8003a74:	08012ef4 	.word	0x08012ef4
  ldr r2, =_sbss
 8003a78:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8003a7c:	20001ab8 	.word	0x20001ab8

08003a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a80:	e7fe      	b.n	8003a80 <ADC1_2_IRQHandler>
	...

08003a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <HAL_Init+0x28>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	@ (8003aac <HAL_Init+0x28>)
 8003a8e:	f043 0310 	orr.w	r3, r3, #16
 8003a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f947 	bl	8003d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9a:	200f      	movs	r0, #15
 8003a9c:	f000 f808 	bl	8003ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa0:	f7ff fce8 	bl	8003474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40022000 	.word	0x40022000

08003ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ab8:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_InitTick+0x54>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <HAL_InitTick+0x58>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f95f 	bl	8003d92 <HAL_SYSTICK_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00e      	b.n	8003afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d80a      	bhi.n	8003afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f000 f927 	bl	8003d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af0:	4a06      	ldr	r2, [pc, #24]	@ (8003b0c <HAL_InitTick+0x5c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000004 	.word	0x20000004
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	20000008 	.word	0x20000008

08003b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_IncTick+0x1c>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_IncTick+0x20>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a03      	ldr	r2, [pc, #12]	@ (8003b30 <HAL_IncTick+0x20>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	2000000c 	.word	0x2000000c
 8003b30:	20000770 	.word	0x20000770

08003b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return uwTick;
 8003b38:	4b02      	ldr	r3, [pc, #8]	@ (8003b44 <HAL_GetTick+0x10>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	20000770 	.word	0x20000770

08003b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d005      	beq.n	8003b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <HAL_Delay+0x44>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b6e:	bf00      	nop
 8003b70:	f7ff ffe0 	bl	8003b34 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d8f7      	bhi.n	8003b70 <HAL_Delay+0x28>
  {
  }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000000c 	.word	0x2000000c

08003b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc2:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	60d3      	str	r3, [r2, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0307 	and.w	r3, r3, #7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db0b      	blt.n	8003c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	4906      	ldr	r1, [pc, #24]	@ (8003c28 <__NVIC_EnableIRQ+0x34>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	db0a      	blt.n	8003c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	490c      	ldr	r1, [pc, #48]	@ (8003c78 <__NVIC_SetPriority+0x4c>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	0112      	lsls	r2, r2, #4
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c54:	e00a      	b.n	8003c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4908      	ldr	r1, [pc, #32]	@ (8003c7c <__NVIC_SetPriority+0x50>)
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	3b04      	subs	r3, #4
 8003c64:	0112      	lsls	r2, r2, #4
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	440b      	add	r3, r1
 8003c6a:	761a      	strb	r2, [r3, #24]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f1c3 0307 	rsb	r3, r3, #7
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	bf28      	it	cs
 8003c9e:	2304      	movcs	r3, #4
 8003ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d902      	bls.n	8003cb0 <NVIC_EncodePriority+0x30>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3b03      	subs	r3, #3
 8003cae:	e000      	b.n	8003cb2 <NVIC_EncodePriority+0x32>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	4313      	orrs	r3, r2
         );
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	@ 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cf4:	d301      	bcc.n	8003cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00f      	b.n	8003d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <SysTick_Config+0x40>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d02:	210f      	movs	r1, #15
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	f7ff ff90 	bl	8003c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d0c:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <SysTick_Config+0x40>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d12:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <SysTick_Config+0x40>)
 8003d14:	2207      	movs	r2, #7
 8003d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	e000e010 	.word	0xe000e010

08003d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff2d 	bl	8003b90 <__NVIC_SetPriorityGrouping>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	4603      	mov	r3, r0
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d50:	f7ff ff42 	bl	8003bd8 <__NVIC_GetPriorityGrouping>
 8003d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff ff90 	bl	8003c80 <NVIC_EncodePriority>
 8003d60:	4602      	mov	r2, r0
 8003d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff5f 	bl	8003c2c <__NVIC_SetPriority>
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff35 	bl	8003bf4 <__NVIC_EnableIRQ>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ffa2 	bl	8003ce4 <SysTick_Config>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e84 <HAL_FLASH_Program+0xd8>)
 8003dc8:	7e1b      	ldrb	r3, [r3, #24]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_FLASH_Program+0x26>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e054      	b.n	8003e7c <HAL_FLASH_Program+0xd0>
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e84 <HAL_FLASH_Program+0xd8>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ddc:	f000 f8a8 	bl	8003f30 <FLASH_WaitForLastOperation>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d144      	bne.n	8003e74 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d102      	bne.n	8003df6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003df0:	2301      	movs	r3, #1
 8003df2:	757b      	strb	r3, [r7, #21]
 8003df4:	e007      	b.n	8003e06 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d102      	bne.n	8003e02 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	757b      	strb	r3, [r7, #21]
 8003e00:	e001      	b.n	8003e06 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003e02:	2304      	movs	r3, #4
 8003e04:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	75bb      	strb	r3, [r7, #22]
 8003e0a:	e02d      	b.n	8003e68 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e0c:	7dbb      	ldrb	r3, [r7, #22]
 8003e0e:	005a      	lsls	r2, r3, #1
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	eb02 0c03 	add.w	ip, r2, r3
 8003e16:	7dbb      	ldrb	r3, [r7, #22]
 8003e18:	0119      	lsls	r1, r3, #4
 8003e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e1e:	f1c1 0620 	rsb	r6, r1, #32
 8003e22:	f1a1 0020 	sub.w	r0, r1, #32
 8003e26:	fa22 f401 	lsr.w	r4, r2, r1
 8003e2a:	fa03 f606 	lsl.w	r6, r3, r6
 8003e2e:	4334      	orrs	r4, r6
 8003e30:	fa23 f000 	lsr.w	r0, r3, r0
 8003e34:	4304      	orrs	r4, r0
 8003e36:	fa23 f501 	lsr.w	r5, r3, r1
 8003e3a:	b2a3      	uxth	r3, r4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4660      	mov	r0, ip
 8003e40:	f000 f85a 	bl	8003ef8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e48:	f000 f872 	bl	8003f30 <FLASH_WaitForLastOperation>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_FLASH_Program+0xdc>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4a0c      	ldr	r2, [pc, #48]	@ (8003e88 <HAL_FLASH_Program+0xdc>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003e62:	7dbb      	ldrb	r3, [r7, #22]
 8003e64:	3301      	adds	r3, #1
 8003e66:	75bb      	strb	r3, [r7, #22]
 8003e68:	7dba      	ldrb	r2, [r7, #22]
 8003e6a:	7d7b      	ldrb	r3, [r7, #21]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3cd      	bcc.n	8003e0c <HAL_FLASH_Program+0x60>
 8003e70:	e000      	b.n	8003e74 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003e72:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e74:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <HAL_FLASH_Program+0xd8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	761a      	strb	r2, [r3, #24]

  return status;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	20000778 	.word	0x20000778
 8003e88:	40022000 	.word	0x40022000

08003e8c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_FLASH_Unlock+0x40>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_FLASH_Unlock+0x40>)
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <HAL_FLASH_Unlock+0x44>)
 8003ea6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ea8:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_FLASH_Unlock+0x40>)
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <HAL_FLASH_Unlock+0x48>)
 8003eac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003eae:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <HAL_FLASH_Unlock+0x40>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	45670123 	.word	0x45670123
 8003ed4:	cdef89ab 	.word	0xcdef89ab

08003ed8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <HAL_FLASH_Lock+0x1c>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <HAL_FLASH_Lock+0x1c>)
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40022000 	.word	0x40022000

08003ef8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f04:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <FLASH_Program_HalfWord+0x30>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <FLASH_Program_HalfWord+0x34>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <FLASH_Program_HalfWord+0x34>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	887a      	ldrh	r2, [r7, #2]
 8003f1a:	801a      	strh	r2, [r3, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000778 	.word	0x20000778
 8003f2c:	40022000 	.word	0x40022000

08003f30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff fdfc 	bl	8003b34 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f3e:	e010      	b.n	8003f62 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d00c      	beq.n	8003f62 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <FLASH_WaitForLastOperation+0x2e>
 8003f4e:	f7ff fdf1 	bl	8003b34 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d201      	bcs.n	8003f62 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e025      	b.n	8003fae <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <FLASH_WaitForLastOperation+0x88>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e8      	bne.n	8003f40 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <FLASH_WaitForLastOperation+0x88>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <FLASH_WaitForLastOperation+0x88>)
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f80:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <FLASH_WaitForLastOperation+0x88>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <FLASH_WaitForLastOperation+0x88>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f98:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <FLASH_WaitForLastOperation+0x88>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fa4:	f000 f80a 	bl	8003fbc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40022000 	.word	0x40022000

08003fbc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003fc6:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fd2:	4b21      	ldr	r3, [pc, #132]	@ (8004058 <FLASH_SetErrorCode+0x9c>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	4a1f      	ldr	r2, [pc, #124]	@ (8004058 <FLASH_SetErrorCode+0x9c>)
 8003fdc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f043 0310 	orr.w	r3, r3, #16
 8003fe4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ff2:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <FLASH_SetErrorCode+0x9c>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <FLASH_SetErrorCode+0x9c>)
 8003ffc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f043 0304 	orr.w	r3, r3, #4
 8004004:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004012:	4b11      	ldr	r3, [pc, #68]	@ (8004058 <FLASH_SetErrorCode+0x9c>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	4a0f      	ldr	r2, [pc, #60]	@ (8004058 <FLASH_SetErrorCode+0x9c>)
 800401c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f240 1201 	movw	r2, #257	@ 0x101
 8004030:	4293      	cmp	r3, r2
 8004032:	d106      	bne.n	8004042 <FLASH_SetErrorCode+0x86>
 8004034:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	4a06      	ldr	r2, [pc, #24]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	61d3      	str	r3, [r2, #28]
}  
 8004040:	e002      	b.n	8004048 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004042:	4a04      	ldr	r2, [pc, #16]	@ (8004054 <FLASH_SetErrorCode+0x98>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60d3      	str	r3, [r2, #12]
}  
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000
 8004058:	20000778 	.word	0x20000778

0800405c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800406e:	4b2f      	ldr	r3, [pc, #188]	@ (800412c <HAL_FLASHEx_Erase+0xd0>)
 8004070:	7e1b      	ldrb	r3, [r3, #24]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_FLASHEx_Erase+0x1e>
 8004076:	2302      	movs	r3, #2
 8004078:	e053      	b.n	8004122 <HAL_FLASHEx_Erase+0xc6>
 800407a:	4b2c      	ldr	r3, [pc, #176]	@ (800412c <HAL_FLASHEx_Erase+0xd0>)
 800407c:	2201      	movs	r2, #1
 800407e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d116      	bne.n	80040b6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004088:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800408c:	f7ff ff50 	bl	8003f30 <FLASH_WaitForLastOperation>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d141      	bne.n	800411a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004096:	2001      	movs	r0, #1
 8004098:	f000 f84c 	bl	8004134 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800409c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040a0:	f7ff ff46 	bl	8003f30 <FLASH_WaitForLastOperation>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80040a8:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <HAL_FLASHEx_Erase+0xd4>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <HAL_FLASHEx_Erase+0xd4>)
 80040ae:	f023 0304 	bic.w	r3, r3, #4
 80040b2:	6113      	str	r3, [r2, #16]
 80040b4:	e031      	b.n	800411a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80040b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040ba:	f7ff ff39 	bl	8003f30 <FLASH_WaitForLastOperation>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d12a      	bne.n	800411a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ca:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	e019      	b.n	8004108 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80040d4:	68b8      	ldr	r0, [r7, #8]
 80040d6:	f000 f849 	bl	800416c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040de:	f7ff ff27 	bl	8003f30 <FLASH_WaitForLastOperation>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80040e6:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_FLASHEx_Erase+0xd4>)
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	4a11      	ldr	r2, [pc, #68]	@ (8004130 <HAL_FLASHEx_Erase+0xd4>)
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	601a      	str	r2, [r3, #0]
            break;
 80040fe:	e00c      	b.n	800411a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004106:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	029a      	lsls	r2, r3, #10
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4413      	add	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d3dc      	bcc.n	80040d4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800411a:	4b04      	ldr	r3, [pc, #16]	@ (800412c <HAL_FLASHEx_Erase+0xd0>)
 800411c:	2200      	movs	r2, #0
 800411e:	761a      	strb	r2, [r3, #24]

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000778 	.word	0x20000778
 8004130:	40022000 	.word	0x40022000

08004134 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <FLASH_MassErase+0x30>)
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004142:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <FLASH_MassErase+0x34>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <FLASH_MassErase+0x34>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <FLASH_MassErase+0x34>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	4a05      	ldr	r2, [pc, #20]	@ (8004168 <FLASH_MassErase+0x34>)
 8004154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004158:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000778 	.word	0x20000778
 8004168:	40022000 	.word	0x40022000

0800416c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <FLASH_PageErase+0x38>)
 8004176:	2200      	movs	r2, #0
 8004178:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800417a:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <FLASH_PageErase+0x3c>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <FLASH_PageErase+0x3c>)
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004186:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <FLASH_PageErase+0x3c>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <FLASH_PageErase+0x3c>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a05      	ldr	r2, [pc, #20]	@ (80041a8 <FLASH_PageErase+0x3c>)
 8004192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004196:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000778 	.word	0x20000778
 80041a8:	40022000 	.word	0x40022000

080041ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b08b      	sub	sp, #44	@ 0x2c
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041ba:	2300      	movs	r3, #0
 80041bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041be:	e169      	b.n	8004494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041c0:	2201      	movs	r2, #1
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 8158 	bne.w	800448e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4a9a      	ldr	r2, [pc, #616]	@ (800444c <HAL_GPIO_Init+0x2a0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d05e      	beq.n	80042a6 <HAL_GPIO_Init+0xfa>
 80041e8:	4a98      	ldr	r2, [pc, #608]	@ (800444c <HAL_GPIO_Init+0x2a0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d875      	bhi.n	80042da <HAL_GPIO_Init+0x12e>
 80041ee:	4a98      	ldr	r2, [pc, #608]	@ (8004450 <HAL_GPIO_Init+0x2a4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d058      	beq.n	80042a6 <HAL_GPIO_Init+0xfa>
 80041f4:	4a96      	ldr	r2, [pc, #600]	@ (8004450 <HAL_GPIO_Init+0x2a4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d86f      	bhi.n	80042da <HAL_GPIO_Init+0x12e>
 80041fa:	4a96      	ldr	r2, [pc, #600]	@ (8004454 <HAL_GPIO_Init+0x2a8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d052      	beq.n	80042a6 <HAL_GPIO_Init+0xfa>
 8004200:	4a94      	ldr	r2, [pc, #592]	@ (8004454 <HAL_GPIO_Init+0x2a8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d869      	bhi.n	80042da <HAL_GPIO_Init+0x12e>
 8004206:	4a94      	ldr	r2, [pc, #592]	@ (8004458 <HAL_GPIO_Init+0x2ac>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d04c      	beq.n	80042a6 <HAL_GPIO_Init+0xfa>
 800420c:	4a92      	ldr	r2, [pc, #584]	@ (8004458 <HAL_GPIO_Init+0x2ac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d863      	bhi.n	80042da <HAL_GPIO_Init+0x12e>
 8004212:	4a92      	ldr	r2, [pc, #584]	@ (800445c <HAL_GPIO_Init+0x2b0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d046      	beq.n	80042a6 <HAL_GPIO_Init+0xfa>
 8004218:	4a90      	ldr	r2, [pc, #576]	@ (800445c <HAL_GPIO_Init+0x2b0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d85d      	bhi.n	80042da <HAL_GPIO_Init+0x12e>
 800421e:	2b12      	cmp	r3, #18
 8004220:	d82a      	bhi.n	8004278 <HAL_GPIO_Init+0xcc>
 8004222:	2b12      	cmp	r3, #18
 8004224:	d859      	bhi.n	80042da <HAL_GPIO_Init+0x12e>
 8004226:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <HAL_GPIO_Init+0x80>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	080042a7 	.word	0x080042a7
 8004230:	08004281 	.word	0x08004281
 8004234:	08004293 	.word	0x08004293
 8004238:	080042d5 	.word	0x080042d5
 800423c:	080042db 	.word	0x080042db
 8004240:	080042db 	.word	0x080042db
 8004244:	080042db 	.word	0x080042db
 8004248:	080042db 	.word	0x080042db
 800424c:	080042db 	.word	0x080042db
 8004250:	080042db 	.word	0x080042db
 8004254:	080042db 	.word	0x080042db
 8004258:	080042db 	.word	0x080042db
 800425c:	080042db 	.word	0x080042db
 8004260:	080042db 	.word	0x080042db
 8004264:	080042db 	.word	0x080042db
 8004268:	080042db 	.word	0x080042db
 800426c:	080042db 	.word	0x080042db
 8004270:	08004289 	.word	0x08004289
 8004274:	0800429d 	.word	0x0800429d
 8004278:	4a79      	ldr	r2, [pc, #484]	@ (8004460 <HAL_GPIO_Init+0x2b4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800427e:	e02c      	b.n	80042da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	623b      	str	r3, [r7, #32]
          break;
 8004286:	e029      	b.n	80042dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	3304      	adds	r3, #4
 800428e:	623b      	str	r3, [r7, #32]
          break;
 8004290:	e024      	b.n	80042dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	3308      	adds	r3, #8
 8004298:	623b      	str	r3, [r7, #32]
          break;
 800429a:	e01f      	b.n	80042dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	330c      	adds	r3, #12
 80042a2:	623b      	str	r3, [r7, #32]
          break;
 80042a4:	e01a      	b.n	80042dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042ae:	2304      	movs	r3, #4
 80042b0:	623b      	str	r3, [r7, #32]
          break;
 80042b2:	e013      	b.n	80042dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042bc:	2308      	movs	r3, #8
 80042be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	611a      	str	r2, [r3, #16]
          break;
 80042c6:	e009      	b.n	80042dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042c8:	2308      	movs	r3, #8
 80042ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	615a      	str	r2, [r3, #20]
          break;
 80042d2:	e003      	b.n	80042dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042d4:	2300      	movs	r3, #0
 80042d6:	623b      	str	r3, [r7, #32]
          break;
 80042d8:	e000      	b.n	80042dc <HAL_GPIO_Init+0x130>
          break;
 80042da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2bff      	cmp	r3, #255	@ 0xff
 80042e0:	d801      	bhi.n	80042e6 <HAL_GPIO_Init+0x13a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	e001      	b.n	80042ea <HAL_GPIO_Init+0x13e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2bff      	cmp	r3, #255	@ 0xff
 80042f0:	d802      	bhi.n	80042f8 <HAL_GPIO_Init+0x14c>
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	e002      	b.n	80042fe <HAL_GPIO_Init+0x152>
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	3b08      	subs	r3, #8
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	210f      	movs	r1, #15
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	6a39      	ldr	r1, [r7, #32]
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	431a      	orrs	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80b1 	beq.w	800448e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800432c:	4b4d      	ldr	r3, [pc, #308]	@ (8004464 <HAL_GPIO_Init+0x2b8>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a4c      	ldr	r2, [pc, #304]	@ (8004464 <HAL_GPIO_Init+0x2b8>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b4a      	ldr	r3, [pc, #296]	@ (8004464 <HAL_GPIO_Init+0x2b8>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004344:	4a48      	ldr	r2, [pc, #288]	@ (8004468 <HAL_GPIO_Init+0x2bc>)
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	3302      	adds	r3, #2
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a40      	ldr	r2, [pc, #256]	@ (800446c <HAL_GPIO_Init+0x2c0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_GPIO_Init+0x1ec>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3f      	ldr	r2, [pc, #252]	@ (8004470 <HAL_GPIO_Init+0x2c4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00d      	beq.n	8004394 <HAL_GPIO_Init+0x1e8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3e      	ldr	r2, [pc, #248]	@ (8004474 <HAL_GPIO_Init+0x2c8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d007      	beq.n	8004390 <HAL_GPIO_Init+0x1e4>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a3d      	ldr	r2, [pc, #244]	@ (8004478 <HAL_GPIO_Init+0x2cc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <HAL_GPIO_Init+0x1e0>
 8004388:	2303      	movs	r3, #3
 800438a:	e006      	b.n	800439a <HAL_GPIO_Init+0x1ee>
 800438c:	2304      	movs	r3, #4
 800438e:	e004      	b.n	800439a <HAL_GPIO_Init+0x1ee>
 8004390:	2302      	movs	r3, #2
 8004392:	e002      	b.n	800439a <HAL_GPIO_Init+0x1ee>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_GPIO_Init+0x1ee>
 8004398:	2300      	movs	r3, #0
 800439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439c:	f002 0203 	and.w	r2, r2, #3
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	4093      	lsls	r3, r2
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043aa:	492f      	ldr	r1, [pc, #188]	@ (8004468 <HAL_GPIO_Init+0x2bc>)
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	3302      	adds	r3, #2
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043c4:	4b2d      	ldr	r3, [pc, #180]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	492c      	ldr	r1, [pc, #176]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]
 80043d0:	e006      	b.n	80043e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043d2:	4b2a      	ldr	r3, [pc, #168]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	43db      	mvns	r3, r3
 80043da:	4928      	ldr	r1, [pc, #160]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043dc:	4013      	ands	r3, r2
 80043de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d006      	beq.n	80043fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043ec:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	4922      	ldr	r1, [pc, #136]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60cb      	str	r3, [r1, #12]
 80043f8:	e006      	b.n	8004408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	43db      	mvns	r3, r3
 8004402:	491e      	ldr	r1, [pc, #120]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 8004404:	4013      	ands	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d006      	beq.n	8004422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4918      	ldr	r1, [pc, #96]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
 8004420:	e006      	b.n	8004430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004422:	4b16      	ldr	r3, [pc, #88]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	43db      	mvns	r3, r3
 800442a:	4914      	ldr	r1, [pc, #80]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 800442c:	4013      	ands	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d021      	beq.n	8004480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800443c:	4b0f      	ldr	r3, [pc, #60]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	490e      	ldr	r1, [pc, #56]	@ (800447c <HAL_GPIO_Init+0x2d0>)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	e021      	b.n	800448e <HAL_GPIO_Init+0x2e2>
 800444a:	bf00      	nop
 800444c:	10320000 	.word	0x10320000
 8004450:	10310000 	.word	0x10310000
 8004454:	10220000 	.word	0x10220000
 8004458:	10210000 	.word	0x10210000
 800445c:	10120000 	.word	0x10120000
 8004460:	10110000 	.word	0x10110000
 8004464:	40021000 	.word	0x40021000
 8004468:	40010000 	.word	0x40010000
 800446c:	40010800 	.word	0x40010800
 8004470:	40010c00 	.word	0x40010c00
 8004474:	40011000 	.word	0x40011000
 8004478:	40011400 	.word	0x40011400
 800447c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_GPIO_Init+0x304>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	43db      	mvns	r3, r3
 8004488:	4909      	ldr	r1, [pc, #36]	@ (80044b0 <HAL_GPIO_Init+0x304>)
 800448a:	4013      	ands	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	3301      	adds	r3, #1
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f47f ae8e 	bne.w	80041c0 <HAL_GPIO_Init+0x14>
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	372c      	adds	r7, #44	@ 0x2c
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40010400 	.word	0x40010400

080044b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e001      	b.n	80044d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	807b      	strh	r3, [r7, #2]
 80044ee:	4613      	mov	r3, r2
 80044f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044f2:	787b      	ldrb	r3, [r7, #1]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f8:	887a      	ldrh	r2, [r7, #2]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044fe:	e003      	b.n	8004508 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	041a      	lsls	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	611a      	str	r2, [r3, #16]
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
	...

08004514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e12b      	b.n	800477e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe ffcc 	bl	80034d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	@ 0x24
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004578:	f002 fd9e 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 800457c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a81      	ldr	r2, [pc, #516]	@ (8004788 <HAL_I2C_Init+0x274>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d807      	bhi.n	8004598 <HAL_I2C_Init+0x84>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a80      	ldr	r2, [pc, #512]	@ (800478c <HAL_I2C_Init+0x278>)
 800458c:	4293      	cmp	r3, r2
 800458e:	bf94      	ite	ls
 8004590:	2301      	movls	r3, #1
 8004592:	2300      	movhi	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e006      	b.n	80045a6 <HAL_I2C_Init+0x92>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a7d      	ldr	r2, [pc, #500]	@ (8004790 <HAL_I2C_Init+0x27c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	bf94      	ite	ls
 80045a0:	2301      	movls	r3, #1
 80045a2:	2300      	movhi	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0e7      	b.n	800477e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a78      	ldr	r2, [pc, #480]	@ (8004794 <HAL_I2C_Init+0x280>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0c9b      	lsrs	r3, r3, #18
 80045b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004788 <HAL_I2C_Init+0x274>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d802      	bhi.n	80045e8 <HAL_I2C_Init+0xd4>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3301      	adds	r3, #1
 80045e6:	e009      	b.n	80045fc <HAL_I2C_Init+0xe8>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	4a69      	ldr	r2, [pc, #420]	@ (8004798 <HAL_I2C_Init+0x284>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	3301      	adds	r3, #1
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	430b      	orrs	r3, r1
 8004602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800460e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	495c      	ldr	r1, [pc, #368]	@ (8004788 <HAL_I2C_Init+0x274>)
 8004618:	428b      	cmp	r3, r1
 800461a:	d819      	bhi.n	8004650 <HAL_I2C_Init+0x13c>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1e59      	subs	r1, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fbb1 f3f3 	udiv	r3, r1, r3
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004630:	400b      	ands	r3, r1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_I2C_Init+0x138>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1e59      	subs	r1, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fbb1 f3f3 	udiv	r3, r1, r3
 8004644:	3301      	adds	r3, #1
 8004646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464a:	e051      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 800464c:	2304      	movs	r3, #4
 800464e:	e04f      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d111      	bne.n	800467c <HAL_I2C_Init+0x168>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1e58      	subs	r0, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	440b      	add	r3, r1
 8004666:	fbb0 f3f3 	udiv	r3, r0, r3
 800466a:	3301      	adds	r3, #1
 800466c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e012      	b.n	80046a2 <HAL_I2C_Init+0x18e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1e58      	subs	r0, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	0099      	lsls	r1, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Init+0x196>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e022      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10e      	bne.n	80046d0 <HAL_I2C_Init+0x1bc>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1e58      	subs	r0, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	440b      	add	r3, r1
 80046c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ce:	e00f      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	0099      	lsls	r1, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	6809      	ldr	r1, [r1, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800471e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6911      	ldr	r1, [r2, #16]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	4311      	orrs	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	430b      	orrs	r3, r1
 8004732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	000186a0 	.word	0x000186a0
 800478c:	001e847f 	.word	0x001e847f
 8004790:	003d08ff 	.word	0x003d08ff
 8004794:	431bde83 	.word	0x431bde83
 8004798:	10624dd3 	.word	0x10624dd3

0800479c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	461a      	mov	r2, r3
 80047a8:	460b      	mov	r3, r1
 80047aa:	817b      	strh	r3, [r7, #10]
 80047ac:	4613      	mov	r3, r2
 80047ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b0:	f7ff f9c0 	bl	8003b34 <HAL_GetTick>
 80047b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b20      	cmp	r3, #32
 80047c0:	f040 80e0 	bne.w	8004984 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2319      	movs	r3, #25
 80047ca:	2201      	movs	r2, #1
 80047cc:	4970      	ldr	r1, [pc, #448]	@ (8004990 <HAL_I2C_Master_Transmit+0x1f4>)
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f964 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
 80047dc:	e0d3      	b.n	8004986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_I2C_Master_Transmit+0x50>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e0cc      	b.n	8004986 <HAL_I2C_Master_Transmit+0x1ea>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d007      	beq.n	8004812 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2221      	movs	r2, #33	@ 0x21
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2210      	movs	r2, #16
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	893a      	ldrh	r2, [r7, #8]
 8004842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a50      	ldr	r2, [pc, #320]	@ (8004994 <HAL_I2C_Master_Transmit+0x1f8>)
 8004852:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004854:	8979      	ldrh	r1, [r7, #10]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f89c 	bl	8004998 <I2C_MasterRequestWrite>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e08d      	b.n	8004986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004880:	e066      	b.n	8004950 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	6a39      	ldr	r1, [r7, #32]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa22 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2b04      	cmp	r3, #4
 8004898:	d107      	bne.n	80048aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e06b      	b.n	8004986 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d11b      	bne.n	8004924 <HAL_I2C_Master_Transmit+0x188>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d017      	beq.n	8004924 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	6a39      	ldr	r1, [r7, #32]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fa19 	bl	8004d60 <I2C_WaitOnBTFFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	2b04      	cmp	r3, #4
 800493a:	d107      	bne.n	800494c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e01a      	b.n	8004986 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d194      	bne.n	8004882 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	00100002 	.word	0x00100002
 8004994:	ffff0000 	.word	0xffff0000

08004998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	460b      	mov	r3, r1
 80049a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d006      	beq.n	80049c2 <I2C_MasterRequestWrite+0x2a>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d003      	beq.n	80049c2 <I2C_MasterRequestWrite+0x2a>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049c0:	d108      	bne.n	80049d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e00b      	b.n	80049ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	2b12      	cmp	r3, #18
 80049da:	d107      	bne.n	80049ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f84f 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a12:	d103      	bne.n	8004a1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e035      	b.n	8004a8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a38:	611a      	str	r2, [r3, #16]
 8004a3a:	e01b      	b.n	8004a74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a3c:	897b      	ldrh	r3, [r7, #10]
 8004a3e:	11db      	asrs	r3, r3, #7
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0306 	and.w	r3, r3, #6
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f063 030f 	orn	r3, r3, #15
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	490e      	ldr	r1, [pc, #56]	@ (8004a94 <I2C_MasterRequestWrite+0xfc>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f898 	bl	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e010      	b.n	8004a8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4907      	ldr	r1, [pc, #28]	@ (8004a98 <I2C_MasterRequestWrite+0x100>)
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f888 	bl	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	00010008 	.word	0x00010008
 8004a98:	00010002 	.word	0x00010002

08004a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aac:	e048      	b.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d044      	beq.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7ff f83d 	bl	8003b34 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d139      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10d      	bne.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	43da      	mvns	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	e00c      	b.n	8004b0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	43da      	mvns	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d116      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e023      	b.n	8004b88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10d      	bne.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	e00c      	b.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d093      	beq.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b9e:	e071      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bae:	d123      	bne.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e067      	b.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d041      	beq.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7fe ff98 	bl	8003b34 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d302      	bcc.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d136      	bne.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10c      	bne.n	8004c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	43da      	mvns	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e00b      	b.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e021      	b.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10c      	bne.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	43da      	mvns	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e00b      	b.n	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	2300      	moveq	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f af6d 	bne.w	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cdc:	e034      	b.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f886 	bl	8004df0 <I2C_IsAcknowledgeFailed>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e034      	b.n	8004d58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d028      	beq.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fe ff1d 	bl	8003b34 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11d      	bne.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d016      	beq.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e007      	b.n	8004d58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d52:	2b80      	cmp	r3, #128	@ 0x80
 8004d54:	d1c3      	bne.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6c:	e034      	b.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f83e 	bl	8004df0 <I2C_IsAcknowledgeFailed>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e034      	b.n	8004de8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d028      	beq.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fe fed5 	bl	8003b34 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11d      	bne.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d016      	beq.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e007      	b.n	8004de8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d1c3      	bne.n	8004d6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e06:	d11b      	bne.n	8004e40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0e8      	b.n	8005030 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f007 fff0 	bl	800ce58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f003 fe51 	bl	8008b32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e9a:	f003 fe27 	bl	8008aec <USB_CoreInit>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0bf      	b.n	8005030 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f003 fe55 	bl	8008b66 <USB_SetCurrentMode>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0b0      	b.n	8005030 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	e03e      	b.n	8004f52 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ed4:	7bfa      	ldrb	r2, [r7, #15]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3311      	adds	r3, #17
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ee8:	7bfa      	ldrb	r2, [r7, #15]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004efc:	7bfa      	ldrb	r2, [r7, #15]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	3313      	adds	r3, #19
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3320      	adds	r3, #32
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f24:	7bfa      	ldrb	r2, [r7, #15]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	440b      	add	r3, r1
 8004f32:	3324      	adds	r3, #36	@ 0x24
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	440b      	add	r3, r1
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d3bb      	bcc.n	8004ed4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e044      	b.n	8004fec <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f62:	7bfa      	ldrb	r2, [r7, #15]
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	440b      	add	r3, r1
 8004f86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f8a:	7bfa      	ldrb	r2, [r7, #15]
 8004f8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	440b      	add	r3, r1
 8004fb2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	440b      	add	r3, r1
 8004fde:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	791b      	ldrb	r3, [r3, #4]
 8004ff0:	7bfa      	ldrb	r2, [r7, #15]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d3b5      	bcc.n	8004f62 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005000:	f003 fdbd 	bl	8008b7e <USB_DevInit>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e00c      	b.n	8005030 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f006 f83c 	bl	800b0a6 <USB_DevDisconnect>

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_PCD_Start+0x16>
 800504a:	2302      	movs	r3, #2
 800504c:	e016      	b.n	800507c <HAL_PCD_Start+0x44>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f003 fd53 	bl	8008b06 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005060:	2101      	movs	r1, #1
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f008 f96b 	bl	800d33e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f006 f810 	bl	800b092 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f006 f812 	bl	800b0ba <USB_ReadInterrupts>
 8005096:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fb1a 	bl	80056dc <PCD_EP_ISR_Handler>

    return;
 80050a8:	e119      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c6:	b292      	uxth	r2, r2
 80050c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f007 ff3e 	bl	800cf4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80050d2:	2100      	movs	r1, #0
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f905 	bl	80052e4 <HAL_PCD_SetAddress>

    return;
 80050da:	e100      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050f8:	b292      	uxth	r2, r2
 80050fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050fe:	e0ee      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005112:	b29a      	uxth	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800511c:	b292      	uxth	r2, r2
 800511e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005122:	e0dc      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d027      	beq.n	800517e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0204 	bic.w	r2, r2, #4
 8005140:	b292      	uxth	r2, r2
 8005142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0208 	bic.w	r2, r2, #8
 8005158:	b292      	uxth	r2, r2
 800515a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f007 ff2e 	bl	800cfc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005176:	b292      	uxth	r2, r2
 8005178:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800517c:	e0af      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8083 	beq.w	8005290 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e010      	b.n	80051b2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	7ffb      	ldrb	r3, [r7, #31]
 800519e:	8812      	ldrh	r2, [r2, #0]
 80051a0:	b292      	uxth	r2, r2
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	3320      	adds	r3, #32
 80051a6:	443b      	add	r3, r7
 80051a8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80051ac:	7ffb      	ldrb	r3, [r7, #31]
 80051ae:	3301      	adds	r3, #1
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b07      	cmp	r3, #7
 80051b6:	d9eb      	bls.n	8005190 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	b292      	uxth	r2, r2
 80051cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051d8:	b29a      	uxth	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	b292      	uxth	r2, r2
 80051e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80051e8:	bf00      	nop
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f6      	beq.n	80051ea <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520e:	b292      	uxth	r2, r2
 8005210:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005214:	2300      	movs	r3, #0
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e00f      	b.n	800523a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800521a:	7ffb      	ldrb	r3, [r7, #31]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	4611      	mov	r1, r2
 8005222:	7ffa      	ldrb	r2, [r7, #31]
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	440a      	add	r2, r1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	3320      	adds	r3, #32
 800522c:	443b      	add	r3, r7
 800522e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005232:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	3301      	adds	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	2b07      	cmp	r3, #7
 800523e:	d9ec      	bls.n	800521a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	b292      	uxth	r2, r2
 8005254:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800526a:	b292      	uxth	r2, r2
 800526c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0204 	orr.w	r2, r2, #4
 8005282:	b292      	uxth	r2, r2
 8005284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f007 fe7f 	bl	800cf8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800528e:	e026      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00f      	beq.n	80052ba <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052ac:	b292      	uxth	r2, r2
 80052ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f007 fe3d 	bl	800cf32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80052b8:	e011      	b.n	80052de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052d6:	b292      	uxth	r2, r2
 80052d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80052dc:	bf00      	nop
  }
}
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_PCD_SetAddress+0x1a>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e012      	b.n	8005324 <HAL_PCD_SetAddress+0x40>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	4611      	mov	r1, r2
 8005314:	4618      	mov	r0, r3
 8005316:	f005 fea9 	bl	800b06c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	4608      	mov	r0, r1
 8005336:	4611      	mov	r1, r2
 8005338:	461a      	mov	r2, r3
 800533a:	4603      	mov	r3, r0
 800533c:	70fb      	strb	r3, [r7, #3]
 800533e:	460b      	mov	r3, r1
 8005340:	803b      	strh	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800534a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800534e:	2b00      	cmp	r3, #0
 8005350:	da0e      	bge.n	8005370 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	f003 0207 	and.w	r2, r3, #7
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	3310      	adds	r3, #16
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	705a      	strb	r2, [r3, #1]
 800536e:	e00e      	b.n	800538e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 0207 	and.w	r2, r3, #7
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	b2da      	uxtb	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800539a:	883a      	ldrh	r2, [r7, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	78ba      	ldrb	r2, [r7, #2]
 80053a4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053a6:	78bb      	ldrb	r3, [r7, #2]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d102      	bne.n	80053b2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_PCD_EP_Open+0x94>
 80053bc:	2302      	movs	r3, #2
 80053be:	e00e      	b.n	80053de <HAL_PCD_EP_Open+0xb2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f003 fbf2 	bl	8008bb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80053dc:	7afb      	ldrb	r3, [r7, #11]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da0e      	bge.n	8005418 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 0207 	and.w	r2, r3, #7
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	3310      	adds	r3, #16
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	705a      	strb	r2, [r3, #1]
 8005416:	e00e      	b.n	8005436 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 0207 	and.w	r2, r3, #7
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_PCD_EP_Close+0x6a>
 800544c:	2302      	movs	r3, #2
 800544e:	e00e      	b.n	800546e <HAL_PCD_EP_Close+0x88>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	4618      	mov	r0, r3
 8005460:	f003 ff6a 	bl	8009338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	460b      	mov	r3, r1
 8005484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005486:	7afb      	ldrb	r3, [r7, #11]
 8005488:	f003 0207 	and.w	r2, r3, #7
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f004 f921 	bl	8009710 <USB_EPStartXfer>

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	440b      	add	r3, r1
 80054f6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80054fa:	681b      	ldr	r3, [r3, #0]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	460b      	mov	r3, r1
 8005514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	f003 0207 	and.w	r2, r3, #7
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3310      	adds	r3, #16
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2201      	movs	r2, #1
 8005550:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	b2da      	uxtb	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6979      	ldr	r1, [r7, #20]
 8005564:	4618      	mov	r0, r3
 8005566:	f004 f8d3 	bl	8009710 <USB_EPStartXfer>

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	7912      	ldrb	r2, [r2, #4]
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e04c      	b.n	800562c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005596:	2b00      	cmp	r3, #0
 8005598:	da0e      	bge.n	80055b8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 0207 	and.w	r2, r3, #7
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	3310      	adds	r3, #16
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4413      	add	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	705a      	strb	r2, [r3, #1]
 80055b6:	e00c      	b.n	80055d2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_PCD_EP_SetStall+0x7e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e01c      	b.n	800562c <HAL_PCD_EP_SetStall+0xb8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	4618      	mov	r0, r3
 8005602:	f005 fc36 	bl	800ae72 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f005 fd5b 	bl	800b0d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	7912      	ldrb	r2, [r2, #4]
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e040      	b.n	80056d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da0e      	bge.n	8005678 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	f003 0207 	and.w	r2, r3, #7
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	3310      	adds	r3, #16
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	705a      	strb	r2, [r3, #1]
 8005676:	e00e      	b.n	8005696 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	f003 0207 	and.w	r2, r3, #7
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_PCD_EP_ClrStall+0x82>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e00e      	b.n	80056d4 <HAL_PCD_EP_ClrStall+0xa0>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f005 fc24 	bl	800af12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b096      	sub	sp, #88	@ 0x58
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056e4:	e3bb      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80056f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005700:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 8175 	bne.w	80059f4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800570a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	d14e      	bne.n	80057b4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	81fb      	strh	r3, [r7, #14]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3310      	adds	r3, #16
 800573e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005748:	b29b      	uxth	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4413      	add	r3, r2
 8005754:	3302      	adds	r3, #2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800576c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	441a      	add	r2, r3
 8005776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005778:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800577a:	2100      	movs	r1, #0
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f007 fbbe 	bl	800cefe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7b5b      	ldrb	r3, [r3, #13]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8368 	beq.w	8005e5e <PCD_EP_ISR_Handler+0x782>
 800578e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 8363 	bne.w	8005e5e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7b5b      	ldrb	r3, [r3, #13]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	735a      	strb	r2, [r3, #13]
 80057b2:	e354      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057ba:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80057c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d034      	beq.n	800583c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	3306      	adds	r3, #6
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800580c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005810:	b29b      	uxth	r3, r3
 8005812:	f005 fcb2 	bl	800b17a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29a      	uxth	r2, r3
 800581e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005822:	4013      	ands	r3, r2
 8005824:	823b      	strh	r3, [r7, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	8a3a      	ldrh	r2, [r7, #16]
 800582c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005830:	b292      	uxth	r2, r2
 8005832:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f007 fb35 	bl	800cea4 <HAL_PCD_SetupStageCallback>
 800583a:	e310      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800583c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005840:	2b00      	cmp	r3, #0
 8005842:	f280 830c 	bge.w	8005e5e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29a      	uxth	r2, r3
 800584e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005852:	4013      	ands	r3, r2
 8005854:	83fb      	strh	r3, [r7, #30]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	8bfa      	ldrh	r2, [r7, #30]
 800585c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005860:	b292      	uxth	r2, r2
 8005862:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4413      	add	r3, r2
 8005878:	3306      	adds	r3, #6
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800588c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d019      	beq.n	80058cc <PCD_EP_ISR_Handler+0x1f0>
 8005898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d015      	beq.n	80058cc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a6:	6959      	ldr	r1, [r3, #20]
 80058a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80058ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f005 fc62 	bl	800b17a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80058b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	441a      	add	r2, r3
 80058c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80058c4:	2100      	movs	r1, #0
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f007 fafe 	bl	800cec8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80058d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f040 82bd 	bne.w	8005e5e <PCD_EP_ISR_Handler+0x782>
 80058e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058e8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80058ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058f0:	f000 82b5 	beq.w	8005e5e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	4413      	add	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800591e:	b29a      	uxth	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b3e      	cmp	r3, #62	@ 0x3e
 800592a:	d91d      	bls.n	8005968 <PCD_EP_ISR_Handler+0x28c>
 800592c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	647b      	str	r3, [r7, #68]	@ 0x44
 8005934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <PCD_EP_ISR_Handler+0x26a>
 8005940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005942:	3b01      	subs	r3, #1
 8005944:	647b      	str	r3, [r7, #68]	@ 0x44
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29a      	uxth	r2, r3
 800594c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800594e:	b29b      	uxth	r3, r3
 8005950:	029b      	lsls	r3, r3, #10
 8005952:	b29b      	uxth	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b29b      	uxth	r3, r3
 8005958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005960:	b29a      	uxth	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e026      	b.n	80059b6 <PCD_EP_ISR_Handler+0x2da>
 8005968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <PCD_EP_ISR_Handler+0x2aa>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597e:	b29a      	uxth	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e017      	b.n	80059b6 <PCD_EP_ISR_Handler+0x2da>
 8005986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	647b      	str	r3, [r7, #68]	@ 0x44
 800598e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <PCD_EP_ISR_Handler+0x2c4>
 800599a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800599c:	3301      	adds	r3, #1
 800599e:	647b      	str	r3, [r7, #68]	@ 0x44
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	029b      	lsls	r3, r3, #10
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	4313      	orrs	r3, r2
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	827b      	strh	r3, [r7, #18]
 80059c8:	8a7b      	ldrh	r3, [r7, #18]
 80059ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059ce:	827b      	strh	r3, [r7, #18]
 80059d0:	8a7b      	ldrh	r3, [r7, #18]
 80059d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059d6:	827b      	strh	r3, [r7, #18]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	8a7b      	ldrh	r3, [r7, #18]
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]
 80059f2:	e234      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f280 80fc 	bge.w	8005c0a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005a28:	4013      	ands	r3, r2
 8005a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005a40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a44:	b292      	uxth	r2, r2
 8005a46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005a48:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a60:	7b1b      	ldrb	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d125      	bne.n	8005ab2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	3306      	adds	r3, #6
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8092 	beq.w	8005bc0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa2:	6959      	ldr	r1, [r3, #20]
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa6:	88da      	ldrh	r2, [r3, #6]
 8005aa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005aac:	f005 fb65 	bl	800b17a <USB_ReadPMA>
 8005ab0:	e086      	b.n	8005bc0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab4:	78db      	ldrb	r3, [r3, #3]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d10a      	bne.n	8005ad0 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005aba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9d9 	bl	8005e7a <HAL_PCD_EP_DB_Receive>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005ace:	e077      	b.n	8005bc0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d024      	beq.n	8005b78 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4413      	add	r3, r2
 8005b42:	3302      	adds	r3, #2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02e      	beq.n	8005bc0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b68:	6959      	ldr	r1, [r3, #20]
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6c:	891a      	ldrh	r2, [r3, #8]
 8005b6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b72:	f005 fb02 	bl	800b17a <USB_ReadPMA>
 8005b76:	e023      	b.n	8005bc0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3306      	adds	r3, #6
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005ba4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb2:	6959      	ldr	r1, [r3, #20]
 8005bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb6:	895a      	ldrh	r2, [r3, #10]
 8005bb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005bbc:	f005 fadd 	bl	800b17a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005bc8:	441a      	add	r2, r3
 8005bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005bd6:	441a      	add	r2, r3
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <PCD_EP_ISR_Handler+0x514>
 8005be4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d206      	bcs.n	8005bfe <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f007 f966 	bl	800cec8 <HAL_PCD_DataOutStageCallback>
 8005bfc:	e005      	b.n	8005c0a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c04:	4618      	mov	r0, r3
 8005c06:	f003 fd83 	bl	8009710 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8123 	beq.w	8005e5e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c18:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	3310      	adds	r3, #16
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6a:	78db      	ldrb	r3, [r3, #3]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	f040 80a2 	bne.w	8005db6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c74:	2200      	movs	r2, #0
 8005c76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8093 	beq.w	8005da8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d046      	beq.n	8005d1c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d126      	bne.n	8005ce4 <PCD_EP_ISR_Handler+0x608>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	4413      	add	r3, r2
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	011a      	lsls	r2, r3, #4
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	e061      	b.n	8005da8 <PCD_EP_ISR_Handler+0x6cc>
 8005ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d15d      	bne.n	8005da8 <PCD_EP_ISR_Handler+0x6cc>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	4413      	add	r3, r2
 8005d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	011a      	lsls	r2, r3, #4
 8005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e045      	b.n	8005da8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d126      	bne.n	8005d78 <PCD_EP_ISR_Handler+0x69c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	4413      	add	r3, r2
 8005d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	011a      	lsls	r2, r3, #4
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e017      	b.n	8005da8 <PCD_EP_ISR_Handler+0x6cc>
 8005d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d113      	bne.n	8005da8 <PCD_EP_ISR_Handler+0x6cc>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8e:	4413      	add	r3, r2
 8005d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	011a      	lsls	r2, r3, #4
 8005d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005da0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2200      	movs	r2, #0
 8005da6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f007 f8a5 	bl	800cefe <HAL_PCD_DataInStageCallback>
 8005db4:	e053      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005db6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d146      	bne.n	8005e50 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d907      	bls.n	8005e0a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8005dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e06:	619a      	str	r2, [r3, #24]
 8005e08:	e002      	b.n	8005e10 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f007 f86d 	bl	800cefe <HAL_PCD_DataInStageCallback>
 8005e24:	e01b      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005e2e:	441a      	add	r2, r3
 8005e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e32:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005e3c:	441a      	add	r2, r3
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f003 fc61 	bl	8009710 <USB_EPStartXfer>
 8005e4e:	e006      	b.n	8005e5e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e54:	461a      	mov	r2, r3
 8005e56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f91b 	bl	8006094 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f6ff ac3b 	blt.w	80056e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3758      	adds	r7, #88	@ 0x58
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d07e      	beq.n	8005f90 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	8b7b      	ldrh	r3, [r7, #26]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d306      	bcc.n	8005ed4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	8b7b      	ldrh	r3, [r7, #26]
 8005ecc:	1ad2      	subs	r2, r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	619a      	str	r2, [r3, #24]
 8005ed2:	e002      	b.n	8005eda <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d123      	bne.n	8005f2a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efc:	833b      	strh	r3, [r7, #24]
 8005efe:	8b3b      	ldrh	r3, [r7, #24]
 8005f00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f04:	833b      	strh	r3, [r7, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	8b3b      	ldrh	r3, [r7, #24]
 8005f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01f      	beq.n	8005f74 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4e:	82fb      	strh	r3, [r7, #22]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f74:	8b7b      	ldrh	r3, [r7, #26]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8087 	beq.w	800608a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6959      	ldr	r1, [r3, #20]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	891a      	ldrh	r2, [r3, #8]
 8005f88:	8b7b      	ldrh	r3, [r7, #26]
 8005f8a:	f005 f8f6 	bl	800b17a <USB_ReadPMA>
 8005f8e:	e07c      	b.n	800608a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3306      	adds	r3, #6
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	8b7b      	ldrh	r3, [r7, #26]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d306      	bcc.n	8005fd2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	8b7b      	ldrh	r3, [r7, #26]
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	619a      	str	r2, [r3, #24]
 8005fd0:	e002      	b.n	8005fd8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d123      	bne.n	8006028 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	83fb      	strh	r3, [r7, #30]
 8005ffc:	8bfb      	ldrh	r3, [r7, #30]
 8005ffe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006002:	83fb      	strh	r3, [r7, #30]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	461a      	mov	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8bfb      	ldrh	r3, [r7, #30]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11f      	bne.n	8006072 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604c:	83bb      	strh	r3, [r7, #28]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	441a      	add	r2, r3
 800605c:	8bbb      	ldrh	r3, [r7, #28]
 800605e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800606a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800606e:	b29b      	uxth	r3, r3
 8006070:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6959      	ldr	r1, [r3, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	895a      	ldrh	r2, [r3, #10]
 8006084:	8b7b      	ldrh	r3, [r7, #26]
 8006086:	f005 f878 	bl	800b17a <USB_ReadPMA>
    }
  }

  return count;
 800608a:	8b7b      	ldrh	r3, [r7, #26]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b0a4      	sub	sp, #144	@ 0x90
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 81dd 	beq.w	8006468 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	3302      	adds	r3, #2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d907      	bls.n	80060f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	619a      	str	r2, [r3, #24]
 80060f4:	e002      	b.n	80060fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 80b9 	bne.w	8006278 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d126      	bne.n	800615c <HAL_PCD_EP_DB_Transmit+0xc8>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611c:	b29b      	uxth	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006122:	4413      	add	r3, r2
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	011a      	lsls	r2, r3, #4
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	4413      	add	r3, r2
 8006130:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006140:	b29a      	uxth	r2, r3
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006154:	b29a      	uxth	r2, r3
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	e01a      	b.n	8006192 <HAL_PCD_EP_DB_Transmit+0xfe>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d116      	bne.n	8006192 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006172:	b29b      	uxth	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006178:	4413      	add	r3, r2
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	011a      	lsls	r2, r3, #4
 8006182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006184:	4413      	add	r3, r2
 8006186:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800618a:	633b      	str	r3, [r7, #48]	@ 0x30
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	2200      	movs	r2, #0
 8006190:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d126      	bne.n	80061ee <HAL_PCD_EP_DB_Transmit+0x15a>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	011a      	lsls	r2, r3, #4
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	e017      	b.n	800621e <HAL_PCD_EP_DB_Transmit+0x18a>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d113      	bne.n	800621e <HAL_PCD_EP_DB_Transmit+0x18a>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	4413      	add	r3, r2
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	4413      	add	r3, r2
 8006212:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	2200      	movs	r2, #0
 800621c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f006 fe6a 	bl	800cefe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 82fc 	beq.w	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006250:	82fb      	strh	r3, [r7, #22]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8afb      	ldrh	r3, [r7, #22]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
 8006276:	e2da      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d021      	beq.n	80062c6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	f040 82ae 	bne.w	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062da:	441a      	add	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062e8:	441a      	add	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d30b      	bcc.n	8006312 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	621a      	str	r2, [r3, #32]
 8006310:	e017      	b.n	8006342 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d108      	bne.n	800632c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800631a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800631e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800632a:	e00a      	b.n	8006342 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d165      	bne.n	8006416 <HAL_PCD_EP_DB_Transmit+0x382>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635e:	4413      	add	r3, r2
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	011a      	lsls	r2, r3, #4
 8006368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636a:	4413      	add	r3, r2
 800636c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637c:	b29a      	uxth	r2, r3
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006386:	2b3e      	cmp	r3, #62	@ 0x3e
 8006388:	d91d      	bls.n	80063c6 <HAL_PCD_EP_DB_Transmit+0x332>
 800638a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <HAL_PCD_EP_DB_Transmit+0x310>
 800639e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063a0:	3b01      	subs	r3, #1
 80063a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	029b      	lsls	r3, r3, #10
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063be:	b29a      	uxth	r2, r3
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e044      	b.n	8006450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80063c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x350>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e035      	b.n	8006450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80063e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_PCD_EP_DB_Transmit+0x36a>
 80063f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fa:	3301      	adds	r3, #1
 80063fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29a      	uxth	r2, r3
 8006404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006406:	b29b      	uxth	r3, r3
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	b29b      	uxth	r3, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	b29a      	uxth	r2, r3
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e01c      	b.n	8006450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d118      	bne.n	8006450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	647b      	str	r3, [r7, #68]	@ 0x44
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006432:	4413      	add	r3, r2
 8006434:	647b      	str	r3, [r7, #68]	@ 0x44
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	011a      	lsls	r2, r3, #4
 800643c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643e:	4413      	add	r3, r2
 8006440:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006444:	643b      	str	r3, [r7, #64]	@ 0x40
 8006446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800644a:	b29a      	uxth	r2, r3
 800644c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6959      	ldr	r1, [r3, #20]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	891a      	ldrh	r2, [r3, #8]
 800645c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006460:	b29b      	uxth	r3, r3
 8006462:	f004 fe44 	bl	800b0ee <USB_WritePMA>
 8006466:	e1e2      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	3306      	adds	r3, #6
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006490:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800649c:	429a      	cmp	r2, r3
 800649e:	d307      	bcc.n	80064b0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064a8:	1ad2      	subs	r2, r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	619a      	str	r2, [r3, #24]
 80064ae:	e002      	b.n	80064b6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 80c0 	bne.w	8006640 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d126      	bne.n	8006516 <HAL_PCD_EP_DB_Transmit+0x482>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064dc:	4413      	add	r3, r2
 80064de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650e:	b29a      	uxth	r2, r3
 8006510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	e01a      	b.n	800654c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d116      	bne.n	800654c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	667b      	str	r3, [r7, #100]	@ 0x64
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006532:	4413      	add	r3, r2
 8006534:	667b      	str	r3, [r7, #100]	@ 0x64
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	011a      	lsls	r2, r3, #4
 800653c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653e:	4413      	add	r3, r2
 8006540:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006544:	663b      	str	r3, [r7, #96]	@ 0x60
 8006546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006548:	2200      	movs	r2, #0
 800654a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	677b      	str	r3, [r7, #116]	@ 0x74
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d12b      	bne.n	80065b2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006568:	b29b      	uxth	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800656e:	4413      	add	r3, r2
 8006570:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011a      	lsls	r2, r3, #4
 8006578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800657a:	4413      	add	r3, r2
 800657c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	e017      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d113      	bne.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065c8:	4413      	add	r3, r2
 80065ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065d4:	4413      	add	r3, r2
 80065d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065da:	673b      	str	r3, [r7, #112]	@ 0x70
 80065dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065de:	2200      	movs	r2, #0
 80065e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f006 fc88 	bl	800cefe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 811a 	bne.w	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006614:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]
 800663e:	e0f6      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d121      	bne.n	800668e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006664:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006682:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006694:	2b01      	cmp	r3, #1
 8006696:	f040 80ca 	bne.w	800682e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80066a2:	441a      	add	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80066b0:	441a      	add	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d30b      	bcc.n	80066da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d2:	1ad2      	subs	r2, r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	621a      	str	r2, [r3, #32]
 80066d8:	e017      	b.n	800670a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80066e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80066e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80066f2:	e00a      	b.n	800670a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d165      	bne.n	80067e4 <HAL_PCD_EP_DB_Transmit+0x750>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800672c:	4413      	add	r3, r2
 800672e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006738:	4413      	add	r3, r2
 800673a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800673e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800674a:	b29a      	uxth	r2, r3
 800674c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006754:	2b3e      	cmp	r3, #62	@ 0x3e
 8006756:	d91d      	bls.n	8006794 <HAL_PCD_EP_DB_Transmit+0x700>
 8006758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <HAL_PCD_EP_DB_Transmit+0x6de>
 800676c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800676e:	3b01      	subs	r3, #1
 8006770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29a      	uxth	r2, r3
 8006778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678c:	b29a      	uxth	r2, r3
 800678e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	e041      	b.n	8006818 <HAL_PCD_EP_DB_Transmit+0x784>
 8006794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800679c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e032      	b.n	8006818 <HAL_PCD_EP_DB_Transmit+0x784>
 80067b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_PCD_EP_DB_Transmit+0x738>
 80067c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c8:	3301      	adds	r3, #1
 80067ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e019      	b.n	8006818 <HAL_PCD_EP_DB_Transmit+0x784>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d115      	bne.n	8006818 <HAL_PCD_EP_DB_Transmit+0x784>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fa:	4413      	add	r3, r2
 80067fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	011a      	lsls	r2, r3, #4
 8006804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800680c:	653b      	str	r3, [r7, #80]	@ 0x50
 800680e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006812:	b29a      	uxth	r2, r3
 8006814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006816:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6959      	ldr	r1, [r3, #20]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	895a      	ldrh	r2, [r3, #10]
 8006824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006828:	b29b      	uxth	r3, r3
 800682a:	f004 fc60 	bl	800b0ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006848:	82bb      	strh	r3, [r7, #20]
 800684a:	8abb      	ldrh	r3, [r7, #20]
 800684c:	f083 0310 	eor.w	r3, r3, #16
 8006850:	82bb      	strh	r3, [r7, #20]
 8006852:	8abb      	ldrh	r3, [r7, #20]
 8006854:	f083 0320 	eor.w	r3, r3, #32
 8006858:	82bb      	strh	r3, [r7, #20]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	8abb      	ldrh	r3, [r7, #20]
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3790      	adds	r7, #144	@ 0x90
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	817b      	strh	r3, [r7, #10]
 8006896:	4613      	mov	r3, r2
 8006898:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800689a:	897b      	ldrh	r3, [r7, #10]
 800689c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068a6:	897b      	ldrh	r3, [r7, #10]
 80068a8:	f003 0207 	and.w	r2, r3, #7
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	3310      	adds	r3, #16
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e009      	b.n	80068d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068be:	897a      	ldrh	r2, [r7, #10]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80068d2:	893b      	ldrh	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	80da      	strh	r2, [r3, #6]
 80068e6:	e00b      	b.n	8006900 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2201      	movs	r2, #1
 80068ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006910:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	420e0020 	.word	0x420e0020

08006924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e272      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8087 	beq.w	8006a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006944:	4b92      	ldr	r3, [pc, #584]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f003 030c 	and.w	r3, r3, #12
 800694c:	2b04      	cmp	r3, #4
 800694e:	d00c      	beq.n	800696a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006950:	4b8f      	ldr	r3, [pc, #572]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	2b08      	cmp	r3, #8
 800695a:	d112      	bne.n	8006982 <HAL_RCC_OscConfig+0x5e>
 800695c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d10b      	bne.n	8006982 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696a:	4b89      	ldr	r3, [pc, #548]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d06c      	beq.n	8006a50 <HAL_RCC_OscConfig+0x12c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d168      	bne.n	8006a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e24c      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698a:	d106      	bne.n	800699a <HAL_RCC_OscConfig+0x76>
 800698c:	4b80      	ldr	r3, [pc, #512]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a7f      	ldr	r2, [pc, #508]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e02e      	b.n	80069f8 <HAL_RCC_OscConfig+0xd4>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10c      	bne.n	80069bc <HAL_RCC_OscConfig+0x98>
 80069a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a7a      	ldr	r2, [pc, #488]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4b78      	ldr	r3, [pc, #480]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a77      	ldr	r2, [pc, #476]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e01d      	b.n	80069f8 <HAL_RCC_OscConfig+0xd4>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069c4:	d10c      	bne.n	80069e0 <HAL_RCC_OscConfig+0xbc>
 80069c6:	4b72      	ldr	r3, [pc, #456]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a71      	ldr	r2, [pc, #452]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e00b      	b.n	80069f8 <HAL_RCC_OscConfig+0xd4>
 80069e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4b68      	ldr	r3, [pc, #416]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a67      	ldr	r2, [pc, #412]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 80069f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d013      	beq.n	8006a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a00:	f7fd f898 	bl	8003b34 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a08:	f7fd f894 	bl	8003b34 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b64      	cmp	r3, #100	@ 0x64
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e200      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0xe4>
 8006a26:	e014      	b.n	8006a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fd f884 	bl	8003b34 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a30:	f7fd f880 	bl	8003b34 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	@ 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e1ec      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a42:	4b53      	ldr	r3, [pc, #332]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x10c>
 8006a4e:	e000      	b.n	8006a52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d063      	beq.n	8006b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a6a:	4b49      	ldr	r3, [pc, #292]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d11c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x18c>
 8006a76:	4b46      	ldr	r3, [pc, #280]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d116      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a82:	4b43      	ldr	r3, [pc, #268]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_RCC_OscConfig+0x176>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d001      	beq.n	8006a9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e1c0      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	4939      	ldr	r1, [pc, #228]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aae:	e03a      	b.n	8006b26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d020      	beq.n	8006afa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab8:	4b36      	ldr	r3, [pc, #216]	@ (8006b94 <HAL_RCC_OscConfig+0x270>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abe:	f7fd f839 	bl	8003b34 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac6:	f7fd f835 	bl	8003b34 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e1a1      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4927      	ldr	r1, [pc, #156]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]
 8006af8:	e015      	b.n	8006b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006afa:	4b26      	ldr	r3, [pc, #152]	@ (8006b94 <HAL_RCC_OscConfig+0x270>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b00:	f7fd f818 	bl	8003b34 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b08:	f7fd f814 	bl	8003b34 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e180      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d03a      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d019      	beq.n	8006b6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b3a:	4b17      	ldr	r3, [pc, #92]	@ (8006b98 <HAL_RCC_OscConfig+0x274>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b40:	f7fc fff8 	bl	8003b34 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b48:	f7fc fff4 	bl	8003b34 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e160      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b66:	2001      	movs	r0, #1
 8006b68:	f000 face 	bl	8007108 <RCC_Delay>
 8006b6c:	e01c      	b.n	8006ba8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b98 <HAL_RCC_OscConfig+0x274>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b74:	f7fc ffde 	bl	8003b34 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b7a:	e00f      	b.n	8006b9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7c:	f7fc ffda 	bl	8003b34 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d908      	bls.n	8006b9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e146      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
 8006b8e:	bf00      	nop
 8006b90:	40021000 	.word	0x40021000
 8006b94:	42420000 	.word	0x42420000
 8006b98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b9c:	4b92      	ldr	r3, [pc, #584]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e9      	bne.n	8006b7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80a6 	beq.w	8006d02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bba:	4b8b      	ldr	r3, [pc, #556]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10d      	bne.n	8006be2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc6:	4b88      	ldr	r3, [pc, #544]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	4a87      	ldr	r2, [pc, #540]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bd0:	61d3      	str	r3, [r2, #28]
 8006bd2:	4b85      	ldr	r3, [pc, #532]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bde:	2301      	movs	r3, #1
 8006be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be2:	4b82      	ldr	r3, [pc, #520]	@ (8006dec <HAL_RCC_OscConfig+0x4c8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d118      	bne.n	8006c20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bee:	4b7f      	ldr	r3, [pc, #508]	@ (8006dec <HAL_RCC_OscConfig+0x4c8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8006dec <HAL_RCC_OscConfig+0x4c8>)
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bfa:	f7fc ff9b 	bl	8003b34 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c02:	f7fc ff97 	bl	8003b34 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b64      	cmp	r3, #100	@ 0x64
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e103      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c14:	4b75      	ldr	r3, [pc, #468]	@ (8006dec <HAL_RCC_OscConfig+0x4c8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d106      	bne.n	8006c36 <HAL_RCC_OscConfig+0x312>
 8006c28:	4b6f      	ldr	r3, [pc, #444]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	6213      	str	r3, [r2, #32]
 8006c34:	e02d      	b.n	8006c92 <HAL_RCC_OscConfig+0x36e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RCC_OscConfig+0x334>
 8006c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	4a69      	ldr	r2, [pc, #420]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	6213      	str	r3, [r2, #32]
 8006c4a:	4b67      	ldr	r3, [pc, #412]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	4a66      	ldr	r2, [pc, #408]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	f023 0304 	bic.w	r3, r3, #4
 8006c54:	6213      	str	r3, [r2, #32]
 8006c56:	e01c      	b.n	8006c92 <HAL_RCC_OscConfig+0x36e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b05      	cmp	r3, #5
 8006c5e:	d10c      	bne.n	8006c7a <HAL_RCC_OscConfig+0x356>
 8006c60:	4b61      	ldr	r3, [pc, #388]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	4a60      	ldr	r2, [pc, #384]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c66:	f043 0304 	orr.w	r3, r3, #4
 8006c6a:	6213      	str	r3, [r2, #32]
 8006c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4a5d      	ldr	r2, [pc, #372]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	6213      	str	r3, [r2, #32]
 8006c78:	e00b      	b.n	8006c92 <HAL_RCC_OscConfig+0x36e>
 8006c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	6213      	str	r3, [r2, #32]
 8006c86:	4b58      	ldr	r3, [pc, #352]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	4a57      	ldr	r2, [pc, #348]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006c8c:	f023 0304 	bic.w	r3, r3, #4
 8006c90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d015      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9a:	f7fc ff4b 	bl	8003b34 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca0:	e00a      	b.n	8006cb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca2:	f7fc ff47 	bl	8003b34 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e0b1      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0ee      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x37e>
 8006cc4:	e014      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc6:	f7fc ff35 	bl	8003b34 <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ccc:	e00a      	b.n	8006ce4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cce:	f7fc ff31 	bl	8003b34 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e09b      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce4:	4b40      	ldr	r3, [pc, #256]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ee      	bne.n	8006cce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d105      	bne.n	8006d02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8087 	beq.w	8006e1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d0c:	4b36      	ldr	r3, [pc, #216]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f003 030c 	and.w	r3, r3, #12
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d061      	beq.n	8006ddc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d146      	bne.n	8006dae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d20:	4b33      	ldr	r3, [pc, #204]	@ (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d26:	f7fc ff05 	bl	8003b34 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d2e:	f7fc ff01 	bl	8003b34 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e06d      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d40:	4b29      	ldr	r3, [pc, #164]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d54:	d108      	bne.n	8006d68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d56:	4b24      	ldr	r3, [pc, #144]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	4921      	ldr	r1, [pc, #132]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d68:	4b1f      	ldr	r3, [pc, #124]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a19      	ldr	r1, [r3, #32]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	491b      	ldr	r1, [pc, #108]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d80:	4b1b      	ldr	r3, [pc, #108]	@ (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d86:	f7fc fed5 	bl	8003b34 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8e:	f7fc fed1 	bl	8003b34 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e03d      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006da0:	4b11      	ldr	r3, [pc, #68]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <HAL_RCC_OscConfig+0x46a>
 8006dac:	e035      	b.n	8006e1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dae:	4b10      	ldr	r3, [pc, #64]	@ (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db4:	f7fc febe 	bl	8003b34 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fc feba 	bl	8003b34 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e026      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dce:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x498>
 8006dda:	e01e      	b.n	8006e1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d107      	bne.n	8006df4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e019      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
 8006de8:	40021000 	.word	0x40021000
 8006dec:	40007000 	.word	0x40007000
 8006df0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <HAL_RCC_OscConfig+0x500>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d106      	bne.n	8006e16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d001      	beq.n	8006e1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40021000 	.word	0x40021000

08006e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0d0      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d910      	bls.n	8006e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4a:	4b67      	ldr	r3, [pc, #412]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 0207 	bic.w	r2, r3, #7
 8006e52:	4965      	ldr	r1, [pc, #404]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5a:	4b63      	ldr	r3, [pc, #396]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d001      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0b8      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d020      	beq.n	8006eba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e84:	4b59      	ldr	r3, [pc, #356]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	4a58      	ldr	r2, [pc, #352]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e9c:	4b53      	ldr	r3, [pc, #332]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a52      	ldr	r2, [pc, #328]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006ea2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006ea6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ea8:	4b50      	ldr	r3, [pc, #320]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	494d      	ldr	r1, [pc, #308]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d040      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d107      	bne.n	8006ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ece:	4b47      	ldr	r3, [pc, #284]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d115      	bne.n	8006f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e07f      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee6:	4b41      	ldr	r3, [pc, #260]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e073      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e06b      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f06:	4b39      	ldr	r3, [pc, #228]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f023 0203 	bic.w	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	4936      	ldr	r1, [pc, #216]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f18:	f7fc fe0c 	bl	8003b34 <HAL_GetTick>
 8006f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1e:	e00a      	b.n	8006f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f20:	f7fc fe08 	bl	8003b34 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e053      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f36:	4b2d      	ldr	r3, [pc, #180]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 020c 	and.w	r2, r3, #12
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d1eb      	bne.n	8006f20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f48:	4b27      	ldr	r3, [pc, #156]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d210      	bcs.n	8006f78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f56:	4b24      	ldr	r3, [pc, #144]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 0207 	bic.w	r2, r3, #7
 8006f5e:	4922      	ldr	r1, [pc, #136]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f66:	4b20      	ldr	r3, [pc, #128]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d001      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e032      	b.n	8006fde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d008      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f84:	4b19      	ldr	r3, [pc, #100]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4916      	ldr	r1, [pc, #88]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fa2:	4b12      	ldr	r3, [pc, #72]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	490e      	ldr	r1, [pc, #56]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fb6:	f000 f821 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	091b      	lsrs	r3, r3, #4
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	490a      	ldr	r1, [pc, #40]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc8:	5ccb      	ldrb	r3, [r1, r3]
 8006fca:	fa22 f303 	lsr.w	r3, r2, r3
 8006fce:	4a09      	ldr	r2, [pc, #36]	@ (8006ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8006fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fd2:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fc fd6a 	bl	8003ab0 <HAL_InitTick>

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40022000 	.word	0x40022000
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	08012a60 	.word	0x08012a60
 8006ff4:	20000004 	.word	0x20000004
 8006ff8:	20000008 	.word	0x20000008

08006ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	2300      	movs	r3, #0
 8007010:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007016:	4b1e      	ldr	r3, [pc, #120]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x94>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b04      	cmp	r3, #4
 8007024:	d002      	beq.n	800702c <HAL_RCC_GetSysClockFreq+0x30>
 8007026:	2b08      	cmp	r3, #8
 8007028:	d003      	beq.n	8007032 <HAL_RCC_GetSysClockFreq+0x36>
 800702a:	e027      	b.n	800707c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800702c:	4b19      	ldr	r3, [pc, #100]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x98>)
 800702e:	613b      	str	r3, [r7, #16]
      break;
 8007030:	e027      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	0c9b      	lsrs	r3, r3, #18
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	4a17      	ldr	r2, [pc, #92]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x9c>)
 800703c:	5cd3      	ldrb	r3, [r2, r3]
 800703e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d010      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800704a:	4b11      	ldr	r3, [pc, #68]	@ (8007090 <HAL_RCC_GetSysClockFreq+0x94>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	0c5b      	lsrs	r3, r3, #17
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	4a11      	ldr	r2, [pc, #68]	@ (800709c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007056:	5cd3      	ldrb	r3, [r2, r3]
 8007058:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a0d      	ldr	r2, [pc, #52]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x98>)
 800705e:	fb03 f202 	mul.w	r2, r3, r2
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	e004      	b.n	8007076 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a0c      	ldr	r2, [pc, #48]	@ (80070a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	613b      	str	r3, [r7, #16]
      break;
 800707a:	e002      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800707c:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x98>)
 800707e:	613b      	str	r3, [r7, #16]
      break;
 8007080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007082:	693b      	ldr	r3, [r7, #16]
}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
 8007094:	007a1200 	.word	0x007a1200
 8007098:	08012a78 	.word	0x08012a78
 800709c:	08012a88 	.word	0x08012a88
 80070a0:	003d0900 	.word	0x003d0900

080070a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a8:	4b02      	ldr	r3, [pc, #8]	@ (80070b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80070aa:	681b      	ldr	r3, [r3, #0]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	20000004 	.word	0x20000004

080070b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070bc:	f7ff fff2 	bl	80070a4 <HAL_RCC_GetHCLKFreq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	0a1b      	lsrs	r3, r3, #8
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	4903      	ldr	r1, [pc, #12]	@ (80070dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ce:	5ccb      	ldrb	r3, [r1, r3]
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40021000 	.word	0x40021000
 80070dc:	08012a70 	.word	0x08012a70

080070e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070e4:	f7ff ffde 	bl	80070a4 <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b05      	ldr	r3, [pc, #20]	@ (8007100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	0adb      	lsrs	r3, r3, #11
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4903      	ldr	r1, [pc, #12]	@ (8007104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40021000 	.word	0x40021000
 8007104:	08012a70 	.word	0x08012a70

08007108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007110:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <RCC_Delay+0x34>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a0a      	ldr	r2, [pc, #40]	@ (8007140 <RCC_Delay+0x38>)
 8007116:	fba2 2303 	umull	r2, r3, r2, r3
 800711a:	0a5b      	lsrs	r3, r3, #9
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007124:	bf00      	nop
  }
  while (Delay --);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1e5a      	subs	r2, r3, #1
 800712a:	60fa      	str	r2, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f9      	bne.n	8007124 <RCC_Delay+0x1c>
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr
 800713c:	20000004 	.word	0x20000004
 8007140:	10624dd3 	.word	0x10624dd3

08007144 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d07d      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007164:	4b4f      	ldr	r3, [pc, #316]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10d      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007170:	4b4c      	ldr	r3, [pc, #304]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	4a4b      	ldr	r2, [pc, #300]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717a:	61d3      	str	r3, [r2, #28]
 800717c:	4b49      	ldr	r3, [pc, #292]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800718c:	4b46      	ldr	r3, [pc, #280]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d118      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007198:	4b43      	ldr	r3, [pc, #268]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a42      	ldr	r2, [pc, #264]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800719e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a4:	f7fc fcc6 	bl	8003b34 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071aa:	e008      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ac:	f7fc fcc2 	bl	8003b34 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b64      	cmp	r3, #100	@ 0x64
 80071b8:	d901      	bls.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e06d      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071be:	4b3a      	ldr	r3, [pc, #232]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0f0      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071ca:	4b36      	ldr	r3, [pc, #216]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d02e      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d027      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e8:	4b2e      	ldr	r3, [pc, #184]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071f2:	4b2e      	ldr	r3, [pc, #184]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071f8:	4b2c      	ldr	r3, [pc, #176]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071fe:	4a29      	ldr	r2, [pc, #164]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d014      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720e:	f7fc fc91 	bl	8003b34 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007214:	e00a      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007216:	f7fc fc8d 	bl	8003b34 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e036      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800722c:	4b1d      	ldr	r3, [pc, #116]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0ee      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007238:	4b1a      	ldr	r3, [pc, #104]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	4917      	ldr	r1, [pc, #92]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007246:	4313      	orrs	r3, r2
 8007248:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007250:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	4a13      	ldr	r2, [pc, #76]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800725a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d008      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007268:	4b0e      	ldr	r3, [pc, #56]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	490b      	ldr	r1, [pc, #44]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007276:	4313      	orrs	r3, r2
 8007278:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007286:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	4904      	ldr	r1, [pc, #16]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40007000 	.word	0x40007000
 80072ac:	42420440 	.word	0x42420440

080072b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	2300      	movs	r3, #0
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	f200 808a 	bhi.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d045      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d075      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80072e6:	e082      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80072e8:	4b46      	ldr	r3, [pc, #280]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80072ee:	4b45      	ldr	r3, [pc, #276]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d07b      	beq.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	0c9b      	lsrs	r3, r3, #18
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	4a41      	ldr	r2, [pc, #260]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007304:	5cd3      	ldrb	r3, [r2, r3]
 8007306:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d015      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007312:	4b3c      	ldr	r3, [pc, #240]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	0c5b      	lsrs	r3, r3, #17
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	4a3b      	ldr	r2, [pc, #236]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800731e:	5cd3      	ldrb	r3, [r2, r3]
 8007320:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00d      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800732c:	4a38      	ldr	r2, [pc, #224]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	fbb2 f2f3 	udiv	r2, r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	e004      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	4a34      	ldr	r2, [pc, #208]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007342:	fb02 f303 	mul.w	r3, r2, r3
 8007346:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007348:	4b2e      	ldr	r3, [pc, #184]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007354:	d102      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	61bb      	str	r3, [r7, #24]
      break;
 800735a:	e04a      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	4a2d      	ldr	r2, [pc, #180]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	61bb      	str	r3, [r7, #24]
      break;
 800736a:	e042      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800736c:	4b25      	ldr	r3, [pc, #148]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800737c:	d108      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e01f      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800739a:	d109      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800739c:	4b19      	ldr	r3, [pc, #100]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80073a8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	e00f      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ba:	d11c      	bne.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80073bc:	4b11      	ldr	r3, [pc, #68]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d016      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80073c8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80073cc:	61bb      	str	r3, [r7, #24]
      break;
 80073ce:	e012      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80073d0:	e011      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80073d2:	f7ff fe85 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	0b9b      	lsrs	r3, r3, #14
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	3301      	adds	r3, #1
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ea:	61bb      	str	r3, [r7, #24]
      break;
 80073ec:	e004      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80073ee:	bf00      	nop
 80073f0:	e002      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80073f2:	bf00      	nop
 80073f4:	e000      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80073f6:	bf00      	nop
    }
  }
  return (frequency);
 80073f8:	69bb      	ldr	r3, [r7, #24]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40021000 	.word	0x40021000
 8007408:	08012a8c 	.word	0x08012a8c
 800740c:	08012a9c 	.word	0x08012a9c
 8007410:	007a1200 	.word	0x007a1200
 8007414:	003d0900 	.word	0x003d0900
 8007418:	aaaaaaab 	.word	0xaaaaaaab

0800741c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e07a      	b.n	8007528 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7c5b      	ldrb	r3, [r3, #17]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fc f898 	bl	8003578 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9be 	bl	80077d0 <HAL_RTC_WaitForSynchro>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2204      	movs	r2, #4
 800745e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e061      	b.n	8007528 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa77 	bl	8007958 <RTC_EnterInitMode>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2204      	movs	r2, #4
 8007474:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e056      	b.n	8007528 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0207 	bic.w	r2, r2, #7
 8007488:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007492:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <HAL_RTC_Init+0x114>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007496:	4a26      	ldr	r2, [pc, #152]	@ (8007530 <HAL_RTC_Init+0x114>)
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800749e:	4b24      	ldr	r3, [pc, #144]	@ (8007530 <HAL_RTC_Init+0x114>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	4921      	ldr	r1, [pc, #132]	@ (8007530 <HAL_RTC_Init+0x114>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d003      	beq.n	80074c2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	e00e      	b.n	80074e0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80074c2:	2001      	movs	r0, #1
 80074c4:	f7ff fef4 	bl	80072b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80074c8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2204      	movs	r2, #4
 80074d4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e026      	b.n	8007528 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	0c1a      	lsrs	r2, r3, #16
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f002 020f 	and.w	r2, r2, #15
 80074ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	b292      	uxth	r2, r2
 80074f6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa55 	bl	80079a8 <RTC_ExitInitMode>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2204      	movs	r2, #4
 8007508:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e00c      	b.n	8007528 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007526:	2300      	movs	r3, #0
  }
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40006c00 	.word	0x40006c00

08007534 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007534:	b590      	push	{r4, r7, lr}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_RTC_SetTime+0x20>
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e080      	b.n	800765a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	7c1b      	ldrb	r3, [r3, #16]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_RTC_SetTime+0x30>
 8007560:	2302      	movs	r3, #2
 8007562:	e07a      	b.n	800765a <HAL_RTC_SetTime+0x126>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2201      	movs	r2, #1
 8007568:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2202      	movs	r2, #2
 800756e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d113      	bne.n	800759e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007580:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	4619      	mov	r1, r3
 800758a:	460b      	mov	r3, r1
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	1a5b      	subs	r3, r3, r1
 8007590:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007592:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007598:	4413      	add	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e01e      	b.n	80075dc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa28 	bl	80079f8 <RTC_Bcd2ToByte>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80075b0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fa1d 	bl	80079f8 <RTC_Bcd2ToByte>
 80075be:	4603      	mov	r3, r0
 80075c0:	461a      	mov	r2, r3
 80075c2:	4613      	mov	r3, r2
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80075ca:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	789b      	ldrb	r3, [r3, #2]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fa11 	bl	80079f8 <RTC_Bcd2ToByte>
 80075d6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80075d8:	4423      	add	r3, r4
 80075da:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80075dc:	6979      	ldr	r1, [r7, #20]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f953 	bl	800788a <RTC_WriteTimeCounter>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2204      	movs	r2, #4
 80075ee:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e02f      	b.n	800765a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0205 	bic.w	r2, r2, #5
 8007608:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f964 	bl	80078d8 <RTC_ReadAlarmCounter>
 8007610:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d018      	beq.n	800764c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	429a      	cmp	r2, r3
 8007620:	d214      	bcs.n	800764c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007628:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800762c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800762e:	6939      	ldr	r1, [r7, #16]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f96a 	bl	800790a <RTC_WriteAlarmCounter>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2204      	movs	r2, #4
 8007640:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e006      	b.n	800765a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007658:	2300      	movs	r3, #0
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	bd90      	pop	{r4, r7, pc}
	...

08007664 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	2300      	movs	r3, #0
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_RTC_SetDate+0x24>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e097      	b.n	80077bc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	7c1b      	ldrb	r3, [r3, #16]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_RTC_SetDate+0x34>
 8007694:	2302      	movs	r3, #2
 8007696:	e091      	b.n	80077bc <HAL_RTC_SetDate+0x158>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2202      	movs	r2, #2
 80076a2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10c      	bne.n	80076c4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	78da      	ldrb	r2, [r3, #3]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	785a      	ldrb	r2, [r3, #1]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	789a      	ldrb	r2, [r3, #2]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	739a      	strb	r2, [r3, #14]
 80076c2:	e01a      	b.n	80076fa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	78db      	ldrb	r3, [r3, #3]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 f995 	bl	80079f8 <RTC_Bcd2ToByte>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f98c 	bl	80079f8 <RTC_Bcd2ToByte>
 80076e0:	4603      	mov	r3, r0
 80076e2:	461a      	mov	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	789b      	ldrb	r3, [r3, #2]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f983 	bl	80079f8 <RTC_Bcd2ToByte>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	7bdb      	ldrb	r3, [r3, #15]
 80076fe:	4618      	mov	r0, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	7b59      	ldrb	r1, [r3, #13]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	7b9b      	ldrb	r3, [r3, #14]
 8007708:	461a      	mov	r2, r3
 800770a:	f000 f993 	bl	8007a34 <RTC_WeekDayNum>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	7b1a      	ldrb	r2, [r3, #12]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f883 	bl	800782a <RTC_ReadTimeCounter>
 8007724:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4a26      	ldr	r2, [pc, #152]	@ (80077c4 <HAL_RTC_SetDate+0x160>)
 800772a:	fba2 2303 	umull	r2, r3, r2, r3
 800772e:	0adb      	lsrs	r3, r3, #11
 8007730:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b18      	cmp	r3, #24
 8007736:	d93a      	bls.n	80077ae <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4a23      	ldr	r2, [pc, #140]	@ (80077c8 <HAL_RTC_SetDate+0x164>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	091b      	lsrs	r3, r3, #4
 8007742:	4a22      	ldr	r2, [pc, #136]	@ (80077cc <HAL_RTC_SetDate+0x168>)
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800774e:	69f9      	ldr	r1, [r7, #28]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f89a 	bl	800788a <RTC_WriteTimeCounter>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2204      	movs	r2, #4
 8007760:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e027      	b.n	80077bc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f8b3 	bl	80078d8 <RTC_ReadAlarmCounter>
 8007772:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d018      	beq.n	80077ae <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	429a      	cmp	r2, r3
 8007782:	d214      	bcs.n	80077ae <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800778a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800778e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007790:	69b9      	ldr	r1, [r7, #24]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f8b9 	bl	800790a <RTC_WriteAlarmCounter>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2204      	movs	r2, #4
 80077a2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e006      	b.n	80077bc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	91a2b3c5 	.word	0x91a2b3c5
 80077c8:	aaaaaaab 	.word	0xaaaaaaab
 80077cc:	00015180 	.word	0x00015180

080077d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e01d      	b.n	8007822 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0208 	bic.w	r2, r2, #8
 80077f4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80077f6:	f7fc f99d 	bl	8003b34 <HAL_GetTick>
 80077fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80077fc:	e009      	b.n	8007812 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80077fe:	f7fc f999 	bl	8003b34 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800780c:	d901      	bls.n	8007812 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e007      	b.n	8007822 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0ee      	beq.n	80077fe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	827b      	strh	r3, [r7, #18]
 8007836:	2300      	movs	r3, #0
 8007838:	823b      	strh	r3, [r7, #16]
 800783a:	2300      	movs	r3, #0
 800783c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800785a:	8a7a      	ldrh	r2, [r7, #18]
 800785c:	8a3b      	ldrh	r3, [r7, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	d008      	beq.n	8007874 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007862:	8a3b      	ldrh	r3, [r7, #16]
 8007864:	041a      	lsls	r2, r3, #16
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	b29b      	uxth	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e004      	b.n	800787e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007874:	8a7b      	ldrh	r3, [r7, #18]
 8007876:	041a      	lsls	r2, r3, #16
 8007878:	89fb      	ldrh	r3, [r7, #14]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800787e:	697b      	ldr	r3, [r7, #20]
}
 8007880:	4618      	mov	r0, r3
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f85d 	bl	8007958 <RTC_EnterInitMode>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
 80078a8:	e011      	b.n	80078ce <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	0c12      	lsrs	r2, r2, #16
 80078b2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	b292      	uxth	r2, r2
 80078bc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f872 	bl	80079a8 <RTC_ExitInitMode>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	81fb      	strh	r3, [r7, #14]
 80078e4:	2300      	movs	r3, #0
 80078e6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80078f8:	89fb      	ldrh	r3, [r7, #14]
 80078fa:	041a      	lsls	r2, r3, #16
 80078fc:	89bb      	ldrh	r3, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f81d 	bl	8007958 <RTC_EnterInitMode>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	e011      	b.n	800794e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	0c12      	lsrs	r2, r2, #16
 8007932:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	b292      	uxth	r2, r2
 800793c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f832 	bl	80079a8 <RTC_ExitInitMode>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007964:	f7fc f8e6 	bl	8003b34 <HAL_GetTick>
 8007968:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800796a:	e009      	b.n	8007980 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800796c:	f7fc f8e2 	bl	8003b34 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800797a:	d901      	bls.n	8007980 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e00f      	b.n	80079a0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0ee      	beq.n	800796c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0210 	orr.w	r2, r2, #16
 800799c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0210 	bic.w	r2, r2, #16
 80079c2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80079c4:	f7fc f8b6 	bl	8003b34 <HAL_GetTick>
 80079c8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80079ca:	e009      	b.n	80079e0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80079cc:	f7fc f8b2 	bl	8003b34 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079da:	d901      	bls.n	80079e0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e007      	b.n	80079f0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ee      	beq.n	80079cc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4413      	add	r3, r2
 8007a26:	b2db      	uxtb	r3, r3
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
	...

08007a34 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
 8007a40:	4613      	mov	r3, r2
 8007a42:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007a52:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d82d      	bhi.n	8007ab6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	4a2c      	ldr	r2, [pc, #176]	@ (8007b18 <RTC_WeekDayNum+0xe4>)
 8007a68:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6c:	085a      	lsrs	r2, r3, #1
 8007a6e:	78bb      	ldrb	r3, [r7, #2]
 8007a70:	441a      	add	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	441a      	add	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	4926      	ldr	r1, [pc, #152]	@ (8007b1c <RTC_WeekDayNum+0xe8>)
 8007a84:	fba1 1303 	umull	r1, r3, r1, r3
 8007a88:	095b      	lsrs	r3, r3, #5
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4922      	ldr	r1, [pc, #136]	@ (8007b1c <RTC_WeekDayNum+0xe8>)
 8007a92:	fba1 1303 	umull	r1, r3, r1, r3
 8007a96:	09db      	lsrs	r3, r3, #7
 8007a98:	4413      	add	r3, r2
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	4b20      	ldr	r3, [pc, #128]	@ (8007b20 <RTC_WeekDayNum+0xec>)
 8007a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa2:	1ad1      	subs	r1, r2, r3
 8007aa4:	0849      	lsrs	r1, r1, #1
 8007aa6:	440b      	add	r3, r1
 8007aa8:	0899      	lsrs	r1, r3, #2
 8007aaa:	460b      	mov	r3, r1
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	1a5b      	subs	r3, r3, r1
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e029      	b.n	8007b0a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	4a15      	ldr	r2, [pc, #84]	@ (8007b18 <RTC_WeekDayNum+0xe4>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	085a      	lsrs	r2, r3, #1
 8007aca:	78bb      	ldrb	r3, [r7, #2]
 8007acc:	441a      	add	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	089b      	lsrs	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4910      	ldr	r1, [pc, #64]	@ (8007b1c <RTC_WeekDayNum+0xe8>)
 8007adc:	fba1 1303 	umull	r1, r3, r1, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	1ad2      	subs	r2, r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	490d      	ldr	r1, [pc, #52]	@ (8007b1c <RTC_WeekDayNum+0xe8>)
 8007ae8:	fba1 1303 	umull	r1, r3, r1, r3
 8007aec:	09db      	lsrs	r3, r3, #7
 8007aee:	4413      	add	r3, r2
 8007af0:	1c9a      	adds	r2, r3, #2
 8007af2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b20 <RTC_WeekDayNum+0xec>)
 8007af4:	fba3 1302 	umull	r1, r3, r3, r2
 8007af8:	1ad1      	subs	r1, r2, r3
 8007afa:	0849      	lsrs	r1, r1, #1
 8007afc:	440b      	add	r3, r1
 8007afe:	0899      	lsrs	r1, r3, #2
 8007b00:	460b      	mov	r3, r1
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	1a5b      	subs	r3, r3, r1
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	b2db      	uxtb	r3, r3
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr
 8007b18:	38e38e39 	.word	0x38e38e39
 8007b1c:	51eb851f 	.word	0x51eb851f
 8007b20:	24924925 	.word	0x24924925

08007b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e076      	b.n	8007c24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d108      	bne.n	8007b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b46:	d009      	beq.n	8007b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	61da      	str	r2, [r3, #28]
 8007b4e:	e005      	b.n	8007b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fb fd22 	bl	80035c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be0:	ea42 0103 	orr.w	r1, r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	0c1a      	lsrs	r2, r3, #16
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f002 0204 	and.w	r2, r2, #4
 8007c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69da      	ldr	r2, [r3, #28]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e041      	b.n	8007cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7fb fcfe 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	f000 fc98 	bl	80085a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d001      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e03a      	b.n	8007d5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a18      	ldr	r2, [pc, #96]	@ (8007d64 <HAL_TIM_Base_Start_IT+0x98>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00e      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x58>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0e:	d009      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x58>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a14      	ldr	r2, [pc, #80]	@ (8007d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d004      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x58>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a13      	ldr	r2, [pc, #76]	@ (8007d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d111      	bne.n	8007d48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b06      	cmp	r3, #6
 8007d34:	d010      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0201 	orr.w	r2, r2, #1
 8007d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d46:	e007      	b.n	8007d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	40000800 	.word	0x40000800

08007d70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e041      	b.n	8007e06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f839 	bl	8007e0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f000 fbf6 	bl	80085a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start_IT+0x1e>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e013      	b.n	8007e66 <HAL_TIM_IC_Start_IT+0x46>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_IC_Start_IT+0x2e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	e00b      	b.n	8007e66 <HAL_TIM_IC_Start_IT+0x46>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_IC_Start_IT+0x3e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	e003      	b.n	8007e66 <HAL_TIM_IC_Start_IT+0x46>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <HAL_TIM_IC_Start_IT+0x58>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	e013      	b.n	8007ea0 <HAL_TIM_IC_Start_IT+0x80>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d104      	bne.n	8007e88 <HAL_TIM_IC_Start_IT+0x68>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e00b      	b.n	8007ea0 <HAL_TIM_IC_Start_IT+0x80>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d104      	bne.n	8007e98 <HAL_TIM_IC_Start_IT+0x78>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	e003      	b.n	8007ea0 <HAL_TIM_IC_Start_IT+0x80>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d102      	bne.n	8007eae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ea8:	7b7b      	ldrb	r3, [r7, #13]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d001      	beq.n	8007eb2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0b8      	b.n	8008024 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_IC_Start_IT+0xa2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ec0:	e013      	b.n	8007eea <HAL_TIM_IC_Start_IT+0xca>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIM_IC_Start_IT+0xb2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ed0:	e00b      	b.n	8007eea <HAL_TIM_IC_Start_IT+0xca>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_IC_Start_IT+0xc2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ee0:	e003      	b.n	8007eea <HAL_TIM_IC_Start_IT+0xca>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_IC_Start_IT+0xda>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ef8:	e013      	b.n	8007f22 <HAL_TIM_IC_Start_IT+0x102>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_IC_Start_IT+0xea>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f08:	e00b      	b.n	8007f22 <HAL_TIM_IC_Start_IT+0x102>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d104      	bne.n	8007f1a <HAL_TIM_IC_Start_IT+0xfa>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f18:	e003      	b.n	8007f22 <HAL_TIM_IC_Start_IT+0x102>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b0c      	cmp	r3, #12
 8007f26:	d841      	bhi.n	8007fac <HAL_TIM_IC_Start_IT+0x18c>
 8007f28:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <HAL_TIM_IC_Start_IT+0x110>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08007fad 	.word	0x08007fad
 8007f38:	08007fad 	.word	0x08007fad
 8007f3c:	08007fad 	.word	0x08007fad
 8007f40:	08007f77 	.word	0x08007f77
 8007f44:	08007fad 	.word	0x08007fad
 8007f48:	08007fad 	.word	0x08007fad
 8007f4c:	08007fad 	.word	0x08007fad
 8007f50:	08007f89 	.word	0x08007f89
 8007f54:	08007fad 	.word	0x08007fad
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007fad 	.word	0x08007fad
 8007f60:	08007f9b 	.word	0x08007f9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0202 	orr.w	r2, r2, #2
 8007f72:	60da      	str	r2, [r3, #12]
      break;
 8007f74:	e01d      	b.n	8007fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0204 	orr.w	r2, r2, #4
 8007f84:	60da      	str	r2, [r3, #12]
      break;
 8007f86:	e014      	b.n	8007fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0208 	orr.w	r2, r2, #8
 8007f96:	60da      	str	r2, [r3, #12]
      break;
 8007f98:	e00b      	b.n	8007fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0210 	orr.w	r2, r2, #16
 8007fa8:	60da      	str	r2, [r3, #12]
      break;
 8007faa:	e002      	b.n	8007fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d134      	bne.n	8008022 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fcfe 	bl	80089c2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a18      	ldr	r2, [pc, #96]	@ (800802c <HAL_TIM_IC_Start_IT+0x20c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00e      	beq.n	8007fee <HAL_TIM_IC_Start_IT+0x1ce>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd8:	d009      	beq.n	8007fee <HAL_TIM_IC_Start_IT+0x1ce>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a14      	ldr	r2, [pc, #80]	@ (8008030 <HAL_TIM_IC_Start_IT+0x210>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d004      	beq.n	8007fee <HAL_TIM_IC_Start_IT+0x1ce>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a12      	ldr	r2, [pc, #72]	@ (8008034 <HAL_TIM_IC_Start_IT+0x214>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d111      	bne.n	8008012 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b06      	cmp	r3, #6
 8007ffe:	d010      	beq.n	8008022 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0201 	orr.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008010:	e007      	b.n	8008022 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0201 	orr.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800

08008038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d020      	beq.n	800809c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01b      	beq.n	800809c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0202 	mvn.w	r2, #2
 800806c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fa fa20 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8008088:	e005      	b.n	8008096 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa6c 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa72 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f003 0304 	and.w	r3, r3, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d020      	beq.n	80080e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01b      	beq.n	80080e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0204 	mvn.w	r2, #4
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fa f9fa 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa46 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fa4c 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 0308 	and.w	r3, r3, #8
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d020      	beq.n	8008134 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01b      	beq.n	8008134 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0208 	mvn.w	r2, #8
 8008104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2204      	movs	r2, #4
 800810a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fa f9d4 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa20 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa26 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b00      	cmp	r3, #0
 800813c:	d020      	beq.n	8008180 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01b      	beq.n	8008180 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0210 	mvn.w	r2, #16
 8008150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2208      	movs	r2, #8
 8008156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7fa f9ae 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 800816c:	e005      	b.n	800817a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9fa 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa00 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00c      	beq.n	80081a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0201 	mvn.w	r2, #1
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fa f99d 	bl	80024de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fc89 	bl	8008ada <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9d0 	bl	800858c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0220 	mvn.w	r2, #32
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc5c 	bl	8008ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008232:	2302      	movs	r3, #2
 8008234:	e088      	b.n	8008348 <HAL_TIM_IC_ConfigChannel+0x130>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d11b      	bne.n	800827c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008254:	f000 fa12 	bl	800867c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 020c 	bic.w	r2, r2, #12
 8008266:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6999      	ldr	r1, [r3, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	619a      	str	r2, [r3, #24]
 800827a:	e060      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b04      	cmp	r3, #4
 8008280:	d11c      	bne.n	80082bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008292:	f000 fa7b 	bl	800878c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6999      	ldr	r1, [r3, #24]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	021a      	lsls	r2, r3, #8
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	619a      	str	r2, [r3, #24]
 80082ba:	e040      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d11b      	bne.n	80082fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80082d2:	f000 fac6 	bl	8008862 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 020c 	bic.w	r2, r2, #12
 80082e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69d9      	ldr	r1, [r3, #28]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	61da      	str	r2, [r3, #28]
 80082f8:	e021      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b0c      	cmp	r3, #12
 80082fe:	d11c      	bne.n	800833a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008310:	f000 fae2 	bl	80088d8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69da      	ldr	r2, [r3, #28]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008322:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69d9      	ldr	r1, [r3, #28]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	021a      	lsls	r2, r3, #8
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	61da      	str	r2, [r3, #28]
 8008338:	e001      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_TIM_ConfigClockSource+0x1c>
 8008368:	2302      	movs	r3, #2
 800836a:	e0b4      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x186>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800838a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a4:	d03e      	beq.n	8008424 <HAL_TIM_ConfigClockSource+0xd4>
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083aa:	f200 8087 	bhi.w	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	f000 8086 	beq.w	80084c2 <HAL_TIM_ConfigClockSource+0x172>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ba:	d87f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083bc:	2b70      	cmp	r3, #112	@ 0x70
 80083be:	d01a      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xa6>
 80083c0:	2b70      	cmp	r3, #112	@ 0x70
 80083c2:	d87b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b60      	cmp	r3, #96	@ 0x60
 80083c6:	d050      	beq.n	800846a <HAL_TIM_ConfigClockSource+0x11a>
 80083c8:	2b60      	cmp	r3, #96	@ 0x60
 80083ca:	d877      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b50      	cmp	r3, #80	@ 0x50
 80083ce:	d03c      	beq.n	800844a <HAL_TIM_ConfigClockSource+0xfa>
 80083d0:	2b50      	cmp	r3, #80	@ 0x50
 80083d2:	d873      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	d058      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x13a>
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d86f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b30      	cmp	r3, #48	@ 0x30
 80083de:	d064      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e0:	2b30      	cmp	r3, #48	@ 0x30
 80083e2:	d86b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d060      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d867      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05c      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d05a      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f4:	e062      	b.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008406:	f000 fabd 	bl	8008984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	609a      	str	r2, [r3, #8]
      break;
 8008422:	e04f      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008434:	f000 faa6 	bl	8008984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008446:	609a      	str	r2, [r3, #8]
      break;
 8008448:	e03c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008456:	461a      	mov	r2, r3
 8008458:	f000 f96a 	bl	8008730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2150      	movs	r1, #80	@ 0x50
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fa74 	bl	8008950 <TIM_ITRx_SetConfig>
      break;
 8008468:	e02c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008476:	461a      	mov	r2, r3
 8008478:	f000 f9c4 	bl	8008804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2160      	movs	r1, #96	@ 0x60
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fa64 	bl	8008950 <TIM_ITRx_SetConfig>
      break;
 8008488:	e01c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008496:	461a      	mov	r2, r3
 8008498:	f000 f94a 	bl	8008730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2140      	movs	r1, #64	@ 0x40
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fa54 	bl	8008950 <TIM_ITRx_SetConfig>
      break;
 80084a8:	e00c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f000 fa4b 	bl	8008950 <TIM_ITRx_SetConfig>
      break;
 80084ba:	e003      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e000      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b0c      	cmp	r3, #12
 80084f2:	d831      	bhi.n	8008558 <HAL_TIM_ReadCapturedValue+0x78>
 80084f4:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008559 	.word	0x08008559
 8008504:	08008559 	.word	0x08008559
 8008508:	08008559 	.word	0x08008559
 800850c:	0800853b 	.word	0x0800853b
 8008510:	08008559 	.word	0x08008559
 8008514:	08008559 	.word	0x08008559
 8008518:	08008559 	.word	0x08008559
 800851c:	08008545 	.word	0x08008545
 8008520:	08008559 	.word	0x08008559
 8008524:	08008559 	.word	0x08008559
 8008528:	08008559 	.word	0x08008559
 800852c:	0800854f 	.word	0x0800854f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	60fb      	str	r3, [r7, #12]

      break;
 8008538:	e00f      	b.n	800855a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008540:	60fb      	str	r3, [r7, #12]

      break;
 8008542:	e00a      	b.n	800855a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	60fb      	str	r3, [r7, #12]

      break;
 800854c:	e005      	b.n	800855a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008554:	60fb      	str	r3, [r7, #12]

      break;
 8008556:	e000      	b.n	800855a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008558:	bf00      	nop
  }

  return tmpreg;
 800855a:	68fb      	ldr	r3, [r7, #12]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop

08008568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr
	...

080085a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a2f      	ldr	r2, [pc, #188]	@ (8008670 <TIM_Base_SetConfig+0xd0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00b      	beq.n	80085d0 <TIM_Base_SetConfig+0x30>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085be:	d007      	beq.n	80085d0 <TIM_Base_SetConfig+0x30>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008674 <TIM_Base_SetConfig+0xd4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_Base_SetConfig+0x30>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008678 <TIM_Base_SetConfig+0xd8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d108      	bne.n	80085e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a22      	ldr	r2, [pc, #136]	@ (8008670 <TIM_Base_SetConfig+0xd0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_Base_SetConfig+0x62>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f0:	d007      	beq.n	8008602 <TIM_Base_SetConfig+0x62>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008674 <TIM_Base_SetConfig+0xd4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_Base_SetConfig+0x62>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008678 <TIM_Base_SetConfig+0xd8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d108      	bne.n	8008614 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a0d      	ldr	r2, [pc, #52]	@ (8008670 <TIM_Base_SetConfig+0xd0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d103      	bne.n	8008648 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f023 0201 	bic.w	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	611a      	str	r2, [r3, #16]
  }
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr
 8008670:	40012c00 	.word	0x40012c00
 8008674:	40000400 	.word	0x40000400
 8008678:	40000800 	.word	0x40000800

0800867c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	f023 0201 	bic.w	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008724 <TIM_TI1_SetConfig+0xa8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_TI1_SetConfig+0x46>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b0:	d007      	beq.n	80086c2 <TIM_TI1_SetConfig+0x46>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008728 <TIM_TI1_SetConfig+0xac>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_TI1_SetConfig+0x46>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4a1b      	ldr	r2, [pc, #108]	@ (800872c <TIM_TI1_SetConfig+0xb0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d101      	bne.n	80086c6 <TIM_TI1_SetConfig+0x4a>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <TIM_TI1_SetConfig+0x4c>
 80086c6:	2300      	movs	r3, #0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e003      	b.n	80086e6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f023 030a 	bic.w	r3, r3, #10
 8008700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f003 030a 	and.w	r3, r3, #10
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	621a      	str	r2, [r3, #32]
}
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	40012c00 	.word	0x40012c00
 8008728:	40000400 	.word	0x40000400
 800872c:	40000800 	.word	0x40000800

08008730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f023 0201 	bic.w	r2, r3, #1
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800875a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f023 030a 	bic.w	r3, r3, #10
 800876c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4313      	orrs	r3, r2
 8008774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr

0800878c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f023 0210 	bic.w	r2, r3, #16
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	031b      	lsls	r3, r3, #12
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	621a      	str	r2, [r3, #32]
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr

08008804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f023 0210 	bic.w	r2, r3, #16
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800882e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	031b      	lsls	r3, r3, #12
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	621a      	str	r2, [r3, #32]
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	bc80      	pop	{r7}
 8008860:	4770      	bx	lr

08008862 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008862:	b480      	push	{r7}
 8008864:	b087      	sub	sp, #28
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	621a      	str	r2, [r3, #32]
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008904:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4313      	orrs	r3, r2
 800890e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008916:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	031b      	lsls	r3, r3, #12
 800891c:	b29b      	uxth	r3, r3
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800892a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	031b      	lsls	r3, r3, #12
 8008930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	621a      	str	r2, [r3, #32]
}
 8008946:	bf00      	nop
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008966:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	f043 0307 	orr.w	r3, r3, #7
 8008972:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	609a      	str	r2, [r3, #8]
}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr

08008984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800899e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	021a      	lsls	r2, r3, #8
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	431a      	orrs	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	609a      	str	r2, [r3, #8]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr

080089c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b087      	sub	sp, #28
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f003 031f 	and.w	r3, r3, #31
 80089d4:	2201      	movs	r2, #1
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a1a      	ldr	r2, [r3, #32]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	43db      	mvns	r3, r3
 80089e4:	401a      	ands	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f003 031f 	and.w	r3, r3, #31
 80089f4:	6879      	ldr	r1, [r7, #4]
 80089f6:	fa01 f303 	lsl.w	r3, r1, r3
 80089fa:	431a      	orrs	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	621a      	str	r2, [r3, #32]
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e046      	b.n	8008ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a16      	ldr	r2, [pc, #88]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00e      	beq.n	8008a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a70:	d009      	beq.n	8008a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a12      	ldr	r2, [pc, #72]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a10      	ldr	r2, [pc, #64]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d10c      	bne.n	8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40000400 	.word	0x40000400
 8008ac4:	40000800 	.word	0x40000800

08008ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr

08008ada <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	4638      	mov	r0, r7
 8008af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b16:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008b1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b3a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008b3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	4013      	ands	r3, r2
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr

08008b66 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	4638      	mov	r0, r7
 8008b88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr

08008bb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b09d      	sub	sp, #116	@ 0x74
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bde:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d81f      	bhi.n	8008c2a <USB_ActivateEndpoint+0x72>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <USB_ActivateEndpoint+0x38>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c01 	.word	0x08008c01
 8008bf4:	08008c1d 	.word	0x08008c1d
 8008bf8:	08008c33 	.word	0x08008c33
 8008bfc:	08008c0f 	.word	0x08008c0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008c00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008c08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008c0c:	e012      	b.n	8008c34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008c0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c12:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008c16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008c1a:	e00b      	b.n	8008c34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008c1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008c28:	e004      	b.n	8008c34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008c30:	e000      	b.n	8008c34 <USB_ActivateEndpoint+0x7c>
      break;
 8008c32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	441a      	add	r2, r3
 8008c82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	7b1b      	ldrb	r3, [r3, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f040 8178 	bne.w	8008f94 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 8084 	beq.w	8008db6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	461a      	mov	r2, r3
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	011a      	lsls	r2, r3, #4
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	88db      	ldrh	r3, [r3, #6]
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	827b      	strh	r3, [r7, #18]
 8008cf0:	8a7b      	ldrh	r3, [r7, #18]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01b      	beq.n	8008d32 <USB_ActivateEndpoint+0x17a>
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d10:	823b      	strh	r3, [r7, #16]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	441a      	add	r2, r3
 8008d1c:	8a3b      	ldrh	r3, [r7, #16]
 8008d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	78db      	ldrb	r3, [r3, #3]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d020      	beq.n	8008d7c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d50:	81bb      	strh	r3, [r7, #12]
 8008d52:	89bb      	ldrh	r3, [r7, #12]
 8008d54:	f083 0320 	eor.w	r3, r3, #32
 8008d58:	81bb      	strh	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	441a      	add	r2, r3
 8008d64:	89bb      	ldrh	r3, [r7, #12]
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]
 8008d7a:	e2d5      	b.n	8009328 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d92:	81fb      	strh	r3, [r7, #14]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	441a      	add	r2, r3
 8008d9e:	89fb      	ldrh	r3, [r7, #14]
 8008da0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008da4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008da8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	8013      	strh	r3, [r2, #0]
 8008db4:	e2b8      	b.n	8009328 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	4413      	add	r3, r2
 8008dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	011a      	lsls	r2, r3, #4
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	88db      	ldrh	r3, [r3, #6]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	4413      	add	r3, r2
 8008dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	011a      	lsls	r2, r3, #4
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	4413      	add	r3, r2
 8008e08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1c:	801a      	strh	r2, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e24:	d91d      	bls.n	8008e62 <USB_ActivateEndpoint+0x2aa>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <USB_ActivateEndpoint+0x288>
 8008e3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	029b      	lsls	r3, r3, #10
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	e026      	b.n	8008eb0 <USB_ActivateEndpoint+0x2f8>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <USB_ActivateEndpoint+0x2c8>
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	801a      	strh	r2, [r3, #0]
 8008e7e:	e017      	b.n	8008eb0 <USB_ActivateEndpoint+0x2f8>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <USB_ActivateEndpoint+0x2e2>
 8008e94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e96:	3301      	adds	r3, #1
 8008e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	029b      	lsls	r3, r3, #10
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ebe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01b      	beq.n	8008f00 <USB_ActivateEndpoint+0x348>
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ede:	843b      	strh	r3, [r7, #32]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	441a      	add	r2, r3
 8008eea:	8c3b      	ldrh	r3, [r7, #32]
 8008eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d124      	bne.n	8008f52 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1e:	83bb      	strh	r3, [r7, #28]
 8008f20:	8bbb      	ldrh	r3, [r7, #28]
 8008f22:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f26:	83bb      	strh	r3, [r7, #28]
 8008f28:	8bbb      	ldrh	r3, [r7, #28]
 8008f2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f2e:	83bb      	strh	r3, [r7, #28]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	441a      	add	r2, r3
 8008f3a:	8bbb      	ldrh	r3, [r7, #28]
 8008f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8013      	strh	r3, [r2, #0]
 8008f50:	e1ea      	b.n	8009328 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f68:	83fb      	strh	r3, [r7, #30]
 8008f6a:	8bfb      	ldrh	r3, [r7, #30]
 8008f6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f70:	83fb      	strh	r3, [r7, #30]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	441a      	add	r2, r3
 8008f7c:	8bfb      	ldrh	r3, [r7, #30]
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
 8008f92:	e1c9      	b.n	8009328 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	78db      	ldrb	r3, [r3, #3]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d11e      	bne.n	8008fda <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	441a      	add	r2, r3
 8008fc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fcc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	8013      	strh	r3, [r2, #0]
 8008fd8:	e01d      	b.n	8009016 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	441a      	add	r2, r3
 8008ffe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800900a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800900e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009020:	b29b      	uxth	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009026:	4413      	add	r3, r2
 8009028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	011a      	lsls	r2, r3, #4
 8009030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009032:	4413      	add	r3, r2
 8009034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	891b      	ldrh	r3, [r3, #8]
 800903e:	085b      	lsrs	r3, r3, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	b29a      	uxth	r2, r3
 8009046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009048:	801a      	strh	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	657b      	str	r3, [r7, #84]	@ 0x54
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009054:	b29b      	uxth	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800905a:	4413      	add	r3, r2
 800905c:	657b      	str	r3, [r7, #84]	@ 0x54
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	011a      	lsls	r2, r3, #4
 8009064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009066:	4413      	add	r3, r2
 8009068:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800906c:	653b      	str	r3, [r7, #80]	@ 0x50
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	895b      	ldrh	r3, [r3, #10]
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800907c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	2b00      	cmp	r3, #0
 8009084:	f040 8093 	bne.w	80091ae <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800909c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01b      	beq.n	80090dc <USB_ActivateEndpoint+0x524>
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	441a      	add	r2, r3
 80090c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80090c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d8:	b29b      	uxth	r3, r3
 80090da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80090ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80090ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01b      	beq.n	800912c <USB_ActivateEndpoint+0x574>
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	b29b      	uxth	r3, r3
 8009102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	441a      	add	r2, r3
 8009116:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009128:	b29b      	uxth	r3, r3
 800912a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800913e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009142:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009144:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009146:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800914a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800914c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800914e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009152:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	441a      	add	r2, r3
 800915e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800916c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009170:	b29b      	uxth	r3, r3
 8009172:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800918a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	441a      	add	r2, r3
 8009196:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800919c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	8013      	strh	r3, [r2, #0]
 80091ac:	e0bc      	b.n	8009328 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80091be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80091c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01d      	beq.n	8009206 <USB_ActivateEndpoint+0x64e>
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	441a      	add	r2, r3
 80091ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80091f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009202:	b29b      	uxth	r3, r3
 8009204:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009216:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800921a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01d      	beq.n	800925e <USB_ActivateEndpoint+0x6a6>
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	b29b      	uxth	r3, r3
 8009230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009238:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	441a      	add	r2, r3
 8009246:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800924a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800924e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009256:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800925a:	b29b      	uxth	r3, r3
 800925c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	78db      	ldrb	r3, [r3, #3]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d024      	beq.n	80092b0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800927c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009284:	f083 0320 	eor.w	r3, r3, #32
 8009288:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	441a      	add	r2, r3
 8009296:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800929a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800929e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	8013      	strh	r3, [r2, #0]
 80092ae:	e01d      	b.n	80092ec <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	441a      	add	r2, r3
 80092d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80092d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009302:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	441a      	add	r2, r3
 8009310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009324:	b29b      	uxth	r3, r3
 8009326:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009328:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800932c:	4618      	mov	r0, r3
 800932e:	3774      	adds	r7, #116	@ 0x74
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop

08009338 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009338:	b480      	push	{r7}
 800933a:	b08d      	sub	sp, #52	@ 0x34
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	7b1b      	ldrb	r3, [r3, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 808e 	bne.w	8009468 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d044      	beq.n	80093de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	81bb      	strh	r3, [r7, #12]
 8009362:	89bb      	ldrh	r3, [r7, #12]
 8009364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01b      	beq.n	80093a4 <USB_DeactivateEndpoint+0x6c>
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800937e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009382:	817b      	strh	r3, [r7, #10]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	897b      	ldrh	r3, [r7, #10]
 8009390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ba:	813b      	strh	r3, [r7, #8]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	441a      	add	r2, r3
 80093c6:	893b      	ldrh	r3, [r7, #8]
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]
 80093dc:	e192      	b.n	8009704 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	827b      	strh	r3, [r7, #18]
 80093ec:	8a7b      	ldrh	r3, [r7, #18]
 80093ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01b      	beq.n	800942e <USB_DeactivateEndpoint+0xf6>
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	b29b      	uxth	r3, r3
 8009404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940c:	823b      	strh	r3, [r7, #16]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	441a      	add	r2, r3
 8009418:	8a3b      	ldrh	r3, [r7, #16]
 800941a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800941e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009422:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942a:	b29b      	uxth	r3, r3
 800942c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009444:	81fb      	strh	r3, [r7, #14]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800945a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009462:	b29b      	uxth	r3, r3
 8009464:	8013      	strh	r3, [r2, #0]
 8009466:	e14d      	b.n	8009704 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 80a5 	bne.w	80095bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	843b      	strh	r3, [r7, #32]
 8009480:	8c3b      	ldrh	r3, [r7, #32]
 8009482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d01b      	beq.n	80094c2 <USB_DeactivateEndpoint+0x18a>
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800949c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a0:	83fb      	strh	r3, [r7, #30]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	441a      	add	r2, r3
 80094ac:	8bfb      	ldrh	r3, [r7, #30]
 80094ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	83bb      	strh	r3, [r7, #28]
 80094d0:	8bbb      	ldrh	r3, [r7, #28]
 80094d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01b      	beq.n	8009512 <USB_DeactivateEndpoint+0x1da>
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f0:	837b      	strh	r3, [r7, #26]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	441a      	add	r2, r3
 80094fc:	8b7b      	ldrh	r3, [r7, #26]
 80094fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800950a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800950e:	b29b      	uxth	r3, r3
 8009510:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009528:	833b      	strh	r3, [r7, #24]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	441a      	add	r2, r3
 8009534:	8b3b      	ldrh	r3, [r7, #24]
 8009536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800953a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800953e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009542:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009546:	b29b      	uxth	r3, r3
 8009548:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800955c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009560:	82fb      	strh	r3, [r7, #22]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	8afb      	ldrh	r3, [r7, #22]
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800957a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009598:	82bb      	strh	r3, [r7, #20]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	441a      	add	r2, r3
 80095a4:	8abb      	ldrh	r3, [r7, #20]
 80095a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	8013      	strh	r3, [r2, #0]
 80095ba:	e0a3      	b.n	8009704 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80095ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80095cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <USB_DeactivateEndpoint+0x2d4>
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009600:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800961a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800961c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d01b      	beq.n	800965c <USB_DeactivateEndpoint+0x324>
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800963a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	441a      	add	r2, r3
 8009646:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800964c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009654:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009658:	b29b      	uxth	r3, r3
 800965a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800966e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009672:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	441a      	add	r2, r3
 800967e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800968c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009690:	b29b      	uxth	r3, r3
 8009692:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	441a      	add	r2, r3
 80096b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	441a      	add	r2, r3
 80096ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009700:	b29b      	uxth	r3, r3
 8009702:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3734      	adds	r7, #52	@ 0x34
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr

08009710 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b0c2      	sub	sp, #264	@ 0x108
 8009714:	af00      	add	r7, sp, #0
 8009716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800971e:	6018      	str	r0, [r3, #0]
 8009720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009728:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800972a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b01      	cmp	r3, #1
 8009738:	f040 86b7 	bne.w	800a4aa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800973c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699a      	ldr	r2, [r3, #24]
 8009748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	429a      	cmp	r2, r3
 8009756:	d908      	bls.n	800976a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009768:	e007      	b.n	800977a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800976a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800977a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	7b1b      	ldrb	r3, [r3, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d13a      	bne.n	8009800 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800978a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800978e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6959      	ldr	r1, [r3, #20]
 8009796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	88da      	ldrh	r2, [r3, #6]
 80097a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097b0:	6800      	ldr	r0, [r0, #0]
 80097b2:	f001 fc9c 	bl	800b0ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80097b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	4413      	add	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	011a      	lsls	r2, r3, #4
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	4413      	add	r3, r2
 80097ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	801a      	strh	r2, [r3, #0]
 80097fc:	f000 be1f 	b.w	800a43e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	78db      	ldrb	r3, [r3, #3]
 800980c:	2b02      	cmp	r3, #2
 800980e:	f040 8462 	bne.w	800a0d6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6a1a      	ldr	r2, [r3, #32]
 800981e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	429a      	cmp	r2, r3
 800982c:	f240 83df 	bls.w	8009fee <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	b29b      	uxth	r3, r3
 800984e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009856:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800985a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	441a      	add	r2, r3
 8009874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800987c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009880:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009888:	b29b      	uxth	r3, r3
 800988a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800988c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6a1a      	ldr	r2, [r3, #32]
 8009898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989c:	1ad2      	subs	r2, r2, r3
 800989e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 81c7 	beq.w	8009c60 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d177      	bne.n	80099de <USB_EPStartXfer+0x2ce>
 80098ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009908:	b29b      	uxth	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	4413      	add	r3, r2
 8009910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	011a      	lsls	r2, r3, #4
 8009920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009922:	4413      	add	r3, r2
 8009924:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009928:	627b      	str	r3, [r7, #36]	@ 0x24
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009934:	b29a      	uxth	r2, r3
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009940:	d921      	bls.n	8009986 <USB_EPStartXfer+0x276>
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009946:	095b      	lsrs	r3, r3, #5
 8009948:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	f003 031f 	and.w	r3, r3, #31
 8009954:	2b00      	cmp	r3, #0
 8009956:	d104      	bne.n	8009962 <USB_EPStartXfer+0x252>
 8009958:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800995c:	3b01      	subs	r3, #1
 800995e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	b29a      	uxth	r2, r3
 8009968:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800996c:	b29b      	uxth	r3, r3
 800996e:	029b      	lsls	r3, r3, #10
 8009970:	b29b      	uxth	r3, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	b29b      	uxth	r3, r3
 8009976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800997a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800997e:	b29a      	uxth	r2, r3
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	e050      	b.n	8009a28 <USB_EPStartXfer+0x318>
 8009986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10a      	bne.n	80099a4 <USB_EPStartXfer+0x294>
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999c:	b29a      	uxth	r2, r3
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	e041      	b.n	8009a28 <USB_EPStartXfer+0x318>
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a8:	085b      	lsrs	r3, r3, #1
 80099aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80099ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d004      	beq.n	80099c4 <USB_EPStartXfer+0x2b4>
 80099ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80099be:	3301      	adds	r3, #1
 80099c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	029b      	lsls	r3, r3, #10
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4313      	orrs	r3, r2
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	801a      	strh	r2, [r3, #0]
 80099dc:	e024      	b.n	8009a28 <USB_EPStartXfer+0x318>
 80099de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d11c      	bne.n	8009a28 <USB_EPStartXfer+0x318>
 80099ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	461a      	mov	r2, r3
 8009a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a02:	4413      	add	r3, r2
 8009a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	011a      	lsls	r2, r3, #4
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	4413      	add	r3, r2
 8009a18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	895b      	ldrh	r3, [r3, #10]
 8009a34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6959      	ldr	r1, [r3, #20]
 8009a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a4e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a56:	6800      	ldr	r0, [r0, #0]
 8009a58:	f001 fb49 	bl	800b0ee <USB_WritePMA>
            ep->xfer_buff += len;
 8009a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	695a      	ldr	r2, [r3, #20]
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6c:	441a      	add	r2, r3
 8009a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6a1a      	ldr	r2, [r3, #32]
 8009a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d90f      	bls.n	8009ab6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6a1a      	ldr	r2, [r3, #32]
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa6:	1ad2      	subs	r2, r2, r3
 8009aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	621a      	str	r2, [r3, #32]
 8009ab4:	e00e      	b.n	8009ad4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d177      	bne.n	8009bd4 <USB_EPStartXfer+0x4c4>
 8009ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	61bb      	str	r3, [r7, #24]
 8009af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	4413      	add	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	011a      	lsls	r2, r3, #4
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	801a      	strh	r2, [r3, #0]
 8009b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b36:	d921      	bls.n	8009b7c <USB_EPStartXfer+0x46c>
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3c:	095b      	lsrs	r3, r3, #5
 8009b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b46:	f003 031f 	and.w	r3, r3, #31
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d104      	bne.n	8009b58 <USB_EPStartXfer+0x448>
 8009b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b52:	3b01      	subs	r3, #1
 8009b54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	029b      	lsls	r3, r3, #10
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	e056      	b.n	8009c2a <USB_EPStartXfer+0x51a>
 8009b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <USB_EPStartXfer+0x48a>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	801a      	strh	r2, [r3, #0]
 8009b98:	e047      	b.n	8009c2a <USB_EPStartXfer+0x51a>
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9e:	085b      	lsrs	r3, r3, #1
 8009ba0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <USB_EPStartXfer+0x4aa>
 8009bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	029b      	lsls	r3, r3, #10
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	801a      	strh	r2, [r3, #0]
 8009bd2:	e02a      	b.n	8009c2a <USB_EPStartXfer+0x51a>
 8009bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	785b      	ldrb	r3, [r3, #1]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d122      	bne.n	8009c2a <USB_EPStartXfer+0x51a>
 8009be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	623b      	str	r3, [r7, #32]
 8009bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	461a      	mov	r2, r3
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	4413      	add	r3, r2
 8009c06:	623b      	str	r3, [r7, #32]
 8009c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	011a      	lsls	r2, r3, #4
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c1e:	61fb      	str	r3, [r7, #28]
 8009c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	891b      	ldrh	r3, [r3, #8]
 8009c36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6959      	ldr	r1, [r3, #20]
 8009c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c58:	6800      	ldr	r0, [r0, #0]
 8009c5a:	f001 fa48 	bl	800b0ee <USB_WritePMA>
 8009c5e:	e3ee      	b.n	800a43e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d177      	bne.n	8009d60 <USB_EPStartXfer+0x650>
 8009c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c90:	4413      	add	r3, r2
 8009c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	011a      	lsls	r2, r3, #4
 8009ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cc2:	d921      	bls.n	8009d08 <USB_EPStartXfer+0x5f8>
 8009cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd2:	f003 031f 	and.w	r3, r3, #31
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <USB_EPStartXfer+0x5d4>
 8009cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	029b      	lsls	r3, r3, #10
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	e056      	b.n	8009db6 <USB_EPStartXfer+0x6a6>
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <USB_EPStartXfer+0x616>
 8009d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e047      	b.n	8009db6 <USB_EPStartXfer+0x6a6>
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2a:	085b      	lsrs	r3, r3, #1
 8009d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d004      	beq.n	8009d46 <USB_EPStartXfer+0x636>
 8009d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d40:	3301      	adds	r3, #1
 8009d42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	029b      	lsls	r3, r3, #10
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	4313      	orrs	r3, r2
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	e02a      	b.n	8009db6 <USB_EPStartXfer+0x6a6>
 8009d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d122      	bne.n	8009db6 <USB_EPStartXfer+0x6a6>
 8009d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d90:	4413      	add	r3, r2
 8009d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	011a      	lsls	r2, r3, #4
 8009da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009da4:	4413      	add	r3, r2
 8009da6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009db4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	891b      	ldrh	r3, [r3, #8]
 8009dc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6959      	ldr	r1, [r3, #20]
 8009dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ddc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009de0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009de4:	6800      	ldr	r0, [r0, #0]
 8009de6:	f001 f982 	bl	800b0ee <USB_WritePMA>
            ep->xfer_buff += len;
 8009dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	695a      	ldr	r2, [r3, #20]
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfa:	441a      	add	r2, r3
 8009dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6a1a      	ldr	r2, [r3, #32]
 8009e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d90f      	bls.n	8009e44 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6a1a      	ldr	r2, [r3, #32]
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	621a      	str	r2, [r3, #32]
 8009e42:	e00e      	b.n	8009e62 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	785b      	ldrb	r3, [r3, #1]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d177      	bne.n	8009f6e <USB_EPStartXfer+0x85e>
 8009e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	4413      	add	r3, r2
 8009ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	011a      	lsls	r2, r3, #4
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ece:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ed0:	d921      	bls.n	8009f16 <USB_EPStartXfer+0x806>
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <USB_EPStartXfer+0x7e2>
 8009ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eec:	3b01      	subs	r3, #1
 8009eee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	029b      	lsls	r3, r3, #10
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4313      	orrs	r3, r2
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	e050      	b.n	8009fb8 <USB_EPStartXfer+0x8a8>
 8009f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <USB_EPStartXfer+0x824>
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f30:	801a      	strh	r2, [r3, #0]
 8009f32:	e041      	b.n	8009fb8 <USB_EPStartXfer+0x8a8>
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <USB_EPStartXfer+0x844>
 8009f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f4e:	3301      	adds	r3, #1
 8009f50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	029b      	lsls	r3, r3, #10
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4313      	orrs	r3, r2
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	e024      	b.n	8009fb8 <USB_EPStartXfer+0x8a8>
 8009f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d11c      	bne.n	8009fb8 <USB_EPStartXfer+0x8a8>
 8009f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f92:	4413      	add	r3, r2
 8009f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	011a      	lsls	r2, r3, #4
 8009fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	895b      	ldrh	r3, [r3, #10]
 8009fc4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6959      	ldr	r1, [r3, #20]
 8009fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009fde:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009fe2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009fe6:	6800      	ldr	r0, [r0, #0]
 8009fe8:	f001 f881 	bl	800b0ee <USB_WritePMA>
 8009fec:	e227      	b.n	800a43e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a024:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	441a      	add	r2, r3
 800a042:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a04a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a056:	b29b      	uxth	r3, r3
 800a058:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a05e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a06a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a074:	b29b      	uxth	r3, r3
 800a076:	461a      	mov	r2, r3
 800a078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a07a:	4413      	add	r3, r2
 800a07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	011a      	lsls	r2, r3, #4
 800a08c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a08e:	4413      	add	r3, r2
 800a090:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a094:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a09e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	891b      	ldrh	r3, [r3, #8]
 800a0ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6959      	ldr	r1, [r3, #20]
 800a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0ce:	6800      	ldr	r0, [r0, #0]
 800a0d0:	f001 f80d 	bl	800b0ee <USB_WritePMA>
 800a0d4:	e1b3      	b.n	800a43e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a1a      	ldr	r2, [r3, #32]
 800a0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e6:	1ad2      	subs	r2, r2, r3
 800a0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 80c6 	beq.w	800a2a8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	673b      	str	r3, [r7, #112]	@ 0x70
 800a128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a12c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	785b      	ldrb	r3, [r3, #1]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d177      	bne.n	800a228 <USB_EPStartXfer+0xb18>
 800a138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a148:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a152:	b29b      	uxth	r3, r3
 800a154:	461a      	mov	r2, r3
 800a156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a158:	4413      	add	r3, r2
 800a15a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a15c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	011a      	lsls	r2, r3, #4
 800a16a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a16c:	4413      	add	r3, r2
 800a16e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a172:	667b      	str	r3, [r7, #100]	@ 0x64
 800a174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a17e:	b29a      	uxth	r2, r3
 800a180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a182:	801a      	strh	r2, [r3, #0]
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a188:	2b3e      	cmp	r3, #62	@ 0x3e
 800a18a:	d921      	bls.n	800a1d0 <USB_EPStartXfer+0xac0>
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a190:	095b      	lsrs	r3, r3, #5
 800a192:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19a:	f003 031f 	and.w	r3, r3, #31
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d104      	bne.n	800a1ac <USB_EPStartXfer+0xa9c>
 800a1a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	029b      	lsls	r3, r3, #10
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1cc:	801a      	strh	r2, [r3, #0]
 800a1ce:	e050      	b.n	800a272 <USB_EPStartXfer+0xb62>
 800a1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <USB_EPStartXfer+0xade>
 800a1d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1ea:	801a      	strh	r2, [r3, #0]
 800a1ec:	e041      	b.n	800a272 <USB_EPStartXfer+0xb62>
 800a1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f2:	085b      	lsrs	r3, r3, #1
 800a1f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d004      	beq.n	800a20e <USB_EPStartXfer+0xafe>
 800a204:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a208:	3301      	adds	r3, #1
 800a20a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a20e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29a      	uxth	r2, r3
 800a214:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a218:	b29b      	uxth	r3, r3
 800a21a:	029b      	lsls	r3, r3, #10
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4313      	orrs	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a224:	801a      	strh	r2, [r3, #0]
 800a226:	e024      	b.n	800a272 <USB_EPStartXfer+0xb62>
 800a228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	785b      	ldrb	r3, [r3, #1]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d11c      	bne.n	800a272 <USB_EPStartXfer+0xb62>
 800a238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a23c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a246:	b29b      	uxth	r3, r3
 800a248:	461a      	mov	r2, r3
 800a24a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a24c:	4413      	add	r3, r2
 800a24e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	011a      	lsls	r2, r3, #4
 800a25e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a260:	4413      	add	r3, r2
 800a262:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a270:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	895b      	ldrh	r3, [r3, #10]
 800a27e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6959      	ldr	r1, [r3, #20]
 800a28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a292:	b29b      	uxth	r3, r3
 800a294:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a298:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a29c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a2a0:	6800      	ldr	r0, [r0, #0]
 800a2a2:	f000 ff24 	bl	800b0ee <USB_WritePMA>
 800a2a6:	e0ca      	b.n	800a43e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	785b      	ldrb	r3, [r3, #1]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d177      	bne.n	800a3a8 <USB_EPStartXfer+0xc98>
 800a2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2d8:	4413      	add	r3, r2
 800a2da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	011a      	lsls	r2, r3, #4
 800a2ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a2f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a308:	2b3e      	cmp	r3, #62	@ 0x3e
 800a30a:	d921      	bls.n	800a350 <USB_EPStartXfer+0xc40>
 800a30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31a:	f003 031f 	and.w	r3, r3, #31
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d104      	bne.n	800a32c <USB_EPStartXfer+0xc1c>
 800a322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a326:	3b01      	subs	r3, #1
 800a328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a32c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b29a      	uxth	r2, r3
 800a332:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a336:	b29b      	uxth	r3, r3
 800a338:	029b      	lsls	r3, r3, #10
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a348:	b29a      	uxth	r2, r3
 800a34a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	e05c      	b.n	800a40a <USB_EPStartXfer+0xcfa>
 800a350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <USB_EPStartXfer+0xc5e>
 800a358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a366:	b29a      	uxth	r2, r3
 800a368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a36a:	801a      	strh	r2, [r3, #0]
 800a36c:	e04d      	b.n	800a40a <USB_EPStartXfer+0xcfa>
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <USB_EPStartXfer+0xc7e>
 800a384:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a388:	3301      	adds	r3, #1
 800a38a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a38e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a390:	881b      	ldrh	r3, [r3, #0]
 800a392:	b29a      	uxth	r2, r3
 800a394:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a398:	b29b      	uxth	r3, r3
 800a39a:	029b      	lsls	r3, r3, #10
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	e030      	b.n	800a40a <USB_EPStartXfer+0xcfa>
 800a3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d128      	bne.n	800a40a <USB_EPStartXfer+0xcfa>
 800a3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3dc:	4413      	add	r3, r2
 800a3de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	011a      	lsls	r2, r3, #4
 800a3f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a402:	b29a      	uxth	r2, r3
 800a404:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a408:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	891b      	ldrh	r3, [r3, #8]
 800a416:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6959      	ldr	r1, [r3, #20]
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a430:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a434:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a438:	6800      	ldr	r0, [r0, #0]
 800a43a:	f000 fe58 	bl	800b0ee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a464:	817b      	strh	r3, [r7, #10]
 800a466:	897b      	ldrh	r3, [r7, #10]
 800a468:	f083 0310 	eor.w	r3, r3, #16
 800a46c:	817b      	strh	r3, [r7, #10]
 800a46e:	897b      	ldrh	r3, [r7, #10]
 800a470:	f083 0320 	eor.w	r3, r3, #32
 800a474:	817b      	strh	r3, [r7, #10]
 800a476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a47a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	441a      	add	r2, r3
 800a490:	897b      	ldrh	r3, [r7, #10]
 800a492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a49a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a49e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	8013      	strh	r3, [r2, #0]
 800a4a6:	f000 bcde 	b.w	800ae66 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	7b1b      	ldrb	r3, [r3, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f040 80bb 	bne.w	800a632 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a4bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d917      	bls.n	800a508 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	699a      	ldr	r2, [r3, #24]
 800a4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f8:	1ad2      	subs	r2, r2, r3
 800a4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	619a      	str	r2, [r3, #24]
 800a506:	e00e      	b.n	800a526 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a51c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2200      	movs	r2, #0
 800a524:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a52a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a542:	b29b      	uxth	r3, r3
 800a544:	461a      	mov	r2, r3
 800a546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a54a:	4413      	add	r3, r2
 800a54c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	011a      	lsls	r2, r3, #4
 800a55e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a562:	4413      	add	r3, r2
 800a564:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a568:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a56c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	b29b      	uxth	r3, r3
 800a574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a57e:	801a      	strh	r2, [r3, #0]
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a584:	2b3e      	cmp	r3, #62	@ 0x3e
 800a586:	d924      	bls.n	800a5d2 <USB_EPStartXfer+0xec2>
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a596:	f003 031f 	and.w	r3, r3, #31
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <USB_EPStartXfer+0xe98>
 800a59e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	029b      	lsls	r3, r3, #10
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5cc:	801a      	strh	r2, [r3, #0]
 800a5ce:	f000 bc10 	b.w	800adf2 <USB_EPStartXfer+0x16e2>
 800a5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10c      	bne.n	800a5f4 <USB_EPStartXfer+0xee4>
 800a5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5f0:	801a      	strh	r2, [r3, #0]
 800a5f2:	e3fe      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f8:	085b      	lsrs	r3, r3, #1
 800a5fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <USB_EPStartXfer+0xf04>
 800a60a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a60e:	3301      	adds	r3, #1
 800a610:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a620:	b29b      	uxth	r3, r3
 800a622:	029b      	lsls	r3, r3, #10
 800a624:	b29b      	uxth	r3, r3
 800a626:	4313      	orrs	r3, r2
 800a628:	b29a      	uxth	r2, r3
 800a62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a62e:	801a      	strh	r2, [r3, #0]
 800a630:	e3df      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	78db      	ldrb	r3, [r3, #3]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f040 8218 	bne.w	800aa74 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f040 809d 	bne.w	800a790 <USB_EPStartXfer+0x1080>
 800a656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a672:	b29b      	uxth	r3, r3
 800a674:	461a      	mov	r2, r3
 800a676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a67a:	4413      	add	r3, r2
 800a67c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	011a      	lsls	r2, r3, #4
 800a68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a692:	4413      	add	r3, r2
 800a694:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a698:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a69c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6be:	d92b      	bls.n	800a718 <USB_EPStartXfer+0x1008>
 800a6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	095b      	lsrs	r3, r3, #5
 800a6ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d104      	bne.n	800a6f0 <USB_EPStartXfer+0xfe0>
 800a6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	029b      	lsls	r3, r3, #10
 800a700:	b29b      	uxth	r3, r3
 800a702:	4313      	orrs	r3, r2
 800a704:	b29b      	uxth	r3, r3
 800a706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a70e:	b29a      	uxth	r2, r3
 800a710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a714:	801a      	strh	r2, [r3, #0]
 800a716:	e070      	b.n	800a7fa <USB_EPStartXfer+0x10ea>
 800a718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10c      	bne.n	800a742 <USB_EPStartXfer+0x1032>
 800a728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a738:	b29a      	uxth	r2, r3
 800a73a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	e05b      	b.n	800a7fa <USB_EPStartXfer+0x10ea>
 800a742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <USB_EPStartXfer+0x1062>
 800a768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76c:	3301      	adds	r3, #1
 800a76e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29a      	uxth	r2, r3
 800a77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a77e:	b29b      	uxth	r3, r3
 800a780:	029b      	lsls	r3, r3, #10
 800a782:	b29b      	uxth	r3, r3
 800a784:	4313      	orrs	r3, r2
 800a786:	b29a      	uxth	r2, r3
 800a788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	e034      	b.n	800a7fa <USB_EPStartXfer+0x10ea>
 800a790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d12c      	bne.n	800a7fa <USB_EPStartXfer+0x10ea>
 800a7a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	011a      	lsls	r2, r3, #4
 800a7d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7dc:	4413      	add	r3, r2
 800a7de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a7e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7f8:	801a      	strh	r2, [r3, #0]
 800a7fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f040 809d 	bne.w	800a954 <USB_EPStartXfer+0x1244>
 800a81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a836:	b29b      	uxth	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a83e:	4413      	add	r3, r2
 800a840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	011a      	lsls	r2, r3, #4
 800a852:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a856:	4413      	add	r3, r2
 800a858:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a85c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	b29b      	uxth	r3, r3
 800a868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a872:	801a      	strh	r2, [r3, #0]
 800a874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2b3e      	cmp	r3, #62	@ 0x3e
 800a882:	d92b      	bls.n	800a8dc <USB_EPStartXfer+0x11cc>
 800a884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	095b      	lsrs	r3, r3, #5
 800a892:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d104      	bne.n	800a8b4 <USB_EPStartXfer+0x11a4>
 800a8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8b8:	881b      	ldrh	r3, [r3, #0]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	029b      	lsls	r3, r3, #10
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8d8:	801a      	strh	r2, [r3, #0]
 800a8da:	e069      	b.n	800a9b0 <USB_EPStartXfer+0x12a0>
 800a8dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10c      	bne.n	800a906 <USB_EPStartXfer+0x11f6>
 800a8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	e054      	b.n	800a9b0 <USB_EPStartXfer+0x12a0>
 800a906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <USB_EPStartXfer+0x1226>
 800a92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a930:	3301      	adds	r3, #1
 800a932:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a936:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a942:	b29b      	uxth	r3, r3
 800a944:	029b      	lsls	r3, r3, #10
 800a946:	b29b      	uxth	r3, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	e02d      	b.n	800a9b0 <USB_EPStartXfer+0x12a0>
 800a954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	785b      	ldrb	r3, [r3, #1]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d125      	bne.n	800a9b0 <USB_EPStartXfer+0x12a0>
 800a964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a972:	b29b      	uxth	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a97a:	4413      	add	r3, r2
 800a97c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	011a      	lsls	r2, r3, #4
 800a98e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a992:	4413      	add	r3, r2
 800a994:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a99c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9ae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 8218 	beq.w	800adf2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a9c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <USB_EPStartXfer+0x12ea>
 800a9ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10d      	bne.n	800aa16 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f040 81f5 	bne.w	800adf2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f040 81ee 	bne.w	800adf2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aa16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa3c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aa40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	441a      	add	r2, r3
 800aa5a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aa5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	8013      	strh	r3, [r2, #0]
 800aa72:	e1be      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	78db      	ldrb	r3, [r3, #3]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	f040 81b4 	bne.w	800adee <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d917      	bls.n	800aad2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800aaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800aab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac2:	1ad2      	subs	r2, r2, r3
 800aac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	619a      	str	r2, [r3, #24]
 800aad0:	e00e      	b.n	800aaf0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800aad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800aae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2200      	movs	r2, #0
 800aaee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aaf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	785b      	ldrb	r3, [r3, #1]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f040 8085 	bne.w	800ac0c <USB_EPStartXfer+0x14fc>
 800ab02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	461a      	mov	r2, r3
 800ab22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab26:	4413      	add	r3, r2
 800ab28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	011a      	lsls	r2, r3, #4
 800ab3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab3e:	4413      	add	r3, r2
 800ab40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ab44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab5a:	801a      	strh	r2, [r3, #0]
 800ab5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab60:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab62:	d923      	bls.n	800abac <USB_EPStartXfer+0x149c>
 800ab64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab72:	f003 031f 	and.w	r3, r3, #31
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d104      	bne.n	800ab84 <USB_EPStartXfer+0x1474>
 800ab7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	029b      	lsls	r3, r3, #10
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4313      	orrs	r3, r2
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	e060      	b.n	800ac6e <USB_EPStartXfer+0x155e>
 800abac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10c      	bne.n	800abce <USB_EPStartXfer+0x14be>
 800abb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abca:	801a      	strh	r2, [r3, #0]
 800abcc:	e04f      	b.n	800ac6e <USB_EPStartXfer+0x155e>
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd2:	085b      	lsrs	r3, r3, #1
 800abd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <USB_EPStartXfer+0x14de>
 800abe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abe8:	3301      	adds	r3, #1
 800abea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800abee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	029b      	lsls	r3, r3, #10
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	4313      	orrs	r3, r2
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	e030      	b.n	800ac6e <USB_EPStartXfer+0x155e>
 800ac0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	785b      	ldrb	r3, [r3, #1]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d128      	bne.n	800ac6e <USB_EPStartXfer+0x155e>
 800ac1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac40:	4413      	add	r3, r2
 800ac42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	011a      	lsls	r2, r3, #4
 800ac54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac58:	4413      	add	r3, r2
 800ac5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac6c:	801a      	strh	r2, [r3, #0]
 800ac6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 8085 	bne.w	800ad98 <USB_EPStartXfer+0x1688>
 800ac8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acaa:	b29b      	uxth	r3, r3
 800acac:	461a      	mov	r2, r3
 800acae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acb2:	4413      	add	r3, r2
 800acb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800acb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	011a      	lsls	r2, r3, #4
 800acc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acca:	4413      	add	r3, r2
 800accc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800acd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800acd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ace6:	801a      	strh	r2, [r3, #0]
 800ace8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acec:	2b3e      	cmp	r3, #62	@ 0x3e
 800acee:	d923      	bls.n	800ad38 <USB_EPStartXfer+0x1628>
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf4:	095b      	lsrs	r3, r3, #5
 800acf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfe:	f003 031f 	and.w	r3, r3, #31
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d104      	bne.n	800ad10 <USB_EPStartXfer+0x1600>
 800ad06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	029b      	lsls	r3, r3, #10
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	4313      	orrs	r3, r2
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad34:	801a      	strh	r2, [r3, #0]
 800ad36:	e05c      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
 800ad38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10c      	bne.n	800ad5a <USB_EPStartXfer+0x164a>
 800ad40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad56:	801a      	strh	r2, [r3, #0]
 800ad58:	e04b      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad5e:	085b      	lsrs	r3, r3, #1
 800ad60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <USB_EPStartXfer+0x166a>
 800ad70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad74:	3301      	adds	r3, #1
 800ad76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	029b      	lsls	r3, r3, #10
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad94:	801a      	strh	r2, [r3, #0]
 800ad96:	e02c      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
 800ad98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d124      	bne.n	800adf2 <USB_EPStartXfer+0x16e2>
 800ada8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	461a      	mov	r2, r3
 800adba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adbe:	4413      	add	r3, r2
 800adc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800adc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	011a      	lsls	r2, r3, #4
 800add2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800add6:	4413      	add	r3, r2
 800add8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800addc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adea:	801a      	strh	r2, [r3, #0]
 800adec:	e001      	b.n	800adf2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e03a      	b.n	800ae68 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	441a      	add	r2, r3
 800ae4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d020      	beq.n	800aec6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae9a:	81bb      	strh	r3, [r7, #12]
 800ae9c:	89bb      	ldrh	r3, [r7, #12]
 800ae9e:	f083 0310 	eor.w	r3, r3, #16
 800aea2:	81bb      	strh	r3, [r7, #12]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	441a      	add	r2, r3
 800aeae:	89bb      	ldrh	r3, [r7, #12]
 800aeb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	8013      	strh	r3, [r2, #0]
 800aec4:	e01f      	b.n	800af06 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aedc:	81fb      	strh	r3, [r7, #14]
 800aede:	89fb      	ldrh	r3, [r7, #14]
 800aee0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aee4:	81fb      	strh	r3, [r7, #14]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	441a      	add	r2, r3
 800aef0:	89fb      	ldrh	r3, [r7, #14]
 800aef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aefa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aefe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af02:	b29b      	uxth	r3, r3
 800af04:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bc80      	pop	{r7}
 800af10:	4770      	bx	lr

0800af12 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af12:	b480      	push	{r7}
 800af14:	b087      	sub	sp, #28
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	7b1b      	ldrb	r3, [r3, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f040 809d 	bne.w	800b060 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d04c      	beq.n	800afc8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	823b      	strh	r3, [r7, #16]
 800af3c:	8a3b      	ldrh	r3, [r7, #16]
 800af3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	d01b      	beq.n	800af7e <USB_EPClearStall+0x6c>
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	b29b      	uxth	r3, r3
 800af54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af5c:	81fb      	strh	r3, [r7, #14]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	441a      	add	r2, r3
 800af68:	89fb      	ldrh	r3, [r7, #14]
 800af6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	78db      	ldrb	r3, [r3, #3]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d06c      	beq.n	800b060 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	b29b      	uxth	r3, r3
 800af94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af9c:	81bb      	strh	r3, [r7, #12]
 800af9e:	89bb      	ldrh	r3, [r7, #12]
 800afa0:	f083 0320 	eor.w	r3, r3, #32
 800afa4:	81bb      	strh	r3, [r7, #12]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	441a      	add	r2, r3
 800afb0:	89bb      	ldrh	r3, [r7, #12]
 800afb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	8013      	strh	r3, [r2, #0]
 800afc6:	e04b      	b.n	800b060 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	82fb      	strh	r3, [r7, #22]
 800afd6:	8afb      	ldrh	r3, [r7, #22]
 800afd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d01b      	beq.n	800b018 <USB_EPClearStall+0x106>
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	b29b      	uxth	r3, r3
 800afee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff6:	82bb      	strh	r3, [r7, #20]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	441a      	add	r2, r3
 800b002:	8abb      	ldrh	r3, [r7, #20]
 800b004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b00c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b014:	b29b      	uxth	r3, r3
 800b016:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b02e:	827b      	strh	r3, [r7, #18]
 800b030:	8a7b      	ldrh	r3, [r7, #18]
 800b032:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b036:	827b      	strh	r3, [r7, #18]
 800b038:	8a7b      	ldrh	r3, [r7, #18]
 800b03a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b03e:	827b      	strh	r3, [r7, #18]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	441a      	add	r2, r3
 800b04a:	8a7b      	ldrh	r3, [r7, #18]
 800b04c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	bc80      	pop	{r7}
 800b06a:	4770      	bx	lr

0800b06c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b078:	78fb      	ldrb	r3, [r7, #3]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d103      	bne.n	800b086 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2280      	movs	r2, #128	@ 0x80
 800b082:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr

0800b092 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bc80      	pop	{r7}
 800b0a4:	4770      	bx	lr

0800b0a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bc80      	pop	{r7}
 800b0b8:	4770      	bx	lr

0800b0ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b085      	sub	sp, #20
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bc80      	pop	{r7}
 800b0d6:	4770      	bx	lr

0800b0d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr

0800b0ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b08b      	sub	sp, #44	@ 0x2c
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	80fb      	strh	r3, [r7, #6]
 800b100:	4613      	mov	r3, r2
 800b102:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b104:	88bb      	ldrh	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	085b      	lsrs	r3, r3, #1
 800b10a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	005a      	lsls	r2, r3, #1
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b120:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24
 800b126:	e01f      	b.n	800b168 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	3301      	adds	r3, #1
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	b21b      	sxth	r3, r3
 800b136:	021b      	lsls	r3, r3, #8
 800b138:	b21a      	sxth	r2, r3
 800b13a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b13e:	4313      	orrs	r3, r2
 800b140:	b21b      	sxth	r3, r3
 800b142:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	8a7a      	ldrh	r2, [r7, #18]
 800b148:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	3302      	adds	r3, #2
 800b14e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	3302      	adds	r3, #2
 800b154:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	3301      	adds	r3, #1
 800b15a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	3301      	adds	r3, #1
 800b160:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b164:	3b01      	subs	r3, #1
 800b166:	627b      	str	r3, [r7, #36]	@ 0x24
 800b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1dc      	bne.n	800b128 <USB_WritePMA+0x3a>
  }
}
 800b16e:	bf00      	nop
 800b170:	bf00      	nop
 800b172:	372c      	adds	r7, #44	@ 0x2c
 800b174:	46bd      	mov	sp, r7
 800b176:	bc80      	pop	{r7}
 800b178:	4770      	bx	lr

0800b17a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b08b      	sub	sp, #44	@ 0x2c
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	4611      	mov	r1, r2
 800b186:	461a      	mov	r2, r3
 800b188:	460b      	mov	r3, r1
 800b18a:	80fb      	strh	r3, [r7, #6]
 800b18c:	4613      	mov	r3, r2
 800b18e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b190:	88bb      	ldrh	r3, [r7, #4]
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	b29b      	uxth	r3, r3
 800b196:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	005a      	lsls	r2, r3, #1
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1b2:	e01b      	b.n	800b1ec <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	3302      	adds	r3, #2
 800b1c0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e0      	bne.n	800b1b4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b1f2:	88bb      	ldrh	r3, [r7, #4]
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	b29b      	uxth	r3, r3
 800b204:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	701a      	strb	r2, [r3, #0]
  }
}
 800b20e:	bf00      	nop
 800b210:	372c      	adds	r7, #44	@ 0x2c
 800b212:	46bd      	mov	sp, r7
 800b214:	bc80      	pop	{r7}
 800b216:	4770      	bx	lr

0800b218 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b21c:	4904      	ldr	r1, [pc, #16]	@ (800b230 <MX_FATFS_Init+0x18>)
 800b21e:	4805      	ldr	r0, [pc, #20]	@ (800b234 <MX_FATFS_Init+0x1c>)
 800b220:	f001 fc12 	bl	800ca48 <FATFS_LinkDriver>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	4b03      	ldr	r3, [pc, #12]	@ (800b238 <MX_FATFS_Init+0x20>)
 800b22a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b22c:	bf00      	nop
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	2000079c 	.word	0x2000079c
 800b234:	20000010 	.word	0x20000010
 800b238:	20000798 	.word	0x20000798

0800b23c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b246:	4b05      	ldr	r3, [pc, #20]	@ (800b25c <USER_initialize+0x20>)
 800b248:	2201      	movs	r2, #1
 800b24a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b24c:	4b03      	ldr	r3, [pc, #12]	@ (800b25c <USER_initialize+0x20>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	bc80      	pop	{r7}
 800b25a:	4770      	bx	lr
 800b25c:	2000000d 	.word	0x2000000d

0800b260 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b26a:	4b05      	ldr	r3, [pc, #20]	@ (800b280 <USER_status+0x20>)
 800b26c:	2201      	movs	r2, #1
 800b26e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b270:	4b03      	ldr	r3, [pc, #12]	@ (800b280 <USER_status+0x20>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b276:	4618      	mov	r0, r3
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bc80      	pop	{r7}
 800b27e:	4770      	bx	lr
 800b280:	2000000d 	.word	0x2000000d

0800b284 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b294:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr

0800b2a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	603b      	str	r3, [r7, #0]
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b2b0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bc80      	pop	{r7}
 800b2ba:	4770      	bx	lr

0800b2bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	603a      	str	r2, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	73fb      	strb	r3, [r7, #15]
    return res;
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bc80      	pop	{r7}
 800b2da:	4770      	bx	lr

0800b2dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	7c1b      	ldrb	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d115      	bne.n	800b320 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b2f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	2181      	movs	r1, #129	@ 0x81
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 fee2 	bl	800d0c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b308:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b30c:	2202      	movs	r2, #2
 800b30e:	2101      	movs	r1, #1
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f001 fed8 	bl	800d0c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b31e:	e012      	b.n	800b346 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b320:	2340      	movs	r3, #64	@ 0x40
 800b322:	2202      	movs	r2, #2
 800b324:	2181      	movs	r1, #129	@ 0x81
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f001 fecd 	bl	800d0c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b332:	2340      	movs	r3, #64	@ 0x40
 800b334:	2202      	movs	r2, #2
 800b336:	2101      	movs	r1, #1
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 fec4 	bl	800d0c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2201      	movs	r2, #1
 800b342:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b346:	2308      	movs	r3, #8
 800b348:	2203      	movs	r2, #3
 800b34a:	2182      	movs	r1, #130	@ 0x82
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 feba 	bl	800d0c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b358:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b35c:	f001 ffda 	bl	800d314 <USBD_static_malloc>
 800b360:	4602      	mov	r2, r0
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b372:	2301      	movs	r3, #1
 800b374:	73fb      	strb	r3, [r7, #15]
 800b376:	e026      	b.n	800b3c6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2200      	movs	r2, #0
 800b396:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	7c1b      	ldrb	r3, [r3, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d109      	bne.n	800b3b6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 ff79 	bl	800d2a6 <USBD_LL_PrepareReceive>
 800b3b4:	e007      	b.n	800b3c6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3bc:	2340      	movs	r3, #64	@ 0x40
 800b3be:	2101      	movs	r1, #1
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 ff70 	bl	800d2a6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b3e0:	2181      	movs	r1, #129	@ 0x81
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fe95 	bl	800d112 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 fe8e 	bl	800d112 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b3fe:	2182      	movs	r1, #130	@ 0x82
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fe86 	bl	800d112 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00e      	beq.n	800b434 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b426:	4618      	mov	r0, r3
 800b428:	f001 ff80 	bl	800d32c <USBD_static_free>
    pdev->pClassData = NULL;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b434:	7bfb      	ldrb	r3, [r7, #15]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b086      	sub	sp, #24
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b464:	2b00      	cmp	r3, #0
 800b466:	d039      	beq.n	800b4dc <USBD_CDC_Setup+0x9e>
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d17f      	bne.n	800b56c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	88db      	ldrh	r3, [r3, #6]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d029      	beq.n	800b4c8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b25b      	sxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	da11      	bge.n	800b4a2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b48a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	88d2      	ldrh	r2, [r2, #6]
 800b490:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b492:	6939      	ldr	r1, [r7, #16]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	88db      	ldrh	r3, [r3, #6]
 800b498:	461a      	mov	r2, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 fa06 	bl	800c8ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b4a0:	e06b      	b.n	800b57a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	785a      	ldrb	r2, [r3, #1]
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	88db      	ldrh	r3, [r3, #6]
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4b8:	6939      	ldr	r1, [r7, #16]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	88db      	ldrh	r3, [r3, #6]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 fa21 	bl	800c908 <USBD_CtlPrepareRx>
      break;
 800b4c6:	e058      	b.n	800b57a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	7850      	ldrb	r0, [r2, #1]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	4798      	blx	r3
      break;
 800b4da:	e04e      	b.n	800b57a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	785b      	ldrb	r3, [r3, #1]
 800b4e0:	2b0b      	cmp	r3, #11
 800b4e2:	d02e      	beq.n	800b542 <USBD_CDC_Setup+0x104>
 800b4e4:	2b0b      	cmp	r3, #11
 800b4e6:	dc38      	bgt.n	800b55a <USBD_CDC_Setup+0x11c>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <USBD_CDC_Setup+0xb4>
 800b4ec:	2b0a      	cmp	r3, #10
 800b4ee:	d014      	beq.n	800b51a <USBD_CDC_Setup+0xdc>
 800b4f0:	e033      	b.n	800b55a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d107      	bne.n	800b50c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b4fc:	f107 030c 	add.w	r3, r7, #12
 800b500:	2202      	movs	r2, #2
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 f9d1 	bl	800c8ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b50a:	e02e      	b.n	800b56a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 f962 	bl	800c7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b514:	2302      	movs	r3, #2
 800b516:	75fb      	strb	r3, [r7, #23]
          break;
 800b518:	e027      	b.n	800b56a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b520:	2b03      	cmp	r3, #3
 800b522:	d107      	bne.n	800b534 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b524:	f107 030f 	add.w	r3, r7, #15
 800b528:	2201      	movs	r2, #1
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 f9bd 	bl	800c8ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b532:	e01a      	b.n	800b56a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 f94e 	bl	800c7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b53c:	2302      	movs	r3, #2
 800b53e:	75fb      	strb	r3, [r7, #23]
          break;
 800b540:	e013      	b.n	800b56a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d00d      	beq.n	800b568 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 f942 	bl	800c7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b554:	2302      	movs	r3, #2
 800b556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b558:	e006      	b.n	800b568 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 f93b 	bl	800c7d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800b562:	2302      	movs	r3, #2
 800b564:	75fb      	strb	r3, [r7, #23]
          break;
 800b566:	e000      	b.n	800b56a <USBD_CDC_Setup+0x12c>
          break;
 800b568:	bf00      	nop
      }
      break;
 800b56a:	e006      	b.n	800b57a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 f932 	bl	800c7d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b574:	2302      	movs	r3, #2
 800b576:	75fb      	strb	r3, [r7, #23]
      break;
 800b578:	bf00      	nop
  }

  return ret;
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b596:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b59e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d03a      	beq.n	800b620 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	331c      	adds	r3, #28
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d029      	beq.n	800b614 <USBD_CDC_DataIn+0x90>
 800b5c0:	78fa      	ldrb	r2, [r7, #3]
 800b5c2:	6879      	ldr	r1, [r7, #4]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	440b      	add	r3, r1
 800b5ce:	331c      	adds	r3, #28
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	78f9      	ldrb	r1, [r7, #3]
 800b5d4:	68b8      	ldr	r0, [r7, #8]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	00db      	lsls	r3, r3, #3
 800b5de:	4403      	add	r3, r0
 800b5e0:	3320      	adds	r3, #32
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5e8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d110      	bne.n	800b614 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b5f2:	78fa      	ldrb	r2, [r7, #3]
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	440b      	add	r3, r1
 800b600:	331c      	adds	r3, #28
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b606:	78f9      	ldrb	r1, [r7, #3]
 800b608:	2300      	movs	r3, #0
 800b60a:	2200      	movs	r2, #0
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 fe27 	bl	800d260 <USBD_LL_Transmit>
 800b612:	e003      	b.n	800b61c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e000      	b.n	800b622 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b620:	2302      	movs	r3, #2
  }
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	460b      	mov	r3, r1
 800b634:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b63c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b63e:	78fb      	ldrb	r3, [r7, #3]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fe52 	bl	800d2ec <USBD_LL_GetRxDataSize>
 800b648:	4602      	mov	r2, r0
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00d      	beq.n	800b676 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b66e:	4611      	mov	r1, r2
 800b670:	4798      	blx	r3

    return USBD_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	e000      	b.n	800b678 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b676:	2302      	movs	r3, #2
  }
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b68e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b696:	2b00      	cmp	r3, #0
 800b698:	d014      	beq.n	800b6c4 <USBD_CDC_EP0_RxReady+0x44>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b6a0:	2bff      	cmp	r3, #255	@ 0xff
 800b6a2:	d00f      	beq.n	800b6c4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b6b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	22ff      	movs	r2, #255	@ 0xff
 800b6c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2243      	movs	r2, #67	@ 0x43
 800b6dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b6de:	4b03      	ldr	r3, [pc, #12]	@ (800b6ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bc80      	pop	{r7}
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	200000ac 	.word	0x200000ac

0800b6f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2243      	movs	r2, #67	@ 0x43
 800b6fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b6fe:	4b03      	ldr	r3, [pc, #12]	@ (800b70c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	bc80      	pop	{r7}
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20000068 	.word	0x20000068

0800b710 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2243      	movs	r2, #67	@ 0x43
 800b71c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b71e:	4b03      	ldr	r3, [pc, #12]	@ (800b72c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	bc80      	pop	{r7}
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	200000f0 	.word	0x200000f0

0800b730 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	220a      	movs	r2, #10
 800b73c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b73e:	4b03      	ldr	r3, [pc, #12]	@ (800b74c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20000024 	.word	0x20000024

0800b750 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b75a:	2302      	movs	r3, #2
 800b75c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d005      	beq.n	800b770 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	bc80      	pop	{r7}
 800b77a:	4770      	bx	lr

0800b77c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b790:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b79a:	88fa      	ldrh	r2, [r7, #6]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bc80      	pop	{r7}
 800b7ac:	4770      	bx	lr

0800b7ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bc80      	pop	{r7}
 800b7d2:	4770      	bx	lr

0800b7d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01c      	beq.n	800b828 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d115      	bne.n	800b824 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b816:	b29b      	uxth	r3, r3
 800b818:	2181      	movs	r1, #129	@ 0x81
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f001 fd20 	bl	800d260 <USBD_LL_Transmit>

      return USBD_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	e002      	b.n	800b82a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b824:	2301      	movs	r3, #1
 800b826:	e000      	b.n	800b82a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b828:	2302      	movs	r3, #2
  }
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b084      	sub	sp, #16
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b840:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d017      	beq.n	800b87c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7c1b      	ldrb	r3, [r3, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b85a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b85e:	2101      	movs	r1, #1
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f001 fd20 	bl	800d2a6 <USBD_LL_PrepareReceive>
 800b866:	e007      	b.n	800b878 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b86e:	2340      	movs	r3, #64	@ 0x40
 800b870:	2101      	movs	r1, #1
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fd17 	bl	800d2a6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	e000      	b.n	800b87e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b87c:	2302      	movs	r3, #2
  }
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60f8      	str	r0, [r7, #12]
 800b88e:	60b9      	str	r1, [r7, #8]
 800b890:	4613      	mov	r3, r2
 800b892:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b89a:	2302      	movs	r3, #2
 800b89c:	e01a      	b.n	800b8d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d003      	beq.n	800b8be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	79fa      	ldrb	r2, [r7, #7]
 800b8ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f001 fb85 	bl	800cfdc <USBD_LL_Init>

  return USBD_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d006      	beq.n	800b8fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73fb      	strb	r3, [r7, #15]
 800b8fc:	e001      	b.n	800b902 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b8fe:	2302      	movs	r3, #2
 800b900:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	bc80      	pop	{r7}
 800b90c:	4770      	bx	lr

0800b90e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 fbba 	bl	800d090 <USBD_LL_Start>

  return USBD_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	bc80      	pop	{r7}
 800b938:	4770      	bx	lr

0800b93a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	460b      	mov	r3, r1
 800b944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b946:	2302      	movs	r3, #2
 800b948:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00c      	beq.n	800b96e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	78fa      	ldrb	r2, [r7, #3]
 800b95e:	4611      	mov	r1, r2
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	4611      	mov	r1, r2
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3

  return USBD_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fed8 	bl	800c766 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b9d2:	f003 031f 	and.w	r3, r3, #31
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d016      	beq.n	800ba08 <USBD_LL_SetupStage+0x6a>
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d81c      	bhi.n	800ba18 <USBD_LL_SetupStage+0x7a>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <USBD_LL_SetupStage+0x4a>
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d008      	beq.n	800b9f8 <USBD_LL_SetupStage+0x5a>
 800b9e6:	e017      	b.n	800ba18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f9cb 	bl	800bd8c <USBD_StdDevReq>
      break;
 800b9f6:	e01a      	b.n	800ba2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fa2d 	bl	800be60 <USBD_StdItfReq>
      break;
 800ba06:	e012      	b.n	800ba2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa6d 	bl	800bef0 <USBD_StdEPReq>
      break;
 800ba16:	e00a      	b.n	800ba2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ba1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f001 fb92 	bl	800d150 <USBD_LL_StallEP>
      break;
 800ba2c:	bf00      	nop
  }

  return USBD_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	460b      	mov	r3, r1
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba46:	7afb      	ldrb	r3, [r7, #11]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d14b      	bne.n	800bae4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d134      	bne.n	800bac8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	68da      	ldr	r2, [r3, #12]
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d919      	bls.n	800ba9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	1ad2      	subs	r2, r2, r3
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d203      	bcs.n	800ba8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	e002      	b.n	800ba92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 ff54 	bl	800c944 <USBD_CtlContinueRx>
 800ba9c:	e038      	b.n	800bb10 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d105      	bne.n	800bac0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 ff51 	bl	800c968 <USBD_CtlSendStatus>
 800bac6:	e023      	b.n	800bb10 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d11e      	bne.n	800bb10 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bada:	2100      	movs	r1, #0
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f001 fb37 	bl	800d150 <USBD_LL_StallEP>
 800bae2:	e015      	b.n	800bb10 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00d      	beq.n	800bb0c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d108      	bne.n	800bb0c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	7afa      	ldrb	r2, [r7, #11]
 800bb04:	4611      	mov	r1, r2
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	4798      	blx	r3
 800bb0a:	e001      	b.n	800bb10 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	e000      	b.n	800bb12 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b086      	sub	sp, #24
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	460b      	mov	r3, r1
 800bb24:	607a      	str	r2, [r7, #4]
 800bb26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb28:	7afb      	ldrb	r3, [r7, #11]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d17f      	bne.n	800bc2e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3314      	adds	r3, #20
 800bb32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d15c      	bne.n	800bbf8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	68da      	ldr	r2, [r3, #12]
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d915      	bls.n	800bb76 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	68da      	ldr	r2, [r3, #12]
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	1ad2      	subs	r2, r2, r3
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 febe 	bl	800c8e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb68:	2300      	movs	r3, #0
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f001 fb99 	bl	800d2a6 <USBD_LL_PrepareReceive>
 800bb74:	e04e      	b.n	800bc14 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	6912      	ldr	r2, [r2, #16]
 800bb7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb82:	fb01 f202 	mul.w	r2, r1, r2
 800bb86:	1a9b      	subs	r3, r3, r2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d11c      	bne.n	800bbc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d316      	bcc.n	800bbc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d20f      	bcs.n	800bbc6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bba6:	2200      	movs	r2, #0
 800bba8:	2100      	movs	r1, #0
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 fe9a 	bl	800c8e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f001 fb71 	bl	800d2a6 <USBD_LL_PrepareReceive>
 800bbc4:	e026      	b.n	800bc14 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d105      	bne.n	800bbe8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bbe8:	2180      	movs	r1, #128	@ 0x80
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f001 fab0 	bl	800d150 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 fecc 	bl	800c98e <USBD_CtlReceiveStatus>
 800bbf6:	e00d      	b.n	800bc14 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d004      	beq.n	800bc0c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d103      	bne.n	800bc14 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc0c:	2180      	movs	r1, #128	@ 0x80
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f001 fa9e 	bl	800d150 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d11d      	bne.n	800bc5a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f7ff fe81 	bl	800b926 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc2c:	e015      	b.n	800bc5a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00d      	beq.n	800bc56 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d108      	bne.n	800bc56 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	7afa      	ldrb	r2, [r7, #11]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	4798      	blx	r3
 800bc54:	e001      	b.n	800bc5a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc56:	2302      	movs	r3, #2
 800bc58:	e000      	b.n	800bc5c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc6c:	2340      	movs	r3, #64	@ 0x40
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2100      	movs	r1, #0
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 fa27 	bl	800d0c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2240      	movs	r2, #64	@ 0x40
 800bc84:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc88:	2340      	movs	r3, #64	@ 0x40
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2180      	movs	r1, #128	@ 0x80
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 fa19 	bl	800d0c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2240      	movs	r2, #64	@ 0x40
 800bc9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d009      	beq.n	800bcdc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	6852      	ldr	r2, [r2, #4]
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4798      	blx	r3
  }

  return USBD_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bc80      	pop	{r7}
 800bd02:	4770      	bx	lr

0800bd04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2204      	movs	r2, #4
 800bd1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bc80      	pop	{r7}
 800bd2a:	4770      	bx	lr

0800bd2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d105      	bne.n	800bd4a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr

0800bd56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d10b      	bne.n	800bd80 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd6e:	69db      	ldr	r3, [r3, #28]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d005      	beq.n	800bd80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bda2:	2b40      	cmp	r3, #64	@ 0x40
 800bda4:	d005      	beq.n	800bdb2 <USBD_StdDevReq+0x26>
 800bda6:	2b40      	cmp	r3, #64	@ 0x40
 800bda8:	d84f      	bhi.n	800be4a <USBD_StdDevReq+0xbe>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d009      	beq.n	800bdc2 <USBD_StdDevReq+0x36>
 800bdae:	2b20      	cmp	r3, #32
 800bdb0:	d14b      	bne.n	800be4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
      break;
 800bdc0:	e048      	b.n	800be54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	785b      	ldrb	r3, [r3, #1]
 800bdc6:	2b09      	cmp	r3, #9
 800bdc8:	d839      	bhi.n	800be3e <USBD_StdDevReq+0xb2>
 800bdca:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd0 <USBD_StdDevReq+0x44>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800be21 	.word	0x0800be21
 800bdd4:	0800be35 	.word	0x0800be35
 800bdd8:	0800be3f 	.word	0x0800be3f
 800bddc:	0800be2b 	.word	0x0800be2b
 800bde0:	0800be3f 	.word	0x0800be3f
 800bde4:	0800be03 	.word	0x0800be03
 800bde8:	0800bdf9 	.word	0x0800bdf9
 800bdec:	0800be3f 	.word	0x0800be3f
 800bdf0:	0800be17 	.word	0x0800be17
 800bdf4:	0800be0d 	.word	0x0800be0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f9dc 	bl	800c1b8 <USBD_GetDescriptor>
          break;
 800be00:	e022      	b.n	800be48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fb3f 	bl	800c488 <USBD_SetAddress>
          break;
 800be0a:	e01d      	b.n	800be48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fb7e 	bl	800c510 <USBD_SetConfig>
          break;
 800be14:	e018      	b.n	800be48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fc07 	bl	800c62c <USBD_GetConfig>
          break;
 800be1e:	e013      	b.n	800be48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fc37 	bl	800c696 <USBD_GetStatus>
          break;
 800be28:	e00e      	b.n	800be48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fc65 	bl	800c6fc <USBD_SetFeature>
          break;
 800be32:	e009      	b.n	800be48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fc74 	bl	800c724 <USBD_ClrFeature>
          break;
 800be3c:	e004      	b.n	800be48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fcc9 	bl	800c7d8 <USBD_CtlError>
          break;
 800be46:	bf00      	nop
      }
      break;
 800be48:	e004      	b.n	800be54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fcc3 	bl	800c7d8 <USBD_CtlError>
      break;
 800be52:	bf00      	nop
  }

  return ret;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop

0800be60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be76:	2b40      	cmp	r3, #64	@ 0x40
 800be78:	d005      	beq.n	800be86 <USBD_StdItfReq+0x26>
 800be7a:	2b40      	cmp	r3, #64	@ 0x40
 800be7c:	d82e      	bhi.n	800bedc <USBD_StdItfReq+0x7c>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <USBD_StdItfReq+0x26>
 800be82:	2b20      	cmp	r3, #32
 800be84:	d12a      	bne.n	800bedc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be8c:	3b01      	subs	r3, #1
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d81d      	bhi.n	800bece <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	889b      	ldrh	r3, [r3, #4]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d813      	bhi.n	800bec4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
 800beaa:	4603      	mov	r3, r0
 800beac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	88db      	ldrh	r3, [r3, #6]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d110      	bne.n	800bed8 <USBD_StdItfReq+0x78>
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10d      	bne.n	800bed8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fd53 	bl	800c968 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bec2:	e009      	b.n	800bed8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fc86 	bl	800c7d8 <USBD_CtlError>
          break;
 800becc:	e004      	b.n	800bed8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fc81 	bl	800c7d8 <USBD_CtlError>
          break;
 800bed6:	e000      	b.n	800beda <USBD_StdItfReq+0x7a>
          break;
 800bed8:	bf00      	nop
      }
      break;
 800beda:	e004      	b.n	800bee6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fc7a 	bl	800c7d8 <USBD_CtlError>
      break;
 800bee4:	bf00      	nop
  }

  return USBD_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	889b      	ldrh	r3, [r3, #4]
 800bf02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf0c:	2b40      	cmp	r3, #64	@ 0x40
 800bf0e:	d007      	beq.n	800bf20 <USBD_StdEPReq+0x30>
 800bf10:	2b40      	cmp	r3, #64	@ 0x40
 800bf12:	f200 8146 	bhi.w	800c1a2 <USBD_StdEPReq+0x2b2>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <USBD_StdEPReq+0x40>
 800bf1a:	2b20      	cmp	r3, #32
 800bf1c:	f040 8141 	bne.w	800c1a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4798      	blx	r3
      break;
 800bf2e:	e13d      	b.n	800c1ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf38:	2b20      	cmp	r3, #32
 800bf3a:	d10a      	bne.n	800bf52 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	4798      	blx	r3
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	e12d      	b.n	800c1ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d007      	beq.n	800bf6a <USBD_StdEPReq+0x7a>
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	f300 811b 	bgt.w	800c196 <USBD_StdEPReq+0x2a6>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d072      	beq.n	800c04a <USBD_StdEPReq+0x15a>
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d03a      	beq.n	800bfde <USBD_StdEPReq+0xee>
 800bf68:	e115      	b.n	800c196 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d002      	beq.n	800bf7a <USBD_StdEPReq+0x8a>
 800bf74:	2b03      	cmp	r3, #3
 800bf76:	d015      	beq.n	800bfa4 <USBD_StdEPReq+0xb4>
 800bf78:	e02b      	b.n	800bfd2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00c      	beq.n	800bf9a <USBD_StdEPReq+0xaa>
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	2b80      	cmp	r3, #128	@ 0x80
 800bf84:	d009      	beq.n	800bf9a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f001 f8e0 	bl	800d150 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf90:	2180      	movs	r1, #128	@ 0x80
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f001 f8dc 	bl	800d150 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf98:	e020      	b.n	800bfdc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fc1b 	bl	800c7d8 <USBD_CtlError>
              break;
 800bfa2:	e01b      	b.n	800bfdc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	885b      	ldrh	r3, [r3, #2]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10e      	bne.n	800bfca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00b      	beq.n	800bfca <USBD_StdEPReq+0xda>
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
 800bfb4:	2b80      	cmp	r3, #128	@ 0x80
 800bfb6:	d008      	beq.n	800bfca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	88db      	ldrh	r3, [r3, #6]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d104      	bne.n	800bfca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bfc0:	7bbb      	ldrb	r3, [r7, #14]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f001 f8c3 	bl	800d150 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fccc 	bl	800c968 <USBD_CtlSendStatus>

              break;
 800bfd0:	e004      	b.n	800bfdc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 fbff 	bl	800c7d8 <USBD_CtlError>
              break;
 800bfda:	bf00      	nop
          }
          break;
 800bfdc:	e0e0      	b.n	800c1a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d002      	beq.n	800bfee <USBD_StdEPReq+0xfe>
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d015      	beq.n	800c018 <USBD_StdEPReq+0x128>
 800bfec:	e026      	b.n	800c03c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfee:	7bbb      	ldrb	r3, [r7, #14]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00c      	beq.n	800c00e <USBD_StdEPReq+0x11e>
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2b80      	cmp	r3, #128	@ 0x80
 800bff8:	d009      	beq.n	800c00e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	4619      	mov	r1, r3
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f001 f8a6 	bl	800d150 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c004:	2180      	movs	r1, #128	@ 0x80
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f001 f8a2 	bl	800d150 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c00c:	e01c      	b.n	800c048 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fbe1 	bl	800c7d8 <USBD_CtlError>
              break;
 800c016:	e017      	b.n	800c048 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	885b      	ldrh	r3, [r3, #2]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d112      	bne.n	800c046 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 f8ad 	bl	800d18e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fc97 	bl	800c968 <USBD_CtlSendStatus>
              }
              break;
 800c03a:	e004      	b.n	800c046 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fbca 	bl	800c7d8 <USBD_CtlError>
              break;
 800c044:	e000      	b.n	800c048 <USBD_StdEPReq+0x158>
              break;
 800c046:	bf00      	nop
          }
          break;
 800c048:	e0aa      	b.n	800c1a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c050:	2b02      	cmp	r3, #2
 800c052:	d002      	beq.n	800c05a <USBD_StdEPReq+0x16a>
 800c054:	2b03      	cmp	r3, #3
 800c056:	d032      	beq.n	800c0be <USBD_StdEPReq+0x1ce>
 800c058:	e097      	b.n	800c18a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <USBD_StdEPReq+0x180>
 800c060:	7bbb      	ldrb	r3, [r7, #14]
 800c062:	2b80      	cmp	r3, #128	@ 0x80
 800c064:	d004      	beq.n	800c070 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fbb5 	bl	800c7d8 <USBD_CtlError>
                break;
 800c06e:	e091      	b.n	800c194 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da0b      	bge.n	800c090 <USBD_StdEPReq+0x1a0>
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	3310      	adds	r3, #16
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	4413      	add	r3, r2
 800c08c:	3304      	adds	r3, #4
 800c08e:	e00b      	b.n	800c0a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fbf8 	bl	800c8ac <USBD_CtlSendData>
              break;
 800c0bc:	e06a      	b.n	800c194 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da11      	bge.n	800c0ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	f003 020f 	and.w	r2, r3, #15
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3318      	adds	r3, #24
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d117      	bne.n	800c110 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fb78 	bl	800c7d8 <USBD_CtlError>
                  break;
 800c0e8:	e054      	b.n	800c194 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	f003 020f 	and.w	r2, r3, #15
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d104      	bne.n	800c110 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fb65 	bl	800c7d8 <USBD_CtlError>
                  break;
 800c10e:	e041      	b.n	800c194 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c114:	2b00      	cmp	r3, #0
 800c116:	da0b      	bge.n	800c130 <USBD_StdEPReq+0x240>
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	3310      	adds	r3, #16
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	4413      	add	r3, r2
 800c12c:	3304      	adds	r3, #4
 800c12e:	e00b      	b.n	800c148 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c136:	4613      	mov	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4413      	add	r3, r2
 800c146:	3304      	adds	r3, #4
 800c148:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <USBD_StdEPReq+0x266>
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	2b80      	cmp	r3, #128	@ 0x80
 800c154:	d103      	bne.n	800c15e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	e00e      	b.n	800c17c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f001 f832 	bl	800d1cc <USBD_LL_IsStallEP>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2201      	movs	r2, #1
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e002      	b.n	800c17c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2202      	movs	r2, #2
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fb92 	bl	800c8ac <USBD_CtlSendData>
              break;
 800c188:	e004      	b.n	800c194 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fb23 	bl	800c7d8 <USBD_CtlError>
              break;
 800c192:	bf00      	nop
          }
          break;
 800c194:	e004      	b.n	800c1a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb1d 	bl	800c7d8 <USBD_CtlError>
          break;
 800c19e:	bf00      	nop
      }
      break;
 800c1a0:	e004      	b.n	800c1ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fb17 	bl	800c7d8 <USBD_CtlError>
      break;
 800c1aa:	bf00      	nop
  }

  return ret;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	885b      	ldrh	r3, [r3, #2]
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	2b06      	cmp	r3, #6
 800c1da:	f200 8128 	bhi.w	800c42e <USBD_GetDescriptor+0x276>
 800c1de:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e4 <USBD_GetDescriptor+0x2c>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c201 	.word	0x0800c201
 800c1e8:	0800c219 	.word	0x0800c219
 800c1ec:	0800c259 	.word	0x0800c259
 800c1f0:	0800c42f 	.word	0x0800c42f
 800c1f4:	0800c42f 	.word	0x0800c42f
 800c1f8:	0800c3cf 	.word	0x0800c3cf
 800c1fc:	0800c3fb 	.word	0x0800c3fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7c12      	ldrb	r2, [r2, #16]
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
      break;
 800c216:	e112      	b.n	800c43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7c1b      	ldrb	r3, [r3, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10d      	bne.n	800c23c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c228:	f107 0208 	add.w	r2, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	2202      	movs	r2, #2
 800c238:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c23a:	e100      	b.n	800c43e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c244:	f107 0208 	add.w	r2, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	2202      	movs	r2, #2
 800c254:	701a      	strb	r2, [r3, #0]
      break;
 800c256:	e0f2      	b.n	800c43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	885b      	ldrh	r3, [r3, #2]
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b05      	cmp	r3, #5
 800c260:	f200 80ac 	bhi.w	800c3bc <USBD_GetDescriptor+0x204>
 800c264:	a201      	add	r2, pc, #4	@ (adr r2, 800c26c <USBD_GetDescriptor+0xb4>)
 800c266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c285 	.word	0x0800c285
 800c270:	0800c2b9 	.word	0x0800c2b9
 800c274:	0800c2ed 	.word	0x0800c2ed
 800c278:	0800c321 	.word	0x0800c321
 800c27c:	0800c355 	.word	0x0800c355
 800c280:	0800c389 	.word	0x0800c389
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00b      	beq.n	800c2a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	7c12      	ldrb	r2, [r2, #16]
 800c29c:	f107 0108 	add.w	r1, r7, #8
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
 800c2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2a6:	e091      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fa94 	bl	800c7d8 <USBD_CtlError>
            err++;
 800c2b0:	7afb      	ldrb	r3, [r7, #11]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2b6:	e089      	b.n	800c3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00b      	beq.n	800c2dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	7c12      	ldrb	r2, [r2, #16]
 800c2d0:	f107 0108 	add.w	r1, r7, #8
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
 800c2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2da:	e077      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa7a 	bl	800c7d8 <USBD_CtlError>
            err++;
 800c2e4:	7afb      	ldrb	r3, [r7, #11]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ea:	e06f      	b.n	800c3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00b      	beq.n	800c310 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	7c12      	ldrb	r2, [r2, #16]
 800c304:	f107 0108 	add.w	r1, r7, #8
 800c308:	4610      	mov	r0, r2
 800c30a:	4798      	blx	r3
 800c30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c30e:	e05d      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fa60 	bl	800c7d8 <USBD_CtlError>
            err++;
 800c318:	7afb      	ldrb	r3, [r7, #11]
 800c31a:	3301      	adds	r3, #1
 800c31c:	72fb      	strb	r3, [r7, #11]
          break;
 800c31e:	e055      	b.n	800c3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	7c12      	ldrb	r2, [r2, #16]
 800c338:	f107 0108 	add.w	r1, r7, #8
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c342:	e043      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa46 	bl	800c7d8 <USBD_CtlError>
            err++;
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	3301      	adds	r3, #1
 800c350:	72fb      	strb	r3, [r7, #11]
          break;
 800c352:	e03b      	b.n	800c3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	7c12      	ldrb	r2, [r2, #16]
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c376:	e029      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fa2c 	bl	800c7d8 <USBD_CtlError>
            err++;
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	3301      	adds	r3, #1
 800c384:	72fb      	strb	r3, [r7, #11]
          break;
 800c386:	e021      	b.n	800c3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00b      	beq.n	800c3ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7c12      	ldrb	r2, [r2, #16]
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3aa:	e00f      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fa12 	bl	800c7d8 <USBD_CtlError>
            err++;
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ba:	e007      	b.n	800c3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa0a 	bl	800c7d8 <USBD_CtlError>
          err++;
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c3ca:	e038      	b.n	800c43e <USBD_GetDescriptor+0x286>
 800c3cc:	e037      	b.n	800c43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	7c1b      	ldrb	r3, [r3, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d109      	bne.n	800c3ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3de:	f107 0208 	add.w	r2, r7, #8
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	4798      	blx	r3
 800c3e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3e8:	e029      	b.n	800c43e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f9f3 	bl	800c7d8 <USBD_CtlError>
        err++;
 800c3f2:	7afb      	ldrb	r3, [r7, #11]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c3f8:	e021      	b.n	800c43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7c1b      	ldrb	r3, [r3, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10d      	bne.n	800c41e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c40a:	f107 0208 	add.w	r2, r7, #8
 800c40e:	4610      	mov	r0, r2
 800c410:	4798      	blx	r3
 800c412:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3301      	adds	r3, #1
 800c418:	2207      	movs	r2, #7
 800c41a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c41c:	e00f      	b.n	800c43e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f9d9 	bl	800c7d8 <USBD_CtlError>
        err++;
 800c426:	7afb      	ldrb	r3, [r7, #11]
 800c428:	3301      	adds	r3, #1
 800c42a:	72fb      	strb	r3, [r7, #11]
      break;
 800c42c:	e007      	b.n	800c43e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f9d1 	bl	800c7d8 <USBD_CtlError>
      err++;
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	3301      	adds	r3, #1
 800c43a:	72fb      	strb	r3, [r7, #11]
      break;
 800c43c:	bf00      	nop
  }

  if (err != 0U)
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d11c      	bne.n	800c47e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c444:	893b      	ldrh	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d011      	beq.n	800c46e <USBD_GetDescriptor+0x2b6>
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	88db      	ldrh	r3, [r3, #6]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00d      	beq.n	800c46e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	88da      	ldrh	r2, [r3, #6]
 800c456:	893b      	ldrh	r3, [r7, #8]
 800c458:	4293      	cmp	r3, r2
 800c45a:	bf28      	it	cs
 800c45c:	4613      	movcs	r3, r2
 800c45e:	b29b      	uxth	r3, r3
 800c460:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c462:	893b      	ldrh	r3, [r7, #8]
 800c464:	461a      	mov	r2, r3
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fa1f 	bl	800c8ac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	88db      	ldrh	r3, [r3, #6]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d104      	bne.n	800c480 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fa76 	bl	800c968 <USBD_CtlSendStatus>
 800c47c:	e000      	b.n	800c480 <USBD_GetDescriptor+0x2c8>
    return;
 800c47e:	bf00      	nop
    }
  }
}
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop

0800c488 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	889b      	ldrh	r3, [r3, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d130      	bne.n	800c4fc <USBD_SetAddress+0x74>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	88db      	ldrh	r3, [r3, #6]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d12c      	bne.n	800c4fc <USBD_SetAddress+0x74>
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	885b      	ldrh	r3, [r3, #2]
 800c4a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4a8:	d828      	bhi.n	800c4fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	885b      	ldrh	r3, [r3, #2]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d104      	bne.n	800c4ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f988 	bl	800c7d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c8:	e01d      	b.n	800c506 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7bfa      	ldrb	r2, [r7, #15]
 800c4ce:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fea3 	bl	800d222 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fa43 	bl	800c968 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d004      	beq.n	800c4f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f0:	e009      	b.n	800c506 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fa:	e004      	b.n	800c506 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f96a 	bl	800c7d8 <USBD_CtlError>
  }
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	885b      	ldrh	r3, [r3, #2]
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	4b41      	ldr	r3, [pc, #260]	@ (800c628 <USBD_SetConfig+0x118>)
 800c522:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c524:	4b40      	ldr	r3, [pc, #256]	@ (800c628 <USBD_SetConfig+0x118>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d904      	bls.n	800c536 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f952 	bl	800c7d8 <USBD_CtlError>
 800c534:	e075      	b.n	800c622 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d002      	beq.n	800c546 <USBD_SetConfig+0x36>
 800c540:	2b03      	cmp	r3, #3
 800c542:	d023      	beq.n	800c58c <USBD_SetConfig+0x7c>
 800c544:	e062      	b.n	800c60c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c546:	4b38      	ldr	r3, [pc, #224]	@ (800c628 <USBD_SetConfig+0x118>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d01a      	beq.n	800c584 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c54e:	4b36      	ldr	r3, [pc, #216]	@ (800c628 <USBD_SetConfig+0x118>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2203      	movs	r2, #3
 800c55c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c560:	4b31      	ldr	r3, [pc, #196]	@ (800c628 <USBD_SetConfig+0x118>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7ff f9e7 	bl	800b93a <USBD_SetClassConfig>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d104      	bne.n	800c57c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f92f 	bl	800c7d8 <USBD_CtlError>
            return;
 800c57a:	e052      	b.n	800c622 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f9f3 	bl	800c968 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c582:	e04e      	b.n	800c622 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f9ef 	bl	800c968 <USBD_CtlSendStatus>
        break;
 800c58a:	e04a      	b.n	800c622 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c58c:	4b26      	ldr	r3, [pc, #152]	@ (800c628 <USBD_SetConfig+0x118>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d112      	bne.n	800c5ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2202      	movs	r2, #2
 800c598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c59c:	4b22      	ldr	r3, [pc, #136]	@ (800c628 <USBD_SetConfig+0x118>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c5a6:	4b20      	ldr	r3, [pc, #128]	@ (800c628 <USBD_SetConfig+0x118>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff f9e3 	bl	800b978 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f9d8 	bl	800c968 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5b8:	e033      	b.n	800c622 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c5ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c628 <USBD_SetConfig+0x118>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d01d      	beq.n	800c604 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff f9d1 	bl	800b978 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c5d6:	4b14      	ldr	r3, [pc, #80]	@ (800c628 <USBD_SetConfig+0x118>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5e0:	4b11      	ldr	r3, [pc, #68]	@ (800c628 <USBD_SetConfig+0x118>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff f9a7 	bl	800b93a <USBD_SetClassConfig>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d104      	bne.n	800c5fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f8ef 	bl	800c7d8 <USBD_CtlError>
            return;
 800c5fa:	e012      	b.n	800c622 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f9b3 	bl	800c968 <USBD_CtlSendStatus>
        break;
 800c602:	e00e      	b.n	800c622 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f9af 	bl	800c968 <USBD_CtlSendStatus>
        break;
 800c60a:	e00a      	b.n	800c622 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f8e2 	bl	800c7d8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c614:	4b04      	ldr	r3, [pc, #16]	@ (800c628 <USBD_SetConfig+0x118>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff f9ac 	bl	800b978 <USBD_ClrClassConfig>
        break;
 800c620:	bf00      	nop
    }
  }
}
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	200007a0 	.word	0x200007a0

0800c62c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	88db      	ldrh	r3, [r3, #6]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d004      	beq.n	800c648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f8c9 	bl	800c7d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c646:	e022      	b.n	800c68e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c64e:	2b02      	cmp	r3, #2
 800c650:	dc02      	bgt.n	800c658 <USBD_GetConfig+0x2c>
 800c652:	2b00      	cmp	r3, #0
 800c654:	dc03      	bgt.n	800c65e <USBD_GetConfig+0x32>
 800c656:	e015      	b.n	800c684 <USBD_GetConfig+0x58>
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d00b      	beq.n	800c674 <USBD_GetConfig+0x48>
 800c65c:	e012      	b.n	800c684 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3308      	adds	r3, #8
 800c668:	2201      	movs	r2, #1
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f91d 	bl	800c8ac <USBD_CtlSendData>
        break;
 800c672:	e00c      	b.n	800c68e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3304      	adds	r3, #4
 800c678:	2201      	movs	r2, #1
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f915 	bl	800c8ac <USBD_CtlSendData>
        break;
 800c682:	e004      	b.n	800c68e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f8a6 	bl	800c7d8 <USBD_CtlError>
        break;
 800c68c:	bf00      	nop
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b082      	sub	sp, #8
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d81e      	bhi.n	800c6ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	88db      	ldrh	r3, [r3, #6]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d004      	beq.n	800c6be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f88e 	bl	800c7d8 <USBD_CtlError>
        break;
 800c6bc:	e01a      	b.n	800c6f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	f043 0202 	orr.w	r2, r3, #2
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	2202      	movs	r2, #2
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f8e2 	bl	800c8ac <USBD_CtlSendData>
      break;
 800c6e8:	e004      	b.n	800c6f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f873 	bl	800c7d8 <USBD_CtlError>
      break;
 800c6f2:	bf00      	nop
  }
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d106      	bne.n	800c71c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f926 	bl	800c968 <USBD_CtlSendStatus>
  }
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c734:	3b01      	subs	r3, #1
 800c736:	2b02      	cmp	r3, #2
 800c738:	d80b      	bhi.n	800c752 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	885b      	ldrh	r3, [r3, #2]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d10c      	bne.n	800c75c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f90c 	bl	800c968 <USBD_CtlSendStatus>
      }
      break;
 800c750:	e004      	b.n	800c75c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f83f 	bl	800c7d8 <USBD_CtlError>
      break;
 800c75a:	e000      	b.n	800c75e <USBD_ClrFeature+0x3a>
      break;
 800c75c:	bf00      	nop
  }
}
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	781a      	ldrb	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	785a      	ldrb	r2, [r3, #1]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	3302      	adds	r3, #2
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3303      	adds	r3, #3
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	b29b      	uxth	r3, r3
 800c792:	4413      	add	r3, r2
 800c794:	b29a      	uxth	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	3304      	adds	r3, #4
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	3305      	adds	r3, #5
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	021b      	lsls	r3, r3, #8
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	4413      	add	r3, r2
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	3306      	adds	r3, #6
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	3307      	adds	r3, #7
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	021b      	lsls	r3, r3, #8
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	4413      	add	r3, r2
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	80da      	strh	r2, [r3, #6]

}
 800c7ce:	bf00      	nop
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bc80      	pop	{r7}
 800c7d6:	4770      	bx	lr

0800c7d8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c7e2:	2180      	movs	r1, #128	@ 0x80
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fcb3 	bl	800d150 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fcaf 	bl	800d150 <USBD_LL_StallEP>
}
 800c7f2:	bf00      	nop
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b086      	sub	sp, #24
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d032      	beq.n	800c876 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f000 f834 	bl	800c87e <USBD_GetLen>
 800c816:	4603      	mov	r3, r0
 800c818:	3301      	adds	r3, #1
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	b29a      	uxth	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	75fa      	strb	r2, [r7, #23]
 800c82a:	461a      	mov	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	4413      	add	r3, r2
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	7812      	ldrb	r2, [r2, #0]
 800c834:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c836:	7dfb      	ldrb	r3, [r7, #23]
 800c838:	1c5a      	adds	r2, r3, #1
 800c83a:	75fa      	strb	r2, [r7, #23]
 800c83c:	461a      	mov	r2, r3
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	4413      	add	r3, r2
 800c842:	2203      	movs	r2, #3
 800c844:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c846:	e012      	b.n	800c86e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	60fa      	str	r2, [r7, #12]
 800c84e:	7dfa      	ldrb	r2, [r7, #23]
 800c850:	1c51      	adds	r1, r2, #1
 800c852:	75f9      	strb	r1, [r7, #23]
 800c854:	4611      	mov	r1, r2
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	440a      	add	r2, r1
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	75fa      	strb	r2, [r7, #23]
 800c864:	461a      	mov	r2, r3
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	4413      	add	r3, r2
 800c86a:	2200      	movs	r2, #0
 800c86c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1e8      	bne.n	800c848 <USBD_GetString+0x4e>
    }
  }
}
 800c876:	bf00      	nop
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c87e:	b480      	push	{r7}
 800c880:	b085      	sub	sp, #20
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c886:	2300      	movs	r3, #0
 800c888:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c88a:	e005      	b.n	800c898 <USBD_GetLen+0x1a>
  {
    len++;
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
 800c88e:	3301      	adds	r3, #1
 800c890:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3301      	adds	r3, #1
 800c896:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1f5      	bne.n	800c88c <USBD_GetLen+0xe>
  }

  return len;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bc80      	pop	{r7}
 800c8aa:	4770      	bx	lr

0800c8ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c8c2:	88fa      	ldrh	r2, [r7, #6]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c8c8:	88fa      	ldrh	r2, [r7, #6]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8ce:	88fb      	ldrh	r3, [r7, #6]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f000 fcc3 	bl	800d260 <USBD_LL_Transmit>

  return USBD_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8f2:	88fb      	ldrh	r3, [r7, #6]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 fcb1 	bl	800d260 <USBD_LL_Transmit>

  return USBD_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	4613      	mov	r3, r2
 800c914:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2203      	movs	r2, #3
 800c91a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c91e:	88fa      	ldrh	r2, [r7, #6]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c926:	88fa      	ldrh	r2, [r7, #6]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c92e:	88fb      	ldrh	r3, [r7, #6]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	2100      	movs	r1, #0
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 fcb6 	bl	800d2a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	4613      	mov	r3, r2
 800c950:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c952:	88fb      	ldrh	r3, [r7, #6]
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	2100      	movs	r1, #0
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f000 fca4 	bl	800d2a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2204      	movs	r2, #4
 800c974:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c978:	2300      	movs	r3, #0
 800c97a:	2200      	movs	r2, #0
 800c97c:	2100      	movs	r1, #0
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fc6e 	bl	800d260 <USBD_LL_Transmit>

  return USBD_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2205      	movs	r2, #5
 800c99a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c99e:	2300      	movs	r3, #0
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fc7e 	bl	800d2a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c9ca:	4b1e      	ldr	r3, [pc, #120]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9cc:	7a5b      	ldrb	r3, [r3, #9]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d831      	bhi.n	800ca38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c9d4:	4b1b      	ldr	r3, [pc, #108]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9d6:	7a5b      	ldrb	r3, [r3, #9]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	461a      	mov	r2, r3
 800c9dc:	4b19      	ldr	r3, [pc, #100]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9de:	2100      	movs	r1, #0
 800c9e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c9e2:	4b18      	ldr	r3, [pc, #96]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9e4:	7a5b      	ldrb	r3, [r3, #9]
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	4a16      	ldr	r2, [pc, #88]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9f4:	7a5b      	ldrb	r3, [r3, #9]
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4b12      	ldr	r3, [pc, #72]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800c9fc:	4413      	add	r3, r2
 800c9fe:	79fa      	ldrb	r2, [r7, #7]
 800ca00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca02:	4b10      	ldr	r3, [pc, #64]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800ca04:	7a5b      	ldrb	r3, [r3, #9]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	b2d1      	uxtb	r1, r2
 800ca0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ca44 <FATFS_LinkDriverEx+0x90>)
 800ca0e:	7251      	strb	r1, [r2, #9]
 800ca10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca12:	7dbb      	ldrb	r3, [r7, #22]
 800ca14:	3330      	adds	r3, #48	@ 0x30
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	223a      	movs	r2, #58	@ 0x3a
 800ca22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	3302      	adds	r3, #2
 800ca28:	222f      	movs	r2, #47	@ 0x2f
 800ca2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	3303      	adds	r3, #3
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bc80      	pop	{r7}
 800ca42:	4770      	bx	lr
 800ca44:	200007a4 	.word	0x200007a4

0800ca48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca52:	2200      	movs	r2, #0
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff ffac 	bl	800c9b4 <FATFS_LinkDriverEx>
 800ca5c:	4603      	mov	r3, r0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
	...

0800ca68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4912      	ldr	r1, [pc, #72]	@ (800cab8 <MX_USB_DEVICE_Init+0x50>)
 800ca70:	4812      	ldr	r0, [pc, #72]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800ca72:	f7fe ff08 	bl	800b886 <USBD_Init>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca7c:	f7f6 fcf4 	bl	8003468 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca80:	490f      	ldr	r1, [pc, #60]	@ (800cac0 <MX_USB_DEVICE_Init+0x58>)
 800ca82:	480e      	ldr	r0, [pc, #56]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800ca84:	f7fe ff2a 	bl	800b8dc <USBD_RegisterClass>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca8e:	f7f6 fceb 	bl	8003468 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca92:	490c      	ldr	r1, [pc, #48]	@ (800cac4 <MX_USB_DEVICE_Init+0x5c>)
 800ca94:	4809      	ldr	r0, [pc, #36]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800ca96:	f7fe fe5b 	bl	800b750 <USBD_CDC_RegisterInterface>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800caa0:	f7f6 fce2 	bl	8003468 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800caa4:	4805      	ldr	r0, [pc, #20]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800caa6:	f7fe ff32 	bl	800b90e <USBD_Start>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cab0:	f7f6 fcda 	bl	8003468 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cab4:	bf00      	nop
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	20000144 	.word	0x20000144
 800cabc:	200007b0 	.word	0x200007b0
 800cac0:	20000030 	.word	0x20000030
 800cac4:	20000134 	.word	0x20000134

0800cac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cacc:	2200      	movs	r2, #0
 800cace:	4905      	ldr	r1, [pc, #20]	@ (800cae4 <CDC_Init_FS+0x1c>)
 800cad0:	4805      	ldr	r0, [pc, #20]	@ (800cae8 <CDC_Init_FS+0x20>)
 800cad2:	f7fe fe53 	bl	800b77c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cad6:	4905      	ldr	r1, [pc, #20]	@ (800caec <CDC_Init_FS+0x24>)
 800cad8:	4803      	ldr	r0, [pc, #12]	@ (800cae8 <CDC_Init_FS+0x20>)
 800cada:	f7fe fe68 	bl	800b7ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	20000e74 	.word	0x20000e74
 800cae8:	200007b0 	.word	0x200007b0
 800caec:	20000a74 	.word	0x20000a74

0800caf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800caf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bc80      	pop	{r7}
 800cafc:	4770      	bx	lr
	...

0800cb00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	6039      	str	r1, [r7, #0]
 800cb0a:	71fb      	strb	r3, [r7, #7]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800cb10:	79fb      	ldrb	r3, [r7, #7]
 800cb12:	2b23      	cmp	r3, #35	@ 0x23
 800cb14:	d84a      	bhi.n	800cbac <CDC_Control_FS+0xac>
 800cb16:	a201      	add	r2, pc, #4	@ (adr r2, 800cb1c <CDC_Control_FS+0x1c>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cbad 	.word	0x0800cbad
 800cb20:	0800cbad 	.word	0x0800cbad
 800cb24:	0800cbad 	.word	0x0800cbad
 800cb28:	0800cbad 	.word	0x0800cbad
 800cb2c:	0800cbad 	.word	0x0800cbad
 800cb30:	0800cbad 	.word	0x0800cbad
 800cb34:	0800cbad 	.word	0x0800cbad
 800cb38:	0800cbad 	.word	0x0800cbad
 800cb3c:	0800cbad 	.word	0x0800cbad
 800cb40:	0800cbad 	.word	0x0800cbad
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cbad 	.word	0x0800cbad
 800cb4c:	0800cbad 	.word	0x0800cbad
 800cb50:	0800cbad 	.word	0x0800cbad
 800cb54:	0800cbad 	.word	0x0800cbad
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cbad 	.word	0x0800cbad
 800cb60:	0800cbad 	.word	0x0800cbad
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cbad 	.word	0x0800cbad
 800cb70:	0800cbad 	.word	0x0800cbad
 800cb74:	0800cbad 	.word	0x0800cbad
 800cb78:	0800cbad 	.word	0x0800cbad
 800cb7c:	0800cbad 	.word	0x0800cbad
 800cb80:	0800cbad 	.word	0x0800cbad
 800cb84:	0800cbad 	.word	0x0800cbad
 800cb88:	0800cbad 	.word	0x0800cbad
 800cb8c:	0800cbad 	.word	0x0800cbad
 800cb90:	0800cbad 	.word	0x0800cbad
 800cb94:	0800cbad 	.word	0x0800cbad
 800cb98:	0800cbad 	.word	0x0800cbad
 800cb9c:	0800cbad 	.word	0x0800cbad
 800cba0:	0800cbad 	.word	0x0800cbad
 800cba4:	0800cbad 	.word	0x0800cbad
 800cba8:	0800cbad 	.word	0x0800cbad
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cbac:	bf00      	nop
  }

  return (USBD_OK);
 800cbae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bc80      	pop	{r7}
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop

0800cbbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	4808      	ldr	r0, [pc, #32]	@ (800cbec <CDC_Receive_FS+0x30>)
 800cbca:	f7fe fdf0 	bl	800b7ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbce:	4807      	ldr	r0, [pc, #28]	@ (800cbec <CDC_Receive_FS+0x30>)
 800cbd0:	f7fe fe2f 	bl	800b832 <USBD_CDC_ReceivePacket>
  // Panggil fungsi callback di main.c
  CDC_On_Receive(Buf, *Len);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4619      	mov	r1, r3
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7f6 fbf2 	bl	80033c4 <CDC_On_Receive>
  return (USBD_OK);
 800cbe0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200007b0 	.word	0x200007b0

0800cbf0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800cc00:	4b0d      	ldr	r3, [pc, #52]	@ (800cc38 <CDC_Transmit_FS+0x48>)
 800cc02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <CDC_Transmit_FS+0x26>
  {
    return USBD_BUSY;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e00b      	b.n	800cc2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc16:	887b      	ldrh	r3, [r7, #2]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	4806      	ldr	r0, [pc, #24]	@ (800cc38 <CDC_Transmit_FS+0x48>)
 800cc1e:	f7fe fdad 	bl	800b77c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc22:	4805      	ldr	r0, [pc, #20]	@ (800cc38 <CDC_Transmit_FS+0x48>)
 800cc24:	f7fe fdd6 	bl	800b7d4 <USBD_CDC_TransmitPacket>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	200007b0 	.word	0x200007b0

0800cc3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2212      	movs	r2, #18
 800cc4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc4e:	4b03      	ldr	r3, [pc, #12]	@ (800cc5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bc80      	pop	{r7}
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	20000160 	.word	0x20000160

0800cc60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	6039      	str	r1, [r7, #0]
 800cc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2204      	movs	r2, #4
 800cc70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc72:	4b03      	ldr	r3, [pc, #12]	@ (800cc80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bc80      	pop	{r7}
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	20000174 	.word	0x20000174

0800cc84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	6039      	str	r1, [r7, #0]
 800cc8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4907      	ldr	r1, [pc, #28]	@ (800ccb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc9a:	4808      	ldr	r0, [pc, #32]	@ (800ccbc <USBD_FS_ProductStrDescriptor+0x38>)
 800cc9c:	f7ff fdad 	bl	800c7fa <USBD_GetString>
 800cca0:	e004      	b.n	800ccac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	4904      	ldr	r1, [pc, #16]	@ (800ccb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cca6:	4805      	ldr	r0, [pc, #20]	@ (800ccbc <USBD_FS_ProductStrDescriptor+0x38>)
 800cca8:	f7ff fda7 	bl	800c7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccac:	4b02      	ldr	r3, [pc, #8]	@ (800ccb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20001274 	.word	0x20001274
 800ccbc:	080129d0 	.word	0x080129d0

0800ccc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	4904      	ldr	r1, [pc, #16]	@ (800cce0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ccd0:	4804      	ldr	r0, [pc, #16]	@ (800cce4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ccd2:	f7ff fd92 	bl	800c7fa <USBD_GetString>
  return USBD_StrDesc;
 800ccd6:	4b02      	ldr	r3, [pc, #8]	@ (800cce0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20001274 	.word	0x20001274
 800cce4:	080129e8 	.word	0x080129e8

0800cce8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	221a      	movs	r2, #26
 800ccf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccfa:	f000 f843 	bl	800cd84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ccfe:	4b02      	ldr	r3, [pc, #8]	@ (800cd08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	20000178 	.word	0x20000178

0800cd0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	4603      	mov	r3, r0
 800cd14:	6039      	str	r1, [r7, #0]
 800cd16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd18:	79fb      	ldrb	r3, [r7, #7]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d105      	bne.n	800cd2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	4907      	ldr	r1, [pc, #28]	@ (800cd40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd22:	4808      	ldr	r0, [pc, #32]	@ (800cd44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd24:	f7ff fd69 	bl	800c7fa <USBD_GetString>
 800cd28:	e004      	b.n	800cd34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	4904      	ldr	r1, [pc, #16]	@ (800cd40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd2e:	4805      	ldr	r0, [pc, #20]	@ (800cd44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd30:	f7ff fd63 	bl	800c7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd34:	4b02      	ldr	r3, [pc, #8]	@ (800cd40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20001274 	.word	0x20001274
 800cd44:	080129fc 	.word	0x080129fc

0800cd48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	6039      	str	r1, [r7, #0]
 800cd52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd54:	79fb      	ldrb	r3, [r7, #7]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d105      	bne.n	800cd66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4907      	ldr	r1, [pc, #28]	@ (800cd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd5e:	4808      	ldr	r0, [pc, #32]	@ (800cd80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd60:	f7ff fd4b 	bl	800c7fa <USBD_GetString>
 800cd64:	e004      	b.n	800cd70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	4904      	ldr	r1, [pc, #16]	@ (800cd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd6a:	4805      	ldr	r0, [pc, #20]	@ (800cd80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd6c:	f7ff fd45 	bl	800c7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd70:	4b02      	ldr	r3, [pc, #8]	@ (800cd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20001274 	.word	0x20001274
 800cd80:	08012a08 	.word	0x08012a08

0800cd84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc8 <Get_SerialNum+0x44>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd90:	4b0e      	ldr	r3, [pc, #56]	@ (800cdcc <Get_SerialNum+0x48>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd96:	4b0e      	ldr	r3, [pc, #56]	@ (800cdd0 <Get_SerialNum+0x4c>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4413      	add	r3, r2
 800cda2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d009      	beq.n	800cdbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdaa:	2208      	movs	r2, #8
 800cdac:	4909      	ldr	r1, [pc, #36]	@ (800cdd4 <Get_SerialNum+0x50>)
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 f814 	bl	800cddc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cdb4:	2204      	movs	r2, #4
 800cdb6:	4908      	ldr	r1, [pc, #32]	@ (800cdd8 <Get_SerialNum+0x54>)
 800cdb8:	68b8      	ldr	r0, [r7, #8]
 800cdba:	f000 f80f 	bl	800cddc <IntToUnicode>
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	1ffff7e8 	.word	0x1ffff7e8
 800cdcc:	1ffff7ec 	.word	0x1ffff7ec
 800cdd0:	1ffff7f0 	.word	0x1ffff7f0
 800cdd4:	2000017a 	.word	0x2000017a
 800cdd8:	2000018a 	.word	0x2000018a

0800cddc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	4613      	mov	r3, r2
 800cde8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdee:	2300      	movs	r3, #0
 800cdf0:	75fb      	strb	r3, [r7, #23]
 800cdf2:	e027      	b.n	800ce44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	0f1b      	lsrs	r3, r3, #28
 800cdf8:	2b09      	cmp	r3, #9
 800cdfa:	d80b      	bhi.n	800ce14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	0f1b      	lsrs	r3, r3, #28
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4619      	mov	r1, r3
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3230      	adds	r2, #48	@ 0x30
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	701a      	strb	r2, [r3, #0]
 800ce12:	e00a      	b.n	800ce2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	0f1b      	lsrs	r3, r3, #28
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	4619      	mov	r1, r3
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	440b      	add	r3, r1
 800ce24:	3237      	adds	r2, #55	@ 0x37
 800ce26:	b2d2      	uxtb	r2, r2
 800ce28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	3301      	adds	r3, #1
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	4413      	add	r3, r2
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	3301      	adds	r3, #1
 800ce42:	75fb      	strb	r3, [r7, #23]
 800ce44:	7dfa      	ldrb	r2, [r7, #23]
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d3d3      	bcc.n	800cdf4 <IntToUnicode+0x18>
  }
}
 800ce4c:	bf00      	nop
 800ce4e:	bf00      	nop
 800ce50:	371c      	adds	r7, #28
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bc80      	pop	{r7}
 800ce56:	4770      	bx	lr

0800ce58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a0d      	ldr	r2, [pc, #52]	@ (800ce9c <HAL_PCD_MspInit+0x44>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d113      	bne.n	800ce92 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <HAL_PCD_MspInit+0x48>)
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	4a0c      	ldr	r2, [pc, #48]	@ (800cea0 <HAL_PCD_MspInit+0x48>)
 800ce70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce74:	61d3      	str	r3, [r2, #28]
 800ce76:	4b0a      	ldr	r3, [pc, #40]	@ (800cea0 <HAL_PCD_MspInit+0x48>)
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ce82:	2200      	movs	r2, #0
 800ce84:	2100      	movs	r1, #0
 800ce86:	2014      	movs	r0, #20
 800ce88:	f7f6 ff59 	bl	8003d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ce8c:	2014      	movs	r0, #20
 800ce8e:	f7f6 ff72 	bl	8003d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	40005c00 	.word	0x40005c00
 800cea0:	40021000 	.word	0x40021000

0800cea4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ceb8:	4619      	mov	r1, r3
 800ceba:	4610      	mov	r0, r2
 800cebc:	f7fe fd6f 	bl	800b99e <USBD_LL_SetupStage>
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	00db      	lsls	r3, r3, #3
 800cee6:	440b      	add	r3, r1
 800cee8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	4619      	mov	r1, r3
 800cef2:	f7fe fda1 	bl	800ba38 <USBD_LL_DataOutStage>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cf10:	78fa      	ldrb	r2, [r7, #3]
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	4613      	mov	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	00db      	lsls	r3, r3, #3
 800cf1c:	440b      	add	r3, r1
 800cf1e:	3324      	adds	r3, #36	@ 0x24
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	4619      	mov	r1, r3
 800cf26:	f7fe fdf8 	bl	800bb1a <USBD_LL_DataInStage>
}
 800cf2a:	bf00      	nop
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b082      	sub	sp, #8
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe ff08 	bl	800bd56 <USBD_LL_SOF>
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf56:	2301      	movs	r3, #1
 800cf58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	799b      	ldrb	r3, [r3, #6]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d001      	beq.n	800cf66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf62:	f7f6 fa81 	bl	8003468 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf6c:	7bfa      	ldrb	r2, [r7, #15]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe feb8 	bl	800bce6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fe71 	bl	800bc64 <USBD_LL_Reset>
}
 800cf82:	bf00      	nop
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe feb2 	bl	800bd04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7a9b      	ldrb	r3, [r3, #10]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d005      	beq.n	800cfb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfa8:	4b04      	ldr	r3, [pc, #16]	@ (800cfbc <HAL_PCD_SuspendCallback+0x30>)
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	4a03      	ldr	r2, [pc, #12]	@ (800cfbc <HAL_PCD_SuspendCallback+0x30>)
 800cfae:	f043 0306 	orr.w	r3, r3, #6
 800cfb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	e000ed00 	.word	0xe000ed00

0800cfc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fe feac 	bl	800bd2c <USBD_LL_Resume>
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cfe4:	4a28      	ldr	r2, [pc, #160]	@ (800d088 <USBD_LL_Init+0xac>)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a26      	ldr	r2, [pc, #152]	@ (800d088 <USBD_LL_Init+0xac>)
 800cff0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cff4:	4b24      	ldr	r3, [pc, #144]	@ (800d088 <USBD_LL_Init+0xac>)
 800cff6:	4a25      	ldr	r2, [pc, #148]	@ (800d08c <USBD_LL_Init+0xb0>)
 800cff8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cffa:	4b23      	ldr	r3, [pc, #140]	@ (800d088 <USBD_LL_Init+0xac>)
 800cffc:	2208      	movs	r2, #8
 800cffe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d000:	4b21      	ldr	r3, [pc, #132]	@ (800d088 <USBD_LL_Init+0xac>)
 800d002:	2202      	movs	r2, #2
 800d004:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d006:	4b20      	ldr	r3, [pc, #128]	@ (800d088 <USBD_LL_Init+0xac>)
 800d008:	2200      	movs	r2, #0
 800d00a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d00c:	4b1e      	ldr	r3, [pc, #120]	@ (800d088 <USBD_LL_Init+0xac>)
 800d00e:	2200      	movs	r2, #0
 800d010:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d012:	4b1d      	ldr	r3, [pc, #116]	@ (800d088 <USBD_LL_Init+0xac>)
 800d014:	2200      	movs	r2, #0
 800d016:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d018:	481b      	ldr	r0, [pc, #108]	@ (800d088 <USBD_LL_Init+0xac>)
 800d01a:	f7f7 ff17 	bl	8004e4c <HAL_PCD_Init>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d024:	f7f6 fa20 	bl	8003468 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d02e:	2318      	movs	r3, #24
 800d030:	2200      	movs	r2, #0
 800d032:	2100      	movs	r1, #0
 800d034:	f7f9 fc28 	bl	8006888 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d03e:	2358      	movs	r3, #88	@ 0x58
 800d040:	2200      	movs	r2, #0
 800d042:	2180      	movs	r1, #128	@ 0x80
 800d044:	f7f9 fc20 	bl	8006888 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d04e:	23c0      	movs	r3, #192	@ 0xc0
 800d050:	2200      	movs	r2, #0
 800d052:	2181      	movs	r1, #129	@ 0x81
 800d054:	f7f9 fc18 	bl	8006888 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d05e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d062:	2200      	movs	r2, #0
 800d064:	2101      	movs	r1, #1
 800d066:	f7f9 fc0f 	bl	8006888 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d070:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d074:	2200      	movs	r2, #0
 800d076:	2182      	movs	r1, #130	@ 0x82
 800d078:	f7f9 fc06 	bl	8006888 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20001474 	.word	0x20001474
 800d08c:	40005c00 	.word	0x40005c00

0800d090 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7f7 ffc6 	bl	8005038 <HAL_PCD_Start>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f94e 	bl	800d354 <USBD_Get_USB_Status>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b084      	sub	sp, #16
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	70fb      	strb	r3, [r7, #3]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70bb      	strb	r3, [r7, #2]
 800d0dc:	4613      	mov	r3, r2
 800d0de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0ee:	78bb      	ldrb	r3, [r7, #2]
 800d0f0:	883a      	ldrh	r2, [r7, #0]
 800d0f2:	78f9      	ldrb	r1, [r7, #3]
 800d0f4:	f7f8 f91a 	bl	800532c <HAL_PCD_EP_Open>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f928 	bl	800d354 <USBD_Get_USB_Status>
 800d104:	4603      	mov	r3, r0
 800d106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d108:	7bbb      	ldrb	r3, [r7, #14]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d12c:	78fa      	ldrb	r2, [r7, #3]
 800d12e:	4611      	mov	r1, r2
 800d130:	4618      	mov	r0, r3
 800d132:	f7f8 f958 	bl	80053e6 <HAL_PCD_EP_Close>
 800d136:	4603      	mov	r3, r0
 800d138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 f909 	bl	800d354 <USBD_Get_USB_Status>
 800d142:	4603      	mov	r3, r0
 800d144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d146:	7bbb      	ldrb	r3, [r7, #14]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d160:	2300      	movs	r3, #0
 800d162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d16a:	78fa      	ldrb	r2, [r7, #3]
 800d16c:	4611      	mov	r1, r2
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f8 fa00 	bl	8005574 <HAL_PCD_EP_SetStall>
 800d174:	4603      	mov	r3, r0
 800d176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 f8ea 	bl	800d354 <USBD_Get_USB_Status>
 800d180:	4603      	mov	r3, r0
 800d182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d184:	7bbb      	ldrb	r3, [r7, #14]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1a8:	78fa      	ldrb	r2, [r7, #3]
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f8 fa41 	bl	8005634 <HAL_PCD_EP_ClrStall>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 f8cb 	bl	800d354 <USBD_Get_USB_Status>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	da0b      	bge.n	800d200 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1ee:	68f9      	ldr	r1, [r7, #12]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3312      	adds	r3, #18
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	e00b      	b.n	800d218 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d206:	68f9      	ldr	r1, [r7, #12]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	00db      	lsls	r3, r3, #3
 800d210:	440b      	add	r3, r1
 800d212:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d216:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bc80      	pop	{r7}
 800d220:	4770      	bx	lr

0800d222 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b084      	sub	sp, #16
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	460b      	mov	r3, r1
 800d22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d23c:	78fa      	ldrb	r2, [r7, #3]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f7f8 f84f 	bl	80052e4 <HAL_PCD_SetAddress>
 800d246:	4603      	mov	r3, r0
 800d248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 f881 	bl	800d354 <USBD_Get_USB_Status>
 800d252:	4603      	mov	r3, r0
 800d254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d256:	7bbb      	ldrb	r3, [r7, #14]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	607a      	str	r2, [r7, #4]
 800d26a:	461a      	mov	r2, r3
 800d26c:	460b      	mov	r3, r1
 800d26e:	72fb      	strb	r3, [r7, #11]
 800d270:	4613      	mov	r3, r2
 800d272:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d282:	893b      	ldrh	r3, [r7, #8]
 800d284:	7af9      	ldrb	r1, [r7, #11]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	f7f8 f93d 	bl	8005506 <HAL_PCD_EP_Transmit>
 800d28c:	4603      	mov	r3, r0
 800d28e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	4618      	mov	r0, r3
 800d294:	f000 f85e 	bl	800d354 <USBD_Get_USB_Status>
 800d298:	4603      	mov	r3, r0
 800d29a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d29c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b086      	sub	sp, #24
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	72fb      	strb	r3, [r7, #11]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d2c8:	893b      	ldrh	r3, [r7, #8]
 800d2ca:	7af9      	ldrb	r1, [r7, #11]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	f7f8 f8d2 	bl	8005476 <HAL_PCD_EP_Receive>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 f83b 	bl	800d354 <USBD_Get_USB_Status>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2fe:	78fa      	ldrb	r2, [r7, #3]
 800d300:	4611      	mov	r1, r2
 800d302:	4618      	mov	r0, r3
 800d304:	f7f8 f8e8 	bl	80054d8 <HAL_PCD_EP_GetRxCount>
 800d308:	4603      	mov	r3, r0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d31c:	4b02      	ldr	r3, [pc, #8]	@ (800d328 <USBD_static_malloc+0x14>)
}
 800d31e:	4618      	mov	r0, r3
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	bc80      	pop	{r7}
 800d326:	4770      	bx	lr
 800d328:	2000174c 	.word	0x2000174c

0800d32c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]

}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	bc80      	pop	{r7}
 800d33c:	4770      	bx	lr

0800d33e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33e:	b480      	push	{r7}
 800d340:	b083      	sub	sp, #12
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	460b      	mov	r3, r1
 800d348:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	bc80      	pop	{r7}
 800d352:	4770      	bx	lr

0800d354 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d362:	79fb      	ldrb	r3, [r7, #7]
 800d364:	2b03      	cmp	r3, #3
 800d366:	d817      	bhi.n	800d398 <USBD_Get_USB_Status+0x44>
 800d368:	a201      	add	r2, pc, #4	@ (adr r2, 800d370 <USBD_Get_USB_Status+0x1c>)
 800d36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36e:	bf00      	nop
 800d370:	0800d381 	.word	0x0800d381
 800d374:	0800d387 	.word	0x0800d387
 800d378:	0800d38d 	.word	0x0800d38d
 800d37c:	0800d393 	.word	0x0800d393
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
    break;
 800d384:	e00b      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d386:	2302      	movs	r3, #2
 800d388:	73fb      	strb	r3, [r7, #15]
    break;
 800d38a:	e008      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d38c:	2301      	movs	r3, #1
 800d38e:	73fb      	strb	r3, [r7, #15]
    break;
 800d390:	e005      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d392:	2302      	movs	r3, #2
 800d394:	73fb      	strb	r3, [r7, #15]
    break;
 800d396:	e002      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d398:	2302      	movs	r3, #2
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	bf00      	nop
  }
  return usb_status;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bc80      	pop	{r7}
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop

0800d3ac <__cvt>:
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b2:	461d      	mov	r5, r3
 800d3b4:	bfbb      	ittet	lt
 800d3b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d3ba:	461d      	movlt	r5, r3
 800d3bc:	2300      	movge	r3, #0
 800d3be:	232d      	movlt	r3, #45	@ 0x2d
 800d3c0:	b088      	sub	sp, #32
 800d3c2:	4614      	mov	r4, r2
 800d3c4:	bfb8      	it	lt
 800d3c6:	4614      	movlt	r4, r2
 800d3c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d3ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d3cc:	7013      	strb	r3, [r2, #0]
 800d3ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d3d4:	f023 0820 	bic.w	r8, r3, #32
 800d3d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d3dc:	d005      	beq.n	800d3ea <__cvt+0x3e>
 800d3de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d3e2:	d100      	bne.n	800d3e6 <__cvt+0x3a>
 800d3e4:	3601      	adds	r6, #1
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	e000      	b.n	800d3ec <__cvt+0x40>
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	aa07      	add	r2, sp, #28
 800d3ee:	9204      	str	r2, [sp, #16]
 800d3f0:	aa06      	add	r2, sp, #24
 800d3f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d3f6:	e9cd 3600 	strd	r3, r6, [sp]
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	462b      	mov	r3, r5
 800d3fe:	f001 f8f7 	bl	800e5f0 <_dtoa_r>
 800d402:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d406:	4607      	mov	r7, r0
 800d408:	d119      	bne.n	800d43e <__cvt+0x92>
 800d40a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d40c:	07db      	lsls	r3, r3, #31
 800d40e:	d50e      	bpl.n	800d42e <__cvt+0x82>
 800d410:	eb00 0906 	add.w	r9, r0, r6
 800d414:	2200      	movs	r2, #0
 800d416:	2300      	movs	r3, #0
 800d418:	4620      	mov	r0, r4
 800d41a:	4629      	mov	r1, r5
 800d41c:	f7f3 fac4 	bl	80009a8 <__aeabi_dcmpeq>
 800d420:	b108      	cbz	r0, 800d426 <__cvt+0x7a>
 800d422:	f8cd 901c 	str.w	r9, [sp, #28]
 800d426:	2230      	movs	r2, #48	@ 0x30
 800d428:	9b07      	ldr	r3, [sp, #28]
 800d42a:	454b      	cmp	r3, r9
 800d42c:	d31e      	bcc.n	800d46c <__cvt+0xc0>
 800d42e:	4638      	mov	r0, r7
 800d430:	9b07      	ldr	r3, [sp, #28]
 800d432:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d434:	1bdb      	subs	r3, r3, r7
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	b008      	add	sp, #32
 800d43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d442:	eb00 0906 	add.w	r9, r0, r6
 800d446:	d1e5      	bne.n	800d414 <__cvt+0x68>
 800d448:	7803      	ldrb	r3, [r0, #0]
 800d44a:	2b30      	cmp	r3, #48	@ 0x30
 800d44c:	d10a      	bne.n	800d464 <__cvt+0xb8>
 800d44e:	2200      	movs	r2, #0
 800d450:	2300      	movs	r3, #0
 800d452:	4620      	mov	r0, r4
 800d454:	4629      	mov	r1, r5
 800d456:	f7f3 faa7 	bl	80009a8 <__aeabi_dcmpeq>
 800d45a:	b918      	cbnz	r0, 800d464 <__cvt+0xb8>
 800d45c:	f1c6 0601 	rsb	r6, r6, #1
 800d460:	f8ca 6000 	str.w	r6, [sl]
 800d464:	f8da 3000 	ldr.w	r3, [sl]
 800d468:	4499      	add	r9, r3
 800d46a:	e7d3      	b.n	800d414 <__cvt+0x68>
 800d46c:	1c59      	adds	r1, r3, #1
 800d46e:	9107      	str	r1, [sp, #28]
 800d470:	701a      	strb	r2, [r3, #0]
 800d472:	e7d9      	b.n	800d428 <__cvt+0x7c>

0800d474 <__exponent>:
 800d474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d476:	2900      	cmp	r1, #0
 800d478:	bfb6      	itet	lt
 800d47a:	232d      	movlt	r3, #45	@ 0x2d
 800d47c:	232b      	movge	r3, #43	@ 0x2b
 800d47e:	4249      	neglt	r1, r1
 800d480:	2909      	cmp	r1, #9
 800d482:	7002      	strb	r2, [r0, #0]
 800d484:	7043      	strb	r3, [r0, #1]
 800d486:	dd29      	ble.n	800d4dc <__exponent+0x68>
 800d488:	f10d 0307 	add.w	r3, sp, #7
 800d48c:	461d      	mov	r5, r3
 800d48e:	270a      	movs	r7, #10
 800d490:	fbb1 f6f7 	udiv	r6, r1, r7
 800d494:	461a      	mov	r2, r3
 800d496:	fb07 1416 	mls	r4, r7, r6, r1
 800d49a:	3430      	adds	r4, #48	@ 0x30
 800d49c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	2c63      	cmp	r4, #99	@ 0x63
 800d4a4:	4631      	mov	r1, r6
 800d4a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4aa:	dcf1      	bgt.n	800d490 <__exponent+0x1c>
 800d4ac:	3130      	adds	r1, #48	@ 0x30
 800d4ae:	1e94      	subs	r4, r2, #2
 800d4b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	1c41      	adds	r1, r0, #1
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	d30a      	bcc.n	800d4d2 <__exponent+0x5e>
 800d4bc:	f10d 0309 	add.w	r3, sp, #9
 800d4c0:	1a9b      	subs	r3, r3, r2
 800d4c2:	42ac      	cmp	r4, r5
 800d4c4:	bf88      	it	hi
 800d4c6:	2300      	movhi	r3, #0
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	4403      	add	r3, r0
 800d4cc:	1a18      	subs	r0, r3, r0
 800d4ce:	b003      	add	sp, #12
 800d4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d4d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d4da:	e7ed      	b.n	800d4b8 <__exponent+0x44>
 800d4dc:	2330      	movs	r3, #48	@ 0x30
 800d4de:	3130      	adds	r1, #48	@ 0x30
 800d4e0:	7083      	strb	r3, [r0, #2]
 800d4e2:	70c1      	strb	r1, [r0, #3]
 800d4e4:	1d03      	adds	r3, r0, #4
 800d4e6:	e7f1      	b.n	800d4cc <__exponent+0x58>

0800d4e8 <_printf_float>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	b091      	sub	sp, #68	@ 0x44
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d4f4:	4616      	mov	r6, r2
 800d4f6:	461f      	mov	r7, r3
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	f000 ff67 	bl	800e3cc <_localeconv_r>
 800d4fe:	6803      	ldr	r3, [r0, #0]
 800d500:	4618      	mov	r0, r3
 800d502:	9308      	str	r3, [sp, #32]
 800d504:	f7f2 fe24 	bl	8000150 <strlen>
 800d508:	2300      	movs	r3, #0
 800d50a:	930e      	str	r3, [sp, #56]	@ 0x38
 800d50c:	f8d8 3000 	ldr.w	r3, [r8]
 800d510:	9009      	str	r0, [sp, #36]	@ 0x24
 800d512:	3307      	adds	r3, #7
 800d514:	f023 0307 	bic.w	r3, r3, #7
 800d518:	f103 0208 	add.w	r2, r3, #8
 800d51c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d520:	f8d4 b000 	ldr.w	fp, [r4]
 800d524:	f8c8 2000 	str.w	r2, [r8]
 800d528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d52c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d530:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d532:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d536:	f04f 32ff 	mov.w	r2, #4294967295
 800d53a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d53e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d542:	4b9c      	ldr	r3, [pc, #624]	@ (800d7b4 <_printf_float+0x2cc>)
 800d544:	f7f3 fa62 	bl	8000a0c <__aeabi_dcmpun>
 800d548:	bb70      	cbnz	r0, 800d5a8 <_printf_float+0xc0>
 800d54a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d54e:	f04f 32ff 	mov.w	r2, #4294967295
 800d552:	4b98      	ldr	r3, [pc, #608]	@ (800d7b4 <_printf_float+0x2cc>)
 800d554:	f7f3 fa3c 	bl	80009d0 <__aeabi_dcmple>
 800d558:	bb30      	cbnz	r0, 800d5a8 <_printf_float+0xc0>
 800d55a:	2200      	movs	r2, #0
 800d55c:	2300      	movs	r3, #0
 800d55e:	4640      	mov	r0, r8
 800d560:	4649      	mov	r1, r9
 800d562:	f7f3 fa2b 	bl	80009bc <__aeabi_dcmplt>
 800d566:	b110      	cbz	r0, 800d56e <_printf_float+0x86>
 800d568:	232d      	movs	r3, #45	@ 0x2d
 800d56a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d56e:	4a92      	ldr	r2, [pc, #584]	@ (800d7b8 <_printf_float+0x2d0>)
 800d570:	4b92      	ldr	r3, [pc, #584]	@ (800d7bc <_printf_float+0x2d4>)
 800d572:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d576:	bf8c      	ite	hi
 800d578:	4690      	movhi	r8, r2
 800d57a:	4698      	movls	r8, r3
 800d57c:	2303      	movs	r3, #3
 800d57e:	f04f 0900 	mov.w	r9, #0
 800d582:	6123      	str	r3, [r4, #16]
 800d584:	f02b 0304 	bic.w	r3, fp, #4
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	4633      	mov	r3, r6
 800d58c:	4621      	mov	r1, r4
 800d58e:	4628      	mov	r0, r5
 800d590:	9700      	str	r7, [sp, #0]
 800d592:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d594:	f000 f9d4 	bl	800d940 <_printf_common>
 800d598:	3001      	adds	r0, #1
 800d59a:	f040 8090 	bne.w	800d6be <_printf_float+0x1d6>
 800d59e:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a2:	b011      	add	sp, #68	@ 0x44
 800d5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a8:	4642      	mov	r2, r8
 800d5aa:	464b      	mov	r3, r9
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	f7f3 fa2c 	bl	8000a0c <__aeabi_dcmpun>
 800d5b4:	b148      	cbz	r0, 800d5ca <_printf_float+0xe2>
 800d5b6:	464b      	mov	r3, r9
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfb8      	it	lt
 800d5bc:	232d      	movlt	r3, #45	@ 0x2d
 800d5be:	4a80      	ldr	r2, [pc, #512]	@ (800d7c0 <_printf_float+0x2d8>)
 800d5c0:	bfb8      	it	lt
 800d5c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d5c6:	4b7f      	ldr	r3, [pc, #508]	@ (800d7c4 <_printf_float+0x2dc>)
 800d5c8:	e7d3      	b.n	800d572 <_printf_float+0x8a>
 800d5ca:	6863      	ldr	r3, [r4, #4]
 800d5cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	d13f      	bne.n	800d654 <_printf_float+0x16c>
 800d5d4:	2306      	movs	r3, #6
 800d5d6:	6063      	str	r3, [r4, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	9206      	str	r2, [sp, #24]
 800d5e2:	aa0e      	add	r2, sp, #56	@ 0x38
 800d5e4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d5e8:	aa0d      	add	r2, sp, #52	@ 0x34
 800d5ea:	9203      	str	r2, [sp, #12]
 800d5ec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d5f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	4642      	mov	r2, r8
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	464b      	mov	r3, r9
 800d5fe:	910a      	str	r1, [sp, #40]	@ 0x28
 800d600:	f7ff fed4 	bl	800d3ac <__cvt>
 800d604:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d606:	4680      	mov	r8, r0
 800d608:	2947      	cmp	r1, #71	@ 0x47
 800d60a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d60c:	d128      	bne.n	800d660 <_printf_float+0x178>
 800d60e:	1cc8      	adds	r0, r1, #3
 800d610:	db02      	blt.n	800d618 <_printf_float+0x130>
 800d612:	6863      	ldr	r3, [r4, #4]
 800d614:	4299      	cmp	r1, r3
 800d616:	dd40      	ble.n	800d69a <_printf_float+0x1b2>
 800d618:	f1aa 0a02 	sub.w	sl, sl, #2
 800d61c:	fa5f fa8a 	uxtb.w	sl, sl
 800d620:	4652      	mov	r2, sl
 800d622:	3901      	subs	r1, #1
 800d624:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d628:	910d      	str	r1, [sp, #52]	@ 0x34
 800d62a:	f7ff ff23 	bl	800d474 <__exponent>
 800d62e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d630:	4681      	mov	r9, r0
 800d632:	1813      	adds	r3, r2, r0
 800d634:	2a01      	cmp	r2, #1
 800d636:	6123      	str	r3, [r4, #16]
 800d638:	dc02      	bgt.n	800d640 <_printf_float+0x158>
 800d63a:	6822      	ldr	r2, [r4, #0]
 800d63c:	07d2      	lsls	r2, r2, #31
 800d63e:	d501      	bpl.n	800d644 <_printf_float+0x15c>
 800d640:	3301      	adds	r3, #1
 800d642:	6123      	str	r3, [r4, #16]
 800d644:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d09e      	beq.n	800d58a <_printf_float+0xa2>
 800d64c:	232d      	movs	r3, #45	@ 0x2d
 800d64e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d652:	e79a      	b.n	800d58a <_printf_float+0xa2>
 800d654:	2947      	cmp	r1, #71	@ 0x47
 800d656:	d1bf      	bne.n	800d5d8 <_printf_float+0xf0>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1bd      	bne.n	800d5d8 <_printf_float+0xf0>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e7ba      	b.n	800d5d6 <_printf_float+0xee>
 800d660:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d664:	d9dc      	bls.n	800d620 <_printf_float+0x138>
 800d666:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d66a:	d118      	bne.n	800d69e <_printf_float+0x1b6>
 800d66c:	2900      	cmp	r1, #0
 800d66e:	6863      	ldr	r3, [r4, #4]
 800d670:	dd0b      	ble.n	800d68a <_printf_float+0x1a2>
 800d672:	6121      	str	r1, [r4, #16]
 800d674:	b913      	cbnz	r3, 800d67c <_printf_float+0x194>
 800d676:	6822      	ldr	r2, [r4, #0]
 800d678:	07d0      	lsls	r0, r2, #31
 800d67a:	d502      	bpl.n	800d682 <_printf_float+0x19a>
 800d67c:	3301      	adds	r3, #1
 800d67e:	440b      	add	r3, r1
 800d680:	6123      	str	r3, [r4, #16]
 800d682:	f04f 0900 	mov.w	r9, #0
 800d686:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d688:	e7dc      	b.n	800d644 <_printf_float+0x15c>
 800d68a:	b913      	cbnz	r3, 800d692 <_printf_float+0x1aa>
 800d68c:	6822      	ldr	r2, [r4, #0]
 800d68e:	07d2      	lsls	r2, r2, #31
 800d690:	d501      	bpl.n	800d696 <_printf_float+0x1ae>
 800d692:	3302      	adds	r3, #2
 800d694:	e7f4      	b.n	800d680 <_printf_float+0x198>
 800d696:	2301      	movs	r3, #1
 800d698:	e7f2      	b.n	800d680 <_printf_float+0x198>
 800d69a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a0:	4299      	cmp	r1, r3
 800d6a2:	db05      	blt.n	800d6b0 <_printf_float+0x1c8>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	6121      	str	r1, [r4, #16]
 800d6a8:	07d8      	lsls	r0, r3, #31
 800d6aa:	d5ea      	bpl.n	800d682 <_printf_float+0x19a>
 800d6ac:	1c4b      	adds	r3, r1, #1
 800d6ae:	e7e7      	b.n	800d680 <_printf_float+0x198>
 800d6b0:	2900      	cmp	r1, #0
 800d6b2:	bfcc      	ite	gt
 800d6b4:	2201      	movgt	r2, #1
 800d6b6:	f1c1 0202 	rsble	r2, r1, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	e7e0      	b.n	800d680 <_printf_float+0x198>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	055a      	lsls	r2, r3, #21
 800d6c2:	d407      	bmi.n	800d6d4 <_printf_float+0x1ec>
 800d6c4:	6923      	ldr	r3, [r4, #16]
 800d6c6:	4642      	mov	r2, r8
 800d6c8:	4631      	mov	r1, r6
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	47b8      	blx	r7
 800d6ce:	3001      	adds	r0, #1
 800d6d0:	d12b      	bne.n	800d72a <_printf_float+0x242>
 800d6d2:	e764      	b.n	800d59e <_printf_float+0xb6>
 800d6d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6d8:	f240 80dc 	bls.w	800d894 <_printf_float+0x3ac>
 800d6dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	f7f3 f960 	bl	80009a8 <__aeabi_dcmpeq>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d033      	beq.n	800d754 <_printf_float+0x26c>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	4a35      	ldr	r2, [pc, #212]	@ (800d7c8 <_printf_float+0x2e0>)
 800d6f4:	47b8      	blx	r7
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	f43f af51 	beq.w	800d59e <_printf_float+0xb6>
 800d6fc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d700:	4543      	cmp	r3, r8
 800d702:	db02      	blt.n	800d70a <_printf_float+0x222>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	07d8      	lsls	r0, r3, #31
 800d708:	d50f      	bpl.n	800d72a <_printf_float+0x242>
 800d70a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d70e:	4631      	mov	r1, r6
 800d710:	4628      	mov	r0, r5
 800d712:	47b8      	blx	r7
 800d714:	3001      	adds	r0, #1
 800d716:	f43f af42 	beq.w	800d59e <_printf_float+0xb6>
 800d71a:	f04f 0900 	mov.w	r9, #0
 800d71e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d722:	f104 0a1a 	add.w	sl, r4, #26
 800d726:	45c8      	cmp	r8, r9
 800d728:	dc09      	bgt.n	800d73e <_printf_float+0x256>
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	079b      	lsls	r3, r3, #30
 800d72e:	f100 8102 	bmi.w	800d936 <_printf_float+0x44e>
 800d732:	68e0      	ldr	r0, [r4, #12]
 800d734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d736:	4298      	cmp	r0, r3
 800d738:	bfb8      	it	lt
 800d73a:	4618      	movlt	r0, r3
 800d73c:	e731      	b.n	800d5a2 <_printf_float+0xba>
 800d73e:	2301      	movs	r3, #1
 800d740:	4652      	mov	r2, sl
 800d742:	4631      	mov	r1, r6
 800d744:	4628      	mov	r0, r5
 800d746:	47b8      	blx	r7
 800d748:	3001      	adds	r0, #1
 800d74a:	f43f af28 	beq.w	800d59e <_printf_float+0xb6>
 800d74e:	f109 0901 	add.w	r9, r9, #1
 800d752:	e7e8      	b.n	800d726 <_printf_float+0x23e>
 800d754:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d756:	2b00      	cmp	r3, #0
 800d758:	dc38      	bgt.n	800d7cc <_printf_float+0x2e4>
 800d75a:	2301      	movs	r3, #1
 800d75c:	4631      	mov	r1, r6
 800d75e:	4628      	mov	r0, r5
 800d760:	4a19      	ldr	r2, [pc, #100]	@ (800d7c8 <_printf_float+0x2e0>)
 800d762:	47b8      	blx	r7
 800d764:	3001      	adds	r0, #1
 800d766:	f43f af1a 	beq.w	800d59e <_printf_float+0xb6>
 800d76a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d76e:	ea59 0303 	orrs.w	r3, r9, r3
 800d772:	d102      	bne.n	800d77a <_printf_float+0x292>
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	07d9      	lsls	r1, r3, #31
 800d778:	d5d7      	bpl.n	800d72a <_printf_float+0x242>
 800d77a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d77e:	4631      	mov	r1, r6
 800d780:	4628      	mov	r0, r5
 800d782:	47b8      	blx	r7
 800d784:	3001      	adds	r0, #1
 800d786:	f43f af0a 	beq.w	800d59e <_printf_float+0xb6>
 800d78a:	f04f 0a00 	mov.w	sl, #0
 800d78e:	f104 0b1a 	add.w	fp, r4, #26
 800d792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d794:	425b      	negs	r3, r3
 800d796:	4553      	cmp	r3, sl
 800d798:	dc01      	bgt.n	800d79e <_printf_float+0x2b6>
 800d79a:	464b      	mov	r3, r9
 800d79c:	e793      	b.n	800d6c6 <_printf_float+0x1de>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	465a      	mov	r2, fp
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	f43f aef8 	beq.w	800d59e <_printf_float+0xb6>
 800d7ae:	f10a 0a01 	add.w	sl, sl, #1
 800d7b2:	e7ee      	b.n	800d792 <_printf_float+0x2aa>
 800d7b4:	7fefffff 	.word	0x7fefffff
 800d7b8:	08012aa2 	.word	0x08012aa2
 800d7bc:	08012a9e 	.word	0x08012a9e
 800d7c0:	08012aaa 	.word	0x08012aaa
 800d7c4:	08012aa6 	.word	0x08012aa6
 800d7c8:	08012be4 	.word	0x08012be4
 800d7cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7ce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d7d2:	4553      	cmp	r3, sl
 800d7d4:	bfa8      	it	ge
 800d7d6:	4653      	movge	r3, sl
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	4699      	mov	r9, r3
 800d7dc:	dc36      	bgt.n	800d84c <_printf_float+0x364>
 800d7de:	f04f 0b00 	mov.w	fp, #0
 800d7e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7e6:	f104 021a 	add.w	r2, r4, #26
 800d7ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7ee:	eba3 0309 	sub.w	r3, r3, r9
 800d7f2:	455b      	cmp	r3, fp
 800d7f4:	dc31      	bgt.n	800d85a <_printf_float+0x372>
 800d7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7f8:	459a      	cmp	sl, r3
 800d7fa:	dc3a      	bgt.n	800d872 <_printf_float+0x38a>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	07da      	lsls	r2, r3, #31
 800d800:	d437      	bmi.n	800d872 <_printf_float+0x38a>
 800d802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d804:	ebaa 0903 	sub.w	r9, sl, r3
 800d808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d80a:	ebaa 0303 	sub.w	r3, sl, r3
 800d80e:	4599      	cmp	r9, r3
 800d810:	bfa8      	it	ge
 800d812:	4699      	movge	r9, r3
 800d814:	f1b9 0f00 	cmp.w	r9, #0
 800d818:	dc33      	bgt.n	800d882 <_printf_float+0x39a>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d822:	f104 0b1a 	add.w	fp, r4, #26
 800d826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d828:	ebaa 0303 	sub.w	r3, sl, r3
 800d82c:	eba3 0309 	sub.w	r3, r3, r9
 800d830:	4543      	cmp	r3, r8
 800d832:	f77f af7a 	ble.w	800d72a <_printf_float+0x242>
 800d836:	2301      	movs	r3, #1
 800d838:	465a      	mov	r2, fp
 800d83a:	4631      	mov	r1, r6
 800d83c:	4628      	mov	r0, r5
 800d83e:	47b8      	blx	r7
 800d840:	3001      	adds	r0, #1
 800d842:	f43f aeac 	beq.w	800d59e <_printf_float+0xb6>
 800d846:	f108 0801 	add.w	r8, r8, #1
 800d84a:	e7ec      	b.n	800d826 <_printf_float+0x33e>
 800d84c:	4642      	mov	r2, r8
 800d84e:	4631      	mov	r1, r6
 800d850:	4628      	mov	r0, r5
 800d852:	47b8      	blx	r7
 800d854:	3001      	adds	r0, #1
 800d856:	d1c2      	bne.n	800d7de <_printf_float+0x2f6>
 800d858:	e6a1      	b.n	800d59e <_printf_float+0xb6>
 800d85a:	2301      	movs	r3, #1
 800d85c:	4631      	mov	r1, r6
 800d85e:	4628      	mov	r0, r5
 800d860:	920a      	str	r2, [sp, #40]	@ 0x28
 800d862:	47b8      	blx	r7
 800d864:	3001      	adds	r0, #1
 800d866:	f43f ae9a 	beq.w	800d59e <_printf_float+0xb6>
 800d86a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d86c:	f10b 0b01 	add.w	fp, fp, #1
 800d870:	e7bb      	b.n	800d7ea <_printf_float+0x302>
 800d872:	4631      	mov	r1, r6
 800d874:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d878:	4628      	mov	r0, r5
 800d87a:	47b8      	blx	r7
 800d87c:	3001      	adds	r0, #1
 800d87e:	d1c0      	bne.n	800d802 <_printf_float+0x31a>
 800d880:	e68d      	b.n	800d59e <_printf_float+0xb6>
 800d882:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d884:	464b      	mov	r3, r9
 800d886:	4631      	mov	r1, r6
 800d888:	4628      	mov	r0, r5
 800d88a:	4442      	add	r2, r8
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	d1c3      	bne.n	800d81a <_printf_float+0x332>
 800d892:	e684      	b.n	800d59e <_printf_float+0xb6>
 800d894:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d898:	f1ba 0f01 	cmp.w	sl, #1
 800d89c:	dc01      	bgt.n	800d8a2 <_printf_float+0x3ba>
 800d89e:	07db      	lsls	r3, r3, #31
 800d8a0:	d536      	bpl.n	800d910 <_printf_float+0x428>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	47b8      	blx	r7
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	f43f ae76 	beq.w	800d59e <_printf_float+0xb6>
 800d8b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d8b6:	4631      	mov	r1, r6
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	47b8      	blx	r7
 800d8bc:	3001      	adds	r0, #1
 800d8be:	f43f ae6e 	beq.w	800d59e <_printf_float+0xb6>
 800d8c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8ce:	f7f3 f86b 	bl	80009a8 <__aeabi_dcmpeq>
 800d8d2:	b9c0      	cbnz	r0, 800d906 <_printf_float+0x41e>
 800d8d4:	4653      	mov	r3, sl
 800d8d6:	f108 0201 	add.w	r2, r8, #1
 800d8da:	4631      	mov	r1, r6
 800d8dc:	4628      	mov	r0, r5
 800d8de:	47b8      	blx	r7
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	d10c      	bne.n	800d8fe <_printf_float+0x416>
 800d8e4:	e65b      	b.n	800d59e <_printf_float+0xb6>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	465a      	mov	r2, fp
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b8      	blx	r7
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	f43f ae54 	beq.w	800d59e <_printf_float+0xb6>
 800d8f6:	f108 0801 	add.w	r8, r8, #1
 800d8fa:	45d0      	cmp	r8, sl
 800d8fc:	dbf3      	blt.n	800d8e6 <_printf_float+0x3fe>
 800d8fe:	464b      	mov	r3, r9
 800d900:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d904:	e6e0      	b.n	800d6c8 <_printf_float+0x1e0>
 800d906:	f04f 0800 	mov.w	r8, #0
 800d90a:	f104 0b1a 	add.w	fp, r4, #26
 800d90e:	e7f4      	b.n	800d8fa <_printf_float+0x412>
 800d910:	2301      	movs	r3, #1
 800d912:	4642      	mov	r2, r8
 800d914:	e7e1      	b.n	800d8da <_printf_float+0x3f2>
 800d916:	2301      	movs	r3, #1
 800d918:	464a      	mov	r2, r9
 800d91a:	4631      	mov	r1, r6
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b8      	blx	r7
 800d920:	3001      	adds	r0, #1
 800d922:	f43f ae3c 	beq.w	800d59e <_printf_float+0xb6>
 800d926:	f108 0801 	add.w	r8, r8, #1
 800d92a:	68e3      	ldr	r3, [r4, #12]
 800d92c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d92e:	1a5b      	subs	r3, r3, r1
 800d930:	4543      	cmp	r3, r8
 800d932:	dcf0      	bgt.n	800d916 <_printf_float+0x42e>
 800d934:	e6fd      	b.n	800d732 <_printf_float+0x24a>
 800d936:	f04f 0800 	mov.w	r8, #0
 800d93a:	f104 0919 	add.w	r9, r4, #25
 800d93e:	e7f4      	b.n	800d92a <_printf_float+0x442>

0800d940 <_printf_common>:
 800d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	4616      	mov	r6, r2
 800d946:	4698      	mov	r8, r3
 800d948:	688a      	ldr	r2, [r1, #8]
 800d94a:	690b      	ldr	r3, [r1, #16]
 800d94c:	4607      	mov	r7, r0
 800d94e:	4293      	cmp	r3, r2
 800d950:	bfb8      	it	lt
 800d952:	4613      	movlt	r3, r2
 800d954:	6033      	str	r3, [r6, #0]
 800d956:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d95a:	460c      	mov	r4, r1
 800d95c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d960:	b10a      	cbz	r2, 800d966 <_printf_common+0x26>
 800d962:	3301      	adds	r3, #1
 800d964:	6033      	str	r3, [r6, #0]
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	0699      	lsls	r1, r3, #26
 800d96a:	bf42      	ittt	mi
 800d96c:	6833      	ldrmi	r3, [r6, #0]
 800d96e:	3302      	addmi	r3, #2
 800d970:	6033      	strmi	r3, [r6, #0]
 800d972:	6825      	ldr	r5, [r4, #0]
 800d974:	f015 0506 	ands.w	r5, r5, #6
 800d978:	d106      	bne.n	800d988 <_printf_common+0x48>
 800d97a:	f104 0a19 	add.w	sl, r4, #25
 800d97e:	68e3      	ldr	r3, [r4, #12]
 800d980:	6832      	ldr	r2, [r6, #0]
 800d982:	1a9b      	subs	r3, r3, r2
 800d984:	42ab      	cmp	r3, r5
 800d986:	dc2b      	bgt.n	800d9e0 <_printf_common+0xa0>
 800d988:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d98c:	6822      	ldr	r2, [r4, #0]
 800d98e:	3b00      	subs	r3, #0
 800d990:	bf18      	it	ne
 800d992:	2301      	movne	r3, #1
 800d994:	0692      	lsls	r2, r2, #26
 800d996:	d430      	bmi.n	800d9fa <_printf_common+0xba>
 800d998:	4641      	mov	r1, r8
 800d99a:	4638      	mov	r0, r7
 800d99c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9a0:	47c8      	blx	r9
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	d023      	beq.n	800d9ee <_printf_common+0xae>
 800d9a6:	6823      	ldr	r3, [r4, #0]
 800d9a8:	6922      	ldr	r2, [r4, #16]
 800d9aa:	f003 0306 	and.w	r3, r3, #6
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	bf14      	ite	ne
 800d9b2:	2500      	movne	r5, #0
 800d9b4:	6833      	ldreq	r3, [r6, #0]
 800d9b6:	f04f 0600 	mov.w	r6, #0
 800d9ba:	bf08      	it	eq
 800d9bc:	68e5      	ldreq	r5, [r4, #12]
 800d9be:	f104 041a 	add.w	r4, r4, #26
 800d9c2:	bf08      	it	eq
 800d9c4:	1aed      	subeq	r5, r5, r3
 800d9c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d9ca:	bf08      	it	eq
 800d9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	bfc4      	itt	gt
 800d9d4:	1a9b      	subgt	r3, r3, r2
 800d9d6:	18ed      	addgt	r5, r5, r3
 800d9d8:	42b5      	cmp	r5, r6
 800d9da:	d11a      	bne.n	800da12 <_printf_common+0xd2>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e008      	b.n	800d9f2 <_printf_common+0xb2>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4652      	mov	r2, sl
 800d9e4:	4641      	mov	r1, r8
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	47c8      	blx	r9
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d103      	bne.n	800d9f6 <_printf_common+0xb6>
 800d9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f6:	3501      	adds	r5, #1
 800d9f8:	e7c1      	b.n	800d97e <_printf_common+0x3e>
 800d9fa:	2030      	movs	r0, #48	@ 0x30
 800d9fc:	18e1      	adds	r1, r4, r3
 800d9fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da08:	4422      	add	r2, r4
 800da0a:	3302      	adds	r3, #2
 800da0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da10:	e7c2      	b.n	800d998 <_printf_common+0x58>
 800da12:	2301      	movs	r3, #1
 800da14:	4622      	mov	r2, r4
 800da16:	4641      	mov	r1, r8
 800da18:	4638      	mov	r0, r7
 800da1a:	47c8      	blx	r9
 800da1c:	3001      	adds	r0, #1
 800da1e:	d0e6      	beq.n	800d9ee <_printf_common+0xae>
 800da20:	3601      	adds	r6, #1
 800da22:	e7d9      	b.n	800d9d8 <_printf_common+0x98>

0800da24 <_printf_i>:
 800da24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da28:	7e0f      	ldrb	r7, [r1, #24]
 800da2a:	4691      	mov	r9, r2
 800da2c:	2f78      	cmp	r7, #120	@ 0x78
 800da2e:	4680      	mov	r8, r0
 800da30:	460c      	mov	r4, r1
 800da32:	469a      	mov	sl, r3
 800da34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da3a:	d807      	bhi.n	800da4c <_printf_i+0x28>
 800da3c:	2f62      	cmp	r7, #98	@ 0x62
 800da3e:	d80a      	bhi.n	800da56 <_printf_i+0x32>
 800da40:	2f00      	cmp	r7, #0
 800da42:	f000 80d1 	beq.w	800dbe8 <_printf_i+0x1c4>
 800da46:	2f58      	cmp	r7, #88	@ 0x58
 800da48:	f000 80b8 	beq.w	800dbbc <_printf_i+0x198>
 800da4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da54:	e03a      	b.n	800dacc <_printf_i+0xa8>
 800da56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da5a:	2b15      	cmp	r3, #21
 800da5c:	d8f6      	bhi.n	800da4c <_printf_i+0x28>
 800da5e:	a101      	add	r1, pc, #4	@ (adr r1, 800da64 <_printf_i+0x40>)
 800da60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da64:	0800dabd 	.word	0x0800dabd
 800da68:	0800dad1 	.word	0x0800dad1
 800da6c:	0800da4d 	.word	0x0800da4d
 800da70:	0800da4d 	.word	0x0800da4d
 800da74:	0800da4d 	.word	0x0800da4d
 800da78:	0800da4d 	.word	0x0800da4d
 800da7c:	0800dad1 	.word	0x0800dad1
 800da80:	0800da4d 	.word	0x0800da4d
 800da84:	0800da4d 	.word	0x0800da4d
 800da88:	0800da4d 	.word	0x0800da4d
 800da8c:	0800da4d 	.word	0x0800da4d
 800da90:	0800dbcf 	.word	0x0800dbcf
 800da94:	0800dafb 	.word	0x0800dafb
 800da98:	0800db89 	.word	0x0800db89
 800da9c:	0800da4d 	.word	0x0800da4d
 800daa0:	0800da4d 	.word	0x0800da4d
 800daa4:	0800dbf1 	.word	0x0800dbf1
 800daa8:	0800da4d 	.word	0x0800da4d
 800daac:	0800dafb 	.word	0x0800dafb
 800dab0:	0800da4d 	.word	0x0800da4d
 800dab4:	0800da4d 	.word	0x0800da4d
 800dab8:	0800db91 	.word	0x0800db91
 800dabc:	6833      	ldr	r3, [r6, #0]
 800dabe:	1d1a      	adds	r2, r3, #4
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6032      	str	r2, [r6, #0]
 800dac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dacc:	2301      	movs	r3, #1
 800dace:	e09c      	b.n	800dc0a <_printf_i+0x1e6>
 800dad0:	6833      	ldr	r3, [r6, #0]
 800dad2:	6820      	ldr	r0, [r4, #0]
 800dad4:	1d19      	adds	r1, r3, #4
 800dad6:	6031      	str	r1, [r6, #0]
 800dad8:	0606      	lsls	r6, r0, #24
 800dada:	d501      	bpl.n	800dae0 <_printf_i+0xbc>
 800dadc:	681d      	ldr	r5, [r3, #0]
 800dade:	e003      	b.n	800dae8 <_printf_i+0xc4>
 800dae0:	0645      	lsls	r5, r0, #25
 800dae2:	d5fb      	bpl.n	800dadc <_printf_i+0xb8>
 800dae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dae8:	2d00      	cmp	r5, #0
 800daea:	da03      	bge.n	800daf4 <_printf_i+0xd0>
 800daec:	232d      	movs	r3, #45	@ 0x2d
 800daee:	426d      	negs	r5, r5
 800daf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daf4:	230a      	movs	r3, #10
 800daf6:	4858      	ldr	r0, [pc, #352]	@ (800dc58 <_printf_i+0x234>)
 800daf8:	e011      	b.n	800db1e <_printf_i+0xfa>
 800dafa:	6821      	ldr	r1, [r4, #0]
 800dafc:	6833      	ldr	r3, [r6, #0]
 800dafe:	0608      	lsls	r0, r1, #24
 800db00:	f853 5b04 	ldr.w	r5, [r3], #4
 800db04:	d402      	bmi.n	800db0c <_printf_i+0xe8>
 800db06:	0649      	lsls	r1, r1, #25
 800db08:	bf48      	it	mi
 800db0a:	b2ad      	uxthmi	r5, r5
 800db0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db0e:	6033      	str	r3, [r6, #0]
 800db10:	bf14      	ite	ne
 800db12:	230a      	movne	r3, #10
 800db14:	2308      	moveq	r3, #8
 800db16:	4850      	ldr	r0, [pc, #320]	@ (800dc58 <_printf_i+0x234>)
 800db18:	2100      	movs	r1, #0
 800db1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db1e:	6866      	ldr	r6, [r4, #4]
 800db20:	2e00      	cmp	r6, #0
 800db22:	60a6      	str	r6, [r4, #8]
 800db24:	db05      	blt.n	800db32 <_printf_i+0x10e>
 800db26:	6821      	ldr	r1, [r4, #0]
 800db28:	432e      	orrs	r6, r5
 800db2a:	f021 0104 	bic.w	r1, r1, #4
 800db2e:	6021      	str	r1, [r4, #0]
 800db30:	d04b      	beq.n	800dbca <_printf_i+0x1a6>
 800db32:	4616      	mov	r6, r2
 800db34:	fbb5 f1f3 	udiv	r1, r5, r3
 800db38:	fb03 5711 	mls	r7, r3, r1, r5
 800db3c:	5dc7      	ldrb	r7, [r0, r7]
 800db3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db42:	462f      	mov	r7, r5
 800db44:	42bb      	cmp	r3, r7
 800db46:	460d      	mov	r5, r1
 800db48:	d9f4      	bls.n	800db34 <_printf_i+0x110>
 800db4a:	2b08      	cmp	r3, #8
 800db4c:	d10b      	bne.n	800db66 <_printf_i+0x142>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	07df      	lsls	r7, r3, #31
 800db52:	d508      	bpl.n	800db66 <_printf_i+0x142>
 800db54:	6923      	ldr	r3, [r4, #16]
 800db56:	6861      	ldr	r1, [r4, #4]
 800db58:	4299      	cmp	r1, r3
 800db5a:	bfde      	ittt	le
 800db5c:	2330      	movle	r3, #48	@ 0x30
 800db5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db66:	1b92      	subs	r2, r2, r6
 800db68:	6122      	str	r2, [r4, #16]
 800db6a:	464b      	mov	r3, r9
 800db6c:	4621      	mov	r1, r4
 800db6e:	4640      	mov	r0, r8
 800db70:	f8cd a000 	str.w	sl, [sp]
 800db74:	aa03      	add	r2, sp, #12
 800db76:	f7ff fee3 	bl	800d940 <_printf_common>
 800db7a:	3001      	adds	r0, #1
 800db7c:	d14a      	bne.n	800dc14 <_printf_i+0x1f0>
 800db7e:	f04f 30ff 	mov.w	r0, #4294967295
 800db82:	b004      	add	sp, #16
 800db84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	f043 0320 	orr.w	r3, r3, #32
 800db8e:	6023      	str	r3, [r4, #0]
 800db90:	2778      	movs	r7, #120	@ 0x78
 800db92:	4832      	ldr	r0, [pc, #200]	@ (800dc5c <_printf_i+0x238>)
 800db94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	6831      	ldr	r1, [r6, #0]
 800db9c:	061f      	lsls	r7, r3, #24
 800db9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800dba2:	d402      	bmi.n	800dbaa <_printf_i+0x186>
 800dba4:	065f      	lsls	r7, r3, #25
 800dba6:	bf48      	it	mi
 800dba8:	b2ad      	uxthmi	r5, r5
 800dbaa:	6031      	str	r1, [r6, #0]
 800dbac:	07d9      	lsls	r1, r3, #31
 800dbae:	bf44      	itt	mi
 800dbb0:	f043 0320 	orrmi.w	r3, r3, #32
 800dbb4:	6023      	strmi	r3, [r4, #0]
 800dbb6:	b11d      	cbz	r5, 800dbc0 <_printf_i+0x19c>
 800dbb8:	2310      	movs	r3, #16
 800dbba:	e7ad      	b.n	800db18 <_printf_i+0xf4>
 800dbbc:	4826      	ldr	r0, [pc, #152]	@ (800dc58 <_printf_i+0x234>)
 800dbbe:	e7e9      	b.n	800db94 <_printf_i+0x170>
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	f023 0320 	bic.w	r3, r3, #32
 800dbc6:	6023      	str	r3, [r4, #0]
 800dbc8:	e7f6      	b.n	800dbb8 <_printf_i+0x194>
 800dbca:	4616      	mov	r6, r2
 800dbcc:	e7bd      	b.n	800db4a <_printf_i+0x126>
 800dbce:	6833      	ldr	r3, [r6, #0]
 800dbd0:	6825      	ldr	r5, [r4, #0]
 800dbd2:	1d18      	adds	r0, r3, #4
 800dbd4:	6961      	ldr	r1, [r4, #20]
 800dbd6:	6030      	str	r0, [r6, #0]
 800dbd8:	062e      	lsls	r6, r5, #24
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	d501      	bpl.n	800dbe2 <_printf_i+0x1be>
 800dbde:	6019      	str	r1, [r3, #0]
 800dbe0:	e002      	b.n	800dbe8 <_printf_i+0x1c4>
 800dbe2:	0668      	lsls	r0, r5, #25
 800dbe4:	d5fb      	bpl.n	800dbde <_printf_i+0x1ba>
 800dbe6:	8019      	strh	r1, [r3, #0]
 800dbe8:	2300      	movs	r3, #0
 800dbea:	4616      	mov	r6, r2
 800dbec:	6123      	str	r3, [r4, #16]
 800dbee:	e7bc      	b.n	800db6a <_printf_i+0x146>
 800dbf0:	6833      	ldr	r3, [r6, #0]
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	1d1a      	adds	r2, r3, #4
 800dbf6:	6032      	str	r2, [r6, #0]
 800dbf8:	681e      	ldr	r6, [r3, #0]
 800dbfa:	6862      	ldr	r2, [r4, #4]
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f000 fc5c 	bl	800e4ba <memchr>
 800dc02:	b108      	cbz	r0, 800dc08 <_printf_i+0x1e4>
 800dc04:	1b80      	subs	r0, r0, r6
 800dc06:	6060      	str	r0, [r4, #4]
 800dc08:	6863      	ldr	r3, [r4, #4]
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc12:	e7aa      	b.n	800db6a <_printf_i+0x146>
 800dc14:	4632      	mov	r2, r6
 800dc16:	4649      	mov	r1, r9
 800dc18:	4640      	mov	r0, r8
 800dc1a:	6923      	ldr	r3, [r4, #16]
 800dc1c:	47d0      	blx	sl
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d0ad      	beq.n	800db7e <_printf_i+0x15a>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	079b      	lsls	r3, r3, #30
 800dc26:	d413      	bmi.n	800dc50 <_printf_i+0x22c>
 800dc28:	68e0      	ldr	r0, [r4, #12]
 800dc2a:	9b03      	ldr	r3, [sp, #12]
 800dc2c:	4298      	cmp	r0, r3
 800dc2e:	bfb8      	it	lt
 800dc30:	4618      	movlt	r0, r3
 800dc32:	e7a6      	b.n	800db82 <_printf_i+0x15e>
 800dc34:	2301      	movs	r3, #1
 800dc36:	4632      	mov	r2, r6
 800dc38:	4649      	mov	r1, r9
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	47d0      	blx	sl
 800dc3e:	3001      	adds	r0, #1
 800dc40:	d09d      	beq.n	800db7e <_printf_i+0x15a>
 800dc42:	3501      	adds	r5, #1
 800dc44:	68e3      	ldr	r3, [r4, #12]
 800dc46:	9903      	ldr	r1, [sp, #12]
 800dc48:	1a5b      	subs	r3, r3, r1
 800dc4a:	42ab      	cmp	r3, r5
 800dc4c:	dcf2      	bgt.n	800dc34 <_printf_i+0x210>
 800dc4e:	e7eb      	b.n	800dc28 <_printf_i+0x204>
 800dc50:	2500      	movs	r5, #0
 800dc52:	f104 0619 	add.w	r6, r4, #25
 800dc56:	e7f5      	b.n	800dc44 <_printf_i+0x220>
 800dc58:	08012aae 	.word	0x08012aae
 800dc5c:	08012abf 	.word	0x08012abf

0800dc60 <_scanf_float>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	b087      	sub	sp, #28
 800dc66:	9303      	str	r3, [sp, #12]
 800dc68:	688b      	ldr	r3, [r1, #8]
 800dc6a:	4691      	mov	r9, r2
 800dc6c:	1e5a      	subs	r2, r3, #1
 800dc6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dc72:	bf82      	ittt	hi
 800dc74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dc78:	eb03 0b05 	addhi.w	fp, r3, r5
 800dc7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dc80:	460a      	mov	r2, r1
 800dc82:	f04f 0500 	mov.w	r5, #0
 800dc86:	bf88      	it	hi
 800dc88:	608b      	strhi	r3, [r1, #8]
 800dc8a:	680b      	ldr	r3, [r1, #0]
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dc92:	f842 3b1c 	str.w	r3, [r2], #28
 800dc96:	460c      	mov	r4, r1
 800dc98:	bf98      	it	ls
 800dc9a:	f04f 0b00 	movls.w	fp, #0
 800dc9e:	4616      	mov	r6, r2
 800dca0:	46aa      	mov	sl, r5
 800dca2:	462f      	mov	r7, r5
 800dca4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dca8:	9201      	str	r2, [sp, #4]
 800dcaa:	9502      	str	r5, [sp, #8]
 800dcac:	68a2      	ldr	r2, [r4, #8]
 800dcae:	b15a      	cbz	r2, 800dcc8 <_scanf_float+0x68>
 800dcb0:	f8d9 3000 	ldr.w	r3, [r9]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b4e      	cmp	r3, #78	@ 0x4e
 800dcb8:	d862      	bhi.n	800dd80 <_scanf_float+0x120>
 800dcba:	2b40      	cmp	r3, #64	@ 0x40
 800dcbc:	d83a      	bhi.n	800dd34 <_scanf_float+0xd4>
 800dcbe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dcc2:	b2c8      	uxtb	r0, r1
 800dcc4:	280e      	cmp	r0, #14
 800dcc6:	d938      	bls.n	800dd3a <_scanf_float+0xda>
 800dcc8:	b11f      	cbz	r7, 800dcd2 <_scanf_float+0x72>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcd6:	f1ba 0f01 	cmp.w	sl, #1
 800dcda:	f200 8114 	bhi.w	800df06 <_scanf_float+0x2a6>
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	429e      	cmp	r6, r3
 800dce2:	f200 8105 	bhi.w	800def0 <_scanf_float+0x290>
 800dce6:	2001      	movs	r0, #1
 800dce8:	b007      	add	sp, #28
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dcf2:	2a0d      	cmp	r2, #13
 800dcf4:	d8e8      	bhi.n	800dcc8 <_scanf_float+0x68>
 800dcf6:	a101      	add	r1, pc, #4	@ (adr r1, 800dcfc <_scanf_float+0x9c>)
 800dcf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dcfc:	0800de45 	.word	0x0800de45
 800dd00:	0800dcc9 	.word	0x0800dcc9
 800dd04:	0800dcc9 	.word	0x0800dcc9
 800dd08:	0800dcc9 	.word	0x0800dcc9
 800dd0c:	0800dea1 	.word	0x0800dea1
 800dd10:	0800de7b 	.word	0x0800de7b
 800dd14:	0800dcc9 	.word	0x0800dcc9
 800dd18:	0800dcc9 	.word	0x0800dcc9
 800dd1c:	0800de53 	.word	0x0800de53
 800dd20:	0800dcc9 	.word	0x0800dcc9
 800dd24:	0800dcc9 	.word	0x0800dcc9
 800dd28:	0800dcc9 	.word	0x0800dcc9
 800dd2c:	0800dcc9 	.word	0x0800dcc9
 800dd30:	0800de0f 	.word	0x0800de0f
 800dd34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dd38:	e7db      	b.n	800dcf2 <_scanf_float+0x92>
 800dd3a:	290e      	cmp	r1, #14
 800dd3c:	d8c4      	bhi.n	800dcc8 <_scanf_float+0x68>
 800dd3e:	a001      	add	r0, pc, #4	@ (adr r0, 800dd44 <_scanf_float+0xe4>)
 800dd40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd44:	0800ddff 	.word	0x0800ddff
 800dd48:	0800dcc9 	.word	0x0800dcc9
 800dd4c:	0800ddff 	.word	0x0800ddff
 800dd50:	0800de8f 	.word	0x0800de8f
 800dd54:	0800dcc9 	.word	0x0800dcc9
 800dd58:	0800dda1 	.word	0x0800dda1
 800dd5c:	0800dde5 	.word	0x0800dde5
 800dd60:	0800dde5 	.word	0x0800dde5
 800dd64:	0800dde5 	.word	0x0800dde5
 800dd68:	0800dde5 	.word	0x0800dde5
 800dd6c:	0800dde5 	.word	0x0800dde5
 800dd70:	0800dde5 	.word	0x0800dde5
 800dd74:	0800dde5 	.word	0x0800dde5
 800dd78:	0800dde5 	.word	0x0800dde5
 800dd7c:	0800dde5 	.word	0x0800dde5
 800dd80:	2b6e      	cmp	r3, #110	@ 0x6e
 800dd82:	d809      	bhi.n	800dd98 <_scanf_float+0x138>
 800dd84:	2b60      	cmp	r3, #96	@ 0x60
 800dd86:	d8b2      	bhi.n	800dcee <_scanf_float+0x8e>
 800dd88:	2b54      	cmp	r3, #84	@ 0x54
 800dd8a:	d07b      	beq.n	800de84 <_scanf_float+0x224>
 800dd8c:	2b59      	cmp	r3, #89	@ 0x59
 800dd8e:	d19b      	bne.n	800dcc8 <_scanf_float+0x68>
 800dd90:	2d07      	cmp	r5, #7
 800dd92:	d199      	bne.n	800dcc8 <_scanf_float+0x68>
 800dd94:	2508      	movs	r5, #8
 800dd96:	e02f      	b.n	800ddf8 <_scanf_float+0x198>
 800dd98:	2b74      	cmp	r3, #116	@ 0x74
 800dd9a:	d073      	beq.n	800de84 <_scanf_float+0x224>
 800dd9c:	2b79      	cmp	r3, #121	@ 0x79
 800dd9e:	e7f6      	b.n	800dd8e <_scanf_float+0x12e>
 800dda0:	6821      	ldr	r1, [r4, #0]
 800dda2:	05c8      	lsls	r0, r1, #23
 800dda4:	d51e      	bpl.n	800dde4 <_scanf_float+0x184>
 800dda6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ddaa:	6021      	str	r1, [r4, #0]
 800ddac:	3701      	adds	r7, #1
 800ddae:	f1bb 0f00 	cmp.w	fp, #0
 800ddb2:	d003      	beq.n	800ddbc <_scanf_float+0x15c>
 800ddb4:	3201      	adds	r2, #1
 800ddb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ddba:	60a2      	str	r2, [r4, #8]
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	60a3      	str	r3, [r4, #8]
 800ddc2:	6923      	ldr	r3, [r4, #16]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	6123      	str	r3, [r4, #16]
 800ddc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f8c9 3004 	str.w	r3, [r9, #4]
 800ddd4:	f340 8083 	ble.w	800dede <_scanf_float+0x27e>
 800ddd8:	f8d9 3000 	ldr.w	r3, [r9]
 800dddc:	3301      	adds	r3, #1
 800ddde:	f8c9 3000 	str.w	r3, [r9]
 800dde2:	e763      	b.n	800dcac <_scanf_float+0x4c>
 800dde4:	eb1a 0105 	adds.w	r1, sl, r5
 800dde8:	f47f af6e 	bne.w	800dcc8 <_scanf_float+0x68>
 800ddec:	460d      	mov	r5, r1
 800ddee:	468a      	mov	sl, r1
 800ddf0:	6822      	ldr	r2, [r4, #0]
 800ddf2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ddf6:	6022      	str	r2, [r4, #0]
 800ddf8:	f806 3b01 	strb.w	r3, [r6], #1
 800ddfc:	e7de      	b.n	800ddbc <_scanf_float+0x15c>
 800ddfe:	6822      	ldr	r2, [r4, #0]
 800de00:	0610      	lsls	r0, r2, #24
 800de02:	f57f af61 	bpl.w	800dcc8 <_scanf_float+0x68>
 800de06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de0a:	6022      	str	r2, [r4, #0]
 800de0c:	e7f4      	b.n	800ddf8 <_scanf_float+0x198>
 800de0e:	f1ba 0f00 	cmp.w	sl, #0
 800de12:	d10c      	bne.n	800de2e <_scanf_float+0x1ce>
 800de14:	b977      	cbnz	r7, 800de34 <_scanf_float+0x1d4>
 800de16:	6822      	ldr	r2, [r4, #0]
 800de18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de20:	d108      	bne.n	800de34 <_scanf_float+0x1d4>
 800de22:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de26:	f04f 0a01 	mov.w	sl, #1
 800de2a:	6022      	str	r2, [r4, #0]
 800de2c:	e7e4      	b.n	800ddf8 <_scanf_float+0x198>
 800de2e:	f1ba 0f02 	cmp.w	sl, #2
 800de32:	d051      	beq.n	800ded8 <_scanf_float+0x278>
 800de34:	2d01      	cmp	r5, #1
 800de36:	d002      	beq.n	800de3e <_scanf_float+0x1de>
 800de38:	2d04      	cmp	r5, #4
 800de3a:	f47f af45 	bne.w	800dcc8 <_scanf_float+0x68>
 800de3e:	3501      	adds	r5, #1
 800de40:	b2ed      	uxtb	r5, r5
 800de42:	e7d9      	b.n	800ddf8 <_scanf_float+0x198>
 800de44:	f1ba 0f01 	cmp.w	sl, #1
 800de48:	f47f af3e 	bne.w	800dcc8 <_scanf_float+0x68>
 800de4c:	f04f 0a02 	mov.w	sl, #2
 800de50:	e7d2      	b.n	800ddf8 <_scanf_float+0x198>
 800de52:	b975      	cbnz	r5, 800de72 <_scanf_float+0x212>
 800de54:	2f00      	cmp	r7, #0
 800de56:	f47f af38 	bne.w	800dcca <_scanf_float+0x6a>
 800de5a:	6822      	ldr	r2, [r4, #0]
 800de5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de64:	f040 80ff 	bne.w	800e066 <_scanf_float+0x406>
 800de68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de6c:	2501      	movs	r5, #1
 800de6e:	6022      	str	r2, [r4, #0]
 800de70:	e7c2      	b.n	800ddf8 <_scanf_float+0x198>
 800de72:	2d03      	cmp	r5, #3
 800de74:	d0e3      	beq.n	800de3e <_scanf_float+0x1de>
 800de76:	2d05      	cmp	r5, #5
 800de78:	e7df      	b.n	800de3a <_scanf_float+0x1da>
 800de7a:	2d02      	cmp	r5, #2
 800de7c:	f47f af24 	bne.w	800dcc8 <_scanf_float+0x68>
 800de80:	2503      	movs	r5, #3
 800de82:	e7b9      	b.n	800ddf8 <_scanf_float+0x198>
 800de84:	2d06      	cmp	r5, #6
 800de86:	f47f af1f 	bne.w	800dcc8 <_scanf_float+0x68>
 800de8a:	2507      	movs	r5, #7
 800de8c:	e7b4      	b.n	800ddf8 <_scanf_float+0x198>
 800de8e:	6822      	ldr	r2, [r4, #0]
 800de90:	0591      	lsls	r1, r2, #22
 800de92:	f57f af19 	bpl.w	800dcc8 <_scanf_float+0x68>
 800de96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800de9a:	6022      	str	r2, [r4, #0]
 800de9c:	9702      	str	r7, [sp, #8]
 800de9e:	e7ab      	b.n	800ddf8 <_scanf_float+0x198>
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dea6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800deaa:	d005      	beq.n	800deb8 <_scanf_float+0x258>
 800deac:	0550      	lsls	r0, r2, #21
 800deae:	f57f af0b 	bpl.w	800dcc8 <_scanf_float+0x68>
 800deb2:	2f00      	cmp	r7, #0
 800deb4:	f000 80d7 	beq.w	800e066 <_scanf_float+0x406>
 800deb8:	0591      	lsls	r1, r2, #22
 800deba:	bf58      	it	pl
 800debc:	9902      	ldrpl	r1, [sp, #8]
 800debe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dec2:	bf58      	it	pl
 800dec4:	1a79      	subpl	r1, r7, r1
 800dec6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800deca:	f04f 0700 	mov.w	r7, #0
 800dece:	bf58      	it	pl
 800ded0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ded4:	6022      	str	r2, [r4, #0]
 800ded6:	e78f      	b.n	800ddf8 <_scanf_float+0x198>
 800ded8:	f04f 0a03 	mov.w	sl, #3
 800dedc:	e78c      	b.n	800ddf8 <_scanf_float+0x198>
 800dede:	4649      	mov	r1, r9
 800dee0:	4640      	mov	r0, r8
 800dee2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dee6:	4798      	blx	r3
 800dee8:	2800      	cmp	r0, #0
 800deea:	f43f aedf 	beq.w	800dcac <_scanf_float+0x4c>
 800deee:	e6eb      	b.n	800dcc8 <_scanf_float+0x68>
 800def0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800def4:	464a      	mov	r2, r9
 800def6:	4640      	mov	r0, r8
 800def8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800defc:	4798      	blx	r3
 800defe:	6923      	ldr	r3, [r4, #16]
 800df00:	3b01      	subs	r3, #1
 800df02:	6123      	str	r3, [r4, #16]
 800df04:	e6eb      	b.n	800dcde <_scanf_float+0x7e>
 800df06:	1e6b      	subs	r3, r5, #1
 800df08:	2b06      	cmp	r3, #6
 800df0a:	d824      	bhi.n	800df56 <_scanf_float+0x2f6>
 800df0c:	2d02      	cmp	r5, #2
 800df0e:	d836      	bhi.n	800df7e <_scanf_float+0x31e>
 800df10:	9b01      	ldr	r3, [sp, #4]
 800df12:	429e      	cmp	r6, r3
 800df14:	f67f aee7 	bls.w	800dce6 <_scanf_float+0x86>
 800df18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df1c:	464a      	mov	r2, r9
 800df1e:	4640      	mov	r0, r8
 800df20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df24:	4798      	blx	r3
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	3b01      	subs	r3, #1
 800df2a:	6123      	str	r3, [r4, #16]
 800df2c:	e7f0      	b.n	800df10 <_scanf_float+0x2b0>
 800df2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df32:	464a      	mov	r2, r9
 800df34:	4640      	mov	r0, r8
 800df36:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800df3a:	4798      	blx	r3
 800df3c:	6923      	ldr	r3, [r4, #16]
 800df3e:	3b01      	subs	r3, #1
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df46:	fa5f fa8a 	uxtb.w	sl, sl
 800df4a:	f1ba 0f02 	cmp.w	sl, #2
 800df4e:	d1ee      	bne.n	800df2e <_scanf_float+0x2ce>
 800df50:	3d03      	subs	r5, #3
 800df52:	b2ed      	uxtb	r5, r5
 800df54:	1b76      	subs	r6, r6, r5
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	05da      	lsls	r2, r3, #23
 800df5a:	d530      	bpl.n	800dfbe <_scanf_float+0x35e>
 800df5c:	055b      	lsls	r3, r3, #21
 800df5e:	d511      	bpl.n	800df84 <_scanf_float+0x324>
 800df60:	9b01      	ldr	r3, [sp, #4]
 800df62:	429e      	cmp	r6, r3
 800df64:	f67f aebf 	bls.w	800dce6 <_scanf_float+0x86>
 800df68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df6c:	464a      	mov	r2, r9
 800df6e:	4640      	mov	r0, r8
 800df70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df74:	4798      	blx	r3
 800df76:	6923      	ldr	r3, [r4, #16]
 800df78:	3b01      	subs	r3, #1
 800df7a:	6123      	str	r3, [r4, #16]
 800df7c:	e7f0      	b.n	800df60 <_scanf_float+0x300>
 800df7e:	46aa      	mov	sl, r5
 800df80:	46b3      	mov	fp, r6
 800df82:	e7de      	b.n	800df42 <_scanf_float+0x2e2>
 800df84:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800df88:	6923      	ldr	r3, [r4, #16]
 800df8a:	2965      	cmp	r1, #101	@ 0x65
 800df8c:	f103 33ff 	add.w	r3, r3, #4294967295
 800df90:	f106 35ff 	add.w	r5, r6, #4294967295
 800df94:	6123      	str	r3, [r4, #16]
 800df96:	d00c      	beq.n	800dfb2 <_scanf_float+0x352>
 800df98:	2945      	cmp	r1, #69	@ 0x45
 800df9a:	d00a      	beq.n	800dfb2 <_scanf_float+0x352>
 800df9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	4798      	blx	r3
 800dfa6:	6923      	ldr	r3, [r4, #16]
 800dfa8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	1eb5      	subs	r5, r6, #2
 800dfb0:	6123      	str	r3, [r4, #16]
 800dfb2:	464a      	mov	r2, r9
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfba:	4798      	blx	r3
 800dfbc:	462e      	mov	r6, r5
 800dfbe:	6822      	ldr	r2, [r4, #0]
 800dfc0:	f012 0210 	ands.w	r2, r2, #16
 800dfc4:	d001      	beq.n	800dfca <_scanf_float+0x36a>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	e68e      	b.n	800dce8 <_scanf_float+0x88>
 800dfca:	7032      	strb	r2, [r6, #0]
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dfd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfd6:	d125      	bne.n	800e024 <_scanf_float+0x3c4>
 800dfd8:	9b02      	ldr	r3, [sp, #8]
 800dfda:	429f      	cmp	r7, r3
 800dfdc:	d00a      	beq.n	800dff4 <_scanf_float+0x394>
 800dfde:	1bda      	subs	r2, r3, r7
 800dfe0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dfe4:	429e      	cmp	r6, r3
 800dfe6:	bf28      	it	cs
 800dfe8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dfec:	4630      	mov	r0, r6
 800dfee:	491f      	ldr	r1, [pc, #124]	@ (800e06c <_scanf_float+0x40c>)
 800dff0:	f000 f902 	bl	800e1f8 <siprintf>
 800dff4:	2200      	movs	r2, #0
 800dff6:	4640      	mov	r0, r8
 800dff8:	9901      	ldr	r1, [sp, #4]
 800dffa:	f002 fc65 	bl	80108c8 <_strtod_r>
 800dffe:	9b03      	ldr	r3, [sp, #12]
 800e000:	6825      	ldr	r5, [r4, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f015 0f02 	tst.w	r5, #2
 800e008:	4606      	mov	r6, r0
 800e00a:	460f      	mov	r7, r1
 800e00c:	f103 0204 	add.w	r2, r3, #4
 800e010:	d015      	beq.n	800e03e <_scanf_float+0x3de>
 800e012:	9903      	ldr	r1, [sp, #12]
 800e014:	600a      	str	r2, [r1, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	e9c3 6700 	strd	r6, r7, [r3]
 800e01c:	68e3      	ldr	r3, [r4, #12]
 800e01e:	3301      	adds	r3, #1
 800e020:	60e3      	str	r3, [r4, #12]
 800e022:	e7d0      	b.n	800dfc6 <_scanf_float+0x366>
 800e024:	9b04      	ldr	r3, [sp, #16]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d0e4      	beq.n	800dff4 <_scanf_float+0x394>
 800e02a:	9905      	ldr	r1, [sp, #20]
 800e02c:	230a      	movs	r3, #10
 800e02e:	4640      	mov	r0, r8
 800e030:	3101      	adds	r1, #1
 800e032:	f002 fcc9 	bl	80109c8 <_strtol_r>
 800e036:	9b04      	ldr	r3, [sp, #16]
 800e038:	9e05      	ldr	r6, [sp, #20]
 800e03a:	1ac2      	subs	r2, r0, r3
 800e03c:	e7d0      	b.n	800dfe0 <_scanf_float+0x380>
 800e03e:	076d      	lsls	r5, r5, #29
 800e040:	d4e7      	bmi.n	800e012 <_scanf_float+0x3b2>
 800e042:	9d03      	ldr	r5, [sp, #12]
 800e044:	602a      	str	r2, [r5, #0]
 800e046:	681d      	ldr	r5, [r3, #0]
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	f7f2 fcde 	bl	8000a0c <__aeabi_dcmpun>
 800e050:	b120      	cbz	r0, 800e05c <_scanf_float+0x3fc>
 800e052:	4807      	ldr	r0, [pc, #28]	@ (800e070 <_scanf_float+0x410>)
 800e054:	f000 fa40 	bl	800e4d8 <nanf>
 800e058:	6028      	str	r0, [r5, #0]
 800e05a:	e7df      	b.n	800e01c <_scanf_float+0x3bc>
 800e05c:	4630      	mov	r0, r6
 800e05e:	4639      	mov	r1, r7
 800e060:	f7f2 fd32 	bl	8000ac8 <__aeabi_d2f>
 800e064:	e7f8      	b.n	800e058 <_scanf_float+0x3f8>
 800e066:	2700      	movs	r7, #0
 800e068:	e633      	b.n	800dcd2 <_scanf_float+0x72>
 800e06a:	bf00      	nop
 800e06c:	08012ad0 	.word	0x08012ad0
 800e070:	08012c2c 	.word	0x08012c2c

0800e074 <std>:
 800e074:	2300      	movs	r3, #0
 800e076:	b510      	push	{r4, lr}
 800e078:	4604      	mov	r4, r0
 800e07a:	e9c0 3300 	strd	r3, r3, [r0]
 800e07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e082:	6083      	str	r3, [r0, #8]
 800e084:	8181      	strh	r1, [r0, #12]
 800e086:	6643      	str	r3, [r0, #100]	@ 0x64
 800e088:	81c2      	strh	r2, [r0, #14]
 800e08a:	6183      	str	r3, [r0, #24]
 800e08c:	4619      	mov	r1, r3
 800e08e:	2208      	movs	r2, #8
 800e090:	305c      	adds	r0, #92	@ 0x5c
 800e092:	f000 f981 	bl	800e398 <memset>
 800e096:	4b0d      	ldr	r3, [pc, #52]	@ (800e0cc <std+0x58>)
 800e098:	6224      	str	r4, [r4, #32]
 800e09a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e09c:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d0 <std+0x5c>)
 800e09e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d4 <std+0x60>)
 800e0a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d8 <std+0x64>)
 800e0a6:	6323      	str	r3, [r4, #48]	@ 0x30
 800e0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e0dc <std+0x68>)
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d006      	beq.n	800e0bc <std+0x48>
 800e0ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e0b2:	4294      	cmp	r4, r2
 800e0b4:	d002      	beq.n	800e0bc <std+0x48>
 800e0b6:	33d0      	adds	r3, #208	@ 0xd0
 800e0b8:	429c      	cmp	r4, r3
 800e0ba:	d105      	bne.n	800e0c8 <std+0x54>
 800e0bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0c4:	f000 b9f6 	b.w	800e4b4 <__retarget_lock_init_recursive>
 800e0c8:	bd10      	pop	{r4, pc}
 800e0ca:	bf00      	nop
 800e0cc:	0800e295 	.word	0x0800e295
 800e0d0:	0800e2bb 	.word	0x0800e2bb
 800e0d4:	0800e2f3 	.word	0x0800e2f3
 800e0d8:	0800e317 	.word	0x0800e317
 800e0dc:	2000196c 	.word	0x2000196c

0800e0e0 <stdio_exit_handler>:
 800e0e0:	4a02      	ldr	r2, [pc, #8]	@ (800e0ec <stdio_exit_handler+0xc>)
 800e0e2:	4903      	ldr	r1, [pc, #12]	@ (800e0f0 <stdio_exit_handler+0x10>)
 800e0e4:	4803      	ldr	r0, [pc, #12]	@ (800e0f4 <stdio_exit_handler+0x14>)
 800e0e6:	f000 b869 	b.w	800e1bc <_fwalk_sglue>
 800e0ea:	bf00      	nop
 800e0ec:	20000194 	.word	0x20000194
 800e0f0:	080113b1 	.word	0x080113b1
 800e0f4:	200001a4 	.word	0x200001a4

0800e0f8 <cleanup_stdio>:
 800e0f8:	6841      	ldr	r1, [r0, #4]
 800e0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e12c <cleanup_stdio+0x34>)
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	4299      	cmp	r1, r3
 800e100:	4604      	mov	r4, r0
 800e102:	d001      	beq.n	800e108 <cleanup_stdio+0x10>
 800e104:	f003 f954 	bl	80113b0 <_fflush_r>
 800e108:	68a1      	ldr	r1, [r4, #8]
 800e10a:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <cleanup_stdio+0x38>)
 800e10c:	4299      	cmp	r1, r3
 800e10e:	d002      	beq.n	800e116 <cleanup_stdio+0x1e>
 800e110:	4620      	mov	r0, r4
 800e112:	f003 f94d 	bl	80113b0 <_fflush_r>
 800e116:	68e1      	ldr	r1, [r4, #12]
 800e118:	4b06      	ldr	r3, [pc, #24]	@ (800e134 <cleanup_stdio+0x3c>)
 800e11a:	4299      	cmp	r1, r3
 800e11c:	d004      	beq.n	800e128 <cleanup_stdio+0x30>
 800e11e:	4620      	mov	r0, r4
 800e120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e124:	f003 b944 	b.w	80113b0 <_fflush_r>
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	bf00      	nop
 800e12c:	2000196c 	.word	0x2000196c
 800e130:	200019d4 	.word	0x200019d4
 800e134:	20001a3c 	.word	0x20001a3c

0800e138 <global_stdio_init.part.0>:
 800e138:	b510      	push	{r4, lr}
 800e13a:	4b0b      	ldr	r3, [pc, #44]	@ (800e168 <global_stdio_init.part.0+0x30>)
 800e13c:	4c0b      	ldr	r4, [pc, #44]	@ (800e16c <global_stdio_init.part.0+0x34>)
 800e13e:	4a0c      	ldr	r2, [pc, #48]	@ (800e170 <global_stdio_init.part.0+0x38>)
 800e140:	4620      	mov	r0, r4
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	2104      	movs	r1, #4
 800e146:	2200      	movs	r2, #0
 800e148:	f7ff ff94 	bl	800e074 <std>
 800e14c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e150:	2201      	movs	r2, #1
 800e152:	2109      	movs	r1, #9
 800e154:	f7ff ff8e 	bl	800e074 <std>
 800e158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e15c:	2202      	movs	r2, #2
 800e15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e162:	2112      	movs	r1, #18
 800e164:	f7ff bf86 	b.w	800e074 <std>
 800e168:	20001aa4 	.word	0x20001aa4
 800e16c:	2000196c 	.word	0x2000196c
 800e170:	0800e0e1 	.word	0x0800e0e1

0800e174 <__sfp_lock_acquire>:
 800e174:	4801      	ldr	r0, [pc, #4]	@ (800e17c <__sfp_lock_acquire+0x8>)
 800e176:	f000 b99e 	b.w	800e4b6 <__retarget_lock_acquire_recursive>
 800e17a:	bf00      	nop
 800e17c:	20001aad 	.word	0x20001aad

0800e180 <__sfp_lock_release>:
 800e180:	4801      	ldr	r0, [pc, #4]	@ (800e188 <__sfp_lock_release+0x8>)
 800e182:	f000 b999 	b.w	800e4b8 <__retarget_lock_release_recursive>
 800e186:	bf00      	nop
 800e188:	20001aad 	.word	0x20001aad

0800e18c <__sinit>:
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4604      	mov	r4, r0
 800e190:	f7ff fff0 	bl	800e174 <__sfp_lock_acquire>
 800e194:	6a23      	ldr	r3, [r4, #32]
 800e196:	b11b      	cbz	r3, 800e1a0 <__sinit+0x14>
 800e198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e19c:	f7ff bff0 	b.w	800e180 <__sfp_lock_release>
 800e1a0:	4b04      	ldr	r3, [pc, #16]	@ (800e1b4 <__sinit+0x28>)
 800e1a2:	6223      	str	r3, [r4, #32]
 800e1a4:	4b04      	ldr	r3, [pc, #16]	@ (800e1b8 <__sinit+0x2c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1f5      	bne.n	800e198 <__sinit+0xc>
 800e1ac:	f7ff ffc4 	bl	800e138 <global_stdio_init.part.0>
 800e1b0:	e7f2      	b.n	800e198 <__sinit+0xc>
 800e1b2:	bf00      	nop
 800e1b4:	0800e0f9 	.word	0x0800e0f9
 800e1b8:	20001aa4 	.word	0x20001aa4

0800e1bc <_fwalk_sglue>:
 800e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	4688      	mov	r8, r1
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	2600      	movs	r6, #0
 800e1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1cc:	f1b9 0901 	subs.w	r9, r9, #1
 800e1d0:	d505      	bpl.n	800e1de <_fwalk_sglue+0x22>
 800e1d2:	6824      	ldr	r4, [r4, #0]
 800e1d4:	2c00      	cmp	r4, #0
 800e1d6:	d1f7      	bne.n	800e1c8 <_fwalk_sglue+0xc>
 800e1d8:	4630      	mov	r0, r6
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	89ab      	ldrh	r3, [r5, #12]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d907      	bls.n	800e1f4 <_fwalk_sglue+0x38>
 800e1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	d003      	beq.n	800e1f4 <_fwalk_sglue+0x38>
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	47c0      	blx	r8
 800e1f2:	4306      	orrs	r6, r0
 800e1f4:	3568      	adds	r5, #104	@ 0x68
 800e1f6:	e7e9      	b.n	800e1cc <_fwalk_sglue+0x10>

0800e1f8 <siprintf>:
 800e1f8:	b40e      	push	{r1, r2, r3}
 800e1fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e1fe:	b510      	push	{r4, lr}
 800e200:	2400      	movs	r4, #0
 800e202:	b09d      	sub	sp, #116	@ 0x74
 800e204:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e206:	9002      	str	r0, [sp, #8]
 800e208:	9006      	str	r0, [sp, #24]
 800e20a:	9107      	str	r1, [sp, #28]
 800e20c:	9104      	str	r1, [sp, #16]
 800e20e:	4809      	ldr	r0, [pc, #36]	@ (800e234 <siprintf+0x3c>)
 800e210:	4909      	ldr	r1, [pc, #36]	@ (800e238 <siprintf+0x40>)
 800e212:	f853 2b04 	ldr.w	r2, [r3], #4
 800e216:	9105      	str	r1, [sp, #20]
 800e218:	6800      	ldr	r0, [r0, #0]
 800e21a:	a902      	add	r1, sp, #8
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e220:	f002 fc30 	bl	8010a84 <_svfiprintf_r>
 800e224:	9b02      	ldr	r3, [sp, #8]
 800e226:	701c      	strb	r4, [r3, #0]
 800e228:	b01d      	add	sp, #116	@ 0x74
 800e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e22e:	b003      	add	sp, #12
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	200001a0 	.word	0x200001a0
 800e238:	ffff0208 	.word	0xffff0208

0800e23c <siscanf>:
 800e23c:	b40e      	push	{r1, r2, r3}
 800e23e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e242:	b570      	push	{r4, r5, r6, lr}
 800e244:	2500      	movs	r5, #0
 800e246:	b09d      	sub	sp, #116	@ 0x74
 800e248:	ac21      	add	r4, sp, #132	@ 0x84
 800e24a:	f854 6b04 	ldr.w	r6, [r4], #4
 800e24e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e252:	951b      	str	r5, [sp, #108]	@ 0x6c
 800e254:	9002      	str	r0, [sp, #8]
 800e256:	9006      	str	r0, [sp, #24]
 800e258:	f7f1 ff7a 	bl	8000150 <strlen>
 800e25c:	4b0b      	ldr	r3, [pc, #44]	@ (800e28c <siscanf+0x50>)
 800e25e:	9003      	str	r0, [sp, #12]
 800e260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e262:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e266:	9007      	str	r0, [sp, #28]
 800e268:	4809      	ldr	r0, [pc, #36]	@ (800e290 <siscanf+0x54>)
 800e26a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e26e:	4632      	mov	r2, r6
 800e270:	4623      	mov	r3, r4
 800e272:	a902      	add	r1, sp, #8
 800e274:	6800      	ldr	r0, [r0, #0]
 800e276:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e278:	9514      	str	r5, [sp, #80]	@ 0x50
 800e27a:	9401      	str	r4, [sp, #4]
 800e27c:	f002 fd58 	bl	8010d30 <__ssvfiscanf_r>
 800e280:	b01d      	add	sp, #116	@ 0x74
 800e282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e286:	b003      	add	sp, #12
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	0800e2b7 	.word	0x0800e2b7
 800e290:	200001a0 	.word	0x200001a0

0800e294 <__sread>:
 800e294:	b510      	push	{r4, lr}
 800e296:	460c      	mov	r4, r1
 800e298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e29c:	f000 f8bc 	bl	800e418 <_read_r>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	bfab      	itete	ge
 800e2a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e2a8:	181b      	addge	r3, r3, r0
 800e2aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2ae:	bfac      	ite	ge
 800e2b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2b2:	81a3      	strhlt	r3, [r4, #12]
 800e2b4:	bd10      	pop	{r4, pc}

0800e2b6 <__seofread>:
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	4770      	bx	lr

0800e2ba <__swrite>:
 800e2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	461f      	mov	r7, r3
 800e2c0:	898b      	ldrh	r3, [r1, #12]
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	05db      	lsls	r3, r3, #23
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	4616      	mov	r6, r2
 800e2ca:	d505      	bpl.n	800e2d8 <__swrite+0x1e>
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d4:	f000 f88e 	bl	800e3f4 <_lseek_r>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	4632      	mov	r2, r6
 800e2dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ee:	f000 b8a5 	b.w	800e43c <_write_r>

0800e2f2 <__sseek>:
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fa:	f000 f87b 	bl	800e3f4 <_lseek_r>
 800e2fe:	1c43      	adds	r3, r0, #1
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	bf15      	itete	ne
 800e304:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e30a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e30e:	81a3      	strheq	r3, [r4, #12]
 800e310:	bf18      	it	ne
 800e312:	81a3      	strhne	r3, [r4, #12]
 800e314:	bd10      	pop	{r4, pc}

0800e316 <__sclose>:
 800e316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31a:	f000 b85b 	b.w	800e3d4 <_close_r>

0800e31e <_vsniprintf_r>:
 800e31e:	b530      	push	{r4, r5, lr}
 800e320:	4614      	mov	r4, r2
 800e322:	2c00      	cmp	r4, #0
 800e324:	4605      	mov	r5, r0
 800e326:	461a      	mov	r2, r3
 800e328:	b09b      	sub	sp, #108	@ 0x6c
 800e32a:	da05      	bge.n	800e338 <_vsniprintf_r+0x1a>
 800e32c:	238b      	movs	r3, #139	@ 0x8b
 800e32e:	6003      	str	r3, [r0, #0]
 800e330:	f04f 30ff 	mov.w	r0, #4294967295
 800e334:	b01b      	add	sp, #108	@ 0x6c
 800e336:	bd30      	pop	{r4, r5, pc}
 800e338:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e33c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e340:	f04f 0300 	mov.w	r3, #0
 800e344:	9319      	str	r3, [sp, #100]	@ 0x64
 800e346:	bf0c      	ite	eq
 800e348:	4623      	moveq	r3, r4
 800e34a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e34e:	9302      	str	r3, [sp, #8]
 800e350:	9305      	str	r3, [sp, #20]
 800e352:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e356:	9100      	str	r1, [sp, #0]
 800e358:	9104      	str	r1, [sp, #16]
 800e35a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e35e:	4669      	mov	r1, sp
 800e360:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e362:	f002 fb8f 	bl	8010a84 <_svfiprintf_r>
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	bfbc      	itt	lt
 800e36a:	238b      	movlt	r3, #139	@ 0x8b
 800e36c:	602b      	strlt	r3, [r5, #0]
 800e36e:	2c00      	cmp	r4, #0
 800e370:	d0e0      	beq.n	800e334 <_vsniprintf_r+0x16>
 800e372:	2200      	movs	r2, #0
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	701a      	strb	r2, [r3, #0]
 800e378:	e7dc      	b.n	800e334 <_vsniprintf_r+0x16>
	...

0800e37c <vsniprintf>:
 800e37c:	b507      	push	{r0, r1, r2, lr}
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	4613      	mov	r3, r2
 800e382:	460a      	mov	r2, r1
 800e384:	4601      	mov	r1, r0
 800e386:	4803      	ldr	r0, [pc, #12]	@ (800e394 <vsniprintf+0x18>)
 800e388:	6800      	ldr	r0, [r0, #0]
 800e38a:	f7ff ffc8 	bl	800e31e <_vsniprintf_r>
 800e38e:	b003      	add	sp, #12
 800e390:	f85d fb04 	ldr.w	pc, [sp], #4
 800e394:	200001a0 	.word	0x200001a0

0800e398 <memset>:
 800e398:	4603      	mov	r3, r0
 800e39a:	4402      	add	r2, r0
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d100      	bne.n	800e3a2 <memset+0xa>
 800e3a0:	4770      	bx	lr
 800e3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e3a6:	e7f9      	b.n	800e39c <memset+0x4>

0800e3a8 <strncmp>:
 800e3a8:	b510      	push	{r4, lr}
 800e3aa:	b16a      	cbz	r2, 800e3c8 <strncmp+0x20>
 800e3ac:	3901      	subs	r1, #1
 800e3ae:	1884      	adds	r4, r0, r2
 800e3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d103      	bne.n	800e3c4 <strncmp+0x1c>
 800e3bc:	42a0      	cmp	r0, r4
 800e3be:	d001      	beq.n	800e3c4 <strncmp+0x1c>
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	d1f5      	bne.n	800e3b0 <strncmp+0x8>
 800e3c4:	1ad0      	subs	r0, r2, r3
 800e3c6:	bd10      	pop	{r4, pc}
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	e7fc      	b.n	800e3c6 <strncmp+0x1e>

0800e3cc <_localeconv_r>:
 800e3cc:	4800      	ldr	r0, [pc, #0]	@ (800e3d0 <_localeconv_r+0x4>)
 800e3ce:	4770      	bx	lr
 800e3d0:	200002e0 	.word	0x200002e0

0800e3d4 <_close_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	4d05      	ldr	r5, [pc, #20]	@ (800e3f0 <_close_r+0x1c>)
 800e3da:	4604      	mov	r4, r0
 800e3dc:	4608      	mov	r0, r1
 800e3de:	602b      	str	r3, [r5, #0]
 800e3e0:	f7f5 fabd 	bl	800395e <_close>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d102      	bne.n	800e3ee <_close_r+0x1a>
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	b103      	cbz	r3, 800e3ee <_close_r+0x1a>
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	20001aa8 	.word	0x20001aa8

0800e3f4 <_lseek_r>:
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	4608      	mov	r0, r1
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	4d05      	ldr	r5, [pc, #20]	@ (800e414 <_lseek_r+0x20>)
 800e400:	602a      	str	r2, [r5, #0]
 800e402:	461a      	mov	r2, r3
 800e404:	f7f5 facf 	bl	80039a6 <_lseek>
 800e408:	1c43      	adds	r3, r0, #1
 800e40a:	d102      	bne.n	800e412 <_lseek_r+0x1e>
 800e40c:	682b      	ldr	r3, [r5, #0]
 800e40e:	b103      	cbz	r3, 800e412 <_lseek_r+0x1e>
 800e410:	6023      	str	r3, [r4, #0]
 800e412:	bd38      	pop	{r3, r4, r5, pc}
 800e414:	20001aa8 	.word	0x20001aa8

0800e418 <_read_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4604      	mov	r4, r0
 800e41c:	4608      	mov	r0, r1
 800e41e:	4611      	mov	r1, r2
 800e420:	2200      	movs	r2, #0
 800e422:	4d05      	ldr	r5, [pc, #20]	@ (800e438 <_read_r+0x20>)
 800e424:	602a      	str	r2, [r5, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	f7f5 fa60 	bl	80038ec <_read>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_read_r+0x1e>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_read_r+0x1e>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	20001aa8 	.word	0x20001aa8

0800e43c <_write_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4604      	mov	r4, r0
 800e440:	4608      	mov	r0, r1
 800e442:	4611      	mov	r1, r2
 800e444:	2200      	movs	r2, #0
 800e446:	4d05      	ldr	r5, [pc, #20]	@ (800e45c <_write_r+0x20>)
 800e448:	602a      	str	r2, [r5, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	f7f5 fa6b 	bl	8003926 <_write>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_write_r+0x1e>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_write_r+0x1e>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	20001aa8 	.word	0x20001aa8

0800e460 <__errno>:
 800e460:	4b01      	ldr	r3, [pc, #4]	@ (800e468 <__errno+0x8>)
 800e462:	6818      	ldr	r0, [r3, #0]
 800e464:	4770      	bx	lr
 800e466:	bf00      	nop
 800e468:	200001a0 	.word	0x200001a0

0800e46c <__libc_init_array>:
 800e46c:	b570      	push	{r4, r5, r6, lr}
 800e46e:	2600      	movs	r6, #0
 800e470:	4d0c      	ldr	r5, [pc, #48]	@ (800e4a4 <__libc_init_array+0x38>)
 800e472:	4c0d      	ldr	r4, [pc, #52]	@ (800e4a8 <__libc_init_array+0x3c>)
 800e474:	1b64      	subs	r4, r4, r5
 800e476:	10a4      	asrs	r4, r4, #2
 800e478:	42a6      	cmp	r6, r4
 800e47a:	d109      	bne.n	800e490 <__libc_init_array+0x24>
 800e47c:	f003 ff56 	bl	801232c <_init>
 800e480:	2600      	movs	r6, #0
 800e482:	4d0a      	ldr	r5, [pc, #40]	@ (800e4ac <__libc_init_array+0x40>)
 800e484:	4c0a      	ldr	r4, [pc, #40]	@ (800e4b0 <__libc_init_array+0x44>)
 800e486:	1b64      	subs	r4, r4, r5
 800e488:	10a4      	asrs	r4, r4, #2
 800e48a:	42a6      	cmp	r6, r4
 800e48c:	d105      	bne.n	800e49a <__libc_init_array+0x2e>
 800e48e:	bd70      	pop	{r4, r5, r6, pc}
 800e490:	f855 3b04 	ldr.w	r3, [r5], #4
 800e494:	4798      	blx	r3
 800e496:	3601      	adds	r6, #1
 800e498:	e7ee      	b.n	800e478 <__libc_init_array+0xc>
 800e49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e49e:	4798      	blx	r3
 800e4a0:	3601      	adds	r6, #1
 800e4a2:	e7f2      	b.n	800e48a <__libc_init_array+0x1e>
 800e4a4:	08012eec 	.word	0x08012eec
 800e4a8:	08012eec 	.word	0x08012eec
 800e4ac:	08012eec 	.word	0x08012eec
 800e4b0:	08012ef0 	.word	0x08012ef0

0800e4b4 <__retarget_lock_init_recursive>:
 800e4b4:	4770      	bx	lr

0800e4b6 <__retarget_lock_acquire_recursive>:
 800e4b6:	4770      	bx	lr

0800e4b8 <__retarget_lock_release_recursive>:
 800e4b8:	4770      	bx	lr

0800e4ba <memchr>:
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	b510      	push	{r4, lr}
 800e4be:	b2c9      	uxtb	r1, r1
 800e4c0:	4402      	add	r2, r0
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	d101      	bne.n	800e4cc <memchr+0x12>
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	e003      	b.n	800e4d4 <memchr+0x1a>
 800e4cc:	7804      	ldrb	r4, [r0, #0]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	428c      	cmp	r4, r1
 800e4d2:	d1f6      	bne.n	800e4c2 <memchr+0x8>
 800e4d4:	bd10      	pop	{r4, pc}
	...

0800e4d8 <nanf>:
 800e4d8:	4800      	ldr	r0, [pc, #0]	@ (800e4dc <nanf+0x4>)
 800e4da:	4770      	bx	lr
 800e4dc:	7fc00000 	.word	0x7fc00000

0800e4e0 <quorem>:
 800e4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	6903      	ldr	r3, [r0, #16]
 800e4e6:	690c      	ldr	r4, [r1, #16]
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	42a3      	cmp	r3, r4
 800e4ec:	db7e      	blt.n	800e5ec <quorem+0x10c>
 800e4ee:	3c01      	subs	r4, #1
 800e4f0:	00a3      	lsls	r3, r4, #2
 800e4f2:	f100 0514 	add.w	r5, r0, #20
 800e4f6:	f101 0814 	add.w	r8, r1, #20
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e500:	9301      	str	r3, [sp, #4]
 800e502:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e50a:	3301      	adds	r3, #1
 800e50c:	429a      	cmp	r2, r3
 800e50e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e512:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e516:	d32e      	bcc.n	800e576 <quorem+0x96>
 800e518:	f04f 0a00 	mov.w	sl, #0
 800e51c:	46c4      	mov	ip, r8
 800e51e:	46ae      	mov	lr, r5
 800e520:	46d3      	mov	fp, sl
 800e522:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e526:	b298      	uxth	r0, r3
 800e528:	fb06 a000 	mla	r0, r6, r0, sl
 800e52c:	0c1b      	lsrs	r3, r3, #16
 800e52e:	0c02      	lsrs	r2, r0, #16
 800e530:	fb06 2303 	mla	r3, r6, r3, r2
 800e534:	f8de 2000 	ldr.w	r2, [lr]
 800e538:	b280      	uxth	r0, r0
 800e53a:	b292      	uxth	r2, r2
 800e53c:	1a12      	subs	r2, r2, r0
 800e53e:	445a      	add	r2, fp
 800e540:	f8de 0000 	ldr.w	r0, [lr]
 800e544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e548:	b29b      	uxth	r3, r3
 800e54a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e54e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e552:	b292      	uxth	r2, r2
 800e554:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e558:	45e1      	cmp	r9, ip
 800e55a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e55e:	f84e 2b04 	str.w	r2, [lr], #4
 800e562:	d2de      	bcs.n	800e522 <quorem+0x42>
 800e564:	9b00      	ldr	r3, [sp, #0]
 800e566:	58eb      	ldr	r3, [r5, r3]
 800e568:	b92b      	cbnz	r3, 800e576 <quorem+0x96>
 800e56a:	9b01      	ldr	r3, [sp, #4]
 800e56c:	3b04      	subs	r3, #4
 800e56e:	429d      	cmp	r5, r3
 800e570:	461a      	mov	r2, r3
 800e572:	d32f      	bcc.n	800e5d4 <quorem+0xf4>
 800e574:	613c      	str	r4, [r7, #16]
 800e576:	4638      	mov	r0, r7
 800e578:	f001 f9c8 	bl	800f90c <__mcmp>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	db25      	blt.n	800e5cc <quorem+0xec>
 800e580:	4629      	mov	r1, r5
 800e582:	2000      	movs	r0, #0
 800e584:	f858 2b04 	ldr.w	r2, [r8], #4
 800e588:	f8d1 c000 	ldr.w	ip, [r1]
 800e58c:	fa1f fe82 	uxth.w	lr, r2
 800e590:	fa1f f38c 	uxth.w	r3, ip
 800e594:	eba3 030e 	sub.w	r3, r3, lr
 800e598:	4403      	add	r3, r0
 800e59a:	0c12      	lsrs	r2, r2, #16
 800e59c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e5a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5aa:	45c1      	cmp	r9, r8
 800e5ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e5b0:	f841 3b04 	str.w	r3, [r1], #4
 800e5b4:	d2e6      	bcs.n	800e584 <quorem+0xa4>
 800e5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5be:	b922      	cbnz	r2, 800e5ca <quorem+0xea>
 800e5c0:	3b04      	subs	r3, #4
 800e5c2:	429d      	cmp	r5, r3
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	d30b      	bcc.n	800e5e0 <quorem+0x100>
 800e5c8:	613c      	str	r4, [r7, #16]
 800e5ca:	3601      	adds	r6, #1
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	b003      	add	sp, #12
 800e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d4:	6812      	ldr	r2, [r2, #0]
 800e5d6:	3b04      	subs	r3, #4
 800e5d8:	2a00      	cmp	r2, #0
 800e5da:	d1cb      	bne.n	800e574 <quorem+0x94>
 800e5dc:	3c01      	subs	r4, #1
 800e5de:	e7c6      	b.n	800e56e <quorem+0x8e>
 800e5e0:	6812      	ldr	r2, [r2, #0]
 800e5e2:	3b04      	subs	r3, #4
 800e5e4:	2a00      	cmp	r2, #0
 800e5e6:	d1ef      	bne.n	800e5c8 <quorem+0xe8>
 800e5e8:	3c01      	subs	r4, #1
 800e5ea:	e7ea      	b.n	800e5c2 <quorem+0xe2>
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	e7ee      	b.n	800e5ce <quorem+0xee>

0800e5f0 <_dtoa_r>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	4614      	mov	r4, r2
 800e5f6:	461d      	mov	r5, r3
 800e5f8:	69c7      	ldr	r7, [r0, #28]
 800e5fa:	b097      	sub	sp, #92	@ 0x5c
 800e5fc:	4681      	mov	r9, r0
 800e5fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e602:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e604:	b97f      	cbnz	r7, 800e626 <_dtoa_r+0x36>
 800e606:	2010      	movs	r0, #16
 800e608:	f000 fe0e 	bl	800f228 <malloc>
 800e60c:	4602      	mov	r2, r0
 800e60e:	f8c9 001c 	str.w	r0, [r9, #28]
 800e612:	b920      	cbnz	r0, 800e61e <_dtoa_r+0x2e>
 800e614:	21ef      	movs	r1, #239	@ 0xef
 800e616:	4bac      	ldr	r3, [pc, #688]	@ (800e8c8 <_dtoa_r+0x2d8>)
 800e618:	48ac      	ldr	r0, [pc, #688]	@ (800e8cc <_dtoa_r+0x2dc>)
 800e61a:	f002 ffa1 	bl	8011560 <__assert_func>
 800e61e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e622:	6007      	str	r7, [r0, #0]
 800e624:	60c7      	str	r7, [r0, #12]
 800e626:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e62a:	6819      	ldr	r1, [r3, #0]
 800e62c:	b159      	cbz	r1, 800e646 <_dtoa_r+0x56>
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	2301      	movs	r3, #1
 800e632:	4093      	lsls	r3, r2
 800e634:	604a      	str	r2, [r1, #4]
 800e636:	608b      	str	r3, [r1, #8]
 800e638:	4648      	mov	r0, r9
 800e63a:	f000 feeb 	bl	800f414 <_Bfree>
 800e63e:	2200      	movs	r2, #0
 800e640:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	1e2b      	subs	r3, r5, #0
 800e648:	bfaf      	iteee	ge
 800e64a:	2300      	movge	r3, #0
 800e64c:	2201      	movlt	r2, #1
 800e64e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e652:	9307      	strlt	r3, [sp, #28]
 800e654:	bfa8      	it	ge
 800e656:	6033      	strge	r3, [r6, #0]
 800e658:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e65c:	4b9c      	ldr	r3, [pc, #624]	@ (800e8d0 <_dtoa_r+0x2e0>)
 800e65e:	bfb8      	it	lt
 800e660:	6032      	strlt	r2, [r6, #0]
 800e662:	ea33 0308 	bics.w	r3, r3, r8
 800e666:	d112      	bne.n	800e68e <_dtoa_r+0x9e>
 800e668:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e66c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e674:	4323      	orrs	r3, r4
 800e676:	f000 855e 	beq.w	800f136 <_dtoa_r+0xb46>
 800e67a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e67c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e8d4 <_dtoa_r+0x2e4>
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 8560 	beq.w	800f146 <_dtoa_r+0xb56>
 800e686:	f10a 0303 	add.w	r3, sl, #3
 800e68a:	f000 bd5a 	b.w	800f142 <_dtoa_r+0xb52>
 800e68e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e692:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e69a:	2200      	movs	r2, #0
 800e69c:	2300      	movs	r3, #0
 800e69e:	f7f2 f983 	bl	80009a8 <__aeabi_dcmpeq>
 800e6a2:	4607      	mov	r7, r0
 800e6a4:	b158      	cbz	r0, 800e6be <_dtoa_r+0xce>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e6aa:	6013      	str	r3, [r2, #0]
 800e6ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e6ae:	b113      	cbz	r3, 800e6b6 <_dtoa_r+0xc6>
 800e6b0:	4b89      	ldr	r3, [pc, #548]	@ (800e8d8 <_dtoa_r+0x2e8>)
 800e6b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e6b4:	6013      	str	r3, [r2, #0]
 800e6b6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e8dc <_dtoa_r+0x2ec>
 800e6ba:	f000 bd44 	b.w	800f146 <_dtoa_r+0xb56>
 800e6be:	ab14      	add	r3, sp, #80	@ 0x50
 800e6c0:	9301      	str	r3, [sp, #4]
 800e6c2:	ab15      	add	r3, sp, #84	@ 0x54
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	4648      	mov	r0, r9
 800e6c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e6cc:	f001 fa36 	bl	800fb3c <__d2b>
 800e6d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e6d4:	9003      	str	r0, [sp, #12]
 800e6d6:	2e00      	cmp	r6, #0
 800e6d8:	d078      	beq.n	800e7cc <_dtoa_r+0x1dc>
 800e6da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e6f0:	9712      	str	r7, [sp, #72]	@ 0x48
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	4b7a      	ldr	r3, [pc, #488]	@ (800e8e0 <_dtoa_r+0x2f0>)
 800e6f8:	f7f1 fd36 	bl	8000168 <__aeabi_dsub>
 800e6fc:	a36c      	add	r3, pc, #432	@ (adr r3, 800e8b0 <_dtoa_r+0x2c0>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f7f1 fee9 	bl	80004d8 <__aeabi_dmul>
 800e706:	a36c      	add	r3, pc, #432	@ (adr r3, 800e8b8 <_dtoa_r+0x2c8>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f7f1 fd2e 	bl	800016c <__adddf3>
 800e710:	4604      	mov	r4, r0
 800e712:	4630      	mov	r0, r6
 800e714:	460d      	mov	r5, r1
 800e716:	f7f1 fe75 	bl	8000404 <__aeabi_i2d>
 800e71a:	a369      	add	r3, pc, #420	@ (adr r3, 800e8c0 <_dtoa_r+0x2d0>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f7f1 feda 	bl	80004d8 <__aeabi_dmul>
 800e724:	4602      	mov	r2, r0
 800e726:	460b      	mov	r3, r1
 800e728:	4620      	mov	r0, r4
 800e72a:	4629      	mov	r1, r5
 800e72c:	f7f1 fd1e 	bl	800016c <__adddf3>
 800e730:	4604      	mov	r4, r0
 800e732:	460d      	mov	r5, r1
 800e734:	f7f2 f980 	bl	8000a38 <__aeabi_d2iz>
 800e738:	2200      	movs	r2, #0
 800e73a:	4607      	mov	r7, r0
 800e73c:	2300      	movs	r3, #0
 800e73e:	4620      	mov	r0, r4
 800e740:	4629      	mov	r1, r5
 800e742:	f7f2 f93b 	bl	80009bc <__aeabi_dcmplt>
 800e746:	b140      	cbz	r0, 800e75a <_dtoa_r+0x16a>
 800e748:	4638      	mov	r0, r7
 800e74a:	f7f1 fe5b 	bl	8000404 <__aeabi_i2d>
 800e74e:	4622      	mov	r2, r4
 800e750:	462b      	mov	r3, r5
 800e752:	f7f2 f929 	bl	80009a8 <__aeabi_dcmpeq>
 800e756:	b900      	cbnz	r0, 800e75a <_dtoa_r+0x16a>
 800e758:	3f01      	subs	r7, #1
 800e75a:	2f16      	cmp	r7, #22
 800e75c:	d854      	bhi.n	800e808 <_dtoa_r+0x218>
 800e75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e762:	4b60      	ldr	r3, [pc, #384]	@ (800e8e4 <_dtoa_r+0x2f4>)
 800e764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f2 f926 	bl	80009bc <__aeabi_dcmplt>
 800e770:	2800      	cmp	r0, #0
 800e772:	d04b      	beq.n	800e80c <_dtoa_r+0x21c>
 800e774:	2300      	movs	r3, #0
 800e776:	3f01      	subs	r7, #1
 800e778:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e77a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e77c:	1b9b      	subs	r3, r3, r6
 800e77e:	1e5a      	subs	r2, r3, #1
 800e780:	bf49      	itett	mi
 800e782:	f1c3 0301 	rsbmi	r3, r3, #1
 800e786:	2300      	movpl	r3, #0
 800e788:	9304      	strmi	r3, [sp, #16]
 800e78a:	2300      	movmi	r3, #0
 800e78c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e78e:	bf54      	ite	pl
 800e790:	9304      	strpl	r3, [sp, #16]
 800e792:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e794:	2f00      	cmp	r7, #0
 800e796:	db3b      	blt.n	800e810 <_dtoa_r+0x220>
 800e798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e79a:	970e      	str	r7, [sp, #56]	@ 0x38
 800e79c:	443b      	add	r3, r7
 800e79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e7a6:	2b09      	cmp	r3, #9
 800e7a8:	d865      	bhi.n	800e876 <_dtoa_r+0x286>
 800e7aa:	2b05      	cmp	r3, #5
 800e7ac:	bfc4      	itt	gt
 800e7ae:	3b04      	subgt	r3, #4
 800e7b0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e7b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e7b4:	bfc8      	it	gt
 800e7b6:	2400      	movgt	r4, #0
 800e7b8:	f1a3 0302 	sub.w	r3, r3, #2
 800e7bc:	bfd8      	it	le
 800e7be:	2401      	movle	r4, #1
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d864      	bhi.n	800e88e <_dtoa_r+0x29e>
 800e7c4:	e8df f003 	tbb	[pc, r3]
 800e7c8:	2c385553 	.word	0x2c385553
 800e7cc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e7d0:	441e      	add	r6, r3
 800e7d2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e7d6:	2b20      	cmp	r3, #32
 800e7d8:	bfc1      	itttt	gt
 800e7da:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7de:	fa08 f803 	lslgt.w	r8, r8, r3
 800e7e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e7ea:	bfd6      	itet	le
 800e7ec:	f1c3 0320 	rsble	r3, r3, #32
 800e7f0:	ea48 0003 	orrgt.w	r0, r8, r3
 800e7f4:	fa04 f003 	lslle.w	r0, r4, r3
 800e7f8:	f7f1 fdf4 	bl	80003e4 <__aeabi_ui2d>
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e802:	3e01      	subs	r6, #1
 800e804:	9212      	str	r2, [sp, #72]	@ 0x48
 800e806:	e774      	b.n	800e6f2 <_dtoa_r+0x102>
 800e808:	2301      	movs	r3, #1
 800e80a:	e7b5      	b.n	800e778 <_dtoa_r+0x188>
 800e80c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e80e:	e7b4      	b.n	800e77a <_dtoa_r+0x18a>
 800e810:	9b04      	ldr	r3, [sp, #16]
 800e812:	1bdb      	subs	r3, r3, r7
 800e814:	9304      	str	r3, [sp, #16]
 800e816:	427b      	negs	r3, r7
 800e818:	930a      	str	r3, [sp, #40]	@ 0x28
 800e81a:	2300      	movs	r3, #0
 800e81c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e81e:	e7c1      	b.n	800e7a4 <_dtoa_r+0x1b4>
 800e820:	2301      	movs	r3, #1
 800e822:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e826:	eb07 0b03 	add.w	fp, r7, r3
 800e82a:	f10b 0301 	add.w	r3, fp, #1
 800e82e:	2b01      	cmp	r3, #1
 800e830:	9308      	str	r3, [sp, #32]
 800e832:	bfb8      	it	lt
 800e834:	2301      	movlt	r3, #1
 800e836:	e006      	b.n	800e846 <_dtoa_r+0x256>
 800e838:	2301      	movs	r3, #1
 800e83a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e83c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e83e:	2b00      	cmp	r3, #0
 800e840:	dd28      	ble.n	800e894 <_dtoa_r+0x2a4>
 800e842:	469b      	mov	fp, r3
 800e844:	9308      	str	r3, [sp, #32]
 800e846:	2100      	movs	r1, #0
 800e848:	2204      	movs	r2, #4
 800e84a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e84e:	f102 0514 	add.w	r5, r2, #20
 800e852:	429d      	cmp	r5, r3
 800e854:	d926      	bls.n	800e8a4 <_dtoa_r+0x2b4>
 800e856:	6041      	str	r1, [r0, #4]
 800e858:	4648      	mov	r0, r9
 800e85a:	f000 fd9b 	bl	800f394 <_Balloc>
 800e85e:	4682      	mov	sl, r0
 800e860:	2800      	cmp	r0, #0
 800e862:	d143      	bne.n	800e8ec <_dtoa_r+0x2fc>
 800e864:	4602      	mov	r2, r0
 800e866:	f240 11af 	movw	r1, #431	@ 0x1af
 800e86a:	4b1f      	ldr	r3, [pc, #124]	@ (800e8e8 <_dtoa_r+0x2f8>)
 800e86c:	e6d4      	b.n	800e618 <_dtoa_r+0x28>
 800e86e:	2300      	movs	r3, #0
 800e870:	e7e3      	b.n	800e83a <_dtoa_r+0x24a>
 800e872:	2300      	movs	r3, #0
 800e874:	e7d5      	b.n	800e822 <_dtoa_r+0x232>
 800e876:	2401      	movs	r4, #1
 800e878:	2300      	movs	r3, #0
 800e87a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e87c:	9320      	str	r3, [sp, #128]	@ 0x80
 800e87e:	f04f 3bff 	mov.w	fp, #4294967295
 800e882:	2200      	movs	r2, #0
 800e884:	2312      	movs	r3, #18
 800e886:	f8cd b020 	str.w	fp, [sp, #32]
 800e88a:	9221      	str	r2, [sp, #132]	@ 0x84
 800e88c:	e7db      	b.n	800e846 <_dtoa_r+0x256>
 800e88e:	2301      	movs	r3, #1
 800e890:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e892:	e7f4      	b.n	800e87e <_dtoa_r+0x28e>
 800e894:	f04f 0b01 	mov.w	fp, #1
 800e898:	465b      	mov	r3, fp
 800e89a:	f8cd b020 	str.w	fp, [sp, #32]
 800e89e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800e8a2:	e7d0      	b.n	800e846 <_dtoa_r+0x256>
 800e8a4:	3101      	adds	r1, #1
 800e8a6:	0052      	lsls	r2, r2, #1
 800e8a8:	e7d1      	b.n	800e84e <_dtoa_r+0x25e>
 800e8aa:	bf00      	nop
 800e8ac:	f3af 8000 	nop.w
 800e8b0:	636f4361 	.word	0x636f4361
 800e8b4:	3fd287a7 	.word	0x3fd287a7
 800e8b8:	8b60c8b3 	.word	0x8b60c8b3
 800e8bc:	3fc68a28 	.word	0x3fc68a28
 800e8c0:	509f79fb 	.word	0x509f79fb
 800e8c4:	3fd34413 	.word	0x3fd34413
 800e8c8:	08012ae2 	.word	0x08012ae2
 800e8cc:	08012af9 	.word	0x08012af9
 800e8d0:	7ff00000 	.word	0x7ff00000
 800e8d4:	08012ade 	.word	0x08012ade
 800e8d8:	08012be5 	.word	0x08012be5
 800e8dc:	08012be4 	.word	0x08012be4
 800e8e0:	3ff80000 	.word	0x3ff80000
 800e8e4:	08012cc8 	.word	0x08012cc8
 800e8e8:	08012b51 	.word	0x08012b51
 800e8ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e8f0:	6018      	str	r0, [r3, #0]
 800e8f2:	9b08      	ldr	r3, [sp, #32]
 800e8f4:	2b0e      	cmp	r3, #14
 800e8f6:	f200 80a1 	bhi.w	800ea3c <_dtoa_r+0x44c>
 800e8fa:	2c00      	cmp	r4, #0
 800e8fc:	f000 809e 	beq.w	800ea3c <_dtoa_r+0x44c>
 800e900:	2f00      	cmp	r7, #0
 800e902:	dd33      	ble.n	800e96c <_dtoa_r+0x37c>
 800e904:	4b9c      	ldr	r3, [pc, #624]	@ (800eb78 <_dtoa_r+0x588>)
 800e906:	f007 020f 	and.w	r2, r7, #15
 800e90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e90e:	05f8      	lsls	r0, r7, #23
 800e910:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e914:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800e918:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e91c:	d516      	bpl.n	800e94c <_dtoa_r+0x35c>
 800e91e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e922:	4b96      	ldr	r3, [pc, #600]	@ (800eb7c <_dtoa_r+0x58c>)
 800e924:	2603      	movs	r6, #3
 800e926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e92a:	f7f1 feff 	bl	800072c <__aeabi_ddiv>
 800e92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e932:	f004 040f 	and.w	r4, r4, #15
 800e936:	4d91      	ldr	r5, [pc, #580]	@ (800eb7c <_dtoa_r+0x58c>)
 800e938:	b954      	cbnz	r4, 800e950 <_dtoa_r+0x360>
 800e93a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e942:	f7f1 fef3 	bl	800072c <__aeabi_ddiv>
 800e946:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e94a:	e028      	b.n	800e99e <_dtoa_r+0x3ae>
 800e94c:	2602      	movs	r6, #2
 800e94e:	e7f2      	b.n	800e936 <_dtoa_r+0x346>
 800e950:	07e1      	lsls	r1, r4, #31
 800e952:	d508      	bpl.n	800e966 <_dtoa_r+0x376>
 800e954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e95c:	f7f1 fdbc 	bl	80004d8 <__aeabi_dmul>
 800e960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e964:	3601      	adds	r6, #1
 800e966:	1064      	asrs	r4, r4, #1
 800e968:	3508      	adds	r5, #8
 800e96a:	e7e5      	b.n	800e938 <_dtoa_r+0x348>
 800e96c:	f000 80af 	beq.w	800eace <_dtoa_r+0x4de>
 800e970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e974:	427c      	negs	r4, r7
 800e976:	4b80      	ldr	r3, [pc, #512]	@ (800eb78 <_dtoa_r+0x588>)
 800e978:	f004 020f 	and.w	r2, r4, #15
 800e97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	f7f1 fda8 	bl	80004d8 <__aeabi_dmul>
 800e988:	2602      	movs	r6, #2
 800e98a:	2300      	movs	r3, #0
 800e98c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e990:	4d7a      	ldr	r5, [pc, #488]	@ (800eb7c <_dtoa_r+0x58c>)
 800e992:	1124      	asrs	r4, r4, #4
 800e994:	2c00      	cmp	r4, #0
 800e996:	f040 808f 	bne.w	800eab8 <_dtoa_r+0x4c8>
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1d3      	bne.n	800e946 <_dtoa_r+0x356>
 800e99e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 8094 	beq.w	800ead2 <_dtoa_r+0x4e2>
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4b73      	ldr	r3, [pc, #460]	@ (800eb80 <_dtoa_r+0x590>)
 800e9b2:	f7f2 f803 	bl	80009bc <__aeabi_dcmplt>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f000 808b 	beq.w	800ead2 <_dtoa_r+0x4e2>
 800e9bc:	9b08      	ldr	r3, [sp, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 8087 	beq.w	800ead2 <_dtoa_r+0x4e2>
 800e9c4:	f1bb 0f00 	cmp.w	fp, #0
 800e9c8:	dd34      	ble.n	800ea34 <_dtoa_r+0x444>
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	4b6c      	ldr	r3, [pc, #432]	@ (800eb84 <_dtoa_r+0x594>)
 800e9d2:	f7f1 fd81 	bl	80004d8 <__aeabi_dmul>
 800e9d6:	465c      	mov	r4, fp
 800e9d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9dc:	f107 38ff 	add.w	r8, r7, #4294967295
 800e9e0:	3601      	adds	r6, #1
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7f1 fd0e 	bl	8000404 <__aeabi_i2d>
 800e9e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9ec:	f7f1 fd74 	bl	80004d8 <__aeabi_dmul>
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4b65      	ldr	r3, [pc, #404]	@ (800eb88 <_dtoa_r+0x598>)
 800e9f4:	f7f1 fbba 	bl	800016c <__adddf3>
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e9fe:	2c00      	cmp	r4, #0
 800ea00:	d16a      	bne.n	800ead8 <_dtoa_r+0x4e8>
 800ea02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea06:	2200      	movs	r2, #0
 800ea08:	4b60      	ldr	r3, [pc, #384]	@ (800eb8c <_dtoa_r+0x59c>)
 800ea0a:	f7f1 fbad 	bl	8000168 <__aeabi_dsub>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea16:	462a      	mov	r2, r5
 800ea18:	4633      	mov	r3, r6
 800ea1a:	f7f1 ffed 	bl	80009f8 <__aeabi_dcmpgt>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f040 8298 	bne.w	800ef54 <_dtoa_r+0x964>
 800ea24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea28:	462a      	mov	r2, r5
 800ea2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ea2e:	f7f1 ffc5 	bl	80009bc <__aeabi_dcmplt>
 800ea32:	bb38      	cbnz	r0, 800ea84 <_dtoa_r+0x494>
 800ea34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ea38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ea3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f2c0 8157 	blt.w	800ecf2 <_dtoa_r+0x702>
 800ea44:	2f0e      	cmp	r7, #14
 800ea46:	f300 8154 	bgt.w	800ecf2 <_dtoa_r+0x702>
 800ea4a:	4b4b      	ldr	r3, [pc, #300]	@ (800eb78 <_dtoa_r+0x588>)
 800ea4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea50:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ea58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f280 80e5 	bge.w	800ec2a <_dtoa_r+0x63a>
 800ea60:	9b08      	ldr	r3, [sp, #32]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f300 80e1 	bgt.w	800ec2a <_dtoa_r+0x63a>
 800ea68:	d10c      	bne.n	800ea84 <_dtoa_r+0x494>
 800ea6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4b46      	ldr	r3, [pc, #280]	@ (800eb8c <_dtoa_r+0x59c>)
 800ea72:	f7f1 fd31 	bl	80004d8 <__aeabi_dmul>
 800ea76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea7a:	f7f1 ffb3 	bl	80009e4 <__aeabi_dcmpge>
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f000 8266 	beq.w	800ef50 <_dtoa_r+0x960>
 800ea84:	2400      	movs	r4, #0
 800ea86:	4625      	mov	r5, r4
 800ea88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea8a:	4656      	mov	r6, sl
 800ea8c:	ea6f 0803 	mvn.w	r8, r3
 800ea90:	2700      	movs	r7, #0
 800ea92:	4621      	mov	r1, r4
 800ea94:	4648      	mov	r0, r9
 800ea96:	f000 fcbd 	bl	800f414 <_Bfree>
 800ea9a:	2d00      	cmp	r5, #0
 800ea9c:	f000 80bd 	beq.w	800ec1a <_dtoa_r+0x62a>
 800eaa0:	b12f      	cbz	r7, 800eaae <_dtoa_r+0x4be>
 800eaa2:	42af      	cmp	r7, r5
 800eaa4:	d003      	beq.n	800eaae <_dtoa_r+0x4be>
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	4648      	mov	r0, r9
 800eaaa:	f000 fcb3 	bl	800f414 <_Bfree>
 800eaae:	4629      	mov	r1, r5
 800eab0:	4648      	mov	r0, r9
 800eab2:	f000 fcaf 	bl	800f414 <_Bfree>
 800eab6:	e0b0      	b.n	800ec1a <_dtoa_r+0x62a>
 800eab8:	07e2      	lsls	r2, r4, #31
 800eaba:	d505      	bpl.n	800eac8 <_dtoa_r+0x4d8>
 800eabc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eac0:	f7f1 fd0a 	bl	80004d8 <__aeabi_dmul>
 800eac4:	2301      	movs	r3, #1
 800eac6:	3601      	adds	r6, #1
 800eac8:	1064      	asrs	r4, r4, #1
 800eaca:	3508      	adds	r5, #8
 800eacc:	e762      	b.n	800e994 <_dtoa_r+0x3a4>
 800eace:	2602      	movs	r6, #2
 800ead0:	e765      	b.n	800e99e <_dtoa_r+0x3ae>
 800ead2:	46b8      	mov	r8, r7
 800ead4:	9c08      	ldr	r4, [sp, #32]
 800ead6:	e784      	b.n	800e9e2 <_dtoa_r+0x3f2>
 800ead8:	4b27      	ldr	r3, [pc, #156]	@ (800eb78 <_dtoa_r+0x588>)
 800eada:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eadc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eae0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eae4:	4454      	add	r4, sl
 800eae6:	2900      	cmp	r1, #0
 800eae8:	d054      	beq.n	800eb94 <_dtoa_r+0x5a4>
 800eaea:	2000      	movs	r0, #0
 800eaec:	4928      	ldr	r1, [pc, #160]	@ (800eb90 <_dtoa_r+0x5a0>)
 800eaee:	f7f1 fe1d 	bl	800072c <__aeabi_ddiv>
 800eaf2:	4633      	mov	r3, r6
 800eaf4:	462a      	mov	r2, r5
 800eaf6:	f7f1 fb37 	bl	8000168 <__aeabi_dsub>
 800eafa:	4656      	mov	r6, sl
 800eafc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb04:	f7f1 ff98 	bl	8000a38 <__aeabi_d2iz>
 800eb08:	4605      	mov	r5, r0
 800eb0a:	f7f1 fc7b 	bl	8000404 <__aeabi_i2d>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb16:	f7f1 fb27 	bl	8000168 <__aeabi_dsub>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	3530      	adds	r5, #48	@ 0x30
 800eb20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb28:	f806 5b01 	strb.w	r5, [r6], #1
 800eb2c:	f7f1 ff46 	bl	80009bc <__aeabi_dcmplt>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d172      	bne.n	800ec1a <_dtoa_r+0x62a>
 800eb34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb38:	2000      	movs	r0, #0
 800eb3a:	4911      	ldr	r1, [pc, #68]	@ (800eb80 <_dtoa_r+0x590>)
 800eb3c:	f7f1 fb14 	bl	8000168 <__aeabi_dsub>
 800eb40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb44:	f7f1 ff3a 	bl	80009bc <__aeabi_dcmplt>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f040 80b4 	bne.w	800ecb6 <_dtoa_r+0x6c6>
 800eb4e:	42a6      	cmp	r6, r4
 800eb50:	f43f af70 	beq.w	800ea34 <_dtoa_r+0x444>
 800eb54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb84 <_dtoa_r+0x594>)
 800eb5c:	f7f1 fcbc 	bl	80004d8 <__aeabi_dmul>
 800eb60:	2200      	movs	r2, #0
 800eb62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb6a:	4b06      	ldr	r3, [pc, #24]	@ (800eb84 <_dtoa_r+0x594>)
 800eb6c:	f7f1 fcb4 	bl	80004d8 <__aeabi_dmul>
 800eb70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb74:	e7c4      	b.n	800eb00 <_dtoa_r+0x510>
 800eb76:	bf00      	nop
 800eb78:	08012cc8 	.word	0x08012cc8
 800eb7c:	08012ca0 	.word	0x08012ca0
 800eb80:	3ff00000 	.word	0x3ff00000
 800eb84:	40240000 	.word	0x40240000
 800eb88:	401c0000 	.word	0x401c0000
 800eb8c:	40140000 	.word	0x40140000
 800eb90:	3fe00000 	.word	0x3fe00000
 800eb94:	4631      	mov	r1, r6
 800eb96:	4628      	mov	r0, r5
 800eb98:	f7f1 fc9e 	bl	80004d8 <__aeabi_dmul>
 800eb9c:	4656      	mov	r6, sl
 800eb9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eba2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eba8:	f7f1 ff46 	bl	8000a38 <__aeabi_d2iz>
 800ebac:	4605      	mov	r5, r0
 800ebae:	f7f1 fc29 	bl	8000404 <__aeabi_i2d>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebba:	f7f1 fad5 	bl	8000168 <__aeabi_dsub>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	3530      	adds	r5, #48	@ 0x30
 800ebc4:	f806 5b01 	strb.w	r5, [r6], #1
 800ebc8:	42a6      	cmp	r6, r4
 800ebca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebce:	f04f 0200 	mov.w	r2, #0
 800ebd2:	d124      	bne.n	800ec1e <_dtoa_r+0x62e>
 800ebd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ebd8:	4bae      	ldr	r3, [pc, #696]	@ (800ee94 <_dtoa_r+0x8a4>)
 800ebda:	f7f1 fac7 	bl	800016c <__adddf3>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebe6:	f7f1 ff07 	bl	80009f8 <__aeabi_dcmpgt>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d163      	bne.n	800ecb6 <_dtoa_r+0x6c6>
 800ebee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	49a7      	ldr	r1, [pc, #668]	@ (800ee94 <_dtoa_r+0x8a4>)
 800ebf6:	f7f1 fab7 	bl	8000168 <__aeabi_dsub>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec02:	f7f1 fedb 	bl	80009bc <__aeabi_dcmplt>
 800ec06:	2800      	cmp	r0, #0
 800ec08:	f43f af14 	beq.w	800ea34 <_dtoa_r+0x444>
 800ec0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ec0e:	1e73      	subs	r3, r6, #1
 800ec10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec16:	2b30      	cmp	r3, #48	@ 0x30
 800ec18:	d0f8      	beq.n	800ec0c <_dtoa_r+0x61c>
 800ec1a:	4647      	mov	r7, r8
 800ec1c:	e03b      	b.n	800ec96 <_dtoa_r+0x6a6>
 800ec1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ee98 <_dtoa_r+0x8a8>)
 800ec20:	f7f1 fc5a 	bl	80004d8 <__aeabi_dmul>
 800ec24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec28:	e7bc      	b.n	800eba4 <_dtoa_r+0x5b4>
 800ec2a:	4656      	mov	r6, sl
 800ec2c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ec30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec34:	4620      	mov	r0, r4
 800ec36:	4629      	mov	r1, r5
 800ec38:	f7f1 fd78 	bl	800072c <__aeabi_ddiv>
 800ec3c:	f7f1 fefc 	bl	8000a38 <__aeabi_d2iz>
 800ec40:	4680      	mov	r8, r0
 800ec42:	f7f1 fbdf 	bl	8000404 <__aeabi_i2d>
 800ec46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec4a:	f7f1 fc45 	bl	80004d8 <__aeabi_dmul>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4620      	mov	r0, r4
 800ec54:	4629      	mov	r1, r5
 800ec56:	f7f1 fa87 	bl	8000168 <__aeabi_dsub>
 800ec5a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ec5e:	9d08      	ldr	r5, [sp, #32]
 800ec60:	f806 4b01 	strb.w	r4, [r6], #1
 800ec64:	eba6 040a 	sub.w	r4, r6, sl
 800ec68:	42a5      	cmp	r5, r4
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	d133      	bne.n	800ecd8 <_dtoa_r+0x6e8>
 800ec70:	f7f1 fa7c 	bl	800016c <__adddf3>
 800ec74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec78:	4604      	mov	r4, r0
 800ec7a:	460d      	mov	r5, r1
 800ec7c:	f7f1 febc 	bl	80009f8 <__aeabi_dcmpgt>
 800ec80:	b9c0      	cbnz	r0, 800ecb4 <_dtoa_r+0x6c4>
 800ec82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 800ec8e:	b110      	cbz	r0, 800ec96 <_dtoa_r+0x6a6>
 800ec90:	f018 0f01 	tst.w	r8, #1
 800ec94:	d10e      	bne.n	800ecb4 <_dtoa_r+0x6c4>
 800ec96:	4648      	mov	r0, r9
 800ec98:	9903      	ldr	r1, [sp, #12]
 800ec9a:	f000 fbbb 	bl	800f414 <_Bfree>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	7033      	strb	r3, [r6, #0]
 800eca2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eca4:	3701      	adds	r7, #1
 800eca6:	601f      	str	r7, [r3, #0]
 800eca8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f000 824b 	beq.w	800f146 <_dtoa_r+0xb56>
 800ecb0:	601e      	str	r6, [r3, #0]
 800ecb2:	e248      	b.n	800f146 <_dtoa_r+0xb56>
 800ecb4:	46b8      	mov	r8, r7
 800ecb6:	4633      	mov	r3, r6
 800ecb8:	461e      	mov	r6, r3
 800ecba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecbe:	2a39      	cmp	r2, #57	@ 0x39
 800ecc0:	d106      	bne.n	800ecd0 <_dtoa_r+0x6e0>
 800ecc2:	459a      	cmp	sl, r3
 800ecc4:	d1f8      	bne.n	800ecb8 <_dtoa_r+0x6c8>
 800ecc6:	2230      	movs	r2, #48	@ 0x30
 800ecc8:	f108 0801 	add.w	r8, r8, #1
 800eccc:	f88a 2000 	strb.w	r2, [sl]
 800ecd0:	781a      	ldrb	r2, [r3, #0]
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	701a      	strb	r2, [r3, #0]
 800ecd6:	e7a0      	b.n	800ec1a <_dtoa_r+0x62a>
 800ecd8:	2200      	movs	r2, #0
 800ecda:	4b6f      	ldr	r3, [pc, #444]	@ (800ee98 <_dtoa_r+0x8a8>)
 800ecdc:	f7f1 fbfc 	bl	80004d8 <__aeabi_dmul>
 800ece0:	2200      	movs	r2, #0
 800ece2:	2300      	movs	r3, #0
 800ece4:	4604      	mov	r4, r0
 800ece6:	460d      	mov	r5, r1
 800ece8:	f7f1 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d09f      	beq.n	800ec30 <_dtoa_r+0x640>
 800ecf0:	e7d1      	b.n	800ec96 <_dtoa_r+0x6a6>
 800ecf2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	f000 80ea 	beq.w	800eece <_dtoa_r+0x8de>
 800ecfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ecfc:	2a01      	cmp	r2, #1
 800ecfe:	f300 80cd 	bgt.w	800ee9c <_dtoa_r+0x8ac>
 800ed02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ed04:	2a00      	cmp	r2, #0
 800ed06:	f000 80c1 	beq.w	800ee8c <_dtoa_r+0x89c>
 800ed0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ed0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed10:	9e04      	ldr	r6, [sp, #16]
 800ed12:	9a04      	ldr	r2, [sp, #16]
 800ed14:	2101      	movs	r1, #1
 800ed16:	441a      	add	r2, r3
 800ed18:	9204      	str	r2, [sp, #16]
 800ed1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	441a      	add	r2, r3
 800ed20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed22:	f000 fc75 	bl	800f610 <__i2b>
 800ed26:	4605      	mov	r5, r0
 800ed28:	b166      	cbz	r6, 800ed44 <_dtoa_r+0x754>
 800ed2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	dd09      	ble.n	800ed44 <_dtoa_r+0x754>
 800ed30:	42b3      	cmp	r3, r6
 800ed32:	bfa8      	it	ge
 800ed34:	4633      	movge	r3, r6
 800ed36:	9a04      	ldr	r2, [sp, #16]
 800ed38:	1af6      	subs	r6, r6, r3
 800ed3a:	1ad2      	subs	r2, r2, r3
 800ed3c:	9204      	str	r2, [sp, #16]
 800ed3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed46:	b30b      	cbz	r3, 800ed8c <_dtoa_r+0x79c>
 800ed48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 80c6 	beq.w	800eedc <_dtoa_r+0x8ec>
 800ed50:	2c00      	cmp	r4, #0
 800ed52:	f000 80c0 	beq.w	800eed6 <_dtoa_r+0x8e6>
 800ed56:	4629      	mov	r1, r5
 800ed58:	4622      	mov	r2, r4
 800ed5a:	4648      	mov	r0, r9
 800ed5c:	f000 fd10 	bl	800f780 <__pow5mult>
 800ed60:	9a03      	ldr	r2, [sp, #12]
 800ed62:	4601      	mov	r1, r0
 800ed64:	4605      	mov	r5, r0
 800ed66:	4648      	mov	r0, r9
 800ed68:	f000 fc68 	bl	800f63c <__multiply>
 800ed6c:	9903      	ldr	r1, [sp, #12]
 800ed6e:	4680      	mov	r8, r0
 800ed70:	4648      	mov	r0, r9
 800ed72:	f000 fb4f 	bl	800f414 <_Bfree>
 800ed76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed78:	1b1b      	subs	r3, r3, r4
 800ed7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed7c:	f000 80b1 	beq.w	800eee2 <_dtoa_r+0x8f2>
 800ed80:	4641      	mov	r1, r8
 800ed82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed84:	4648      	mov	r0, r9
 800ed86:	f000 fcfb 	bl	800f780 <__pow5mult>
 800ed8a:	9003      	str	r0, [sp, #12]
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	4648      	mov	r0, r9
 800ed90:	f000 fc3e 	bl	800f610 <__i2b>
 800ed94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed96:	4604      	mov	r4, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 81d8 	beq.w	800f14e <_dtoa_r+0xb5e>
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4601      	mov	r1, r0
 800eda2:	4648      	mov	r0, r9
 800eda4:	f000 fcec 	bl	800f780 <__pow5mult>
 800eda8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800edaa:	4604      	mov	r4, r0
 800edac:	2b01      	cmp	r3, #1
 800edae:	f300 809f 	bgt.w	800eef0 <_dtoa_r+0x900>
 800edb2:	9b06      	ldr	r3, [sp, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f040 8097 	bne.w	800eee8 <_dtoa_r+0x8f8>
 800edba:	9b07      	ldr	r3, [sp, #28]
 800edbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f040 8093 	bne.w	800eeec <_dtoa_r+0x8fc>
 800edc6:	9b07      	ldr	r3, [sp, #28]
 800edc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edcc:	0d1b      	lsrs	r3, r3, #20
 800edce:	051b      	lsls	r3, r3, #20
 800edd0:	b133      	cbz	r3, 800ede0 <_dtoa_r+0x7f0>
 800edd2:	9b04      	ldr	r3, [sp, #16]
 800edd4:	3301      	adds	r3, #1
 800edd6:	9304      	str	r3, [sp, #16]
 800edd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edda:	3301      	adds	r3, #1
 800eddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800edde:	2301      	movs	r3, #1
 800ede0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ede2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f000 81b8 	beq.w	800f15a <_dtoa_r+0xb6a>
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edf0:	6918      	ldr	r0, [r3, #16]
 800edf2:	f000 fbc1 	bl	800f578 <__hi0bits>
 800edf6:	f1c0 0020 	rsb	r0, r0, #32
 800edfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfc:	4418      	add	r0, r3
 800edfe:	f010 001f 	ands.w	r0, r0, #31
 800ee02:	f000 8082 	beq.w	800ef0a <_dtoa_r+0x91a>
 800ee06:	f1c0 0320 	rsb	r3, r0, #32
 800ee0a:	2b04      	cmp	r3, #4
 800ee0c:	dd73      	ble.n	800eef6 <_dtoa_r+0x906>
 800ee0e:	9b04      	ldr	r3, [sp, #16]
 800ee10:	f1c0 001c 	rsb	r0, r0, #28
 800ee14:	4403      	add	r3, r0
 800ee16:	9304      	str	r3, [sp, #16]
 800ee18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee1a:	4406      	add	r6, r0
 800ee1c:	4403      	add	r3, r0
 800ee1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee20:	9b04      	ldr	r3, [sp, #16]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	dd05      	ble.n	800ee32 <_dtoa_r+0x842>
 800ee26:	461a      	mov	r2, r3
 800ee28:	4648      	mov	r0, r9
 800ee2a:	9903      	ldr	r1, [sp, #12]
 800ee2c:	f000 fd02 	bl	800f834 <__lshift>
 800ee30:	9003      	str	r0, [sp, #12]
 800ee32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	dd05      	ble.n	800ee44 <_dtoa_r+0x854>
 800ee38:	4621      	mov	r1, r4
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	4648      	mov	r0, r9
 800ee3e:	f000 fcf9 	bl	800f834 <__lshift>
 800ee42:	4604      	mov	r4, r0
 800ee44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d061      	beq.n	800ef0e <_dtoa_r+0x91e>
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	9803      	ldr	r0, [sp, #12]
 800ee4e:	f000 fd5d 	bl	800f90c <__mcmp>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	da5b      	bge.n	800ef0e <_dtoa_r+0x91e>
 800ee56:	2300      	movs	r3, #0
 800ee58:	220a      	movs	r2, #10
 800ee5a:	4648      	mov	r0, r9
 800ee5c:	9903      	ldr	r1, [sp, #12]
 800ee5e:	f000 fafb 	bl	800f458 <__multadd>
 800ee62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee64:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee68:	9003      	str	r0, [sp, #12]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f000 8177 	beq.w	800f15e <_dtoa_r+0xb6e>
 800ee70:	4629      	mov	r1, r5
 800ee72:	2300      	movs	r3, #0
 800ee74:	220a      	movs	r2, #10
 800ee76:	4648      	mov	r0, r9
 800ee78:	f000 faee 	bl	800f458 <__multadd>
 800ee7c:	f1bb 0f00 	cmp.w	fp, #0
 800ee80:	4605      	mov	r5, r0
 800ee82:	dc6f      	bgt.n	800ef64 <_dtoa_r+0x974>
 800ee84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ee86:	2b02      	cmp	r3, #2
 800ee88:	dc49      	bgt.n	800ef1e <_dtoa_r+0x92e>
 800ee8a:	e06b      	b.n	800ef64 <_dtoa_r+0x974>
 800ee8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee92:	e73c      	b.n	800ed0e <_dtoa_r+0x71e>
 800ee94:	3fe00000 	.word	0x3fe00000
 800ee98:	40240000 	.word	0x40240000
 800ee9c:	9b08      	ldr	r3, [sp, #32]
 800ee9e:	1e5c      	subs	r4, r3, #1
 800eea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	db09      	blt.n	800eeba <_dtoa_r+0x8ca>
 800eea6:	1b1c      	subs	r4, r3, r4
 800eea8:	9b08      	ldr	r3, [sp, #32]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f6bf af30 	bge.w	800ed10 <_dtoa_r+0x720>
 800eeb0:	9b04      	ldr	r3, [sp, #16]
 800eeb2:	9a08      	ldr	r2, [sp, #32]
 800eeb4:	1a9e      	subs	r6, r3, r2
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	e72b      	b.n	800ed12 <_dtoa_r+0x722>
 800eeba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eebe:	1ae3      	subs	r3, r4, r3
 800eec0:	441a      	add	r2, r3
 800eec2:	940a      	str	r4, [sp, #40]	@ 0x28
 800eec4:	9e04      	ldr	r6, [sp, #16]
 800eec6:	2400      	movs	r4, #0
 800eec8:	9b08      	ldr	r3, [sp, #32]
 800eeca:	920e      	str	r2, [sp, #56]	@ 0x38
 800eecc:	e721      	b.n	800ed12 <_dtoa_r+0x722>
 800eece:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eed0:	9e04      	ldr	r6, [sp, #16]
 800eed2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eed4:	e728      	b.n	800ed28 <_dtoa_r+0x738>
 800eed6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eeda:	e751      	b.n	800ed80 <_dtoa_r+0x790>
 800eedc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eede:	9903      	ldr	r1, [sp, #12]
 800eee0:	e750      	b.n	800ed84 <_dtoa_r+0x794>
 800eee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eee6:	e751      	b.n	800ed8c <_dtoa_r+0x79c>
 800eee8:	2300      	movs	r3, #0
 800eeea:	e779      	b.n	800ede0 <_dtoa_r+0x7f0>
 800eeec:	9b06      	ldr	r3, [sp, #24]
 800eeee:	e777      	b.n	800ede0 <_dtoa_r+0x7f0>
 800eef0:	2300      	movs	r3, #0
 800eef2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eef4:	e779      	b.n	800edea <_dtoa_r+0x7fa>
 800eef6:	d093      	beq.n	800ee20 <_dtoa_r+0x830>
 800eef8:	9a04      	ldr	r2, [sp, #16]
 800eefa:	331c      	adds	r3, #28
 800eefc:	441a      	add	r2, r3
 800eefe:	9204      	str	r2, [sp, #16]
 800ef00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef02:	441e      	add	r6, r3
 800ef04:	441a      	add	r2, r3
 800ef06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef08:	e78a      	b.n	800ee20 <_dtoa_r+0x830>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	e7f4      	b.n	800eef8 <_dtoa_r+0x908>
 800ef0e:	9b08      	ldr	r3, [sp, #32]
 800ef10:	46b8      	mov	r8, r7
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	dc20      	bgt.n	800ef58 <_dtoa_r+0x968>
 800ef16:	469b      	mov	fp, r3
 800ef18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	dd1e      	ble.n	800ef5c <_dtoa_r+0x96c>
 800ef1e:	f1bb 0f00 	cmp.w	fp, #0
 800ef22:	f47f adb1 	bne.w	800ea88 <_dtoa_r+0x498>
 800ef26:	4621      	mov	r1, r4
 800ef28:	465b      	mov	r3, fp
 800ef2a:	2205      	movs	r2, #5
 800ef2c:	4648      	mov	r0, r9
 800ef2e:	f000 fa93 	bl	800f458 <__multadd>
 800ef32:	4601      	mov	r1, r0
 800ef34:	4604      	mov	r4, r0
 800ef36:	9803      	ldr	r0, [sp, #12]
 800ef38:	f000 fce8 	bl	800f90c <__mcmp>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f77f ada3 	ble.w	800ea88 <_dtoa_r+0x498>
 800ef42:	4656      	mov	r6, sl
 800ef44:	2331      	movs	r3, #49	@ 0x31
 800ef46:	f108 0801 	add.w	r8, r8, #1
 800ef4a:	f806 3b01 	strb.w	r3, [r6], #1
 800ef4e:	e59f      	b.n	800ea90 <_dtoa_r+0x4a0>
 800ef50:	46b8      	mov	r8, r7
 800ef52:	9c08      	ldr	r4, [sp, #32]
 800ef54:	4625      	mov	r5, r4
 800ef56:	e7f4      	b.n	800ef42 <_dtoa_r+0x952>
 800ef58:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ef5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	f000 8101 	beq.w	800f166 <_dtoa_r+0xb76>
 800ef64:	2e00      	cmp	r6, #0
 800ef66:	dd05      	ble.n	800ef74 <_dtoa_r+0x984>
 800ef68:	4629      	mov	r1, r5
 800ef6a:	4632      	mov	r2, r6
 800ef6c:	4648      	mov	r0, r9
 800ef6e:	f000 fc61 	bl	800f834 <__lshift>
 800ef72:	4605      	mov	r5, r0
 800ef74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d05c      	beq.n	800f034 <_dtoa_r+0xa44>
 800ef7a:	4648      	mov	r0, r9
 800ef7c:	6869      	ldr	r1, [r5, #4]
 800ef7e:	f000 fa09 	bl	800f394 <_Balloc>
 800ef82:	4606      	mov	r6, r0
 800ef84:	b928      	cbnz	r0, 800ef92 <_dtoa_r+0x9a2>
 800ef86:	4602      	mov	r2, r0
 800ef88:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef8c:	4b80      	ldr	r3, [pc, #512]	@ (800f190 <_dtoa_r+0xba0>)
 800ef8e:	f7ff bb43 	b.w	800e618 <_dtoa_r+0x28>
 800ef92:	692a      	ldr	r2, [r5, #16]
 800ef94:	f105 010c 	add.w	r1, r5, #12
 800ef98:	3202      	adds	r2, #2
 800ef9a:	0092      	lsls	r2, r2, #2
 800ef9c:	300c      	adds	r0, #12
 800ef9e:	f002 facb 	bl	8011538 <memcpy>
 800efa2:	2201      	movs	r2, #1
 800efa4:	4631      	mov	r1, r6
 800efa6:	4648      	mov	r0, r9
 800efa8:	f000 fc44 	bl	800f834 <__lshift>
 800efac:	462f      	mov	r7, r5
 800efae:	4605      	mov	r5, r0
 800efb0:	f10a 0301 	add.w	r3, sl, #1
 800efb4:	9304      	str	r3, [sp, #16]
 800efb6:	eb0a 030b 	add.w	r3, sl, fp
 800efba:	930a      	str	r3, [sp, #40]	@ 0x28
 800efbc:	9b06      	ldr	r3, [sp, #24]
 800efbe:	f003 0301 	and.w	r3, r3, #1
 800efc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800efc4:	9b04      	ldr	r3, [sp, #16]
 800efc6:	4621      	mov	r1, r4
 800efc8:	9803      	ldr	r0, [sp, #12]
 800efca:	f103 3bff 	add.w	fp, r3, #4294967295
 800efce:	f7ff fa87 	bl	800e4e0 <quorem>
 800efd2:	4603      	mov	r3, r0
 800efd4:	4639      	mov	r1, r7
 800efd6:	3330      	adds	r3, #48	@ 0x30
 800efd8:	9006      	str	r0, [sp, #24]
 800efda:	9803      	ldr	r0, [sp, #12]
 800efdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efde:	f000 fc95 	bl	800f90c <__mcmp>
 800efe2:	462a      	mov	r2, r5
 800efe4:	9008      	str	r0, [sp, #32]
 800efe6:	4621      	mov	r1, r4
 800efe8:	4648      	mov	r0, r9
 800efea:	f000 fcab 	bl	800f944 <__mdiff>
 800efee:	68c2      	ldr	r2, [r0, #12]
 800eff0:	4606      	mov	r6, r0
 800eff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eff4:	bb02      	cbnz	r2, 800f038 <_dtoa_r+0xa48>
 800eff6:	4601      	mov	r1, r0
 800eff8:	9803      	ldr	r0, [sp, #12]
 800effa:	f000 fc87 	bl	800f90c <__mcmp>
 800effe:	4602      	mov	r2, r0
 800f000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f002:	4631      	mov	r1, r6
 800f004:	4648      	mov	r0, r9
 800f006:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800f00a:	f000 fa03 	bl	800f414 <_Bfree>
 800f00e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f010:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f012:	9e04      	ldr	r6, [sp, #16]
 800f014:	ea42 0103 	orr.w	r1, r2, r3
 800f018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f01a:	4319      	orrs	r1, r3
 800f01c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f01e:	d10d      	bne.n	800f03c <_dtoa_r+0xa4c>
 800f020:	2b39      	cmp	r3, #57	@ 0x39
 800f022:	d027      	beq.n	800f074 <_dtoa_r+0xa84>
 800f024:	9a08      	ldr	r2, [sp, #32]
 800f026:	2a00      	cmp	r2, #0
 800f028:	dd01      	ble.n	800f02e <_dtoa_r+0xa3e>
 800f02a:	9b06      	ldr	r3, [sp, #24]
 800f02c:	3331      	adds	r3, #49	@ 0x31
 800f02e:	f88b 3000 	strb.w	r3, [fp]
 800f032:	e52e      	b.n	800ea92 <_dtoa_r+0x4a2>
 800f034:	4628      	mov	r0, r5
 800f036:	e7b9      	b.n	800efac <_dtoa_r+0x9bc>
 800f038:	2201      	movs	r2, #1
 800f03a:	e7e2      	b.n	800f002 <_dtoa_r+0xa12>
 800f03c:	9908      	ldr	r1, [sp, #32]
 800f03e:	2900      	cmp	r1, #0
 800f040:	db04      	blt.n	800f04c <_dtoa_r+0xa5c>
 800f042:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800f044:	4301      	orrs	r1, r0
 800f046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f048:	4301      	orrs	r1, r0
 800f04a:	d120      	bne.n	800f08e <_dtoa_r+0xa9e>
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	ddee      	ble.n	800f02e <_dtoa_r+0xa3e>
 800f050:	2201      	movs	r2, #1
 800f052:	9903      	ldr	r1, [sp, #12]
 800f054:	4648      	mov	r0, r9
 800f056:	9304      	str	r3, [sp, #16]
 800f058:	f000 fbec 	bl	800f834 <__lshift>
 800f05c:	4621      	mov	r1, r4
 800f05e:	9003      	str	r0, [sp, #12]
 800f060:	f000 fc54 	bl	800f90c <__mcmp>
 800f064:	2800      	cmp	r0, #0
 800f066:	9b04      	ldr	r3, [sp, #16]
 800f068:	dc02      	bgt.n	800f070 <_dtoa_r+0xa80>
 800f06a:	d1e0      	bne.n	800f02e <_dtoa_r+0xa3e>
 800f06c:	07da      	lsls	r2, r3, #31
 800f06e:	d5de      	bpl.n	800f02e <_dtoa_r+0xa3e>
 800f070:	2b39      	cmp	r3, #57	@ 0x39
 800f072:	d1da      	bne.n	800f02a <_dtoa_r+0xa3a>
 800f074:	2339      	movs	r3, #57	@ 0x39
 800f076:	f88b 3000 	strb.w	r3, [fp]
 800f07a:	4633      	mov	r3, r6
 800f07c:	461e      	mov	r6, r3
 800f07e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f082:	3b01      	subs	r3, #1
 800f084:	2a39      	cmp	r2, #57	@ 0x39
 800f086:	d04e      	beq.n	800f126 <_dtoa_r+0xb36>
 800f088:	3201      	adds	r2, #1
 800f08a:	701a      	strb	r2, [r3, #0]
 800f08c:	e501      	b.n	800ea92 <_dtoa_r+0x4a2>
 800f08e:	2a00      	cmp	r2, #0
 800f090:	dd03      	ble.n	800f09a <_dtoa_r+0xaaa>
 800f092:	2b39      	cmp	r3, #57	@ 0x39
 800f094:	d0ee      	beq.n	800f074 <_dtoa_r+0xa84>
 800f096:	3301      	adds	r3, #1
 800f098:	e7c9      	b.n	800f02e <_dtoa_r+0xa3e>
 800f09a:	9a04      	ldr	r2, [sp, #16]
 800f09c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f09e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f0a2:	428a      	cmp	r2, r1
 800f0a4:	d028      	beq.n	800f0f8 <_dtoa_r+0xb08>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	220a      	movs	r2, #10
 800f0aa:	9903      	ldr	r1, [sp, #12]
 800f0ac:	4648      	mov	r0, r9
 800f0ae:	f000 f9d3 	bl	800f458 <__multadd>
 800f0b2:	42af      	cmp	r7, r5
 800f0b4:	9003      	str	r0, [sp, #12]
 800f0b6:	f04f 0300 	mov.w	r3, #0
 800f0ba:	f04f 020a 	mov.w	r2, #10
 800f0be:	4639      	mov	r1, r7
 800f0c0:	4648      	mov	r0, r9
 800f0c2:	d107      	bne.n	800f0d4 <_dtoa_r+0xae4>
 800f0c4:	f000 f9c8 	bl	800f458 <__multadd>
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	9b04      	ldr	r3, [sp, #16]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	9304      	str	r3, [sp, #16]
 800f0d2:	e777      	b.n	800efc4 <_dtoa_r+0x9d4>
 800f0d4:	f000 f9c0 	bl	800f458 <__multadd>
 800f0d8:	4629      	mov	r1, r5
 800f0da:	4607      	mov	r7, r0
 800f0dc:	2300      	movs	r3, #0
 800f0de:	220a      	movs	r2, #10
 800f0e0:	4648      	mov	r0, r9
 800f0e2:	f000 f9b9 	bl	800f458 <__multadd>
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	e7f0      	b.n	800f0cc <_dtoa_r+0xadc>
 800f0ea:	f1bb 0f00 	cmp.w	fp, #0
 800f0ee:	bfcc      	ite	gt
 800f0f0:	465e      	movgt	r6, fp
 800f0f2:	2601      	movle	r6, #1
 800f0f4:	2700      	movs	r7, #0
 800f0f6:	4456      	add	r6, sl
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	9903      	ldr	r1, [sp, #12]
 800f0fc:	4648      	mov	r0, r9
 800f0fe:	9304      	str	r3, [sp, #16]
 800f100:	f000 fb98 	bl	800f834 <__lshift>
 800f104:	4621      	mov	r1, r4
 800f106:	9003      	str	r0, [sp, #12]
 800f108:	f000 fc00 	bl	800f90c <__mcmp>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	dcb4      	bgt.n	800f07a <_dtoa_r+0xa8a>
 800f110:	d102      	bne.n	800f118 <_dtoa_r+0xb28>
 800f112:	9b04      	ldr	r3, [sp, #16]
 800f114:	07db      	lsls	r3, r3, #31
 800f116:	d4b0      	bmi.n	800f07a <_dtoa_r+0xa8a>
 800f118:	4633      	mov	r3, r6
 800f11a:	461e      	mov	r6, r3
 800f11c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f120:	2a30      	cmp	r2, #48	@ 0x30
 800f122:	d0fa      	beq.n	800f11a <_dtoa_r+0xb2a>
 800f124:	e4b5      	b.n	800ea92 <_dtoa_r+0x4a2>
 800f126:	459a      	cmp	sl, r3
 800f128:	d1a8      	bne.n	800f07c <_dtoa_r+0xa8c>
 800f12a:	2331      	movs	r3, #49	@ 0x31
 800f12c:	f108 0801 	add.w	r8, r8, #1
 800f130:	f88a 3000 	strb.w	r3, [sl]
 800f134:	e4ad      	b.n	800ea92 <_dtoa_r+0x4a2>
 800f136:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f138:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f194 <_dtoa_r+0xba4>
 800f13c:	b11b      	cbz	r3, 800f146 <_dtoa_r+0xb56>
 800f13e:	f10a 0308 	add.w	r3, sl, #8
 800f142:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	4650      	mov	r0, sl
 800f148:	b017      	add	sp, #92	@ 0x5c
 800f14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f14e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f150:	2b01      	cmp	r3, #1
 800f152:	f77f ae2e 	ble.w	800edb2 <_dtoa_r+0x7c2>
 800f156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f158:	930a      	str	r3, [sp, #40]	@ 0x28
 800f15a:	2001      	movs	r0, #1
 800f15c:	e64d      	b.n	800edfa <_dtoa_r+0x80a>
 800f15e:	f1bb 0f00 	cmp.w	fp, #0
 800f162:	f77f aed9 	ble.w	800ef18 <_dtoa_r+0x928>
 800f166:	4656      	mov	r6, sl
 800f168:	4621      	mov	r1, r4
 800f16a:	9803      	ldr	r0, [sp, #12]
 800f16c:	f7ff f9b8 	bl	800e4e0 <quorem>
 800f170:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f174:	f806 3b01 	strb.w	r3, [r6], #1
 800f178:	eba6 020a 	sub.w	r2, r6, sl
 800f17c:	4593      	cmp	fp, r2
 800f17e:	ddb4      	ble.n	800f0ea <_dtoa_r+0xafa>
 800f180:	2300      	movs	r3, #0
 800f182:	220a      	movs	r2, #10
 800f184:	4648      	mov	r0, r9
 800f186:	9903      	ldr	r1, [sp, #12]
 800f188:	f000 f966 	bl	800f458 <__multadd>
 800f18c:	9003      	str	r0, [sp, #12]
 800f18e:	e7eb      	b.n	800f168 <_dtoa_r+0xb78>
 800f190:	08012b51 	.word	0x08012b51
 800f194:	08012ad5 	.word	0x08012ad5

0800f198 <_free_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4605      	mov	r5, r0
 800f19c:	2900      	cmp	r1, #0
 800f19e:	d040      	beq.n	800f222 <_free_r+0x8a>
 800f1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a4:	1f0c      	subs	r4, r1, #4
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bfb8      	it	lt
 800f1aa:	18e4      	addlt	r4, r4, r3
 800f1ac:	f000 f8e6 	bl	800f37c <__malloc_lock>
 800f1b0:	4a1c      	ldr	r2, [pc, #112]	@ (800f224 <_free_r+0x8c>)
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	b933      	cbnz	r3, 800f1c4 <_free_r+0x2c>
 800f1b6:	6063      	str	r3, [r4, #4]
 800f1b8:	6014      	str	r4, [r2, #0]
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1c0:	f000 b8e2 	b.w	800f388 <__malloc_unlock>
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	d908      	bls.n	800f1da <_free_r+0x42>
 800f1c8:	6820      	ldr	r0, [r4, #0]
 800f1ca:	1821      	adds	r1, r4, r0
 800f1cc:	428b      	cmp	r3, r1
 800f1ce:	bf01      	itttt	eq
 800f1d0:	6819      	ldreq	r1, [r3, #0]
 800f1d2:	685b      	ldreq	r3, [r3, #4]
 800f1d4:	1809      	addeq	r1, r1, r0
 800f1d6:	6021      	streq	r1, [r4, #0]
 800f1d8:	e7ed      	b.n	800f1b6 <_free_r+0x1e>
 800f1da:	461a      	mov	r2, r3
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	b10b      	cbz	r3, 800f1e4 <_free_r+0x4c>
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	d9fa      	bls.n	800f1da <_free_r+0x42>
 800f1e4:	6811      	ldr	r1, [r2, #0]
 800f1e6:	1850      	adds	r0, r2, r1
 800f1e8:	42a0      	cmp	r0, r4
 800f1ea:	d10b      	bne.n	800f204 <_free_r+0x6c>
 800f1ec:	6820      	ldr	r0, [r4, #0]
 800f1ee:	4401      	add	r1, r0
 800f1f0:	1850      	adds	r0, r2, r1
 800f1f2:	4283      	cmp	r3, r0
 800f1f4:	6011      	str	r1, [r2, #0]
 800f1f6:	d1e0      	bne.n	800f1ba <_free_r+0x22>
 800f1f8:	6818      	ldr	r0, [r3, #0]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	4408      	add	r0, r1
 800f1fe:	6010      	str	r0, [r2, #0]
 800f200:	6053      	str	r3, [r2, #4]
 800f202:	e7da      	b.n	800f1ba <_free_r+0x22>
 800f204:	d902      	bls.n	800f20c <_free_r+0x74>
 800f206:	230c      	movs	r3, #12
 800f208:	602b      	str	r3, [r5, #0]
 800f20a:	e7d6      	b.n	800f1ba <_free_r+0x22>
 800f20c:	6820      	ldr	r0, [r4, #0]
 800f20e:	1821      	adds	r1, r4, r0
 800f210:	428b      	cmp	r3, r1
 800f212:	bf01      	itttt	eq
 800f214:	6819      	ldreq	r1, [r3, #0]
 800f216:	685b      	ldreq	r3, [r3, #4]
 800f218:	1809      	addeq	r1, r1, r0
 800f21a:	6021      	streq	r1, [r4, #0]
 800f21c:	6063      	str	r3, [r4, #4]
 800f21e:	6054      	str	r4, [r2, #4]
 800f220:	e7cb      	b.n	800f1ba <_free_r+0x22>
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	20001ab4 	.word	0x20001ab4

0800f228 <malloc>:
 800f228:	4b02      	ldr	r3, [pc, #8]	@ (800f234 <malloc+0xc>)
 800f22a:	4601      	mov	r1, r0
 800f22c:	6818      	ldr	r0, [r3, #0]
 800f22e:	f000 b825 	b.w	800f27c <_malloc_r>
 800f232:	bf00      	nop
 800f234:	200001a0 	.word	0x200001a0

0800f238 <sbrk_aligned>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	4e0f      	ldr	r6, [pc, #60]	@ (800f278 <sbrk_aligned+0x40>)
 800f23c:	460c      	mov	r4, r1
 800f23e:	6831      	ldr	r1, [r6, #0]
 800f240:	4605      	mov	r5, r0
 800f242:	b911      	cbnz	r1, 800f24a <sbrk_aligned+0x12>
 800f244:	f002 f968 	bl	8011518 <_sbrk_r>
 800f248:	6030      	str	r0, [r6, #0]
 800f24a:	4621      	mov	r1, r4
 800f24c:	4628      	mov	r0, r5
 800f24e:	f002 f963 	bl	8011518 <_sbrk_r>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	d103      	bne.n	800f25e <sbrk_aligned+0x26>
 800f256:	f04f 34ff 	mov.w	r4, #4294967295
 800f25a:	4620      	mov	r0, r4
 800f25c:	bd70      	pop	{r4, r5, r6, pc}
 800f25e:	1cc4      	adds	r4, r0, #3
 800f260:	f024 0403 	bic.w	r4, r4, #3
 800f264:	42a0      	cmp	r0, r4
 800f266:	d0f8      	beq.n	800f25a <sbrk_aligned+0x22>
 800f268:	1a21      	subs	r1, r4, r0
 800f26a:	4628      	mov	r0, r5
 800f26c:	f002 f954 	bl	8011518 <_sbrk_r>
 800f270:	3001      	adds	r0, #1
 800f272:	d1f2      	bne.n	800f25a <sbrk_aligned+0x22>
 800f274:	e7ef      	b.n	800f256 <sbrk_aligned+0x1e>
 800f276:	bf00      	nop
 800f278:	20001ab0 	.word	0x20001ab0

0800f27c <_malloc_r>:
 800f27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f280:	1ccd      	adds	r5, r1, #3
 800f282:	f025 0503 	bic.w	r5, r5, #3
 800f286:	3508      	adds	r5, #8
 800f288:	2d0c      	cmp	r5, #12
 800f28a:	bf38      	it	cc
 800f28c:	250c      	movcc	r5, #12
 800f28e:	2d00      	cmp	r5, #0
 800f290:	4606      	mov	r6, r0
 800f292:	db01      	blt.n	800f298 <_malloc_r+0x1c>
 800f294:	42a9      	cmp	r1, r5
 800f296:	d904      	bls.n	800f2a2 <_malloc_r+0x26>
 800f298:	230c      	movs	r3, #12
 800f29a:	6033      	str	r3, [r6, #0]
 800f29c:	2000      	movs	r0, #0
 800f29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f378 <_malloc_r+0xfc>
 800f2a6:	f000 f869 	bl	800f37c <__malloc_lock>
 800f2aa:	f8d8 3000 	ldr.w	r3, [r8]
 800f2ae:	461c      	mov	r4, r3
 800f2b0:	bb44      	cbnz	r4, 800f304 <_malloc_r+0x88>
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f7ff ffbf 	bl	800f238 <sbrk_aligned>
 800f2ba:	1c43      	adds	r3, r0, #1
 800f2bc:	4604      	mov	r4, r0
 800f2be:	d158      	bne.n	800f372 <_malloc_r+0xf6>
 800f2c0:	f8d8 4000 	ldr.w	r4, [r8]
 800f2c4:	4627      	mov	r7, r4
 800f2c6:	2f00      	cmp	r7, #0
 800f2c8:	d143      	bne.n	800f352 <_malloc_r+0xd6>
 800f2ca:	2c00      	cmp	r4, #0
 800f2cc:	d04b      	beq.n	800f366 <_malloc_r+0xea>
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	4639      	mov	r1, r7
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	eb04 0903 	add.w	r9, r4, r3
 800f2d8:	f002 f91e 	bl	8011518 <_sbrk_r>
 800f2dc:	4581      	cmp	r9, r0
 800f2de:	d142      	bne.n	800f366 <_malloc_r+0xea>
 800f2e0:	6821      	ldr	r1, [r4, #0]
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	1a6d      	subs	r5, r5, r1
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	f7ff ffa6 	bl	800f238 <sbrk_aligned>
 800f2ec:	3001      	adds	r0, #1
 800f2ee:	d03a      	beq.n	800f366 <_malloc_r+0xea>
 800f2f0:	6823      	ldr	r3, [r4, #0]
 800f2f2:	442b      	add	r3, r5
 800f2f4:	6023      	str	r3, [r4, #0]
 800f2f6:	f8d8 3000 	ldr.w	r3, [r8]
 800f2fa:	685a      	ldr	r2, [r3, #4]
 800f2fc:	bb62      	cbnz	r2, 800f358 <_malloc_r+0xdc>
 800f2fe:	f8c8 7000 	str.w	r7, [r8]
 800f302:	e00f      	b.n	800f324 <_malloc_r+0xa8>
 800f304:	6822      	ldr	r2, [r4, #0]
 800f306:	1b52      	subs	r2, r2, r5
 800f308:	d420      	bmi.n	800f34c <_malloc_r+0xd0>
 800f30a:	2a0b      	cmp	r2, #11
 800f30c:	d917      	bls.n	800f33e <_malloc_r+0xc2>
 800f30e:	1961      	adds	r1, r4, r5
 800f310:	42a3      	cmp	r3, r4
 800f312:	6025      	str	r5, [r4, #0]
 800f314:	bf18      	it	ne
 800f316:	6059      	strne	r1, [r3, #4]
 800f318:	6863      	ldr	r3, [r4, #4]
 800f31a:	bf08      	it	eq
 800f31c:	f8c8 1000 	streq.w	r1, [r8]
 800f320:	5162      	str	r2, [r4, r5]
 800f322:	604b      	str	r3, [r1, #4]
 800f324:	4630      	mov	r0, r6
 800f326:	f000 f82f 	bl	800f388 <__malloc_unlock>
 800f32a:	f104 000b 	add.w	r0, r4, #11
 800f32e:	1d23      	adds	r3, r4, #4
 800f330:	f020 0007 	bic.w	r0, r0, #7
 800f334:	1ac2      	subs	r2, r0, r3
 800f336:	bf1c      	itt	ne
 800f338:	1a1b      	subne	r3, r3, r0
 800f33a:	50a3      	strne	r3, [r4, r2]
 800f33c:	e7af      	b.n	800f29e <_malloc_r+0x22>
 800f33e:	6862      	ldr	r2, [r4, #4]
 800f340:	42a3      	cmp	r3, r4
 800f342:	bf0c      	ite	eq
 800f344:	f8c8 2000 	streq.w	r2, [r8]
 800f348:	605a      	strne	r2, [r3, #4]
 800f34a:	e7eb      	b.n	800f324 <_malloc_r+0xa8>
 800f34c:	4623      	mov	r3, r4
 800f34e:	6864      	ldr	r4, [r4, #4]
 800f350:	e7ae      	b.n	800f2b0 <_malloc_r+0x34>
 800f352:	463c      	mov	r4, r7
 800f354:	687f      	ldr	r7, [r7, #4]
 800f356:	e7b6      	b.n	800f2c6 <_malloc_r+0x4a>
 800f358:	461a      	mov	r2, r3
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	42a3      	cmp	r3, r4
 800f35e:	d1fb      	bne.n	800f358 <_malloc_r+0xdc>
 800f360:	2300      	movs	r3, #0
 800f362:	6053      	str	r3, [r2, #4]
 800f364:	e7de      	b.n	800f324 <_malloc_r+0xa8>
 800f366:	230c      	movs	r3, #12
 800f368:	4630      	mov	r0, r6
 800f36a:	6033      	str	r3, [r6, #0]
 800f36c:	f000 f80c 	bl	800f388 <__malloc_unlock>
 800f370:	e794      	b.n	800f29c <_malloc_r+0x20>
 800f372:	6005      	str	r5, [r0, #0]
 800f374:	e7d6      	b.n	800f324 <_malloc_r+0xa8>
 800f376:	bf00      	nop
 800f378:	20001ab4 	.word	0x20001ab4

0800f37c <__malloc_lock>:
 800f37c:	4801      	ldr	r0, [pc, #4]	@ (800f384 <__malloc_lock+0x8>)
 800f37e:	f7ff b89a 	b.w	800e4b6 <__retarget_lock_acquire_recursive>
 800f382:	bf00      	nop
 800f384:	20001aac 	.word	0x20001aac

0800f388 <__malloc_unlock>:
 800f388:	4801      	ldr	r0, [pc, #4]	@ (800f390 <__malloc_unlock+0x8>)
 800f38a:	f7ff b895 	b.w	800e4b8 <__retarget_lock_release_recursive>
 800f38e:	bf00      	nop
 800f390:	20001aac 	.word	0x20001aac

0800f394 <_Balloc>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	69c6      	ldr	r6, [r0, #28]
 800f398:	4604      	mov	r4, r0
 800f39a:	460d      	mov	r5, r1
 800f39c:	b976      	cbnz	r6, 800f3bc <_Balloc+0x28>
 800f39e:	2010      	movs	r0, #16
 800f3a0:	f7ff ff42 	bl	800f228 <malloc>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	61e0      	str	r0, [r4, #28]
 800f3a8:	b920      	cbnz	r0, 800f3b4 <_Balloc+0x20>
 800f3aa:	216b      	movs	r1, #107	@ 0x6b
 800f3ac:	4b17      	ldr	r3, [pc, #92]	@ (800f40c <_Balloc+0x78>)
 800f3ae:	4818      	ldr	r0, [pc, #96]	@ (800f410 <_Balloc+0x7c>)
 800f3b0:	f002 f8d6 	bl	8011560 <__assert_func>
 800f3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3b8:	6006      	str	r6, [r0, #0]
 800f3ba:	60c6      	str	r6, [r0, #12]
 800f3bc:	69e6      	ldr	r6, [r4, #28]
 800f3be:	68f3      	ldr	r3, [r6, #12]
 800f3c0:	b183      	cbz	r3, 800f3e4 <_Balloc+0x50>
 800f3c2:	69e3      	ldr	r3, [r4, #28]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3ca:	b9b8      	cbnz	r0, 800f3fc <_Balloc+0x68>
 800f3cc:	2101      	movs	r1, #1
 800f3ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f3d2:	1d72      	adds	r2, r6, #5
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	0092      	lsls	r2, r2, #2
 800f3d8:	f002 f8e0 	bl	801159c <_calloc_r>
 800f3dc:	b160      	cbz	r0, 800f3f8 <_Balloc+0x64>
 800f3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f3e2:	e00e      	b.n	800f402 <_Balloc+0x6e>
 800f3e4:	2221      	movs	r2, #33	@ 0x21
 800f3e6:	2104      	movs	r1, #4
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f002 f8d7 	bl	801159c <_calloc_r>
 800f3ee:	69e3      	ldr	r3, [r4, #28]
 800f3f0:	60f0      	str	r0, [r6, #12]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1e4      	bne.n	800f3c2 <_Balloc+0x2e>
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	bd70      	pop	{r4, r5, r6, pc}
 800f3fc:	6802      	ldr	r2, [r0, #0]
 800f3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f402:	2300      	movs	r3, #0
 800f404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f408:	e7f7      	b.n	800f3fa <_Balloc+0x66>
 800f40a:	bf00      	nop
 800f40c:	08012ae2 	.word	0x08012ae2
 800f410:	08012b62 	.word	0x08012b62

0800f414 <_Bfree>:
 800f414:	b570      	push	{r4, r5, r6, lr}
 800f416:	69c6      	ldr	r6, [r0, #28]
 800f418:	4605      	mov	r5, r0
 800f41a:	460c      	mov	r4, r1
 800f41c:	b976      	cbnz	r6, 800f43c <_Bfree+0x28>
 800f41e:	2010      	movs	r0, #16
 800f420:	f7ff ff02 	bl	800f228 <malloc>
 800f424:	4602      	mov	r2, r0
 800f426:	61e8      	str	r0, [r5, #28]
 800f428:	b920      	cbnz	r0, 800f434 <_Bfree+0x20>
 800f42a:	218f      	movs	r1, #143	@ 0x8f
 800f42c:	4b08      	ldr	r3, [pc, #32]	@ (800f450 <_Bfree+0x3c>)
 800f42e:	4809      	ldr	r0, [pc, #36]	@ (800f454 <_Bfree+0x40>)
 800f430:	f002 f896 	bl	8011560 <__assert_func>
 800f434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f438:	6006      	str	r6, [r0, #0]
 800f43a:	60c6      	str	r6, [r0, #12]
 800f43c:	b13c      	cbz	r4, 800f44e <_Bfree+0x3a>
 800f43e:	69eb      	ldr	r3, [r5, #28]
 800f440:	6862      	ldr	r2, [r4, #4]
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f448:	6021      	str	r1, [r4, #0]
 800f44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f44e:	bd70      	pop	{r4, r5, r6, pc}
 800f450:	08012ae2 	.word	0x08012ae2
 800f454:	08012b62 	.word	0x08012b62

0800f458 <__multadd>:
 800f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45c:	4607      	mov	r7, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	461e      	mov	r6, r3
 800f462:	2000      	movs	r0, #0
 800f464:	690d      	ldr	r5, [r1, #16]
 800f466:	f101 0c14 	add.w	ip, r1, #20
 800f46a:	f8dc 3000 	ldr.w	r3, [ip]
 800f46e:	3001      	adds	r0, #1
 800f470:	b299      	uxth	r1, r3
 800f472:	fb02 6101 	mla	r1, r2, r1, r6
 800f476:	0c1e      	lsrs	r6, r3, #16
 800f478:	0c0b      	lsrs	r3, r1, #16
 800f47a:	fb02 3306 	mla	r3, r2, r6, r3
 800f47e:	b289      	uxth	r1, r1
 800f480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f484:	4285      	cmp	r5, r0
 800f486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f48a:	f84c 1b04 	str.w	r1, [ip], #4
 800f48e:	dcec      	bgt.n	800f46a <__multadd+0x12>
 800f490:	b30e      	cbz	r6, 800f4d6 <__multadd+0x7e>
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	42ab      	cmp	r3, r5
 800f496:	dc19      	bgt.n	800f4cc <__multadd+0x74>
 800f498:	6861      	ldr	r1, [r4, #4]
 800f49a:	4638      	mov	r0, r7
 800f49c:	3101      	adds	r1, #1
 800f49e:	f7ff ff79 	bl	800f394 <_Balloc>
 800f4a2:	4680      	mov	r8, r0
 800f4a4:	b928      	cbnz	r0, 800f4b2 <__multadd+0x5a>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	21ba      	movs	r1, #186	@ 0xba
 800f4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f4dc <__multadd+0x84>)
 800f4ac:	480c      	ldr	r0, [pc, #48]	@ (800f4e0 <__multadd+0x88>)
 800f4ae:	f002 f857 	bl	8011560 <__assert_func>
 800f4b2:	6922      	ldr	r2, [r4, #16]
 800f4b4:	f104 010c 	add.w	r1, r4, #12
 800f4b8:	3202      	adds	r2, #2
 800f4ba:	0092      	lsls	r2, r2, #2
 800f4bc:	300c      	adds	r0, #12
 800f4be:	f002 f83b 	bl	8011538 <memcpy>
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	4638      	mov	r0, r7
 800f4c6:	f7ff ffa5 	bl	800f414 <_Bfree>
 800f4ca:	4644      	mov	r4, r8
 800f4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f4d0:	3501      	adds	r5, #1
 800f4d2:	615e      	str	r6, [r3, #20]
 800f4d4:	6125      	str	r5, [r4, #16]
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4dc:	08012b51 	.word	0x08012b51
 800f4e0:	08012b62 	.word	0x08012b62

0800f4e4 <__s2b>:
 800f4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e8:	4615      	mov	r5, r2
 800f4ea:	2209      	movs	r2, #9
 800f4ec:	461f      	mov	r7, r3
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	db09      	blt.n	800f514 <__s2b+0x30>
 800f500:	4630      	mov	r0, r6
 800f502:	f7ff ff47 	bl	800f394 <_Balloc>
 800f506:	b940      	cbnz	r0, 800f51a <__s2b+0x36>
 800f508:	4602      	mov	r2, r0
 800f50a:	21d3      	movs	r1, #211	@ 0xd3
 800f50c:	4b18      	ldr	r3, [pc, #96]	@ (800f570 <__s2b+0x8c>)
 800f50e:	4819      	ldr	r0, [pc, #100]	@ (800f574 <__s2b+0x90>)
 800f510:	f002 f826 	bl	8011560 <__assert_func>
 800f514:	0052      	lsls	r2, r2, #1
 800f516:	3101      	adds	r1, #1
 800f518:	e7f0      	b.n	800f4fc <__s2b+0x18>
 800f51a:	9b08      	ldr	r3, [sp, #32]
 800f51c:	2d09      	cmp	r5, #9
 800f51e:	6143      	str	r3, [r0, #20]
 800f520:	f04f 0301 	mov.w	r3, #1
 800f524:	6103      	str	r3, [r0, #16]
 800f526:	dd16      	ble.n	800f556 <__s2b+0x72>
 800f528:	f104 0909 	add.w	r9, r4, #9
 800f52c:	46c8      	mov	r8, r9
 800f52e:	442c      	add	r4, r5
 800f530:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f534:	4601      	mov	r1, r0
 800f536:	220a      	movs	r2, #10
 800f538:	4630      	mov	r0, r6
 800f53a:	3b30      	subs	r3, #48	@ 0x30
 800f53c:	f7ff ff8c 	bl	800f458 <__multadd>
 800f540:	45a0      	cmp	r8, r4
 800f542:	d1f5      	bne.n	800f530 <__s2b+0x4c>
 800f544:	f1a5 0408 	sub.w	r4, r5, #8
 800f548:	444c      	add	r4, r9
 800f54a:	1b2d      	subs	r5, r5, r4
 800f54c:	1963      	adds	r3, r4, r5
 800f54e:	42bb      	cmp	r3, r7
 800f550:	db04      	blt.n	800f55c <__s2b+0x78>
 800f552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f556:	2509      	movs	r5, #9
 800f558:	340a      	adds	r4, #10
 800f55a:	e7f6      	b.n	800f54a <__s2b+0x66>
 800f55c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f560:	4601      	mov	r1, r0
 800f562:	220a      	movs	r2, #10
 800f564:	4630      	mov	r0, r6
 800f566:	3b30      	subs	r3, #48	@ 0x30
 800f568:	f7ff ff76 	bl	800f458 <__multadd>
 800f56c:	e7ee      	b.n	800f54c <__s2b+0x68>
 800f56e:	bf00      	nop
 800f570:	08012b51 	.word	0x08012b51
 800f574:	08012b62 	.word	0x08012b62

0800f578 <__hi0bits>:
 800f578:	4603      	mov	r3, r0
 800f57a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f57e:	bf3a      	itte	cc
 800f580:	0403      	lslcc	r3, r0, #16
 800f582:	2010      	movcc	r0, #16
 800f584:	2000      	movcs	r0, #0
 800f586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f58a:	bf3c      	itt	cc
 800f58c:	021b      	lslcc	r3, r3, #8
 800f58e:	3008      	addcc	r0, #8
 800f590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f594:	bf3c      	itt	cc
 800f596:	011b      	lslcc	r3, r3, #4
 800f598:	3004      	addcc	r0, #4
 800f59a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f59e:	bf3c      	itt	cc
 800f5a0:	009b      	lslcc	r3, r3, #2
 800f5a2:	3002      	addcc	r0, #2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	db05      	blt.n	800f5b4 <__hi0bits+0x3c>
 800f5a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f5ac:	f100 0001 	add.w	r0, r0, #1
 800f5b0:	bf08      	it	eq
 800f5b2:	2020      	moveq	r0, #32
 800f5b4:	4770      	bx	lr

0800f5b6 <__lo0bits>:
 800f5b6:	6803      	ldr	r3, [r0, #0]
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	f013 0007 	ands.w	r0, r3, #7
 800f5be:	d00b      	beq.n	800f5d8 <__lo0bits+0x22>
 800f5c0:	07d9      	lsls	r1, r3, #31
 800f5c2:	d421      	bmi.n	800f608 <__lo0bits+0x52>
 800f5c4:	0798      	lsls	r0, r3, #30
 800f5c6:	bf49      	itett	mi
 800f5c8:	085b      	lsrmi	r3, r3, #1
 800f5ca:	089b      	lsrpl	r3, r3, #2
 800f5cc:	2001      	movmi	r0, #1
 800f5ce:	6013      	strmi	r3, [r2, #0]
 800f5d0:	bf5c      	itt	pl
 800f5d2:	2002      	movpl	r0, #2
 800f5d4:	6013      	strpl	r3, [r2, #0]
 800f5d6:	4770      	bx	lr
 800f5d8:	b299      	uxth	r1, r3
 800f5da:	b909      	cbnz	r1, 800f5e0 <__lo0bits+0x2a>
 800f5dc:	2010      	movs	r0, #16
 800f5de:	0c1b      	lsrs	r3, r3, #16
 800f5e0:	b2d9      	uxtb	r1, r3
 800f5e2:	b909      	cbnz	r1, 800f5e8 <__lo0bits+0x32>
 800f5e4:	3008      	adds	r0, #8
 800f5e6:	0a1b      	lsrs	r3, r3, #8
 800f5e8:	0719      	lsls	r1, r3, #28
 800f5ea:	bf04      	itt	eq
 800f5ec:	091b      	lsreq	r3, r3, #4
 800f5ee:	3004      	addeq	r0, #4
 800f5f0:	0799      	lsls	r1, r3, #30
 800f5f2:	bf04      	itt	eq
 800f5f4:	089b      	lsreq	r3, r3, #2
 800f5f6:	3002      	addeq	r0, #2
 800f5f8:	07d9      	lsls	r1, r3, #31
 800f5fa:	d403      	bmi.n	800f604 <__lo0bits+0x4e>
 800f5fc:	085b      	lsrs	r3, r3, #1
 800f5fe:	f100 0001 	add.w	r0, r0, #1
 800f602:	d003      	beq.n	800f60c <__lo0bits+0x56>
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	4770      	bx	lr
 800f608:	2000      	movs	r0, #0
 800f60a:	4770      	bx	lr
 800f60c:	2020      	movs	r0, #32
 800f60e:	4770      	bx	lr

0800f610 <__i2b>:
 800f610:	b510      	push	{r4, lr}
 800f612:	460c      	mov	r4, r1
 800f614:	2101      	movs	r1, #1
 800f616:	f7ff febd 	bl	800f394 <_Balloc>
 800f61a:	4602      	mov	r2, r0
 800f61c:	b928      	cbnz	r0, 800f62a <__i2b+0x1a>
 800f61e:	f240 1145 	movw	r1, #325	@ 0x145
 800f622:	4b04      	ldr	r3, [pc, #16]	@ (800f634 <__i2b+0x24>)
 800f624:	4804      	ldr	r0, [pc, #16]	@ (800f638 <__i2b+0x28>)
 800f626:	f001 ff9b 	bl	8011560 <__assert_func>
 800f62a:	2301      	movs	r3, #1
 800f62c:	6144      	str	r4, [r0, #20]
 800f62e:	6103      	str	r3, [r0, #16]
 800f630:	bd10      	pop	{r4, pc}
 800f632:	bf00      	nop
 800f634:	08012b51 	.word	0x08012b51
 800f638:	08012b62 	.word	0x08012b62

0800f63c <__multiply>:
 800f63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f640:	4617      	mov	r7, r2
 800f642:	690a      	ldr	r2, [r1, #16]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	4689      	mov	r9, r1
 800f648:	429a      	cmp	r2, r3
 800f64a:	bfa2      	ittt	ge
 800f64c:	463b      	movge	r3, r7
 800f64e:	460f      	movge	r7, r1
 800f650:	4699      	movge	r9, r3
 800f652:	693d      	ldr	r5, [r7, #16]
 800f654:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	6879      	ldr	r1, [r7, #4]
 800f65c:	eb05 060a 	add.w	r6, r5, sl
 800f660:	42b3      	cmp	r3, r6
 800f662:	b085      	sub	sp, #20
 800f664:	bfb8      	it	lt
 800f666:	3101      	addlt	r1, #1
 800f668:	f7ff fe94 	bl	800f394 <_Balloc>
 800f66c:	b930      	cbnz	r0, 800f67c <__multiply+0x40>
 800f66e:	4602      	mov	r2, r0
 800f670:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f674:	4b40      	ldr	r3, [pc, #256]	@ (800f778 <__multiply+0x13c>)
 800f676:	4841      	ldr	r0, [pc, #260]	@ (800f77c <__multiply+0x140>)
 800f678:	f001 ff72 	bl	8011560 <__assert_func>
 800f67c:	f100 0414 	add.w	r4, r0, #20
 800f680:	4623      	mov	r3, r4
 800f682:	2200      	movs	r2, #0
 800f684:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f688:	4573      	cmp	r3, lr
 800f68a:	d320      	bcc.n	800f6ce <__multiply+0x92>
 800f68c:	f107 0814 	add.w	r8, r7, #20
 800f690:	f109 0114 	add.w	r1, r9, #20
 800f694:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f698:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f69c:	9302      	str	r3, [sp, #8]
 800f69e:	1beb      	subs	r3, r5, r7
 800f6a0:	3b15      	subs	r3, #21
 800f6a2:	f023 0303 	bic.w	r3, r3, #3
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	3715      	adds	r7, #21
 800f6aa:	42bd      	cmp	r5, r7
 800f6ac:	bf38      	it	cc
 800f6ae:	2304      	movcc	r3, #4
 800f6b0:	9301      	str	r3, [sp, #4]
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	9103      	str	r1, [sp, #12]
 800f6b6:	428b      	cmp	r3, r1
 800f6b8:	d80c      	bhi.n	800f6d4 <__multiply+0x98>
 800f6ba:	2e00      	cmp	r6, #0
 800f6bc:	dd03      	ble.n	800f6c6 <__multiply+0x8a>
 800f6be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d055      	beq.n	800f772 <__multiply+0x136>
 800f6c6:	6106      	str	r6, [r0, #16]
 800f6c8:	b005      	add	sp, #20
 800f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ce:	f843 2b04 	str.w	r2, [r3], #4
 800f6d2:	e7d9      	b.n	800f688 <__multiply+0x4c>
 800f6d4:	f8b1 a000 	ldrh.w	sl, [r1]
 800f6d8:	f1ba 0f00 	cmp.w	sl, #0
 800f6dc:	d01f      	beq.n	800f71e <__multiply+0xe2>
 800f6de:	46c4      	mov	ip, r8
 800f6e0:	46a1      	mov	r9, r4
 800f6e2:	2700      	movs	r7, #0
 800f6e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f6e8:	f8d9 3000 	ldr.w	r3, [r9]
 800f6ec:	fa1f fb82 	uxth.w	fp, r2
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	fb0a 330b 	mla	r3, sl, fp, r3
 800f6f6:	443b      	add	r3, r7
 800f6f8:	f8d9 7000 	ldr.w	r7, [r9]
 800f6fc:	0c12      	lsrs	r2, r2, #16
 800f6fe:	0c3f      	lsrs	r7, r7, #16
 800f700:	fb0a 7202 	mla	r2, sl, r2, r7
 800f704:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f708:	b29b      	uxth	r3, r3
 800f70a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f70e:	4565      	cmp	r5, ip
 800f710:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f714:	f849 3b04 	str.w	r3, [r9], #4
 800f718:	d8e4      	bhi.n	800f6e4 <__multiply+0xa8>
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	50e7      	str	r7, [r4, r3]
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	3104      	adds	r1, #4
 800f722:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f726:	f1b9 0f00 	cmp.w	r9, #0
 800f72a:	d020      	beq.n	800f76e <__multiply+0x132>
 800f72c:	4647      	mov	r7, r8
 800f72e:	46a4      	mov	ip, r4
 800f730:	f04f 0a00 	mov.w	sl, #0
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	f8b7 b000 	ldrh.w	fp, [r7]
 800f73a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	fb09 220b 	mla	r2, r9, fp, r2
 800f744:	4452      	add	r2, sl
 800f746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f74a:	f84c 3b04 	str.w	r3, [ip], #4
 800f74e:	f857 3b04 	ldr.w	r3, [r7], #4
 800f752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f756:	f8bc 3000 	ldrh.w	r3, [ip]
 800f75a:	42bd      	cmp	r5, r7
 800f75c:	fb09 330a 	mla	r3, r9, sl, r3
 800f760:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f768:	d8e5      	bhi.n	800f736 <__multiply+0xfa>
 800f76a:	9a01      	ldr	r2, [sp, #4]
 800f76c:	50a3      	str	r3, [r4, r2]
 800f76e:	3404      	adds	r4, #4
 800f770:	e79f      	b.n	800f6b2 <__multiply+0x76>
 800f772:	3e01      	subs	r6, #1
 800f774:	e7a1      	b.n	800f6ba <__multiply+0x7e>
 800f776:	bf00      	nop
 800f778:	08012b51 	.word	0x08012b51
 800f77c:	08012b62 	.word	0x08012b62

0800f780 <__pow5mult>:
 800f780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f784:	4615      	mov	r5, r2
 800f786:	f012 0203 	ands.w	r2, r2, #3
 800f78a:	4607      	mov	r7, r0
 800f78c:	460e      	mov	r6, r1
 800f78e:	d007      	beq.n	800f7a0 <__pow5mult+0x20>
 800f790:	4c25      	ldr	r4, [pc, #148]	@ (800f828 <__pow5mult+0xa8>)
 800f792:	3a01      	subs	r2, #1
 800f794:	2300      	movs	r3, #0
 800f796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f79a:	f7ff fe5d 	bl	800f458 <__multadd>
 800f79e:	4606      	mov	r6, r0
 800f7a0:	10ad      	asrs	r5, r5, #2
 800f7a2:	d03d      	beq.n	800f820 <__pow5mult+0xa0>
 800f7a4:	69fc      	ldr	r4, [r7, #28]
 800f7a6:	b97c      	cbnz	r4, 800f7c8 <__pow5mult+0x48>
 800f7a8:	2010      	movs	r0, #16
 800f7aa:	f7ff fd3d 	bl	800f228 <malloc>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	61f8      	str	r0, [r7, #28]
 800f7b2:	b928      	cbnz	r0, 800f7c0 <__pow5mult+0x40>
 800f7b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f7b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f82c <__pow5mult+0xac>)
 800f7ba:	481d      	ldr	r0, [pc, #116]	@ (800f830 <__pow5mult+0xb0>)
 800f7bc:	f001 fed0 	bl	8011560 <__assert_func>
 800f7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7c4:	6004      	str	r4, [r0, #0]
 800f7c6:	60c4      	str	r4, [r0, #12]
 800f7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7d0:	b94c      	cbnz	r4, 800f7e6 <__pow5mult+0x66>
 800f7d2:	f240 2171 	movw	r1, #625	@ 0x271
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	f7ff ff1a 	bl	800f610 <__i2b>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	4604      	mov	r4, r0
 800f7e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7e4:	6003      	str	r3, [r0, #0]
 800f7e6:	f04f 0900 	mov.w	r9, #0
 800f7ea:	07eb      	lsls	r3, r5, #31
 800f7ec:	d50a      	bpl.n	800f804 <__pow5mult+0x84>
 800f7ee:	4631      	mov	r1, r6
 800f7f0:	4622      	mov	r2, r4
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	f7ff ff22 	bl	800f63c <__multiply>
 800f7f8:	4680      	mov	r8, r0
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4638      	mov	r0, r7
 800f7fe:	f7ff fe09 	bl	800f414 <_Bfree>
 800f802:	4646      	mov	r6, r8
 800f804:	106d      	asrs	r5, r5, #1
 800f806:	d00b      	beq.n	800f820 <__pow5mult+0xa0>
 800f808:	6820      	ldr	r0, [r4, #0]
 800f80a:	b938      	cbnz	r0, 800f81c <__pow5mult+0x9c>
 800f80c:	4622      	mov	r2, r4
 800f80e:	4621      	mov	r1, r4
 800f810:	4638      	mov	r0, r7
 800f812:	f7ff ff13 	bl	800f63c <__multiply>
 800f816:	6020      	str	r0, [r4, #0]
 800f818:	f8c0 9000 	str.w	r9, [r0]
 800f81c:	4604      	mov	r4, r0
 800f81e:	e7e4      	b.n	800f7ea <__pow5mult+0x6a>
 800f820:	4630      	mov	r0, r6
 800f822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f826:	bf00      	nop
 800f828:	08012c90 	.word	0x08012c90
 800f82c:	08012ae2 	.word	0x08012ae2
 800f830:	08012b62 	.word	0x08012b62

0800f834 <__lshift>:
 800f834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f838:	460c      	mov	r4, r1
 800f83a:	4607      	mov	r7, r0
 800f83c:	4691      	mov	r9, r2
 800f83e:	6923      	ldr	r3, [r4, #16]
 800f840:	6849      	ldr	r1, [r1, #4]
 800f842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f84c:	f108 0601 	add.w	r6, r8, #1
 800f850:	42b3      	cmp	r3, r6
 800f852:	db0b      	blt.n	800f86c <__lshift+0x38>
 800f854:	4638      	mov	r0, r7
 800f856:	f7ff fd9d 	bl	800f394 <_Balloc>
 800f85a:	4605      	mov	r5, r0
 800f85c:	b948      	cbnz	r0, 800f872 <__lshift+0x3e>
 800f85e:	4602      	mov	r2, r0
 800f860:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f864:	4b27      	ldr	r3, [pc, #156]	@ (800f904 <__lshift+0xd0>)
 800f866:	4828      	ldr	r0, [pc, #160]	@ (800f908 <__lshift+0xd4>)
 800f868:	f001 fe7a 	bl	8011560 <__assert_func>
 800f86c:	3101      	adds	r1, #1
 800f86e:	005b      	lsls	r3, r3, #1
 800f870:	e7ee      	b.n	800f850 <__lshift+0x1c>
 800f872:	2300      	movs	r3, #0
 800f874:	f100 0114 	add.w	r1, r0, #20
 800f878:	f100 0210 	add.w	r2, r0, #16
 800f87c:	4618      	mov	r0, r3
 800f87e:	4553      	cmp	r3, sl
 800f880:	db33      	blt.n	800f8ea <__lshift+0xb6>
 800f882:	6920      	ldr	r0, [r4, #16]
 800f884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f888:	f104 0314 	add.w	r3, r4, #20
 800f88c:	f019 091f 	ands.w	r9, r9, #31
 800f890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f898:	d02b      	beq.n	800f8f2 <__lshift+0xbe>
 800f89a:	468a      	mov	sl, r1
 800f89c:	2200      	movs	r2, #0
 800f89e:	f1c9 0e20 	rsb	lr, r9, #32
 800f8a2:	6818      	ldr	r0, [r3, #0]
 800f8a4:	fa00 f009 	lsl.w	r0, r0, r9
 800f8a8:	4310      	orrs	r0, r2
 800f8aa:	f84a 0b04 	str.w	r0, [sl], #4
 800f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b2:	459c      	cmp	ip, r3
 800f8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f8b8:	d8f3      	bhi.n	800f8a2 <__lshift+0x6e>
 800f8ba:	ebac 0304 	sub.w	r3, ip, r4
 800f8be:	3b15      	subs	r3, #21
 800f8c0:	f023 0303 	bic.w	r3, r3, #3
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	f104 0015 	add.w	r0, r4, #21
 800f8ca:	4560      	cmp	r0, ip
 800f8cc:	bf88      	it	hi
 800f8ce:	2304      	movhi	r3, #4
 800f8d0:	50ca      	str	r2, [r1, r3]
 800f8d2:	b10a      	cbz	r2, 800f8d8 <__lshift+0xa4>
 800f8d4:	f108 0602 	add.w	r6, r8, #2
 800f8d8:	3e01      	subs	r6, #1
 800f8da:	4638      	mov	r0, r7
 800f8dc:	4621      	mov	r1, r4
 800f8de:	612e      	str	r6, [r5, #16]
 800f8e0:	f7ff fd98 	bl	800f414 <_Bfree>
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	e7c5      	b.n	800f87e <__lshift+0x4a>
 800f8f2:	3904      	subs	r1, #4
 800f8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8f8:	459c      	cmp	ip, r3
 800f8fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800f8fe:	d8f9      	bhi.n	800f8f4 <__lshift+0xc0>
 800f900:	e7ea      	b.n	800f8d8 <__lshift+0xa4>
 800f902:	bf00      	nop
 800f904:	08012b51 	.word	0x08012b51
 800f908:	08012b62 	.word	0x08012b62

0800f90c <__mcmp>:
 800f90c:	4603      	mov	r3, r0
 800f90e:	690a      	ldr	r2, [r1, #16]
 800f910:	6900      	ldr	r0, [r0, #16]
 800f912:	b530      	push	{r4, r5, lr}
 800f914:	1a80      	subs	r0, r0, r2
 800f916:	d10e      	bne.n	800f936 <__mcmp+0x2a>
 800f918:	3314      	adds	r3, #20
 800f91a:	3114      	adds	r1, #20
 800f91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f92c:	4295      	cmp	r5, r2
 800f92e:	d003      	beq.n	800f938 <__mcmp+0x2c>
 800f930:	d205      	bcs.n	800f93e <__mcmp+0x32>
 800f932:	f04f 30ff 	mov.w	r0, #4294967295
 800f936:	bd30      	pop	{r4, r5, pc}
 800f938:	42a3      	cmp	r3, r4
 800f93a:	d3f3      	bcc.n	800f924 <__mcmp+0x18>
 800f93c:	e7fb      	b.n	800f936 <__mcmp+0x2a>
 800f93e:	2001      	movs	r0, #1
 800f940:	e7f9      	b.n	800f936 <__mcmp+0x2a>
	...

0800f944 <__mdiff>:
 800f944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f948:	4689      	mov	r9, r1
 800f94a:	4606      	mov	r6, r0
 800f94c:	4611      	mov	r1, r2
 800f94e:	4648      	mov	r0, r9
 800f950:	4614      	mov	r4, r2
 800f952:	f7ff ffdb 	bl	800f90c <__mcmp>
 800f956:	1e05      	subs	r5, r0, #0
 800f958:	d112      	bne.n	800f980 <__mdiff+0x3c>
 800f95a:	4629      	mov	r1, r5
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff fd19 	bl	800f394 <_Balloc>
 800f962:	4602      	mov	r2, r0
 800f964:	b928      	cbnz	r0, 800f972 <__mdiff+0x2e>
 800f966:	f240 2137 	movw	r1, #567	@ 0x237
 800f96a:	4b3e      	ldr	r3, [pc, #248]	@ (800fa64 <__mdiff+0x120>)
 800f96c:	483e      	ldr	r0, [pc, #248]	@ (800fa68 <__mdiff+0x124>)
 800f96e:	f001 fdf7 	bl	8011560 <__assert_func>
 800f972:	2301      	movs	r3, #1
 800f974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f978:	4610      	mov	r0, r2
 800f97a:	b003      	add	sp, #12
 800f97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f980:	bfbc      	itt	lt
 800f982:	464b      	movlt	r3, r9
 800f984:	46a1      	movlt	r9, r4
 800f986:	4630      	mov	r0, r6
 800f988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f98c:	bfba      	itte	lt
 800f98e:	461c      	movlt	r4, r3
 800f990:	2501      	movlt	r5, #1
 800f992:	2500      	movge	r5, #0
 800f994:	f7ff fcfe 	bl	800f394 <_Balloc>
 800f998:	4602      	mov	r2, r0
 800f99a:	b918      	cbnz	r0, 800f9a4 <__mdiff+0x60>
 800f99c:	f240 2145 	movw	r1, #581	@ 0x245
 800f9a0:	4b30      	ldr	r3, [pc, #192]	@ (800fa64 <__mdiff+0x120>)
 800f9a2:	e7e3      	b.n	800f96c <__mdiff+0x28>
 800f9a4:	f100 0b14 	add.w	fp, r0, #20
 800f9a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f9ac:	f109 0310 	add.w	r3, r9, #16
 800f9b0:	60c5      	str	r5, [r0, #12]
 800f9b2:	f04f 0c00 	mov.w	ip, #0
 800f9b6:	f109 0514 	add.w	r5, r9, #20
 800f9ba:	46d9      	mov	r9, fp
 800f9bc:	6926      	ldr	r6, [r4, #16]
 800f9be:	f104 0e14 	add.w	lr, r4, #20
 800f9c2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f9c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f9ca:	9301      	str	r3, [sp, #4]
 800f9cc:	9b01      	ldr	r3, [sp, #4]
 800f9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f9d6:	b281      	uxth	r1, r0
 800f9d8:	9301      	str	r3, [sp, #4]
 800f9da:	fa1f f38a 	uxth.w	r3, sl
 800f9de:	1a5b      	subs	r3, r3, r1
 800f9e0:	0c00      	lsrs	r0, r0, #16
 800f9e2:	4463      	add	r3, ip
 800f9e4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f9e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f9f2:	4576      	cmp	r6, lr
 800f9f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9f8:	f849 3b04 	str.w	r3, [r9], #4
 800f9fc:	d8e6      	bhi.n	800f9cc <__mdiff+0x88>
 800f9fe:	1b33      	subs	r3, r6, r4
 800fa00:	3b15      	subs	r3, #21
 800fa02:	f023 0303 	bic.w	r3, r3, #3
 800fa06:	3415      	adds	r4, #21
 800fa08:	3304      	adds	r3, #4
 800fa0a:	42a6      	cmp	r6, r4
 800fa0c:	bf38      	it	cc
 800fa0e:	2304      	movcc	r3, #4
 800fa10:	441d      	add	r5, r3
 800fa12:	445b      	add	r3, fp
 800fa14:	461e      	mov	r6, r3
 800fa16:	462c      	mov	r4, r5
 800fa18:	4544      	cmp	r4, r8
 800fa1a:	d30e      	bcc.n	800fa3a <__mdiff+0xf6>
 800fa1c:	f108 0103 	add.w	r1, r8, #3
 800fa20:	1b49      	subs	r1, r1, r5
 800fa22:	f021 0103 	bic.w	r1, r1, #3
 800fa26:	3d03      	subs	r5, #3
 800fa28:	45a8      	cmp	r8, r5
 800fa2a:	bf38      	it	cc
 800fa2c:	2100      	movcc	r1, #0
 800fa2e:	440b      	add	r3, r1
 800fa30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa34:	b199      	cbz	r1, 800fa5e <__mdiff+0x11a>
 800fa36:	6117      	str	r7, [r2, #16]
 800fa38:	e79e      	b.n	800f978 <__mdiff+0x34>
 800fa3a:	46e6      	mov	lr, ip
 800fa3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fa40:	fa1f fc81 	uxth.w	ip, r1
 800fa44:	44f4      	add	ip, lr
 800fa46:	0c08      	lsrs	r0, r1, #16
 800fa48:	4471      	add	r1, lr
 800fa4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fa4e:	b289      	uxth	r1, r1
 800fa50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fa54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa58:	f846 1b04 	str.w	r1, [r6], #4
 800fa5c:	e7dc      	b.n	800fa18 <__mdiff+0xd4>
 800fa5e:	3f01      	subs	r7, #1
 800fa60:	e7e6      	b.n	800fa30 <__mdiff+0xec>
 800fa62:	bf00      	nop
 800fa64:	08012b51 	.word	0x08012b51
 800fa68:	08012b62 	.word	0x08012b62

0800fa6c <__ulp>:
 800fa6c:	4b0e      	ldr	r3, [pc, #56]	@ (800faa8 <__ulp+0x3c>)
 800fa6e:	400b      	ands	r3, r1
 800fa70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	dc08      	bgt.n	800fa8a <__ulp+0x1e>
 800fa78:	425b      	negs	r3, r3
 800fa7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa82:	da04      	bge.n	800fa8e <__ulp+0x22>
 800fa84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa88:	4113      	asrs	r3, r2
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	e008      	b.n	800faa0 <__ulp+0x34>
 800fa8e:	f1a2 0314 	sub.w	r3, r2, #20
 800fa92:	2b1e      	cmp	r3, #30
 800fa94:	bfd6      	itet	le
 800fa96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa9a:	2201      	movgt	r2, #1
 800fa9c:	40da      	lsrle	r2, r3
 800fa9e:	2300      	movs	r3, #0
 800faa0:	4619      	mov	r1, r3
 800faa2:	4610      	mov	r0, r2
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	7ff00000 	.word	0x7ff00000

0800faac <__b2d>:
 800faac:	6902      	ldr	r2, [r0, #16]
 800faae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab0:	f100 0614 	add.w	r6, r0, #20
 800fab4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800fab8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800fabc:	4f1e      	ldr	r7, [pc, #120]	@ (800fb38 <__b2d+0x8c>)
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7ff fd5a 	bl	800f578 <__hi0bits>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f1c0 0020 	rsb	r0, r0, #32
 800faca:	2b0a      	cmp	r3, #10
 800facc:	f1a2 0504 	sub.w	r5, r2, #4
 800fad0:	6008      	str	r0, [r1, #0]
 800fad2:	dc12      	bgt.n	800fafa <__b2d+0x4e>
 800fad4:	42ae      	cmp	r6, r5
 800fad6:	bf2c      	ite	cs
 800fad8:	2200      	movcs	r2, #0
 800fada:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800fade:	f1c3 0c0b 	rsb	ip, r3, #11
 800fae2:	3315      	adds	r3, #21
 800fae4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800fae8:	fa04 f303 	lsl.w	r3, r4, r3
 800faec:	fa22 f20c 	lsr.w	r2, r2, ip
 800faf0:	ea4e 0107 	orr.w	r1, lr, r7
 800faf4:	431a      	orrs	r2, r3
 800faf6:	4610      	mov	r0, r2
 800faf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fafa:	42ae      	cmp	r6, r5
 800fafc:	bf36      	itet	cc
 800fafe:	f1a2 0508 	subcc.w	r5, r2, #8
 800fb02:	2200      	movcs	r2, #0
 800fb04:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800fb08:	3b0b      	subs	r3, #11
 800fb0a:	d012      	beq.n	800fb32 <__b2d+0x86>
 800fb0c:	f1c3 0720 	rsb	r7, r3, #32
 800fb10:	fa22 f107 	lsr.w	r1, r2, r7
 800fb14:	409c      	lsls	r4, r3
 800fb16:	430c      	orrs	r4, r1
 800fb18:	42b5      	cmp	r5, r6
 800fb1a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800fb1e:	bf94      	ite	ls
 800fb20:	2400      	movls	r4, #0
 800fb22:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800fb26:	409a      	lsls	r2, r3
 800fb28:	40fc      	lsrs	r4, r7
 800fb2a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fb2e:	4322      	orrs	r2, r4
 800fb30:	e7e1      	b.n	800faf6 <__b2d+0x4a>
 800fb32:	ea44 0107 	orr.w	r1, r4, r7
 800fb36:	e7de      	b.n	800faf6 <__b2d+0x4a>
 800fb38:	3ff00000 	.word	0x3ff00000

0800fb3c <__d2b>:
 800fb3c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800fb40:	2101      	movs	r1, #1
 800fb42:	4690      	mov	r8, r2
 800fb44:	4699      	mov	r9, r3
 800fb46:	9e08      	ldr	r6, [sp, #32]
 800fb48:	f7ff fc24 	bl	800f394 <_Balloc>
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	b930      	cbnz	r0, 800fb5e <__d2b+0x22>
 800fb50:	4602      	mov	r2, r0
 800fb52:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb56:	4b23      	ldr	r3, [pc, #140]	@ (800fbe4 <__d2b+0xa8>)
 800fb58:	4823      	ldr	r0, [pc, #140]	@ (800fbe8 <__d2b+0xac>)
 800fb5a:	f001 fd01 	bl	8011560 <__assert_func>
 800fb5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb66:	b10d      	cbz	r5, 800fb6c <__d2b+0x30>
 800fb68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb6c:	9301      	str	r3, [sp, #4]
 800fb6e:	f1b8 0300 	subs.w	r3, r8, #0
 800fb72:	d024      	beq.n	800fbbe <__d2b+0x82>
 800fb74:	4668      	mov	r0, sp
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	f7ff fd1d 	bl	800f5b6 <__lo0bits>
 800fb7c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb80:	b1d8      	cbz	r0, 800fbba <__d2b+0x7e>
 800fb82:	f1c0 0320 	rsb	r3, r0, #32
 800fb86:	fa02 f303 	lsl.w	r3, r2, r3
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	40c2      	lsrs	r2, r0
 800fb8e:	6163      	str	r3, [r4, #20]
 800fb90:	9201      	str	r2, [sp, #4]
 800fb92:	9b01      	ldr	r3, [sp, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	bf0c      	ite	eq
 800fb98:	2201      	moveq	r2, #1
 800fb9a:	2202      	movne	r2, #2
 800fb9c:	61a3      	str	r3, [r4, #24]
 800fb9e:	6122      	str	r2, [r4, #16]
 800fba0:	b1ad      	cbz	r5, 800fbce <__d2b+0x92>
 800fba2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fba6:	4405      	add	r5, r0
 800fba8:	6035      	str	r5, [r6, #0]
 800fbaa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb0:	6018      	str	r0, [r3, #0]
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	b002      	add	sp, #8
 800fbb6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800fbba:	6161      	str	r1, [r4, #20]
 800fbbc:	e7e9      	b.n	800fb92 <__d2b+0x56>
 800fbbe:	a801      	add	r0, sp, #4
 800fbc0:	f7ff fcf9 	bl	800f5b6 <__lo0bits>
 800fbc4:	9b01      	ldr	r3, [sp, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	6163      	str	r3, [r4, #20]
 800fbca:	3020      	adds	r0, #32
 800fbcc:	e7e7      	b.n	800fb9e <__d2b+0x62>
 800fbce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fbd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbd6:	6030      	str	r0, [r6, #0]
 800fbd8:	6918      	ldr	r0, [r3, #16]
 800fbda:	f7ff fccd 	bl	800f578 <__hi0bits>
 800fbde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbe2:	e7e4      	b.n	800fbae <__d2b+0x72>
 800fbe4:	08012b51 	.word	0x08012b51
 800fbe8:	08012b62 	.word	0x08012b62

0800fbec <__ratio>:
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	b085      	sub	sp, #20
 800fbf2:	e9cd 1000 	strd	r1, r0, [sp]
 800fbf6:	a902      	add	r1, sp, #8
 800fbf8:	f7ff ff58 	bl	800faac <__b2d>
 800fbfc:	468b      	mov	fp, r1
 800fbfe:	4606      	mov	r6, r0
 800fc00:	460f      	mov	r7, r1
 800fc02:	9800      	ldr	r0, [sp, #0]
 800fc04:	a903      	add	r1, sp, #12
 800fc06:	f7ff ff51 	bl	800faac <__b2d>
 800fc0a:	460d      	mov	r5, r1
 800fc0c:	9b01      	ldr	r3, [sp, #4]
 800fc0e:	4689      	mov	r9, r1
 800fc10:	6919      	ldr	r1, [r3, #16]
 800fc12:	9b00      	ldr	r3, [sp, #0]
 800fc14:	4604      	mov	r4, r0
 800fc16:	691b      	ldr	r3, [r3, #16]
 800fc18:	4630      	mov	r0, r6
 800fc1a:	1ac9      	subs	r1, r1, r3
 800fc1c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fc20:	1a9b      	subs	r3, r3, r2
 800fc22:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	bfcd      	iteet	gt
 800fc2a:	463a      	movgt	r2, r7
 800fc2c:	462a      	movle	r2, r5
 800fc2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc32:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800fc36:	bfd8      	it	le
 800fc38:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fc3c:	464b      	mov	r3, r9
 800fc3e:	4622      	mov	r2, r4
 800fc40:	4659      	mov	r1, fp
 800fc42:	f7f0 fd73 	bl	800072c <__aeabi_ddiv>
 800fc46:	b005      	add	sp, #20
 800fc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc4c <__copybits>:
 800fc4c:	3901      	subs	r1, #1
 800fc4e:	b570      	push	{r4, r5, r6, lr}
 800fc50:	1149      	asrs	r1, r1, #5
 800fc52:	6914      	ldr	r4, [r2, #16]
 800fc54:	3101      	adds	r1, #1
 800fc56:	f102 0314 	add.w	r3, r2, #20
 800fc5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc62:	1f05      	subs	r5, r0, #4
 800fc64:	42a3      	cmp	r3, r4
 800fc66:	d30c      	bcc.n	800fc82 <__copybits+0x36>
 800fc68:	1aa3      	subs	r3, r4, r2
 800fc6a:	3b11      	subs	r3, #17
 800fc6c:	f023 0303 	bic.w	r3, r3, #3
 800fc70:	3211      	adds	r2, #17
 800fc72:	42a2      	cmp	r2, r4
 800fc74:	bf88      	it	hi
 800fc76:	2300      	movhi	r3, #0
 800fc78:	4418      	add	r0, r3
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	4288      	cmp	r0, r1
 800fc7e:	d305      	bcc.n	800fc8c <__copybits+0x40>
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc86:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc8a:	e7eb      	b.n	800fc64 <__copybits+0x18>
 800fc8c:	f840 3b04 	str.w	r3, [r0], #4
 800fc90:	e7f4      	b.n	800fc7c <__copybits+0x30>

0800fc92 <__any_on>:
 800fc92:	f100 0214 	add.w	r2, r0, #20
 800fc96:	6900      	ldr	r0, [r0, #16]
 800fc98:	114b      	asrs	r3, r1, #5
 800fc9a:	4298      	cmp	r0, r3
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	db11      	blt.n	800fcc4 <__any_on+0x32>
 800fca0:	dd0a      	ble.n	800fcb8 <__any_on+0x26>
 800fca2:	f011 011f 	ands.w	r1, r1, #31
 800fca6:	d007      	beq.n	800fcb8 <__any_on+0x26>
 800fca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fcac:	fa24 f001 	lsr.w	r0, r4, r1
 800fcb0:	fa00 f101 	lsl.w	r1, r0, r1
 800fcb4:	428c      	cmp	r4, r1
 800fcb6:	d10b      	bne.n	800fcd0 <__any_on+0x3e>
 800fcb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d803      	bhi.n	800fcc8 <__any_on+0x36>
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	bd10      	pop	{r4, pc}
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	e7f7      	b.n	800fcb8 <__any_on+0x26>
 800fcc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fccc:	2900      	cmp	r1, #0
 800fcce:	d0f5      	beq.n	800fcbc <__any_on+0x2a>
 800fcd0:	2001      	movs	r0, #1
 800fcd2:	e7f6      	b.n	800fcc2 <__any_on+0x30>

0800fcd4 <sulp>:
 800fcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd8:	460f      	mov	r7, r1
 800fcda:	4690      	mov	r8, r2
 800fcdc:	f7ff fec6 	bl	800fa6c <__ulp>
 800fce0:	4604      	mov	r4, r0
 800fce2:	460d      	mov	r5, r1
 800fce4:	f1b8 0f00 	cmp.w	r8, #0
 800fce8:	d011      	beq.n	800fd0e <sulp+0x3a>
 800fcea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fcee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	dd0b      	ble.n	800fd0e <sulp+0x3a>
 800fcf6:	2400      	movs	r4, #0
 800fcf8:	051b      	lsls	r3, r3, #20
 800fcfa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fcfe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fd02:	4622      	mov	r2, r4
 800fd04:	462b      	mov	r3, r5
 800fd06:	f7f0 fbe7 	bl	80004d8 <__aeabi_dmul>
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	460d      	mov	r5, r1
 800fd0e:	4620      	mov	r0, r4
 800fd10:	4629      	mov	r1, r5
 800fd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800fd18 <_strtod_l>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	b09f      	sub	sp, #124	@ 0x7c
 800fd1e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fd20:	2200      	movs	r2, #0
 800fd22:	460c      	mov	r4, r1
 800fd24:	921a      	str	r2, [sp, #104]	@ 0x68
 800fd26:	f04f 0a00 	mov.w	sl, #0
 800fd2a:	f04f 0b00 	mov.w	fp, #0
 800fd2e:	460a      	mov	r2, r1
 800fd30:	9005      	str	r0, [sp, #20]
 800fd32:	9219      	str	r2, [sp, #100]	@ 0x64
 800fd34:	7811      	ldrb	r1, [r2, #0]
 800fd36:	292b      	cmp	r1, #43	@ 0x2b
 800fd38:	d048      	beq.n	800fdcc <_strtod_l+0xb4>
 800fd3a:	d836      	bhi.n	800fdaa <_strtod_l+0x92>
 800fd3c:	290d      	cmp	r1, #13
 800fd3e:	d830      	bhi.n	800fda2 <_strtod_l+0x8a>
 800fd40:	2908      	cmp	r1, #8
 800fd42:	d830      	bhi.n	800fda6 <_strtod_l+0x8e>
 800fd44:	2900      	cmp	r1, #0
 800fd46:	d039      	beq.n	800fdbc <_strtod_l+0xa4>
 800fd48:	2200      	movs	r2, #0
 800fd4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fd4e:	782a      	ldrb	r2, [r5, #0]
 800fd50:	2a30      	cmp	r2, #48	@ 0x30
 800fd52:	f040 80b0 	bne.w	800feb6 <_strtod_l+0x19e>
 800fd56:	786a      	ldrb	r2, [r5, #1]
 800fd58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fd5c:	2a58      	cmp	r2, #88	@ 0x58
 800fd5e:	d16c      	bne.n	800fe3a <_strtod_l+0x122>
 800fd60:	9302      	str	r3, [sp, #8]
 800fd62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd64:	4a8f      	ldr	r2, [pc, #572]	@ (800ffa4 <_strtod_l+0x28c>)
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	9805      	ldr	r0, [sp, #20]
 800fd6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd70:	a919      	add	r1, sp, #100	@ 0x64
 800fd72:	f001 fc8f 	bl	8011694 <__gethex>
 800fd76:	f010 060f 	ands.w	r6, r0, #15
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	d005      	beq.n	800fd8a <_strtod_l+0x72>
 800fd7e:	2e06      	cmp	r6, #6
 800fd80:	d126      	bne.n	800fdd0 <_strtod_l+0xb8>
 800fd82:	2300      	movs	r3, #0
 800fd84:	3501      	adds	r5, #1
 800fd86:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd88:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f040 8582 	bne.w	8010896 <_strtod_l+0xb7e>
 800fd92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd94:	b1bb      	cbz	r3, 800fdc6 <_strtod_l+0xae>
 800fd96:	4650      	mov	r0, sl
 800fd98:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800fd9c:	b01f      	add	sp, #124	@ 0x7c
 800fd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda2:	2920      	cmp	r1, #32
 800fda4:	d1d0      	bne.n	800fd48 <_strtod_l+0x30>
 800fda6:	3201      	adds	r2, #1
 800fda8:	e7c3      	b.n	800fd32 <_strtod_l+0x1a>
 800fdaa:	292d      	cmp	r1, #45	@ 0x2d
 800fdac:	d1cc      	bne.n	800fd48 <_strtod_l+0x30>
 800fdae:	2101      	movs	r1, #1
 800fdb0:	910e      	str	r1, [sp, #56]	@ 0x38
 800fdb2:	1c51      	adds	r1, r2, #1
 800fdb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800fdb6:	7852      	ldrb	r2, [r2, #1]
 800fdb8:	2a00      	cmp	r2, #0
 800fdba:	d1c7      	bne.n	800fd4c <_strtod_l+0x34>
 800fdbc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fdbe:	9419      	str	r4, [sp, #100]	@ 0x64
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f040 8566 	bne.w	8010892 <_strtod_l+0xb7a>
 800fdc6:	4650      	mov	r0, sl
 800fdc8:	4659      	mov	r1, fp
 800fdca:	e7e7      	b.n	800fd9c <_strtod_l+0x84>
 800fdcc:	2100      	movs	r1, #0
 800fdce:	e7ef      	b.n	800fdb0 <_strtod_l+0x98>
 800fdd0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fdd2:	b13a      	cbz	r2, 800fde4 <_strtod_l+0xcc>
 800fdd4:	2135      	movs	r1, #53	@ 0x35
 800fdd6:	a81c      	add	r0, sp, #112	@ 0x70
 800fdd8:	f7ff ff38 	bl	800fc4c <__copybits>
 800fddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fdde:	9805      	ldr	r0, [sp, #20]
 800fde0:	f7ff fb18 	bl	800f414 <_Bfree>
 800fde4:	3e01      	subs	r6, #1
 800fde6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fde8:	2e04      	cmp	r6, #4
 800fdea:	d806      	bhi.n	800fdfa <_strtod_l+0xe2>
 800fdec:	e8df f006 	tbb	[pc, r6]
 800fdf0:	201d0314 	.word	0x201d0314
 800fdf4:	14          	.byte	0x14
 800fdf5:	00          	.byte	0x00
 800fdf6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fdfa:	05e1      	lsls	r1, r4, #23
 800fdfc:	bf48      	it	mi
 800fdfe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fe02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe06:	0d1b      	lsrs	r3, r3, #20
 800fe08:	051b      	lsls	r3, r3, #20
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1bd      	bne.n	800fd8a <_strtod_l+0x72>
 800fe0e:	f7fe fb27 	bl	800e460 <__errno>
 800fe12:	2322      	movs	r3, #34	@ 0x22
 800fe14:	6003      	str	r3, [r0, #0]
 800fe16:	e7b8      	b.n	800fd8a <_strtod_l+0x72>
 800fe18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fe1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fe20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fe24:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fe28:	e7e7      	b.n	800fdfa <_strtod_l+0xe2>
 800fe2a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ffa8 <_strtod_l+0x290>
 800fe2e:	e7e4      	b.n	800fdfa <_strtod_l+0xe2>
 800fe30:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fe34:	f04f 3aff 	mov.w	sl, #4294967295
 800fe38:	e7df      	b.n	800fdfa <_strtod_l+0xe2>
 800fe3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe3c:	1c5a      	adds	r2, r3, #1
 800fe3e:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe40:	785b      	ldrb	r3, [r3, #1]
 800fe42:	2b30      	cmp	r3, #48	@ 0x30
 800fe44:	d0f9      	beq.n	800fe3a <_strtod_l+0x122>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d09f      	beq.n	800fd8a <_strtod_l+0x72>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	2700      	movs	r7, #0
 800fe4e:	220a      	movs	r2, #10
 800fe50:	46b9      	mov	r9, r7
 800fe52:	9308      	str	r3, [sp, #32]
 800fe54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe56:	970b      	str	r7, [sp, #44]	@ 0x2c
 800fe58:	930c      	str	r3, [sp, #48]	@ 0x30
 800fe5a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fe5c:	7805      	ldrb	r5, [r0, #0]
 800fe5e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fe62:	b2d9      	uxtb	r1, r3
 800fe64:	2909      	cmp	r1, #9
 800fe66:	d928      	bls.n	800feba <_strtod_l+0x1a2>
 800fe68:	2201      	movs	r2, #1
 800fe6a:	4950      	ldr	r1, [pc, #320]	@ (800ffac <_strtod_l+0x294>)
 800fe6c:	f7fe fa9c 	bl	800e3a8 <strncmp>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d032      	beq.n	800feda <_strtod_l+0x1c2>
 800fe74:	2000      	movs	r0, #0
 800fe76:	462a      	mov	r2, r5
 800fe78:	4603      	mov	r3, r0
 800fe7a:	464d      	mov	r5, r9
 800fe7c:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe7e:	2a65      	cmp	r2, #101	@ 0x65
 800fe80:	d001      	beq.n	800fe86 <_strtod_l+0x16e>
 800fe82:	2a45      	cmp	r2, #69	@ 0x45
 800fe84:	d114      	bne.n	800feb0 <_strtod_l+0x198>
 800fe86:	b91d      	cbnz	r5, 800fe90 <_strtod_l+0x178>
 800fe88:	9a08      	ldr	r2, [sp, #32]
 800fe8a:	4302      	orrs	r2, r0
 800fe8c:	d096      	beq.n	800fdbc <_strtod_l+0xa4>
 800fe8e:	2500      	movs	r5, #0
 800fe90:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe92:	1c62      	adds	r2, r4, #1
 800fe94:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe96:	7862      	ldrb	r2, [r4, #1]
 800fe98:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe9a:	d07a      	beq.n	800ff92 <_strtod_l+0x27a>
 800fe9c:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe9e:	d07e      	beq.n	800ff9e <_strtod_l+0x286>
 800fea0:	f04f 0c00 	mov.w	ip, #0
 800fea4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fea8:	2909      	cmp	r1, #9
 800feaa:	f240 8085 	bls.w	800ffb8 <_strtod_l+0x2a0>
 800feae:	9419      	str	r4, [sp, #100]	@ 0x64
 800feb0:	f04f 0800 	mov.w	r8, #0
 800feb4:	e0a5      	b.n	8010002 <_strtod_l+0x2ea>
 800feb6:	2300      	movs	r3, #0
 800feb8:	e7c8      	b.n	800fe4c <_strtod_l+0x134>
 800feba:	f1b9 0f08 	cmp.w	r9, #8
 800febe:	bfd8      	it	le
 800fec0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800fec2:	f100 0001 	add.w	r0, r0, #1
 800fec6:	bfd6      	itet	le
 800fec8:	fb02 3301 	mlale	r3, r2, r1, r3
 800fecc:	fb02 3707 	mlagt	r7, r2, r7, r3
 800fed0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800fed2:	f109 0901 	add.w	r9, r9, #1
 800fed6:	9019      	str	r0, [sp, #100]	@ 0x64
 800fed8:	e7bf      	b.n	800fe5a <_strtod_l+0x142>
 800feda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fedc:	1c5a      	adds	r2, r3, #1
 800fede:	9219      	str	r2, [sp, #100]	@ 0x64
 800fee0:	785a      	ldrb	r2, [r3, #1]
 800fee2:	f1b9 0f00 	cmp.w	r9, #0
 800fee6:	d03b      	beq.n	800ff60 <_strtod_l+0x248>
 800fee8:	464d      	mov	r5, r9
 800feea:	900a      	str	r0, [sp, #40]	@ 0x28
 800feec:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fef0:	2b09      	cmp	r3, #9
 800fef2:	d912      	bls.n	800ff1a <_strtod_l+0x202>
 800fef4:	2301      	movs	r3, #1
 800fef6:	e7c2      	b.n	800fe7e <_strtod_l+0x166>
 800fef8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fefa:	3001      	adds	r0, #1
 800fefc:	1c5a      	adds	r2, r3, #1
 800fefe:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff00:	785a      	ldrb	r2, [r3, #1]
 800ff02:	2a30      	cmp	r2, #48	@ 0x30
 800ff04:	d0f8      	beq.n	800fef8 <_strtod_l+0x1e0>
 800ff06:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ff0a:	2b08      	cmp	r3, #8
 800ff0c:	f200 84c8 	bhi.w	80108a0 <_strtod_l+0xb88>
 800ff10:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff12:	2000      	movs	r0, #0
 800ff14:	4605      	mov	r5, r0
 800ff16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff18:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff1a:	3a30      	subs	r2, #48	@ 0x30
 800ff1c:	f100 0301 	add.w	r3, r0, #1
 800ff20:	d018      	beq.n	800ff54 <_strtod_l+0x23c>
 800ff22:	462e      	mov	r6, r5
 800ff24:	f04f 0e0a 	mov.w	lr, #10
 800ff28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ff2a:	4419      	add	r1, r3
 800ff2c:	910a      	str	r1, [sp, #40]	@ 0x28
 800ff2e:	1c71      	adds	r1, r6, #1
 800ff30:	eba1 0c05 	sub.w	ip, r1, r5
 800ff34:	4563      	cmp	r3, ip
 800ff36:	dc15      	bgt.n	800ff64 <_strtod_l+0x24c>
 800ff38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ff3c:	182b      	adds	r3, r5, r0
 800ff3e:	2b08      	cmp	r3, #8
 800ff40:	f105 0501 	add.w	r5, r5, #1
 800ff44:	4405      	add	r5, r0
 800ff46:	dc1a      	bgt.n	800ff7e <_strtod_l+0x266>
 800ff48:	230a      	movs	r3, #10
 800ff4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff4c:	fb03 2301 	mla	r3, r3, r1, r2
 800ff50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff52:	2300      	movs	r3, #0
 800ff54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff56:	4618      	mov	r0, r3
 800ff58:	1c51      	adds	r1, r2, #1
 800ff5a:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff5c:	7852      	ldrb	r2, [r2, #1]
 800ff5e:	e7c5      	b.n	800feec <_strtod_l+0x1d4>
 800ff60:	4648      	mov	r0, r9
 800ff62:	e7ce      	b.n	800ff02 <_strtod_l+0x1ea>
 800ff64:	2e08      	cmp	r6, #8
 800ff66:	dc05      	bgt.n	800ff74 <_strtod_l+0x25c>
 800ff68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ff6a:	fb0e f606 	mul.w	r6, lr, r6
 800ff6e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ff70:	460e      	mov	r6, r1
 800ff72:	e7dc      	b.n	800ff2e <_strtod_l+0x216>
 800ff74:	2910      	cmp	r1, #16
 800ff76:	bfd8      	it	le
 800ff78:	fb0e f707 	mulle.w	r7, lr, r7
 800ff7c:	e7f8      	b.n	800ff70 <_strtod_l+0x258>
 800ff7e:	2b0f      	cmp	r3, #15
 800ff80:	bfdc      	itt	le
 800ff82:	230a      	movle	r3, #10
 800ff84:	fb03 2707 	mlale	r7, r3, r7, r2
 800ff88:	e7e3      	b.n	800ff52 <_strtod_l+0x23a>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e77a      	b.n	800fe88 <_strtod_l+0x170>
 800ff92:	f04f 0c00 	mov.w	ip, #0
 800ff96:	1ca2      	adds	r2, r4, #2
 800ff98:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff9a:	78a2      	ldrb	r2, [r4, #2]
 800ff9c:	e782      	b.n	800fea4 <_strtod_l+0x18c>
 800ff9e:	f04f 0c01 	mov.w	ip, #1
 800ffa2:	e7f8      	b.n	800ff96 <_strtod_l+0x27e>
 800ffa4:	08012da4 	.word	0x08012da4
 800ffa8:	7ff00000 	.word	0x7ff00000
 800ffac:	08012bbb 	.word	0x08012bbb
 800ffb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ffb2:	1c51      	adds	r1, r2, #1
 800ffb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ffb6:	7852      	ldrb	r2, [r2, #1]
 800ffb8:	2a30      	cmp	r2, #48	@ 0x30
 800ffba:	d0f9      	beq.n	800ffb0 <_strtod_l+0x298>
 800ffbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ffc0:	2908      	cmp	r1, #8
 800ffc2:	f63f af75 	bhi.w	800feb0 <_strtod_l+0x198>
 800ffc6:	f04f 080a 	mov.w	r8, #10
 800ffca:	3a30      	subs	r2, #48	@ 0x30
 800ffcc:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ffd0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ffd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ffd4:	1c56      	adds	r6, r2, #1
 800ffd6:	9619      	str	r6, [sp, #100]	@ 0x64
 800ffd8:	7852      	ldrb	r2, [r2, #1]
 800ffda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ffde:	f1be 0f09 	cmp.w	lr, #9
 800ffe2:	d939      	bls.n	8010058 <_strtod_l+0x340>
 800ffe4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ffe6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ffea:	1a76      	subs	r6, r6, r1
 800ffec:	2e08      	cmp	r6, #8
 800ffee:	dc03      	bgt.n	800fff8 <_strtod_l+0x2e0>
 800fff0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fff2:	4588      	cmp	r8, r1
 800fff4:	bfa8      	it	ge
 800fff6:	4688      	movge	r8, r1
 800fff8:	f1bc 0f00 	cmp.w	ip, #0
 800fffc:	d001      	beq.n	8010002 <_strtod_l+0x2ea>
 800fffe:	f1c8 0800 	rsb	r8, r8, #0
 8010002:	2d00      	cmp	r5, #0
 8010004:	d14e      	bne.n	80100a4 <_strtod_l+0x38c>
 8010006:	9908      	ldr	r1, [sp, #32]
 8010008:	4308      	orrs	r0, r1
 801000a:	f47f aebe 	bne.w	800fd8a <_strtod_l+0x72>
 801000e:	2b00      	cmp	r3, #0
 8010010:	f47f aed4 	bne.w	800fdbc <_strtod_l+0xa4>
 8010014:	2a69      	cmp	r2, #105	@ 0x69
 8010016:	d028      	beq.n	801006a <_strtod_l+0x352>
 8010018:	dc25      	bgt.n	8010066 <_strtod_l+0x34e>
 801001a:	2a49      	cmp	r2, #73	@ 0x49
 801001c:	d025      	beq.n	801006a <_strtod_l+0x352>
 801001e:	2a4e      	cmp	r2, #78	@ 0x4e
 8010020:	f47f aecc 	bne.w	800fdbc <_strtod_l+0xa4>
 8010024:	4999      	ldr	r1, [pc, #612]	@ (801028c <_strtod_l+0x574>)
 8010026:	a819      	add	r0, sp, #100	@ 0x64
 8010028:	f001 fd56 	bl	8011ad8 <__match>
 801002c:	2800      	cmp	r0, #0
 801002e:	f43f aec5 	beq.w	800fdbc <_strtod_l+0xa4>
 8010032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	2b28      	cmp	r3, #40	@ 0x28
 8010038:	d12e      	bne.n	8010098 <_strtod_l+0x380>
 801003a:	4995      	ldr	r1, [pc, #596]	@ (8010290 <_strtod_l+0x578>)
 801003c:	aa1c      	add	r2, sp, #112	@ 0x70
 801003e:	a819      	add	r0, sp, #100	@ 0x64
 8010040:	f001 fd5e 	bl	8011b00 <__hexnan>
 8010044:	2805      	cmp	r0, #5
 8010046:	d127      	bne.n	8010098 <_strtod_l+0x380>
 8010048:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801004a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801004e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010052:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010056:	e698      	b.n	800fd8a <_strtod_l+0x72>
 8010058:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801005a:	fb08 2101 	mla	r1, r8, r1, r2
 801005e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010062:	9209      	str	r2, [sp, #36]	@ 0x24
 8010064:	e7b5      	b.n	800ffd2 <_strtod_l+0x2ba>
 8010066:	2a6e      	cmp	r2, #110	@ 0x6e
 8010068:	e7da      	b.n	8010020 <_strtod_l+0x308>
 801006a:	498a      	ldr	r1, [pc, #552]	@ (8010294 <_strtod_l+0x57c>)
 801006c:	a819      	add	r0, sp, #100	@ 0x64
 801006e:	f001 fd33 	bl	8011ad8 <__match>
 8010072:	2800      	cmp	r0, #0
 8010074:	f43f aea2 	beq.w	800fdbc <_strtod_l+0xa4>
 8010078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801007a:	4987      	ldr	r1, [pc, #540]	@ (8010298 <_strtod_l+0x580>)
 801007c:	3b01      	subs	r3, #1
 801007e:	a819      	add	r0, sp, #100	@ 0x64
 8010080:	9319      	str	r3, [sp, #100]	@ 0x64
 8010082:	f001 fd29 	bl	8011ad8 <__match>
 8010086:	b910      	cbnz	r0, 801008e <_strtod_l+0x376>
 8010088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801008a:	3301      	adds	r3, #1
 801008c:	9319      	str	r3, [sp, #100]	@ 0x64
 801008e:	f04f 0a00 	mov.w	sl, #0
 8010092:	f8df b208 	ldr.w	fp, [pc, #520]	@ 801029c <_strtod_l+0x584>
 8010096:	e678      	b.n	800fd8a <_strtod_l+0x72>
 8010098:	4881      	ldr	r0, [pc, #516]	@ (80102a0 <_strtod_l+0x588>)
 801009a:	f001 fa5b 	bl	8011554 <nan>
 801009e:	4682      	mov	sl, r0
 80100a0:	468b      	mov	fp, r1
 80100a2:	e672      	b.n	800fd8a <_strtod_l+0x72>
 80100a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100a6:	f1b9 0f00 	cmp.w	r9, #0
 80100aa:	bf08      	it	eq
 80100ac:	46a9      	moveq	r9, r5
 80100ae:	eba8 0303 	sub.w	r3, r8, r3
 80100b2:	2d10      	cmp	r5, #16
 80100b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80100b6:	462c      	mov	r4, r5
 80100b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80100ba:	bfa8      	it	ge
 80100bc:	2410      	movge	r4, #16
 80100be:	f7f0 f991 	bl	80003e4 <__aeabi_ui2d>
 80100c2:	2d09      	cmp	r5, #9
 80100c4:	4682      	mov	sl, r0
 80100c6:	468b      	mov	fp, r1
 80100c8:	dc11      	bgt.n	80100ee <_strtod_l+0x3d6>
 80100ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f43f ae5c 	beq.w	800fd8a <_strtod_l+0x72>
 80100d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100d4:	dd76      	ble.n	80101c4 <_strtod_l+0x4ac>
 80100d6:	2b16      	cmp	r3, #22
 80100d8:	dc5d      	bgt.n	8010196 <_strtod_l+0x47e>
 80100da:	4972      	ldr	r1, [pc, #456]	@ (80102a4 <_strtod_l+0x58c>)
 80100dc:	4652      	mov	r2, sl
 80100de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100e2:	465b      	mov	r3, fp
 80100e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100e8:	f7f0 f9f6 	bl	80004d8 <__aeabi_dmul>
 80100ec:	e7d7      	b.n	801009e <_strtod_l+0x386>
 80100ee:	4b6d      	ldr	r3, [pc, #436]	@ (80102a4 <_strtod_l+0x58c>)
 80100f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80100f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80100f8:	f7f0 f9ee 	bl	80004d8 <__aeabi_dmul>
 80100fc:	4682      	mov	sl, r0
 80100fe:	4638      	mov	r0, r7
 8010100:	468b      	mov	fp, r1
 8010102:	f7f0 f96f 	bl	80003e4 <__aeabi_ui2d>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4650      	mov	r0, sl
 801010c:	4659      	mov	r1, fp
 801010e:	f7f0 f82d 	bl	800016c <__adddf3>
 8010112:	2d0f      	cmp	r5, #15
 8010114:	4682      	mov	sl, r0
 8010116:	468b      	mov	fp, r1
 8010118:	ddd7      	ble.n	80100ca <_strtod_l+0x3b2>
 801011a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801011c:	1b2c      	subs	r4, r5, r4
 801011e:	441c      	add	r4, r3
 8010120:	2c00      	cmp	r4, #0
 8010122:	f340 8093 	ble.w	801024c <_strtod_l+0x534>
 8010126:	f014 030f 	ands.w	r3, r4, #15
 801012a:	d00a      	beq.n	8010142 <_strtod_l+0x42a>
 801012c:	495d      	ldr	r1, [pc, #372]	@ (80102a4 <_strtod_l+0x58c>)
 801012e:	4652      	mov	r2, sl
 8010130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010138:	465b      	mov	r3, fp
 801013a:	f7f0 f9cd 	bl	80004d8 <__aeabi_dmul>
 801013e:	4682      	mov	sl, r0
 8010140:	468b      	mov	fp, r1
 8010142:	f034 040f 	bics.w	r4, r4, #15
 8010146:	d073      	beq.n	8010230 <_strtod_l+0x518>
 8010148:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801014c:	dd49      	ble.n	80101e2 <_strtod_l+0x4ca>
 801014e:	2400      	movs	r4, #0
 8010150:	46a0      	mov	r8, r4
 8010152:	46a1      	mov	r9, r4
 8010154:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010156:	2322      	movs	r3, #34	@ 0x22
 8010158:	f04f 0a00 	mov.w	sl, #0
 801015c:	9a05      	ldr	r2, [sp, #20]
 801015e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 801029c <_strtod_l+0x584>
 8010162:	6013      	str	r3, [r2, #0]
 8010164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010166:	2b00      	cmp	r3, #0
 8010168:	f43f ae0f 	beq.w	800fd8a <_strtod_l+0x72>
 801016c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801016e:	9805      	ldr	r0, [sp, #20]
 8010170:	f7ff f950 	bl	800f414 <_Bfree>
 8010174:	4649      	mov	r1, r9
 8010176:	9805      	ldr	r0, [sp, #20]
 8010178:	f7ff f94c 	bl	800f414 <_Bfree>
 801017c:	4641      	mov	r1, r8
 801017e:	9805      	ldr	r0, [sp, #20]
 8010180:	f7ff f948 	bl	800f414 <_Bfree>
 8010184:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010186:	9805      	ldr	r0, [sp, #20]
 8010188:	f7ff f944 	bl	800f414 <_Bfree>
 801018c:	4621      	mov	r1, r4
 801018e:	9805      	ldr	r0, [sp, #20]
 8010190:	f7ff f940 	bl	800f414 <_Bfree>
 8010194:	e5f9      	b.n	800fd8a <_strtod_l+0x72>
 8010196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010198:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801019c:	4293      	cmp	r3, r2
 801019e:	dbbc      	blt.n	801011a <_strtod_l+0x402>
 80101a0:	4c40      	ldr	r4, [pc, #256]	@ (80102a4 <_strtod_l+0x58c>)
 80101a2:	f1c5 050f 	rsb	r5, r5, #15
 80101a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80101aa:	4652      	mov	r2, sl
 80101ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101b0:	465b      	mov	r3, fp
 80101b2:	f7f0 f991 	bl	80004d8 <__aeabi_dmul>
 80101b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101b8:	1b5d      	subs	r5, r3, r5
 80101ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80101be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80101c2:	e791      	b.n	80100e8 <_strtod_l+0x3d0>
 80101c4:	3316      	adds	r3, #22
 80101c6:	dba8      	blt.n	801011a <_strtod_l+0x402>
 80101c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101ca:	4650      	mov	r0, sl
 80101cc:	eba3 0808 	sub.w	r8, r3, r8
 80101d0:	4b34      	ldr	r3, [pc, #208]	@ (80102a4 <_strtod_l+0x58c>)
 80101d2:	4659      	mov	r1, fp
 80101d4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80101d8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80101dc:	f7f0 faa6 	bl	800072c <__aeabi_ddiv>
 80101e0:	e75d      	b.n	801009e <_strtod_l+0x386>
 80101e2:	2300      	movs	r3, #0
 80101e4:	4650      	mov	r0, sl
 80101e6:	4659      	mov	r1, fp
 80101e8:	461e      	mov	r6, r3
 80101ea:	4f2f      	ldr	r7, [pc, #188]	@ (80102a8 <_strtod_l+0x590>)
 80101ec:	1124      	asrs	r4, r4, #4
 80101ee:	2c01      	cmp	r4, #1
 80101f0:	dc21      	bgt.n	8010236 <_strtod_l+0x51e>
 80101f2:	b10b      	cbz	r3, 80101f8 <_strtod_l+0x4e0>
 80101f4:	4682      	mov	sl, r0
 80101f6:	468b      	mov	fp, r1
 80101f8:	492b      	ldr	r1, [pc, #172]	@ (80102a8 <_strtod_l+0x590>)
 80101fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80101fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010202:	4652      	mov	r2, sl
 8010204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010208:	465b      	mov	r3, fp
 801020a:	f7f0 f965 	bl	80004d8 <__aeabi_dmul>
 801020e:	4b23      	ldr	r3, [pc, #140]	@ (801029c <_strtod_l+0x584>)
 8010210:	460a      	mov	r2, r1
 8010212:	400b      	ands	r3, r1
 8010214:	4925      	ldr	r1, [pc, #148]	@ (80102ac <_strtod_l+0x594>)
 8010216:	4682      	mov	sl, r0
 8010218:	428b      	cmp	r3, r1
 801021a:	d898      	bhi.n	801014e <_strtod_l+0x436>
 801021c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010220:	428b      	cmp	r3, r1
 8010222:	bf86      	itte	hi
 8010224:	f04f 3aff 	movhi.w	sl, #4294967295
 8010228:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80102b0 <_strtod_l+0x598>
 801022c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010230:	2300      	movs	r3, #0
 8010232:	9308      	str	r3, [sp, #32]
 8010234:	e076      	b.n	8010324 <_strtod_l+0x60c>
 8010236:	07e2      	lsls	r2, r4, #31
 8010238:	d504      	bpl.n	8010244 <_strtod_l+0x52c>
 801023a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801023e:	f7f0 f94b 	bl	80004d8 <__aeabi_dmul>
 8010242:	2301      	movs	r3, #1
 8010244:	3601      	adds	r6, #1
 8010246:	1064      	asrs	r4, r4, #1
 8010248:	3708      	adds	r7, #8
 801024a:	e7d0      	b.n	80101ee <_strtod_l+0x4d6>
 801024c:	d0f0      	beq.n	8010230 <_strtod_l+0x518>
 801024e:	4264      	negs	r4, r4
 8010250:	f014 020f 	ands.w	r2, r4, #15
 8010254:	d00a      	beq.n	801026c <_strtod_l+0x554>
 8010256:	4b13      	ldr	r3, [pc, #76]	@ (80102a4 <_strtod_l+0x58c>)
 8010258:	4650      	mov	r0, sl
 801025a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801025e:	4659      	mov	r1, fp
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	f7f0 fa62 	bl	800072c <__aeabi_ddiv>
 8010268:	4682      	mov	sl, r0
 801026a:	468b      	mov	fp, r1
 801026c:	1124      	asrs	r4, r4, #4
 801026e:	d0df      	beq.n	8010230 <_strtod_l+0x518>
 8010270:	2c1f      	cmp	r4, #31
 8010272:	dd1f      	ble.n	80102b4 <_strtod_l+0x59c>
 8010274:	2400      	movs	r4, #0
 8010276:	46a0      	mov	r8, r4
 8010278:	46a1      	mov	r9, r4
 801027a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801027c:	2322      	movs	r3, #34	@ 0x22
 801027e:	9a05      	ldr	r2, [sp, #20]
 8010280:	f04f 0a00 	mov.w	sl, #0
 8010284:	f04f 0b00 	mov.w	fp, #0
 8010288:	6013      	str	r3, [r2, #0]
 801028a:	e76b      	b.n	8010164 <_strtod_l+0x44c>
 801028c:	08012aab 	.word	0x08012aab
 8010290:	08012d90 	.word	0x08012d90
 8010294:	08012aa3 	.word	0x08012aa3
 8010298:	08012ad8 	.word	0x08012ad8
 801029c:	7ff00000 	.word	0x7ff00000
 80102a0:	08012c2c 	.word	0x08012c2c
 80102a4:	08012cc8 	.word	0x08012cc8
 80102a8:	08012ca0 	.word	0x08012ca0
 80102ac:	7ca00000 	.word	0x7ca00000
 80102b0:	7fefffff 	.word	0x7fefffff
 80102b4:	f014 0310 	ands.w	r3, r4, #16
 80102b8:	bf18      	it	ne
 80102ba:	236a      	movne	r3, #106	@ 0x6a
 80102bc:	4650      	mov	r0, sl
 80102be:	9308      	str	r3, [sp, #32]
 80102c0:	4659      	mov	r1, fp
 80102c2:	2300      	movs	r3, #0
 80102c4:	4e77      	ldr	r6, [pc, #476]	@ (80104a4 <_strtod_l+0x78c>)
 80102c6:	07e7      	lsls	r7, r4, #31
 80102c8:	d504      	bpl.n	80102d4 <_strtod_l+0x5bc>
 80102ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102ce:	f7f0 f903 	bl	80004d8 <__aeabi_dmul>
 80102d2:	2301      	movs	r3, #1
 80102d4:	1064      	asrs	r4, r4, #1
 80102d6:	f106 0608 	add.w	r6, r6, #8
 80102da:	d1f4      	bne.n	80102c6 <_strtod_l+0x5ae>
 80102dc:	b10b      	cbz	r3, 80102e2 <_strtod_l+0x5ca>
 80102de:	4682      	mov	sl, r0
 80102e0:	468b      	mov	fp, r1
 80102e2:	9b08      	ldr	r3, [sp, #32]
 80102e4:	b1b3      	cbz	r3, 8010314 <_strtod_l+0x5fc>
 80102e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80102ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	4659      	mov	r1, fp
 80102f2:	dd0f      	ble.n	8010314 <_strtod_l+0x5fc>
 80102f4:	2b1f      	cmp	r3, #31
 80102f6:	dd58      	ble.n	80103aa <_strtod_l+0x692>
 80102f8:	2b34      	cmp	r3, #52	@ 0x34
 80102fa:	bfd8      	it	le
 80102fc:	f04f 33ff 	movle.w	r3, #4294967295
 8010300:	f04f 0a00 	mov.w	sl, #0
 8010304:	bfcf      	iteee	gt
 8010306:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801030a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801030e:	4093      	lslle	r3, r2
 8010310:	ea03 0b01 	andle.w	fp, r3, r1
 8010314:	2200      	movs	r2, #0
 8010316:	2300      	movs	r3, #0
 8010318:	4650      	mov	r0, sl
 801031a:	4659      	mov	r1, fp
 801031c:	f7f0 fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8010320:	2800      	cmp	r0, #0
 8010322:	d1a7      	bne.n	8010274 <_strtod_l+0x55c>
 8010324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010326:	464a      	mov	r2, r9
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801032c:	462b      	mov	r3, r5
 801032e:	9805      	ldr	r0, [sp, #20]
 8010330:	f7ff f8d8 	bl	800f4e4 <__s2b>
 8010334:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010336:	2800      	cmp	r0, #0
 8010338:	f43f af09 	beq.w	801014e <_strtod_l+0x436>
 801033c:	2400      	movs	r4, #0
 801033e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010342:	2a00      	cmp	r2, #0
 8010344:	eba3 0308 	sub.w	r3, r3, r8
 8010348:	bfa8      	it	ge
 801034a:	2300      	movge	r3, #0
 801034c:	46a0      	mov	r8, r4
 801034e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010350:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010354:	9316      	str	r3, [sp, #88]	@ 0x58
 8010356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010358:	9805      	ldr	r0, [sp, #20]
 801035a:	6859      	ldr	r1, [r3, #4]
 801035c:	f7ff f81a 	bl	800f394 <_Balloc>
 8010360:	4681      	mov	r9, r0
 8010362:	2800      	cmp	r0, #0
 8010364:	f43f aef7 	beq.w	8010156 <_strtod_l+0x43e>
 8010368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801036a:	300c      	adds	r0, #12
 801036c:	691a      	ldr	r2, [r3, #16]
 801036e:	f103 010c 	add.w	r1, r3, #12
 8010372:	3202      	adds	r2, #2
 8010374:	0092      	lsls	r2, r2, #2
 8010376:	f001 f8df 	bl	8011538 <memcpy>
 801037a:	ab1c      	add	r3, sp, #112	@ 0x70
 801037c:	9301      	str	r3, [sp, #4]
 801037e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	4652      	mov	r2, sl
 8010384:	465b      	mov	r3, fp
 8010386:	9805      	ldr	r0, [sp, #20]
 8010388:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801038c:	f7ff fbd6 	bl	800fb3c <__d2b>
 8010390:	901a      	str	r0, [sp, #104]	@ 0x68
 8010392:	2800      	cmp	r0, #0
 8010394:	f43f aedf 	beq.w	8010156 <_strtod_l+0x43e>
 8010398:	2101      	movs	r1, #1
 801039a:	9805      	ldr	r0, [sp, #20]
 801039c:	f7ff f938 	bl	800f610 <__i2b>
 80103a0:	4680      	mov	r8, r0
 80103a2:	b948      	cbnz	r0, 80103b8 <_strtod_l+0x6a0>
 80103a4:	f04f 0800 	mov.w	r8, #0
 80103a8:	e6d5      	b.n	8010156 <_strtod_l+0x43e>
 80103aa:	f04f 32ff 	mov.w	r2, #4294967295
 80103ae:	fa02 f303 	lsl.w	r3, r2, r3
 80103b2:	ea03 0a0a 	and.w	sl, r3, sl
 80103b6:	e7ad      	b.n	8010314 <_strtod_l+0x5fc>
 80103b8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80103ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80103bc:	2d00      	cmp	r5, #0
 80103be:	bfab      	itete	ge
 80103c0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80103c2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80103c4:	18ef      	addge	r7, r5, r3
 80103c6:	1b5e      	sublt	r6, r3, r5
 80103c8:	9b08      	ldr	r3, [sp, #32]
 80103ca:	bfa8      	it	ge
 80103cc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80103ce:	eba5 0503 	sub.w	r5, r5, r3
 80103d2:	4415      	add	r5, r2
 80103d4:	4b34      	ldr	r3, [pc, #208]	@ (80104a8 <_strtod_l+0x790>)
 80103d6:	f105 35ff 	add.w	r5, r5, #4294967295
 80103da:	bfb8      	it	lt
 80103dc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80103de:	429d      	cmp	r5, r3
 80103e0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80103e4:	da50      	bge.n	8010488 <_strtod_l+0x770>
 80103e6:	1b5b      	subs	r3, r3, r5
 80103e8:	2b1f      	cmp	r3, #31
 80103ea:	f04f 0101 	mov.w	r1, #1
 80103ee:	eba2 0203 	sub.w	r2, r2, r3
 80103f2:	dc3d      	bgt.n	8010470 <_strtod_l+0x758>
 80103f4:	fa01 f303 	lsl.w	r3, r1, r3
 80103f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80103fa:	2300      	movs	r3, #0
 80103fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80103fe:	18bd      	adds	r5, r7, r2
 8010400:	9b08      	ldr	r3, [sp, #32]
 8010402:	42af      	cmp	r7, r5
 8010404:	4416      	add	r6, r2
 8010406:	441e      	add	r6, r3
 8010408:	463b      	mov	r3, r7
 801040a:	bfa8      	it	ge
 801040c:	462b      	movge	r3, r5
 801040e:	42b3      	cmp	r3, r6
 8010410:	bfa8      	it	ge
 8010412:	4633      	movge	r3, r6
 8010414:	2b00      	cmp	r3, #0
 8010416:	bfc2      	ittt	gt
 8010418:	1aed      	subgt	r5, r5, r3
 801041a:	1af6      	subgt	r6, r6, r3
 801041c:	1aff      	subgt	r7, r7, r3
 801041e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010420:	2b00      	cmp	r3, #0
 8010422:	dd16      	ble.n	8010452 <_strtod_l+0x73a>
 8010424:	4641      	mov	r1, r8
 8010426:	461a      	mov	r2, r3
 8010428:	9805      	ldr	r0, [sp, #20]
 801042a:	f7ff f9a9 	bl	800f780 <__pow5mult>
 801042e:	4680      	mov	r8, r0
 8010430:	2800      	cmp	r0, #0
 8010432:	d0b7      	beq.n	80103a4 <_strtod_l+0x68c>
 8010434:	4601      	mov	r1, r0
 8010436:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010438:	9805      	ldr	r0, [sp, #20]
 801043a:	f7ff f8ff 	bl	800f63c <__multiply>
 801043e:	900a      	str	r0, [sp, #40]	@ 0x28
 8010440:	2800      	cmp	r0, #0
 8010442:	f43f ae88 	beq.w	8010156 <_strtod_l+0x43e>
 8010446:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010448:	9805      	ldr	r0, [sp, #20]
 801044a:	f7fe ffe3 	bl	800f414 <_Bfree>
 801044e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010450:	931a      	str	r3, [sp, #104]	@ 0x68
 8010452:	2d00      	cmp	r5, #0
 8010454:	dc1d      	bgt.n	8010492 <_strtod_l+0x77a>
 8010456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010458:	2b00      	cmp	r3, #0
 801045a:	dd27      	ble.n	80104ac <_strtod_l+0x794>
 801045c:	4649      	mov	r1, r9
 801045e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010460:	9805      	ldr	r0, [sp, #20]
 8010462:	f7ff f98d 	bl	800f780 <__pow5mult>
 8010466:	4681      	mov	r9, r0
 8010468:	bb00      	cbnz	r0, 80104ac <_strtod_l+0x794>
 801046a:	f04f 0900 	mov.w	r9, #0
 801046e:	e672      	b.n	8010156 <_strtod_l+0x43e>
 8010470:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010474:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010478:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801047c:	35e2      	adds	r5, #226	@ 0xe2
 801047e:	fa01 f305 	lsl.w	r3, r1, r5
 8010482:	9310      	str	r3, [sp, #64]	@ 0x40
 8010484:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010486:	e7ba      	b.n	80103fe <_strtod_l+0x6e6>
 8010488:	2300      	movs	r3, #0
 801048a:	9310      	str	r3, [sp, #64]	@ 0x40
 801048c:	2301      	movs	r3, #1
 801048e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010490:	e7b5      	b.n	80103fe <_strtod_l+0x6e6>
 8010492:	462a      	mov	r2, r5
 8010494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010496:	9805      	ldr	r0, [sp, #20]
 8010498:	f7ff f9cc 	bl	800f834 <__lshift>
 801049c:	901a      	str	r0, [sp, #104]	@ 0x68
 801049e:	2800      	cmp	r0, #0
 80104a0:	d1d9      	bne.n	8010456 <_strtod_l+0x73e>
 80104a2:	e658      	b.n	8010156 <_strtod_l+0x43e>
 80104a4:	08012db8 	.word	0x08012db8
 80104a8:	fffffc02 	.word	0xfffffc02
 80104ac:	2e00      	cmp	r6, #0
 80104ae:	dd07      	ble.n	80104c0 <_strtod_l+0x7a8>
 80104b0:	4649      	mov	r1, r9
 80104b2:	4632      	mov	r2, r6
 80104b4:	9805      	ldr	r0, [sp, #20]
 80104b6:	f7ff f9bd 	bl	800f834 <__lshift>
 80104ba:	4681      	mov	r9, r0
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0d4      	beq.n	801046a <_strtod_l+0x752>
 80104c0:	2f00      	cmp	r7, #0
 80104c2:	dd08      	ble.n	80104d6 <_strtod_l+0x7be>
 80104c4:	4641      	mov	r1, r8
 80104c6:	463a      	mov	r2, r7
 80104c8:	9805      	ldr	r0, [sp, #20]
 80104ca:	f7ff f9b3 	bl	800f834 <__lshift>
 80104ce:	4680      	mov	r8, r0
 80104d0:	2800      	cmp	r0, #0
 80104d2:	f43f ae40 	beq.w	8010156 <_strtod_l+0x43e>
 80104d6:	464a      	mov	r2, r9
 80104d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80104da:	9805      	ldr	r0, [sp, #20]
 80104dc:	f7ff fa32 	bl	800f944 <__mdiff>
 80104e0:	4604      	mov	r4, r0
 80104e2:	2800      	cmp	r0, #0
 80104e4:	f43f ae37 	beq.w	8010156 <_strtod_l+0x43e>
 80104e8:	68c3      	ldr	r3, [r0, #12]
 80104ea:	4641      	mov	r1, r8
 80104ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104ee:	2300      	movs	r3, #0
 80104f0:	60c3      	str	r3, [r0, #12]
 80104f2:	f7ff fa0b 	bl	800f90c <__mcmp>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	da3d      	bge.n	8010576 <_strtod_l+0x85e>
 80104fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104fc:	ea53 030a 	orrs.w	r3, r3, sl
 8010500:	d163      	bne.n	80105ca <_strtod_l+0x8b2>
 8010502:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010506:	2b00      	cmp	r3, #0
 8010508:	d15f      	bne.n	80105ca <_strtod_l+0x8b2>
 801050a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801050e:	0d1b      	lsrs	r3, r3, #20
 8010510:	051b      	lsls	r3, r3, #20
 8010512:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010516:	d958      	bls.n	80105ca <_strtod_l+0x8b2>
 8010518:	6963      	ldr	r3, [r4, #20]
 801051a:	b913      	cbnz	r3, 8010522 <_strtod_l+0x80a>
 801051c:	6923      	ldr	r3, [r4, #16]
 801051e:	2b01      	cmp	r3, #1
 8010520:	dd53      	ble.n	80105ca <_strtod_l+0x8b2>
 8010522:	4621      	mov	r1, r4
 8010524:	2201      	movs	r2, #1
 8010526:	9805      	ldr	r0, [sp, #20]
 8010528:	f7ff f984 	bl	800f834 <__lshift>
 801052c:	4641      	mov	r1, r8
 801052e:	4604      	mov	r4, r0
 8010530:	f7ff f9ec 	bl	800f90c <__mcmp>
 8010534:	2800      	cmp	r0, #0
 8010536:	dd48      	ble.n	80105ca <_strtod_l+0x8b2>
 8010538:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801053c:	9a08      	ldr	r2, [sp, #32]
 801053e:	0d1b      	lsrs	r3, r3, #20
 8010540:	051b      	lsls	r3, r3, #20
 8010542:	2a00      	cmp	r2, #0
 8010544:	d062      	beq.n	801060c <_strtod_l+0x8f4>
 8010546:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801054a:	d85f      	bhi.n	801060c <_strtod_l+0x8f4>
 801054c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010550:	f67f ae94 	bls.w	801027c <_strtod_l+0x564>
 8010554:	4650      	mov	r0, sl
 8010556:	4659      	mov	r1, fp
 8010558:	4ba3      	ldr	r3, [pc, #652]	@ (80107e8 <_strtod_l+0xad0>)
 801055a:	2200      	movs	r2, #0
 801055c:	f7ef ffbc 	bl	80004d8 <__aeabi_dmul>
 8010560:	4ba2      	ldr	r3, [pc, #648]	@ (80107ec <_strtod_l+0xad4>)
 8010562:	4682      	mov	sl, r0
 8010564:	400b      	ands	r3, r1
 8010566:	468b      	mov	fp, r1
 8010568:	2b00      	cmp	r3, #0
 801056a:	f47f adff 	bne.w	801016c <_strtod_l+0x454>
 801056e:	2322      	movs	r3, #34	@ 0x22
 8010570:	9a05      	ldr	r2, [sp, #20]
 8010572:	6013      	str	r3, [r2, #0]
 8010574:	e5fa      	b.n	801016c <_strtod_l+0x454>
 8010576:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801057a:	d165      	bne.n	8010648 <_strtod_l+0x930>
 801057c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801057e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010582:	b35a      	cbz	r2, 80105dc <_strtod_l+0x8c4>
 8010584:	4a9a      	ldr	r2, [pc, #616]	@ (80107f0 <_strtod_l+0xad8>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d12b      	bne.n	80105e2 <_strtod_l+0x8ca>
 801058a:	9b08      	ldr	r3, [sp, #32]
 801058c:	4651      	mov	r1, sl
 801058e:	b303      	cbz	r3, 80105d2 <_strtod_l+0x8ba>
 8010590:	465a      	mov	r2, fp
 8010592:	4b96      	ldr	r3, [pc, #600]	@ (80107ec <_strtod_l+0xad4>)
 8010594:	4013      	ands	r3, r2
 8010596:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801059a:	f04f 32ff 	mov.w	r2, #4294967295
 801059e:	d81b      	bhi.n	80105d8 <_strtod_l+0x8c0>
 80105a0:	0d1b      	lsrs	r3, r3, #20
 80105a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80105a6:	fa02 f303 	lsl.w	r3, r2, r3
 80105aa:	4299      	cmp	r1, r3
 80105ac:	d119      	bne.n	80105e2 <_strtod_l+0x8ca>
 80105ae:	4b91      	ldr	r3, [pc, #580]	@ (80107f4 <_strtod_l+0xadc>)
 80105b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d102      	bne.n	80105bc <_strtod_l+0x8a4>
 80105b6:	3101      	adds	r1, #1
 80105b8:	f43f adcd 	beq.w	8010156 <_strtod_l+0x43e>
 80105bc:	f04f 0a00 	mov.w	sl, #0
 80105c0:	4b8a      	ldr	r3, [pc, #552]	@ (80107ec <_strtod_l+0xad4>)
 80105c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105c4:	401a      	ands	r2, r3
 80105c6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80105ca:	9b08      	ldr	r3, [sp, #32]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1c1      	bne.n	8010554 <_strtod_l+0x83c>
 80105d0:	e5cc      	b.n	801016c <_strtod_l+0x454>
 80105d2:	f04f 33ff 	mov.w	r3, #4294967295
 80105d6:	e7e8      	b.n	80105aa <_strtod_l+0x892>
 80105d8:	4613      	mov	r3, r2
 80105da:	e7e6      	b.n	80105aa <_strtod_l+0x892>
 80105dc:	ea53 030a 	orrs.w	r3, r3, sl
 80105e0:	d0aa      	beq.n	8010538 <_strtod_l+0x820>
 80105e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105e4:	b1db      	cbz	r3, 801061e <_strtod_l+0x906>
 80105e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105e8:	4213      	tst	r3, r2
 80105ea:	d0ee      	beq.n	80105ca <_strtod_l+0x8b2>
 80105ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105ee:	4650      	mov	r0, sl
 80105f0:	4659      	mov	r1, fp
 80105f2:	9a08      	ldr	r2, [sp, #32]
 80105f4:	b1bb      	cbz	r3, 8010626 <_strtod_l+0x90e>
 80105f6:	f7ff fb6d 	bl	800fcd4 <sulp>
 80105fa:	4602      	mov	r2, r0
 80105fc:	460b      	mov	r3, r1
 80105fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010602:	f7ef fdb3 	bl	800016c <__adddf3>
 8010606:	4682      	mov	sl, r0
 8010608:	468b      	mov	fp, r1
 801060a:	e7de      	b.n	80105ca <_strtod_l+0x8b2>
 801060c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010610:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010614:	f04f 3aff 	mov.w	sl, #4294967295
 8010618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801061c:	e7d5      	b.n	80105ca <_strtod_l+0x8b2>
 801061e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010620:	ea13 0f0a 	tst.w	r3, sl
 8010624:	e7e1      	b.n	80105ea <_strtod_l+0x8d2>
 8010626:	f7ff fb55 	bl	800fcd4 <sulp>
 801062a:	4602      	mov	r2, r0
 801062c:	460b      	mov	r3, r1
 801062e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010632:	f7ef fd99 	bl	8000168 <__aeabi_dsub>
 8010636:	2200      	movs	r2, #0
 8010638:	2300      	movs	r3, #0
 801063a:	4682      	mov	sl, r0
 801063c:	468b      	mov	fp, r1
 801063e:	f7f0 f9b3 	bl	80009a8 <__aeabi_dcmpeq>
 8010642:	2800      	cmp	r0, #0
 8010644:	d0c1      	beq.n	80105ca <_strtod_l+0x8b2>
 8010646:	e619      	b.n	801027c <_strtod_l+0x564>
 8010648:	4641      	mov	r1, r8
 801064a:	4620      	mov	r0, r4
 801064c:	f7ff face 	bl	800fbec <__ratio>
 8010650:	2200      	movs	r2, #0
 8010652:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010656:	4606      	mov	r6, r0
 8010658:	460f      	mov	r7, r1
 801065a:	f7f0 f9b9 	bl	80009d0 <__aeabi_dcmple>
 801065e:	2800      	cmp	r0, #0
 8010660:	d06d      	beq.n	801073e <_strtod_l+0xa26>
 8010662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010664:	2b00      	cmp	r3, #0
 8010666:	d178      	bne.n	801075a <_strtod_l+0xa42>
 8010668:	f1ba 0f00 	cmp.w	sl, #0
 801066c:	d156      	bne.n	801071c <_strtod_l+0xa04>
 801066e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010674:	2b00      	cmp	r3, #0
 8010676:	d158      	bne.n	801072a <_strtod_l+0xa12>
 8010678:	2200      	movs	r2, #0
 801067a:	4630      	mov	r0, r6
 801067c:	4639      	mov	r1, r7
 801067e:	4b5e      	ldr	r3, [pc, #376]	@ (80107f8 <_strtod_l+0xae0>)
 8010680:	f7f0 f99c 	bl	80009bc <__aeabi_dcmplt>
 8010684:	2800      	cmp	r0, #0
 8010686:	d157      	bne.n	8010738 <_strtod_l+0xa20>
 8010688:	4630      	mov	r0, r6
 801068a:	4639      	mov	r1, r7
 801068c:	2200      	movs	r2, #0
 801068e:	4b5b      	ldr	r3, [pc, #364]	@ (80107fc <_strtod_l+0xae4>)
 8010690:	f7ef ff22 	bl	80004d8 <__aeabi_dmul>
 8010694:	4606      	mov	r6, r0
 8010696:	460f      	mov	r7, r1
 8010698:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801069c:	9606      	str	r6, [sp, #24]
 801069e:	9307      	str	r3, [sp, #28]
 80106a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80106a4:	4d51      	ldr	r5, [pc, #324]	@ (80107ec <_strtod_l+0xad4>)
 80106a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80106aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106ac:	401d      	ands	r5, r3
 80106ae:	4b54      	ldr	r3, [pc, #336]	@ (8010800 <_strtod_l+0xae8>)
 80106b0:	429d      	cmp	r5, r3
 80106b2:	f040 80ab 	bne.w	801080c <_strtod_l+0xaf4>
 80106b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106b8:	4650      	mov	r0, sl
 80106ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80106be:	4659      	mov	r1, fp
 80106c0:	f7ff f9d4 	bl	800fa6c <__ulp>
 80106c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80106c8:	f7ef ff06 	bl	80004d8 <__aeabi_dmul>
 80106cc:	4652      	mov	r2, sl
 80106ce:	465b      	mov	r3, fp
 80106d0:	f7ef fd4c 	bl	800016c <__adddf3>
 80106d4:	460b      	mov	r3, r1
 80106d6:	4945      	ldr	r1, [pc, #276]	@ (80107ec <_strtod_l+0xad4>)
 80106d8:	4a4a      	ldr	r2, [pc, #296]	@ (8010804 <_strtod_l+0xaec>)
 80106da:	4019      	ands	r1, r3
 80106dc:	4291      	cmp	r1, r2
 80106de:	4682      	mov	sl, r0
 80106e0:	d942      	bls.n	8010768 <_strtod_l+0xa50>
 80106e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80106e4:	4b43      	ldr	r3, [pc, #268]	@ (80107f4 <_strtod_l+0xadc>)
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d103      	bne.n	80106f2 <_strtod_l+0x9da>
 80106ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106ec:	3301      	adds	r3, #1
 80106ee:	f43f ad32 	beq.w	8010156 <_strtod_l+0x43e>
 80106f2:	f04f 3aff 	mov.w	sl, #4294967295
 80106f6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80107f4 <_strtod_l+0xadc>
 80106fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106fc:	9805      	ldr	r0, [sp, #20]
 80106fe:	f7fe fe89 	bl	800f414 <_Bfree>
 8010702:	4649      	mov	r1, r9
 8010704:	9805      	ldr	r0, [sp, #20]
 8010706:	f7fe fe85 	bl	800f414 <_Bfree>
 801070a:	4641      	mov	r1, r8
 801070c:	9805      	ldr	r0, [sp, #20]
 801070e:	f7fe fe81 	bl	800f414 <_Bfree>
 8010712:	4621      	mov	r1, r4
 8010714:	9805      	ldr	r0, [sp, #20]
 8010716:	f7fe fe7d 	bl	800f414 <_Bfree>
 801071a:	e61c      	b.n	8010356 <_strtod_l+0x63e>
 801071c:	f1ba 0f01 	cmp.w	sl, #1
 8010720:	d103      	bne.n	801072a <_strtod_l+0xa12>
 8010722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010724:	2b00      	cmp	r3, #0
 8010726:	f43f ada9 	beq.w	801027c <_strtod_l+0x564>
 801072a:	2200      	movs	r2, #0
 801072c:	4b36      	ldr	r3, [pc, #216]	@ (8010808 <_strtod_l+0xaf0>)
 801072e:	2600      	movs	r6, #0
 8010730:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010734:	4f30      	ldr	r7, [pc, #192]	@ (80107f8 <_strtod_l+0xae0>)
 8010736:	e7b3      	b.n	80106a0 <_strtod_l+0x988>
 8010738:	2600      	movs	r6, #0
 801073a:	4f30      	ldr	r7, [pc, #192]	@ (80107fc <_strtod_l+0xae4>)
 801073c:	e7ac      	b.n	8010698 <_strtod_l+0x980>
 801073e:	4630      	mov	r0, r6
 8010740:	4639      	mov	r1, r7
 8010742:	4b2e      	ldr	r3, [pc, #184]	@ (80107fc <_strtod_l+0xae4>)
 8010744:	2200      	movs	r2, #0
 8010746:	f7ef fec7 	bl	80004d8 <__aeabi_dmul>
 801074a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801074c:	4606      	mov	r6, r0
 801074e:	460f      	mov	r7, r1
 8010750:	2b00      	cmp	r3, #0
 8010752:	d0a1      	beq.n	8010698 <_strtod_l+0x980>
 8010754:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010758:	e7a2      	b.n	80106a0 <_strtod_l+0x988>
 801075a:	2200      	movs	r2, #0
 801075c:	4b26      	ldr	r3, [pc, #152]	@ (80107f8 <_strtod_l+0xae0>)
 801075e:	4616      	mov	r6, r2
 8010760:	461f      	mov	r7, r3
 8010762:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010766:	e79b      	b.n	80106a0 <_strtod_l+0x988>
 8010768:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801076c:	9b08      	ldr	r3, [sp, #32]
 801076e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1c1      	bne.n	80106fa <_strtod_l+0x9e2>
 8010776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801077a:	0d1b      	lsrs	r3, r3, #20
 801077c:	051b      	lsls	r3, r3, #20
 801077e:	429d      	cmp	r5, r3
 8010780:	d1bb      	bne.n	80106fa <_strtod_l+0x9e2>
 8010782:	4630      	mov	r0, r6
 8010784:	4639      	mov	r1, r7
 8010786:	f7f0 fcc3 	bl	8001110 <__aeabi_d2lz>
 801078a:	f7ef fe77 	bl	800047c <__aeabi_l2d>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	4630      	mov	r0, r6
 8010794:	4639      	mov	r1, r7
 8010796:	f7ef fce7 	bl	8000168 <__aeabi_dsub>
 801079a:	460b      	mov	r3, r1
 801079c:	4602      	mov	r2, r0
 801079e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80107a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80107a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107a8:	ea46 060a 	orr.w	r6, r6, sl
 80107ac:	431e      	orrs	r6, r3
 80107ae:	d06a      	beq.n	8010886 <_strtod_l+0xb6e>
 80107b0:	a309      	add	r3, pc, #36	@ (adr r3, 80107d8 <_strtod_l+0xac0>)
 80107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b6:	f7f0 f901 	bl	80009bc <__aeabi_dcmplt>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	f47f acd6 	bne.w	801016c <_strtod_l+0x454>
 80107c0:	a307      	add	r3, pc, #28	@ (adr r3, 80107e0 <_strtod_l+0xac8>)
 80107c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107ca:	f7f0 f915 	bl	80009f8 <__aeabi_dcmpgt>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d093      	beq.n	80106fa <_strtod_l+0x9e2>
 80107d2:	e4cb      	b.n	801016c <_strtod_l+0x454>
 80107d4:	f3af 8000 	nop.w
 80107d8:	94a03595 	.word	0x94a03595
 80107dc:	3fdfffff 	.word	0x3fdfffff
 80107e0:	35afe535 	.word	0x35afe535
 80107e4:	3fe00000 	.word	0x3fe00000
 80107e8:	39500000 	.word	0x39500000
 80107ec:	7ff00000 	.word	0x7ff00000
 80107f0:	000fffff 	.word	0x000fffff
 80107f4:	7fefffff 	.word	0x7fefffff
 80107f8:	3ff00000 	.word	0x3ff00000
 80107fc:	3fe00000 	.word	0x3fe00000
 8010800:	7fe00000 	.word	0x7fe00000
 8010804:	7c9fffff 	.word	0x7c9fffff
 8010808:	bff00000 	.word	0xbff00000
 801080c:	9b08      	ldr	r3, [sp, #32]
 801080e:	b323      	cbz	r3, 801085a <_strtod_l+0xb42>
 8010810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010814:	d821      	bhi.n	801085a <_strtod_l+0xb42>
 8010816:	a328      	add	r3, pc, #160	@ (adr r3, 80108b8 <_strtod_l+0xba0>)
 8010818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081c:	4630      	mov	r0, r6
 801081e:	4639      	mov	r1, r7
 8010820:	f7f0 f8d6 	bl	80009d0 <__aeabi_dcmple>
 8010824:	b1a0      	cbz	r0, 8010850 <_strtod_l+0xb38>
 8010826:	4639      	mov	r1, r7
 8010828:	4630      	mov	r0, r6
 801082a:	f7f0 f92d 	bl	8000a88 <__aeabi_d2uiz>
 801082e:	2801      	cmp	r0, #1
 8010830:	bf38      	it	cc
 8010832:	2001      	movcc	r0, #1
 8010834:	f7ef fdd6 	bl	80003e4 <__aeabi_ui2d>
 8010838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801083a:	4606      	mov	r6, r0
 801083c:	460f      	mov	r7, r1
 801083e:	b9fb      	cbnz	r3, 8010880 <_strtod_l+0xb68>
 8010840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010844:	9014      	str	r0, [sp, #80]	@ 0x50
 8010846:	9315      	str	r3, [sp, #84]	@ 0x54
 8010848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801084c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010856:	1b5b      	subs	r3, r3, r5
 8010858:	9311      	str	r3, [sp, #68]	@ 0x44
 801085a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801085e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010862:	f7ff f903 	bl	800fa6c <__ulp>
 8010866:	4602      	mov	r2, r0
 8010868:	460b      	mov	r3, r1
 801086a:	4650      	mov	r0, sl
 801086c:	4659      	mov	r1, fp
 801086e:	f7ef fe33 	bl	80004d8 <__aeabi_dmul>
 8010872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010876:	f7ef fc79 	bl	800016c <__adddf3>
 801087a:	4682      	mov	sl, r0
 801087c:	468b      	mov	fp, r1
 801087e:	e775      	b.n	801076c <_strtod_l+0xa54>
 8010880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010884:	e7e0      	b.n	8010848 <_strtod_l+0xb30>
 8010886:	a30e      	add	r3, pc, #56	@ (adr r3, 80108c0 <_strtod_l+0xba8>)
 8010888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088c:	f7f0 f896 	bl	80009bc <__aeabi_dcmplt>
 8010890:	e79d      	b.n	80107ce <_strtod_l+0xab6>
 8010892:	2300      	movs	r3, #0
 8010894:	930e      	str	r3, [sp, #56]	@ 0x38
 8010896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010898:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801089a:	6013      	str	r3, [r2, #0]
 801089c:	f7ff ba79 	b.w	800fd92 <_strtod_l+0x7a>
 80108a0:	2a65      	cmp	r2, #101	@ 0x65
 80108a2:	f43f ab72 	beq.w	800ff8a <_strtod_l+0x272>
 80108a6:	2a45      	cmp	r2, #69	@ 0x45
 80108a8:	f43f ab6f 	beq.w	800ff8a <_strtod_l+0x272>
 80108ac:	2301      	movs	r3, #1
 80108ae:	f7ff bbaa 	b.w	8010006 <_strtod_l+0x2ee>
 80108b2:	bf00      	nop
 80108b4:	f3af 8000 	nop.w
 80108b8:	ffc00000 	.word	0xffc00000
 80108bc:	41dfffff 	.word	0x41dfffff
 80108c0:	94a03595 	.word	0x94a03595
 80108c4:	3fcfffff 	.word	0x3fcfffff

080108c8 <_strtod_r>:
 80108c8:	4b01      	ldr	r3, [pc, #4]	@ (80108d0 <_strtod_r+0x8>)
 80108ca:	f7ff ba25 	b.w	800fd18 <_strtod_l>
 80108ce:	bf00      	nop
 80108d0:	200001f0 	.word	0x200001f0

080108d4 <_strtol_l.isra.0>:
 80108d4:	2b24      	cmp	r3, #36	@ 0x24
 80108d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108da:	4686      	mov	lr, r0
 80108dc:	4690      	mov	r8, r2
 80108de:	d801      	bhi.n	80108e4 <_strtol_l.isra.0+0x10>
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d106      	bne.n	80108f2 <_strtol_l.isra.0+0x1e>
 80108e4:	f7fd fdbc 	bl	800e460 <__errno>
 80108e8:	2316      	movs	r3, #22
 80108ea:	6003      	str	r3, [r0, #0]
 80108ec:	2000      	movs	r0, #0
 80108ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108f2:	460d      	mov	r5, r1
 80108f4:	4833      	ldr	r0, [pc, #204]	@ (80109c4 <_strtol_l.isra.0+0xf0>)
 80108f6:	462a      	mov	r2, r5
 80108f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108fc:	5d06      	ldrb	r6, [r0, r4]
 80108fe:	f016 0608 	ands.w	r6, r6, #8
 8010902:	d1f8      	bne.n	80108f6 <_strtol_l.isra.0+0x22>
 8010904:	2c2d      	cmp	r4, #45	@ 0x2d
 8010906:	d110      	bne.n	801092a <_strtol_l.isra.0+0x56>
 8010908:	2601      	movs	r6, #1
 801090a:	782c      	ldrb	r4, [r5, #0]
 801090c:	1c95      	adds	r5, r2, #2
 801090e:	f033 0210 	bics.w	r2, r3, #16
 8010912:	d115      	bne.n	8010940 <_strtol_l.isra.0+0x6c>
 8010914:	2c30      	cmp	r4, #48	@ 0x30
 8010916:	d10d      	bne.n	8010934 <_strtol_l.isra.0+0x60>
 8010918:	782a      	ldrb	r2, [r5, #0]
 801091a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801091e:	2a58      	cmp	r2, #88	@ 0x58
 8010920:	d108      	bne.n	8010934 <_strtol_l.isra.0+0x60>
 8010922:	786c      	ldrb	r4, [r5, #1]
 8010924:	3502      	adds	r5, #2
 8010926:	2310      	movs	r3, #16
 8010928:	e00a      	b.n	8010940 <_strtol_l.isra.0+0x6c>
 801092a:	2c2b      	cmp	r4, #43	@ 0x2b
 801092c:	bf04      	itt	eq
 801092e:	782c      	ldrbeq	r4, [r5, #0]
 8010930:	1c95      	addeq	r5, r2, #2
 8010932:	e7ec      	b.n	801090e <_strtol_l.isra.0+0x3a>
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1f6      	bne.n	8010926 <_strtol_l.isra.0+0x52>
 8010938:	2c30      	cmp	r4, #48	@ 0x30
 801093a:	bf14      	ite	ne
 801093c:	230a      	movne	r3, #10
 801093e:	2308      	moveq	r3, #8
 8010940:	2200      	movs	r2, #0
 8010942:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010946:	f10c 3cff 	add.w	ip, ip, #4294967295
 801094a:	fbbc f9f3 	udiv	r9, ip, r3
 801094e:	4610      	mov	r0, r2
 8010950:	fb03 ca19 	mls	sl, r3, r9, ip
 8010954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010958:	2f09      	cmp	r7, #9
 801095a:	d80f      	bhi.n	801097c <_strtol_l.isra.0+0xa8>
 801095c:	463c      	mov	r4, r7
 801095e:	42a3      	cmp	r3, r4
 8010960:	dd1b      	ble.n	801099a <_strtol_l.isra.0+0xc6>
 8010962:	1c57      	adds	r7, r2, #1
 8010964:	d007      	beq.n	8010976 <_strtol_l.isra.0+0xa2>
 8010966:	4581      	cmp	r9, r0
 8010968:	d314      	bcc.n	8010994 <_strtol_l.isra.0+0xc0>
 801096a:	d101      	bne.n	8010970 <_strtol_l.isra.0+0x9c>
 801096c:	45a2      	cmp	sl, r4
 801096e:	db11      	blt.n	8010994 <_strtol_l.isra.0+0xc0>
 8010970:	2201      	movs	r2, #1
 8010972:	fb00 4003 	mla	r0, r0, r3, r4
 8010976:	f815 4b01 	ldrb.w	r4, [r5], #1
 801097a:	e7eb      	b.n	8010954 <_strtol_l.isra.0+0x80>
 801097c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010980:	2f19      	cmp	r7, #25
 8010982:	d801      	bhi.n	8010988 <_strtol_l.isra.0+0xb4>
 8010984:	3c37      	subs	r4, #55	@ 0x37
 8010986:	e7ea      	b.n	801095e <_strtol_l.isra.0+0x8a>
 8010988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801098c:	2f19      	cmp	r7, #25
 801098e:	d804      	bhi.n	801099a <_strtol_l.isra.0+0xc6>
 8010990:	3c57      	subs	r4, #87	@ 0x57
 8010992:	e7e4      	b.n	801095e <_strtol_l.isra.0+0x8a>
 8010994:	f04f 32ff 	mov.w	r2, #4294967295
 8010998:	e7ed      	b.n	8010976 <_strtol_l.isra.0+0xa2>
 801099a:	1c53      	adds	r3, r2, #1
 801099c:	d108      	bne.n	80109b0 <_strtol_l.isra.0+0xdc>
 801099e:	2322      	movs	r3, #34	@ 0x22
 80109a0:	4660      	mov	r0, ip
 80109a2:	f8ce 3000 	str.w	r3, [lr]
 80109a6:	f1b8 0f00 	cmp.w	r8, #0
 80109aa:	d0a0      	beq.n	80108ee <_strtol_l.isra.0+0x1a>
 80109ac:	1e69      	subs	r1, r5, #1
 80109ae:	e006      	b.n	80109be <_strtol_l.isra.0+0xea>
 80109b0:	b106      	cbz	r6, 80109b4 <_strtol_l.isra.0+0xe0>
 80109b2:	4240      	negs	r0, r0
 80109b4:	f1b8 0f00 	cmp.w	r8, #0
 80109b8:	d099      	beq.n	80108ee <_strtol_l.isra.0+0x1a>
 80109ba:	2a00      	cmp	r2, #0
 80109bc:	d1f6      	bne.n	80109ac <_strtol_l.isra.0+0xd8>
 80109be:	f8c8 1000 	str.w	r1, [r8]
 80109c2:	e794      	b.n	80108ee <_strtol_l.isra.0+0x1a>
 80109c4:	08012de1 	.word	0x08012de1

080109c8 <_strtol_r>:
 80109c8:	f7ff bf84 	b.w	80108d4 <_strtol_l.isra.0>

080109cc <__ssputs_r>:
 80109cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d0:	461f      	mov	r7, r3
 80109d2:	688e      	ldr	r6, [r1, #8]
 80109d4:	4682      	mov	sl, r0
 80109d6:	42be      	cmp	r6, r7
 80109d8:	460c      	mov	r4, r1
 80109da:	4690      	mov	r8, r2
 80109dc:	680b      	ldr	r3, [r1, #0]
 80109de:	d82d      	bhi.n	8010a3c <__ssputs_r+0x70>
 80109e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80109e8:	d026      	beq.n	8010a38 <__ssputs_r+0x6c>
 80109ea:	6965      	ldr	r5, [r4, #20]
 80109ec:	6909      	ldr	r1, [r1, #16]
 80109ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109f2:	eba3 0901 	sub.w	r9, r3, r1
 80109f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109fa:	1c7b      	adds	r3, r7, #1
 80109fc:	444b      	add	r3, r9
 80109fe:	106d      	asrs	r5, r5, #1
 8010a00:	429d      	cmp	r5, r3
 8010a02:	bf38      	it	cc
 8010a04:	461d      	movcc	r5, r3
 8010a06:	0553      	lsls	r3, r2, #21
 8010a08:	d527      	bpl.n	8010a5a <__ssputs_r+0x8e>
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	f7fe fc36 	bl	800f27c <_malloc_r>
 8010a10:	4606      	mov	r6, r0
 8010a12:	b360      	cbz	r0, 8010a6e <__ssputs_r+0xa2>
 8010a14:	464a      	mov	r2, r9
 8010a16:	6921      	ldr	r1, [r4, #16]
 8010a18:	f000 fd8e 	bl	8011538 <memcpy>
 8010a1c:	89a3      	ldrh	r3, [r4, #12]
 8010a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a26:	81a3      	strh	r3, [r4, #12]
 8010a28:	6126      	str	r6, [r4, #16]
 8010a2a:	444e      	add	r6, r9
 8010a2c:	6026      	str	r6, [r4, #0]
 8010a2e:	463e      	mov	r6, r7
 8010a30:	6165      	str	r5, [r4, #20]
 8010a32:	eba5 0509 	sub.w	r5, r5, r9
 8010a36:	60a5      	str	r5, [r4, #8]
 8010a38:	42be      	cmp	r6, r7
 8010a3a:	d900      	bls.n	8010a3e <__ssputs_r+0x72>
 8010a3c:	463e      	mov	r6, r7
 8010a3e:	4632      	mov	r2, r6
 8010a40:	4641      	mov	r1, r8
 8010a42:	6820      	ldr	r0, [r4, #0]
 8010a44:	f000 fd4d 	bl	80114e2 <memmove>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	68a3      	ldr	r3, [r4, #8]
 8010a4c:	1b9b      	subs	r3, r3, r6
 8010a4e:	60a3      	str	r3, [r4, #8]
 8010a50:	6823      	ldr	r3, [r4, #0]
 8010a52:	4433      	add	r3, r6
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a5a:	462a      	mov	r2, r5
 8010a5c:	f001 f8fd 	bl	8011c5a <_realloc_r>
 8010a60:	4606      	mov	r6, r0
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d1e0      	bne.n	8010a28 <__ssputs_r+0x5c>
 8010a66:	4650      	mov	r0, sl
 8010a68:	6921      	ldr	r1, [r4, #16]
 8010a6a:	f7fe fb95 	bl	800f198 <_free_r>
 8010a6e:	230c      	movs	r3, #12
 8010a70:	f8ca 3000 	str.w	r3, [sl]
 8010a74:	89a3      	ldrh	r3, [r4, #12]
 8010a76:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a7e:	81a3      	strh	r3, [r4, #12]
 8010a80:	e7e9      	b.n	8010a56 <__ssputs_r+0x8a>
	...

08010a84 <_svfiprintf_r>:
 8010a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a88:	4698      	mov	r8, r3
 8010a8a:	898b      	ldrh	r3, [r1, #12]
 8010a8c:	4607      	mov	r7, r0
 8010a8e:	061b      	lsls	r3, r3, #24
 8010a90:	460d      	mov	r5, r1
 8010a92:	4614      	mov	r4, r2
 8010a94:	b09d      	sub	sp, #116	@ 0x74
 8010a96:	d510      	bpl.n	8010aba <_svfiprintf_r+0x36>
 8010a98:	690b      	ldr	r3, [r1, #16]
 8010a9a:	b973      	cbnz	r3, 8010aba <_svfiprintf_r+0x36>
 8010a9c:	2140      	movs	r1, #64	@ 0x40
 8010a9e:	f7fe fbed 	bl	800f27c <_malloc_r>
 8010aa2:	6028      	str	r0, [r5, #0]
 8010aa4:	6128      	str	r0, [r5, #16]
 8010aa6:	b930      	cbnz	r0, 8010ab6 <_svfiprintf_r+0x32>
 8010aa8:	230c      	movs	r3, #12
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	b01d      	add	sp, #116	@ 0x74
 8010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab6:	2340      	movs	r3, #64	@ 0x40
 8010ab8:	616b      	str	r3, [r5, #20]
 8010aba:	2300      	movs	r3, #0
 8010abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010abe:	2320      	movs	r3, #32
 8010ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ac4:	2330      	movs	r3, #48	@ 0x30
 8010ac6:	f04f 0901 	mov.w	r9, #1
 8010aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ace:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8010c68 <_svfiprintf_r+0x1e4>
 8010ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ad6:	4623      	mov	r3, r4
 8010ad8:	469a      	mov	sl, r3
 8010ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ade:	b10a      	cbz	r2, 8010ae4 <_svfiprintf_r+0x60>
 8010ae0:	2a25      	cmp	r2, #37	@ 0x25
 8010ae2:	d1f9      	bne.n	8010ad8 <_svfiprintf_r+0x54>
 8010ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ae8:	d00b      	beq.n	8010b02 <_svfiprintf_r+0x7e>
 8010aea:	465b      	mov	r3, fp
 8010aec:	4622      	mov	r2, r4
 8010aee:	4629      	mov	r1, r5
 8010af0:	4638      	mov	r0, r7
 8010af2:	f7ff ff6b 	bl	80109cc <__ssputs_r>
 8010af6:	3001      	adds	r0, #1
 8010af8:	f000 80a7 	beq.w	8010c4a <_svfiprintf_r+0x1c6>
 8010afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010afe:	445a      	add	r2, fp
 8010b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b02:	f89a 3000 	ldrb.w	r3, [sl]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	f000 809f 	beq.w	8010c4a <_svfiprintf_r+0x1c6>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b16:	f10a 0a01 	add.w	sl, sl, #1
 8010b1a:	9304      	str	r3, [sp, #16]
 8010b1c:	9307      	str	r3, [sp, #28]
 8010b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b24:	4654      	mov	r4, sl
 8010b26:	2205      	movs	r2, #5
 8010b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b2c:	484e      	ldr	r0, [pc, #312]	@ (8010c68 <_svfiprintf_r+0x1e4>)
 8010b2e:	f7fd fcc4 	bl	800e4ba <memchr>
 8010b32:	9a04      	ldr	r2, [sp, #16]
 8010b34:	b9d8      	cbnz	r0, 8010b6e <_svfiprintf_r+0xea>
 8010b36:	06d0      	lsls	r0, r2, #27
 8010b38:	bf44      	itt	mi
 8010b3a:	2320      	movmi	r3, #32
 8010b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b40:	0711      	lsls	r1, r2, #28
 8010b42:	bf44      	itt	mi
 8010b44:	232b      	movmi	r3, #43	@ 0x2b
 8010b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b50:	d015      	beq.n	8010b7e <_svfiprintf_r+0xfa>
 8010b52:	4654      	mov	r4, sl
 8010b54:	2000      	movs	r0, #0
 8010b56:	f04f 0c0a 	mov.w	ip, #10
 8010b5a:	9a07      	ldr	r2, [sp, #28]
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b62:	3b30      	subs	r3, #48	@ 0x30
 8010b64:	2b09      	cmp	r3, #9
 8010b66:	d94b      	bls.n	8010c00 <_svfiprintf_r+0x17c>
 8010b68:	b1b0      	cbz	r0, 8010b98 <_svfiprintf_r+0x114>
 8010b6a:	9207      	str	r2, [sp, #28]
 8010b6c:	e014      	b.n	8010b98 <_svfiprintf_r+0x114>
 8010b6e:	eba0 0308 	sub.w	r3, r0, r8
 8010b72:	fa09 f303 	lsl.w	r3, r9, r3
 8010b76:	4313      	orrs	r3, r2
 8010b78:	46a2      	mov	sl, r4
 8010b7a:	9304      	str	r3, [sp, #16]
 8010b7c:	e7d2      	b.n	8010b24 <_svfiprintf_r+0xa0>
 8010b7e:	9b03      	ldr	r3, [sp, #12]
 8010b80:	1d19      	adds	r1, r3, #4
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	9103      	str	r1, [sp, #12]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	bfbb      	ittet	lt
 8010b8a:	425b      	neglt	r3, r3
 8010b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8010b90:	9307      	strge	r3, [sp, #28]
 8010b92:	9307      	strlt	r3, [sp, #28]
 8010b94:	bfb8      	it	lt
 8010b96:	9204      	strlt	r2, [sp, #16]
 8010b98:	7823      	ldrb	r3, [r4, #0]
 8010b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b9c:	d10a      	bne.n	8010bb4 <_svfiprintf_r+0x130>
 8010b9e:	7863      	ldrb	r3, [r4, #1]
 8010ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ba2:	d132      	bne.n	8010c0a <_svfiprintf_r+0x186>
 8010ba4:	9b03      	ldr	r3, [sp, #12]
 8010ba6:	3402      	adds	r4, #2
 8010ba8:	1d1a      	adds	r2, r3, #4
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	9203      	str	r2, [sp, #12]
 8010bae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bb2:	9305      	str	r3, [sp, #20]
 8010bb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8010c6c <_svfiprintf_r+0x1e8>
 8010bb8:	2203      	movs	r2, #3
 8010bba:	4650      	mov	r0, sl
 8010bbc:	7821      	ldrb	r1, [r4, #0]
 8010bbe:	f7fd fc7c 	bl	800e4ba <memchr>
 8010bc2:	b138      	cbz	r0, 8010bd4 <_svfiprintf_r+0x150>
 8010bc4:	2240      	movs	r2, #64	@ 0x40
 8010bc6:	9b04      	ldr	r3, [sp, #16]
 8010bc8:	eba0 000a 	sub.w	r0, r0, sl
 8010bcc:	4082      	lsls	r2, r0
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	3401      	adds	r4, #1
 8010bd2:	9304      	str	r3, [sp, #16]
 8010bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bd8:	2206      	movs	r2, #6
 8010bda:	4825      	ldr	r0, [pc, #148]	@ (8010c70 <_svfiprintf_r+0x1ec>)
 8010bdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010be0:	f7fd fc6b 	bl	800e4ba <memchr>
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d036      	beq.n	8010c56 <_svfiprintf_r+0x1d2>
 8010be8:	4b22      	ldr	r3, [pc, #136]	@ (8010c74 <_svfiprintf_r+0x1f0>)
 8010bea:	bb1b      	cbnz	r3, 8010c34 <_svfiprintf_r+0x1b0>
 8010bec:	9b03      	ldr	r3, [sp, #12]
 8010bee:	3307      	adds	r3, #7
 8010bf0:	f023 0307 	bic.w	r3, r3, #7
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	9303      	str	r3, [sp, #12]
 8010bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bfa:	4433      	add	r3, r6
 8010bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bfe:	e76a      	b.n	8010ad6 <_svfiprintf_r+0x52>
 8010c00:	460c      	mov	r4, r1
 8010c02:	2001      	movs	r0, #1
 8010c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c08:	e7a8      	b.n	8010b5c <_svfiprintf_r+0xd8>
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f04f 0c0a 	mov.w	ip, #10
 8010c10:	4619      	mov	r1, r3
 8010c12:	3401      	adds	r4, #1
 8010c14:	9305      	str	r3, [sp, #20]
 8010c16:	4620      	mov	r0, r4
 8010c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c1c:	3a30      	subs	r2, #48	@ 0x30
 8010c1e:	2a09      	cmp	r2, #9
 8010c20:	d903      	bls.n	8010c2a <_svfiprintf_r+0x1a6>
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d0c6      	beq.n	8010bb4 <_svfiprintf_r+0x130>
 8010c26:	9105      	str	r1, [sp, #20]
 8010c28:	e7c4      	b.n	8010bb4 <_svfiprintf_r+0x130>
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c32:	e7f0      	b.n	8010c16 <_svfiprintf_r+0x192>
 8010c34:	ab03      	add	r3, sp, #12
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	462a      	mov	r2, r5
 8010c3a:	4638      	mov	r0, r7
 8010c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8010c78 <_svfiprintf_r+0x1f4>)
 8010c3e:	a904      	add	r1, sp, #16
 8010c40:	f7fc fc52 	bl	800d4e8 <_printf_float>
 8010c44:	1c42      	adds	r2, r0, #1
 8010c46:	4606      	mov	r6, r0
 8010c48:	d1d6      	bne.n	8010bf8 <_svfiprintf_r+0x174>
 8010c4a:	89ab      	ldrh	r3, [r5, #12]
 8010c4c:	065b      	lsls	r3, r3, #25
 8010c4e:	f53f af2d 	bmi.w	8010aac <_svfiprintf_r+0x28>
 8010c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c54:	e72c      	b.n	8010ab0 <_svfiprintf_r+0x2c>
 8010c56:	ab03      	add	r3, sp, #12
 8010c58:	9300      	str	r3, [sp, #0]
 8010c5a:	462a      	mov	r2, r5
 8010c5c:	4638      	mov	r0, r7
 8010c5e:	4b06      	ldr	r3, [pc, #24]	@ (8010c78 <_svfiprintf_r+0x1f4>)
 8010c60:	a904      	add	r1, sp, #16
 8010c62:	f7fc fedf 	bl	800da24 <_printf_i>
 8010c66:	e7ed      	b.n	8010c44 <_svfiprintf_r+0x1c0>
 8010c68:	08012bbd 	.word	0x08012bbd
 8010c6c:	08012bc3 	.word	0x08012bc3
 8010c70:	08012bc7 	.word	0x08012bc7
 8010c74:	0800d4e9 	.word	0x0800d4e9
 8010c78:	080109cd 	.word	0x080109cd

08010c7c <_sungetc_r>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	1c4b      	adds	r3, r1, #1
 8010c80:	4614      	mov	r4, r2
 8010c82:	d103      	bne.n	8010c8c <_sungetc_r+0x10>
 8010c84:	f04f 35ff 	mov.w	r5, #4294967295
 8010c88:	4628      	mov	r0, r5
 8010c8a:	bd38      	pop	{r3, r4, r5, pc}
 8010c8c:	8993      	ldrh	r3, [r2, #12]
 8010c8e:	b2cd      	uxtb	r5, r1
 8010c90:	f023 0320 	bic.w	r3, r3, #32
 8010c94:	8193      	strh	r3, [r2, #12]
 8010c96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c98:	6852      	ldr	r2, [r2, #4]
 8010c9a:	b18b      	cbz	r3, 8010cc0 <_sungetc_r+0x44>
 8010c9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	dd08      	ble.n	8010cb4 <_sungetc_r+0x38>
 8010ca2:	6823      	ldr	r3, [r4, #0]
 8010ca4:	1e5a      	subs	r2, r3, #1
 8010ca6:	6022      	str	r2, [r4, #0]
 8010ca8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010cac:	6863      	ldr	r3, [r4, #4]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	6063      	str	r3, [r4, #4]
 8010cb2:	e7e9      	b.n	8010c88 <_sungetc_r+0xc>
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	f000 fbdc 	bl	8011472 <__submore>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d0f1      	beq.n	8010ca2 <_sungetc_r+0x26>
 8010cbe:	e7e1      	b.n	8010c84 <_sungetc_r+0x8>
 8010cc0:	6921      	ldr	r1, [r4, #16]
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	b151      	cbz	r1, 8010cdc <_sungetc_r+0x60>
 8010cc6:	4299      	cmp	r1, r3
 8010cc8:	d208      	bcs.n	8010cdc <_sungetc_r+0x60>
 8010cca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010cce:	42a9      	cmp	r1, r5
 8010cd0:	d104      	bne.n	8010cdc <_sungetc_r+0x60>
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	3201      	adds	r2, #1
 8010cd6:	6023      	str	r3, [r4, #0]
 8010cd8:	6062      	str	r2, [r4, #4]
 8010cda:	e7d5      	b.n	8010c88 <_sungetc_r+0xc>
 8010cdc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ce4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ce6:	2303      	movs	r3, #3
 8010ce8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010cea:	4623      	mov	r3, r4
 8010cec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e7dc      	b.n	8010cb0 <_sungetc_r+0x34>

08010cf6 <__ssrefill_r>:
 8010cf6:	b510      	push	{r4, lr}
 8010cf8:	460c      	mov	r4, r1
 8010cfa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010cfc:	b169      	cbz	r1, 8010d1a <__ssrefill_r+0x24>
 8010cfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d02:	4299      	cmp	r1, r3
 8010d04:	d001      	beq.n	8010d0a <__ssrefill_r+0x14>
 8010d06:	f7fe fa47 	bl	800f198 <_free_r>
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d0e:	6360      	str	r0, [r4, #52]	@ 0x34
 8010d10:	6063      	str	r3, [r4, #4]
 8010d12:	b113      	cbz	r3, 8010d1a <__ssrefill_r+0x24>
 8010d14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010d16:	6023      	str	r3, [r4, #0]
 8010d18:	bd10      	pop	{r4, pc}
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d20:	6023      	str	r3, [r4, #0]
 8010d22:	2300      	movs	r3, #0
 8010d24:	6063      	str	r3, [r4, #4]
 8010d26:	89a3      	ldrh	r3, [r4, #12]
 8010d28:	f043 0320 	orr.w	r3, r3, #32
 8010d2c:	81a3      	strh	r3, [r4, #12]
 8010d2e:	e7f3      	b.n	8010d18 <__ssrefill_r+0x22>

08010d30 <__ssvfiscanf_r>:
 8010d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	460c      	mov	r4, r1
 8010d36:	2100      	movs	r1, #0
 8010d38:	4606      	mov	r6, r0
 8010d3a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8010d3e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010d42:	49ab      	ldr	r1, [pc, #684]	@ (8010ff0 <__ssvfiscanf_r+0x2c0>)
 8010d44:	f10d 0804 	add.w	r8, sp, #4
 8010d48:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010d4a:	49aa      	ldr	r1, [pc, #680]	@ (8010ff4 <__ssvfiscanf_r+0x2c4>)
 8010d4c:	4faa      	ldr	r7, [pc, #680]	@ (8010ff8 <__ssvfiscanf_r+0x2c8>)
 8010d4e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010d52:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010d54:	9300      	str	r3, [sp, #0]
 8010d56:	f892 9000 	ldrb.w	r9, [r2]
 8010d5a:	f1b9 0f00 	cmp.w	r9, #0
 8010d5e:	f000 8159 	beq.w	8011014 <__ssvfiscanf_r+0x2e4>
 8010d62:	f817 3009 	ldrb.w	r3, [r7, r9]
 8010d66:	1c55      	adds	r5, r2, #1
 8010d68:	f013 0308 	ands.w	r3, r3, #8
 8010d6c:	d019      	beq.n	8010da2 <__ssvfiscanf_r+0x72>
 8010d6e:	6863      	ldr	r3, [r4, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	dd0f      	ble.n	8010d94 <__ssvfiscanf_r+0x64>
 8010d74:	6823      	ldr	r3, [r4, #0]
 8010d76:	781a      	ldrb	r2, [r3, #0]
 8010d78:	5cba      	ldrb	r2, [r7, r2]
 8010d7a:	0712      	lsls	r2, r2, #28
 8010d7c:	d401      	bmi.n	8010d82 <__ssvfiscanf_r+0x52>
 8010d7e:	462a      	mov	r2, r5
 8010d80:	e7e9      	b.n	8010d56 <__ssvfiscanf_r+0x26>
 8010d82:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010d84:	3301      	adds	r3, #1
 8010d86:	3201      	adds	r2, #1
 8010d88:	9245      	str	r2, [sp, #276]	@ 0x114
 8010d8a:	6862      	ldr	r2, [r4, #4]
 8010d8c:	6023      	str	r3, [r4, #0]
 8010d8e:	3a01      	subs	r2, #1
 8010d90:	6062      	str	r2, [r4, #4]
 8010d92:	e7ec      	b.n	8010d6e <__ssvfiscanf_r+0x3e>
 8010d94:	4621      	mov	r1, r4
 8010d96:	4630      	mov	r0, r6
 8010d98:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010d9a:	4798      	blx	r3
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d0e9      	beq.n	8010d74 <__ssvfiscanf_r+0x44>
 8010da0:	e7ed      	b.n	8010d7e <__ssvfiscanf_r+0x4e>
 8010da2:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010da6:	f040 8086 	bne.w	8010eb6 <__ssvfiscanf_r+0x186>
 8010daa:	9341      	str	r3, [sp, #260]	@ 0x104
 8010dac:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010dae:	7853      	ldrb	r3, [r2, #1]
 8010db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010db2:	bf04      	itt	eq
 8010db4:	2310      	moveq	r3, #16
 8010db6:	1c95      	addeq	r5, r2, #2
 8010db8:	f04f 020a 	mov.w	r2, #10
 8010dbc:	bf08      	it	eq
 8010dbe:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010dc0:	46aa      	mov	sl, r5
 8010dc2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010dc6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010dca:	2b09      	cmp	r3, #9
 8010dcc:	d91e      	bls.n	8010e0c <__ssvfiscanf_r+0xdc>
 8010dce:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8010ffc <__ssvfiscanf_r+0x2cc>
 8010dd2:	2203      	movs	r2, #3
 8010dd4:	4658      	mov	r0, fp
 8010dd6:	f7fd fb70 	bl	800e4ba <memchr>
 8010dda:	b138      	cbz	r0, 8010dec <__ssvfiscanf_r+0xbc>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4655      	mov	r5, sl
 8010de0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010de2:	eba0 000b 	sub.w	r0, r0, fp
 8010de6:	4083      	lsls	r3, r0
 8010de8:	4313      	orrs	r3, r2
 8010dea:	9341      	str	r3, [sp, #260]	@ 0x104
 8010dec:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010df0:	2b78      	cmp	r3, #120	@ 0x78
 8010df2:	d806      	bhi.n	8010e02 <__ssvfiscanf_r+0xd2>
 8010df4:	2b57      	cmp	r3, #87	@ 0x57
 8010df6:	d810      	bhi.n	8010e1a <__ssvfiscanf_r+0xea>
 8010df8:	2b25      	cmp	r3, #37	@ 0x25
 8010dfa:	d05c      	beq.n	8010eb6 <__ssvfiscanf_r+0x186>
 8010dfc:	d856      	bhi.n	8010eac <__ssvfiscanf_r+0x17c>
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d074      	beq.n	8010eec <__ssvfiscanf_r+0x1bc>
 8010e02:	2303      	movs	r3, #3
 8010e04:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010e06:	230a      	movs	r3, #10
 8010e08:	9342      	str	r3, [sp, #264]	@ 0x108
 8010e0a:	e087      	b.n	8010f1c <__ssvfiscanf_r+0x1ec>
 8010e0c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010e0e:	4655      	mov	r5, sl
 8010e10:	fb02 1103 	mla	r1, r2, r3, r1
 8010e14:	3930      	subs	r1, #48	@ 0x30
 8010e16:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010e18:	e7d2      	b.n	8010dc0 <__ssvfiscanf_r+0x90>
 8010e1a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010e1e:	2a20      	cmp	r2, #32
 8010e20:	d8ef      	bhi.n	8010e02 <__ssvfiscanf_r+0xd2>
 8010e22:	a101      	add	r1, pc, #4	@ (adr r1, 8010e28 <__ssvfiscanf_r+0xf8>)
 8010e24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010e28:	08010efb 	.word	0x08010efb
 8010e2c:	08010e03 	.word	0x08010e03
 8010e30:	08010e03 	.word	0x08010e03
 8010e34:	08010f55 	.word	0x08010f55
 8010e38:	08010e03 	.word	0x08010e03
 8010e3c:	08010e03 	.word	0x08010e03
 8010e40:	08010e03 	.word	0x08010e03
 8010e44:	08010e03 	.word	0x08010e03
 8010e48:	08010e03 	.word	0x08010e03
 8010e4c:	08010e03 	.word	0x08010e03
 8010e50:	08010e03 	.word	0x08010e03
 8010e54:	08010f6b 	.word	0x08010f6b
 8010e58:	08010f51 	.word	0x08010f51
 8010e5c:	08010eb3 	.word	0x08010eb3
 8010e60:	08010eb3 	.word	0x08010eb3
 8010e64:	08010eb3 	.word	0x08010eb3
 8010e68:	08010e03 	.word	0x08010e03
 8010e6c:	08010f0d 	.word	0x08010f0d
 8010e70:	08010e03 	.word	0x08010e03
 8010e74:	08010e03 	.word	0x08010e03
 8010e78:	08010e03 	.word	0x08010e03
 8010e7c:	08010e03 	.word	0x08010e03
 8010e80:	08010f7b 	.word	0x08010f7b
 8010e84:	08010f15 	.word	0x08010f15
 8010e88:	08010ef3 	.word	0x08010ef3
 8010e8c:	08010e03 	.word	0x08010e03
 8010e90:	08010e03 	.word	0x08010e03
 8010e94:	08010f77 	.word	0x08010f77
 8010e98:	08010e03 	.word	0x08010e03
 8010e9c:	08010f51 	.word	0x08010f51
 8010ea0:	08010e03 	.word	0x08010e03
 8010ea4:	08010e03 	.word	0x08010e03
 8010ea8:	08010efb 	.word	0x08010efb
 8010eac:	3b45      	subs	r3, #69	@ 0x45
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d8a7      	bhi.n	8010e02 <__ssvfiscanf_r+0xd2>
 8010eb2:	2305      	movs	r3, #5
 8010eb4:	e031      	b.n	8010f1a <__ssvfiscanf_r+0x1ea>
 8010eb6:	6863      	ldr	r3, [r4, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	dd0d      	ble.n	8010ed8 <__ssvfiscanf_r+0x1a8>
 8010ebc:	6823      	ldr	r3, [r4, #0]
 8010ebe:	781a      	ldrb	r2, [r3, #0]
 8010ec0:	454a      	cmp	r2, r9
 8010ec2:	f040 80a7 	bne.w	8011014 <__ssvfiscanf_r+0x2e4>
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	6862      	ldr	r2, [r4, #4]
 8010eca:	6023      	str	r3, [r4, #0]
 8010ecc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010ece:	3a01      	subs	r2, #1
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	6062      	str	r2, [r4, #4]
 8010ed4:	9345      	str	r3, [sp, #276]	@ 0x114
 8010ed6:	e752      	b.n	8010d7e <__ssvfiscanf_r+0x4e>
 8010ed8:	4621      	mov	r1, r4
 8010eda:	4630      	mov	r0, r6
 8010edc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010ede:	4798      	blx	r3
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0eb      	beq.n	8010ebc <__ssvfiscanf_r+0x18c>
 8010ee4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	f040 808c 	bne.w	8011004 <__ssvfiscanf_r+0x2d4>
 8010eec:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef0:	e08c      	b.n	801100c <__ssvfiscanf_r+0x2dc>
 8010ef2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010ef4:	f042 0220 	orr.w	r2, r2, #32
 8010ef8:	9241      	str	r2, [sp, #260]	@ 0x104
 8010efa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010f00:	9241      	str	r2, [sp, #260]	@ 0x104
 8010f02:	2210      	movs	r2, #16
 8010f04:	2b6e      	cmp	r3, #110	@ 0x6e
 8010f06:	9242      	str	r2, [sp, #264]	@ 0x108
 8010f08:	d902      	bls.n	8010f10 <__ssvfiscanf_r+0x1e0>
 8010f0a:	e005      	b.n	8010f18 <__ssvfiscanf_r+0x1e8>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010f10:	2303      	movs	r3, #3
 8010f12:	e002      	b.n	8010f1a <__ssvfiscanf_r+0x1ea>
 8010f14:	2308      	movs	r3, #8
 8010f16:	9342      	str	r3, [sp, #264]	@ 0x108
 8010f18:	2304      	movs	r3, #4
 8010f1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010f1c:	6863      	ldr	r3, [r4, #4]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	dd39      	ble.n	8010f96 <__ssvfiscanf_r+0x266>
 8010f22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010f24:	0659      	lsls	r1, r3, #25
 8010f26:	d404      	bmi.n	8010f32 <__ssvfiscanf_r+0x202>
 8010f28:	6823      	ldr	r3, [r4, #0]
 8010f2a:	781a      	ldrb	r2, [r3, #0]
 8010f2c:	5cba      	ldrb	r2, [r7, r2]
 8010f2e:	0712      	lsls	r2, r2, #28
 8010f30:	d438      	bmi.n	8010fa4 <__ssvfiscanf_r+0x274>
 8010f32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	dc47      	bgt.n	8010fc8 <__ssvfiscanf_r+0x298>
 8010f38:	466b      	mov	r3, sp
 8010f3a:	4622      	mov	r2, r4
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	a941      	add	r1, sp, #260	@ 0x104
 8010f40:	f000 f86a 	bl	8011018 <_scanf_chars>
 8010f44:	2801      	cmp	r0, #1
 8010f46:	d065      	beq.n	8011014 <__ssvfiscanf_r+0x2e4>
 8010f48:	2802      	cmp	r0, #2
 8010f4a:	f47f af18 	bne.w	8010d7e <__ssvfiscanf_r+0x4e>
 8010f4e:	e7c9      	b.n	8010ee4 <__ssvfiscanf_r+0x1b4>
 8010f50:	220a      	movs	r2, #10
 8010f52:	e7d7      	b.n	8010f04 <__ssvfiscanf_r+0x1d4>
 8010f54:	4629      	mov	r1, r5
 8010f56:	4640      	mov	r0, r8
 8010f58:	f000 fa52 	bl	8011400 <__sccl>
 8010f5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010f5e:	4605      	mov	r5, r0
 8010f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f64:	9341      	str	r3, [sp, #260]	@ 0x104
 8010f66:	2301      	movs	r3, #1
 8010f68:	e7d7      	b.n	8010f1a <__ssvfiscanf_r+0x1ea>
 8010f6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f70:	9341      	str	r3, [sp, #260]	@ 0x104
 8010f72:	2300      	movs	r3, #0
 8010f74:	e7d1      	b.n	8010f1a <__ssvfiscanf_r+0x1ea>
 8010f76:	2302      	movs	r3, #2
 8010f78:	e7cf      	b.n	8010f1a <__ssvfiscanf_r+0x1ea>
 8010f7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010f7c:	06c3      	lsls	r3, r0, #27
 8010f7e:	f53f aefe 	bmi.w	8010d7e <__ssvfiscanf_r+0x4e>
 8010f82:	9b00      	ldr	r3, [sp, #0]
 8010f84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010f86:	1d19      	adds	r1, r3, #4
 8010f88:	9100      	str	r1, [sp, #0]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	07c0      	lsls	r0, r0, #31
 8010f8e:	bf4c      	ite	mi
 8010f90:	801a      	strhmi	r2, [r3, #0]
 8010f92:	601a      	strpl	r2, [r3, #0]
 8010f94:	e6f3      	b.n	8010d7e <__ssvfiscanf_r+0x4e>
 8010f96:	4621      	mov	r1, r4
 8010f98:	4630      	mov	r0, r6
 8010f9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010f9c:	4798      	blx	r3
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d0bf      	beq.n	8010f22 <__ssvfiscanf_r+0x1f2>
 8010fa2:	e79f      	b.n	8010ee4 <__ssvfiscanf_r+0x1b4>
 8010fa4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010fa6:	3201      	adds	r2, #1
 8010fa8:	9245      	str	r2, [sp, #276]	@ 0x114
 8010faa:	6862      	ldr	r2, [r4, #4]
 8010fac:	3a01      	subs	r2, #1
 8010fae:	2a00      	cmp	r2, #0
 8010fb0:	6062      	str	r2, [r4, #4]
 8010fb2:	dd02      	ble.n	8010fba <__ssvfiscanf_r+0x28a>
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	6023      	str	r3, [r4, #0]
 8010fb8:	e7b6      	b.n	8010f28 <__ssvfiscanf_r+0x1f8>
 8010fba:	4621      	mov	r1, r4
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010fc0:	4798      	blx	r3
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	d0b0      	beq.n	8010f28 <__ssvfiscanf_r+0x1f8>
 8010fc6:	e78d      	b.n	8010ee4 <__ssvfiscanf_r+0x1b4>
 8010fc8:	2b04      	cmp	r3, #4
 8010fca:	dc06      	bgt.n	8010fda <__ssvfiscanf_r+0x2aa>
 8010fcc:	466b      	mov	r3, sp
 8010fce:	4622      	mov	r2, r4
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	a941      	add	r1, sp, #260	@ 0x104
 8010fd4:	f000 f87a 	bl	80110cc <_scanf_i>
 8010fd8:	e7b4      	b.n	8010f44 <__ssvfiscanf_r+0x214>
 8010fda:	4b09      	ldr	r3, [pc, #36]	@ (8011000 <__ssvfiscanf_r+0x2d0>)
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f43f aece 	beq.w	8010d7e <__ssvfiscanf_r+0x4e>
 8010fe2:	466b      	mov	r3, sp
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	a941      	add	r1, sp, #260	@ 0x104
 8010fea:	f7fc fe39 	bl	800dc60 <_scanf_float>
 8010fee:	e7a9      	b.n	8010f44 <__ssvfiscanf_r+0x214>
 8010ff0:	08010c7d 	.word	0x08010c7d
 8010ff4:	08010cf7 	.word	0x08010cf7
 8010ff8:	08012de1 	.word	0x08012de1
 8010ffc:	08012bc3 	.word	0x08012bc3
 8011000:	0800dc61 	.word	0x0800dc61
 8011004:	89a3      	ldrh	r3, [r4, #12]
 8011006:	065b      	lsls	r3, r3, #25
 8011008:	f53f af70 	bmi.w	8010eec <__ssvfiscanf_r+0x1bc>
 801100c:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011014:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011016:	e7f9      	b.n	801100c <__ssvfiscanf_r+0x2dc>

08011018 <_scanf_chars>:
 8011018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801101c:	4615      	mov	r5, r2
 801101e:	688a      	ldr	r2, [r1, #8]
 8011020:	4680      	mov	r8, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b932      	cbnz	r2, 8011034 <_scanf_chars+0x1c>
 8011026:	698a      	ldr	r2, [r1, #24]
 8011028:	2a00      	cmp	r2, #0
 801102a:	bf14      	ite	ne
 801102c:	f04f 32ff 	movne.w	r2, #4294967295
 8011030:	2201      	moveq	r2, #1
 8011032:	608a      	str	r2, [r1, #8]
 8011034:	2700      	movs	r7, #0
 8011036:	6822      	ldr	r2, [r4, #0]
 8011038:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80110c8 <_scanf_chars+0xb0>
 801103c:	06d1      	lsls	r1, r2, #27
 801103e:	bf5f      	itttt	pl
 8011040:	681a      	ldrpl	r2, [r3, #0]
 8011042:	1d11      	addpl	r1, r2, #4
 8011044:	6019      	strpl	r1, [r3, #0]
 8011046:	6816      	ldrpl	r6, [r2, #0]
 8011048:	69a0      	ldr	r0, [r4, #24]
 801104a:	b188      	cbz	r0, 8011070 <_scanf_chars+0x58>
 801104c:	2801      	cmp	r0, #1
 801104e:	d107      	bne.n	8011060 <_scanf_chars+0x48>
 8011050:	682b      	ldr	r3, [r5, #0]
 8011052:	781a      	ldrb	r2, [r3, #0]
 8011054:	6963      	ldr	r3, [r4, #20]
 8011056:	5c9b      	ldrb	r3, [r3, r2]
 8011058:	b953      	cbnz	r3, 8011070 <_scanf_chars+0x58>
 801105a:	2f00      	cmp	r7, #0
 801105c:	d031      	beq.n	80110c2 <_scanf_chars+0xaa>
 801105e:	e022      	b.n	80110a6 <_scanf_chars+0x8e>
 8011060:	2802      	cmp	r0, #2
 8011062:	d120      	bne.n	80110a6 <_scanf_chars+0x8e>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f819 3003 	ldrb.w	r3, [r9, r3]
 801106c:	071b      	lsls	r3, r3, #28
 801106e:	d41a      	bmi.n	80110a6 <_scanf_chars+0x8e>
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	3701      	adds	r7, #1
 8011074:	06da      	lsls	r2, r3, #27
 8011076:	bf5e      	ittt	pl
 8011078:	682b      	ldrpl	r3, [r5, #0]
 801107a:	781b      	ldrbpl	r3, [r3, #0]
 801107c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011080:	682a      	ldr	r2, [r5, #0]
 8011082:	686b      	ldr	r3, [r5, #4]
 8011084:	3201      	adds	r2, #1
 8011086:	602a      	str	r2, [r5, #0]
 8011088:	68a2      	ldr	r2, [r4, #8]
 801108a:	3b01      	subs	r3, #1
 801108c:	3a01      	subs	r2, #1
 801108e:	606b      	str	r3, [r5, #4]
 8011090:	60a2      	str	r2, [r4, #8]
 8011092:	b142      	cbz	r2, 80110a6 <_scanf_chars+0x8e>
 8011094:	2b00      	cmp	r3, #0
 8011096:	dcd7      	bgt.n	8011048 <_scanf_chars+0x30>
 8011098:	4629      	mov	r1, r5
 801109a:	4640      	mov	r0, r8
 801109c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80110a0:	4798      	blx	r3
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d0d0      	beq.n	8011048 <_scanf_chars+0x30>
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	f013 0310 	ands.w	r3, r3, #16
 80110ac:	d105      	bne.n	80110ba <_scanf_chars+0xa2>
 80110ae:	68e2      	ldr	r2, [r4, #12]
 80110b0:	3201      	adds	r2, #1
 80110b2:	60e2      	str	r2, [r4, #12]
 80110b4:	69a2      	ldr	r2, [r4, #24]
 80110b6:	b102      	cbz	r2, 80110ba <_scanf_chars+0xa2>
 80110b8:	7033      	strb	r3, [r6, #0]
 80110ba:	2000      	movs	r0, #0
 80110bc:	6923      	ldr	r3, [r4, #16]
 80110be:	443b      	add	r3, r7
 80110c0:	6123      	str	r3, [r4, #16]
 80110c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c6:	bf00      	nop
 80110c8:	08012de1 	.word	0x08012de1

080110cc <_scanf_i>:
 80110cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d0:	460c      	mov	r4, r1
 80110d2:	4698      	mov	r8, r3
 80110d4:	4b72      	ldr	r3, [pc, #456]	@ (80112a0 <_scanf_i+0x1d4>)
 80110d6:	b087      	sub	sp, #28
 80110d8:	4682      	mov	sl, r0
 80110da:	4616      	mov	r6, r2
 80110dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80110e0:	ab03      	add	r3, sp, #12
 80110e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80110e6:	4b6f      	ldr	r3, [pc, #444]	@ (80112a4 <_scanf_i+0x1d8>)
 80110e8:	69a1      	ldr	r1, [r4, #24]
 80110ea:	4a6f      	ldr	r2, [pc, #444]	@ (80112a8 <_scanf_i+0x1dc>)
 80110ec:	4627      	mov	r7, r4
 80110ee:	2903      	cmp	r1, #3
 80110f0:	bf08      	it	eq
 80110f2:	461a      	moveq	r2, r3
 80110f4:	68a3      	ldr	r3, [r4, #8]
 80110f6:	9201      	str	r2, [sp, #4]
 80110f8:	1e5a      	subs	r2, r3, #1
 80110fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80110fe:	bf81      	itttt	hi
 8011100:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011104:	eb03 0905 	addhi.w	r9, r3, r5
 8011108:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801110c:	60a3      	strhi	r3, [r4, #8]
 801110e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011112:	bf98      	it	ls
 8011114:	f04f 0900 	movls.w	r9, #0
 8011118:	463d      	mov	r5, r7
 801111a:	f04f 0b00 	mov.w	fp, #0
 801111e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	6831      	ldr	r1, [r6, #0]
 8011126:	ab03      	add	r3, sp, #12
 8011128:	2202      	movs	r2, #2
 801112a:	7809      	ldrb	r1, [r1, #0]
 801112c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011130:	f7fd f9c3 	bl	800e4ba <memchr>
 8011134:	b328      	cbz	r0, 8011182 <_scanf_i+0xb6>
 8011136:	f1bb 0f01 	cmp.w	fp, #1
 801113a:	d159      	bne.n	80111f0 <_scanf_i+0x124>
 801113c:	6862      	ldr	r2, [r4, #4]
 801113e:	b92a      	cbnz	r2, 801114c <_scanf_i+0x80>
 8011140:	2108      	movs	r1, #8
 8011142:	6822      	ldr	r2, [r4, #0]
 8011144:	6061      	str	r1, [r4, #4]
 8011146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801114a:	6022      	str	r2, [r4, #0]
 801114c:	6822      	ldr	r2, [r4, #0]
 801114e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011152:	6022      	str	r2, [r4, #0]
 8011154:	68a2      	ldr	r2, [r4, #8]
 8011156:	1e51      	subs	r1, r2, #1
 8011158:	60a1      	str	r1, [r4, #8]
 801115a:	b192      	cbz	r2, 8011182 <_scanf_i+0xb6>
 801115c:	6832      	ldr	r2, [r6, #0]
 801115e:	1c51      	adds	r1, r2, #1
 8011160:	6031      	str	r1, [r6, #0]
 8011162:	7812      	ldrb	r2, [r2, #0]
 8011164:	f805 2b01 	strb.w	r2, [r5], #1
 8011168:	6872      	ldr	r2, [r6, #4]
 801116a:	3a01      	subs	r2, #1
 801116c:	2a00      	cmp	r2, #0
 801116e:	6072      	str	r2, [r6, #4]
 8011170:	dc07      	bgt.n	8011182 <_scanf_i+0xb6>
 8011172:	4631      	mov	r1, r6
 8011174:	4650      	mov	r0, sl
 8011176:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801117a:	4790      	blx	r2
 801117c:	2800      	cmp	r0, #0
 801117e:	f040 8085 	bne.w	801128c <_scanf_i+0x1c0>
 8011182:	f10b 0b01 	add.w	fp, fp, #1
 8011186:	f1bb 0f03 	cmp.w	fp, #3
 801118a:	d1cb      	bne.n	8011124 <_scanf_i+0x58>
 801118c:	6863      	ldr	r3, [r4, #4]
 801118e:	b90b      	cbnz	r3, 8011194 <_scanf_i+0xc8>
 8011190:	230a      	movs	r3, #10
 8011192:	6063      	str	r3, [r4, #4]
 8011194:	6863      	ldr	r3, [r4, #4]
 8011196:	4945      	ldr	r1, [pc, #276]	@ (80112ac <_scanf_i+0x1e0>)
 8011198:	6960      	ldr	r0, [r4, #20]
 801119a:	1ac9      	subs	r1, r1, r3
 801119c:	f000 f930 	bl	8011400 <__sccl>
 80111a0:	f04f 0b00 	mov.w	fp, #0
 80111a4:	68a3      	ldr	r3, [r4, #8]
 80111a6:	6822      	ldr	r2, [r4, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d03d      	beq.n	8011228 <_scanf_i+0x15c>
 80111ac:	6831      	ldr	r1, [r6, #0]
 80111ae:	6960      	ldr	r0, [r4, #20]
 80111b0:	f891 c000 	ldrb.w	ip, [r1]
 80111b4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d035      	beq.n	8011228 <_scanf_i+0x15c>
 80111bc:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80111c0:	d124      	bne.n	801120c <_scanf_i+0x140>
 80111c2:	0510      	lsls	r0, r2, #20
 80111c4:	d522      	bpl.n	801120c <_scanf_i+0x140>
 80111c6:	f10b 0b01 	add.w	fp, fp, #1
 80111ca:	f1b9 0f00 	cmp.w	r9, #0
 80111ce:	d003      	beq.n	80111d8 <_scanf_i+0x10c>
 80111d0:	3301      	adds	r3, #1
 80111d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80111d6:	60a3      	str	r3, [r4, #8]
 80111d8:	6873      	ldr	r3, [r6, #4]
 80111da:	3b01      	subs	r3, #1
 80111dc:	2b00      	cmp	r3, #0
 80111de:	6073      	str	r3, [r6, #4]
 80111e0:	dd1b      	ble.n	801121a <_scanf_i+0x14e>
 80111e2:	6833      	ldr	r3, [r6, #0]
 80111e4:	3301      	adds	r3, #1
 80111e6:	6033      	str	r3, [r6, #0]
 80111e8:	68a3      	ldr	r3, [r4, #8]
 80111ea:	3b01      	subs	r3, #1
 80111ec:	60a3      	str	r3, [r4, #8]
 80111ee:	e7d9      	b.n	80111a4 <_scanf_i+0xd8>
 80111f0:	f1bb 0f02 	cmp.w	fp, #2
 80111f4:	d1ae      	bne.n	8011154 <_scanf_i+0x88>
 80111f6:	6822      	ldr	r2, [r4, #0]
 80111f8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80111fc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011200:	d1c4      	bne.n	801118c <_scanf_i+0xc0>
 8011202:	2110      	movs	r1, #16
 8011204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011208:	6061      	str	r1, [r4, #4]
 801120a:	e7a2      	b.n	8011152 <_scanf_i+0x86>
 801120c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011210:	6022      	str	r2, [r4, #0]
 8011212:	780b      	ldrb	r3, [r1, #0]
 8011214:	f805 3b01 	strb.w	r3, [r5], #1
 8011218:	e7de      	b.n	80111d8 <_scanf_i+0x10c>
 801121a:	4631      	mov	r1, r6
 801121c:	4650      	mov	r0, sl
 801121e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011222:	4798      	blx	r3
 8011224:	2800      	cmp	r0, #0
 8011226:	d0df      	beq.n	80111e8 <_scanf_i+0x11c>
 8011228:	6823      	ldr	r3, [r4, #0]
 801122a:	05d9      	lsls	r1, r3, #23
 801122c:	d50d      	bpl.n	801124a <_scanf_i+0x17e>
 801122e:	42bd      	cmp	r5, r7
 8011230:	d909      	bls.n	8011246 <_scanf_i+0x17a>
 8011232:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011236:	4632      	mov	r2, r6
 8011238:	4650      	mov	r0, sl
 801123a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801123e:	f105 39ff 	add.w	r9, r5, #4294967295
 8011242:	4798      	blx	r3
 8011244:	464d      	mov	r5, r9
 8011246:	42bd      	cmp	r5, r7
 8011248:	d028      	beq.n	801129c <_scanf_i+0x1d0>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	f012 0210 	ands.w	r2, r2, #16
 8011250:	d113      	bne.n	801127a <_scanf_i+0x1ae>
 8011252:	702a      	strb	r2, [r5, #0]
 8011254:	4639      	mov	r1, r7
 8011256:	6863      	ldr	r3, [r4, #4]
 8011258:	4650      	mov	r0, sl
 801125a:	9e01      	ldr	r6, [sp, #4]
 801125c:	47b0      	blx	r6
 801125e:	f8d8 3000 	ldr.w	r3, [r8]
 8011262:	6821      	ldr	r1, [r4, #0]
 8011264:	1d1a      	adds	r2, r3, #4
 8011266:	f8c8 2000 	str.w	r2, [r8]
 801126a:	f011 0f20 	tst.w	r1, #32
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	d00f      	beq.n	8011292 <_scanf_i+0x1c6>
 8011272:	6018      	str	r0, [r3, #0]
 8011274:	68e3      	ldr	r3, [r4, #12]
 8011276:	3301      	adds	r3, #1
 8011278:	60e3      	str	r3, [r4, #12]
 801127a:	2000      	movs	r0, #0
 801127c:	6923      	ldr	r3, [r4, #16]
 801127e:	1bed      	subs	r5, r5, r7
 8011280:	445d      	add	r5, fp
 8011282:	442b      	add	r3, r5
 8011284:	6123      	str	r3, [r4, #16]
 8011286:	b007      	add	sp, #28
 8011288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128c:	f04f 0b00 	mov.w	fp, #0
 8011290:	e7ca      	b.n	8011228 <_scanf_i+0x15c>
 8011292:	07ca      	lsls	r2, r1, #31
 8011294:	bf4c      	ite	mi
 8011296:	8018      	strhmi	r0, [r3, #0]
 8011298:	6018      	strpl	r0, [r3, #0]
 801129a:	e7eb      	b.n	8011274 <_scanf_i+0x1a8>
 801129c:	2001      	movs	r0, #1
 801129e:	e7f2      	b.n	8011286 <_scanf_i+0x1ba>
 80112a0:	08012a18 	.word	0x08012a18
 80112a4:	080109c9 	.word	0x080109c9
 80112a8:	08011d95 	.word	0x08011d95
 80112ac:	08012bde 	.word	0x08012bde

080112b0 <__sflush_r>:
 80112b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b6:	0716      	lsls	r6, r2, #28
 80112b8:	4605      	mov	r5, r0
 80112ba:	460c      	mov	r4, r1
 80112bc:	d454      	bmi.n	8011368 <__sflush_r+0xb8>
 80112be:	684b      	ldr	r3, [r1, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	dc02      	bgt.n	80112ca <__sflush_r+0x1a>
 80112c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	dd48      	ble.n	801135c <__sflush_r+0xac>
 80112ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112cc:	2e00      	cmp	r6, #0
 80112ce:	d045      	beq.n	801135c <__sflush_r+0xac>
 80112d0:	2300      	movs	r3, #0
 80112d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80112d6:	682f      	ldr	r7, [r5, #0]
 80112d8:	6a21      	ldr	r1, [r4, #32]
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	d030      	beq.n	8011340 <__sflush_r+0x90>
 80112de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	0759      	lsls	r1, r3, #29
 80112e4:	d505      	bpl.n	80112f2 <__sflush_r+0x42>
 80112e6:	6863      	ldr	r3, [r4, #4]
 80112e8:	1ad2      	subs	r2, r2, r3
 80112ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112ec:	b10b      	cbz	r3, 80112f2 <__sflush_r+0x42>
 80112ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112f0:	1ad2      	subs	r2, r2, r3
 80112f2:	2300      	movs	r3, #0
 80112f4:	4628      	mov	r0, r5
 80112f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112f8:	6a21      	ldr	r1, [r4, #32]
 80112fa:	47b0      	blx	r6
 80112fc:	1c43      	adds	r3, r0, #1
 80112fe:	89a3      	ldrh	r3, [r4, #12]
 8011300:	d106      	bne.n	8011310 <__sflush_r+0x60>
 8011302:	6829      	ldr	r1, [r5, #0]
 8011304:	291d      	cmp	r1, #29
 8011306:	d82b      	bhi.n	8011360 <__sflush_r+0xb0>
 8011308:	4a28      	ldr	r2, [pc, #160]	@ (80113ac <__sflush_r+0xfc>)
 801130a:	40ca      	lsrs	r2, r1
 801130c:	07d6      	lsls	r6, r2, #31
 801130e:	d527      	bpl.n	8011360 <__sflush_r+0xb0>
 8011310:	2200      	movs	r2, #0
 8011312:	6062      	str	r2, [r4, #4]
 8011314:	6922      	ldr	r2, [r4, #16]
 8011316:	04d9      	lsls	r1, r3, #19
 8011318:	6022      	str	r2, [r4, #0]
 801131a:	d504      	bpl.n	8011326 <__sflush_r+0x76>
 801131c:	1c42      	adds	r2, r0, #1
 801131e:	d101      	bne.n	8011324 <__sflush_r+0x74>
 8011320:	682b      	ldr	r3, [r5, #0]
 8011322:	b903      	cbnz	r3, 8011326 <__sflush_r+0x76>
 8011324:	6560      	str	r0, [r4, #84]	@ 0x54
 8011326:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011328:	602f      	str	r7, [r5, #0]
 801132a:	b1b9      	cbz	r1, 801135c <__sflush_r+0xac>
 801132c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011330:	4299      	cmp	r1, r3
 8011332:	d002      	beq.n	801133a <__sflush_r+0x8a>
 8011334:	4628      	mov	r0, r5
 8011336:	f7fd ff2f 	bl	800f198 <_free_r>
 801133a:	2300      	movs	r3, #0
 801133c:	6363      	str	r3, [r4, #52]	@ 0x34
 801133e:	e00d      	b.n	801135c <__sflush_r+0xac>
 8011340:	2301      	movs	r3, #1
 8011342:	4628      	mov	r0, r5
 8011344:	47b0      	blx	r6
 8011346:	4602      	mov	r2, r0
 8011348:	1c50      	adds	r0, r2, #1
 801134a:	d1c9      	bne.n	80112e0 <__sflush_r+0x30>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0c6      	beq.n	80112e0 <__sflush_r+0x30>
 8011352:	2b1d      	cmp	r3, #29
 8011354:	d001      	beq.n	801135a <__sflush_r+0xaa>
 8011356:	2b16      	cmp	r3, #22
 8011358:	d11d      	bne.n	8011396 <__sflush_r+0xe6>
 801135a:	602f      	str	r7, [r5, #0]
 801135c:	2000      	movs	r0, #0
 801135e:	e021      	b.n	80113a4 <__sflush_r+0xf4>
 8011360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011364:	b21b      	sxth	r3, r3
 8011366:	e01a      	b.n	801139e <__sflush_r+0xee>
 8011368:	690f      	ldr	r7, [r1, #16]
 801136a:	2f00      	cmp	r7, #0
 801136c:	d0f6      	beq.n	801135c <__sflush_r+0xac>
 801136e:	0793      	lsls	r3, r2, #30
 8011370:	bf18      	it	ne
 8011372:	2300      	movne	r3, #0
 8011374:	680e      	ldr	r6, [r1, #0]
 8011376:	bf08      	it	eq
 8011378:	694b      	ldreq	r3, [r1, #20]
 801137a:	1bf6      	subs	r6, r6, r7
 801137c:	600f      	str	r7, [r1, #0]
 801137e:	608b      	str	r3, [r1, #8]
 8011380:	2e00      	cmp	r6, #0
 8011382:	ddeb      	ble.n	801135c <__sflush_r+0xac>
 8011384:	4633      	mov	r3, r6
 8011386:	463a      	mov	r2, r7
 8011388:	4628      	mov	r0, r5
 801138a:	6a21      	ldr	r1, [r4, #32]
 801138c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8011390:	47e0      	blx	ip
 8011392:	2800      	cmp	r0, #0
 8011394:	dc07      	bgt.n	80113a6 <__sflush_r+0xf6>
 8011396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801139a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801139e:	f04f 30ff 	mov.w	r0, #4294967295
 80113a2:	81a3      	strh	r3, [r4, #12]
 80113a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113a6:	4407      	add	r7, r0
 80113a8:	1a36      	subs	r6, r6, r0
 80113aa:	e7e9      	b.n	8011380 <__sflush_r+0xd0>
 80113ac:	20400001 	.word	0x20400001

080113b0 <_fflush_r>:
 80113b0:	b538      	push	{r3, r4, r5, lr}
 80113b2:	690b      	ldr	r3, [r1, #16]
 80113b4:	4605      	mov	r5, r0
 80113b6:	460c      	mov	r4, r1
 80113b8:	b913      	cbnz	r3, 80113c0 <_fflush_r+0x10>
 80113ba:	2500      	movs	r5, #0
 80113bc:	4628      	mov	r0, r5
 80113be:	bd38      	pop	{r3, r4, r5, pc}
 80113c0:	b118      	cbz	r0, 80113ca <_fflush_r+0x1a>
 80113c2:	6a03      	ldr	r3, [r0, #32]
 80113c4:	b90b      	cbnz	r3, 80113ca <_fflush_r+0x1a>
 80113c6:	f7fc fee1 	bl	800e18c <__sinit>
 80113ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0f3      	beq.n	80113ba <_fflush_r+0xa>
 80113d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113d4:	07d0      	lsls	r0, r2, #31
 80113d6:	d404      	bmi.n	80113e2 <_fflush_r+0x32>
 80113d8:	0599      	lsls	r1, r3, #22
 80113da:	d402      	bmi.n	80113e2 <_fflush_r+0x32>
 80113dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113de:	f7fd f86a 	bl	800e4b6 <__retarget_lock_acquire_recursive>
 80113e2:	4628      	mov	r0, r5
 80113e4:	4621      	mov	r1, r4
 80113e6:	f7ff ff63 	bl	80112b0 <__sflush_r>
 80113ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113ec:	4605      	mov	r5, r0
 80113ee:	07da      	lsls	r2, r3, #31
 80113f0:	d4e4      	bmi.n	80113bc <_fflush_r+0xc>
 80113f2:	89a3      	ldrh	r3, [r4, #12]
 80113f4:	059b      	lsls	r3, r3, #22
 80113f6:	d4e1      	bmi.n	80113bc <_fflush_r+0xc>
 80113f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113fa:	f7fd f85d 	bl	800e4b8 <__retarget_lock_release_recursive>
 80113fe:	e7dd      	b.n	80113bc <_fflush_r+0xc>

08011400 <__sccl>:
 8011400:	b570      	push	{r4, r5, r6, lr}
 8011402:	780b      	ldrb	r3, [r1, #0]
 8011404:	4604      	mov	r4, r0
 8011406:	2b5e      	cmp	r3, #94	@ 0x5e
 8011408:	bf0b      	itete	eq
 801140a:	784b      	ldrbeq	r3, [r1, #1]
 801140c:	1c4a      	addne	r2, r1, #1
 801140e:	1c8a      	addeq	r2, r1, #2
 8011410:	2100      	movne	r1, #0
 8011412:	bf08      	it	eq
 8011414:	2101      	moveq	r1, #1
 8011416:	3801      	subs	r0, #1
 8011418:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801141c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011420:	42a8      	cmp	r0, r5
 8011422:	d1fb      	bne.n	801141c <__sccl+0x1c>
 8011424:	b90b      	cbnz	r3, 801142a <__sccl+0x2a>
 8011426:	1e50      	subs	r0, r2, #1
 8011428:	bd70      	pop	{r4, r5, r6, pc}
 801142a:	f081 0101 	eor.w	r1, r1, #1
 801142e:	4610      	mov	r0, r2
 8011430:	54e1      	strb	r1, [r4, r3]
 8011432:	4602      	mov	r2, r0
 8011434:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011438:	2d2d      	cmp	r5, #45	@ 0x2d
 801143a:	d005      	beq.n	8011448 <__sccl+0x48>
 801143c:	2d5d      	cmp	r5, #93	@ 0x5d
 801143e:	d016      	beq.n	801146e <__sccl+0x6e>
 8011440:	2d00      	cmp	r5, #0
 8011442:	d0f1      	beq.n	8011428 <__sccl+0x28>
 8011444:	462b      	mov	r3, r5
 8011446:	e7f2      	b.n	801142e <__sccl+0x2e>
 8011448:	7846      	ldrb	r6, [r0, #1]
 801144a:	2e5d      	cmp	r6, #93	@ 0x5d
 801144c:	d0fa      	beq.n	8011444 <__sccl+0x44>
 801144e:	42b3      	cmp	r3, r6
 8011450:	dcf8      	bgt.n	8011444 <__sccl+0x44>
 8011452:	461a      	mov	r2, r3
 8011454:	3002      	adds	r0, #2
 8011456:	3201      	adds	r2, #1
 8011458:	4296      	cmp	r6, r2
 801145a:	54a1      	strb	r1, [r4, r2]
 801145c:	dcfb      	bgt.n	8011456 <__sccl+0x56>
 801145e:	1af2      	subs	r2, r6, r3
 8011460:	3a01      	subs	r2, #1
 8011462:	42b3      	cmp	r3, r6
 8011464:	bfa8      	it	ge
 8011466:	2200      	movge	r2, #0
 8011468:	1c5d      	adds	r5, r3, #1
 801146a:	18ab      	adds	r3, r5, r2
 801146c:	e7e1      	b.n	8011432 <__sccl+0x32>
 801146e:	4610      	mov	r0, r2
 8011470:	e7da      	b.n	8011428 <__sccl+0x28>

08011472 <__submore>:
 8011472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011476:	460c      	mov	r4, r1
 8011478:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801147a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801147e:	4299      	cmp	r1, r3
 8011480:	d11b      	bne.n	80114ba <__submore+0x48>
 8011482:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011486:	f7fd fef9 	bl	800f27c <_malloc_r>
 801148a:	b918      	cbnz	r0, 8011494 <__submore+0x22>
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011498:	63a3      	str	r3, [r4, #56]	@ 0x38
 801149a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801149e:	6360      	str	r0, [r4, #52]	@ 0x34
 80114a0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80114a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80114a8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80114ac:	7043      	strb	r3, [r0, #1]
 80114ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80114b2:	7003      	strb	r3, [r0, #0]
 80114b4:	6020      	str	r0, [r4, #0]
 80114b6:	2000      	movs	r0, #0
 80114b8:	e7ea      	b.n	8011490 <__submore+0x1e>
 80114ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80114bc:	0077      	lsls	r7, r6, #1
 80114be:	463a      	mov	r2, r7
 80114c0:	f000 fbcb 	bl	8011c5a <_realloc_r>
 80114c4:	4605      	mov	r5, r0
 80114c6:	2800      	cmp	r0, #0
 80114c8:	d0e0      	beq.n	801148c <__submore+0x1a>
 80114ca:	eb00 0806 	add.w	r8, r0, r6
 80114ce:	4601      	mov	r1, r0
 80114d0:	4632      	mov	r2, r6
 80114d2:	4640      	mov	r0, r8
 80114d4:	f000 f830 	bl	8011538 <memcpy>
 80114d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80114dc:	f8c4 8000 	str.w	r8, [r4]
 80114e0:	e7e9      	b.n	80114b6 <__submore+0x44>

080114e2 <memmove>:
 80114e2:	4288      	cmp	r0, r1
 80114e4:	b510      	push	{r4, lr}
 80114e6:	eb01 0402 	add.w	r4, r1, r2
 80114ea:	d902      	bls.n	80114f2 <memmove+0x10>
 80114ec:	4284      	cmp	r4, r0
 80114ee:	4623      	mov	r3, r4
 80114f0:	d807      	bhi.n	8011502 <memmove+0x20>
 80114f2:	1e43      	subs	r3, r0, #1
 80114f4:	42a1      	cmp	r1, r4
 80114f6:	d008      	beq.n	801150a <memmove+0x28>
 80114f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011500:	e7f8      	b.n	80114f4 <memmove+0x12>
 8011502:	4601      	mov	r1, r0
 8011504:	4402      	add	r2, r0
 8011506:	428a      	cmp	r2, r1
 8011508:	d100      	bne.n	801150c <memmove+0x2a>
 801150a:	bd10      	pop	{r4, pc}
 801150c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011510:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011514:	e7f7      	b.n	8011506 <memmove+0x24>
	...

08011518 <_sbrk_r>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	2300      	movs	r3, #0
 801151c:	4d05      	ldr	r5, [pc, #20]	@ (8011534 <_sbrk_r+0x1c>)
 801151e:	4604      	mov	r4, r0
 8011520:	4608      	mov	r0, r1
 8011522:	602b      	str	r3, [r5, #0]
 8011524:	f7f2 fa4c 	bl	80039c0 <_sbrk>
 8011528:	1c43      	adds	r3, r0, #1
 801152a:	d102      	bne.n	8011532 <_sbrk_r+0x1a>
 801152c:	682b      	ldr	r3, [r5, #0]
 801152e:	b103      	cbz	r3, 8011532 <_sbrk_r+0x1a>
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	bd38      	pop	{r3, r4, r5, pc}
 8011534:	20001aa8 	.word	0x20001aa8

08011538 <memcpy>:
 8011538:	440a      	add	r2, r1
 801153a:	4291      	cmp	r1, r2
 801153c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011540:	d100      	bne.n	8011544 <memcpy+0xc>
 8011542:	4770      	bx	lr
 8011544:	b510      	push	{r4, lr}
 8011546:	f811 4b01 	ldrb.w	r4, [r1], #1
 801154a:	4291      	cmp	r1, r2
 801154c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011550:	d1f9      	bne.n	8011546 <memcpy+0xe>
 8011552:	bd10      	pop	{r4, pc}

08011554 <nan>:
 8011554:	2000      	movs	r0, #0
 8011556:	4901      	ldr	r1, [pc, #4]	@ (801155c <nan+0x8>)
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	7ff80000 	.word	0x7ff80000

08011560 <__assert_func>:
 8011560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011562:	4614      	mov	r4, r2
 8011564:	461a      	mov	r2, r3
 8011566:	4b09      	ldr	r3, [pc, #36]	@ (801158c <__assert_func+0x2c>)
 8011568:	4605      	mov	r5, r0
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	68d8      	ldr	r0, [r3, #12]
 801156e:	b14c      	cbz	r4, 8011584 <__assert_func+0x24>
 8011570:	4b07      	ldr	r3, [pc, #28]	@ (8011590 <__assert_func+0x30>)
 8011572:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011576:	9100      	str	r1, [sp, #0]
 8011578:	462b      	mov	r3, r5
 801157a:	4906      	ldr	r1, [pc, #24]	@ (8011594 <__assert_func+0x34>)
 801157c:	f000 fc1a 	bl	8011db4 <fiprintf>
 8011580:	f000 fc2a 	bl	8011dd8 <abort>
 8011584:	4b04      	ldr	r3, [pc, #16]	@ (8011598 <__assert_func+0x38>)
 8011586:	461c      	mov	r4, r3
 8011588:	e7f3      	b.n	8011572 <__assert_func+0x12>
 801158a:	bf00      	nop
 801158c:	200001a0 	.word	0x200001a0
 8011590:	08012bf1 	.word	0x08012bf1
 8011594:	08012bfe 	.word	0x08012bfe
 8011598:	08012c2c 	.word	0x08012c2c

0801159c <_calloc_r>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	fba1 5402 	umull	r5, r4, r1, r2
 80115a2:	b934      	cbnz	r4, 80115b2 <_calloc_r+0x16>
 80115a4:	4629      	mov	r1, r5
 80115a6:	f7fd fe69 	bl	800f27c <_malloc_r>
 80115aa:	4606      	mov	r6, r0
 80115ac:	b928      	cbnz	r0, 80115ba <_calloc_r+0x1e>
 80115ae:	4630      	mov	r0, r6
 80115b0:	bd70      	pop	{r4, r5, r6, pc}
 80115b2:	220c      	movs	r2, #12
 80115b4:	2600      	movs	r6, #0
 80115b6:	6002      	str	r2, [r0, #0]
 80115b8:	e7f9      	b.n	80115ae <_calloc_r+0x12>
 80115ba:	462a      	mov	r2, r5
 80115bc:	4621      	mov	r1, r4
 80115be:	f7fc feeb 	bl	800e398 <memset>
 80115c2:	e7f4      	b.n	80115ae <_calloc_r+0x12>

080115c4 <rshift>:
 80115c4:	6903      	ldr	r3, [r0, #16]
 80115c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80115ce:	f100 0414 	add.w	r4, r0, #20
 80115d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80115d6:	dd46      	ble.n	8011666 <rshift+0xa2>
 80115d8:	f011 011f 	ands.w	r1, r1, #31
 80115dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80115e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80115e4:	d10c      	bne.n	8011600 <rshift+0x3c>
 80115e6:	4629      	mov	r1, r5
 80115e8:	f100 0710 	add.w	r7, r0, #16
 80115ec:	42b1      	cmp	r1, r6
 80115ee:	d335      	bcc.n	801165c <rshift+0x98>
 80115f0:	1a9b      	subs	r3, r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	1eea      	subs	r2, r5, #3
 80115f6:	4296      	cmp	r6, r2
 80115f8:	bf38      	it	cc
 80115fa:	2300      	movcc	r3, #0
 80115fc:	4423      	add	r3, r4
 80115fe:	e015      	b.n	801162c <rshift+0x68>
 8011600:	46a1      	mov	r9, r4
 8011602:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011606:	f1c1 0820 	rsb	r8, r1, #32
 801160a:	40cf      	lsrs	r7, r1
 801160c:	f105 0e04 	add.w	lr, r5, #4
 8011610:	4576      	cmp	r6, lr
 8011612:	46f4      	mov	ip, lr
 8011614:	d816      	bhi.n	8011644 <rshift+0x80>
 8011616:	1a9a      	subs	r2, r3, r2
 8011618:	0092      	lsls	r2, r2, #2
 801161a:	3a04      	subs	r2, #4
 801161c:	3501      	adds	r5, #1
 801161e:	42ae      	cmp	r6, r5
 8011620:	bf38      	it	cc
 8011622:	2200      	movcc	r2, #0
 8011624:	18a3      	adds	r3, r4, r2
 8011626:	50a7      	str	r7, [r4, r2]
 8011628:	b107      	cbz	r7, 801162c <rshift+0x68>
 801162a:	3304      	adds	r3, #4
 801162c:	42a3      	cmp	r3, r4
 801162e:	eba3 0204 	sub.w	r2, r3, r4
 8011632:	bf08      	it	eq
 8011634:	2300      	moveq	r3, #0
 8011636:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801163a:	6102      	str	r2, [r0, #16]
 801163c:	bf08      	it	eq
 801163e:	6143      	streq	r3, [r0, #20]
 8011640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011644:	f8dc c000 	ldr.w	ip, [ip]
 8011648:	fa0c fc08 	lsl.w	ip, ip, r8
 801164c:	ea4c 0707 	orr.w	r7, ip, r7
 8011650:	f849 7b04 	str.w	r7, [r9], #4
 8011654:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011658:	40cf      	lsrs	r7, r1
 801165a:	e7d9      	b.n	8011610 <rshift+0x4c>
 801165c:	f851 cb04 	ldr.w	ip, [r1], #4
 8011660:	f847 cf04 	str.w	ip, [r7, #4]!
 8011664:	e7c2      	b.n	80115ec <rshift+0x28>
 8011666:	4623      	mov	r3, r4
 8011668:	e7e0      	b.n	801162c <rshift+0x68>

0801166a <__hexdig_fun>:
 801166a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801166e:	2b09      	cmp	r3, #9
 8011670:	d802      	bhi.n	8011678 <__hexdig_fun+0xe>
 8011672:	3820      	subs	r0, #32
 8011674:	b2c0      	uxtb	r0, r0
 8011676:	4770      	bx	lr
 8011678:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801167c:	2b05      	cmp	r3, #5
 801167e:	d801      	bhi.n	8011684 <__hexdig_fun+0x1a>
 8011680:	3847      	subs	r0, #71	@ 0x47
 8011682:	e7f7      	b.n	8011674 <__hexdig_fun+0xa>
 8011684:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011688:	2b05      	cmp	r3, #5
 801168a:	d801      	bhi.n	8011690 <__hexdig_fun+0x26>
 801168c:	3827      	subs	r0, #39	@ 0x27
 801168e:	e7f1      	b.n	8011674 <__hexdig_fun+0xa>
 8011690:	2000      	movs	r0, #0
 8011692:	4770      	bx	lr

08011694 <__gethex>:
 8011694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	468a      	mov	sl, r1
 801169a:	4690      	mov	r8, r2
 801169c:	b085      	sub	sp, #20
 801169e:	9302      	str	r3, [sp, #8]
 80116a0:	680b      	ldr	r3, [r1, #0]
 80116a2:	9001      	str	r0, [sp, #4]
 80116a4:	1c9c      	adds	r4, r3, #2
 80116a6:	46a1      	mov	r9, r4
 80116a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80116ac:	2830      	cmp	r0, #48	@ 0x30
 80116ae:	d0fa      	beq.n	80116a6 <__gethex+0x12>
 80116b0:	eba9 0303 	sub.w	r3, r9, r3
 80116b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80116b8:	f7ff ffd7 	bl	801166a <__hexdig_fun>
 80116bc:	4605      	mov	r5, r0
 80116be:	2800      	cmp	r0, #0
 80116c0:	d168      	bne.n	8011794 <__gethex+0x100>
 80116c2:	2201      	movs	r2, #1
 80116c4:	4648      	mov	r0, r9
 80116c6:	499f      	ldr	r1, [pc, #636]	@ (8011944 <__gethex+0x2b0>)
 80116c8:	f7fc fe6e 	bl	800e3a8 <strncmp>
 80116cc:	4607      	mov	r7, r0
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d167      	bne.n	80117a2 <__gethex+0x10e>
 80116d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80116d6:	4626      	mov	r6, r4
 80116d8:	f7ff ffc7 	bl	801166a <__hexdig_fun>
 80116dc:	2800      	cmp	r0, #0
 80116de:	d062      	beq.n	80117a6 <__gethex+0x112>
 80116e0:	4623      	mov	r3, r4
 80116e2:	7818      	ldrb	r0, [r3, #0]
 80116e4:	4699      	mov	r9, r3
 80116e6:	2830      	cmp	r0, #48	@ 0x30
 80116e8:	f103 0301 	add.w	r3, r3, #1
 80116ec:	d0f9      	beq.n	80116e2 <__gethex+0x4e>
 80116ee:	f7ff ffbc 	bl	801166a <__hexdig_fun>
 80116f2:	fab0 f580 	clz	r5, r0
 80116f6:	f04f 0b01 	mov.w	fp, #1
 80116fa:	096d      	lsrs	r5, r5, #5
 80116fc:	464a      	mov	r2, r9
 80116fe:	4616      	mov	r6, r2
 8011700:	7830      	ldrb	r0, [r6, #0]
 8011702:	3201      	adds	r2, #1
 8011704:	f7ff ffb1 	bl	801166a <__hexdig_fun>
 8011708:	2800      	cmp	r0, #0
 801170a:	d1f8      	bne.n	80116fe <__gethex+0x6a>
 801170c:	2201      	movs	r2, #1
 801170e:	4630      	mov	r0, r6
 8011710:	498c      	ldr	r1, [pc, #560]	@ (8011944 <__gethex+0x2b0>)
 8011712:	f7fc fe49 	bl	800e3a8 <strncmp>
 8011716:	2800      	cmp	r0, #0
 8011718:	d13f      	bne.n	801179a <__gethex+0x106>
 801171a:	b944      	cbnz	r4, 801172e <__gethex+0x9a>
 801171c:	1c74      	adds	r4, r6, #1
 801171e:	4622      	mov	r2, r4
 8011720:	4616      	mov	r6, r2
 8011722:	7830      	ldrb	r0, [r6, #0]
 8011724:	3201      	adds	r2, #1
 8011726:	f7ff ffa0 	bl	801166a <__hexdig_fun>
 801172a:	2800      	cmp	r0, #0
 801172c:	d1f8      	bne.n	8011720 <__gethex+0x8c>
 801172e:	1ba4      	subs	r4, r4, r6
 8011730:	00a7      	lsls	r7, r4, #2
 8011732:	7833      	ldrb	r3, [r6, #0]
 8011734:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011738:	2b50      	cmp	r3, #80	@ 0x50
 801173a:	d13e      	bne.n	80117ba <__gethex+0x126>
 801173c:	7873      	ldrb	r3, [r6, #1]
 801173e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011740:	d033      	beq.n	80117aa <__gethex+0x116>
 8011742:	2b2d      	cmp	r3, #45	@ 0x2d
 8011744:	d034      	beq.n	80117b0 <__gethex+0x11c>
 8011746:	2400      	movs	r4, #0
 8011748:	1c71      	adds	r1, r6, #1
 801174a:	7808      	ldrb	r0, [r1, #0]
 801174c:	f7ff ff8d 	bl	801166a <__hexdig_fun>
 8011750:	1e43      	subs	r3, r0, #1
 8011752:	b2db      	uxtb	r3, r3
 8011754:	2b18      	cmp	r3, #24
 8011756:	d830      	bhi.n	80117ba <__gethex+0x126>
 8011758:	f1a0 0210 	sub.w	r2, r0, #16
 801175c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011760:	f7ff ff83 	bl	801166a <__hexdig_fun>
 8011764:	f100 3cff 	add.w	ip, r0, #4294967295
 8011768:	fa5f fc8c 	uxtb.w	ip, ip
 801176c:	f1bc 0f18 	cmp.w	ip, #24
 8011770:	f04f 030a 	mov.w	r3, #10
 8011774:	d91e      	bls.n	80117b4 <__gethex+0x120>
 8011776:	b104      	cbz	r4, 801177a <__gethex+0xe6>
 8011778:	4252      	negs	r2, r2
 801177a:	4417      	add	r7, r2
 801177c:	f8ca 1000 	str.w	r1, [sl]
 8011780:	b1ed      	cbz	r5, 80117be <__gethex+0x12a>
 8011782:	f1bb 0f00 	cmp.w	fp, #0
 8011786:	bf0c      	ite	eq
 8011788:	2506      	moveq	r5, #6
 801178a:	2500      	movne	r5, #0
 801178c:	4628      	mov	r0, r5
 801178e:	b005      	add	sp, #20
 8011790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011794:	2500      	movs	r5, #0
 8011796:	462c      	mov	r4, r5
 8011798:	e7b0      	b.n	80116fc <__gethex+0x68>
 801179a:	2c00      	cmp	r4, #0
 801179c:	d1c7      	bne.n	801172e <__gethex+0x9a>
 801179e:	4627      	mov	r7, r4
 80117a0:	e7c7      	b.n	8011732 <__gethex+0x9e>
 80117a2:	464e      	mov	r6, r9
 80117a4:	462f      	mov	r7, r5
 80117a6:	2501      	movs	r5, #1
 80117a8:	e7c3      	b.n	8011732 <__gethex+0x9e>
 80117aa:	2400      	movs	r4, #0
 80117ac:	1cb1      	adds	r1, r6, #2
 80117ae:	e7cc      	b.n	801174a <__gethex+0xb6>
 80117b0:	2401      	movs	r4, #1
 80117b2:	e7fb      	b.n	80117ac <__gethex+0x118>
 80117b4:	fb03 0002 	mla	r0, r3, r2, r0
 80117b8:	e7ce      	b.n	8011758 <__gethex+0xc4>
 80117ba:	4631      	mov	r1, r6
 80117bc:	e7de      	b.n	801177c <__gethex+0xe8>
 80117be:	4629      	mov	r1, r5
 80117c0:	eba6 0309 	sub.w	r3, r6, r9
 80117c4:	3b01      	subs	r3, #1
 80117c6:	2b07      	cmp	r3, #7
 80117c8:	dc0a      	bgt.n	80117e0 <__gethex+0x14c>
 80117ca:	9801      	ldr	r0, [sp, #4]
 80117cc:	f7fd fde2 	bl	800f394 <_Balloc>
 80117d0:	4604      	mov	r4, r0
 80117d2:	b940      	cbnz	r0, 80117e6 <__gethex+0x152>
 80117d4:	4602      	mov	r2, r0
 80117d6:	21e4      	movs	r1, #228	@ 0xe4
 80117d8:	4b5b      	ldr	r3, [pc, #364]	@ (8011948 <__gethex+0x2b4>)
 80117da:	485c      	ldr	r0, [pc, #368]	@ (801194c <__gethex+0x2b8>)
 80117dc:	f7ff fec0 	bl	8011560 <__assert_func>
 80117e0:	3101      	adds	r1, #1
 80117e2:	105b      	asrs	r3, r3, #1
 80117e4:	e7ef      	b.n	80117c6 <__gethex+0x132>
 80117e6:	2300      	movs	r3, #0
 80117e8:	f100 0a14 	add.w	sl, r0, #20
 80117ec:	4655      	mov	r5, sl
 80117ee:	469b      	mov	fp, r3
 80117f0:	45b1      	cmp	r9, r6
 80117f2:	d337      	bcc.n	8011864 <__gethex+0x1d0>
 80117f4:	f845 bb04 	str.w	fp, [r5], #4
 80117f8:	eba5 050a 	sub.w	r5, r5, sl
 80117fc:	10ad      	asrs	r5, r5, #2
 80117fe:	6125      	str	r5, [r4, #16]
 8011800:	4658      	mov	r0, fp
 8011802:	f7fd feb9 	bl	800f578 <__hi0bits>
 8011806:	016d      	lsls	r5, r5, #5
 8011808:	f8d8 6000 	ldr.w	r6, [r8]
 801180c:	1a2d      	subs	r5, r5, r0
 801180e:	42b5      	cmp	r5, r6
 8011810:	dd54      	ble.n	80118bc <__gethex+0x228>
 8011812:	1bad      	subs	r5, r5, r6
 8011814:	4629      	mov	r1, r5
 8011816:	4620      	mov	r0, r4
 8011818:	f7fe fa3b 	bl	800fc92 <__any_on>
 801181c:	4681      	mov	r9, r0
 801181e:	b178      	cbz	r0, 8011840 <__gethex+0x1ac>
 8011820:	f04f 0901 	mov.w	r9, #1
 8011824:	1e6b      	subs	r3, r5, #1
 8011826:	1159      	asrs	r1, r3, #5
 8011828:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801182c:	f003 021f 	and.w	r2, r3, #31
 8011830:	fa09 f202 	lsl.w	r2, r9, r2
 8011834:	420a      	tst	r2, r1
 8011836:	d003      	beq.n	8011840 <__gethex+0x1ac>
 8011838:	454b      	cmp	r3, r9
 801183a:	dc36      	bgt.n	80118aa <__gethex+0x216>
 801183c:	f04f 0902 	mov.w	r9, #2
 8011840:	4629      	mov	r1, r5
 8011842:	4620      	mov	r0, r4
 8011844:	f7ff febe 	bl	80115c4 <rshift>
 8011848:	442f      	add	r7, r5
 801184a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801184e:	42bb      	cmp	r3, r7
 8011850:	da42      	bge.n	80118d8 <__gethex+0x244>
 8011852:	4621      	mov	r1, r4
 8011854:	9801      	ldr	r0, [sp, #4]
 8011856:	f7fd fddd 	bl	800f414 <_Bfree>
 801185a:	2300      	movs	r3, #0
 801185c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801185e:	25a3      	movs	r5, #163	@ 0xa3
 8011860:	6013      	str	r3, [r2, #0]
 8011862:	e793      	b.n	801178c <__gethex+0xf8>
 8011864:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011868:	2a2e      	cmp	r2, #46	@ 0x2e
 801186a:	d012      	beq.n	8011892 <__gethex+0x1fe>
 801186c:	2b20      	cmp	r3, #32
 801186e:	d104      	bne.n	801187a <__gethex+0x1e6>
 8011870:	f845 bb04 	str.w	fp, [r5], #4
 8011874:	f04f 0b00 	mov.w	fp, #0
 8011878:	465b      	mov	r3, fp
 801187a:	7830      	ldrb	r0, [r6, #0]
 801187c:	9303      	str	r3, [sp, #12]
 801187e:	f7ff fef4 	bl	801166a <__hexdig_fun>
 8011882:	9b03      	ldr	r3, [sp, #12]
 8011884:	f000 000f 	and.w	r0, r0, #15
 8011888:	4098      	lsls	r0, r3
 801188a:	ea4b 0b00 	orr.w	fp, fp, r0
 801188e:	3304      	adds	r3, #4
 8011890:	e7ae      	b.n	80117f0 <__gethex+0x15c>
 8011892:	45b1      	cmp	r9, r6
 8011894:	d8ea      	bhi.n	801186c <__gethex+0x1d8>
 8011896:	2201      	movs	r2, #1
 8011898:	4630      	mov	r0, r6
 801189a:	492a      	ldr	r1, [pc, #168]	@ (8011944 <__gethex+0x2b0>)
 801189c:	9303      	str	r3, [sp, #12]
 801189e:	f7fc fd83 	bl	800e3a8 <strncmp>
 80118a2:	9b03      	ldr	r3, [sp, #12]
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d1e1      	bne.n	801186c <__gethex+0x1d8>
 80118a8:	e7a2      	b.n	80117f0 <__gethex+0x15c>
 80118aa:	4620      	mov	r0, r4
 80118ac:	1ea9      	subs	r1, r5, #2
 80118ae:	f7fe f9f0 	bl	800fc92 <__any_on>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d0c2      	beq.n	801183c <__gethex+0x1a8>
 80118b6:	f04f 0903 	mov.w	r9, #3
 80118ba:	e7c1      	b.n	8011840 <__gethex+0x1ac>
 80118bc:	da09      	bge.n	80118d2 <__gethex+0x23e>
 80118be:	1b75      	subs	r5, r6, r5
 80118c0:	4621      	mov	r1, r4
 80118c2:	462a      	mov	r2, r5
 80118c4:	9801      	ldr	r0, [sp, #4]
 80118c6:	f7fd ffb5 	bl	800f834 <__lshift>
 80118ca:	4604      	mov	r4, r0
 80118cc:	1b7f      	subs	r7, r7, r5
 80118ce:	f100 0a14 	add.w	sl, r0, #20
 80118d2:	f04f 0900 	mov.w	r9, #0
 80118d6:	e7b8      	b.n	801184a <__gethex+0x1b6>
 80118d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118dc:	42bd      	cmp	r5, r7
 80118de:	dd6f      	ble.n	80119c0 <__gethex+0x32c>
 80118e0:	1bed      	subs	r5, r5, r7
 80118e2:	42ae      	cmp	r6, r5
 80118e4:	dc34      	bgt.n	8011950 <__gethex+0x2bc>
 80118e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d022      	beq.n	8011934 <__gethex+0x2a0>
 80118ee:	2b03      	cmp	r3, #3
 80118f0:	d024      	beq.n	801193c <__gethex+0x2a8>
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d115      	bne.n	8011922 <__gethex+0x28e>
 80118f6:	42ae      	cmp	r6, r5
 80118f8:	d113      	bne.n	8011922 <__gethex+0x28e>
 80118fa:	2e01      	cmp	r6, #1
 80118fc:	d10b      	bne.n	8011916 <__gethex+0x282>
 80118fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011902:	9a02      	ldr	r2, [sp, #8]
 8011904:	2562      	movs	r5, #98	@ 0x62
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	2301      	movs	r3, #1
 801190a:	6123      	str	r3, [r4, #16]
 801190c:	f8ca 3000 	str.w	r3, [sl]
 8011910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011912:	601c      	str	r4, [r3, #0]
 8011914:	e73a      	b.n	801178c <__gethex+0xf8>
 8011916:	4620      	mov	r0, r4
 8011918:	1e71      	subs	r1, r6, #1
 801191a:	f7fe f9ba 	bl	800fc92 <__any_on>
 801191e:	2800      	cmp	r0, #0
 8011920:	d1ed      	bne.n	80118fe <__gethex+0x26a>
 8011922:	4621      	mov	r1, r4
 8011924:	9801      	ldr	r0, [sp, #4]
 8011926:	f7fd fd75 	bl	800f414 <_Bfree>
 801192a:	2300      	movs	r3, #0
 801192c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801192e:	2550      	movs	r5, #80	@ 0x50
 8011930:	6013      	str	r3, [r2, #0]
 8011932:	e72b      	b.n	801178c <__gethex+0xf8>
 8011934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011936:	2b00      	cmp	r3, #0
 8011938:	d1f3      	bne.n	8011922 <__gethex+0x28e>
 801193a:	e7e0      	b.n	80118fe <__gethex+0x26a>
 801193c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1dd      	bne.n	80118fe <__gethex+0x26a>
 8011942:	e7ee      	b.n	8011922 <__gethex+0x28e>
 8011944:	08012bbb 	.word	0x08012bbb
 8011948:	08012b51 	.word	0x08012b51
 801194c:	08012c2d 	.word	0x08012c2d
 8011950:	1e6f      	subs	r7, r5, #1
 8011952:	f1b9 0f00 	cmp.w	r9, #0
 8011956:	d130      	bne.n	80119ba <__gethex+0x326>
 8011958:	b127      	cbz	r7, 8011964 <__gethex+0x2d0>
 801195a:	4639      	mov	r1, r7
 801195c:	4620      	mov	r0, r4
 801195e:	f7fe f998 	bl	800fc92 <__any_on>
 8011962:	4681      	mov	r9, r0
 8011964:	2301      	movs	r3, #1
 8011966:	4629      	mov	r1, r5
 8011968:	1b76      	subs	r6, r6, r5
 801196a:	2502      	movs	r5, #2
 801196c:	117a      	asrs	r2, r7, #5
 801196e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011972:	f007 071f 	and.w	r7, r7, #31
 8011976:	40bb      	lsls	r3, r7
 8011978:	4213      	tst	r3, r2
 801197a:	4620      	mov	r0, r4
 801197c:	bf18      	it	ne
 801197e:	f049 0902 	orrne.w	r9, r9, #2
 8011982:	f7ff fe1f 	bl	80115c4 <rshift>
 8011986:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801198a:	f1b9 0f00 	cmp.w	r9, #0
 801198e:	d047      	beq.n	8011a20 <__gethex+0x38c>
 8011990:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011994:	2b02      	cmp	r3, #2
 8011996:	d015      	beq.n	80119c4 <__gethex+0x330>
 8011998:	2b03      	cmp	r3, #3
 801199a:	d017      	beq.n	80119cc <__gethex+0x338>
 801199c:	2b01      	cmp	r3, #1
 801199e:	d109      	bne.n	80119b4 <__gethex+0x320>
 80119a0:	f019 0f02 	tst.w	r9, #2
 80119a4:	d006      	beq.n	80119b4 <__gethex+0x320>
 80119a6:	f8da 3000 	ldr.w	r3, [sl]
 80119aa:	ea49 0903 	orr.w	r9, r9, r3
 80119ae:	f019 0f01 	tst.w	r9, #1
 80119b2:	d10e      	bne.n	80119d2 <__gethex+0x33e>
 80119b4:	f045 0510 	orr.w	r5, r5, #16
 80119b8:	e032      	b.n	8011a20 <__gethex+0x38c>
 80119ba:	f04f 0901 	mov.w	r9, #1
 80119be:	e7d1      	b.n	8011964 <__gethex+0x2d0>
 80119c0:	2501      	movs	r5, #1
 80119c2:	e7e2      	b.n	801198a <__gethex+0x2f6>
 80119c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119c6:	f1c3 0301 	rsb	r3, r3, #1
 80119ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d0f0      	beq.n	80119b4 <__gethex+0x320>
 80119d2:	f04f 0c00 	mov.w	ip, #0
 80119d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80119da:	f104 0314 	add.w	r3, r4, #20
 80119de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80119e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80119e6:	4618      	mov	r0, r3
 80119e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80119f0:	d01b      	beq.n	8011a2a <__gethex+0x396>
 80119f2:	3201      	adds	r2, #1
 80119f4:	6002      	str	r2, [r0, #0]
 80119f6:	2d02      	cmp	r5, #2
 80119f8:	f104 0314 	add.w	r3, r4, #20
 80119fc:	d13c      	bne.n	8011a78 <__gethex+0x3e4>
 80119fe:	f8d8 2000 	ldr.w	r2, [r8]
 8011a02:	3a01      	subs	r2, #1
 8011a04:	42b2      	cmp	r2, r6
 8011a06:	d109      	bne.n	8011a1c <__gethex+0x388>
 8011a08:	2201      	movs	r2, #1
 8011a0a:	1171      	asrs	r1, r6, #5
 8011a0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a10:	f006 061f 	and.w	r6, r6, #31
 8011a14:	fa02 f606 	lsl.w	r6, r2, r6
 8011a18:	421e      	tst	r6, r3
 8011a1a:	d13a      	bne.n	8011a92 <__gethex+0x3fe>
 8011a1c:	f045 0520 	orr.w	r5, r5, #32
 8011a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a22:	601c      	str	r4, [r3, #0]
 8011a24:	9b02      	ldr	r3, [sp, #8]
 8011a26:	601f      	str	r7, [r3, #0]
 8011a28:	e6b0      	b.n	801178c <__gethex+0xf8>
 8011a2a:	4299      	cmp	r1, r3
 8011a2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a30:	d8d9      	bhi.n	80119e6 <__gethex+0x352>
 8011a32:	68a3      	ldr	r3, [r4, #8]
 8011a34:	459b      	cmp	fp, r3
 8011a36:	db17      	blt.n	8011a68 <__gethex+0x3d4>
 8011a38:	6861      	ldr	r1, [r4, #4]
 8011a3a:	9801      	ldr	r0, [sp, #4]
 8011a3c:	3101      	adds	r1, #1
 8011a3e:	f7fd fca9 	bl	800f394 <_Balloc>
 8011a42:	4681      	mov	r9, r0
 8011a44:	b918      	cbnz	r0, 8011a4e <__gethex+0x3ba>
 8011a46:	4602      	mov	r2, r0
 8011a48:	2184      	movs	r1, #132	@ 0x84
 8011a4a:	4b19      	ldr	r3, [pc, #100]	@ (8011ab0 <__gethex+0x41c>)
 8011a4c:	e6c5      	b.n	80117da <__gethex+0x146>
 8011a4e:	6922      	ldr	r2, [r4, #16]
 8011a50:	f104 010c 	add.w	r1, r4, #12
 8011a54:	3202      	adds	r2, #2
 8011a56:	0092      	lsls	r2, r2, #2
 8011a58:	300c      	adds	r0, #12
 8011a5a:	f7ff fd6d 	bl	8011538 <memcpy>
 8011a5e:	4621      	mov	r1, r4
 8011a60:	9801      	ldr	r0, [sp, #4]
 8011a62:	f7fd fcd7 	bl	800f414 <_Bfree>
 8011a66:	464c      	mov	r4, r9
 8011a68:	6923      	ldr	r3, [r4, #16]
 8011a6a:	1c5a      	adds	r2, r3, #1
 8011a6c:	6122      	str	r2, [r4, #16]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a74:	615a      	str	r2, [r3, #20]
 8011a76:	e7be      	b.n	80119f6 <__gethex+0x362>
 8011a78:	6922      	ldr	r2, [r4, #16]
 8011a7a:	455a      	cmp	r2, fp
 8011a7c:	dd0b      	ble.n	8011a96 <__gethex+0x402>
 8011a7e:	2101      	movs	r1, #1
 8011a80:	4620      	mov	r0, r4
 8011a82:	f7ff fd9f 	bl	80115c4 <rshift>
 8011a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a8a:	3701      	adds	r7, #1
 8011a8c:	42bb      	cmp	r3, r7
 8011a8e:	f6ff aee0 	blt.w	8011852 <__gethex+0x1be>
 8011a92:	2501      	movs	r5, #1
 8011a94:	e7c2      	b.n	8011a1c <__gethex+0x388>
 8011a96:	f016 061f 	ands.w	r6, r6, #31
 8011a9a:	d0fa      	beq.n	8011a92 <__gethex+0x3fe>
 8011a9c:	4453      	add	r3, sl
 8011a9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011aa2:	f7fd fd69 	bl	800f578 <__hi0bits>
 8011aa6:	f1c6 0620 	rsb	r6, r6, #32
 8011aaa:	42b0      	cmp	r0, r6
 8011aac:	dbe7      	blt.n	8011a7e <__gethex+0x3ea>
 8011aae:	e7f0      	b.n	8011a92 <__gethex+0x3fe>
 8011ab0:	08012b51 	.word	0x08012b51

08011ab4 <L_shift>:
 8011ab4:	f1c2 0208 	rsb	r2, r2, #8
 8011ab8:	0092      	lsls	r2, r2, #2
 8011aba:	b570      	push	{r4, r5, r6, lr}
 8011abc:	f1c2 0620 	rsb	r6, r2, #32
 8011ac0:	6843      	ldr	r3, [r0, #4]
 8011ac2:	6804      	ldr	r4, [r0, #0]
 8011ac4:	fa03 f506 	lsl.w	r5, r3, r6
 8011ac8:	432c      	orrs	r4, r5
 8011aca:	40d3      	lsrs	r3, r2
 8011acc:	6004      	str	r4, [r0, #0]
 8011ace:	f840 3f04 	str.w	r3, [r0, #4]!
 8011ad2:	4288      	cmp	r0, r1
 8011ad4:	d3f4      	bcc.n	8011ac0 <L_shift+0xc>
 8011ad6:	bd70      	pop	{r4, r5, r6, pc}

08011ad8 <__match>:
 8011ad8:	b530      	push	{r4, r5, lr}
 8011ada:	6803      	ldr	r3, [r0, #0]
 8011adc:	3301      	adds	r3, #1
 8011ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ae2:	b914      	cbnz	r4, 8011aea <__match+0x12>
 8011ae4:	6003      	str	r3, [r0, #0]
 8011ae6:	2001      	movs	r0, #1
 8011ae8:	bd30      	pop	{r4, r5, pc}
 8011aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011af2:	2d19      	cmp	r5, #25
 8011af4:	bf98      	it	ls
 8011af6:	3220      	addls	r2, #32
 8011af8:	42a2      	cmp	r2, r4
 8011afa:	d0f0      	beq.n	8011ade <__match+0x6>
 8011afc:	2000      	movs	r0, #0
 8011afe:	e7f3      	b.n	8011ae8 <__match+0x10>

08011b00 <__hexnan>:
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	2500      	movs	r5, #0
 8011b06:	680b      	ldr	r3, [r1, #0]
 8011b08:	4682      	mov	sl, r0
 8011b0a:	115e      	asrs	r6, r3, #5
 8011b0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b10:	f013 031f 	ands.w	r3, r3, #31
 8011b14:	bf18      	it	ne
 8011b16:	3604      	addne	r6, #4
 8011b18:	1f37      	subs	r7, r6, #4
 8011b1a:	4690      	mov	r8, r2
 8011b1c:	46b9      	mov	r9, r7
 8011b1e:	463c      	mov	r4, r7
 8011b20:	46ab      	mov	fp, r5
 8011b22:	b087      	sub	sp, #28
 8011b24:	6801      	ldr	r1, [r0, #0]
 8011b26:	9301      	str	r3, [sp, #4]
 8011b28:	f846 5c04 	str.w	r5, [r6, #-4]
 8011b2c:	9502      	str	r5, [sp, #8]
 8011b2e:	784a      	ldrb	r2, [r1, #1]
 8011b30:	1c4b      	adds	r3, r1, #1
 8011b32:	9303      	str	r3, [sp, #12]
 8011b34:	b342      	cbz	r2, 8011b88 <__hexnan+0x88>
 8011b36:	4610      	mov	r0, r2
 8011b38:	9105      	str	r1, [sp, #20]
 8011b3a:	9204      	str	r2, [sp, #16]
 8011b3c:	f7ff fd95 	bl	801166a <__hexdig_fun>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d151      	bne.n	8011be8 <__hexnan+0xe8>
 8011b44:	9a04      	ldr	r2, [sp, #16]
 8011b46:	9905      	ldr	r1, [sp, #20]
 8011b48:	2a20      	cmp	r2, #32
 8011b4a:	d818      	bhi.n	8011b7e <__hexnan+0x7e>
 8011b4c:	9b02      	ldr	r3, [sp, #8]
 8011b4e:	459b      	cmp	fp, r3
 8011b50:	dd13      	ble.n	8011b7a <__hexnan+0x7a>
 8011b52:	454c      	cmp	r4, r9
 8011b54:	d206      	bcs.n	8011b64 <__hexnan+0x64>
 8011b56:	2d07      	cmp	r5, #7
 8011b58:	dc04      	bgt.n	8011b64 <__hexnan+0x64>
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	4649      	mov	r1, r9
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f7ff ffa8 	bl	8011ab4 <L_shift>
 8011b64:	4544      	cmp	r4, r8
 8011b66:	d952      	bls.n	8011c0e <__hexnan+0x10e>
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f1a4 0904 	sub.w	r9, r4, #4
 8011b6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b72:	461d      	mov	r5, r3
 8011b74:	464c      	mov	r4, r9
 8011b76:	f8cd b008 	str.w	fp, [sp, #8]
 8011b7a:	9903      	ldr	r1, [sp, #12]
 8011b7c:	e7d7      	b.n	8011b2e <__hexnan+0x2e>
 8011b7e:	2a29      	cmp	r2, #41	@ 0x29
 8011b80:	d157      	bne.n	8011c32 <__hexnan+0x132>
 8011b82:	3102      	adds	r1, #2
 8011b84:	f8ca 1000 	str.w	r1, [sl]
 8011b88:	f1bb 0f00 	cmp.w	fp, #0
 8011b8c:	d051      	beq.n	8011c32 <__hexnan+0x132>
 8011b8e:	454c      	cmp	r4, r9
 8011b90:	d206      	bcs.n	8011ba0 <__hexnan+0xa0>
 8011b92:	2d07      	cmp	r5, #7
 8011b94:	dc04      	bgt.n	8011ba0 <__hexnan+0xa0>
 8011b96:	462a      	mov	r2, r5
 8011b98:	4649      	mov	r1, r9
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f7ff ff8a 	bl	8011ab4 <L_shift>
 8011ba0:	4544      	cmp	r4, r8
 8011ba2:	d936      	bls.n	8011c12 <__hexnan+0x112>
 8011ba4:	4623      	mov	r3, r4
 8011ba6:	f1a8 0204 	sub.w	r2, r8, #4
 8011baa:	f853 1b04 	ldr.w	r1, [r3], #4
 8011bae:	429f      	cmp	r7, r3
 8011bb0:	f842 1f04 	str.w	r1, [r2, #4]!
 8011bb4:	d2f9      	bcs.n	8011baa <__hexnan+0xaa>
 8011bb6:	1b3b      	subs	r3, r7, r4
 8011bb8:	f023 0303 	bic.w	r3, r3, #3
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	3401      	adds	r4, #1
 8011bc0:	3e03      	subs	r6, #3
 8011bc2:	42b4      	cmp	r4, r6
 8011bc4:	bf88      	it	hi
 8011bc6:	2304      	movhi	r3, #4
 8011bc8:	2200      	movs	r2, #0
 8011bca:	4443      	add	r3, r8
 8011bcc:	f843 2b04 	str.w	r2, [r3], #4
 8011bd0:	429f      	cmp	r7, r3
 8011bd2:	d2fb      	bcs.n	8011bcc <__hexnan+0xcc>
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	b91b      	cbnz	r3, 8011be0 <__hexnan+0xe0>
 8011bd8:	4547      	cmp	r7, r8
 8011bda:	d128      	bne.n	8011c2e <__hexnan+0x12e>
 8011bdc:	2301      	movs	r3, #1
 8011bde:	603b      	str	r3, [r7, #0]
 8011be0:	2005      	movs	r0, #5
 8011be2:	b007      	add	sp, #28
 8011be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be8:	3501      	adds	r5, #1
 8011bea:	2d08      	cmp	r5, #8
 8011bec:	f10b 0b01 	add.w	fp, fp, #1
 8011bf0:	dd06      	ble.n	8011c00 <__hexnan+0x100>
 8011bf2:	4544      	cmp	r4, r8
 8011bf4:	d9c1      	bls.n	8011b7a <__hexnan+0x7a>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	2501      	movs	r5, #1
 8011bfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bfe:	3c04      	subs	r4, #4
 8011c00:	6822      	ldr	r2, [r4, #0]
 8011c02:	f000 000f 	and.w	r0, r0, #15
 8011c06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011c0a:	6020      	str	r0, [r4, #0]
 8011c0c:	e7b5      	b.n	8011b7a <__hexnan+0x7a>
 8011c0e:	2508      	movs	r5, #8
 8011c10:	e7b3      	b.n	8011b7a <__hexnan+0x7a>
 8011c12:	9b01      	ldr	r3, [sp, #4]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d0dd      	beq.n	8011bd4 <__hexnan+0xd4>
 8011c18:	f04f 32ff 	mov.w	r2, #4294967295
 8011c1c:	f1c3 0320 	rsb	r3, r3, #32
 8011c20:	40da      	lsrs	r2, r3
 8011c22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c26:	4013      	ands	r3, r2
 8011c28:	f846 3c04 	str.w	r3, [r6, #-4]
 8011c2c:	e7d2      	b.n	8011bd4 <__hexnan+0xd4>
 8011c2e:	3f04      	subs	r7, #4
 8011c30:	e7d0      	b.n	8011bd4 <__hexnan+0xd4>
 8011c32:	2004      	movs	r0, #4
 8011c34:	e7d5      	b.n	8011be2 <__hexnan+0xe2>

08011c36 <__ascii_mbtowc>:
 8011c36:	b082      	sub	sp, #8
 8011c38:	b901      	cbnz	r1, 8011c3c <__ascii_mbtowc+0x6>
 8011c3a:	a901      	add	r1, sp, #4
 8011c3c:	b142      	cbz	r2, 8011c50 <__ascii_mbtowc+0x1a>
 8011c3e:	b14b      	cbz	r3, 8011c54 <__ascii_mbtowc+0x1e>
 8011c40:	7813      	ldrb	r3, [r2, #0]
 8011c42:	600b      	str	r3, [r1, #0]
 8011c44:	7812      	ldrb	r2, [r2, #0]
 8011c46:	1e10      	subs	r0, r2, #0
 8011c48:	bf18      	it	ne
 8011c4a:	2001      	movne	r0, #1
 8011c4c:	b002      	add	sp, #8
 8011c4e:	4770      	bx	lr
 8011c50:	4610      	mov	r0, r2
 8011c52:	e7fb      	b.n	8011c4c <__ascii_mbtowc+0x16>
 8011c54:	f06f 0001 	mvn.w	r0, #1
 8011c58:	e7f8      	b.n	8011c4c <__ascii_mbtowc+0x16>

08011c5a <_realloc_r>:
 8011c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5e:	4607      	mov	r7, r0
 8011c60:	4614      	mov	r4, r2
 8011c62:	460d      	mov	r5, r1
 8011c64:	b921      	cbnz	r1, 8011c70 <_realloc_r+0x16>
 8011c66:	4611      	mov	r1, r2
 8011c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6c:	f7fd bb06 	b.w	800f27c <_malloc_r>
 8011c70:	b92a      	cbnz	r2, 8011c7e <_realloc_r+0x24>
 8011c72:	f7fd fa91 	bl	800f198 <_free_r>
 8011c76:	4625      	mov	r5, r4
 8011c78:	4628      	mov	r0, r5
 8011c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c7e:	f000 f8b2 	bl	8011de6 <_malloc_usable_size_r>
 8011c82:	4284      	cmp	r4, r0
 8011c84:	4606      	mov	r6, r0
 8011c86:	d802      	bhi.n	8011c8e <_realloc_r+0x34>
 8011c88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c8c:	d8f4      	bhi.n	8011c78 <_realloc_r+0x1e>
 8011c8e:	4621      	mov	r1, r4
 8011c90:	4638      	mov	r0, r7
 8011c92:	f7fd faf3 	bl	800f27c <_malloc_r>
 8011c96:	4680      	mov	r8, r0
 8011c98:	b908      	cbnz	r0, 8011c9e <_realloc_r+0x44>
 8011c9a:	4645      	mov	r5, r8
 8011c9c:	e7ec      	b.n	8011c78 <_realloc_r+0x1e>
 8011c9e:	42b4      	cmp	r4, r6
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	bf28      	it	cs
 8011ca6:	4632      	movcs	r2, r6
 8011ca8:	f7ff fc46 	bl	8011538 <memcpy>
 8011cac:	4629      	mov	r1, r5
 8011cae:	4638      	mov	r0, r7
 8011cb0:	f7fd fa72 	bl	800f198 <_free_r>
 8011cb4:	e7f1      	b.n	8011c9a <_realloc_r+0x40>
	...

08011cb8 <_strtoul_l.isra.0>:
 8011cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	4686      	mov	lr, r0
 8011cbe:	460d      	mov	r5, r1
 8011cc0:	4e33      	ldr	r6, [pc, #204]	@ (8011d90 <_strtoul_l.isra.0+0xd8>)
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cc8:	5d37      	ldrb	r7, [r6, r4]
 8011cca:	f017 0708 	ands.w	r7, r7, #8
 8011cce:	d1f8      	bne.n	8011cc2 <_strtoul_l.isra.0+0xa>
 8011cd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8011cd2:	d110      	bne.n	8011cf6 <_strtoul_l.isra.0+0x3e>
 8011cd4:	2701      	movs	r7, #1
 8011cd6:	782c      	ldrb	r4, [r5, #0]
 8011cd8:	1c85      	adds	r5, r0, #2
 8011cda:	f033 0010 	bics.w	r0, r3, #16
 8011cde:	d115      	bne.n	8011d0c <_strtoul_l.isra.0+0x54>
 8011ce0:	2c30      	cmp	r4, #48	@ 0x30
 8011ce2:	d10d      	bne.n	8011d00 <_strtoul_l.isra.0+0x48>
 8011ce4:	7828      	ldrb	r0, [r5, #0]
 8011ce6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011cea:	2858      	cmp	r0, #88	@ 0x58
 8011cec:	d108      	bne.n	8011d00 <_strtoul_l.isra.0+0x48>
 8011cee:	786c      	ldrb	r4, [r5, #1]
 8011cf0:	3502      	adds	r5, #2
 8011cf2:	2310      	movs	r3, #16
 8011cf4:	e00a      	b.n	8011d0c <_strtoul_l.isra.0+0x54>
 8011cf6:	2c2b      	cmp	r4, #43	@ 0x2b
 8011cf8:	bf04      	itt	eq
 8011cfa:	782c      	ldrbeq	r4, [r5, #0]
 8011cfc:	1c85      	addeq	r5, r0, #2
 8011cfe:	e7ec      	b.n	8011cda <_strtoul_l.isra.0+0x22>
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1f6      	bne.n	8011cf2 <_strtoul_l.isra.0+0x3a>
 8011d04:	2c30      	cmp	r4, #48	@ 0x30
 8011d06:	bf14      	ite	ne
 8011d08:	230a      	movne	r3, #10
 8011d0a:	2308      	moveq	r3, #8
 8011d0c:	f04f 38ff 	mov.w	r8, #4294967295
 8011d10:	fbb8 f8f3 	udiv	r8, r8, r3
 8011d14:	2600      	movs	r6, #0
 8011d16:	fb03 f908 	mul.w	r9, r3, r8
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	ea6f 0909 	mvn.w	r9, r9
 8011d20:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011d24:	f1bc 0f09 	cmp.w	ip, #9
 8011d28:	d810      	bhi.n	8011d4c <_strtoul_l.isra.0+0x94>
 8011d2a:	4664      	mov	r4, ip
 8011d2c:	42a3      	cmp	r3, r4
 8011d2e:	dd1e      	ble.n	8011d6e <_strtoul_l.isra.0+0xb6>
 8011d30:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011d34:	d007      	beq.n	8011d46 <_strtoul_l.isra.0+0x8e>
 8011d36:	4580      	cmp	r8, r0
 8011d38:	d316      	bcc.n	8011d68 <_strtoul_l.isra.0+0xb0>
 8011d3a:	d101      	bne.n	8011d40 <_strtoul_l.isra.0+0x88>
 8011d3c:	45a1      	cmp	r9, r4
 8011d3e:	db13      	blt.n	8011d68 <_strtoul_l.isra.0+0xb0>
 8011d40:	2601      	movs	r6, #1
 8011d42:	fb00 4003 	mla	r0, r0, r3, r4
 8011d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d4a:	e7e9      	b.n	8011d20 <_strtoul_l.isra.0+0x68>
 8011d4c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011d50:	f1bc 0f19 	cmp.w	ip, #25
 8011d54:	d801      	bhi.n	8011d5a <_strtoul_l.isra.0+0xa2>
 8011d56:	3c37      	subs	r4, #55	@ 0x37
 8011d58:	e7e8      	b.n	8011d2c <_strtoul_l.isra.0+0x74>
 8011d5a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011d5e:	f1bc 0f19 	cmp.w	ip, #25
 8011d62:	d804      	bhi.n	8011d6e <_strtoul_l.isra.0+0xb6>
 8011d64:	3c57      	subs	r4, #87	@ 0x57
 8011d66:	e7e1      	b.n	8011d2c <_strtoul_l.isra.0+0x74>
 8011d68:	f04f 36ff 	mov.w	r6, #4294967295
 8011d6c:	e7eb      	b.n	8011d46 <_strtoul_l.isra.0+0x8e>
 8011d6e:	1c73      	adds	r3, r6, #1
 8011d70:	d106      	bne.n	8011d80 <_strtoul_l.isra.0+0xc8>
 8011d72:	2322      	movs	r3, #34	@ 0x22
 8011d74:	4630      	mov	r0, r6
 8011d76:	f8ce 3000 	str.w	r3, [lr]
 8011d7a:	b932      	cbnz	r2, 8011d8a <_strtoul_l.isra.0+0xd2>
 8011d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d80:	b107      	cbz	r7, 8011d84 <_strtoul_l.isra.0+0xcc>
 8011d82:	4240      	negs	r0, r0
 8011d84:	2a00      	cmp	r2, #0
 8011d86:	d0f9      	beq.n	8011d7c <_strtoul_l.isra.0+0xc4>
 8011d88:	b106      	cbz	r6, 8011d8c <_strtoul_l.isra.0+0xd4>
 8011d8a:	1e69      	subs	r1, r5, #1
 8011d8c:	6011      	str	r1, [r2, #0]
 8011d8e:	e7f5      	b.n	8011d7c <_strtoul_l.isra.0+0xc4>
 8011d90:	08012de1 	.word	0x08012de1

08011d94 <_strtoul_r>:
 8011d94:	f7ff bf90 	b.w	8011cb8 <_strtoul_l.isra.0>

08011d98 <__ascii_wctomb>:
 8011d98:	4603      	mov	r3, r0
 8011d9a:	4608      	mov	r0, r1
 8011d9c:	b141      	cbz	r1, 8011db0 <__ascii_wctomb+0x18>
 8011d9e:	2aff      	cmp	r2, #255	@ 0xff
 8011da0:	d904      	bls.n	8011dac <__ascii_wctomb+0x14>
 8011da2:	228a      	movs	r2, #138	@ 0x8a
 8011da4:	f04f 30ff 	mov.w	r0, #4294967295
 8011da8:	601a      	str	r2, [r3, #0]
 8011daa:	4770      	bx	lr
 8011dac:	2001      	movs	r0, #1
 8011dae:	700a      	strb	r2, [r1, #0]
 8011db0:	4770      	bx	lr
	...

08011db4 <fiprintf>:
 8011db4:	b40e      	push	{r1, r2, r3}
 8011db6:	b503      	push	{r0, r1, lr}
 8011db8:	4601      	mov	r1, r0
 8011dba:	ab03      	add	r3, sp, #12
 8011dbc:	4805      	ldr	r0, [pc, #20]	@ (8011dd4 <fiprintf+0x20>)
 8011dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dc2:	6800      	ldr	r0, [r0, #0]
 8011dc4:	9301      	str	r3, [sp, #4]
 8011dc6:	f000 f83d 	bl	8011e44 <_vfiprintf_r>
 8011dca:	b002      	add	sp, #8
 8011dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dd0:	b003      	add	sp, #12
 8011dd2:	4770      	bx	lr
 8011dd4:	200001a0 	.word	0x200001a0

08011dd8 <abort>:
 8011dd8:	2006      	movs	r0, #6
 8011dda:	b508      	push	{r3, lr}
 8011ddc:	f000 fa06 	bl	80121ec <raise>
 8011de0:	2001      	movs	r0, #1
 8011de2:	f7f1 fd78 	bl	80038d6 <_exit>

08011de6 <_malloc_usable_size_r>:
 8011de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dea:	1f18      	subs	r0, r3, #4
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	bfbc      	itt	lt
 8011df0:	580b      	ldrlt	r3, [r1, r0]
 8011df2:	18c0      	addlt	r0, r0, r3
 8011df4:	4770      	bx	lr

08011df6 <__sfputc_r>:
 8011df6:	6893      	ldr	r3, [r2, #8]
 8011df8:	b410      	push	{r4}
 8011dfa:	3b01      	subs	r3, #1
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	6093      	str	r3, [r2, #8]
 8011e00:	da07      	bge.n	8011e12 <__sfputc_r+0x1c>
 8011e02:	6994      	ldr	r4, [r2, #24]
 8011e04:	42a3      	cmp	r3, r4
 8011e06:	db01      	blt.n	8011e0c <__sfputc_r+0x16>
 8011e08:	290a      	cmp	r1, #10
 8011e0a:	d102      	bne.n	8011e12 <__sfputc_r+0x1c>
 8011e0c:	bc10      	pop	{r4}
 8011e0e:	f000 b931 	b.w	8012074 <__swbuf_r>
 8011e12:	6813      	ldr	r3, [r2, #0]
 8011e14:	1c58      	adds	r0, r3, #1
 8011e16:	6010      	str	r0, [r2, #0]
 8011e18:	7019      	strb	r1, [r3, #0]
 8011e1a:	4608      	mov	r0, r1
 8011e1c:	bc10      	pop	{r4}
 8011e1e:	4770      	bx	lr

08011e20 <__sfputs_r>:
 8011e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e22:	4606      	mov	r6, r0
 8011e24:	460f      	mov	r7, r1
 8011e26:	4614      	mov	r4, r2
 8011e28:	18d5      	adds	r5, r2, r3
 8011e2a:	42ac      	cmp	r4, r5
 8011e2c:	d101      	bne.n	8011e32 <__sfputs_r+0x12>
 8011e2e:	2000      	movs	r0, #0
 8011e30:	e007      	b.n	8011e42 <__sfputs_r+0x22>
 8011e32:	463a      	mov	r2, r7
 8011e34:	4630      	mov	r0, r6
 8011e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e3a:	f7ff ffdc 	bl	8011df6 <__sfputc_r>
 8011e3e:	1c43      	adds	r3, r0, #1
 8011e40:	d1f3      	bne.n	8011e2a <__sfputs_r+0xa>
 8011e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e44 <_vfiprintf_r>:
 8011e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e48:	460d      	mov	r5, r1
 8011e4a:	4614      	mov	r4, r2
 8011e4c:	4698      	mov	r8, r3
 8011e4e:	4606      	mov	r6, r0
 8011e50:	b09d      	sub	sp, #116	@ 0x74
 8011e52:	b118      	cbz	r0, 8011e5c <_vfiprintf_r+0x18>
 8011e54:	6a03      	ldr	r3, [r0, #32]
 8011e56:	b90b      	cbnz	r3, 8011e5c <_vfiprintf_r+0x18>
 8011e58:	f7fc f998 	bl	800e18c <__sinit>
 8011e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e5e:	07d9      	lsls	r1, r3, #31
 8011e60:	d405      	bmi.n	8011e6e <_vfiprintf_r+0x2a>
 8011e62:	89ab      	ldrh	r3, [r5, #12]
 8011e64:	059a      	lsls	r2, r3, #22
 8011e66:	d402      	bmi.n	8011e6e <_vfiprintf_r+0x2a>
 8011e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e6a:	f7fc fb24 	bl	800e4b6 <__retarget_lock_acquire_recursive>
 8011e6e:	89ab      	ldrh	r3, [r5, #12]
 8011e70:	071b      	lsls	r3, r3, #28
 8011e72:	d501      	bpl.n	8011e78 <_vfiprintf_r+0x34>
 8011e74:	692b      	ldr	r3, [r5, #16]
 8011e76:	b99b      	cbnz	r3, 8011ea0 <_vfiprintf_r+0x5c>
 8011e78:	4629      	mov	r1, r5
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	f000 f938 	bl	80120f0 <__swsetup_r>
 8011e80:	b170      	cbz	r0, 8011ea0 <_vfiprintf_r+0x5c>
 8011e82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e84:	07dc      	lsls	r4, r3, #31
 8011e86:	d504      	bpl.n	8011e92 <_vfiprintf_r+0x4e>
 8011e88:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8c:	b01d      	add	sp, #116	@ 0x74
 8011e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e92:	89ab      	ldrh	r3, [r5, #12]
 8011e94:	0598      	lsls	r0, r3, #22
 8011e96:	d4f7      	bmi.n	8011e88 <_vfiprintf_r+0x44>
 8011e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e9a:	f7fc fb0d 	bl	800e4b8 <__retarget_lock_release_recursive>
 8011e9e:	e7f3      	b.n	8011e88 <_vfiprintf_r+0x44>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ea4:	2320      	movs	r3, #32
 8011ea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011eaa:	2330      	movs	r3, #48	@ 0x30
 8011eac:	f04f 0901 	mov.w	r9, #1
 8011eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8012060 <_vfiprintf_r+0x21c>
 8011eb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ebc:	4623      	mov	r3, r4
 8011ebe:	469a      	mov	sl, r3
 8011ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ec4:	b10a      	cbz	r2, 8011eca <_vfiprintf_r+0x86>
 8011ec6:	2a25      	cmp	r2, #37	@ 0x25
 8011ec8:	d1f9      	bne.n	8011ebe <_vfiprintf_r+0x7a>
 8011eca:	ebba 0b04 	subs.w	fp, sl, r4
 8011ece:	d00b      	beq.n	8011ee8 <_vfiprintf_r+0xa4>
 8011ed0:	465b      	mov	r3, fp
 8011ed2:	4622      	mov	r2, r4
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	f7ff ffa2 	bl	8011e20 <__sfputs_r>
 8011edc:	3001      	adds	r0, #1
 8011ede:	f000 80a7 	beq.w	8012030 <_vfiprintf_r+0x1ec>
 8011ee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ee4:	445a      	add	r2, fp
 8011ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	f000 809f 	beq.w	8012030 <_vfiprintf_r+0x1ec>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011efc:	f10a 0a01 	add.w	sl, sl, #1
 8011f00:	9304      	str	r3, [sp, #16]
 8011f02:	9307      	str	r3, [sp, #28]
 8011f04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f08:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f0a:	4654      	mov	r4, sl
 8011f0c:	2205      	movs	r2, #5
 8011f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f12:	4853      	ldr	r0, [pc, #332]	@ (8012060 <_vfiprintf_r+0x21c>)
 8011f14:	f7fc fad1 	bl	800e4ba <memchr>
 8011f18:	9a04      	ldr	r2, [sp, #16]
 8011f1a:	b9d8      	cbnz	r0, 8011f54 <_vfiprintf_r+0x110>
 8011f1c:	06d1      	lsls	r1, r2, #27
 8011f1e:	bf44      	itt	mi
 8011f20:	2320      	movmi	r3, #32
 8011f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f26:	0713      	lsls	r3, r2, #28
 8011f28:	bf44      	itt	mi
 8011f2a:	232b      	movmi	r3, #43	@ 0x2b
 8011f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f30:	f89a 3000 	ldrb.w	r3, [sl]
 8011f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f36:	d015      	beq.n	8011f64 <_vfiprintf_r+0x120>
 8011f38:	4654      	mov	r4, sl
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	f04f 0c0a 	mov.w	ip, #10
 8011f40:	9a07      	ldr	r2, [sp, #28]
 8011f42:	4621      	mov	r1, r4
 8011f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f48:	3b30      	subs	r3, #48	@ 0x30
 8011f4a:	2b09      	cmp	r3, #9
 8011f4c:	d94b      	bls.n	8011fe6 <_vfiprintf_r+0x1a2>
 8011f4e:	b1b0      	cbz	r0, 8011f7e <_vfiprintf_r+0x13a>
 8011f50:	9207      	str	r2, [sp, #28]
 8011f52:	e014      	b.n	8011f7e <_vfiprintf_r+0x13a>
 8011f54:	eba0 0308 	sub.w	r3, r0, r8
 8011f58:	fa09 f303 	lsl.w	r3, r9, r3
 8011f5c:	4313      	orrs	r3, r2
 8011f5e:	46a2      	mov	sl, r4
 8011f60:	9304      	str	r3, [sp, #16]
 8011f62:	e7d2      	b.n	8011f0a <_vfiprintf_r+0xc6>
 8011f64:	9b03      	ldr	r3, [sp, #12]
 8011f66:	1d19      	adds	r1, r3, #4
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	9103      	str	r1, [sp, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	bfbb      	ittet	lt
 8011f70:	425b      	neglt	r3, r3
 8011f72:	f042 0202 	orrlt.w	r2, r2, #2
 8011f76:	9307      	strge	r3, [sp, #28]
 8011f78:	9307      	strlt	r3, [sp, #28]
 8011f7a:	bfb8      	it	lt
 8011f7c:	9204      	strlt	r2, [sp, #16]
 8011f7e:	7823      	ldrb	r3, [r4, #0]
 8011f80:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f82:	d10a      	bne.n	8011f9a <_vfiprintf_r+0x156>
 8011f84:	7863      	ldrb	r3, [r4, #1]
 8011f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f88:	d132      	bne.n	8011ff0 <_vfiprintf_r+0x1ac>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	3402      	adds	r4, #2
 8011f8e:	1d1a      	adds	r2, r3, #4
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	9203      	str	r2, [sp, #12]
 8011f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f98:	9305      	str	r3, [sp, #20]
 8011f9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8012064 <_vfiprintf_r+0x220>
 8011f9e:	2203      	movs	r2, #3
 8011fa0:	4650      	mov	r0, sl
 8011fa2:	7821      	ldrb	r1, [r4, #0]
 8011fa4:	f7fc fa89 	bl	800e4ba <memchr>
 8011fa8:	b138      	cbz	r0, 8011fba <_vfiprintf_r+0x176>
 8011faa:	2240      	movs	r2, #64	@ 0x40
 8011fac:	9b04      	ldr	r3, [sp, #16]
 8011fae:	eba0 000a 	sub.w	r0, r0, sl
 8011fb2:	4082      	lsls	r2, r0
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	3401      	adds	r4, #1
 8011fb8:	9304      	str	r3, [sp, #16]
 8011fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fbe:	2206      	movs	r2, #6
 8011fc0:	4829      	ldr	r0, [pc, #164]	@ (8012068 <_vfiprintf_r+0x224>)
 8011fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fc6:	f7fc fa78 	bl	800e4ba <memchr>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d03f      	beq.n	801204e <_vfiprintf_r+0x20a>
 8011fce:	4b27      	ldr	r3, [pc, #156]	@ (801206c <_vfiprintf_r+0x228>)
 8011fd0:	bb1b      	cbnz	r3, 801201a <_vfiprintf_r+0x1d6>
 8011fd2:	9b03      	ldr	r3, [sp, #12]
 8011fd4:	3307      	adds	r3, #7
 8011fd6:	f023 0307 	bic.w	r3, r3, #7
 8011fda:	3308      	adds	r3, #8
 8011fdc:	9303      	str	r3, [sp, #12]
 8011fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fe0:	443b      	add	r3, r7
 8011fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fe4:	e76a      	b.n	8011ebc <_vfiprintf_r+0x78>
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	2001      	movs	r0, #1
 8011fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fee:	e7a8      	b.n	8011f42 <_vfiprintf_r+0xfe>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	f04f 0c0a 	mov.w	ip, #10
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	3401      	adds	r4, #1
 8011ffa:	9305      	str	r3, [sp, #20]
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012002:	3a30      	subs	r2, #48	@ 0x30
 8012004:	2a09      	cmp	r2, #9
 8012006:	d903      	bls.n	8012010 <_vfiprintf_r+0x1cc>
 8012008:	2b00      	cmp	r3, #0
 801200a:	d0c6      	beq.n	8011f9a <_vfiprintf_r+0x156>
 801200c:	9105      	str	r1, [sp, #20]
 801200e:	e7c4      	b.n	8011f9a <_vfiprintf_r+0x156>
 8012010:	4604      	mov	r4, r0
 8012012:	2301      	movs	r3, #1
 8012014:	fb0c 2101 	mla	r1, ip, r1, r2
 8012018:	e7f0      	b.n	8011ffc <_vfiprintf_r+0x1b8>
 801201a:	ab03      	add	r3, sp, #12
 801201c:	9300      	str	r3, [sp, #0]
 801201e:	462a      	mov	r2, r5
 8012020:	4630      	mov	r0, r6
 8012022:	4b13      	ldr	r3, [pc, #76]	@ (8012070 <_vfiprintf_r+0x22c>)
 8012024:	a904      	add	r1, sp, #16
 8012026:	f7fb fa5f 	bl	800d4e8 <_printf_float>
 801202a:	4607      	mov	r7, r0
 801202c:	1c78      	adds	r0, r7, #1
 801202e:	d1d6      	bne.n	8011fde <_vfiprintf_r+0x19a>
 8012030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012032:	07d9      	lsls	r1, r3, #31
 8012034:	d405      	bmi.n	8012042 <_vfiprintf_r+0x1fe>
 8012036:	89ab      	ldrh	r3, [r5, #12]
 8012038:	059a      	lsls	r2, r3, #22
 801203a:	d402      	bmi.n	8012042 <_vfiprintf_r+0x1fe>
 801203c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801203e:	f7fc fa3b 	bl	800e4b8 <__retarget_lock_release_recursive>
 8012042:	89ab      	ldrh	r3, [r5, #12]
 8012044:	065b      	lsls	r3, r3, #25
 8012046:	f53f af1f 	bmi.w	8011e88 <_vfiprintf_r+0x44>
 801204a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801204c:	e71e      	b.n	8011e8c <_vfiprintf_r+0x48>
 801204e:	ab03      	add	r3, sp, #12
 8012050:	9300      	str	r3, [sp, #0]
 8012052:	462a      	mov	r2, r5
 8012054:	4630      	mov	r0, r6
 8012056:	4b06      	ldr	r3, [pc, #24]	@ (8012070 <_vfiprintf_r+0x22c>)
 8012058:	a904      	add	r1, sp, #16
 801205a:	f7fb fce3 	bl	800da24 <_printf_i>
 801205e:	e7e4      	b.n	801202a <_vfiprintf_r+0x1e6>
 8012060:	08012bbd 	.word	0x08012bbd
 8012064:	08012bc3 	.word	0x08012bc3
 8012068:	08012bc7 	.word	0x08012bc7
 801206c:	0800d4e9 	.word	0x0800d4e9
 8012070:	08011e21 	.word	0x08011e21

08012074 <__swbuf_r>:
 8012074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012076:	460e      	mov	r6, r1
 8012078:	4614      	mov	r4, r2
 801207a:	4605      	mov	r5, r0
 801207c:	b118      	cbz	r0, 8012086 <__swbuf_r+0x12>
 801207e:	6a03      	ldr	r3, [r0, #32]
 8012080:	b90b      	cbnz	r3, 8012086 <__swbuf_r+0x12>
 8012082:	f7fc f883 	bl	800e18c <__sinit>
 8012086:	69a3      	ldr	r3, [r4, #24]
 8012088:	60a3      	str	r3, [r4, #8]
 801208a:	89a3      	ldrh	r3, [r4, #12]
 801208c:	071a      	lsls	r2, r3, #28
 801208e:	d501      	bpl.n	8012094 <__swbuf_r+0x20>
 8012090:	6923      	ldr	r3, [r4, #16]
 8012092:	b943      	cbnz	r3, 80120a6 <__swbuf_r+0x32>
 8012094:	4621      	mov	r1, r4
 8012096:	4628      	mov	r0, r5
 8012098:	f000 f82a 	bl	80120f0 <__swsetup_r>
 801209c:	b118      	cbz	r0, 80120a6 <__swbuf_r+0x32>
 801209e:	f04f 37ff 	mov.w	r7, #4294967295
 80120a2:	4638      	mov	r0, r7
 80120a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120a6:	6823      	ldr	r3, [r4, #0]
 80120a8:	6922      	ldr	r2, [r4, #16]
 80120aa:	b2f6      	uxtb	r6, r6
 80120ac:	1a98      	subs	r0, r3, r2
 80120ae:	6963      	ldr	r3, [r4, #20]
 80120b0:	4637      	mov	r7, r6
 80120b2:	4283      	cmp	r3, r0
 80120b4:	dc05      	bgt.n	80120c2 <__swbuf_r+0x4e>
 80120b6:	4621      	mov	r1, r4
 80120b8:	4628      	mov	r0, r5
 80120ba:	f7ff f979 	bl	80113b0 <_fflush_r>
 80120be:	2800      	cmp	r0, #0
 80120c0:	d1ed      	bne.n	801209e <__swbuf_r+0x2a>
 80120c2:	68a3      	ldr	r3, [r4, #8]
 80120c4:	3b01      	subs	r3, #1
 80120c6:	60a3      	str	r3, [r4, #8]
 80120c8:	6823      	ldr	r3, [r4, #0]
 80120ca:	1c5a      	adds	r2, r3, #1
 80120cc:	6022      	str	r2, [r4, #0]
 80120ce:	701e      	strb	r6, [r3, #0]
 80120d0:	6962      	ldr	r2, [r4, #20]
 80120d2:	1c43      	adds	r3, r0, #1
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d004      	beq.n	80120e2 <__swbuf_r+0x6e>
 80120d8:	89a3      	ldrh	r3, [r4, #12]
 80120da:	07db      	lsls	r3, r3, #31
 80120dc:	d5e1      	bpl.n	80120a2 <__swbuf_r+0x2e>
 80120de:	2e0a      	cmp	r6, #10
 80120e0:	d1df      	bne.n	80120a2 <__swbuf_r+0x2e>
 80120e2:	4621      	mov	r1, r4
 80120e4:	4628      	mov	r0, r5
 80120e6:	f7ff f963 	bl	80113b0 <_fflush_r>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	d0d9      	beq.n	80120a2 <__swbuf_r+0x2e>
 80120ee:	e7d6      	b.n	801209e <__swbuf_r+0x2a>

080120f0 <__swsetup_r>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	4b29      	ldr	r3, [pc, #164]	@ (8012198 <__swsetup_r+0xa8>)
 80120f4:	4605      	mov	r5, r0
 80120f6:	6818      	ldr	r0, [r3, #0]
 80120f8:	460c      	mov	r4, r1
 80120fa:	b118      	cbz	r0, 8012104 <__swsetup_r+0x14>
 80120fc:	6a03      	ldr	r3, [r0, #32]
 80120fe:	b90b      	cbnz	r3, 8012104 <__swsetup_r+0x14>
 8012100:	f7fc f844 	bl	800e18c <__sinit>
 8012104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012108:	0719      	lsls	r1, r3, #28
 801210a:	d422      	bmi.n	8012152 <__swsetup_r+0x62>
 801210c:	06da      	lsls	r2, r3, #27
 801210e:	d407      	bmi.n	8012120 <__swsetup_r+0x30>
 8012110:	2209      	movs	r2, #9
 8012112:	602a      	str	r2, [r5, #0]
 8012114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012118:	f04f 30ff 	mov.w	r0, #4294967295
 801211c:	81a3      	strh	r3, [r4, #12]
 801211e:	e033      	b.n	8012188 <__swsetup_r+0x98>
 8012120:	0758      	lsls	r0, r3, #29
 8012122:	d512      	bpl.n	801214a <__swsetup_r+0x5a>
 8012124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012126:	b141      	cbz	r1, 801213a <__swsetup_r+0x4a>
 8012128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801212c:	4299      	cmp	r1, r3
 801212e:	d002      	beq.n	8012136 <__swsetup_r+0x46>
 8012130:	4628      	mov	r0, r5
 8012132:	f7fd f831 	bl	800f198 <_free_r>
 8012136:	2300      	movs	r3, #0
 8012138:	6363      	str	r3, [r4, #52]	@ 0x34
 801213a:	89a3      	ldrh	r3, [r4, #12]
 801213c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012140:	81a3      	strh	r3, [r4, #12]
 8012142:	2300      	movs	r3, #0
 8012144:	6063      	str	r3, [r4, #4]
 8012146:	6923      	ldr	r3, [r4, #16]
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	89a3      	ldrh	r3, [r4, #12]
 801214c:	f043 0308 	orr.w	r3, r3, #8
 8012150:	81a3      	strh	r3, [r4, #12]
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	b94b      	cbnz	r3, 801216a <__swsetup_r+0x7a>
 8012156:	89a3      	ldrh	r3, [r4, #12]
 8012158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801215c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012160:	d003      	beq.n	801216a <__swsetup_r+0x7a>
 8012162:	4621      	mov	r1, r4
 8012164:	4628      	mov	r0, r5
 8012166:	f000 f882 	bl	801226e <__smakebuf_r>
 801216a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801216e:	f013 0201 	ands.w	r2, r3, #1
 8012172:	d00a      	beq.n	801218a <__swsetup_r+0x9a>
 8012174:	2200      	movs	r2, #0
 8012176:	60a2      	str	r2, [r4, #8]
 8012178:	6962      	ldr	r2, [r4, #20]
 801217a:	4252      	negs	r2, r2
 801217c:	61a2      	str	r2, [r4, #24]
 801217e:	6922      	ldr	r2, [r4, #16]
 8012180:	b942      	cbnz	r2, 8012194 <__swsetup_r+0xa4>
 8012182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012186:	d1c5      	bne.n	8012114 <__swsetup_r+0x24>
 8012188:	bd38      	pop	{r3, r4, r5, pc}
 801218a:	0799      	lsls	r1, r3, #30
 801218c:	bf58      	it	pl
 801218e:	6962      	ldrpl	r2, [r4, #20]
 8012190:	60a2      	str	r2, [r4, #8]
 8012192:	e7f4      	b.n	801217e <__swsetup_r+0x8e>
 8012194:	2000      	movs	r0, #0
 8012196:	e7f7      	b.n	8012188 <__swsetup_r+0x98>
 8012198:	200001a0 	.word	0x200001a0

0801219c <_raise_r>:
 801219c:	291f      	cmp	r1, #31
 801219e:	b538      	push	{r3, r4, r5, lr}
 80121a0:	4605      	mov	r5, r0
 80121a2:	460c      	mov	r4, r1
 80121a4:	d904      	bls.n	80121b0 <_raise_r+0x14>
 80121a6:	2316      	movs	r3, #22
 80121a8:	6003      	str	r3, [r0, #0]
 80121aa:	f04f 30ff 	mov.w	r0, #4294967295
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80121b2:	b112      	cbz	r2, 80121ba <_raise_r+0x1e>
 80121b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121b8:	b94b      	cbnz	r3, 80121ce <_raise_r+0x32>
 80121ba:	4628      	mov	r0, r5
 80121bc:	f000 f830 	bl	8012220 <_getpid_r>
 80121c0:	4622      	mov	r2, r4
 80121c2:	4601      	mov	r1, r0
 80121c4:	4628      	mov	r0, r5
 80121c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121ca:	f000 b817 	b.w	80121fc <_kill_r>
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d00a      	beq.n	80121e8 <_raise_r+0x4c>
 80121d2:	1c59      	adds	r1, r3, #1
 80121d4:	d103      	bne.n	80121de <_raise_r+0x42>
 80121d6:	2316      	movs	r3, #22
 80121d8:	6003      	str	r3, [r0, #0]
 80121da:	2001      	movs	r0, #1
 80121dc:	e7e7      	b.n	80121ae <_raise_r+0x12>
 80121de:	2100      	movs	r1, #0
 80121e0:	4620      	mov	r0, r4
 80121e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80121e6:	4798      	blx	r3
 80121e8:	2000      	movs	r0, #0
 80121ea:	e7e0      	b.n	80121ae <_raise_r+0x12>

080121ec <raise>:
 80121ec:	4b02      	ldr	r3, [pc, #8]	@ (80121f8 <raise+0xc>)
 80121ee:	4601      	mov	r1, r0
 80121f0:	6818      	ldr	r0, [r3, #0]
 80121f2:	f7ff bfd3 	b.w	801219c <_raise_r>
 80121f6:	bf00      	nop
 80121f8:	200001a0 	.word	0x200001a0

080121fc <_kill_r>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	2300      	movs	r3, #0
 8012200:	4d06      	ldr	r5, [pc, #24]	@ (801221c <_kill_r+0x20>)
 8012202:	4604      	mov	r4, r0
 8012204:	4608      	mov	r0, r1
 8012206:	4611      	mov	r1, r2
 8012208:	602b      	str	r3, [r5, #0]
 801220a:	f7f1 fb54 	bl	80038b6 <_kill>
 801220e:	1c43      	adds	r3, r0, #1
 8012210:	d102      	bne.n	8012218 <_kill_r+0x1c>
 8012212:	682b      	ldr	r3, [r5, #0]
 8012214:	b103      	cbz	r3, 8012218 <_kill_r+0x1c>
 8012216:	6023      	str	r3, [r4, #0]
 8012218:	bd38      	pop	{r3, r4, r5, pc}
 801221a:	bf00      	nop
 801221c:	20001aa8 	.word	0x20001aa8

08012220 <_getpid_r>:
 8012220:	f7f1 bb42 	b.w	80038a8 <_getpid>

08012224 <__swhatbuf_r>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	460c      	mov	r4, r1
 8012228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801222c:	4615      	mov	r5, r2
 801222e:	2900      	cmp	r1, #0
 8012230:	461e      	mov	r6, r3
 8012232:	b096      	sub	sp, #88	@ 0x58
 8012234:	da0c      	bge.n	8012250 <__swhatbuf_r+0x2c>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	2100      	movs	r1, #0
 801223a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801223e:	bf14      	ite	ne
 8012240:	2340      	movne	r3, #64	@ 0x40
 8012242:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012246:	2000      	movs	r0, #0
 8012248:	6031      	str	r1, [r6, #0]
 801224a:	602b      	str	r3, [r5, #0]
 801224c:	b016      	add	sp, #88	@ 0x58
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	466a      	mov	r2, sp
 8012252:	f000 f849 	bl	80122e8 <_fstat_r>
 8012256:	2800      	cmp	r0, #0
 8012258:	dbed      	blt.n	8012236 <__swhatbuf_r+0x12>
 801225a:	9901      	ldr	r1, [sp, #4]
 801225c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012260:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012264:	4259      	negs	r1, r3
 8012266:	4159      	adcs	r1, r3
 8012268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801226c:	e7eb      	b.n	8012246 <__swhatbuf_r+0x22>

0801226e <__smakebuf_r>:
 801226e:	898b      	ldrh	r3, [r1, #12]
 8012270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012272:	079d      	lsls	r5, r3, #30
 8012274:	4606      	mov	r6, r0
 8012276:	460c      	mov	r4, r1
 8012278:	d507      	bpl.n	801228a <__smakebuf_r+0x1c>
 801227a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801227e:	6023      	str	r3, [r4, #0]
 8012280:	6123      	str	r3, [r4, #16]
 8012282:	2301      	movs	r3, #1
 8012284:	6163      	str	r3, [r4, #20]
 8012286:	b003      	add	sp, #12
 8012288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801228a:	466a      	mov	r2, sp
 801228c:	ab01      	add	r3, sp, #4
 801228e:	f7ff ffc9 	bl	8012224 <__swhatbuf_r>
 8012292:	9f00      	ldr	r7, [sp, #0]
 8012294:	4605      	mov	r5, r0
 8012296:	4639      	mov	r1, r7
 8012298:	4630      	mov	r0, r6
 801229a:	f7fc ffef 	bl	800f27c <_malloc_r>
 801229e:	b948      	cbnz	r0, 80122b4 <__smakebuf_r+0x46>
 80122a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a4:	059a      	lsls	r2, r3, #22
 80122a6:	d4ee      	bmi.n	8012286 <__smakebuf_r+0x18>
 80122a8:	f023 0303 	bic.w	r3, r3, #3
 80122ac:	f043 0302 	orr.w	r3, r3, #2
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	e7e2      	b.n	801227a <__smakebuf_r+0xc>
 80122b4:	89a3      	ldrh	r3, [r4, #12]
 80122b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122be:	81a3      	strh	r3, [r4, #12]
 80122c0:	9b01      	ldr	r3, [sp, #4]
 80122c2:	6020      	str	r0, [r4, #0]
 80122c4:	b15b      	cbz	r3, 80122de <__smakebuf_r+0x70>
 80122c6:	4630      	mov	r0, r6
 80122c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122cc:	f000 f81e 	bl	801230c <_isatty_r>
 80122d0:	b128      	cbz	r0, 80122de <__smakebuf_r+0x70>
 80122d2:	89a3      	ldrh	r3, [r4, #12]
 80122d4:	f023 0303 	bic.w	r3, r3, #3
 80122d8:	f043 0301 	orr.w	r3, r3, #1
 80122dc:	81a3      	strh	r3, [r4, #12]
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	431d      	orrs	r5, r3
 80122e2:	81a5      	strh	r5, [r4, #12]
 80122e4:	e7cf      	b.n	8012286 <__smakebuf_r+0x18>
	...

080122e8 <_fstat_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	2300      	movs	r3, #0
 80122ec:	4d06      	ldr	r5, [pc, #24]	@ (8012308 <_fstat_r+0x20>)
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	4611      	mov	r1, r2
 80122f4:	602b      	str	r3, [r5, #0]
 80122f6:	f7f1 fb3d 	bl	8003974 <_fstat>
 80122fa:	1c43      	adds	r3, r0, #1
 80122fc:	d102      	bne.n	8012304 <_fstat_r+0x1c>
 80122fe:	682b      	ldr	r3, [r5, #0]
 8012300:	b103      	cbz	r3, 8012304 <_fstat_r+0x1c>
 8012302:	6023      	str	r3, [r4, #0]
 8012304:	bd38      	pop	{r3, r4, r5, pc}
 8012306:	bf00      	nop
 8012308:	20001aa8 	.word	0x20001aa8

0801230c <_isatty_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	2300      	movs	r3, #0
 8012310:	4d05      	ldr	r5, [pc, #20]	@ (8012328 <_isatty_r+0x1c>)
 8012312:	4604      	mov	r4, r0
 8012314:	4608      	mov	r0, r1
 8012316:	602b      	str	r3, [r5, #0]
 8012318:	f7f1 fb3b 	bl	8003992 <_isatty>
 801231c:	1c43      	adds	r3, r0, #1
 801231e:	d102      	bne.n	8012326 <_isatty_r+0x1a>
 8012320:	682b      	ldr	r3, [r5, #0]
 8012322:	b103      	cbz	r3, 8012326 <_isatty_r+0x1a>
 8012324:	6023      	str	r3, [r4, #0]
 8012326:	bd38      	pop	{r3, r4, r5, pc}
 8012328:	20001aa8 	.word	0x20001aa8

0801232c <_init>:
 801232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232e:	bf00      	nop
 8012330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012332:	bc08      	pop	{r3}
 8012334:	469e      	mov	lr, r3
 8012336:	4770      	bx	lr

08012338 <_fini>:
 8012338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233a:	bf00      	nop
 801233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801233e:	bc08      	pop	{r3}
 8012340:	469e      	mov	lr, r3
 8012342:	4770      	bx	lr
